




//////////////////////////////////
// Modal for joining a room by ID
//////////////////////////////////
module ROOT
{
    attribute popup;
    attribute closed = false;
    attribute result;

    method open(context)
    {
        self.result = false;
        self.closed = false;

        self.popup = main::SequenceUtil::ModalPage(context, ROOT);

        self.popup.open();
        return self.result;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;

        if (ROOT.popup != nil)
        {
            ROOT.popup.close();
            ROOT.popup = nil;
        }
    }

    method abort(context)
    {
        context.closeOSK();

        self.close(context);
        ContextMain.enableInput();
    }

    method onInitialize(context)
    {
        ROOT.setFocus(Popup::Pane::Body::ID::Text::input);
        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {

    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.setFocus(Popup::Pane::Body::Buttons::Cancel);

        return EVENTRESULT_FILTER;
    }

    module Popup::Pane::Body
    {
        module Buttons::Cancel
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                ROOT.close(context);
                return EVENTRESULT_FILTER;
            }

            method onCancel(context)
            {
                main::sound.play("cancel");
                ROOT.close(context);
                return EVENTRESULT_FILTER;
            }
        }

        module Buttons::OK
        {
            method onActivate(context)
            {
                var roomId;
                if (OnlineUtility.isLanMode())
                {
                    roomId = Popup::Pane::Body::ID::Text::input.value;
                    roomId = pdistd::MPDINetwork::ConvertIPv4Address32(roomId);
                }
                else
                {
                    var roomId = Popup::Pane::Body::ID::Text::input.value.toULong();
                    if (roomId < 1)
                    {
                        main::sound.play("disable");
                        return EVENTRESULT_FILTER;
                    }

                    roomId = roomId ^ Lobby.getRoomIdKey();
                }

                main::sound.play("ok");

                var ret = Lobby.getExternalRoomInfoSync(roomId);
                if (ret.isInstanceOf(Int) || ret.size < 1)
                {
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                        manager.translate("OnlineMessage", "ROOM_NOT_FOUND"));

                    return EVENTRESULT_FILTER;
                }

                var room = ret[0];
                if (room["version"] != OnlineUtility.getRoomVersion() || // Version mismatch?
                    room["roomType"] == gtengine::RoomType::CLUB_EVENT || // Room is club event, only members can join
                    (room["roomType"] == gtengine::RoomType::CLUB_LOBBY && room["scope"] != gtengine::Scope::PUBLIC) || // Room is club lobby, but not allowed to public
                    room["isHidden"]) // Room is marked as hidden
                {
                    // Then Room is "not found" for the user
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                        manager.translate("OnlineMessage", "ROOM_NOT_FOUND"));

                    return EVENTRESULT_FILTER;
                }

                // Join room
                var res = OnlineUtil::enterRoomWithProgressDialog(context, [room, nil]);
                if (res)
                {
                    ROOT.result = true;
                    ROOT.close(context);
                }

                return EVENTRESULT_FILTER;
            }
        }
    }
}