//---------------------------------------------------------------------------------------
// GetCarRoot.ad
//
// After buying a car root
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

#define TIRE_SPORTS_MEDIUM 4
#define PARTS_TYPE_FRONTTIRE 25

module PROJECT::ROOT
{
#ifdef GT4O_US_BETA
    static current_car;
    static current_col;
    static current_gcar;
    static current_price;
    static current_garage_idx;
#else
    static current_car = nil;
    static current_col = nil;
    static current_gcar = nil;
    static current_price = nil;
    static current_garage_idx = nil;
#endif
    static defaultProgress = main::menu::MProgress();
    
    Pane0.actor = main::menu::MMoveActor(Pane0, PS2_SCREEN_W_F, Pane0.y);
    Pane1.actor = main::menu::MMoveActor(Pane1, PS2_SCREEN_W_F, Pane1.y);
    Pane2.actor = main::menu::MMoveActor(Pane2, PS2_SCREEN_W_F, Pane2.y);

    function open(context, car_code, car_col, car_garage, price, garage_idx)
    {
        CarFace.action_type = "normal";
        CarFace.quality_level = 1;
        current_car = car_code;
        current_col = car_col;
        current_gcar = car_garage;
        current_price = price;
        current_garage_idx = garage_idx;
        start_page(context, ROOT);
    }

    function onInitialize(context)
    {
        enterPage(context, ROOT, "", 1);
        var car_name = nil;
        var col_name = nil;

        if (current_gcar != nil)
        {
            CarFace.car_garage = current_gcar;
            car_name = current_gcar.name;
            col_name = current_gcar.getColorName();
        }
        else
        {
            CarFace.car_code = current_car;
            CarFace.setColorIndex(current_col);
            car_name = main::menu::MCarData::GetCarName(current_car);
            col_name = CarFace.car_data.getColorName(current_col);
        }

        CarName.text = car_name;
        CarName.adjustScale();
        ColName.text = col_name;
        ColName.adjustScale();

        CarFace::move_car(1, 1);

        Pane0.actor.out = true;
        Pane0.actor.warp();
        Pane0.visible = false;

        Pane1.actor.out = true;
        Pane1.actor.warp();
        Pane1.visible = false;

        Pane2.actor.out = true;
        Pane2.actor.warp();
        Pane2.visible = false;

        main::sound.play("old_buy");

        context.cursor_visible = false;
        context.pushEvent(main::menu::MScriptEvent(context, ROOT, "start_phase0"));

        var tip = ROOT["Common"]["ToolTip"]["tip"];
        tip.remove();

        var gcar = current_gcar != nil ? current_gcar : main::menu::MCarGarage(current_car);
        if (gcar.isHavingParts(PARTS_TYPE_FRONTTIRE, TIRE_SPORTS_MEDIUM))
            tip.value = context.translate(ROOT, "guide for tire");
    }

    function onFinalize(context)
    {
        leavePage(context, ROOT);
        current_car = nil;
        current_col = nil;
        current_gcar = nil;
        current_price = nil;
        current_garage_idx = nil;
    }

    function start_phase0(context)
    {
        context.sync(1.0);
        Pane0.visible = true;
        Pane0.actor.out = false;
        ROOT.setFocus(Pane0::Yes);
        context.cursor_visible = true;
    }

    function start_phase1(context, change)
    {
        defaultProgress.value = 0.0;
        defaultProgress.value = 0.0; // Ok?

        Pane1::progress.progress = defaultProgress;
        ROOT.setFocus(nil);

        context.cursor_visible = false;

        Pane0.actor.out = true;

        context.sync(0.5);
        Pane0.visible = false;
        Pane1.visible = true;
        Pane1.actor.out = false;

        context.sync(0.5);
        main::game.incMoney(-current_price);

        var prevCar = main::menu::MCarGarage();
        prevCar.copyFrom(main::game.garage.riding_car);

        if (change)
        {
            var garage = main::game.garage;
            var idx = current_garage_idx;
            var manager = nil;

            while (1)
            {
                manager = checkGameData(context, 0, manager);
                if (manager != nil)
                {
                    var r = garage.changeRidingCar(idx, manager);
                    if (r == "OK")
                    {
                        break;
                    }
                    
                    if (reportGameDataError(context, 0, 1, r))
                        continue; // COMPILER NOTE: Should jump to bottom of loop then go back to top, not jump to top directly
                }

                openConfirmDialog(context, DIALOG_OK, context.translate(BuyCarRoot, "cancel change car"));
                change = false;
                break;
            }
        }

        var attachPlay = false;
        if (main::game.option.auto_save || change)
        {
            var manager = main::menu::MMemoryCardManager("MODE_SAVE_GAME");
            manager.progress.value = 0.0;

            Pane1::progress.progress = manager.progress;
            var file = manager.getNewFile();
            var datasize = file.size;
            setMcAccessIndicator(ROOT::Common::Header::Memorycard);
            startMcWatcher(context, manager);

            do
            {

            }
            while (!autoSaveImpl(context, manager, datasize, &attachPlay));
            
            endMcWatcher();
        }

        if (!attachPlay)
        {
            main::game.setNeedSave();
            var progress = main::menu::MProgress();
            progress.value = 0.0;
            progress.value = 0.3; // ??? It's not even assigned to any UI component yet
            Pane1::progress.progress = progress;
            context.sync(2.0); // That looks like a hack
            progress.value = 1.0;

            if (change)
            {
                main::game.garage.cancelRidingCar(prevCar.getGarageIndex(), prevCar);
                change = false;
            }
        }

        context.sync(0.5);

        if (change)
            refreshRideCar(ROOT, context);
        
        refreshMoney(ROOT);
        Pane1.actor.out = true;
        context.sync(0.5);
        Pane1.visible = false;
        Pane2.visible = true;
        ROOT.setFocus(Pane2::OK);
        Pane2.actor.out = false;
        context.cursor_visible = true;
        context.flushKeyEvent();
        Pane1::progress.progress = defaultProgress;
    }
}

module PROJECT::ROOT::CarFace
{
    function move_car(phase, warp)
    {
        if (CarFace.car_model != nil)
        {
            if (phase == false)
            {
                CarFace.car_model.motion = 1;
                if (warp == true)
                {
                    CarFace.car_model.tz = 8.5;
                    CarFace.car_model.ry = 180.0;
                    CarFace.car_model.warp();
                }

                CarFace.car_model.tx = 0.0;
                CarFace.car_model.tz = 0.0;
                CarFace.car_model.posInterpolateSpeed = 0.025;
            }
            else
            {
                CarFace.car_model.motion = 2;
                CarFace.car_model.tx = -0.9;
                CarFace.car_model.tz = 1.6;
                CarFace.car_model.ry = 185.5;
                CarFace.car_model.posInterpolateSpeed = 0.1;

                if (warp == true)
                    CarFace.car_model.warp();
            }
        }
    }
}

module PROJECT::ROOT::Pane0::Yes
{
    function onActivate(context, event)
    {
        main::sound.play("ok");
        context.pushEvent(main::menu::MScriptEvent(context, ROOT, "start_phase1", [true]));
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane0::No
{
    function onActivate(context, event)
    {
        main::sound.play("ok");
        context.pushEvent(main::menu::MScriptEvent(context, ROOT, "start_phase1", [false]));
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane2::OK
{
    function onActivate(context, event)
    {
        main::sound.play("ok");
        if (BuyCarRoot::current_type == "used")
            BuyCarRoot::closeUsedCar(context);
        else
            start_page(context, BuyCarRoot);

        return EVENTRESULT_FILTER;
    }
}