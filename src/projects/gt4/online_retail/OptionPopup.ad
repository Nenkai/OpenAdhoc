module PROJECT::ROOT
{
    static original_y = Pane.y;

    function open(context)
    {
        OptionPopup.setFocus(Pane::ProxyAddr::IP::input);

        Pane.y = PS2_SCREEN_H_F;

        context.pushPage(OptionPopup);

        while (!Pane.interpolateY(original_y, 0.3))
            context.sync();

        context.cursor_visible = true;
    }

    function close(context)
    {
        context.cursor_visible = false;

        OptionPopup.setFocus(nil);

        while (!Pane.interpolateY(-200.0, 0.3))
            context.sync();

        context.closePage(OptionPopup);
    }

    function initialize_optionmenu(context, optionmenu, options)
    {
        var vbox = optionmenu["popup"]["vbox"];
        var num  = options.size;
        

        for (var i = 0; i < num; i++)
        {
            var item = StoreHouse::SettingItem.doCopy();

            item["label"].text = context.translate(OptionPopup, options[i]);
            item.name = options[i];

            vbox.appendChild(item);
        }

        optionmenu.applyAppend(context);
    }

	function apply_option(context)
	{
		var option  = main::game.option;
		var netconf = option.netconf;
		netconf.use_proxy  = (Pane::ProxyAddr::IP::input.value != "");
		netconf.proxy      = Pane::ProxyAddr::IP::input.value;
		netconf.proxy_port = Pane::ProxyPort::Port::port::input.value;
		option.netconf = netconf;
		option.wide_mode     = Pane::Screen::OptionMenu.index;
		option.replay_bgm    = (Pane::Bgm::OptionMenu.index == 0);
		option.vibration_1p  = (Pane::Vibration::OptionMenu.index == 0);
		option.apply();
	}

	function reflect_option(context)
	{
		var option = main::game.option;
	
		if (option.netconf.use_proxy)
			Pane::ProxyAddr::IP::input.value = option.netconf.proxy;
		else
			Pane::ProxyAddr::IP::input.value = "";
	
		Pane::ProxyPort::Port::port::input.value = option.netconf.proxy_port;
	
		Pane::Screen::OptionMenu.setIndex(context, option.wide_mode);
		Pane::Bgm::OptionMenu.setIndex(context, !option.replay_bgm);
		Pane::Vibration::OptionMenu.setIndex(context, !option.vibration_1p);
	}
	
	function onInitialize(context)
	{
		reflect_option(context);
	}
	
	function onCancel(context, event, item)
	{
		main::sound.play("cancel");
		reflect_option(context);
		close(context);
		return EVENTRESULT_FILTER;
	}

	function onKeyPress(context, event)
	{
		if (event.keysym == XK_F5)
		{
			var option = main::game.option;
			var netconf = option.netconf;
	
			netconf.use_proxy = true;
			netconf.proxy = "proxy.polyphony.scei.co.jp";
			netconf.proxy_port = 10080;
	
			option.netconf = netconf;
			option.apply();
	
			reflect_option(context);
			return EVENTRESULT_FILTER;
		}
	
		return EVENTRESULT_CONTINUE;
	}
}

module PROJECT::ROOT::Pane::ProxyAddr::IP::input
{
    function onActivate(context, index)
    {
        main::sound.play("cursor");
        OptionPopup.setFocus(ProxyPort::Port::port::input);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Screen::OptionMenu
{
    function onValueChanged(context, index)
    {
        main::sound.play("ok");
    }
}

module PROJECT::ROOT::Pane::Bgm::OptionMenu
{
    function onValueChanged(context, index)
    {
        main::sound.play("ok");
    }
}

module PROJECT::ROOT::Pane::Vibration::OptionMenu
{
    function onValueChanged(context, index)
    {
        main::sound.play("ok");
    }
}

module PROJECT::ROOT::Pane::OK
{
    function onActivate(context, event, item)
    {
        main::sound.play("next");
        apply_option(context);
        close(context);
        return EVENTRESULT_FILTER;
    }
}