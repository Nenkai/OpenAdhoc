


















function initStatic()
{
    main::PLAY_STAGE_at_top = true;

    main::Transcoder = pdistd::MSailTranscoder();
    main::SaveUtil = pdiext::MSaveDataUtil();
    main::SaveCallback = pdiapp::MSaveDataCallback();

    main::SaveCallback.setCallback(main::SaveUtil);

    pdiext::MSystemConfiguration::GetOSDUserId();
}

function initSpecDB(type)
{
    var specdb = "PREVIEW";
    switch (type)
    {
        case "gt6":
            specdb = "GT6"; break;
        case "academy":
            specdb = "GT6"; break;
        
        case "demo":
            specdb = "DEMO"; break;
    }

    if (AppOpt["specdb"] != nil)
        specdb = AppOpt["specdb"];

    SpecDatabaseUtil::open(specdb);
    var lang = pdistd::MLocale::getLanguage() == "JP" ? "JP" : "US";
    gtengine::MSpecDB::initialize(SPECDB, "specdb/%{specdb}/%{lang}/CarName.dat", true);
}


function initMenuDB()
{
    var key0 = "\xE3\xEF\xD8\x88\x81\x31\x5C\xA9\xF3\xA5\xD8\xAA\xFE\xC2\xC5\xF1\x01\x75\xDF\xBE\x70\x83\xDA\x4C\x07\x3A\x48\xE5\x2C\xC0\x1C\x43";
    var k = "\x81\xCE\x29\x38\x73\xB3\x42\xF4\xC9\x6E\x85\x0C\x97\x7C\xBF\x7F\x9D\xF6\x74\xDA\xC0\x07\xCA\x19\x51\xB8\x21\x50\x9F\x3A\xDF\xA4";
    var key1 = "\x4C\x6E\x4C\x9E\x70\xEE\x2E\xF1\x90\x31\x57\xBB\xF7\x6C\xA0\x4F\x15\xF0\xA9\x57\x31\x5E\x7C\xD3\xE3\x9C\x5F\x2E\x36\xCA\xFA\x3B";
    main::MENUDB = pdistd::MSqlite();
    var res = MENUDB.open("/database/gt6/menudb.dat", 0, 
        1, 
        k);

    MENUDB.executeQuery("PRAGMA cache_size = 2000");
}

function init_user_db()
{
    var res = USERDB.open("/APP_DATA/db/userdb0101.dat", 8 * 1024 * 1024, 
        0x02 | 0x04);
    if (res != 0)
        return false;
    
    
    res = ReplayFileUtil::initialize();
    if (!res)
        return false;
    res = PhotoFileUtil::initialize();
    if (!res)
        return false;
    
    res = DBUtil::updateTableVersion(USERDB, "t_db_master", 100);
    if (!res)
        return false;
    
    return true;
}

function initUserDB()
{
    main::USERDB = pdistd::MSqlite();
    var res = init_user_db();
    if (!res)
    {
        USERDB.close();

        pdistd::RemoveFile("/APP_DATA/db/userdb0101.dat");
        res = init_user_db();
        if (!res)
        {
            ErrorUtil::abortDiskFull(26, "32MB", __FILE__, __LINE__);
        }
        boot_state.is_corrupted_user_db = true;
    }
}

function initFundamentalNetworkObjects()
{
    main::PDINetwork = pdistd::MPDINetwork();
    
    main::NP = PDINetwork.getNP();

    var communication_id = pdiext::MProductInformation::GetNPCommunicationID();
    main::NP.setCommunicationId(communication_id);


    var passphrase = pdistd::MDynRes::importBlob(communication_id + "_NP_PASSPHRASE", "NP_PASSPHRASE_SIZE");
    if (passphrase != nil)
        main::NP.setCommunicationPassphrase(passphrase);
    else
        ;
    
    var signature = pdistd::MDynRes::importBlob(communication_id + "_NP_SIGNATURE", "NP_SIGNATURE_SIZE");
    if (signature != nil)
        main::NP.setCommunicationSignature(signature);
    else
        ;

    var ticketauth_service_id = pdiext::MProductInformation::GetTicketAuthServiceID();
    main::NP.setTicketServiceId(ticketauth_service_id);


    var service_id = pdiext::MProductInformation::GetServiceID();
    main::NP.setCommerceServiceId(service_id);

    NP.initialize();
}


function initNetworkObjects(context, type)
{

    main::Httpc = pdiext::MHttpc();
    main::Httpc.initialize();

    main::Grim2 = pdiext::MGrim2();
    main::News2 = pdiext::MNews2();
    main::Tv2 = pdiext::MTv2();
    main::EventRace2 = pdiext::MEventRace2();
    main::Ranking2 = pdiext::MRanking2();
    main::Replay2 = pdiext::MReplay2();
    main::UserProfile2 = pdiext::MUserProfile2();
    main::GTMail = pdiext::MGTMail();
    main::Photo = pdiext::MPhoto();
    main::Matching2 = pdiext::MMatching2();
    main::Community = pdiext::MCommunity();
    main::Activity = pdiext::MActivity();
    main::Bbs2 = pdiext::MBbs2();
    main::Course = pdiext::MCourse();



    main::AVChat = pdistd::MAVChat();

    main::Lobby = main::gtengine::MLobby();


    main::Clan = main::gtengine::MClan();

    main::ServicePublisher = gtengine::MServicePublisher();


    main::OnlineUtility = main::gtengine::MOnlineUtility();


    main::GTServiceManager = main::gtengine::MGTServiceManager();


    main::NUS = pdistd::MNetworkUserStorage();

    main::NpEula = pdistd::MNpEula();

    ServerUtil::initialize(context);
}

function initResidentProject1()
{
    main::cursor_project = __projects__::CursorProject;
    main::dialog_project = main::manager.loadResidentProject(PROJECT_ROOT_DIR + "/dialog/dialog");
}

function initResidentProject2()
{
    main::ui_kit_project = main::manager.loadResidentProject(PROJECT_ROOT_DIR + "/ui_kit/ui_kit");
    main::setting_project = main::manager.loadResidentProject(PROJECT_ROOT_DIR + "/setting/setting");
}

function initConfig()
{
    var config_file = main::GetVersionBranch();
    module ::main
    {
        require "%{PROJECT_ROOT_DIR}/config/%{config_file}";
    }
}

function initOrganizer()
{
    main::ORG = gtengine::MOrganizer();
    ORG.initialize();
    ORG.startGameObjectLoop();
    ORG.enableRenderingRace();
    ORG.enableSoundingRace();
}

function initRaceOperator()
{
    main::RaceOperator = gtengine::MRaceOperator();

    var few_cars = RaceOperator.getMemoryAssign_FewCars();
    few_cars.nb_vehicle = 4;
    few_cars.set_size = (((116 - (4 * 8)) * 1024) * 1024) - ((4 * 128) * 1024); // Check this

    var data_logger = RaceOperator.getMemoryAssign_DataLogger();
    data_logger.nb_vehicle = 0;
    data_logger.set_size = (32 * 1024) * 1024;
    data_logger.car_size = 0;
    data_logger.car_option_size = 0;
    data_logger.driver_size = 0;
    data_logger.replay_size = 0;
    data_logger.sound_size = 0;

    RaceOperator.setOrganizer(ORG);
}

function initDebug()
{
    if (main::AppOpt.defined("no_meter"))
    {
        pdiext::SetDrawPerfMeter(main::AppOpt["no_meter"].toInt() == 0);
    }

    if (main::AppOpt.defined("grpdebug"))
    {
        var level = main::AppOpt["grpdebug"].toInt();
        pdistd::MDynRes::setInt32("ModelSetDebugMode", level);
        pdistd::MDynRes::setInt32("CourseDebugMode", level);
        pdistd::MDynRes::setInt32("CameraDebugMode", level);
    }
}



function declare_play_normal(controller, device, port_max, button_channel, analog_channel)
{
    var port = 0;
    while (port < port_max)
    {
        if (button_channel != nil)
        {
            controller.declare(gtengine::InputMode::PLAY_NORMAL, device, port, "button", pdistd::SuperPortButtonBit[button_channel]);
        }

        if (analog_channel != nil)
        {
            controller.declare(gtengine::InputMode::PLAY_NORMAL, device, port, "analog", pdistd::SuperPortAnalogChannel[analog_channel]);
        }

        ++port;
    }
}

function DeclareControllers()
{
    var controller = gtengine::MController();
    declare_play_normal(controller, "SIXAXIS", 2, "UP", "PRESS_UP");
    declare_play_normal(controller, "SIXAXIS", 2, "DOWN", "PRESS_DOWN");
    declare_play_normal(controller, "SIXAXIS", 2, "LEFT", "PRESS_LEFT");
    declare_play_normal(controller, "SIXAXIS", 2, "RIGHT", "PRESS_RIGHT");
    declare_play_normal(controller, "SIXAXIS", 2, "CIRCLE", "PRESS_CIRCLE");
    declare_play_normal(controller, "SIXAXIS", 2, "CROSS", "PRESS_CROSS");
    declare_play_normal(controller, "SIXAXIS", 2, "TRIANGLE", "PRESS_TRIANGLE");
    declare_play_normal(controller, "SIXAXIS", 2, "SQUARE", "PRESS_SQUARE");
    declare_play_normal(controller, "SIXAXIS", 2, "L1", "PRESS_L1");
    declare_play_normal(controller, "SIXAXIS", 2, "R1", "PRESS_R1");
    declare_play_normal(controller, "SIXAXIS", 2, "L2", "PRESS_L2");
    declare_play_normal(controller, "SIXAXIS", 2, "R2", "PRESS_R2");
    declare_play_normal(controller, "SIXAXIS", 2, nil, "STICK_BY1F");
    declare_play_normal(controller, "SIXAXIS", 2, nil, "STICK_BY1L");
    declare_play_normal(controller, "SIXAXIS", 2, nil, "STICK_BX1");
    declare_play_normal(controller, "SIXAXIS", 2, nil, "STICK_BX1F");
    declare_play_normal(controller, "SIXAXIS", 2, nil, "STICK_BX1L");
    declare_play_normal(controller, "SIXAXIS", 2, nil, "STICK_BY2F");
    declare_play_normal(controller, "SIXAXIS", 2, nil, "STICK_BY2L");
    declare_play_normal(controller, "SIXAXIS", 2, nil, "STICK_BX2");
    declare_play_normal(controller, "SIXAXIS", 2, nil, "STICK_BX2F");
    declare_play_normal(controller, "SIXAXIS", 2, nil, "STICK_BX2L");
    declare_play_normal(controller, "SIXAXIS", 2, "L3", nil);
    declare_play_normal(controller, "SIXAXIS", 2, "R3", nil);
    declare_play_normal(controller, "SIXAXIS", 2, "START", nil);
    declare_play_normal(controller, "SIXAXIS", 2, "SELECT", nil);
    declare_play_normal(controller, "SIXAXIS", 2, "UP", nil);
    declare_play_normal(controller, "SIXAXIS", 2, "DOWN", nil);
    declare_play_normal(controller, "SIXAXIS", 2, "LEFT", nil);
    declare_play_normal(controller, "SIXAXIS", 2, "RIGHT", nil);


    declare_play_normal(controller, "COUGAR", 2, "A", nil);
    declare_play_normal(controller, "COUGAR", 2, "B", nil);
    declare_play_normal(controller, "COUGAR", 2, "X", nil);
    declare_play_normal(controller, "COUGAR", 2, "Y", nil);
    declare_play_normal(controller, "COUGAR", 2, "R", nil);
    declare_play_normal(controller, "COUGAR", 2, "L", nil);


    declare_play_normal(controller, "JAGUAR", 2, "UP", nil);
    declare_play_normal(controller, "JAGUAR", 2, "DOWN", nil);
    declare_play_normal(controller, "JAGUAR", 2, "LEFT", nil);
    declare_play_normal(controller, "JAGUAR", 2, "RIGHT", nil);
    declare_play_normal(controller, "JAGUAR", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "JAGUAR", 2, "CROSS", nil);
    declare_play_normal(controller, "JAGUAR", 2, "SQUARE", nil);
    declare_play_normal(controller, "JAGUAR", 2, "CIRCLE", nil);
    declare_play_normal(controller, "JAGUAR", 2, "R", nil);
    declare_play_normal(controller, "JAGUAR", 2, "R1", nil);
    declare_play_normal(controller, "JAGUAR", 2, "R2", nil);
    declare_play_normal(controller, "JAGUAR", 2, "L", nil);
    declare_play_normal(controller, "JAGUAR", 2, "L1", nil);
    declare_play_normal(controller, "JAGUAR", 2, "L2", nil);
    declare_play_normal(controller, "JAGUAR", 2, "START", nil);
    declare_play_normal(controller, "JAGUAR", 2, "SELECT", nil);


    declare_play_normal(controller, "TIGAR", 2, "UP", nil);
    declare_play_normal(controller, "TIGAR", 2, "DOWN", nil);
    declare_play_normal(controller, "TIGAR", 2, "LEFT", nil);
    declare_play_normal(controller, "TIGAR", 2, "RIGHT", nil);
    declare_play_normal(controller, "TIGAR", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "TIGAR", 2, "CROSS", nil);
    declare_play_normal(controller, "TIGAR", 2, "SQUARE", nil);
    declare_play_normal(controller, "TIGAR", 2, "CIRCLE", nil);
    declare_play_normal(controller, "TIGAR", 2, "R1", nil);
    declare_play_normal(controller, "TIGAR", 2, "R2", nil);
    declare_play_normal(controller, "TIGAR", 2, "R3", nil);
    declare_play_normal(controller, "TIGAR", 2, "L1", nil);
    declare_play_normal(controller, "TIGAR", 2, "L2", nil);
    declare_play_normal(controller, "TIGAR", 2, "L3", nil);
    declare_play_normal(controller, "TIGAR", 2, "START", nil);
    declare_play_normal(controller, "TIGAR", 2, "SELECT", nil);


    declare_play_normal(controller, "CHEETAH", 2, "UP", nil);
    declare_play_normal(controller, "CHEETAH", 2, "DOWN", nil);
    declare_play_normal(controller, "CHEETAH", 2, "LEFT", nil);
    declare_play_normal(controller, "CHEETAH", 2, "RIGHT", nil);
    declare_play_normal(controller, "CHEETAH", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "CHEETAH", 2, "CROSS", nil);
    declare_play_normal(controller, "CHEETAH", 2, "SQUARE", nil);
    declare_play_normal(controller, "CHEETAH", 2, "CIRCLE", nil);
    declare_play_normal(controller, "CHEETAH", 2, "R1", nil);
    declare_play_normal(controller, "CHEETAH", 2, "R2", nil);
    declare_play_normal(controller, "CHEETAH", 2, "R3", nil);
    declare_play_normal(controller, "CHEETAH", 2, "L1", nil);
    declare_play_normal(controller, "CHEETAH", 2, "L2", nil);
    declare_play_normal(controller, "CHEETAH", 2, "L3", nil);
    declare_play_normal(controller, "CHEETAH", 2, "START", nil);
    declare_play_normal(controller, "CHEETAH", 2, "SELECT", nil);
    declare_play_normal(controller, "CHEETAH", 2, "SHIFT_DOWN", nil);
    declare_play_normal(controller, "CHEETAH", 2, "SHIFT_UP", nil);


    declare_play_normal(controller, "PANTHER", 2, "UP", nil);
    declare_play_normal(controller, "PANTHER", 2, "DOWN", nil);
    declare_play_normal(controller, "PANTHER", 2, "LEFT", nil);
    declare_play_normal(controller, "PANTHER", 2, "RIGHT", nil);
    declare_play_normal(controller, "PANTHER", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "PANTHER", 2, "CROSS", nil);
    declare_play_normal(controller, "PANTHER", 2, "SQUARE", nil);
    declare_play_normal(controller, "PANTHER", 2, "CIRCLE", nil);
    declare_play_normal(controller, "PANTHER", 2, "R1", nil);
    declare_play_normal(controller, "PANTHER", 2, "R2", nil);
    declare_play_normal(controller, "PANTHER", 2, "R3", nil);
    declare_play_normal(controller, "PANTHER", 2, "L1", nil);
    declare_play_normal(controller, "PANTHER", 2, "L2", nil);
    declare_play_normal(controller, "PANTHER", 2, "L3", nil);
    declare_play_normal(controller, "PANTHER", 2, "START", nil);
    declare_play_normal(controller, "PANTHER", 2, "SELECT", nil);
    declare_play_normal(controller, "PANTHER", 2, "SHIFT_DOWN", nil);
    declare_play_normal(controller, "PANTHER", 2, "SHIFT_UP", nil);


    declare_play_normal(controller, "LEOPARD", 2, "UP", nil);
    declare_play_normal(controller, "LEOPARD", 2, "DOWN", nil);
    declare_play_normal(controller, "LEOPARD", 2, "LEFT", nil);
    declare_play_normal(controller, "LEOPARD", 2, "RIGHT", nil);
    declare_play_normal(controller, "LEOPARD", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "LEOPARD", 2, "CROSS", nil);
    declare_play_normal(controller, "LEOPARD", 2, "SQUARE", nil);
    declare_play_normal(controller, "LEOPARD", 2, "CIRCLE", nil);
    declare_play_normal(controller, "LEOPARD", 2, "R1", nil);
    declare_play_normal(controller, "LEOPARD", 2, "R2", nil);
    declare_play_normal(controller, "LEOPARD", 2, "R3", nil);
    declare_play_normal(controller, "LEOPARD", 2, "L1", nil);
    declare_play_normal(controller, "LEOPARD", 2, "L2", nil);
    declare_play_normal(controller, "LEOPARD", 2, "L3", nil);
    declare_play_normal(controller, "LEOPARD", 2, "START", nil);
    declare_play_normal(controller, "LEOPARD", 2, "SELECT", nil);
    declare_play_normal(controller, "LEOPARD", 2, "SHIFT_DOWN", nil);
    declare_play_normal(controller, "LEOPARD", 2, "SHIFT_UP", nil);
    declare_play_normal(controller, "LEOPARD", 2, "PLUS", nil);
    declare_play_normal(controller, "LEOPARD", 2, "MINUS", nil);
    declare_play_normal(controller, "LEOPARD", 2, "DIAL_OPEN", nil);
    declare_play_normal(controller, "LEOPARD", 2, nil, "RELATIVE_DIAL_B");


    declare_play_normal(controller, "TRS", 2, "UP", nil);
    declare_play_normal(controller, "TRS", 2, "DOWN", nil);
    declare_play_normal(controller, "TRS", 2, "LEFT", nil);
    declare_play_normal(controller, "TRS", 2, "RIGHT", nil);
    declare_play_normal(controller, "TRS", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "TRS", 2, "CROSS", nil);
    declare_play_normal(controller, "TRS", 2, "SQUARE", nil);
    declare_play_normal(controller, "TRS", 2, "CIRCLE", nil);
    declare_play_normal(controller, "TRS", 2, "R1", nil);
    declare_play_normal(controller, "TRS", 2, "R2", nil);
    declare_play_normal(controller, "TRS", 2, "R3", nil);
    declare_play_normal(controller, "TRS", 2, "L1", nil);
    declare_play_normal(controller, "TRS", 2, "L2", nil);
    declare_play_normal(controller, "TRS", 2, "L3", nil);
    declare_play_normal(controller, "TRS", 2, "START", nil);
    declare_play_normal(controller, "TRS", 2, "SELECT", nil);
    declare_play_normal(controller, "TRS", 2, "PADDLE_LEFT", nil);
    declare_play_normal(controller, "TRS", 2, "PADDLE_RIGHT", nil);


    declare_play_normal(controller, "T300RS", 2, "UP", nil);
    declare_play_normal(controller, "T300RS", 2, "DOWN", nil);
    declare_play_normal(controller, "T300RS", 2, "LEFT", nil);
    declare_play_normal(controller, "T300RS", 2, "RIGHT", nil);
    declare_play_normal(controller, "T300RS", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "T300RS", 2, "CROSS", nil);
    declare_play_normal(controller, "T300RS", 2, "SQUARE", nil);
    declare_play_normal(controller, "T300RS", 2, "CIRCLE", nil);
    declare_play_normal(controller, "T300RS", 2, "R1", nil);
    declare_play_normal(controller, "T300RS", 2, "R2", nil);
    declare_play_normal(controller, "T300RS", 2, "R3", nil);
    declare_play_normal(controller, "T300RS", 2, "L1", nil);
    declare_play_normal(controller, "T300RS", 2, "L2", nil);
    declare_play_normal(controller, "T300RS", 2, "L3", nil);
    declare_play_normal(controller, "T300RS", 2, "START", nil);
    declare_play_normal(controller, "T300RS", 2, "SELECT", nil);
    declare_play_normal(controller, "T300RS", 2, "PADDLE_LEFT", nil);
    declare_play_normal(controller, "T300RS", 2, "PADDLE_RIGHT", nil);


    declare_play_normal(controller, "UNCIA", 2, "UP", nil);
    declare_play_normal(controller, "UNCIA", 2, "DOWN", nil);
    declare_play_normal(controller, "UNCIA", 2, "LEFT", nil);
    declare_play_normal(controller, "UNCIA", 2, "RIGHT", nil);
    declare_play_normal(controller, "UNCIA", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "UNCIA", 2, "CROSS", nil);
    declare_play_normal(controller, "UNCIA", 2, "SQUARE", nil);
    declare_play_normal(controller, "UNCIA", 2, "CIRCLE", nil);
    declare_play_normal(controller, "UNCIA", 2, "R1", nil);
    declare_play_normal(controller, "UNCIA", 2, "R2", nil);
    declare_play_normal(controller, "UNCIA", 2, "R3", nil);
    declare_play_normal(controller, "UNCIA", 2, "R4", nil);
    declare_play_normal(controller, "UNCIA", 2, "R5", nil);
    declare_play_normal(controller, "UNCIA", 2, "L1", nil);
    declare_play_normal(controller, "UNCIA", 2, "L2", nil);
    declare_play_normal(controller, "UNCIA", 2, "L3", nil);
    declare_play_normal(controller, "UNCIA", 2, "L4", nil);
    declare_play_normal(controller, "UNCIA", 2, "L5", nil);
    declare_play_normal(controller, "UNCIA", 2, "START", nil);
    declare_play_normal(controller, "UNCIA", 2, "SELECT", nil);
    declare_play_normal(controller, "UNCIA", 2, "SHIFT_DOWN", nil);
    declare_play_normal(controller, "UNCIA", 2, "SHIFT_UP", nil);
}

function initialize_savedata()
{
    GlobalStatus::loadData(&main::GAME_STATUS, nil);
    if (main["BranchStatus"] != nil && 
        main::BranchStatus["SetDefault"] != nil)
        main::BranchStatus::SetDefault();
    
    
    GAME_STATUS.apply();
}

function initSaveData(context, new_game, no_load)
{
    DeclareControllers();

    main::GAME_STATUS = GlobalStatus::create();

    if (no_load || new_game)
    {
        initialize_savedata();
        return true;
    }

    new_game = false;

    var load_success = false;
    var try_backup = false;
    var version_error = false;
    |var result, var buf| = SaveDataUtilGT6::getBackgroundLoadResultFromFile(context);

    while (result == pdiext::SaveDataUtilError::SAVEDATAUTIL_NEED_RETRY_LOAD)
    {
        if (!SaveDataUtilGT6::isExistCurrentSaveData())
        {
            SaveDataUtilGT6::loadEveryWhereForGame(context, true);
        }
        else
        {
            SaveDataUtilGT6::loadEveryWhereForGame(context, false);
        }

        |result, buf| = SaveDataUtilGT6::getBackgroundLoadResultFromFile(context);
    }
    
    if (result == pdiext::SaveDataUtilError::SAVEDATAUTIL_SUCCESS 
        || result == pdiext::SaveDataUtilError::SAVEDATAUTIL_BIND_NEED_RECREATE)
    {
        |load_success, try_backup, version_error| = GlobalStatus::loadData(&main::GAME_STATUS, buf)
        if (GlobalStatus::getLoadedMinorVersion() > GlobalStatus::MINOR_VERSION)
        {
            pdistd::MSystemDialog::open("ENYD", manager.translate("SaveDataGT6", "ERROR_OLD_SAVEDATA"));
        }

        if (buf != nil)
        {
            if (boot_state.need_migration)
                SaveDataUtilGT6::saveMigration(context);
            else if (result == pdiext::SaveDataUtilError::SAVEDATAUTIL_BIND_NEED_RECREATE)
            {
                GAME_STATUS.user_profile.context.special_save = true;
                SaveDataUtilGT6::saveRecreateEveryWhere(context);
            }
        }
    }
    else
    {
        try_backup = true;
    }

    if (try_backup)
    {
        var succeed_backup = false;
        var result2;
        do
        {
            if (!SaveDataUtilGT6::isExistCurrentBackupSaveData(nil))
            {

                SaveDataUtilGT6::loadBackupEveryWhereForGame(nil, true);
            }
            else
            {

                SaveDataUtilGT6::loadBackupEveryWhereForGame(nil, false);
            }
            |result2, buf| = SaveDataUtilGT6::getBackgroundLoadResultFromAllFile(context);
        }
        while (result2 == pdiext::SaveDataUtilError::SAVEDATAUTIL_NEED_RETRY_LOAD)

        if (buf != nil)
        {
            var res = pdistd::MSystemDialog::open("YY", manager.translate("SaveDataGT6", "RECOVER_FROM_BACKUP"));
            var try_backup2 = false;
            var version_error2 = false;
            if (res == "YES")
            {
                |load_success, try_backup2, version_error2| = GlobalStatus::loadData(&main::GAME_STATUS, buf);
                if (GlobalStatus::getLoadedMinorVersion() > GlobalStatus::MINOR_VERSION)
                {
                    pdistd::MSystemDialog::open("ENYD", manager.translate("SaveDataGT6", "ERROR_OLD_SAVEDATA"));
                }
            }
            else
                ;

            if (!load_success)
            {
                main::Grim2.requestPutLog("MB=0:MU=%{main::PDINetwork.getClientName()}");
            }
            else 
            {
                main::Grim2.requestPutLog("MB=1:MU=%{main::PDINetwork.getClientName()}");
                succeed_backup = true;
                SaveDataUtilGT6::saveRecoveryEveryWhere(context);
                boot_state.recovery_save_data = true;
            }
        }

        if (!succeed_backup)
        {
            initialize_savedata();
            new_game = true;
        }
    }
    else
    {
        if (!load_success)
        {
            initialize_savedata();
            new_game = true;
        }
    }

    GAME_STATUS.user_profile.residence.refreshPlayerName();
    GAME_STATUS.user_profile.option.edit_course_data_id = -1;

    if (!new_game)
    {
        if (GlobalStatus::getLoadedMinorVersion() > GlobalStatus::MINOR_VERSION)
        {
            pdistd::MSystemDialog::open("ENYD", manager.translate("SaveDataGT6", "ERROR_OLD_SAVEDATA"));
        }

        var user = main::PDINetwork.getClientName();
        var up = GAME_STATUS.user_profile;
        if (up.cash < 0)
        {
            main::Grim2.requestPutLog("NG=10:NU=%{user}");
            main::GAME_STATUS = GlobalStatus::create();
            initialize_savedata();
            new_game = true;
        }
        else
        {
            if (up.cash >= 10000000) 
            {
                var s0 = up.bank_book.checkout(up.bank_book_blob)
                if (s0) 
                {
                    if (up.bank_book.diff >= 10000000) 
                        main::Grim2.requestPutLog("NG=40:NC=%{up.bank_book.diff}:NU=%{user}");

                    foreach (var diff in up.bank_book.history_diff)
                    {
                        if (diff >= 10000000)
                            main::Grim2.requestPutLog("NG=40:NC=%{diff}:NU=%{user}");
                    }

                    if (up.bank_book.diff >= 20000000)
                        up.i_cheated_with_increasing_money = true;
                }       
            }
        }

        validate_cash();
        vaccum();
    }
    else
    {
        GarageUtil::Thumbnail::removeAll();
    }

    GlobalStatus::clearInitializer();

    return new_game;
}

function doSave(context)
{
    StopWatchUtil::begin();
    SaveDataUtilGT6::saveEveryWhere(context);
    StopWatchUtil::end();
}

function doBackupSave(context)
{
    StopWatchUtil::begin();
    SaveDataUtilGT6::saveBackupEveryWhere(context);
    StopWatchUtil::end();
}

function vaccum()
{
    var page_count_list = GlobalStatus::getSqlite().executeQuery("PRAGMA page_count");
    if (page_count_list == nil || page_count_list.size == 0 || page_count_list[0].size == 0)
        return;

    var freelist_count_list = GlobalStatus::getSqlite().executeQuery("PRAGMA freelist_count");
    if (freelist_count_list == nil || freelist_count_list.size == 0 || freelist_count_list[0].size == 0)
        return;

    var page_count = page_count_list[0][0];
    var freelist_count = freelist_count_list[0][0];
    
    if (freelist_count == 0 || page_count == 0)
        return;

    var fragment_ratio = freelist_count.toFloat() / page_count;


    if (fragment_ratio >= 0.2f)
        GlobalStatus::getSqlite().executeQuery("VACCUM");
}

function anti_cheater()
{
    var up = GAME_STATUS.user_profile;
    if (up.cash < 0)
    {
        main::GAME_STATUS = GlobalStatus::create();
        initialize_savedata();
    }
}

function validate_cash()
{
    var up = GAME_STATUS.user_profile;
    var success = up.bank_book.checkout(up.bank_book_blob);
    if (!success)
    {
        var user = main::PDINetwork.getClientName();
        main::Grim2.requestPutLog("NG=30:NU=%{user}");
        up.cash = 0;
    }
    else if (up.bank_book.current < up.cash)
    {
        var user = main::PDINetwork.getClientName();
        main::Grim2.requestPutLog("NG=20:NU=%{user}");
        up.cash = up.bank_book.current;
    }
}

static message_stack = [];

function showVoucherMessageCB(type, arg)
{
    message_stack.push([type, arg]);
}

function showVoucherMessages(context)
{
    if (message_stack.size > 0)
    {
        SequenceUtil::startPageDirect(context, VacantRoot);
        foreach (var pair in message_stack)
        {
            |var type, var arg| = pair;
            VoucherUtil::showDialog(context, type, arg);
        }
    }
}

function loadVoucherData(context)
{
    PROJECT.load("/scripts/gt6/util/DLCUtil");
    PROJECT.load("/scripts/gt6/util/VoucherUtil");
    VoucherUtil::showDialogCB = showVoucherMessageCB;
    VoucherUtil::loadVouchers(context, main::GAME_STATUS, DLCUtil::isAvailableAnyTime(), true);
}

function initGrim(type)
{
    var grim_url = pdiext::MProductInformation::GetGrimURL();
    if (main::AppOpt["grim"] != nil && main::AppOpt["grim"] == "dev")
    {
        var cols = grim_url.split('.') // Symbol const?
        cols[0] = 'https://gt5pdev01'; // Also a symbol const
        grim_url = cols.join('.');
    }

    var use_db = true;

    if (main::Grim2 != nil)
    {
        var prefix = "GT6";
        switch (type)
        {
            case "academy":
                prefix = "ACADEMY2013";
                break;
            case "gt6":
            case "runviewer":
                break;
        }

        var fingerprint = pdistd::MDynRes::importBlob("%{prefix}_FINGERPRINT", "%{prefix}_FINGERPRINT_SIZE");
        var cert_name = "%{prefix}_CLIENT_CERTIFICATE";
        var privkey_name = "%{prefix}_CLIENT_PRIVATEKEY";
        var language = pdistd::MLocale::getLanguage().downcase();
        main::Grim2.initialize(grim_url, language, use_db, fingerprint, cert_name, privkey_name);
        main::Grim2.initialize2();
    }

    if (main::News2 != nil)
    {
        main::News2.initialize();
        main::News2.initialize2();
    }
    
    if (main::Tv2 != nil)
    {
        main::Tv2.initialize();
        main::Tv2.initialize2();
    }

    if (main::EventRace2 != nil)
    {
        main::EventRace2.initialize();
        main::EventRace2.initialize2();
    }

    if (main::Ranking2 != nil)
    {
        main::Ranking2.initialize2();
    }

    if (main::Replay2 != nil)
    {
        main::Replay2.initialize2();
    }

    if (main::UserProfile2 != nil)
    {
        main::UserProfile2.initialize2();
    }

    if (main::GTMail != nil)
    {
        main::GTMail.initialize2();
    }

    if (main::Photo != nil)
    {
        main::Photo.initialize2();
    }

    if (main::Matching2 != nil)
    {
        main::Matching2.initialize2();
    }

    if (main::Community != nil)
    {
        main::Community.initialize2();
    }

    if (main::Activity != nil)
    {
        main::Activity.initialize2();
    }

    if (main::Bbs2 != nil)
    {
        main::Bbs2.initialize2();
    }

    if (main::Course != nil)
    {
        main::Course.initialize2();
    }
}

function initGTService(context, type)
{
    var available = type == "runviewer" || type == "gt6";

    if (!available)
    {
        return;
    }

    GTServiceManager.setOrganizer(ORG);









    GTServiceManager.registerService(gtengine::ServiceType::SimulatorInterface);

    GTServiceManager.startUpdate();
}




function login(context, type, waitForWakingUp)
{
    if (AppOpt.defined("lanmode"))
    {
        OnlineUtility.setIsLanMode(true);
        return;
    }
    
    Login.setPatchFunction(processPatchEntry, [type]);


    Login.setSkipIfInterfaceDown(false);
    Login.setWaitInterfaceReady(false);


    var res = LoginUtil::tryLoginBackground(context, false);

    if (waitForWakingUp)
    {
        Login.waitForWakingUp();
    }
}

function beginInitTrophy()
{
    if (pdiext::MProductInformation::GetUseNPTrophyFlag())
    {
        PDINetwork.initializeTrophy(true, GetVersionBranch() != "gt6", 
            true);
    }
}


function endInitTrophy(context)
{
    if (pdiext::MProductInformation::GetUseNPTrophyFlag())
    {
        checkTrophyDiskSpace();
        var res = PDINetwork.waitUntilTrophyInitialized();
        
        if (!res)
        {
            if (GetVersionBranch() == "gt6")
            {
                PDINetwork.initializeTrophy(false, false, false);
            }
            else
                ;
        }
    }
}







function checkTrophyDiskSpace()
{
    if (pdiext::MProductInformation::GetUseNPTrophyFlag())
    {
        if (GetVersionBranch() == "gt6")
            PDINetwork.checkTrophyRequiredDiskSpace(true);
    }
}

function processPatchEntry(context, args)
{
    |var type| = args;
    processNetworkPatch(context, type);
    Login.finishUiProcess();
}

function processNetworkPatch(context, type)
{
    if (type != "gt6" && type != "academy")
        return;
    


    var prefix = nil;
    switch (type)
    {
        case "academy":
            prefix = "ACADEMY2013"; break;
        case "gt6":
        case "runviewer":
            prefix = "GT6"; break;
    }

    if (prefix != nil && LoginUtil::isOnline())
    {
        if (pdiext::MSystemPatch::existNetworkPatch() || AppOpt.defined("patch"))
        {
            var text = main::manager.translate("Network", "DO_YOU_DOWNLOAD_PATCH");
            var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, text);
            
            if (res)
            {
                PROJECT.load("/scripts/gt6/util/HttpUtil");

                HttpUtil::sInitParamsPatch.serverFingerprintPrefix = prefix;
                HttpUtil::sInitParamsPatch.clientCertNamePrefix = prefix;
                HttpUtil::sInitParamsPatch.clientPrivKeyPrefix = prefix;
                HttpUtil::begin(HttpUtil::sInitParamsPatch);

                context.cursor_visible = false;

                res = PatchRoot.open(context, PatchLogic::IDENT_TAG_NETWORK_PFS);
                HttpUtil::end();
                if (res)
                {
                    context.event_mask &= ~15;
                    context.cursor_visible = false;
                    main::pdiext::MSystemCondition::ExecGame();
                }

                context.cursor_visible = true;
            }
            else
            {
                log("[" + __FILE__ + ":" + __LINE__ + "]:" + "logout");
            }

            Grim2.setInitialize(false);
            yield;
        }
    }
}

function processStoragePatch(context)
{
    var patch_root_dir = PatchLogic::PATCH_ROOT_DIR_DEFAULT;
    if (AppOpt["patch_root"] != nil)
        patch_root_dir = AppOpt["patch_root"];


    if (pdiext::MSystemPatch::existStoragePatch(patch_root_dir) || AppOpt.defined("storagePatch"))
    {
        context.cursor_visible = false;


        var res = PatchRoot.open(context, PatchLogic::IDENT_TAG_TPPS_POSTINSTALL, patch_root_dir);

        if (res)
        {
            context.event_mask &= ~15;
            context.cursor_visible = false;
        }
        context.cursor_visible = true;


        main::pdiext::MSystemCondition::ExecGame();
    }
}

function putLogUserStatus()
{
    var up = GAME_STATUS.user_profile;
    var garage = up.garage;
    
    |var event_id, var past_second| = up.getLastPlayEventIDAndAfterSecond();
    var user = main::PDINetwork.getClientName();
    var strlog = "UG=%{garage.getCount()}:US=%{up.garage_stockyard_carcount}:UC=%{up.cash}:UD=%{up.gameday}:UF=%{up.total_photo_count}:UP=%{up.total_pay}:UE=%{event_id}:UT=%{past_second}:UU=%{user}";

    main::Grim2.requestPutLog(strlog);

    LoginUtil::setPresence(LoginUtil::isOnline());
}


function applyLanguage()
{
    if (GAME_STATUS.user_profile.option.extra_language != pdistd::Language::SYSTEM)
    {
        LangUtil::apply();
        LangUtil::translate_text(PROJECT);
    }
}

function applySaveData()
{
    GAME_STATUS.apply();

    if (!PDINetwork.isDummy() && GAME_STATUS.user_profile.context.special_save)
        PDINetwork.setTrophyUnlockRestriction(true);

    if (boot_state.is_corrupted_user_db)
    {
        PROJECT.load("/scripts/gt6/util/SalvageUtil");
        SalvageUtil::salvage();
        SalvageUtil.clearStatic();
    }

    if (IsPatchDemo())
    {
        if (!GAME_STATUS.user_profile.context.special_save)
        {
            pdistd::MSystemDialog::open("ENYD", "





                                                                                            No Save Data found.");
        }
        else
            ;
    }
}

function initGameData(context)
{
    var gdu = pdiext::MGameDataUtil();
    var dirname = main::pdiext::MProductInformation::GetGameDataNameCommon();

    var patch_size = 0;

    if (!gdu.isExistGameData(dirname))
    {
        var filesize = patch_size + (32 * 1024);

        PROJECT.load("/scripts/gt6/util/DataInstallUtil");
        PROJECT.load("/scripts/gt6/util/GameDataUtil");

        var title = manager.translate("GameDataGT6", "GAMEDATA_TITLE_WITHIN_128BYTES");
        var icon0 = "icon/gt6/game_icon.png";

        var success = GameDataUtil::createGameData(context, dirname, title, filesize, icon0, nil);
        if (!success)
        {
            context.disableInput();
            context.cursor_visible = false;
        }
    }
    gdu.checkGameData();
    gdu.convertGameData();
}

function isVoucherCar(car_code)
{
    var res = SPECDB.count("SELECT COUNT(*) FROM GENERIC_CAR WHERE ID=? AND SpecifyFlags1&%d".format(gtengine::GenericFlag::IS_VOUCHER_CAR), [car_code]);
    return res >= 1;
}

function resume_wait_func(context)
{
    for (var i = 0; i < 300; ++i)
    {
        context.wait();
        var state = context.getUpdateContext().getPadButtonState(0);
        if (state & 131072)
            return false;
    }

    return true;
}

function resumeSuspendRace(context, type)
{
    var resume = false;
    if (GAME_STATUS.user_profile.suspender.gp != nil)
    {
        var valid = true;
        var garage = GAME_STATUS.user_profile.garage;
        var entry_set = GAME_STATUS.user_profile.suspender.gp.event.entry_set;
        for (var i = 0; i < entry_set.entries.size; ++i)
        {
            var entry = entry_set.entries[i];
            var cp = entry.car_parameter;
            var is_voucher_car = isVoucherCar(cp.getCarCode());
            if (is_voucher_car)
            {
                if (garage.isInvalid(cp.getCarCode()))
                {
                    valid = false;
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, manager.translate("Boot", "RESUME_ERROR"));
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, manager.translate("CommonGTMode", "ERROR_INVALID_VOUCHER_CAR"));
                    break;
                }
            }
        }

        if (valid)
        {
            while (1)
            {
                var res = DialogUtil::openConfirmExecDialog(context, nil, 
                    manager.translate("Boot", "RESUME_PREPARATION"),
                    nil, nil, resume_wait_func, nil, nil);
                if (!res)
                {
                    res = DialogUtil::openConfirmDialog(context, DialogUtil::DEFAULT_NO, 
                        manager.translate("Boot", "RESUME_ABORT"));

                    if (res)
                    {
                        resume = false;
                        break;
                    }
                }
                else
                {
                    resume = true;
                    break;
                }
            }
        }

        if (resume && GAME_STATUS.user_profile.suspender.race_snap_available)
        {
            if (ORG.checkResumeBuffer(GAME_STATUS.user_profile.suspender.race_snap) == false)
            {
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, manager.translate("Boot", "RESUME_ERROR"));
                resume = false;
            }
        }

        if (resume)
        {
            if (type == "runviewer")
                GameSequence::setNextProject("dev_runviewer", nil);
            else 
                GameSequence::setNextProject("gtmode", nil);

            var gp = GAME_STATUS.user_profile.suspender.gp;
            var history = GAME_STATUS.user_profile.suspender.history;
            main::manager.setHistory("GTModeProject", history);
            boot_state.resume_gp = gp;
            SoundUtil::SetSystemBGMEnable(context, true);
        }
        else 
        {
            GAME_STATUS.user_profile.suspender.race_snap_available = false;
            GAME_STATUS.user_profile.suspender.race_snap = nil;
            GAME_STATUS.user_profile.suspender.gp = nil;
            GAME_STATUS.user_profile.suspender.history = nil;
        }
    }

    if (!resume)
        GAME_STATUS.user_profile.suspender.race_snap = nil; 
}

function getMultiMonitorLayoutSettingString(option)
{
    var border = (option.monitor_border[0] * 100f + 0.5f).toInt();
    var roundAngle = (option.monitor_round_angle + 0.5f).toInt();
    var viewAngle = (option.monitor_view_angle + 0.5f).toInt();

    var str = "SX=%{option.monitor_layout_x}:SY=%{option.monitor_layout_y}:SB=%{border}:SR=%{roundAngle}:SV=%{viewAngle}";
    return str;
}

function putMultiMonitorServerLog()
{
    var option = GAME_STATUS.user_profile.option;
    if (!option.monitor_host)
        return;
    var layoutSettings = getMultiMonitorLayoutSettingString(option);
    var str = "SA=MS:SU=%{PDINetwork.getClientName()}:%{layoutSettings}";
    Grim2.requestPutLog(str);
}

function putMultiMonitorClientLog(option)
{
    var layoutSettings = "";
    if (!option.monitor_follow_host)
        layoutSettings = ":" + getMultiMonitorLayoutSettingString(option);
    var str = "SA=MC:SU=%{PDINetwork.getClientName()}:SF=%{option.monitor_follow_host}%{layoutSettings}"
    Grim2.requestPutLog(str);
}

function tryStartMultiMonitorClient(context)
{
    var option = GAME_STATUS.user_profile.option;
    if (option.monitor_client)
    {
        if (option.monitor_auto_boot || 
            DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, 
                manager.translate("Boot", "DO_YOU_START_MULTIMONITOR_CLIENT"))
            )
        {
            putMultiMonitorClientLog(option);
            GameSequence::setNextSequence(GameSequence::MULTIMONITOR_CLIENT);
        }
    }
}