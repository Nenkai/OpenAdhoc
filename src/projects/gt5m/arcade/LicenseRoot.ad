//---------------------------------------------------------------------------------------
// LicenseRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module LicenseRoot
{
    hidden.visible = false;

    attribute sScrollRoot = nil;
    attribute sCurrentCategory = nil;
    attribute sLicensePanelsMap = nil;
    attribute sLicensePanelsArray = nil;
    attribute sTrophyItemParents = nil;

    static sFocusControll; // Typo in original
    static sLicenseMapPath;
    static sLoadGpb;

    static s0;

    method open(context, defult_focus_category, page_in) // Typo in original
    {
        s0 = main::pdistd::GetSystemTimeMicroSecond();

        self.sCurrentCategory = defult_focus_category;

        if (page_in)
            StartPageIn_XEffect(context, context.getRootWindow(), ROOT);
        else
            StartPageOut_XEffect(context, context.getRootWindow(), ROOT);
    }

    method onLoad(context)
    {
        ROOT.sFocusControll =
        [
            LicenseUtil::CATEGORY::A :
            [
                [0xFF52, nil],
                [0xFF53, LicenseUtil::CATEGORY::B],
                [0xFF54, LicenseUtil::CATEGORY::C]
            ],
            LicenseUtil::CATEGORY::B :
            [
                [0xFF52, nil],
                [0xFF51, LicenseUtil::CATEGORY::A],
                [0xFF53, LicenseUtil::CATEGORY::D]
            ],
            LicenseUtil::CATEGORY::C :
            [
                [0xFF52, nil],
                [0xFF51, LicenseUtil::CATEGORY::A],
                [0xFF53, LicenseUtil::CATEGORY::D]
            ],
            LicenseUtil::CATEGORY::D :
            [
                [0xFF52, nil],
                [0xFF51, LicenseUtil::CATEGORY::B],
                [0xFF53, LicenseUtil::CATEGORY::E],
                [0xFF54, LicenseUtil::CATEGORY::F]
            ],
            LicenseUtil::CATEGORY::E :
            [
                [0xFF52, nil],
                [0xFF51, LicenseUtil::CATEGORY::D],
                [0xFF53, LicenseUtil::CATEGORY::G]
            ],
            LicenseUtil::CATEGORY::F :
            [
                [0xFF52, nil],
                [0xFF51, LicenseUtil::CATEGORY::D],
                [0xFF53, LicenseUtil::CATEGORY::G]
            ],
            LicenseUtil::CATEGORY::G :
            [
                [0xFF52, nil],
                [0xFF51, LicenseUtil::CATEGORY::E],
                [0xFF53, LicenseUtil::CATEGORY::H],
                [0xFF54, LicenseUtil::CATEGORY::I]
            ],
            LicenseUtil::CATEGORY::H :
            [
                [0xFF52, nil],
                [0xFF53, nil],
                [0xFF51, LicenseUtil::CATEGORY::G]
            ],
            LicenseUtil::CATEGORY::I :
            [
                [0xFF52, nil],
                [0xFF51, LicenseUtil::CATEGORY::G]
            ],
            LicenseUtil::CATEGORY::J :
            [
                [0xFF52, nil],
                [0xFF51, nil],
                [0xFF53, LicenseUtil::CATEGORY::K],
                [0xFF54, LicenseUtil::CATEGORY::L]
            ],
            LicenseUtil::CATEGORY::K :
            [
                [0xFF52, nil],
                [0xFF51, LicenseUtil::CATEGORY::J],
                [0xFF53, LicenseUtil::CATEGORY::M]
            ],
            LicenseUtil::CATEGORY::L :
            [
                [0xFF52, nil],
                [0xFF51, LicenseUtil::CATEGORY::J],
                [0xFF53, LicenseUtil::CATEGORY::M]
            ],
            LicenseUtil::CATEGORY::M :
            [
                [0xFF52, LicenseUtil::CATEGORY::P],
                [0xFF51, LicenseUtil::CATEGORY::K],
                [0xFF53, LicenseUtil::CATEGORY::N],
                [0xFF54, LicenseUtil::CATEGORY::O]
            ],
            LicenseUtil::CATEGORY::N :
            [
                [0xFF52, nil],
                [0xFF51, LicenseUtil::CATEGORY::M]
            ],
            LicenseUtil::CATEGORY::O :
            [
                [0xFF52, nil],
                [0xFF51, LicenseUtil::CATEGORY::M]
            ],
            LicenseUtil::CATEGORY::P :
            [
                [0xFF52, nil],
                [0xFF51, LicenseUtil::CATEGORY::Q],
                [0xFF53, LicenseUtil::CATEGORY::M]
            ],
            LicenseUtil::CATEGORY::Q :
            [
                [0xFF52, nil],
                [0xFF53, LicenseUtil::CATEGORY::P]
            ]
        ];

        #include "projects/gt5m/arcade/LicenseMapPath.ad";
            
        var path = ROOT.sLicenseMapPath;
        path["B_A"] = path["A_B"].reverse();
        path["C_A"] = path["A_C"].reverse();
        path["D_B"] = path["B_D"].reverse();
        path["E_D"] = path["D_E"].reverse();
        path["F_D"] = path["D_F"].reverse();
        path["G_E"] = path["E_G"].reverse();
        path["H_G"] = path["G_H"].reverse();
        path["I_G"] = path["G_I"].reverse();
        path["K_J"] = path["J_K"].reverse();
        path["L_J"] = path["J_L"].reverse();
        path["M_K"] = path["K_M"].reverse();
        path["M_L"] = path["L_M"].reverse();
        path["M_P"] = path["P_M"].reverse();
        path["N_M"] = path["M_N"].reverse();
        path["O_M"] = path["M_O"].reverse();
        path["P_Q"] = path["Q_P"].reverse();
    }

    method onInitialize(context)
    {
        self.sTrophyItemParents = [:];
        self.sLicensePanelsMap = [:];
        self.sLicensePanelsArray = [];

        var my_cash = gGameStatus.user_profile.cash;
        Header::Cash::TextFace.text = main::pdiext::MMisc::GetMoneyString(my_cash);

        var game_day = gGameStatus.user_profile.calendar.getGameDay();
        Header::Date::TextFace.text = context.translate(ROOT, "Arcade", "GAME_DAY").build(game_day + 1);

        var bg_index = LicenseUtil::getBGIndex(sCurrentCategory);
        var bg_name = "BG_%{bg_index}";
        var tmp = tmpBG[bg_name]["base"].doCopy();
        BG::Next.replaceChild(tmp, BG::Next::base);
        BG::Current::Effect.reverse = true;
        BG::Current::Effect.reset();
        BG::Current::Effect.reverse = false;
        BG::Next::Effect.reverse = true;
        BG::Next::Effect.reset();
        BG::Next::Effect.reverse = false;

        if (self.sCurrentCategory == nil && self.sCurrentCategory < 0) // Mistake in original
            self.sCurrentCategory = LicenseUtil::CATEGORY::A;

        var start; var end; var scroll_clip;
        if (LicenseUtil::isFirstStage(self.sCurrentCategory))
        {
            if (ROOT::sLoadGpb == nil) {
                context.loadGpb(main::PROJECT_ROOT_DIR + "/" + "arcade", "LicenseFirstStage");
                ROOT::sLoadGpb = "LicenseFirstStage";
            }

            |start, end| = LicenseUtil::getCategoryStartEnd(LicenseUtil::STAGE::FIRST);
            var w = LicenseFirstStage::clip.doCopy();
            FirstStage.appendChild(context, w);
            ROOT.sScrollRoot = w.space;
            scroll_clip = w;

            FirstStage.visible = true;
            SecondStage.visible = false;
        } 
        else 
        {

            if (ROOT::sLoadGpb == nil) {
                context.loadGpb(main::PROJECT_ROOT_DIR + "/" + "arcade", "LicenseSecondStage");
                ROOT::sLoadGpb = "LicenseSecondStage";
            }

            |start, end| = LicenseUtil::getCategoryStartEnd(LicenseUtil::STAGE::SECOND);
            var w = LicenseSecondStage::clip.doCopy();
            SecondStage.appendChild(context, w);
            ROOT.sScrollRoot = w.space;
            scroll_clip = w;

            FirstStage.visible = false;
            SecondStage.visible = true;
        }

        for (var i = start; i <= end; i++)
        {
            var category_str = LicenseUtil::GetCategoryString(i);
            var panel = ROOT.sScrollRoot["License" + category_str]["Pane"];

            panel.up_arrow.visible = false;
            panel.down_arrow.visible = false;
            panel.left_arrow.visible = false;
            panel.right_arrow.visible = false;

            if (!panel.defined("category_id"))
                panel.defineAttribute('category_id');
            panel.category_id = i;

            if (!panel.defined("set_balloon_tip"))
                panel.import(FirstStage,
                             'set_balloon_tip');

            panel.VisibleEffect.focus_enter_action_name = "restart";
            panel.VisibleEffect.reverse = false;
            panel.VisibleEffect.reset();

            ROOT.sLicensePanelsMap[i] = panel;
            ROOT.sLicensePanelsArray.push(panel);
        }

        ROOT.sScrollRoot.setTrophy(context);

        ROOT.setFocus(Exit);
        ROOT.setFocus(ROOT.sLicensePanelsMap[self.sCurrentCategory]);
        scroll_clip.scroll_mode_name = "follow_focus";

        scroll_clip.warp(ROOT.sLicensePanelsMap[self.sCurrentCategory]);

        ToolTip::tip.remove();
        ToolTip::tip.value = context.translate(ROOT, "TOOLTIP|HELP");

        context.pushEvent(main::menu::MFunctionEvent(onMessageCheck, context));

        SoundUtil::BGMPlayGroup('menu', "mission");

        var s1 = main::pdistd::GetSystemTimeMicroSecond();

    }

    static mission_clear_na = [
        "c00",
        "c01",
        "c02",
        "c03",
        "c04",
        "c05",
        "c06",
        "g04",
        "g04",
        "c09",
        "c10",
        "c11",
        "c12",
        "g05",
        "g05",
        "c15",
        "c16"
    ];

    method onMessageCheck(context)
    {
        var txt;
        if (EventFlagsUtil::isEventFlagON(gGameStatus, EventFlagsUtil::FLAGS::END_MISSION_CATEGORY) &&
            !EventFlagsUtil::isMessageFlagON(gGameStatus, EventFlagsUtil::FLAGS::END_MISSION_CATEGORY))
        {
            var category_str = LicenseUtil::GetCategoryString(self.sCurrentCategory);
            var na_name = mission_clear_na[self.sCurrentCategory];

            txt = "";
            switch (self.sCurrentCategory)
            {
                case LicenseUtil::CATEGORY::A:
                    {
                        var a = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::A);
                        var b = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::B);
                        var c = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::C);
                        txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_BRANCH");
                        txt = txt.build(a, b, c);
                    }
                    break;
                case LicenseUtil::CATEGORY::B:
                    {
                        if (!LicenseUtil::isAllClear(LicenseUtil::CATEGORY::C, false, gGameStatus))
                        {
                            var b = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::B);
                            var d = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::D);
                            txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_NEXT");
                            txt = txt.build(b, d);
                        }
                        else
                            na_name = nil;
                    }
                    break;
                case LicenseUtil::CATEGORY::C:
                    {
                        if (!LicenseUtil::isAllClear(LicenseUtil::CATEGORY::B, false, gGameStatus))
                        {
                            var c = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::C);
                            var d = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::D);
                            txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_NEXT");
                            txt = txt.build(c, d);
                        }
                        else
                            na_name = nil;
                    }
                    break;
                case LicenseUtil::CATEGORY::D:
                    {
                        var d = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::D);
                        var e = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::E);
                        var f = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::F);
                        txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_BRANCH");
                        txt = txt.build(d, e, f);
                    }
                    break;
                case LicenseUtil::CATEGORY::E:
                    {
                        if (!LicenseUtil::isAllClear(LicenseUtil::CATEGORY::F, false, gGameStatus))
                        {
                            var e = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::E);
                            var g = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::G);
                            txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_NEXT");
                            txt = txt.build(e, g);
                        }
                        else
                            na_name = nil;
                    }
                    break;
                case LicenseUtil::CATEGORY::F:
                    {
                        if (!LicenseUtil::isAllClear(LicenseUtil::CATEGORY::E, false, gGameStatus))
                        {
                            var f = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::F);
                            var g = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::G);
                            txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_NEXT");
                            txt = txt.build(f, g);
                        }
                        else
                            na_name = nil;
                    }
                    break;
                case LicenseUtil::CATEGORY::G:
                    {
                        var g = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::G);
                        var h = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::H);
                        var i = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::I);
                        txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_BRANCH");
                        txt = txt.build(g, h, i);
                    }
                    break;
                case LicenseUtil::CATEGORY::H:
                    if (!LicenseUtil::isAllClear(LicenseUtil::CATEGORY::I, false, gGameStatus))
                        txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_ALL");
                    else
                        na_name = nil;
                    break;
                case LicenseUtil::CATEGORY::I:
                    if (!LicenseUtil::isAllClear(LicenseUtil::CATEGORY::H, false, gGameStatus))
                        txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_ALL");
                    else
                        na_name = nil;
                    break;
                case LicenseUtil::CATEGORY::J:
                    {
                        var j = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::J);
                        var k = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::K);
                        var l = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::L);
                        txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_BRANCH");
                        txt = txt.build(j, k, l);
                    }
                    break;
                case LicenseUtil::CATEGORY::K:
                    {
                        if (!LicenseUtil::isAllClear(LicenseUtil::CATEGORY::L, false, gGameStatus))
                        {
                            var k = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::K);
                            var m = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::M);
                            txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_NEXT");
                            txt = txt.build(k, m);
                        }
                        else
                            na_name = nil;
                    }
                    break;
                case LicenseUtil::CATEGORY::L:
                    {
                        if (!LicenseUtil::isAllClear(LicenseUtil::CATEGORY::K, false, gGameStatus))
                        {
                            var l = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::L);
                            var m = LicenseUtil::GetCategoryString(LicenseUtil::CATEGORY::M);
                            txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_NEXT");
                            txt = txt.build(l, m);
                        }
                        else
                            na_name = nil;
                    }
                    break;
                case LicenseUtil::CATEGORY::M:
                    txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_M");
                    break;
                case LicenseUtil::CATEGORY::N:
                    if (!LicenseUtil::isAllClear(LicenseUtil::CATEGORY::O, false, gGameStatus))
                        txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_BONUS_STAGE");
                    else
                        na_name = nil;
                    break;
                case LicenseUtil::CATEGORY::O:
                    if (!LicenseUtil::isAllClear(LicenseUtil::CATEGORY::N, false, gGameStatus))
                        txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_BONUS_STAGE");
                    else
                        na_name = nil;
                    break;
                case LicenseUtil::CATEGORY::P:
                    txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_P");
                    break;
                case LicenseUtil::CATEGORY::Q:
                    txt = context.translate(ROOT, "Arcade", "CLEARED_MISSION_MSG_Q");
                    break;
            }

            if (na_name != nil)
                PlayNarration(na_name, 0.5);

            if (txt != "")
                DialogUtil::openConfirmDialog(context, DialogUtil::OK, txt);

            EventFlagsUtil::setMessageFlagON(gGameStatus,
                                             EventFlagsUtil::FLAGS::END_MISSION_CATEGORY);

            StopStream();
        }


        if (EventFlagsUtil::isEventFlagON(gGameStatus,
                                          EventFlagsUtil::FLAGS::CAN_USE_USER_BGM) &&
            !EventFlagsUtil::isMessageFlagON(gGameStatus,
                                             EventFlagsUtil::FLAGS::CAN_USE_USER_BGM))
        {
            PlayNarration("g03", 0.5);

            txt = context.translate(ROOT, "Arcade", "AVAILABLE_USER_BGM");
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, txt);

            EventFlagsUtil::setMessageFlagON(gGameStatus,
                                             EventFlagsUtil::FLAGS::CAN_USE_USER_BGM);

            StopStream();
        }

    }

    method onFinalize(context)
    {
        if (ROOT::sLoadGpb != nil) 
        {
            context.unloadGpb(main::PROJECT_ROOT_DIR + "/" + "arcade", ROOT::sLoadGpb);
            ROOT::sLoadGpb = nil;
        }

        clearTrophy(context);

        FirstStage.clearWindow(context);
        SecondStage.clearWindow(context);

        ROOT.sScrollRoot = nil;
        ROOT.sTrophyItemParents = nil;
        ROOT.sLicensePanelsMap = nil;
        ROOT.sLicensePanelsArray = nil;

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");

        LicenseMapRoot.open(context, ROOT.sCurrentCategory, false);

        return EVENTRESULT_FILTER;
    }

    method onPageInEnd(context)
    {
        BalloonTip.initialize(context);
        var w = ROOT.getFocusWidget();

        if (w.defined("set_balloon_tip"))
            w.set_balloon_tip(context);
    }

    method onKeyPress(context, event)
    {
        var w = event.widget;

        if (event.keysym == 0xFF52 || event.keysym == 0xFF54 ||
            event.keysym == 0xFF51 || event.keysym == 0xFF53)
        {
            if (w.defined("category_id") && w.category_id != nil)
            {
                var controll_data = ROOT.sFocusControll[w.category_id]
                if (controll_data != nil)
                {
                    foreach (var array in controll_data)
                    {
                        var key = array[0];

                        if (event.keysym == key)
                        {
                            var focus_category_id = array[1];
                            if (focus_category_id != nil)
                            {
                                if (!LicenseUtil::canEntry(focus_category_id, gGameStatus))
                                    return EVENTRESULT_FILTER;

                                main::sound.play("cursor");
                                var prev_pane = ROOT.sLicensePanelsMap[w.category_id];
                                var next_pane = ROOT.sLicensePanelsMap[focus_category_id];

                                BG::Current::Effect.warp();
                                BG::Next::Effect.warp();
                                
                                var tmp = BG::Next::base.doCopy();
                                BG::Current.replaceChild(tmp, BG::Current::base);
                                BG::Current::Effect.reset();

                                BG::Next::Effect.restart();
                                var bg_index = LicenseUtil::getBGIndex(focus_category_id);
                                var bg_name = "BG_%{bg_index}";
                                tmp = tmpBG[bg_name]["base"].doCopy();
                                BG::Next.replaceChild(tmp, BG::Next::base);

                                BG::Current::Effect.start();
                                BG::Next::Effect.start();

                                var stage;
                                if (LicenseUtil::isFirstStage(focus_category_id))
                                    stage = FirstStage;
                                else
                                    stage = SecondStage;
                                var from = LicenseUtil::CategoryString[w.category_id];
                                var to = LicenseUtil::CategoryString[focus_category_id];
                                key = from + "_" + to;
                                var follow_path = ROOT.sLicenseMapPath[key];
                                if (follow_path != nil)
                                {
                                    next_pane.VisibleEffect.focus_enter_action_name = "keep";
                                    next_pane.VisibleEffect.reverse = false;
                                    next_pane.VisibleEffect.restart();
                                    ROOT.setFocus(nil);
                                    stage.BalloonTip.reset_value();
                                    stage.clip.scroll_mode_name = "follow_path";

                                    stage.clip.setFollowPath(follow_path);
                                    stage.clip.syncFollowPath();
                                }
                                else
                                {
                                    next_pane.VisibleEffect.focus_enter_action_name = "restart";
                                    stage.clip.scroll_mode_name = "follow_focus";
                                }

                                prev_pane.VisibleEffect.reverse = true;
                                prev_pane.VisibleEffect.restart();
                                ROOT.setFocus(next_pane);
                                return EVENTRESULT_FILTER;
                            } 
                            else 
                            {
                                main::sound.play("cursor");
                                var prev_pane = ROOT.sLicensePanelsMap[w.category_id];
                                prev_pane.VisibleEffect.stop();
                                ROOT.setFocus(Exit);
                                return EVENTRESULT_FILTER;
                            }
                        }
                    }
                }
            }

            return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }

    method set_balloon_tip_for_category(context, cid)
    {
        var category_str = LicenseUtil::GetCategoryString(cid);
        var step_text = context.translate(ROOT, "TEXT_STEP").build(category_str);
        var sub_title_key = "CATEGORY_SUB_TITLE_" + cid;
        var sub_title_text = context.translate(ROOT, "LicenseGT5M", sub_title_key);
        var balloon_text = step_text + " : " + sub_title_text;
        BalloonTip.set_value(context, BalloonPosition, balloon_text, 0.0);
    }


    method setTrophy(context, target_category_id)
    {
        var panels = [];
        if (target_category_id != nil)
            panels.push(ROOT.sLicensePanelsMap[target_category_id]);
        else
            panels = ROOT.sLicensePanelsArray;

        foreach (var license_w in panels)
        {
            var base = license_w.TrophyBases;
            var category_id = license_w.category_id;
            var count = LicenseUtil::GetLicenseCountOfCategory(category_id);

            clearTrophy(context, category_id);
            ROOT.sTrophyItemParents[category_id] = [];
            var base_index = LicenseUtil::GetIndex(category_id, 0);
            for (var i = 0, it = base.first; i < count; i++, it = it.next_widget)
            {
                var index = base_index + i;
                if (index < 0)
                    continue;

                var license_result = game_record().licenses[index].result;
                if (license_result < 0)
                    continue;

                var trophy_w;
                switch (license_result)
                {
                    case LicenseUtil::PRIZE::GOLD:
                        trophy_w = hidden::trophyGold;
                        break;
                    case LicenseUtil::PRIZE::SILVER:
                        trophy_w = hidden::trophySilver;
                        break;
                    case LicenseUtil::PRIZE::BRONZE:
                        trophy_w = hidden::trophyBronze;
                        break;
                }

                if (trophy_w != nil)
                {
                    var w = trophy_w.doCopy();
                    w.x = 0.0;
                    w.y = 0.0;
                    w.name = "copied_item";
                    it.appendChild(context, w);
                    ROOT.sTrophyItemParents[category_id].push(it);
                }
            }
        }
    }

    method clearTrophy(context, category_id)
    {
        var panels = [];
        if (category_id != nil)
        {
            if (ROOT.sTrophyItemParents[category_id] == nil)
                return;

            panels.push(ROOT.sLicensePanelsMap[category_id]);
        }
        else
            panels = ROOT.sLicensePanelsArray;

        foreach (var license_w in panels)
        {
            var sTrophyItemParents = ROOT.sTrophyItemParents[license_w.category_id]; // Yes, a local named the same as a static
            if (sTrophyItemParents == nil)
                continue;

            foreach (var parent in sTrophyItemParents)
                parent.removeChild(context, parent["copied_item"]);

            ROOT.sTrophyItemParents[license_w.category_id] = nil;
        }
    }

    module FirstStage
    {
        method onActivate(context, event)
        {
            var w = event.widget;

            if (LicenseUtil::canEntry(w.category_id, gGameStatus))
            {
                main::sound.play("ok");

                LicenseCategoryRoot.open(context, true, w.category_id);
            } 
            else 
            {
                main::sound.play("cancel");

                var msg = "";
                var category = LicenseUtil::EntryCondition[w.category_id];
                if (category.isInstanceOf(System::Int))
                {
                    var category_str = LicenseUtil::GetCategoryString(category);
                    msg = context.translate(ROOT, "CANNOT_SELECT_THIS_CATEGORY").build(category_str);
                }
                else if (category.isInstanceOf(System::Array))
                {
                    var category_str1 = LicenseUtil::GetCategoryString(category[0]);
                    var category_str2 = LicenseUtil::GetCategoryString(category[1]);
                    msg = context.translate(ROOT, "CANNOT_SELECT_THIS_CATEGORY2").build(category_str1,
                                                                                               category_str2);
                }

                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
            }

            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context, event)
        {
            var w = event.widget;

            var category_str = LicenseUtil::GetCategoryString(w.category_id);
            var panel = ROOT.sScrollRoot["License" + category_str]["Pane"];
            var controll_data = ROOT.sFocusControll[w.category_id];
            if (controll_data != nil)
            {
                foreach (var array in controll_data)
                {
                    var key = array[0];
                    var category_id = array[1];
                    if (category_id != nil && LicenseUtil::canEntry(category_id, gGameStatus))
                    {
                        var arrow;
                        switch (key)
                        {
                            case 0xFF52: // PSP_PAD_CTRL_L3_UP?
                                arrow = panel.up_arrow;
                                break;
                            case 0xFF54: // PSP_PAD_CTRL_L3_DOWN?
                                arrow = panel.down_arrow;
                                break;
                            case 0xFF53: // PSP_PAD_CTRL_L3_RIGHT?
                                arrow = panel.right_arrow;
                                break;
                            case 0xFF51: // PSP_PAD_CTRL_L3_LEFT?
                                arrow = panel.left_arrow;
                                break;
                        }
                        arrow.visible = true;
                    }
                }
            }

            w.set_balloon_tip(context);

            ROOT.sCurrentCategory = w.category_id;
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context, event)
        {
            BalloonTip.reset_value();

            var w = event.widget;

            var category_str = LicenseUtil::GetCategoryString(w.category_id);
            var panel = ROOT.sScrollRoot["License" + category_str]["Pane"];

            panel.up_arrow.visible = false;
            panel.down_arrow.visible = false;
            panel.left_arrow.visible = false;
            panel.right_arrow.visible = false;

            return EVENTRESULT_FILTER;
        }

        method set_balloon_tip(context)
        {
            if (self.defined("category_id") && self.category_id != nil)
                set_balloon_tip_for_category(context, self.category_id);
        }
    }

    module SecondStage
    {
        import FirstStage::onActivate;
        import FirstStage::onFocusEnter;
        import FirstStage::onFocusLeave;
    }

    module Exit
    {
        method onActivate(context)
        {
            main::sound.play("ok");

            LicenseMapRoot.open(context, ROOT.sCurrentCategory, false);

            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            set_balloon_tip(context);
            return EVENTRESULT_FILTER;
        }
        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }

        method set_balloon_tip(context)
        {
            var balloon_text = context.translate(ROOT, "Arcade", "close");
            BalloonTip.set_value(context, self, balloon_text, 12);
        }

        method onKeyPress(context, event)
        {
            if (event.keysym == 0xFF54) // PSP_PAD_CTRL_L3_DOWN?
            {
                main::sound.play("cursor");
                ROOT.setFocus(ROOT.sLicensePanelsMap[ROOT.sCurrentCategory]);
                return EVENTRESULT_FILTER
            }
            
            return EVENTRESULT_CONTINUE;
        }
    }
}