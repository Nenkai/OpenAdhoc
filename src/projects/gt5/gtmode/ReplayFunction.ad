function getTypeInfo(context, replay)
{
    var image_path = "piece/gamemode/%s.img".format(replay.title.downcase());

    var text = "";

    if (replay.title == "SINGLE_RACE" || replay.title == "EVENT_RACE" || 
        replay.title == "OBLINE_ROOM" || replay.title == "ARENA")
    {
        var order = replay.result_order + 1;

        switch (order)
        {
            case 1:
                text = context.translate(ROOT, "Number", "ordinal_st").build(order);
                break;
            case 2:
                text = context.translate(ROOT, "Number", "ordinal_nd").build(order);
                break;
            case 3:
                text = context.translate(ROOT, "Number", "ordinal_rd").build(order);
                break;
            default:
                text = context.translate(ROOT, "Number", "ordinal_th").build(order);
                break;    
        }
    }
    else if (replay.title == "TIME_ATTACK" || replay.title == "LICENSE" || 
             replay.title == "EVENT_RALLY" || replay.title == "TOUR" || replay.title == "SCHOOL")
    {
        var time = (replay.best_time != 0) ? replay.best_time : pdiext::MAX_LAPTIME1000;
        text = pdiext::GetRaceTimeString(time);
    }
    else if (replay.title == "DRIFT_ATTACK")
    {
        text = "%s%s".format(replay.total_time, context.translate(ROOT, "Unit", "PTS"));
    }
    else if (replay.title == "SPEED_TEST")
    {
        var score = replay.total_time;

        if (replay.bspec_type == ReplayFileUtil::SPEED_TEST_MAX)
        {
            var km_mile = 0;
            var unit_text = "";

            if (GAME_STATUS.user_profile.option.unit_velocity)
            {
                var unit_text = context.translate(ROOT, "Unit", "VELOCITY_MPH");
                var km_mile = score / 1.6;

                var km_mile_text = pdiext::GetNumberString(10 * km_mile, 1);
                text = "%{km_mile_text} %{unit_text}";
            }

            else
            {
                var unit_text = context.translate(ROOT, "Unit", "VELOCITY_KMPH");
                var km_mile = score;
                text = "%{km_mile} %{unit_text}";
            }

            image_path = "piece/gamemode/speed_test_max.img";
        }
        else
        {
            var time = (replay.best_time != 0) ? replay.best_time : pdiext::MAX_LAPTIME1000;
            text = pdiext::GetRaceTimeString(time);
        }
    }
    else
    {
        var time = (replay.total_time != 0) ? replay.total_time : pdiext::MAX_LAPTIME1000;
        text = pdiext::GetRaceTimeString(time);
    }

    return [image_path, text];
}

function getTitleInfo(context, replay)
{
    var title = "";
    if (replay.title == "EVENT_RACE")
    {
        if (replay.bspec_type == gtengine::BSpecType::ONLY_B)
        {
            var file_id = ABspecUtil::getFileId(replay.game_id, true);

            if (file_id < 0)
                title += " B : %s".format(context.translate(ROOT, "MyHome", "SEASONALEVENTS"));
            else
                title += " B : %s".format(context.translate(ROOT, "BspecEventInfoGT5", "r%{file_id}t"));
        }
        else
        {
            var file_id = ABspecUtil::getFileId(replay.game_id, false);
            if (file_id < 0)
                title += " A : %s".format(context.translate(ROOT, "MyHome", "SEASONALEVENTS"));
            else
                title += " A : %s".format(context.translate(ROOT, "AspecEventInfoGT5", "r%{file_id}t"));
        }
    }

    else if (replay.title == "LICENSE")
    {
        var idx = LicenseUtil::GetIndexByLicenseId(replay.game_id);

        |var category_id, var category_index| = LicenseUtil::GetCategoryIdAndCategoryIndex(idx);
        var category_str = LicenseUtil::GetCategoryString(category_id);

        var number = "%{category_str}-%{category_index + 1}";
        var text = context.translate(ROOT, "LicenseGT5", "%03dt".format(replay.game_id));

        title += ": %{number} %{text}";
    }
    else if (replay.title == "EVENT_RALLY")
    {
        title += ": %s".format(context.translate(ROOT, "SpecialEventInfoGT5", "rally%{replay.game_id}t"));
    }
    else if (replay.title == "TOUR")
    {
        var text = context.translate(ROOT, "SpecialEventInfoGT5", "tour%03dt".format(replay.game_id));
        title += ": %{text}";
    }
    else if (replay.title == "SCHOOL")
    {
        var name_tbl = ["kart", "tour", "amg", "stig_C", "gordon", "loeb", "rally", "vettel"];
        var event_type = (replay.game_id / 1000) - 1;

        if (event_type < name_tbl.size)
        {
            var name = name_tbl[event_type];

            var text = context.translate(ROOT, "SpecialEventInfoGT5",
            "%{name}%03dt".format(replay.game_id % 1000));

            title += ": %{text}";
        }
    }
    else if (replay.title == "SPEED_TEST")
    {
        var keyword = "";

        if (replay.bspec_type == ReplayFileUtil::SPEED_TEST_MAX)
            keyword = "SPEED_TEST_MAX";

        else if (replay.bspec_type == ReplayFileUtil::SPEED_TEST_ACCELERATION_KM)
            keyword = "SPEED_TEST_ACCELERATION_KM";
        else
            keyword = "SPEED_TEST_ACCELERATION_MILE";

        title += " : %s".format(context.translate(ROOT, "MyHome", keyword));
    }

    return title;
}

function setFavorite(context, replay, args, callback, item_w)
{
    var result = false;
    var flag = args;

    if (flag)
    {
        if (ReplayFileUtil::getFavoriteCount() < ReplayFileUtil::getFavoriteMax())
        {
            setFavoriteImpl(context, replay, true, callback, item_w);
            result = true;
        }
        else
            ERROR(context, ROOT, "ERROR_FAVORITE_IS_FULL");
    }
    else
    {
        setFavoriteImpl(context, replay, false, callback, item_w);
        var result = true;
    }

    return result;
}

function showDetail(context, replay, args, callback, item_w)
{
    var header = ORG.getReplayHeaderFromPath(replay.filename);
    var info = gtengine::MReplayInfo();
    var success = info.initialize(header);

    if (!success)
    {
        var res = QUERY(context, ROOT, "QUERY_REPLAY_CORRUPTED_DELETE");
        if (res)
        {
            ReplayFileUtil::remove(replay);
            OK(context, ROOT, "MSG_DONE_DELETE");
            callbackIf(context, callback, replay, item_w);
        }

        return;
    }

    var need_update = ReplayDetailPopup.open(context, replay);
    if (need_update)
        callbackIf(context, callback, replay, item_w);
}

function play(context, replay, args, callback, item_w)
{
    var gp = GameParameterUtil::createReplayWithPath(replay.filename, false, false);
    if (gp == nil)
    {
        var res = QUERY(context, ROOT, "QUERY_REPLAY_CORRUPTED_DELETE");
        if (res)
        {
            ReplayFileUtil::remove(replay);
            OK(context, ROOT, "MSG_DONE_DELETE");
            callbackIf(context, callback, replay, item_w);

            return false;
        }

        return true;
    }

    GameParameterUtil::execute(context, gp);
    return true;
}

function logger(context, replay, args, callback, item_w)
{
    var gp = GameParameterUtil::createReplayWithPath(replay.filename, false, false, true);
    if (gp == nil)
    {
        var res = QUERY(context, ROOT, "QUERY_REPLAY_CORRUPTED_DELETE");
        if (res)
        {
            ReplayFileUtil::remove(replay);

            OK(context, ROOT, "MSG_DONE_DELETE");
            callbackIf(context, callback, replay, item_w);

            return false;
        }

        return true;
    }

    GameParameterUtil::execute(context, gp);
    return true;
}

function export(context, replay, args, callback, item_w)
{
    var res = QUERY(context, ROOT, "QUERY_REPLAY_EXPORT_TO_SAVEDATA");
    if (!res)
        return false;

    beginTint(context);

    if (!pdistd::Exist(replay.filename))
    {
        var res = QUERY(context, ROOT, "QUERY_REPLAY_CORRUPTED_DELETE");
        if (res)
        {
            ReplayFileUtil::remove(replay);
            OK(context, ROOT, "MSG_DONE_DELETE");

            callbackIf(context, callback, replay, item_w);
            endTint(context);

            return false;
        }
    }

    var data = SaveDataUtilGT5::getGT5ReplayForSave(context, replay);

    if (data == nil)
    {
        ERROR(context, ROOT, "ERROR_OVER_FILE_SIZE_LIMIT");
        endTint(context);

        return false;
    }

    SaveDataUtil::save(context, data);
    endTint(context);

    return true;
}

function beginTint(context)
{
    DialogUtil::openDimmerDialog(context);
    context.cursor_visible = false;
}

function endTint(context)
{
    context.cursor_visible = true;
    DialogUtil::closeDimmerDialog(context);
}

function exportUSB(context, replay, args)
{
    var src_path = replay.filename;
    var dst_path = IO::Path::GetBaseName(src_path);

    if (!DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, "DO YOU EXPORT TO USB?"))
        return;

    var res = StorageDataUtilGT5::exportReplayFile(context, src_path);
    if (res)
        DialogUtil::openConfirmDialog(context, DialogUtil::OK, "USB EXPORT DONE");
    else
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, "USB EXPORT FAILED");
}

function exportUSBDevelop(context, replay, args)
{
    var src_path = replay.filename;
    var dst_path = IO::Path::GetBaseName(src_path);

    if (!DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, "DO YOU EXPORT TO USB?"))
        return;

    var res = pdistd::CopyFile(src_path, "/APP_USB/" + dst_path);
    if (res == pdistd::FileError::OK)
        DialogUtil::openConfirmDialog(context, DialogUtil::OK, "USB EXPORT DONE" + dst_path);
    else
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, "USB EXPORT FAILED");
}

function delete(context, replay, args, callback, item_w)
{
    if (!QUERY_D_NO(context, ROOT, "QUERY_DELETE"))
        return false;

    ReplayFileUtil::remove(replay);

    callbackIf(context, callback, replay, item_w);
    return true;
}

function deleteAll(context, replay, args, callback, item_w)
{
    if (!QUERY_D_NO(context, ROOT, "QUERY_DELETE_ALL"))
        return false;

    ReplayFileUtil::removeAll();

    callbackIf(context, callback, replay, item_w);
    return true;
}

function deleteSelected(context, replay_list, args, callback, item_w)
{
    if (!QUERY_D_NO(context, ROOT, "QUERY_DELETE_SELECTED"))
    {
        callbackIf(context, callback, replay_list, item_w);
        return false;
    }

    ReplayFileUtil::removeByList(replay_list);

    callbackIf(context, callback, replay_list, item_w);
    return true;
}

function setFavoriteImpl(context, replay, value, callback, item_w)
{
    ReplayFileUtil::setFavorite(replay.id, value);
    replay.favorite = value;
    callbackIf(context, callback, replay, item_w);
}

function callbackIf(context, callback, replay, item_w)
{
    if (callback != nil)
        callback(context, replay, item_w);
}