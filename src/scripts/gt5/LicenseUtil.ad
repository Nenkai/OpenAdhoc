













module LicenseUtil
{
    module CATEGORY
    {
        static B = 0;
        static A = 1;
        static IC = 2;
        static IB = 3;
        static IA = 4;
        static S = 5;
        static MAX = 6;

        static FIRST = B;
        static LAST = S;
    }

    static CategoryString = ["B", "A", "IC", "IB", "IA", "S"];

    static EntryConditions = [nil, CATEGORY::B, CATEGORY::A, CATEGORY::IC, CATEGORY::IB, CATEGORY::IA];

    module LICENSE_COUNT
    {
        function total(category_id)
        {
            var t = 0;
            for (var i = 0; i <= category_id; i++)
            {
                if (i >= CATEGORY::MAX)
                    break;

                var category_str = CategoryString[i];
                t += LICENSE_COUNT[category_str];
            }

            return t;
        }

        // Do not rename (total indexes by name)
        static B = 10;
        static A = 10;
        static IC = 10;
        static IB = 10;
        static IA = 10;
        static S = 10;
        static TOTAL = total(CATEGORY::MAX);
    }
    
    module PRIZE
    {
        static NONE = -1;
        static GOLD = 0;
        static SILVER = 1;
        static BRONZE = 2;
    }

    // Hardcoded
    static LicenseId = [
        // B
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,

        // A
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,

        // IC
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,

        // IB
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,

        // IA
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,

        // S
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60
    ];

    function GetCategoryIdAndCategoryIndex(license_index)
    {
        if (license_index >= LICENSE_COUNT::TOTAL)
            return [0, 0];

        var category_id = CATEGORY::FIRST;
        var category_index = license_index;
        var count = GetLicenseCountOfCategory(category_id);

        while (count <= category_index)
        {
            category_index -= count;
            category_id++;

            count = GetLicenseCountOfCategory(category_id);
            if (category_id == CATEGORY::LAST)
                break;
        }

        return [category_id, category_index];
    }

    function GetCategory(license_index)
    {
        |var category_id, var category_index| = GetCategoryIdAndCategoryIndex(license_index);
        return category_id;
    }

    function GetCategoryIndex(license_index)
    {
        |var category_id, var category_index| = GetCategoryIdAndCategoryIndex(license_index);
        return category_index;
    }

    function GetLicenseCountOfCategory(category_id)
    {
        if (category_id > CATEGORY::MAX)
            return 0;

        var category_str = CategoryString[category_id];
        var l_count = LICENSE_COUNT[category_str];
        if (l_count == nil)
            return 0;

        return l_count;
    }

    function GetIndex(category_id, category_index)
    {
        if (category_id >= CATEGORY::MAX)
            return nil;

        var count = GetLicenseCountOfCategory(category_id);
        if (count <= category_index)
            return nil;

        var total_count = LICENSE_COUNT::total(category_id - 1);
        return total_count + category_index;
    }

    function GetIndexByLicenseId(license_id)
    {
        var license_index = LicenseId.indexOf(license_id);
        if (license_index == nil)
            license_index = 0;

        return license_index;
    }

    function GetLicenseId(license_index)
    {
        if (license_index >= LICENSE_COUNT::TOTAL)
            return 0;

        return LicenseId[license_index];
    }

    function GetNextLicense(license_id, same_category = true)
    {
        if (same_category && isCategoryLastByLicenseId(license_id))
            return nil;

        var license_index = GetIndexByLicenseId(license_id);
        if (license_index < LICENSE_COUNT::TOTAL - 1)
            return GetLicenseId(++license_index);
        else
            return nil;
    }

    function GetPrevLicense(license_id, same_category = true)
    {
        if (same_category && isCategoryFirstByLicenseId(license_id))
            return nil;

        var license_index = GetIndexByLicenseId(license_id);
        if (license_index > 0)
            return GetLicenseId(--license_index);
        else
            return nil;
    }

    function GetCategoryString(category_id)
    {
        return CategoryString[category_id];
    }

    function LicenseIndexToLicenseId(license_index)
    {
        if (license_index >= LICENSE_COUNT::TOTAL)
            return 0;

        return LicenseId[license_index];
    }

    function LicenseIdToLicenseIndex(license_id)
    {
        var license_index = LicenseId.indexOf(license_id);
        if (license_index >= LICENSE_COUNT::TOTAL)
            return 0;

        return license_index;
    }

    function CaniEnterCategory(category_id, game_status)
    {
        var game_record = game_status.user_profile.record;
        var condition = EntryConditions[category_id];
        if (condition == nil)
            return true;

        return game_record.license.getCategoryResult(condition) != PRIZE::NONE;
    }

    function CaniEnterEvent(license_id, game_status)
    {
        var game_record = game_status.user_profile.record;
        var license_index = LicenseIdToLicenseIndex(license_id);
        if (license_index == 0)
            return true;

        var prev_license = GetLicenseId(license_index - 1);
        |var result, var best_time| = game_record.license.getResult(prev_license);
        return result != PRIZE::NONE;
    }

    function isCategoryLastByLicenseId(license_id)
    {
        var license_index = LicenseIdToLicenseIndex(license_id);
        |var category_id, var category_index| = GetCategoryIdAndCategoryIndex(license_index);
        var count = GetLicenseCountOfCategory(category_id);
        return category_index == count - 1;
    }

    function isCategoryLastByLicenseIndex(license_index)
    {
        |var category_id, var category_index| = GetCategoryIdAndCategoryIndex(license_index);
        var count = GetLicenseCountOfCategory(category_id);
        return category_index == count - 1;
    }

    function isCategoryFirstByLicenseId(license_id)
    {
        var license_index = LicenseIdToLicenseIndex(license_id);
        |var category_id, var category_index| = GetCategoryIdAndCategoryIndex(license_index);
        return category_index == 0;
    }

    function isCategoryFirstByLicenseIndex(license_index)
    {
        |var category_id, var category_index| = GetCategoryIdAndCategoryIndex(license_index);
        return category_index == 0;
    }

    function GetLicenseFilePath(license_id)
    {
        return "textdata/gt5/license/l%03d.xml".format(license_id);
    }

    function GetCategoryName(context, root, category_id)
    {
        var category_str = GetCategoryString(category_id);
        return context.translate(root, "LicenseGT5", "CATEGORY_%{category_str}");
    }

    function initializeRecord()
    {
        var license = GLOBAL_STATUS.user_profile.record.license;
        if (license.isInitialized())
            return;

        license.initialize();
    }

    static CategoryExpTable = [
        CATEGORY::B : [1800, 2450, 3475],
        CATEGORY::A : [2050, 3070, 4650],
        CATEGORY::IC : [2420, 4000, 6420],
        CATEGORY::IB : [2980, 5400, 9080],
        CATEGORY::IA : [3820, 7500, 13070],
        CATEGORY::S : [5080, 10650, 19050],
    ];

    static SuccessExp = 100;

    function getExp(license_id, license_result, driving_time)
    {
        if (license_result == PRIZE::NONE)
            return 0;

        var license_index = GetIndexByLicenseId(license_id);
        var category_id = GetCategory(license_index);
        var base_exp_list = CategoryExpTable[category_id];
        var base_exp = exp_exp_list[license_result];
        return base_exp + SuccessExp;
    }

    function getString()
    {
        var license = "";
        for (var category = CATEGORY::FIRST; category < CATEGORY::MAX; ++category)
        {
            var result = GAME_STATUS.user_profile.record.license.getCategoryResult(category);
            if (result == -1)
                break;

            license = CategoryString[category];
        }

        return license;
    }

    function getCountOfResult()
    {
        var gold = 0;
        var silver = 0;
        var bronze = 0;

        var res = GAME_STATUS.user_profile.record.license.getCountOfResult();
        foreach (|var result, var count| in res)
        {
            switch (result)
            {
                case PRIZE::GOLD:
                    gold = count;
                    break;

                case PRIZE::SILVER:
                    silver = count;
                    break;

                case PRIZE::BRONZE:
                    bronze = count;
                    break;
            }
        }

        return [gold, silver, bronze];
    }

    static CategoryNeedLevel = [
        CATEGORY::B : 0,
        CATEGORY::A : 3,
        CATEGORY::IC : 6,
        CATEGORY::IB : 9,
        CATEGORY::IA : 12,
        CATEGORY::S : 15,
    ];

    function getCategoryNeedLevel(category_id)
    {
        return CategoryNeedLevel[category_id];
    }

    static rewardList = [
        6000,
        7000,
        10000,
        8000,
        9000,
        12000,
    ];

    function getReward(category, index)
    {
        var base = rewardList[category];
        var prize = base + ((base / 10) * index);
        return [prize * 4, prize * 2, prize, 0];
    }

}
