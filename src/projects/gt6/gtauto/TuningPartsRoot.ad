

















module ROOT
{
    hidden.visible = false;

    static sPartsList = [
        TUNING_PARTS_CATEGORY::TIRE : [
            ["TIRE_COMFORT", [
                ["TIRE", ["COMFORT_HARD", "COMFORT_MEDIUM", "COMFORT_SOFT"]]
            ]],
            ["TIRE_SPORTS", [
                ["TIRE", ["SPORTS_HARD", "SPORTS_MEDIUM", "SPORTS_SOFT"]]
            ]],
            ["TIRE_RACING", [
                ["TIRE", ["RACING_HARD", "RACING_MEDIUM", "RACING_SOFT", "RAIN_INTERMEDIATE", "RAIN_HEAVY_WET"]]
            ]],
            ["TIRE_DIRT_SNOW", [
                ["TIRE", ["DIRT", "SNOW"]]
            ]],
        ],
        TUNING_PARTS_CATEGORY::SUSPENSION : [
            ["SUSPENSION_KIT", [
                ["SUSPENSION", ["SPORTS1", "SPORTS2", "SPORTS3", "RACING"]]
            ]],
            ["BRAKE_KIT", [
                ["BRAKE", ["_4PISTON"]]
            ]],
        ],
        TUNING_PARTS_CATEGORY::DRIVE_SYSTEM : [
            ["TRANSMISSION", [
                ["GEAR", ["CLOSE", "SUPER_CLOSE", "VARIABLE"]]
            ]],
            ["CLUTCH_AND_FLYWHEEL", [
                ["CLUTCH", ["HIGH_CAPACITY", "TWIN"]]
            ]],
            ["OTHER", [
                ["PROPELLERSHAFT", ["ONE"]],
                ["LSD", ["VARIABLE"]],
                ["DRIVETRAIN", ["VARIABLE_CENTER_DIFF"]],
            ]],
        ],
        TUNING_PARTS_CATEGORY::POWER : [
            ["ENGINE", [
                ["NATUNE", ["LEVEL1", "LEVEL2", "LEVEL3"]],
                ["COMPUTER", ["LEVEL1"],]
            ]],
            ["INTAKE_AND_EXHAUST", [
                ["INTAKE_MANIFOLD", ["ONE"]],
                ["MUFFLER", ["SPORTS", "SEMI_RACING", "RACING"]],
                ["EXHAUST_MANIFOLD", ["ONE"]],
                ["CATALYST", ["SPORTS"]],
            ]],
            ["TURBO_KIT", [
                ["TURBINEKIT", ["LEVEL1", "LEVEL2", "LEVEL3"]],
                ["SUPERCHARGER", ["ONE"]],
            ]],
            ["NOS", [
                ["NOS", ["ONE"]],
            ]],
        ],
        TUNING_PARTS_CATEGORY::BODY : [
            ["LIGHT_WEIGHT", [
                ["LIGHT_WEIGHT", ["STAGE1", "STAGE2", "STAGE3"]],
            ]],
            ["LIGHT_WEIGHT_PARTS", [
                ["LIGHT_WEIGHT_WINDOW", ["ONE"]],
                ["BONNET", ["CARBON", "PAINT_CARBON"]],
            ]],
        ],
    ];

    attribute modal_page;
    attribute tuning_category_name;
    attribute riding_car;
    attribute is_racing_kart = false;
    attribute is_begin_info = false;
    attribute need_save = false;

    method open(context, tuning_category_name)
    {
        self.tuning_category_name = tuning_category_name;
        self.modal_page = main::SequenceUtil::ModalPage(context, ROOT);
        self.modal_page.open();
    }

    method close(context)
    {
        if (self.modal_page != nil)
        {
            ContextMain.disableInput();

            if (self.need_save)
            {
                SaveDataUtilGT6::saveEveryWhere(context);
                self.need_save = false;
            }

            PageUtil::visibleUnderPages(context, self);

            var actor = self.Fade;
            actor.backward();
            actor.start();

            var delay_time = actor.total_time;
             self.modal_page.close(delay_time);
             self.modal_page = nil;

             ContextMain.enableInput();
        }
    }

    function BeginRidingCarInfo()
    {
        if (!ROOT.is_begin_info && ROOT.riding_car != nil)
        {
            ROOT.riding_car.beginInfo();
            ROOT.is_begin_info = true;
        }
    }

    function EndRidingCarInfo()
    {
        if (ROOT.is_begin_info && ROOT.riding_car != nil)
        {
            ROOT.riding_car.endInfo();
            ROOT.is_begin_info = false;
        }
    }

    function ApplayGarage()
    {
        EndRidingCarInfo();

        GAME_STATUS.user_profile.garage.updateCar(ROOT.riding_car);
        ROOT.need_save = true;

        BeginRidingCarInfo();
    }

    method onInitialize(context)
    {
        self.need_save = false;
        self.riding_car = GAME_STATUS.user_profile.garage.getRidingCar();
        self.is_racing_kart = gtengine::MSpecDB::checkFlag(self.riding_car.getCarCode(), gtengine::GenericFlag::IS_RACING_KART);
        
        BeginRidingCarInfo();

        ContextMain.disableInput();

        var actor = self.Fade;
        actor.forward();
        actor.restart();
        actor.on_effect_end = function(context)
        {
            actor.on_effect_end = nil;
            PageUtil::invisibleUnderPages(context, self);
            ContextMain.enableInput();
        };

        GTAutoMenu.initialize(context, self.tuning_category_name);
        self.Fade.forward();
        self.Fade.restart();
    }

    method onFinalize(context)
    {
        self.EndRidingCarInfo();
        self.tuning_category_name = nil;
        self.riding_car = nil;
        self.is_begin_info = false;
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        if (event.keysym == CELL_PAD_CTRL_START)
        {
            EndRidingCarInfo();

            var preopen_garage_id = GAME_STATUS.user_profile.garage.getRidingGarageId();
            if (CursorProject::StartMenuRoot::StartMenu.checkKeyPress(context, event))
            {
                if (preopen_garage_id != GAME_STATUS.user_profile.garage.getRidingGarageId())
                {
                    self.riding_car = GAME_STATUS.user_profile.garage.getRidingCar();
                    self.is_racing_kart = gtengine::MSpecDB::checkFlag(self.riding_car.getCarCode(), gtengine::GenericFlag::IS_RACING_KART);
                }

                GTAutoMenu.updatePartsConditions(context);
            }

            BeginRidingCarInfo();
        }

        return EVENTRESULT_CONTINUE;
    }

    module GTAutoMenu
    {
        attribute active_w;

        method initialize(context, tuning_category_name)
        {
            var focus_w = nil;
            var parts_category_list = sPartsList[tuning_category_name];
            var category_w = hidden::Category.doCopy();

            var tuning_category_label = sTuningPartsCategoryLabels[tuning_category_name];
            category_w.setText(manager.translate("GTAuto", tuning_category_label));

            foreach (|var parts_category_label, var category_parts_list| in parts_category_list)
            {
                var category_item_w = hidden::CategoryItem.doCopy();
                category_item_w.value = category_parts_list;
                category_item_w.setText(manager.translate("GTAuto", parts_category_label));
                category_w.setCategoryItemComponent(context, category_item_w);

                if (focus_w == nil)
                    focus_w = category_item_w;
            }

            self.setCategoryComponent(context, category_w);
            self.setActive(context, focus_w);

            ROOT.setFocus(focus_w);
        }

        method onFinalize(context)
        {
            if (self.active_w != nil)
            {
                self.active_w.active = false;
                self.active_w = nil;
            }

            self.clearCategoryComponent(context);
        }

        method setActive(context, active_item)
        {
            if (self.active_w != nil)
            {
                self.active_w.active = false;
                self.active_w = nil;
            }

            active_item.active = true;
            self.active_w = active_item;
            self.updateList(context, active_item);
        }

        method updateList(context, item)
        {
            if (item == nil)
                item = self.active_w;

            var category_parts_list = item.value;
            GTAutoMenu::ListWindow::clip::ListBox.setPartsList(context, category_parts_list);
        }

        method updatePartsConditions(context)
        {
            for (var i = 0; i < GTAutoMenu::ListWindow::clip::ListBox.getItemCount(); i++)
            {
                var w = GTAutoMenu::ListWindow::clip::ListBox.getItemWidget(i);
                if (w != nil)
                {
                    |var parts_type_name, var parts_name| = GTAutoMenu::ListWindow::clip::ListBox.parts_list[i];
                    w.updatePartsConditions(context, parts_type_name, parts_name);
                }
            }
        }
    }

    module GTAutoMenu::ListWindow::clip::ListBox
    {
        attribute parts_list;
        attribute prev_focus_w_;

        method setPartsList(context, category_parts_list)
        {
            var parts_list = [];
            var visible_Logo_kw = false;
            var visible_Logo_yokohama = false;

            foreach (|var parts_type_name, var parts_name_list| in category_parts_list)
            {
                foreach (var parts_name in parts_name_list)
                {
                    parts_list.push([parts_type_name, parts_name]);
                }

                if (!visible_Logo_kw && parts_type_name == "SUSPENSION")
                    visible_Logo_kw = true;

                if (!visible_Logo_yokohama && parts_type_name == "TIRE")
                    visible_Logo_yokohama = true;
            }

            self.setItemTemplate(context, hidden::ListItem);
            self.setItemCount(0);
            self.postRedraw();

            context.wait();

            self.setItemCount(parts_list.size);
            self.parts_list = parts_list;
            self.focus_index = 0;

            var empty = parts_list.size > 0;
            self.insensitive = !empty;

            ListWindow::Empty.visible = !empty;
            ListWindow::Bg::Logo_kw.visible = visible_Logo_kw;
            ListWindow::Bg::Logo_yokohama.visible = visible_Logo_yokohama;
        }

        method inFocus(context)
        {
            if (self.insensitive)
                return;

            var focus_w = ROOT.getFocusWidget();
            if (focus_w == nil)
                return;

            self.prev_focus_w_ = focus_w;
            ROOT.setFocus(GTAutoMenu.getListBox());
        }

        method outFocus(context)
        {
            if (self.prev_focus_w_ != nil)
            {
                ROOT.setFocus(self.prev_focus_w_);
                self.prev_focus_w_ = nil;
            }
        }

        method onActivate(context)
        {
            var w = self.getInitializedWidget(context, self.focus_index);
            if (w == nil)
                return EVENTRESULT_FILTER;

            w.on_activate(context);
            return EVENTRESULT_FILTER;
        }

        method getInitializedWidget(context, i)
        {
            if (i < 0)
                return nil;

            var w = self.getItemWidget(i);
            if (w == nil)
            {
                w = self.getItemWidget(i, context);
            }

            if (w.value == nil)
            {
                |var parts_type_name, var parts_name| = self.parts_list[i];
                w.initialize(context, parts_type_name, parts_name);
            }

            return w;
        }

        method onKeyPress(context, event)
        {
            if (event.keysym == CELL_PAD_CTRL_L3_LEFT)
            {
                sound.play("cursor");
                GTAutoMenu::ListWindow::clip::ListBox.outFocus(context);
                return EVENTRESULT_FILTER;
            }

            return EVENTRESULT_CONTINUE;
        }

        method onFocusNotify(context, new_index, old_index)
        {
            if (new_index != nil)
            {
                var w = self.getItemWidget(new_index, context);
                if (w != nil && w.defined("on_focus_enter"))
                    w["on_focus_enter"](context);
            }

            if (old_index != nil)
            {
                var w = self.getItemWidget(old_index, context);
                if (w != nil && w.defined("on_focus_leave"))
                    w["on_focus_leave"](context);
            }

            return EVENTRESULT_STOP;
        }

        method onVisibleNotify(context, indices)
        {
            foreach (var i in indices)
            {
                if (self.getItemVisible(i))
                    var w = self.getInitializedWidget(context, i);
                else
                    self.setItemWidget(i, context, nil);
            }

            return EVENTRESULT_STOP;
        }
    }

    module hidden::CategoryItem
    {
        method onActivate(context, event)
        {
            if (self == GTAutoMenu.active_w)
                return EVENTRESULT_FILTER;

            sound.play("ok");

            GTAutoMenu.setActive(context, event.widget);
            return EVENTRESULT_FILTER;
        }

        method onKeyPress(context, event)
        {
            if (event.keysym == CELL_PAD_CTRL_L3_RIGHT)
            {
                sound.play("cursor");
                GTAutoMenu::ListWindow::clip::ListBox.inFocus(context);
                return EVENTRESULT_FILTER;
            }

            return EVENTRESULT_CONTINUE;
        }
    }

    module hidden::ListItem
    {
        class Data
        {
            attribute parts_type_index;
            attribute parts_type_name;
            attribute parts_index;
            attribute parts_name;
            attribute price;
            attribute name;

            method __init__(parts_type_name, parts_name, parts_type_index, parts_index, price, name)
            {
                self.parts_type_name = parts_type_name;
                self.parts_type_index = parts_type_index;
                self.parts_name = parts_name;
                self.parts_index = parts_index;
                self.price = price;
                self.name = name;
            }
        }

        attribute value;

        method onInitialize(context)
        {
            self.Name.text = "";
            self.Thumbnail.image_path = "";
            self.Description.text = "";
            self.CrPrice::Price.text = "";
            self.OwnFlag.visible = false;
            self.Invalid.visible = false;
            self.Opacity.reset();
        }

        method initialize(context, parts_type_name, parts_name)
        {
            var parts_type_index = GTAutoUtil::getPartsTypeIndex(parts_type_name);
            var parts_index = GTAutoUtil::getPartsIndex(parts_type_name, parts_name);
            var price = GTAutoUtil::getPartsPrice(ROOT.riding_car, parts_type_name, parts_name);
            var is_having_parts = ROOT.riding_car.isHavingParts(parts_type_index, parts_index);
            var invalid_parts = !ROOT.riding_car.isExistParts(parts_type_index, parts_index);

            if (ROOT.is_racing_kart && parts_type_name == "TIRE")
                invalid_parts = true;

            self.Name.text = manager.translate("Setting", "%{parts_type_name}_%{parts_name}");
            self.Description.text = manager.translate("SettingDescription", "%{parts_type_name}_%{parts_name}");
            self.Thumbnail.image_path = "/piece/gt6/tuning_parts_S/%s_%s.img".format(parts_type_name.downcase(), parts_name.downcase());
            self.CrPrice::Price.text = pdiext::MMisc::GetMoneyString(price);
            self.OwnFlag.visible = is_having_parts;
            self.Invalid.visible = invalid_parts;
            self.CrPrice.visible = !invalid_parts;

            self.value = Data(parts_type_name, parts_name, parts_type_index, parts_index, price, self.Name.text);
            self.Opacity.start();
        }

        method updatePartsConditions(context, parts_type_name, parts_name)
        {
            var parts_type_index = GTAutoUtil::getPartsTypeIndex(parts_type_name);
            var parts_index = GTAutoUtil::getPartsIndex(parts_type_name, parts_name);
            var price = GTAutoUtil::getPartsPrice(ROOT.riding_car, parts_type_name, parts_name);
            var is_having_parts = ROOT.riding_car.isHavingParts(parts_type_index, parts_index);
            var invalid_parts = !ROOT.riding_car.isExistParts(parts_type_index, parts_index);

            if (ROOT.is_racing_kart && parts_type_name == "TIRE")
                invalid_parts = true;

            self.CrPrice::Price.text = pdiext::MMisc::GetMoneyString(price);
            self.OwnFlag.visible = is_having_parts;
            self.Invalid.visible = invalid_parts;
            self.CrPrice.visible = !invalid_parts;
        }

        method on_activate(context)
        {
            if (self.Invalid.visible)
            {
                main::sound.play("disable");
                return;
            }

            main::sound.play("ok");

            var data = self.value;

            if (data.parts_type_name == "TIRE")
                data.parts_type_name = "FRONT_TIRE";

                ROOT.setFocus(self);

            ROOT::BeginRidingCarInfo();

            var res = SettingProject::PartsRoot.open(context, ROOT.riding_car, data.parts_type_name, data.parts_name);
            if (res != nil)
            {
                ROOT.ApplayGarage();
                CursorProject::StartMenuRoot::StartMenu.reflectCurrentStatus(context);
                self.OwnFlag.visible = true;
            }
        }

        method set_active(active) 
        { 
            
        }
    }
}