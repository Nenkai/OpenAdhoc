//---------------------------------------------------------------------------------------
// RaceRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

#include "projects/gt5m/option/KeyConfig.h";

module ROOT
{
    attribute sAlreadyQuited = false;
    attribute sBGMPlayFlags = 0;

    attribute sKeyCode2text = nil;

    static KUVlist = [
         1 : [PSP_PAD_CTRL_L3_UP, PSP_PAD_CTRL_L3_UP, 0x10 / 48.0, 0x00 / 96.0, 0x10 / 48.0, "InputInfo", "Change_Target"],
         2 : [PSP_PAD_CTRL_L3_DOWN, PSP_PAD_CTRL_L3_DOWN, 0x10 / 48.0, 0x30 / 96.0, 0x10 / 48.0, "InputInfo", "Change_Target"],
         3 : [PSP_PAD_CTRL_L3_LEFT, PSP_PAD_CTRL_L3_LEFT, 0x10 / 48.0, 0x20 / 96.0, 0x10 / 48.0, nil],
         4 : [PSP_PAD_CTRL_L3_RIGHT, PSP_PAD_CTRL_L3_RIGHT, 0x10 / 48.0, 0x10 / 96.0, 0x10 / 48.0, nil],
         7 : [PSP_PAD_CTRL_START, PSP_PAD_CTRL_START, 0x18 / 48.0, 0x40 / 96.0, 0x18 / 48.0, nil],
         8 : [PSP_PAD_CTRL_SELECT, PSP_PAD_CTRL_SELECT, 0x00 / 48.0, 0x40 / 96.0, 0x18 / 48.0, "Keyconfig", "BUTTON_PLAYVIEW"],
         9 : [PSP_PAD_CTRL_CROSS, PSP_PAD_CTRL_CIRCLE, 0x00 / 48.0, 0x00 / 96.0, 0x10 / 48.0, nil],
        10 : [PSP_PAD_CTRL_CIRCLE, PSP_PAD_CTRL_CROSS, 0x00 / 48.0, 0x30 / 96.0, 0x10 / 48.0, "InputInfo", "Change_Camera"],
        11 : [PSP_PAD_CTRL_TRIANGLE, PSP_PAD_CTRL_TRIANGLE, 0x00 / 48.0, 0x10 / 96.0, 0x10 / 48.0, nil],
        12 : [PSP_PAD_CTRL_SQUARE, PSP_PAD_CTRL_SQUARE, 0x00 / 48.0, 0x20 / 96.0, 0x10 / 48.0, "InputInfo", "Change_DisplayType"],
        18 : [PSP_PAD_CTRL_L1, PSP_PAD_CTRL_L1, 0x00 / 48.0, 0x50 / 96.0, 0x18 / 48.0, "Keyconfig", "BUTTON_BACKVIEW"],
        19 : [PSP_PAD_CTRL_R1, PSP_PAD_CTRL_R1, 0x18 / 48.0, 0x50 / 96.0, 0x18 / 48.0, nil], 
    ];

    static sBGMPlayTypeMap = [
        main::gtengine::StartType::GRID : 1 | 4,
        main::gtengine::StartType::ROLLING : 2,
        main::gtengine::StartType::PIT : 2,
        main::gtengine::StartType::ATTACK : 4,
        main::gtengine::StartType::DISPERSED : 2,
        main::gtengine::StartType::COURSEINFO : 2,
        main::gtengine::StartType::ROLLING2 : 2,
        main::gtengine::StartType::SAMEGRID : 2,
        main::gtengine::StartType::ROLLING3 : 2,
        main::gtengine::StartType::COURSEINFO_ROLLING : 2,
        main::gtengine::StartType::STANDING : 2,
        main::gtengine::StartType::ROLLING_NOLIMIT : 2,
        main::gtengine::StartType::FREE : 2,
        main::gtengine::StartType::STANDING_L : 2,
        main::gtengine::StartType::STANDING_R : 2
    ];

    method onUnload(context)
    {
    }

    method onInitialize(context)
    {
        context.event_mask |= 1;

        main::gtengine::setEventCallback(context, PROJECT);
        main::ORG.setEventCallback(context, ROOT);

        createPauseMenu(context);

        self.sAlreadyQuited = false;

        main::ORG.window_max = main::RaceOperator.window_max;
        resetDisplay(context);
        self.visible = true;
        OnboardMeterRoot.visible = true;

        gSequenceCondition.startSession();

        var rp = main::RaceOperator.race_parameter;
        var target = rp.online_on ? main::RaceOperator.getAccountSlotID(0) : main::RaceOperator.getTargetSlot(0);
        main::ORG.setCameraTarget(0, target);
        main::ORG.startSession(rp,
                               gSequenceCondition.is_buffer_replay_mode,
                               gSequenceCondition.is_spectator_mode,
                               false);

        main::RaceOperator.race_parameter = rp;

        var event = gSequenceCondition.event;
        if (event != nil)
        {
            if (event.play_style != nil)
            {
                var leave_limit = event.play_style.leave_limit;
                if (leave_limit != nil)
                {

                    if (!gSequenceCondition.is_buffer_replay_mode &&
                        !gSequenceCondition.is_spectator_mode &&
                        leave_limit > 0)
                    {
                        LeaveDetectUtil::begin(context, leave_limit,
                                               self, quit_race, nil);
                    }
                }
            }
        }

        main::ORG.enableRenderingRace();
        main::ORG.enableSoundingRace();

        if (PluginModule.defined("onROOTInitialize"))
            PluginModule::onROOTInitialize(context, ROOT);

        context.pushEvent(main::menu::MFunctionEvent(on_initialize, context));

        KeyInfoInit(context);

        if (gSequenceCondition.isPlay())
        {
            var rp = main::ORG.getCurrentRaceParameter(); var unknown; // NOTE: Unused extra var somewhere around here, implied by the LEAVE instructions of the child scopes in the original compiled code
            var flags = sBGMPlayTypeMap[rp.start_type];
            if (flags == nil)
                flags = 0;

            if (flags & 1)
            {
                if (rp.time_to_start < 6 * 1000)
                    flags &= ~1;
            }

            self.sBGMPlayFlags = flags;
        }
        else
        {
            self.sBGMPlayFlags = 2;
        }

        OnboardMeterRoot::RaceDisplayFace.se_volume = main::sound.menu_se_volume;

        Lolipop.visible = false; // NOTE: Typo in original
        Lolipop::Stop::ScalarInterpolator.reset();
        Lolipop::Ready::ScalarInterpolator.reset();
        Lolipop::Ready::ScalarInterpolator.reverse = false;

    }

    method on_initialize(context)
    {
        ROOT.setFocus(nil);
    }

    method onFinalize(context)
    {
        if (PluginModule.defined("onROOTFinalize"))
            PluginModule::onROOTFinalize(context, ROOT);

        main::ORG.disableRenderingRace();
        main::ORG.disableSoundingRace();

        LeaveDetectUtil::end(context);

        removePauseMenu(context);

        main::ORG.clearEventCallback();
        main::gtengine::clearEventCallback();

        self.sKeyCode2text = nil;


        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        if (RaceMenuUtil::activated())
        {
            main::sound.play("cancel");
            closeRaceMenu(context);
        }

        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        while (!(event.state & 0x200))
        {
            if (main::ORG.pauseRace)
            {
                if (event.keysym != PSP_PAD_CTRL_START)
                    break;
            }

            var B = main::ORG.getCamearType(); // NOTE: Typo in original
            if (B != 0)
            {
                if (event.keysym == PSP_PAD_CTRL_L1 || event.keysym == PSP_PAD_CTRL_SELECT)
                    break;
            }
            
            var X = self.sKeyCode2text[event.keysym];
            if (X != nil)
            {
                var W = ROOT.Keyinfo;
                W.TextFace.text = X[0];
                W.ImageFace.Texcoord(X[1], X[2], X[1] + X[3], X[2] + (16 / 96.0));
                W.ImageFace.w = X[3] * 48;
                W.ImageFace.x = W.TextFace.x - W.ImageFace.w;
                W.ImageFace.h = 16;
                W.ScalarInterpolator.restart();
            }
            break;
        }

        if (RaceMenuUtil::activated())
            return EVENTRESULT_CONTINUE;
        else
            return EVENTRESULT_FILTER;
    }

    method onDriverChange(context)
    {
        if (!RaceMenuUtil::activated())
            return EVENTRESULT_FILTER;

        SoundUtil::BGMPause(true);
        main::sound.play("ok");

        var slot_id = getPlayerSlot();
        var idx = main::ORG.getRidingDriverIndex(slot_id);
        idx = (idx + 1) & 1;
        main::ORG.setRidingDriverIndex(slot_id, idx);
        main::ORG.pauseHandleAvailable = false;

        RaceMenuUtil::closeAction(context);

        main::ORG.pauseRace = false;
        SoundUtil::BGMPause(false);

        OnboardMeterRoot.appearPanel(0);

        ROOT.setFocus(nil);

        main::ORG.pauseHandleAvailable = true;

        return EVENTRESULT_FILTER;
    }

    method onRestart(context)
    {
        if (!RaceMenuUtil::activated())
            return EVENTRESULT_FILTER;

        main::ORG.pauseHandleAvailable = false;
        SoundUtil::BGMStop();

        main::sound.play("ok");
        RaceMenuUtil::closeAction(context);
        restart(context);

        return EVENTRESULT_FILTER;
    }

    method onContinue(context)
    {
        if (!RaceMenuUtil::activated())
            return EVENTRESULT_FILTER;

        main::ORG.pauseHandleAvailable = false;

        main::sound.play("cancel");

        RaceMenuUtil::closeAction(context);

        main::ORG.pauseRace = false;

        OnboardMeterRoot.appearPanel(0);

        ROOT.setFocus(nil);

        SoundUtil::BGMPause(false);

        main::ORG.pauseHandleAvailable = true;

        return EVENTRESULT_FILTER;
    }

    method onExit(context)
    {
        if (!RaceMenuUtil::activated())
        {
            main::sound.play("cancel");
            return EVENTRESULT_FILTER;
        }

        if (PluginModule.defined("onExit"))
        {
            PluginModule::onExit(context);
        }
        else
        {
            main::sound.play("start");
            OnboardMeterRoot::RaceDisplayFace.toStop();
            RaceMenuUtil::closeAction(context);
            quit(context, true);
        }

        return EVENTRESULT_FILTER;
    }

    method restart(context)
    {
        addTotalRunningKm();

        main::ORG.endSession();
        SoundUtil::BGMFadeout(0.5);

        SequenceUtil::startPage(context, OnboardMeterRoot, ROOT);
    }

    method resetDisplay(context)
    {
        foreach (var CD in [Info::CountDown::CD_1, Info::CountDown::CD_2, Info::CountDown::CD_3])
            CD.ImageFaceEffect.ScalarInterpolatorX.on_effect_end = nil;

        ActorUtil::ResetInterpolators(Info::Go::ImageFace, false, true);
        ActorUtil::ResetInterpolators(Info::Go::ImageFaceEffect, false, true);
        ActorUtil::ResetInterpolators(Info::Goal::ImageFace, false, true);
        ActorUtil::ResetInterpolators(Info::Goal::ImageFaceEffect, false, true);
        ActorUtil::ResetInterpolators(Info::CountDown::CD_1::ImageFace, false, true);
        ActorUtil::ResetInterpolators(Info::CountDown::CD_1::ImageFaceEffect, false, true);
        ActorUtil::ResetInterpolators(Info::CountDown::CD_2::ImageFace, false, true);
        ActorUtil::ResetInterpolators(Info::CountDown::CD_2::ImageFaceEffect, false, true);
        ActorUtil::ResetInterpolators(Info::CountDown::CD_3::ImageFace, false, true);
        ActorUtil::ResetInterpolators(Info::CountDown::CD_3::ImageFaceEffect, false, true);

        Info.Go.visible = false;
        Info.Goal.visible = false;
        Info.NextlapInvalid.visible = false;

        Jackpot.visible = false;
        JPlogoWait.visible = false;
        rate.visible = false;

        OnboardMeterRoot::DriftFlag.visible = false;

        var X = OnboardMeterRoot::CurrentRecord;
        X.Sector::ScalarInterpolator.warp();
        X.Different::ScalarInterpolator.warp();
    }

    method closeRaceMenu(context)
    {
        main::ORG.pauseHandleAvailable = false;

        RaceMenuUtil::setFocus(context, 0);
        RaceMenuUtil::closeAction(context);

        main::ORG.pauseRace = false;

        OnboardMeterRoot.appearPanel(0);

        ROOT.setFocus(nil);

        SoundUtil::BGMPause(false);

        main::ORG.pauseHandleAvailable = true;
    }

    method createPauseMenu(context)
    {
        var icons = [];
        icons.push(RaceMenuUtil::Icon("CONTINUE", "icon_Q_continue.png", onContinue));
        if (gSequenceCondition.enable_restart)
            icons.push(RaceMenuUtil::Icon("RESTART", "icon_Q_restart.png", onRestart));
        if (gSequenceCondition.enable_driver_change)
            icons.push(RaceMenuUtil::Icon("DRIVERCHANGE", "icon_Q_change.png", onDriverChange));


        if (PluginModule.defined("onCreatePauseMenu"))
            PluginModule::onCreatePauseMenu(context, icons);

        icons.push(RaceMenuUtil::Icon("EXIT", "icon_Q_exit.png", onExit));
        RaceMenuUtil::create(context, ROOT, Template::RaceMenu, icons, "QuickMenu");

        RaceMenuUtil::setClosed();
    }

    method removePauseMenu(context)
    {
        RaceMenuUtil::remove(context);
    }

    method activatePauseMenu(context)
    {
        RaceMenuUtil::resetCloseAction(context);

        RaceMenuUtil::setFocus(context, 0);

        context.cursor_visible = true;
        RaceMenuUtil::appearAction();

        SoundUtil::BGMPause(true);
    }

    method deactivatePauseMenu(context)
    {
        context.cursor_visible = false;
        RaceMenuUtil::hideAction();
        ROOT.setFocus(nil);

        SoundUtil::BGMPause(false);
    }

    method addTotalRunningKm()
    {
        if (!gSequenceCondition.is_buffer_replay_mode)
        {
            var slot_id = getPlayerSlot();
            var trip = main::ORG.getVehicleTripKm(slot_id);
            if (trip > 0)
            {
                gSequenceCondition.game_status.user_profile.total_running_km += trip;

                if (gSequenceCondition.game_status.user_profile.total_running_km > 1600000.0)
                gSequenceCondition.game_status.user_profile.total_running_km = 1600000.0;
            }
        }
    }

    method quit(context, is_force_finish)
    {
        if (is_force_finish == nil)
            is_force_finish = false;

        if (self.sAlreadyQuited)
            return;
        else
            self.sAlreadyQuited = true;

        addTotalRunningKm();

        main::ORG.clearEventCallback();

        SoundUtil::BGMFadeout(1.0);
        main::ORG.getRaceSound().start = false;

        main::ORG.endSession();

        if (PluginModule.defined("onGoToNextSequence"))
            PluginModule::onGoToNextSequence(context, is_force_finish);
        else if (gSequenceCondition.quick_root != nil)
            gSequenceCondition.quick_root.open(context);
        else
            goToMenuSequence(context);

        SoundUtil::SetupRaceSound(nil);
    }

    method quit_race(context)
    {
        if (self.sAlreadyQuited)
            return;
        else
            self.sAlreadyQuited = true;

        main::ORG.clearEventCallback();

        SoundUtil::BGMFadeout(1.0);
        main::ORG.getRaceSound().start = false;
        main::ORG.endSession();

        goToMenuSequence(context);

        SoundUtil::SetupRaceSound(nil);
    }

    method onGamePause(context, pause, is_online)
    {
        if (pause)
        {
            main::sound.play("ok");

            OnboardMeterRoot.disappearPanel();

            if (!gSequenceCondition.disable_pause_menu)
                activatePauseMenu(context);
            else
                quit(context, true);
        }
        else
        {
            if (RaceMenuUtil::activated())
            {
                main::sound.play("cancel");
                deactivatePauseMenu(context);

                OnboardMeterRoot.appearPanel(0.5);
            }
        }
    }

    method onEntryRace(context, slot_id, is_remote, car_code, name)
    {
    }

    method onLeaveRace(context, slot_id, is_remote, car_code, name)
    {
    }

    method onStartSession(context)
    {
        main::ORG.pauseHandleAvailable = true;

        var is_play = gSequenceCondition.isPlay();
        SoundUtil::SetupRaceSound(!is_play);

        if (self.sBGMPlayFlags & 2)
            SoundUtil::RaceBGMPlayGroup("racing", !is_play);
        else if (self.sBGMPlayFlags & 1)
        {
            var group = gSequenceCondition.game_mode == main::gtengine::GameMode::LICENSE ? "license_start" : "start";
            SoundUtil::RaceBGMPlayGroup(group, !is_play, false);
        }
    }

    method onEndSession(context)
    {
    }

    method onRestartSession(context)
    {
    }

    method onPreTimeLimit(context, limit_frame, elapsed_frame)
    {
        SoundUtil::BGMFadeout(1.0);
        main::ORG.getRaceSound().start = false;
    }

    method onButtonEvent(context, slot_id, event_type)
    {
    }

    method onPitIn(context, slot_id)
    {
        main::ORG.setPitMode(slot_id, true, false);
    }

    method onPitStop(context, slot_id)
    {
    }

    method onPitOut(context, slot_id)
    {
        Info::CountDown::CD_1.visible = false;
        var target = getPlayerSlot();
        if (slot_id == target)
        {
            Info::Go.visible = true;
            ActorUtil::ResetInterpolators(Info::Go::ImageFace, true);
            ActorUtil::ResetInterpolators(Info::Go::ImageFaceEffect, true);


            main::sound.play("voice_start");
            main::sound.play("count_s", main::sound.menu_se_volume * 0.5);
        }
    }

    method onTimeLimit(context, limit_frame, elapsed_frame)
    {
        self.quit(context, true);
    }

    method onNoInputLimit(context)
    {

    }

    method onStartRaceRequest(context)
    {
        var rp = main::ORG.getCurrentRaceParameter();
        var slot = getPlayerSlot();
        var delay_sec = 0;
        if (slot >= 0 && slot < main::gtengine::EntryMax)
            delay_sec = rp.getDelayStartSecond(slot);
        else
        {
        }

        Lolipop.visible = false;
        if (delay_sec > 0)
        {
            Lolipop::Stop::ScalarInterpolator.reset();
            Lolipop::Ready::ScalarInterpolator.reset();
            Lolipop::Ready::ScalarInterpolator.reverse = false;
            Lolipop.visible = true;
        }
    }

    method onOffsetCountDown(context, count)
    {

        Info::CountDown::CD_1.visible = 1 == count;
        Info::CountDown::CD_2.visible = 2 == count;
        Info::CountDown::CD_3.visible = 3 == count;

        var CD;
        if (count == 1 )
            CD = Info::CountDown::CD_1;
        else if (count == 2)
            CD = Info::CountDown::CD_2;
        else if (count == 3)
        {
            CD = Info::CountDown::CD_3;
            Lolipop::Stop::ScalarInterpolator.restart();
            Lolipop::Ready::ScalarInterpolator.restart();
        }

        CD.ImageFaceEffect.ScalarInterpolatorX.on_effect_end = function (context)
        {
            ActorUtil::ResetInterpolators(CD.ImageFace, true);
            CD.ImageFaceEffect.ScalarInterpolatorX.on_effect_end = nil;
        }
        ActorUtil::ResetInterpolators(CD.ImageFaceEffect, true);
    }

    method onCountDown(context, count)
    {
        if (count == 3)
            main::sound.play("voice_ready");

        main::sound.play("count_d", main::sound.menu_se_volume * 0.5);
    }

    method onStartRace(context, start_time)
    {
        var rp = main::ORG.getCurrentRaceParameter();
        if (rp.start_type == main::gtengine::StartType::GRID) 
        {
            if (self.sBGMPlayFlags & 4)
                SoundUtil::RaceBGMPlayGroup("racing", !gSequenceCondition.isPlay());
        }
    }

    method onStartVehicle(context, slot_id)
    {
        Info::CountDown::CD_1.visible = false;
        var target = getPlayerSlot();
        if (slot_id == target && main::ORG.getEntryControlType(slot_id) == main::gtengine::ControlType::LOCAL)
        {
            Info::Go.visible = true;
            ActorUtil::ResetInterpolators(Info::Go::ImageFace, true);
            ActorUtil::ResetInterpolators(Info::Go::ImageFaceEffect, true);

            main::sound.play("voice_start");
            main::sound.play("count_s", main::sound.menu_se_volume * 0.5);

            var rp = main::ORG.getCurrentRaceParameter();
            if (rp.start_type != main::gtengine::StartType::GRID) 
            {
                if (self.sBGMPlayFlags & 4)
                    SoundUtil::RaceBGMPlayGroup("racing", !gSequenceCondition.isPlay());
            }
        }

        if (slot_id == target)
        {
            Lolipop::Ready::ScalarInterpolator.reverse = true;
            Lolipop::Ready::ScalarInterpolator.restart();
        }
    }

    method onFinishRace(context, condition_satisfied, buggy_result)
    {
        if (PluginModule.defined("onFinishRace"))
        {
            PluginModule::onFinishRace(context, condition_satisfied, buggy_result);
        }
        else if (condition_satisfied)
        {
            var target = getPlayerSlot();
            gSequenceCondition.finish_result = getEnsuredOrder(target);
            if (gSequenceCondition.is_buffer_replay_mode)
                self.quit(context);
            else
                ResultRoot.open(context, false);
        }
    }

    method onLapCount(context, slot_id, laps, laptime, is_penalty_lap)
    {
        if (PluginModule.defined("onLapCount"))
            PluginModule::onLapCount(context, slot_id, laps, laptime, is_penalty_lap);

        if (gSequenceCondition.game_mode == main::gtengine::GameMode::ADHOC_BATTLE_AMA ||
            gSequenceCondition.game_mode == main::gtengine::GameMode::ADHOC_BATTLE_SHUFFLE ||
            gSequenceCondition.game_mode == main::gtengine::GameMode::ADHOC_BATTLE_PRO)
        {

            main::ORG.fetchRaceDisplay();

            var order_list = main::ORG.getCarOrderList();
            if (order_list.size > 0 && order_list[0] == slot_id)
            {
                var rp = main::ORG.getCurrentRaceParameter();
                if (rp.race_limit_laps > 1 && laps == rp.race_limit_laps)
                {
                    main::sound.play("jackpot_logo");
                    self.onJackPot(context, rp.lucky_slot_id);
                }
            }
        }
    }

    method onSectionTime(context, window, sectime, difftime, difflaps)
    {
        OnboardMeterRoot::RaceDisplayFace.setlaptime(sectime, difftime);

        var X = OnboardMeterRoot::CurrentRecord;
        if (sectime != 0) X.Sector::ScalarInterpolator.restart();
        if (difftime != 0) X.Different::ScalarInterpolator.restart();
    }

    method onUpdateLiveTiming(context)
    {
        if (PluginModule.defined("onUpdateLiveTiming"))
            ;
        else
            ResultRoot.updateBoard(context);
    }

    method onComplete(context, slot_id, result, is_forced, is_target)
    {
        if (PluginModule.defined("onComplete"))
        {
            PluginModule::onComplete(context, slot_id, result, is_forced, is_target);
        }
        else
        {
            if (is_forced)
                return;

            if (is_target)
            {
                if (PluginModule.defined("onPlayMusicWhenComplete"))
                    PluginModule::onPlayMusicWhenComplete(context, result);

                ActorUtil::ResetInterpolators(Info::Goal::ImageFace, true);
                ActorUtil::ResetInterpolators(Info::Goal::ImageFaceEffect, true);
                Info::Goal.visible = true;
            }

            ResultRoot.updateBoard(context);
        }
    }

    method onDisqualify(context, slot_id, result, is_forced, is_target)
    {
        if (PluginModule.defined("onDisqualify"))
            PluginModule::onDisqualify(context, slot_id, result, is_forced, is_target);
    }

    method onOvertake(context, slot_id, from, to)
    {
    }

    method onPenaltyLimitSpeed(context, slot_id, speed_kmh, reason, span_sec, now_sec)
    {
    }

    method onRunOutReplayBuffer(context, run_out_frame, slot_id, pilot_id)
    {
    }

    method onNextlapInvalid(context, reason, slot_id)
    {
        if (!gSequenceCondition.isPlay()) return;

        var W = Info::NextlapInvalid;
        W.TextFace.text = context.translate(ROOT, "NEXTLAP_INVALID");
        W.ScalarInterpolator.restart();
        W.visible = true;
    }

    method getJackpotScalingFactor()
    {
        var table = [2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0];
        var index = main::GlobalStatus::game_context.battle_renchan_num.toInt();

        if (index < 0)
            index = 0;
        else if (table.size <= index)
            index = table.size - 1;

        return table[index];
    }

    method onJackPot(context, lucky_slot_id)
    {
        rate.visible = false;
        Jackpot.visible = false;
        JPlogoWait.visible = false;

        Jackpot::ScalarInterpolator.restart();
        Jackpot::VectorInterpolator.restart();
        Jackpot::VectorInterpolator0.restart();

        Jackpot::ImageFace0.ScalarInterpolator.restart();
        Jackpot::ImageFace1.ScalarInterpolator.restart();
        Jackpot::ImageFace1.ScalarInterpolator0.restart();

        JPlogoWait::JPlogo::WaitFlash.start();
        JPlogoWait::ImageFace0.visible = false;

        JPlogoWait::MissDrop.reset();
        JPlogoWait::MissFade.reset();
        rate.MissDrop.reset();

        rate.ScalarInterpolator.restart();
        rate.text = "x%d".format(self.getJackpotScalingFactor());

        rate.visible = Jackpot.visible = true;

        OnboardMeterRoot::RaceDisplayFace.startJackpot(Jackpot, rate);
    }

    function onJackpotDisplayEvent(context, widget, event, arg)
    {
        SoundUtil::RaceBGMPlayGroup("jackpot", false);
    }

    method KeyInfoInit(context)
    {
        self.sKeyCode2text = Map();

        var BEH = main::pdiext::MSystemConfiguration::GetEnterButtonAssign() == "cross" ? 1 : 0;

        if (!gSequenceCondition.isPlay())
        {
            foreach (|var key, var X| in KUVlist)
            {
                if (X[5] != nil)
                {
                    var lt = context.translate(ROOT, X[5], X[6]);
                    self.sKeyCode2text[X[BEH]] = [lt, X[2], X[3], X[4]];
                }
            }
        }
        else
        {
            var game_option = gSequenceCondition.game_status.user_profile.option;
            var config = game_option.key_config.getConfig(0);
            var config_psp = config[main::gtengine::InputMode::PLAY_NORMAL]["PLAYSTATION_PORTABLE"];
            var is_manual = getPlayerDriver().manual;

            foreach (|var key, var Q| in config_psp["button"])
            {
                var X = KUVlist[key];
                var lk = sButtonCodeMap_forLocalizeKey[Q];
                var lt = context.translate(ROOT, "Keyconfig", lk);

                if (Q == 1 || Q == 2)
                {}
                else if (!is_manual && Q == 8 || Q == 9) {}
                else
                    self.sKeyCode2text[X[BEH]] = [lt, X[2], X[3], X[4]];
            }
        }

        Keyinfo::ScalarInterpolator.warp();

        Keyinfo.visible = gSequenceCondition.game_status.user_profile.option.disable_button_display ? false : true;
    }
}