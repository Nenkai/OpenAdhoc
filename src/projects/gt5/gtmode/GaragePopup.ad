module ROOT
{
    attribute open_on_init = true;

    module Function
    {
        #include "GarageFunction.ad"
    }

    hidden.visible = false;
    SceneFaceForCapture.visible = false;

    attribute popup;
    attribute closed = false;
    attribute strategy;
    attribute ignore_update;
    attribute country_index;
    attribute tuner_index;
    attribute drivetrain_index;
    attribute order_index;

    attribute order;
    attribute by;
    attribute present_to;
    attribute regulation;
    attribute additional_conditions;

    attribute current_riding_id;
    attribute credits_orig;
    attribute no_demo;
    attribute button_help;
    attribute button_help_l1;

    static ALL;

    function getFilterText(context)
    {
        var text = "";
        var country = ROOT.getSelectedCountryName();

        if (country != nil)
            text += context.translate(ROOT, "Country", country);

        var tuner = ROOT.getSelectedTunerName();

        if (tuner != nil)
        {
            if (text != "")
                text += " / ";

            text += context.translate(ROOT, "TunerName", tuner);
        }

        var drive_train = ROOT.getSelectedDriveTrainName();

        if (drive_train != nil)
        {
            if (text != "")
                text += " / ";

            text += context.translate(ROOT, "DriveTrainName", drive_train);
        }

        return text == "" ? ALL : text;
    }

    class Strategy
    {
        method isOnline()
        {
            return false
        }    
    }

    class PremiumStrategy : Strategy
    {
        method getCarList(country, tuner_label, drivetrain, order, by, additional_conditions)
        {
            return Garage2Util::Premium::getCarList(country, tuner_label, drivetrain, order, by, additional_conditions)
        }

        method getCountryList(context, additional_conditions)
        {
            var list = Garage2Util::Premium::getCountryList(additional_conditions);
            list.unshift(ROOT::ALL);

            return list;
        }

        method getTunerList(context, country, additional_conditions)
        {
            var list = Garage2Util::Premium::getTunerList(country, additional_conditions);
            Garage2Util::sortByLocalizedName(context, ROOT, list);
            list.unshift(ROOT::ALL);

            return list;
        }

        method getDriveTrainList(context, country, tuner_label, additional_conditions)
        {
            var list = Garage2Util::Premium::getDriveTrainList(country, tuner_label, additional_conditions);
            list.unshift(ROOT::ALL);

            return list;
        }

        method getLocalizeKey(name)
        {
            switch (name)
            {
                case "SearchSort":
                    return "SEARCH_SORT"
            }

            return name.upcase();
        }

        method getHeaderText(context, count)
        {
            return [getFilterText(context), count.toString(), false]
        }
    }

    class StandardStrategy : Strategy
    {

    method getCarList(country, tuner_label, drivetrain, order, by, additional_conditions)
    {
        return Garage2Util::Standard::getCarList(country, tuner_label, drivetrain, order, by, additional_conditions)
    }

    method getCountryList(context, additional_conditions)
    {
        var list = Garage2Util::Standard::getCountryList(additional_conditions);
        list.unshift(ROOT::ALL);

        return list
    }

    method getTunerList(context, country, additional_conditions)
    {
        var list = Garage2Util::Standard::getTunerList(country, additional_conditions);
        Garage2Util::sortByLocalizedName(context, ROOT, list);
        list.unshift(ROOT::ALL);

        return list
    }

    method getDriveTrainList(context, country, tuner_label, additional_conditions)
    {
        var list = Garage2Util::Standard::getDriveTrainList(country, tuner_label, additional_conditions);
        list.unshift(ROOT::ALL);

        return list
    }

    method getLocalizeKey(name)
    {
        switch (name)
        {
            case "SearchSort":
                return "SEARCH_SORT"
        }

        return name.upcase();
    }

    method getHeaderText(context, count)
    {
        return [getFilterText(context), count.toString(), false]
    }
    }

    class FavoriteStrategy : Strategy
    {
        method getCarList(country, tuner_label, drivetrain, order, by)
        {
            return Garage2Util::Favorite::getCarList(order, by)
        }

        method getLocalizeKey(name)
        {
            switch (name)
            {
                case "SearchSort":
                    return "SORT"
            }

            return name.upcase();
        }

        method getHeaderText(context, count)
        {
            return [
                context.translate(ROOT, "MyHome", "FAVORITE"),  "%d / %d".format(count, GAME_STATUS.user_profile.garage.getFavoriteMax()), false
            ];
        }
    }

    class OnlineStrategy : Strategy
    {
        method getCarList(country, tuner_label, drivetrain, order, by)
        {
            return Garage2Util::Online::getCarList(order, by);
        }

        method isOnline()
        {
            return true;
        }

        method getLocalizeKey(name)
        {
            switch (name)
            {
                case "SearchSort":
                    return nil;
            }

            return name.upcase();
        }

        method getHeaderText(context, count)
        {
            return [
                context.translate(ROOT, "MyHome", "ONLINE"), "%d / %d".format(count, GAME_STATUS.user_profile.garage.getOnlineMax()), false
            ];
        }
    }

    method open(context, present_to, regulation, no_demo)
    {
        self.no_demo = (no_demo != nil) ? no_demo : true;

        self.present_to = present_to;
        self.regulation = regulation;
        self.closed = false;

        self.current_riding_id = main::GAME_STATUS.user_profile.garage.riding_id;

        self.credits_orig = main::GAME_STATUS.user_profile.cash;

        self.popup = main::SequenceUtil::ModalPage(context, ROOT);

        self.popup.open();

        return true;
    }

    method close(context)
    {
        if (self.current_riding_id != main::GAME_STATUS.user_profile.garage.riding_id || 
            self.credits_orig != main::GAME_STATUS.user_profile.cash)
        {
            var res = SaveDataUtilGT5::saveEveryWhere(context);
        }

        if (self.closed)
            return;

        self.closed = true;
        ContextMain.event_mask = 0x05;
        ContextMain.disableInput();

        Popup::FadeActor.on_effect_end = function (context)
        {
            if (ROOT.popup != nil)
            {
                ROOT.popup.close();
                ROOT.popup = nil;
            }

            ContextMain.enableInput();
        }

        Popup::FadeActor.out = true;
    }

    method onInitialize(context)
    {
        self.order = PROJECT.history['GaragePopup::order'];
        self.by = PROJECT.history['GaragePopup::by'];
        initializeCommon(context);

        ALL = context.translate(ROOT, "MyHome", "ALL");

        ROOT.strategy = PremiumStrategy();
        Popup::Pane::Tab.setActive(true, false, false, false);

        if (self.regulation != nil)
            reflectRegulation(context);

        initializeSearchList(context);

        Popup::Pane::Tab::HBox::Online.visible = LoginUtil::isOnline();
        warpActors(Popup::Pane::Body::bg, self.open_on_init);

        context.pushEvent(main::menu::MFunctionEvent(initialize, context));

        return EVENTRESULT_FILTER;
    }

    // Creates SQL sorting conditions
    method reflectRegulation(context)
    {
        self.additional_conditions = Array();
        if (self.regulation.need_drivetrain > 0)
        {
            var drive_train_map = 
            [
                "FR" : gtengine::DriveTrainType::FR,
                "FF" : gtengine::DriveTrainType::FF,
                "4WD" : gtengine::DriveTrainType::_4WD,
                "MR" : gtengine::DriveTrainType::MR,
                "RR" : gtengine::DriveTrainType::RR
            ];


            var drive_train_list = Array();
            foreach (|var key, var drive_train| in drive_train_map)
            {
                var val = 1 << (drive_train + 1);
                if (self.regulation.need_drivetrain & val)
                    drive_train_list.push("'%s'".format(key));
            }

            self.additional_conditions.push("drive_train IN (%s)".format(drive_train_list.join(",")));
        }

        if (self.regulation.cars.size > 0)
        {
            var car_code_list = Array();

            for (var i = 0; i < self.regulation.cars.size; ++i)
            {
                var car_code = self.regulation.cars[i].code;
                car_code_list.push(car_code);
            }

            self.additional_conditions.push("car_code IN (%s)".format(car_code_list.join(",")));
        }

        if (self.regulation.limit_power > 0)
            self.additional_conditions.push("power <= %d".format(self.regulation.limit_power));

        if (self.regulation.need_year > 0)
            self.additional_conditions.push("%d <= year".format(self.regulation.need_year));

        if (self.regulation.limit_year > 0)
        {
            self.additional_conditions.push("0 < year".format(self.regulation.limit_year));
            self.additional_conditions.push("year <= %d".format(self.regulation.limit_year));
        }

        if (self.regulation.countries.size > 0)
        {
            var country_list = Array();

            for (var i = 0; i < self.regulation.countries.size; ++i)
            {
                var country_code = self.regulation.countries[i];
                var country = gtengine::MSpecDB::getCountryLabel(country_code);
                country_list.push("'%s'".format(country));
            }

            self.additional_conditions.push("country IN (%s)".format(country_list.join(",")));
        }

        if (self.regulation.need_weight > 0)
            self.additional_conditions.push("%d <= mass".format(self.regulation.need_weight));

        if (self.regulation.limit_weight > 0)
            self.additional_conditions.push("mass <= %d".format(self.regulation.limit_weight));

        if (self.regulation.need_aspiration > 0)
            self.additional_conditions.push("aspiration & %d".format(self.regulation.need_aspiration));

        if (self.regulation.limit_pp > 0)
            self.additional_conditions.push("pp <= %d".format(self.regulation.limit_pp));

        if (self.regulation.limit_length > 0)
        {
            self.additional_conditions.push("0 < length");
            self.additional_conditions.push("length <= %d".format(self.regulation.limit_length));
        }

        if (self.regulation.need_length > 0)
            self.additional_conditions.push("%d <= length".format(self.regulation.need_length));

        if (self.regulation.car_categories.size > 0)
        {
            var category_list = Array();

            for (var i = 0; i < self.regulation.car_categories.size; ++i)
            {
                var category = self.regulation.car_categories[i];
                category_list.push(category);
            }

            self.additional_conditions.push("car_category IN (%s)".format(category_list.join(",")));
        }

        if (self.regulation.ban_cars.size > 0)
        {
            var car_code_list = Array();

            for (var i = 0; i < self.regulation.ban_cars.size; ++i)
            {
                var car_thin = self.regulation.ban_cars[i];
                var car_code = gtengine::MSpecDB::getCarCode(car_thin.label);
                car_code_list.push(car_code);
            }

            self.additional_conditions.push("car_code NOT IN (%s)".format(car_code_list.join(",")));
        }

        foreach (var c in self.additional_conditions)
            ;
    }

    method initializeSearchList(context)
    {
        var w = Popup::Pane::Body::Filter::VBox::By::RadioBox.getSelectedButtonWidget();
        self.by = w.parent.name.upcase();

        self.ignore_update = true;

        initializeCountryList(context);
        initializeTunerList(context);
        initializeDriveTrainList(context);
        initializeOrderList(context);

        self.ignore_update = false;
    }

    method getOptionMenuItem(option_menu, index)
    {
        return option_menu["popup"]["vbox"].getChild(index);
    }

    method getSelectedCountryName()
    {
        if (self.country_index != 0)
        {
            var item = getOptionMenuItem(Popup::Pane::Body::Filter::VBox::Search::Country::OptionMenu, self.country_index);
            return item.name;
        }

        return nil;
    }

    method getSelectedTunerName()
    {
        if (self.tuner_index != 0)
        {
            var item = getOptionMenuItem(Popup::Pane::Body::Filter::VBox::Search::Tuner::OptionMenu, self.tuner_index);
            return item.name;
        }

        return nil
    }

    method getSelectedDriveTrainName()
    {
        if (self.drivetrain_index != 0)
        {
            var item = getOptionMenuItem(Popup::Pane::Body::Filter::VBox::Search::DriveTrain::OptionMenu, self.drivetrain_index);
            return item.name;
        }

        return nil;
    }

    method initializeCountryList(context)
    {
        var option_menu = Popup::Pane::Body::Filter::VBox::Search::Country::OptionMenu;
        OptionMenuUtil::finalize(context, option_menu);

        var country_list = self.strategy.getCountryList(context, self.additional_conditions);

        OptionMenuUtil::initialize(context, ROOT, option_menu, hidden::OptionMenuItem, country_list, "Country");
        self.country_index = 0;

        option_menu.setIndex(context, self.country_index);
    }

    method initializeTunerList(context)
    {
        var option_menu = Popup::Pane::Body::Filter::VBox::Search::Tuner::OptionMenu;
        OptionMenuUtil::finalize(context, option_menu);

        var country = getSelectedCountryName();
        var tuner_list = self.strategy.getTunerList(context, country, self.additional_conditions);

        OptionMenuUtil::initialize(context, ROOT, option_menu, hidden::OptionMenuItem, tuner_list, "TunerName");

        self.tuner_index = 0;
        option_menu.setIndex(context, self.tuner_index);
    }

    method initializeDriveTrainList(context)
    {
        var option_menu = Popup::Pane::Body::Filter::VBox::Search::DriveTrain::OptionMenu;
        OptionMenuUtil::finalize(context, option_menu);

        var country = getSelectedCountryName(context);
        var tuner_label = getSelectedTunerName(context);

        var drive_train_list = self.strategy.getDriveTrainList(context, country, tuner_label, self.additional_conditions);

        OptionMenuUtil::initialize(context, ROOT, option_menu, hidden::OptionMenuItem, drive_train_list, "DriveTrainName");

        self.drivetrain_index = 0;
        option_menu.setIndex(context, self.drivetrain_index);
    }

    method initializeOrderList(context)
    {
        var option_menu = Popup::Pane::Body::Filter::VBox::Order::OptionMenu;
        OptionMenuUtil::finalize(context, option_menu);

        var order_list = ["LABEL_OBTAIN", "LABEL_CAR_NAME", "LABEL_TUNER", "LABEL_COUNTRY", "PS", "MASS", 
            "LABEL_YEAR", "LABEL_DISTANCE", "LABEL_RIDE_COUNT", "LABEL_PERFORMANCE_POINT", "LABEL_RIDING_ORDER"];

        OptionMenuUtil::initialize(context, ROOT, option_menu, hidden::OptionMenuItem, order_list, "CarSpec");

        self.order_index = 0;

        for (var i = 0; i < option_menu.TABLE.size; ++i)
        {
            var o = option_menu.TABLE[i];

            if (self.order == o)
            {
                self.order_index = i;
                break;
            }
        }

        option_menu.setIndex(context, self.order_index);
    }

    method initializeCommon(context)
    {
        self.button_help = 
        [
            [ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "MyHome", "BUTTON_HELP_SHOW")],
            ["Triangle", context.translate(ROOT, "MyHome", "BUTTON_HELP_MENU")],
            ["Square", context.translate(ROOT, "MyHome", "BUTTON_HELP_CHANGE_VIEW")],
            ["L1", context.translate(ROOT, "MyHome", "BUTTON_HELP_MULTI_SELECT")]
        ];

        self.button_help_l1 = 
        [
            [ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "MyHome", "BUTTON_HELP_SELECT")],
            ["Triangle", context.translate(ROOT, "MyHome", "BUTTON_HELP_MENU")],
            ["Square", context.translate(ROOT, "MyHome", "BUTTON_HELP_SELECT_UNSELECT_ALL")]
        ];

        if (self.present_to != nil)
        {
            ButtonHelpGT5.set(context, 
            [
                [ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "MyHome", "BUTTON_HELP_ENTER")],
                ["Square", context.translate(ROOT, "MyHome", "BUTTON_HELP_CHANGE_VIEW")]
            ]);
        }

        else
        {
            ButtonHelpGT5.set(context, self.button_help);
        }

        ButtonHelpGT5.hide();

        var radiobox_list = [Popup::Pane::Body::Filter::VBox::By::RadioBox];
        foreach (var radiobox in radiobox_list)
        {
            var radiobutton_list = [];
            for (var it = radiobox.VBox.first; it != nil; it = it.next)
                radiobutton_list.push([it.RadioButton, 0]);

            var default_index = (self.by == "ASC") ? 0 : 1;
            radiobox.setup(radiobutton_list, default_index);
        }

        Popup::Pane::Title::HBox::SearchSort.active = self.open_on_init;
        warpActors(Popup::Pane::Body::Filter, self.open_on_init);

        Popup::Pane::Body::Filter.insensitive = !self.open_on_init;
        ROOT.setFocus(Popup::Pane::Title::HBox::RidingCar);
    }

    method initialize(context)
    {
        Popup::Pane::Body::List.finalizeFinder(context);
        Popup::Pane::Body::List.initializeFinder(context);
    }

    method onFinalize(context)
    {
        PROJECT.history['GaragePopup::order'] = self.order;
        PROJECT.history['GaragePopup::by'] = self.by;

        self.button_help = nil;
        self.button_help_l1 = nil;

        Popup::Pane::Body::List.finalizeFinder(context);

        OptionMenuUtil::finalize(context, Popup::Pane::Body::Filter::VBox::Search::Country::OptionMenu);
        OptionMenuUtil::finalize(context, Popup::Pane::Body::Filter::VBox::Search::Tuner::OptionMenu);
        OptionMenuUtil::finalize(context, Popup::Pane::Body::Filter::VBox::Search::DriveTrain::OptionMenu);

        OptionMenuUtil::finalize(context, Popup::Pane::Body::Filter::VBox::Order::OptionMenu);

        self.additional_conditions = nil;

    }

    method onCancel(context)
    {
        main::sound.play("cancel");

        var result = ButtonHelpGT5.hideIf();

        if (result)
        {
            Popup::Pane::Body::List.multi_select = false;
            Popup::Pane::Body::List::updateStatusAll(context);
        }

        ROOT.setFocus(Popup::Pane::Title::HBox::Close);

        return EVENTRESULT_FILTER
    }

    module Popup::Pane
    {
        module Tab
        {
            method setActive(_premium, _standard, _favorite, _online)
            {
                var list = [
                    ["Premium", _premium], 
                    ["Standard", _standard], 
                    ["Favorite", _favorite], 
                    ["Online", _online]
                ];

                foreach (|var name, var flag| in list)
                {
                    HBox[name].active = flag;
                    HBox[name].bg.visible = !flag;
                    HBox[name].bgA.visible = flag;
                }

                var search_sort = ROOT.strategy.getLocalizeKey("SearchSort");
                if (search_sort != nil)
                {
                    Popup::Pane::Title::HBox::SearchSort.visible = true;
                    var mode_search_sort = search_sort == "SEARCH_SORT";
                    startActors(Popup::Pane::Body::Filter::VBox::Search, mode_search_sort);

                    Popup::Pane::Body::Filter::VBox::Search.insensitive = !mode_search_sort;
                }
                else
                {
                    Popup::Pane::Title::HBox::SearchSort.visible = false;
                    startActors(Popup::Pane::Body::Filter, true);

                    startActors(Popup::Pane::Body::bg, true);

                    Popup::Pane::Body::Filter.insensitive = true;
                    Popup::Pane::Title::HBox::SearchSort.flag = false;
                    Popup::Pane::Title::HBox::SearchSort.active = false;
                }
            }

            module HBox
            {
                module Premium
                {
                    method onActivate(context)
                    {
                        if (!self.active)
                        {
                            main::sound.play("tab_switch");
                            ROOT.strategy = PremiumStrategy();

                            setActive(true, false, false, false);

                            ROOT.initializeSearchList(context);
                            ROOT.initialize(context);
                        }

                        return EVENTRESULT_FILTER;
                    }
                }

                module Standard
                {
                    method onActivate(context)
                    {
                        if (!self.active)
                        {
                            main::sound.play("tab_switch");
                            ROOT.strategy = StandardStrategy();

                            setActive(false, true, false, false);

                            ROOT.initializeSearchList(context);
                            ROOT.initialize(context);
                        }

                        return EVENTRESULT_FILTER;
                    }    
                }

                module Favorite
                {
                    method onActivate(context)
                    {
                        if (!self.active)
                        {
                            main::sound.play("tab_switch");
                            ROOT.strategy = FavoriteStrategy();

                            setActive(false, false, true, false);

                            ROOT.initialize(context);
                        }

                        return EVENTRESULT_FILTER;
                    }    
                }

                module Online
                {
                    method onActivate(context)
                    {
                        if (!self.active)
                        {
                            main::sound.play("tab_switch");
                            ROOT.strategy = OnlineStrategy();

                            setActive(false, false, false, true);

                            ROOT.initialize(context);
                        }

                        return EVENTRESULT_FILTER;
                    }    
                }
            } 
        } 

        module Title::HBox
        {
            method onFocusEnter(context, event)
            {
                var w = event.widget;
                var localized_text = context.translate(ROOT, "MyHome", ROOT.strategy.getLocalizeKey(w.name));
                BalloonTip.set_value(context, w, localized_text, 0);

                return EVENTRESULT_FILTER;
            }

            method onFocusLeave(context)
            {
                BalloonTip.reset_value();
                return EVENTRESULT_FILTER;
            }

            module Close
            {
                method onActivate(context)
                {
                    main::sound.play("ok");
                    ROOT.close(context);

                    return EVENTRESULT_FILTER;
                }

                method onCancel(context)
                {
                    main::sound.play("cancel");
                    ROOT.close(context);

                    return EVENTRESULT_FILTER;
                }
            }

            module SearchSort
            {
                attribute flag = true;

                method onActivate(context)
                {
                    main::sound.play("ok");
                    startActors(Popup::Pane::Body::Filter, self.flag);

                    startActors(Popup::Pane::Body::bg, self.flag);
                    Popup::Pane::Body::Filter.insensitive = self.flag;

                    self.flag = !self.flag;
                    self.active = self.flag;

                    return EVENTRESULT_FILTER;
                }
            }

            module RidingCar
            {
                method onActivate(context)
                {
                    var garage_id = GAME_STATUS.user_profile.garage.riding_id;

                    if (garage_id < 0)
                        main::sound.play("disable")
                    else
                    {
                        main::sound.play("ok");

                        var cpp = Function::getCurrentCpp(garage_id);

                        if (cpp != nil && cpp.buf != nil)
                        {
                            |var online_mode, var favorite| = Garage2Util::getStatus(garage_id);
                            CarDetailPopup.open(context, cpp, garage_id, online_mode, ROOT.no_demo);
                        }
                    }

                    return EVENTRESULT_FILTER;
                }    
            }
        }

        module Body
        {

            module Filter::VBox
            {
                module Search
                {
                    module Country::OptionMenu
                    {
                        method onValueChanged(context)
                        {
                            self.pulldownValueChanged(context);

                            if (self.index != ROOT.country_index)
                            {
                                ROOT.country_index = self.index;

                                if (!ROOT.ignore_update)
                                {
                                    ROOT.ignore_update = true;
                                    ROOT.initializeTunerList(context);
                                    ROOT.initializeDriveTrainList(context);
                                    ROOT.ignore_update = false;
                                    ROOT.initialize(context);
                                }
                            }

                            return EVENTRESULT_FILTER;
                        }    
                    }

                    module Tuner::OptionMenu
                    {
                        method onValueChanged(context)
                        {
                            self.pulldownValueChanged(context);

                            if (self.index != ROOT.tuner_index)
                            {
                                ROOT.tuner_index = self.index;

                                if (!ROOT.ignore_update)
                                {
                                    ROOT.ignore_update = true;
                                    ROOT.initializeDriveTrainList(context);

                                    ROOT.ignore_update = false;
                                    ROOT.initialize(context);
                                }
                            }

                            return EVENTRESULT_FILTER;
                        }    
                    }

                    module DriveTrain::OptionMenu
                    {
                        method onValueChanged(context)
                        {
                            self.pulldownValueChanged(context);

                            if (self.index != ROOT.drivetrain_index)
                            {
                                ROOT.drivetrain_index = self.index;

                                if (!ROOT.ignore_update)
                                    ROOT.initialize(context);
                            }

                            return EVENTRESULT_FILTER;
                        }    
                    }

                    method onValueChanged(context)
                    {
                        self.pulldownValueChanged(context);

                        if (self.index != ROOT.drivetrain_index)
                        {
                            ROOT.drivetrain_index = self.index;

                            if (!ROOT.ignore_update)
                            {
                                ROOT.initialize(context);
                            }
                        }

                        return EVENTRESULT_FILTER
                    }
                }

                module Order::OptionMenu
                {
                    static TABLE = ["garage_id", "name_EN", "tuner_label", "country", "power",
                                    "mass", "year", "odometer", "ride_count", "pp", "riding_order"];

                    method onValueChanged(context)
                    {
                        self.pulldownValueChanged(context);

                        if (self.index != ROOT.order_index)
                        {
                            ROOT.order_index = self.index;
                            ROOT.order = TABLE[self.index];
                            ROOT.initialize(context);
                        }

                        return EVENTRESULT_FILTER;
                    }
                }

                module By::RadioBox
                {
                    method onActivate(context, event)
                    {
                        var by = event.widget.parent.name.upcase();

                        if (by != ROOT.by)
                        {
                            ROOT.by = by;
                            ROOT.initialize(context);
                        }

                        return EVENTRESULT_FILTER;
                    }    
                }
            }

            module List
            {
                attribute finder;
                attribute view_mode = 1;
                attribute multi_select = false;
                attribute select_map;
                attribute select_all;

                function setNoCar(context, item_w)
                {
                    item_w.invalid = true;
                    item_w.ImageFaceD.visible = true;

                    foreach (var label in ["online", "favorite", "riding", "keyword1", "car",
                                           "manufacturer_logo", "manufacturer_name", "ps", "type", "ColorTip", "check"])
                    {
                        if (item_w[label] != nil)
                            item_w[label].visible = false;
                    }

                    if (item_w["car_name"] != nil)
                        item_w.car_name.text = context.translate(ROOT, "MyHome", "NO_CAR");

                    item_w.caution.visible = false;
                }

                function setRidingOff(context)
                {
                    for (var i = 0; i < List.finder.getItemCount(); ++i)
                    {
                        var item_w = List.finder.getItemWidget(i);

                        if (item_w != nil && (item_w.riding.visible || item_w.riding_rentacar.visible))
                        {
                            item_w.riding.visible = false;
                            item_w.riding_rentacar.visible = false;

                            var candidate_data = List.finder.getItemData(context, i);
                            var garage_id = candidate_data.label_;

                            var status = Garage2Util::getStatus(garage_id);

                            if (status == nil)
                                setNoCar(context, item_w);
                        }
                    }

                }

                function getKeyword(context, cpp)
                {
                    var keyword = "";
                    switch (ROOT.order)
                    {
                        case "garage_id":
                            break;

                        case "country":
                            keyword = context.translate(ROOT, "Country", cpp.country);
                            break;

                        case "power":
                            if (List.view_mode == 2 || List.view_mode == 0)
                                keyword = cpp.getPowerString();
                            else
                            {
                                if (List.view_mode == 3)
                                {
                                    if (cpp.power == 0 && cpp.power_rpm == "---")
                                        keyword = "---";
                                    else
                                        keyword = cpp.getPsRpmString();
                                }
                            }
                            break;

                        case "year":
                            if (List.view_mode == 2 || List.view_mode == 3)
                            {
                                if (cpp.year == 0)
                                     keyword = "---";
                                else
                                    keyword = cpp.year;
                            }

                            break;

                        case "name_EN":
                        case "tuner_label":
                            break;

                        
                        case "mass":
                            if (List.view_mode != 1)
                            {
                                if (cpp.mass == 0)
                                    keyword = "---";
                                else
                                    keyword = "%d %s".format(cpp.mass, pdiext::MUnit::GetUnitOfMass());
                            }
                            break;

                        case "ride_count":
                            keyword = cpp.ride_count;
                            break;

                        case "odometer":
                            keyword = getDistanceText(context, cpp.odometer * 0.001);
                            break;

                        case "pp":
                            if (List.view_mode != 1)
                                keyword = cpp.pp;
                            break;

                        default:
                            break;    
                    }

                    return keyword;
                }

                function updateStatus(context, cpp, garage_id, item_w)
                {
                    var status = Garage2Util::getStatus(garage_id);

                    if (status == nil)
                        setNoCar(context, item_w);
                    else
                    {
                        item_w.setInfo(context, cpp);
                        |var online, var favorite| = status;
                        cpp.favorite = favorite;

                        var garage = GAME_STATUS.user_profile.garage;
                        if (garage.riding_id == garage_id)
                        {
                            if (!item_w.riding.visible)
                                setRidingOff(context);

                            if (GAME_STATUS.user_profile.garage.isRidingFriendCar())
                                item_w.riding_rentacar.visible = true;
                            else
                                item_w.riding.visible = true;
                        }

                        else
                        {
                            item_w.riding.visible = false;
                            item_w.riding_rentacar.visible = false;
                        }

                        item_w.online.visible = online == 1;

                        item_w.favorite.visible = online != 1 && favorite == 1;
                        item_w.check.visible = List.multi_select && List.select_map[garage_id] != nil;

                        item_w.caution.visible = cpp.invalid != 0;

                        var keyword = getKeyword(context, cpp);
                        if (keyword != "")
                        {
                            item_w.keyword1.visible = true;
                            item_w.keyword1.TextFace.text = keyword;
                        }
                    }

                }

                function onInitItem(context, candidate_data, item_w, arg)
                {
                    |var cpp, var row| = candidate_data.value_;

                    var garage_id = candidate_data.label_;
                    item_w.invalid = false;

                    if (cpp == nil)
                    {
                        cpp = GAME_STATUS.user_profile.garage.convertRow2Cpp(row);
                        candidate_data.value_ = [cpp, nil];
                    }

                    updateStatus(context, cpp, garage_id, item_w);
                }

                function updateStatusAll2(context)
                {
                    if (List.multi_select)
                    {
                        List.multi_select = false;
                        ButtonHelpGT5.set(context, ROOT.button_help);
                    }

                    updateStatusAll(context);
                }

                function updateStatusAll2If(context)
                {
                    var state = context.getUpdateContext().getPadButtonState(0);

                    if ((state & 0x100) != 0x100)
                        updateStatusAll2(context);
                }

                function updateStatusAll(context)
                {
                    var count = List.finder.getItemCount(context);

                    for (var i = 0; i < count; ++i)
                    {
                        var item_w = List.finder.getItemWidget(i);

                        if (item_w == nil)
                            continue;
                        
                        var candidate_data = List.finder.getItemData(context, i);
                        if (candidate_data == nil)
                            continue;

                        var cpp = candidate_data.value_[0];
                        var garage_id = candidate_data.label_;
                        updateStatus(context, cpp, garage_id, item_w);
                    }
                }

                function onActivateItem(context, folder_data, func_close, arg)
                {
                    if (ROOT.closed)
                        return;

                    var candidate_data = folder_data.getItemData();
                    var cpp = candidate_data.value_[0];
                    var garage_id = candidate_data.label_;

                    var focus_index = List.finder.getFocusIndex(context);
                    var item_w = List.finder.getItemWidget(focus_index);

                    if (item_w == nil || item_w.invalid)
                        return;

                    if (ROOT.present_to != nil)
                    {
                        if (Function::checkPresent(context, cpp, garage_id, true))
                            Function::present(context, cpp, garage_id, ROOT.present_to, List::updateStatus, item_w);
                    }
                    else
                    {
                        if (List.multi_select)
                        {
                            if (List.select_map[garage_id] == nil)
                                List.select_map[garage_id] = cpp;
                            else
                                List.select_map[garage_id] = nil;

                            List::updateStatus(context, cpp, garage_id, item_w);
                        }
                        else
                        {
                            var status = Garage2Util::getStatus(garage_id);
                            if (status != nil)
                            {
                                |var online, var favorite| = status;
                                var online_mode = online || ROOT.strategy.isOnline();
                                Function::showDetail(context, cpp, garage_id, [online_mode, ROOT.no_demo], List::updateStatus, item_w);
                            }
                        }
                    }
                }

                function updateStatusAllIf(context)
                {
                    var state = context.getUpdateContext().getPadButtonState(0);

                    if ((state & 0x100) != 0x100)
                    {
                        ButtonHelpGT5.set(context, ROOT.button_help);
                        return;
                    }

                    ButtonHelpGT5.set(context, ROOT.button_help_l1);
                    List.multi_select = true;

                    var selected = false;
                    foreach (|var key, var value| in List.select_map)
                    {
                        if (value != nil)
                        {
                            selected = true;
                            break;
                        }
                    }

                    if (!selected)
                        return;

                    updateStatusAll(context);
                }

                function onFocusEnter(context, candidate_data, item_w, arg)
                {
                    var result = ButtonHelpGT5.appearIf();

                    if (result)
                    {
                        if (ROOT.present_to == nil)
                            updateStatusAllIf(context);
                    }

                    if (List.view_mode == 2 || List.view_mode == 3)
                    {
                        var cpp = candidate_data.value_[0];
                        var car_name = (item_w.invalid) ? context.translate(ROOT, "MyHome", "NO_CAR") : gtengine::MSpecDB::getCarShortName(cpp.car_code);
                        BalloonTip.set_value(context, item_w.car, car_name, 16);
                    }
                }

                function onFocusLeave(context, candidate_data, item_w, arg)
                {
                    BalloonTip.reset_value();
                }

                method makeInitialDataCarList(context)
                {
                    var Finder = UIKitProject::FinderRoot;
                    var candidates = Finder.makeCandidates(Array(0));
                    var initial_data = Finder.InitialData(candidates);

                    initial_data.view_type_ = Finder.ViewType::SCROLL_V;

                    if (self.view_mode == 1)
                    {
                        initial_data.extended_item_ = hidden::CarList;
                    }
                    else if (self.view_mode == 2)
                    {
                        initial_data.extended_item_ = hidden::CarThumb;
                        initial_data.h_item_count_ = 4;
                    }
                    else if (self.view_mode == 3)
                    {
                        initial_data.extended_item_ = hidden::CarThumbLarge;
                        initial_data.h_item_count_ = 2;
                    }
                    else if (self.view_mode == 0)
                    {
                        initial_data.extended_item_ = hidden::CarDetail;
                    }

                    initial_data.cb_init_item_ = onInitItem;
                    initial_data.cb_on_activate_ = onActivateItem;
                    initial_data.v_scrollbar_ = Scrollbar::VScrollbar;

                    initial_data.cb_focus_enter_ = onFocusEnter;
                    initial_data.cb_focus_leave_ = onFocusLeave;
                    initial_data.import_iconbox_parameter_ = hidden::IconBox;
                    initial_data.item_cache_ = false;

                    return initial_data;
                }

                method initializeFinder(context)
                {
                    self.multi_select = false;
                    self.select_map = Map();
                    self.select_all = false;

                    var initial_data = makeInitialDataCarList(context);
                    self.finder = UIKitProject::FinderRoot.setCopy(context, self, initial_data, false);
                    var Finder = UIKitProject::FinderRoot;

                    var car_data_list = ROOT.strategy.getCarList(ROOT.getSelectedCountryName(), 
                    ROOT.getSelectedTunerName(), ROOT.getSelectedDriveTrainName(), ROOT.order,
                    ROOT.by, ROOT.additional_conditions);

                    Popup::Pane::Header.setText(context, ROOT.strategy.getHeaderText(context, car_data_list.size));

                    Popup::Pane::Body::List::ImageFaceD.visible = car_data_list.size == 0;
                    Popup::Pane::Body::List::TextFaceD.visible = car_data_list.size == 0;

                    var candidates = Array();

                    var riding_id = GAME_STATUS.user_profile.garage.riding_id;

                    foreach (var car_data in car_data_list)
                    {
                        var candidate_data = Finder.CandidateData();
                        var garage_id = car_data[0];
                        var cpp = car_data[1];
                        var row = car_data[3];

                        candidate_data.label_ = garage_id;
                        candidate_data.value_ = [cpp, row];

                        candidates.push(candidate_data);
                    }

                    self.finder.replaceCurrentFolderCandidates(context, candidates, 0);
                }

                method finalizeFinder(context)
                {
                    if (self.finder != nil)
                    {
                        self.removeChild(context, self.finder);
                        self.finder = nil;
                    }

                    BalloonTip.reset_value();
                }

                method changeViewMode(context, _view_mode)
                {
                    if (self.view_mode == _view_mode)
                        return;

                    ROOT.setFocus(nil);
                    finalizeFinder(context);

                    self.view_mode = _view_mode;
                    initializeFinder(context);
                    self.finder.onFocus(context);
                }

                function onFunctionCallback(context, data)
                {
                    |var func_name, var cpp, var garage_id, var args, var callback, var item_w| = data;

                    Function[func_name](context, cpp, garage_id, args, callback, item_w, ROOT);
                }

                function onNullCallback(context, data)
                {

                }

                function onCaptureIconAllCallback(context)
                {
                    if (!QUERY(context, ROOT, "QUERY_CAR_THUMBNAIL_CAPTURE_ALL"))
                        return;

                    var candidates = List.finder.getCurrentFolderData().candidates_;
                    var data_list = Array();

                    foreach (var candidate in candidates)
                    {
                        var garage_id = candidate.label_;
                        var cpp = candidate.value_[0];
                        if (cpp == nil)
                        {
                            var row = candidate.value_[1];
                            var cpp = GAME_STATUS.user_profile.garage.convertRow2Cpp(row);

                            candidate.value_ = [cpp, nil];
                        }

                        data_list.push([garage_id, cpp]);
                    }

                    var large = List.view_mode == 3;
                    Function::captureIconAll(context, data_list, large);
                }

                function onPresentCallback(context, data)
                {
                    |var cpp, var garage_id, var item_w, var gt_friend_list| = data;
                    if (!Function::checkPresent(context, cpp, garage_id, true))
                        return;

                    var friend = UserProfileProject::FriendListPopup.open(context, gt_friend_list);
                    if (friend != nil)
                        Function::present(context, cpp, garage_id, friend, List::updateStatus, item_w, ROOT);
                }

                method showContextMenu(context)
                {
                    var focus_index = self.finder.getFocusIndex(context);
                    var item_w = self.finder.getItemWidget(focus_index);
                    if (item_w == nil || item_w.invalid)
                        return;

                    var candidate_data = self.finder.getItemData(context, focus_index);
                    var garage_id = candidate_data.label_;
                    var cpp = candidate_data.value_[0];

                    var status = Garage2Util::getStatus(garage_id);
                    if (status == nil)
                        return;

                    |var online, var favorite| = status;

                    var online_mode = online || ROOT.strategy.isOnline();
                    var on = context.translate(ROOT, "MyHome", "ON");
                    var off = context.translate(ROOT, "MyHome", "OFF");

                    var favorite_cascade = [
                        UIKitProject::ContextMenuPopup::Data(on, true, favorite ? onNullCallback : onFunctionCallback, ["setFavorite", cpp, garage_id, true, List::updateStatus, item_w]),
                        UIKitProject::ContextMenuPopup::Data(off, true, favorite ? onFunctionCallback : onNullCallback, ["setFavorite", cpp, garage_id, false, List::updateStatus, item_w])
                    ];
                    favorite_cascade[0].on = favorite == 1;
                    favorite_cascade[1].on = favorite == 0;

                    var online_cascade = [
                        UIKitProject::ContextMenuPopup::Data(on, true, online ? onNullCallback : onFunctionCallback, ["setOnline", cpp, garage_id, true, List::updateStatus, item_w]), 
                        UIKitProject::ContextMenuPopup::Data(off, true, online ? onFunctionCallback : onNullCallback, ["setOnline", cpp, garage_id, false, List::updateStatus, item_w])
                    ];
                    online_cascade[0].on = online == 1;
                    online_cascade[1].on = online == 0;

                    var gt_friend_list = getFriendList(context);

                    var type_str = (view_mode == 3) ? "L" : "M";

                    var path = GarageUtil::getThumbnailPath(garage_id, type_str);

                    var can_present = !online_mode && LoginUtil::isOnline() && gt_friend_list.size > 0;
                    var can_publish = LoginUtil::isOnline() && !GAME_STATUS.user_profile.garage.isRidingCar(garage_id);
                    var data_list = [];

                    if (GAME_STATUS.user_profile.garage.isFriendCar(garage_id))
                    {
                        var data_list = [
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "BUTTON_HELP_SHOW"), true, onFunctionCallback, ["showDetail", cpp, garage_id, [online_mode, ROOT.no_demo], List::updateStatus, item_w]), 
                            nil, // Separator
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "TUNING"), !online_mode, onFunctionCallback, ["tuning", cpp, garage_id, nil, List::updateStatus, item_w]), 
                            nil, // Separator
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "CAPTURE"), true, onFunctionCallback, ["captureIcon", cpp, garage_id, nil, nil, item_w]), 
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "CAPTURE_ALL"), true, onCaptureIconAllCallback, nil),
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "DEMO"), !ROOT.no_demo, onFunctionCallback, ["playDemo", cpp, garage_id, nil, nil, nil, ROOT]), 
                            nil, // Separator
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "FAVORITE"), true, nil, nil, favorite_cascade), 
                            nil, // Separator
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "CANCEL"), true, onNullCallback, nil)];
                    }

                    else
                    {
                        var data_list = [
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "BUTTON_HELP_SHOW"), true, onFunctionCallback, ["showDetail", cpp, garage_id, [online_mode, ROOT.no_demo], List::updateStatus, item_w]), 
                            nil, // Separator
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "RIDECAR"), !online_mode, onFunctionCallback, ["rideCar", cpp, garage_id, nil, List::updateStatus, item_w]),
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "TUNING"), !online_mode, onFunctionCallback, ["tuning", cpp, garage_id, nil, List::updateStatus, item_w]), 
                            nil, // Separator
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "CAPTURE"), true, onFunctionCallback, ["captureIcon", cpp, garage_id, nil, nil, item_w]), 
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "CAPTURE_ALL"), true, onCaptureIconAllCallback, nil),
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "DEMO"), !ROOT.no_demo, onFunctionCallback, ["playDemo", cpp, garage_id, nil, nil, nil, ROOT]),
                            nil, // Separator
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "FAVORITE"), true, nil, nil, favorite_cascade),
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "PUBLISH_TO_FRIEND"), can_publish, nil, nil, online_cascade), nil,
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "PRESENT"), can_present, onPresentCallback, [cpp, garage_id, item_w, gt_friend_list]),
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "SELL"), !online_mode, onFunctionCallback, ["sell", cpp, garage_id, nil, List::updateStatus, item_w])
                        ];
                        if (cpp.invalid)
                            data_list.push(UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "DELETE"), !online_mode, onFunctionCallback, ["delete", cpp, garage_id, nil, List::updateStatus, item_w]));

                        data_list += [
                            nil, // Separator
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "CANCEL"), true, onNullCallback, nil)
                        ];
                    }

                    var title = nil;
                    var x = item_w.sx + (item_w.w * item_w.cursor_align_x);
                    var y = item_w.sy + (item_w.h * item_w.cursor_align_y);

                    UIKitProject::ContextMenuPopup.open(context, x, y, title, data_list);
                }

                method showContextMenuMultiSelect(context)
                {
                    var focus_index = self.finder.getFocusIndex(context);
                    var item_w = self.finder.getItemWidget(focus_index);

                    if (item_w == nil || item_w.invalid)
                        return;

                    if (self.select_map == nil || self.select_map.size == 0)
                        return;

                    var cpp_list = Array();
                    foreach (|var key, var cpp| in self.select_map)
                    {
                        if (cpp == nil)
                            continue;
                        
                        cpp_list.push(cpp);
                    }

                    var on = context.translate(ROOT, "MyHome", "ON");
                    var off = context.translate(ROOT, "MyHome", "OFF");

                    var favorite_cascade = [
                        UIKitProject::ContextMenuPopup::Data(on, true, onFunctionCallback, ["setFavoriteByList", cpp_list, -1, true, List::updateStatusAll2]),
                        UIKitProject::ContextMenuPopup::Data(off, true, onFunctionCallback, ["setFavoriteByList", cpp_list, -1, false, List::updateStatusAll2])
                    ];

                    var data_list = [
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "FAVORITE_SELECTED"), true, nil, nil, favorite_cascade), 
                        nil, // Separator
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "CANCEL"), true, List::updateStatusAll2If, nil)
                    ];

                    var title = nil;
                    var x = item_w.sx + (item_w.w * item_w.cursor_align_x);
                    var y = item_w.sy + (item_w.h * item_w.cursor_align_y);

                    var result = UIKitProject::ContextMenuPopup.open(context, x, y, title, data_list);

                    if (!result)
                        List::updateStatusAll2If(context);
                }

                method toggleSelect(context)
                {
                    if (self.select_all)
                        self.select_map = Map();
                    else
                    {
                        var count = self.finder.getItemCount(context);

                        for (var i = 0; i < count; ++i)
                        {
                            var candidate_data = self.finder.getItemData(context, i);

                            if (candidate_data == nil)
                                continue;
                            
                            |var cpp, var row| = candidate_data.value_;
                            if (cpp == nil)
                            {
                                var cpp = GAME_STATUS.user_profile.garage.convertRow2Cpp(row);
                                candidate_data.value_ = [cpp, nil];
                            }

                            var garage_id = candidate_data.label_;
                            self.select_map[garage_id] = cpp;
                        }
                    }

                    self.select_all = !self.select_all;
                    updateStatusAll(context);
                }

                method onKeyPress(context, event)
                {
                    if (ROOT.closed)
                        return EVENTRESULT_CONTINUE;
                    else if (event.keysym == CELL_PAD_CTRL_L1)
                    {
                        if (ROOT.present_to == nil)
                        {
                            self.multi_select = true;
                            ButtonHelpGT5.set(context, ROOT.button_help_l1);
                            updateStatusAll(context);
                        }
                    }
                    else if (event.keysym == CELL_PAD_CTRL_L3_LEFT)
                    {
                        BalloonTip.reset_value();
                        ButtonHelpGT5.hide();
                        self.multi_select = false;
                        updateStatusAll(context);
                        
                        return EVENTRESULT_CONTINUE;
                    }
                    else if (event.keysym == CELL_PAD_CTRL_TRIANGLE)
                    {
                        if (ROOT.present_to == nil)
                        {
                            main::sound.play("context_menu_op");

                            if (self.multi_select)
                                showContextMenuMultiSelect(context);
                            else
                                showContextMenu(context);

                            return EVENTRESULT_FILTER;
                        }
                    }
                    else if (event.keysym == CELL_PAD_CTRL_SQUARE)
                    {
                        if (self.multi_select)
                            toggleSelect(context);
                        else
                        {
                            if (self.view_mode == 0)
                                changeViewMode(context, 1);
                            else if (self.view_mode == 1)
                                changeViewMode(context, 2);
                            else if (self.view_mode == 2)
                                changeViewMode(context, 3);
                            else if (self.view_mode == 3)
                                changeViewMode(context, 0);
                        }

                        return EVENTRESULT_FILTER;
                    }

                    return EVENTRESULT_CONTINUE;
                }

                method onKeyRelease(context, event)
                {
                    if (event.keysym == CELL_PAD_CTRL_L1)
                    {
                        if (ROOT.present_to == nil)
                            updateStatusAll2(context);
                    }

                    return EVENTRESULT_CONTINUE;
                }
            } 
        } 
    } 
}