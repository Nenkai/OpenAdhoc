//---------------------------------------------------------------------------------------
// TuningRoot.ad
//
// Root for selecting a parts category, or buying a "full model" car (tuning car dealers)
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module PROJECT::ROOT
{
    Pane::Muffler.defineStatic("group", "muffler");
    Pane::Brake.defineStatic("group", "brake");
    Pane::Engine.defineStatic("group", "engine");
    Pane::DriveTrain.defineStatic("group", "drivetrain");
    Pane::Turbo.defineStatic("group", "turbo");
    Pane::Suspension.defineStatic("group", "suspension");
    Pane::Tire.defineStatic("group", "tire");
    Pane::Others.defineStatic("group", "others");
    
#ifdef GT4O_US_BETA
    static current_car;
    static subtuner;
#else
    static current_car = nil;
    static subtuner = nil;
#endif

    function onInitialize(context)
    {
        enterPage(context, ROOT, "TuningShopTitle");
        var dealer = main::game.menuRef();
        subtuner = DealerData::getSubTuner(dealer);
        current_car = nil;

        if (main::game.garage.hasRidingCar())
        {
            current_car = main::game.garage.riding_car;
            current_car.loadPartsInfo();
        }

        tuner_bg.image_path = "/piece/tuneshop_left/" + subtuner + ".img";
        tuner_bg.doInitialize(context);

        Logo::bg.image_path = "/piece/tuneshop_logo/" + subtuner + ".img";
        Logo::bg.doInitialize(context);

        Pane::onInitialize(context);

        focus_last(ROOT, Pane);
        if (ROOT.getFocusedWidget() != nil && 
            ROOT.getFocusedWidget().name == "CompleteCar" &&
            !Pane::CompleteCar.visible)
        {
            ROOT.setFocus(Pane::Muffler);
        }
    }

    function onFinalize(context)
    {
        leavePage(context, ROOT);
        subtuner = nil;
        current_car = nil;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");

        TuningApplyRoot::parts_types = nil;
        var nation = main::game.menuRef(1);
        if (nation == "tuners")
        {
            var dealer = main::game.menuPop();
            set_last_focus(dealer);
            start_page(context, NationRoot);
        }
        else
        {
            set_last_focus("Tuner");
            start_page(context, DealerRoot);
        }

        return EVENTRESULT_FILTER;
    }

    function onActivate(context, event)
    {
        var widget = event.widget;
        var parts_types = widget["parts_types"];
        var dealer = main::game.menuRef();

        if (Pane::enable_parts(current_car, parts_types))
        {
            main::sound.play("ok");
            parts_types = widget["parts_types"];
            TuningApplyRoot::parts_types = parts_types;
            TuningApplyRoot::current_group = widget["group"];
            set_last_focus(event.widget.name);
            start_page(context, TuningApplyRoot);
        }
        else if (current_car != nil && !current_car.canTune(dealer, DealerData::getSubTuner(dealer)))
        {
            main::sound.play("disable");
            var message = nil;

            if (main::menu::MCarData::GetTuner(current_car.car_code) == "polyphony")
            {
                message = context.translate(ROOT, "this car has no tuningshop").format(current_car.name) + "\n";
            }
            else
            {
                message = context.translate(ROOT, "this car cannot not be handled").format(current_car.name) + "\n";
                var list = current_car.getTunerList();

                for (var i = 0; i < list.size; i++)
                {
                    var dealer = list[i];
                    message += context.translate(ROOT, "TunerNameSub", dealer);

                    if (i < list.size - 1)
                        message += "\n";
                }
            }

            openConfirmDialog(context, DIALOG_ERROR, message);
        }
        else
            main::sound.play("disable");

        return EVENTRESULT_FILTER;
    }
}

#define PARTS_TYPE_BRAKE 1
#define PARTS_TYPE_BRAKECONTROLLER 2
#define PARTS_TYPE_SUSPENSION 3
#define PARTS_TYPE_ASCC 4
#define PARTS_TYPE_TCSC 5
#define PARTS_TYPE_CHASSIS 6
#define PARTS_TYPE_RACINGMODIFY 7
#define PARTS_TYPE_LIGHTWEIGHT 8
#define PARTS_TYPE_STEER 9
#define PARTS_TYPE_DRIVETRAIN 10
#define PARTS_TYPE_GEAR 11
#define PARTS_TYPE_ENGINE 12
#define PARTS_TYPE_NATUNE 13
#define PARTS_TYPE_TURBINEKIT 14
#define PARTS_TYPE_PORTPOLISH 15
#define PARTS_TYPE_ENGINEBALANCE 16
#define PARTS_TYPE_DISPLACEMENT 17
#define PARTS_TYPE_COMPUTER 18
#define PARTS_TYPE_INTERCOOLER 19
#define PARTS_TYPE_MUFFLER 20
#define PARTS_TYPE_CLUTCH 21
#define PARTS_TYPE_FLYWHEEL 22
#define PARTS_TYPE_PROPELLERSHAFT 23
#define PARTS_TYPE_LSD 24
#define PARTS_TYPE_FRONTTIRE 25
#define PARTS_TYPE_REARTIRE 26
#define PARTS_TYPE_NOS 27
#define PARTS_TYPE_SUPERCHARGER 28
#define PARTS_TYPE_WHEEL 29
#define PARTS_TYPE_WING 30
#define PARTS_TYPE_TIRESIZE 31
#define PARTS_TYPE_TIRECOMPOUND 32

#define PARTS_TYPE_TUNE_MAX 32

#define PARTS_CATEGORY_NONE 0

module PROJECT::ROOT::Pane
{
    function onLoad(context)
    {
        setFadeActor(Muffler::bgf);
        setFadeActor(Brake::bgf);
        setFadeActor(Engine::bgf);
        setFadeActor(DriveTrain::bgf);
        setFadeActor(Turbo::bgf);
        setFadeActor(Suspension::bgf);
        setFadeActor(Tire::bgf);
        setFadeActor(Others::bgf);
        setFadeActor(CompleteCar::bgf);

        Muffler.defineStatic("parts_types", [
            PARTS_TYPE_MUFFLER
        ]);

        Brake.defineStatic("parts_types", [
            PARTS_TYPE_BRAKE,
            PARTS_TYPE_BRAKECONTROLLER
        ]);

        Engine.defineStatic("parts_types", [
            PARTS_TYPE_ENGINE,
            PARTS_TYPE_NATUNE,
            PARTS_TYPE_PORTPOLISH,
            PARTS_TYPE_ENGINEBALANCE,
            PARTS_TYPE_DISPLACEMENT,
            PARTS_TYPE_COMPUTER,
            PARTS_TYPE_NOS
        ]);

        DriveTrain.defineStatic("parts_types", [
            PARTS_TYPE_GEAR,
            PARTS_TYPE_CLUTCH,
            PARTS_TYPE_FLYWHEEL,
            PARTS_TYPE_LSD,
            PARTS_TYPE_PROPELLERSHAFT,
        ]);

        Turbo.defineStatic("parts_types", [
            PARTS_TYPE_TURBINEKIT,
            PARTS_TYPE_INTERCOOLER,
            PARTS_TYPE_SUPERCHARGER,
        ]);

        Suspension.defineStatic("parts_types", [
            PARTS_TYPE_SUSPENSION
        ]);

        Tire.defineStatic("parts_types", [
            PARTS_TYPE_FRONTTIRE
        ]);

        Others.defineStatic("parts_types", [
            PARTS_TYPE_DRIVETRAIN,
            PARTS_TYPE_RACINGMODIFY,
            PARTS_TYPE_LIGHTWEIGHT,
            PARTS_TYPE_TIRESIZE,
            PARTS_TYPE_TIRECOMPOUND
        ]);

        // Hack: Button for buying "full model" from specific tuning car dealers
        CompleteCar.defineStatic("parts_types", []);
    }

    function enable_parts(car, parts_types)
    {
        var dealer = main::game.menuRef();
        var enable = false;

        if (car == nil)
            enable = false;
        else if (!car.canTune(dealer, DealerData::getSubTuner(dealer)))
            enable = false;
        else if (parts_types.size == 0)
            enable = false;
        else
        {
            enable = false;

            for (var i = 0; i < parts_types.size; i++)
            {
                var type = parts_types[i];
                if (car.isExistPartsType(type) || type >= PARTS_TYPE_TUNE_MAX)
                {
                    enable = true;
                    break;
                }
            }
        }

        return enable;
    }

    function sensitive(widget, car)
    {
        var parts_types = widget["parts_types"];
        var enable = enable_parts(car, parts_types);
        widget["bg"].visible = enable;
        widget["bgi"].visible = !enable;
    }

    function sensitive_completecar(widget)
    {
        var listname = subtuner + "_carlist";
        if (CompleteCarData.defined(listname) && CompleteCarData[listname].size > 0)
        {
            widget.visible = true;
            widget["bg"].visible = true;
            widget["bgi"].visible = false;
        }
        else
        {
            widget.visible = false;
        }
    }

    function onInitialize(context)
    {
        sensitive(Muffler, current_car);
        sensitive(Brake, current_car);
        sensitive(Engine, current_car);
        sensitive(DriveTrain, current_car);
        sensitive(Turbo, current_car);
        sensitive(Suspension, current_car);
        sensitive(Tire, current_car);
        sensitive(Others, current_car);
        sensitive_completecar(CompleteCar);
    }
}

module PROJECT::ROOT::Pane::CompleteCar
{
    function onActivate(context, event)
    {
        var listname = subtuner + "_carlist";
        var carlist = nil;

        if (CompleteCarData.defined(listname))
            carlist = CompleteCarData[listname];

        if (carlist != nil && carlist.size > 0)
        {
            main::sound.play("ok");
            BuyCarRoot::open(context, carlist, ROOT, subtuner, "complete");
        }
        else
            main::sound.play("disable");

        return EVENTRESULT_FILTER;
    }
}