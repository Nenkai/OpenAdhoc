











module ROOT
{
    hidden.visible = false;

    class PartsData
    {
        attribute parts_type_index;
        attribute parts_type_name;
        attribute parts_index;
        attribute parts_name;
        attribute price;
        attribute name;
        attribute image;
        attribute customwing_index;

        method __init__(parts_type_name, parts_name, parts_type_index, parts_index, price, name, image, customwing_index)
        {
            self.parts_type_name = parts_type_name;
            self.parts_type_index = parts_type_index;
            self.parts_name = parts_name;
            self.parts_index = parts_index;
            self.price = price != nil ? price : "";
            self.name = name != nil ? name : "";
            self.image = image != nil ? image : "";
            self.customwing_index = customwing_index;
        }
    }

    static sPartsList = [
        ["AERO", [
            ["AERO", ["A", "B", "C"]]
        ]],
        ["FLAT_FLOOR", [
            ["FLAT_FLOOR", ["A"]]
        ]],
        ["WING", [
            ["WING", ["WINGLESS", "CUSTOM", "W1", "W2", "W3"]]
        ]],
        ["FREEDOM", [
            ["FREEDOM", ["F1", "F2", "F3"]]
        ]],
    ];

    attribute modal_page;
    attribute riding_car;
    attribute need_save = false;

    method open(context)
    {
        self.modal_page = main::SequenceUtil::ModalPage(context, ROOT);
        self.modal_page.open();
    }

    method close(context)
    {
        if (self.modal_page != nil)
        {
            ContextMain.disableInput();

            if (self.need_save)
            {
                SaveDataUtilGT6::saveEveryWhere(context);
                self.need_save = false;
            }

            GTAutoMenu::ListWindow::CarView.finalize(context);
            PageUtil::visibleUnderPages(context, self);

            menu::FrameInterval = 1;

            var actor = self.Fade;
            actor.backward();
            actor.start();

            var delay_time = actor.total_time;
            self.modal_page.close(delay_time);
            self.modal_page = nil;

            ContextMain.enableInput();
        }
    }

    method onInitialize(context)
    {
        self.need_save = false;
        self.riding_car = GAME_STATUS.user_profile.garage.getRidingCar();
        
        GTAutoMenu::ListWindow::CarView.initialize(context);
        GTAutoMenu::ListWindow::CarView.setCar(context, self.riding_car);
        
        ContextMain.disableInput();

        var actor = self.Fade;
        actor.forward();
        actor.restart();
        actor.on_effect_end = function(context)
        {
            actor.on_effect_end = nil;
            PageUtil::invisibleUnderPages(context, self);
            ContextMain.enableInput();
        };

        GTAutoMenu.initialize(context);
        self.Fade.forward();
        self.Fade.restart();
        
        menu::FrameInterval = 2;
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        if (event.keysym == CELL_PAD_CTRL_START)
        {
            GTAutoMenu::ListWindow::CarView.endPreviewCarInfo();

            var preopen_garage_id = GAME_STATUS.user_profile.garage.getRidingGarageId();
            if (CursorProject::StartMenuRoot::StartMenu.checkKeyPress(context, event))
            {
                if (preopen_garage_id != GAME_STATUS.user_profile.garage.getRidingGarageId())
                {
                    self.riding_car = GAME_STATUS.user_profile.garage.getRidingCar();
                    GTAutoMenu.initialize(context);
                    GTAutoMenu::ListWindow::CarView.setCar(context, self.riding_car);
                }

            }

            GTAutoMenu::ListWindow::CarView.beginPreviewCarInfo();
        }

        switch (event.keysym)
        {
            case CELL_PAD_CTRL_L1:
                if (GTAutoMenu::ListWindow::CarView.swapCamera_L1())
                    sound.play("cursor");

                return EVENTRESULT_FILTER;

            case CELL_PAD_CTRL_R1:
                if (GTAutoMenu::ListWindow::CarView.swapCamera_R1())
                    sound.play("cursor");

                return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }

    module GTAutoMenu
    {
        attribute active_w;

        method initialize(context)
        {
            var focus_w = nil;
            var category_w = hidden::Category.doCopy();

            category_w.setText(manager.translate("GTAuto", "Category_Aero"));

            self.clearCategoryComponent(context);
            var has_customparts = false;

            foreach (|var parts_category_label, var category_parts_list| in sPartsList)
            {
                var parts_list = [];
                foreach (|var parts_type_name, var parts_name_list| in category_parts_list)
                {
                    var parts_type_index = GTAutoUtil::getPartsTypeIndex(parts_type_name);
                    foreach (var parts_name in parts_name_list)
                    {
                        var parts_index = GTAutoUtil::getPartsIndex(parts_type_name, parts_name);
                        if (!ROOT.riding_car.isExistParts(parts_type_index, parts_index))
                            continue;

                        if (parts_type_name == "WING" && parts_name == "CUSTOM")
                        {
                            var price = GTAutoUtil::getPartsPrice(ROOT.riding_car, parts_type_name, parts_name);
                            for (var customwing_index = 1; customwing_index <= 5; customwing_index++)
                            {
                                parts_list.push(ROOT::PartsData(parts_type_name, parts_name,
                                    parts_type_index, parts_index,
                                    price,
                                    "%{parts_type_name}_%{parts_name}_%{customwing_index}",
                                    "/piece/gt6/tuning_parts_S/%{parts_type_name.downcase()}_%{parts_name.downcase()}_%{customwing_index}.img",
                                    customwing_index));
                            }
                        }
                        else
                        {
                            parts_list.push(ROOT::PartsData(parts_type_name, parts_name,
                                parts_type_index, parts_index,
                                GTAutoUtil::getPartsPrice(ROOT.riding_car, parts_type_name, parts_name),
                                "%{parts_type_name}_%{parts_name}",
                                "/piece/gt6/tuning_parts_S/%{parts_type_name.downcase()}_%{parts_name.downcase()}.img"));
                        }

                        has_customparts = true;
                    }
                    
                    if (parts_list.size > 0)
                    {
                        parts_list.unshift(ROOT::PartsData(parts_type_name, "NORMAL",
                            parts_type_index, 0,
                            10 * 100,
                            "PARTS_NORMAL"));
                    }
                }

                var category_item_w = hidden::CategoryItem.doCopy();
                category_item_w.value = parts_list;
                category_item_w.setText(manager.translate("Setting", parts_category_label));
                category_w.setCategoryItemComponent(context, category_item_w);
    
                if (focus_w == nil)
                    focus_w = category_item_w;
            }

            GTAutoMenu::ListWindow::CarView::CannotChangeParts.visible = !has_customparts;

            self.setCategoryComponent(context, category_w);
            self.setActive(context, focus_w);

            ROOT.setFocus(focus_w);
        }

        method onFinalize(context)
        {
            if (self.active_w != nil)
            {
                self.active_w.active = false;
                self.active_w = nil;
            }

            self.clearCategoryComponent(context);
        }

        method setActive(context, active_item)
        {
            if (self.active_w != nil)
            {
                self.active_w.active = false;
                self.active_w = nil;
            }

            active_item.active = true;
            self.active_w = active_item;
            self.updateList(context, active_item);
        }

        method updateList(context, item)
        {
            if (item == nil)
                item = self.active_w;

            var parts_list = item.value;
            GTAutoMenu::ListWindow::clip::ListBox.setPartsList(context, parts_list);
        }
    }

    module GTAutoMenu::ListWindow::clip::ListBox
    {
        attribute parts_list;
        attribute prev_focus_w_;
        attribute active_w_index = -1;

        method setPartsList(context, parts_list)
        {
            self.active_w_index = -1;
            self.setItemTemplate(context, hidden::ListItem);
            self.setItemCount(0);
            self.postRedraw();

            context.wait();

            self.setItemCount(parts_list.size);
            self.parts_list = parts_list;
            self.focus_index = 0;

            var empty = parts_list.size > 0;
            self.insensitive = !empty;

            ListWindow::Empty.visible = !empty;
        }

        method inFocus(context)
        {
            if (self.insensitive)
                return;

            var focus_w = ROOT.getFocusWidget();
            if (focus_w == nil)
                return;

            self.prev_focus_w_ = focus_w;
            ROOT.setFocus(self);
        }

        method outFocus(context)
        {
            if (self.prev_focus_w_ != nil)
            {
                ROOT.setFocus(self.prev_focus_w_);
                self.prev_focus_w_ = nil;
            }
        }

        method onActivate(context)
        {
            var w = self.getInitializedWidget(context, self.focus_index);
            if (w == nil || self.focus_index == self.active_w_index)
                return EVENTRESULT_FILTER;

            if (w.Invalid.visible)
            {
                main::sound.play("disable");
                return EVENTRESULT_FILTER;
            }

            var prev_active_w = self.getItemWidget(self.active_w_index);
            if (prev_active_w != nil)
                prev_active_w.set_active(false);

            self.active_w_index = self.focus_index;
            w.set_active(true);
            w.on_activate(context);

            return EVENTRESULT_FILTER;
        }

        method getInitializedWidget(context, i)
        {
            if (i < 0)
                return nil;

            var w = self.getItemWidget(i);
            if (w == nil)
            {
                w = self.getItemWidget(i, context);
            }

            if (w.value == nil)
            {
                var parts_data = self.parts_list[i];
                w.initialize(context, parts_data);

                if (w == self.active_w)
                    w.setActive(true);
            }

            return w;
        }

        method onKeyPress(context, event)
        {
            if (event.keysym == CELL_PAD_CTRL_L3_LEFT)
            {
                sound.play("cursor");
                GTAutoMenu::ListWindow::clip::ListBox.outFocus(context);
                return EVENTRESULT_FILTER;
            }

            return EVENTRESULT_CONTINUE;
        }

        method onFocusNotify(context, new_index, old_index)
        {
            if (new_index != nil)
            {
                var w = self.getItemWidget(new_index, context);
                if (w != nil && w.defined("on_focus_enter"))
                    w["on_focus_enter"](context);
            }

            if (old_index != nil)
            {
                var w = self.getItemWidget(old_index, context);
                if (w != nil && w.defined("on_focus_leave"))
                    w["on_focus_leave"](context);
            }

            return EVENTRESULT_STOP;
        }

        method onVisibleNotify(context, indices)
        {
            foreach (var i in indices)
            {
                if (self.getItemVisible(i))
                {
                    var w = self.getInitializedWidget(context, i);
                    if (i == self.active_w_index)
                        w.set_active(true);
                }
                else
                    self.setItemWidget(i, context, nil);
            }

            return EVENTRESULT_STOP;
        }
    }

    module GTAutoMenu::ListWindow::CarView
    {
        static sCameraScripts = [
            "GTAUTO_Parts_Paint_right",
            "GTAUTO_Parts_Paint_FR",
            "GTAUTO_Parts_Paint_front",
            "GTAUTO_Parts_Paint_FL",
            "GTAUTO_Parts_Paint_left",
            "GTAUTO_Parts_Paint_RL",
            "GTAUTO_Parts_Paint_rear",
            "GTAUTO_Parts_Paint_RR",
            "GTAUTO_Parts_Paint_topview",
        ];

        attribute preview_cp;
        attribute is_preview = false;
        attribute data;
        attribute item_w;
        attribute is_begin_info = false;
        attribute camera_point = 0;

        method initialize(context)
        {
            self.insensitive = true;
            
            var sbox = self.SBox;
            sbox.Name.text = "";
            sbox.CrPrice::Price.text = "--";
            sbox.Buy.insensitive = true;

            self.Help::HBox::MoveY.forward();
            self.Help::HBox::MoveY.reset();

            self.SceneFace.initialize(context);
        }

        method finalize(context)
        {
            self.endPreviewCarInfo();
            self.SceneFace.finalize(context);
            self.data = nil;
            self.item_w = nil;
            self.is_preview = false;
        }

        method onFinalize(context)
        {
            self.finalize(context);
        }

        method setCar(context, cp)
        {
            self.finalize(context);
            self.insensitive = true;
            self.preview_cp = gtengine::MCarParameter();
            self.preview_cp.deepCopy(cp);
            GTAutoUtil::applyCarWashAndRepair(self.preview_cp);
            self.is_preview = false;
            self.beginPreviewCarInfo();

            self.SceneFace.initialize(context);
            self.SceneFace.loadCar(context, self.preview_cp);
            self.SBox::Buy.insensitive = true;
            self.Help::HBox::MoveY.backward();
            self.Help::HBox::MoveY.start();
        }

        method startPreview(data, item_w)
        {
            self.data = data;
            self.item_w = item_w;
            
            var sbox = self.SBox;
            sbox.Name.text = item_w.Name.text;
            sbox.CrPrice::Price.text = item_w.CrPrice::Price.text;
            sbox.Buy.insensitive = item_w.OwnFlag.visible;
            sbox.OwnFlag.visible = item_w.OwnFlag.visible;

            self.Help::HBox::MoveY.forward();
            self.Help::HBox::MoveY.start();

            self.loadCustomPartsModel(data.parts_type_index, data.parts_index, data.customwing_index);

            self.insensitive = false;
            self.is_preview = true;

            return true;
        }

        method endPreview()
        {
            if (!self.is_preview)
                return false;

            var installed_parts_index = self.preview_cp.getParts(self.data.parts_type_index);
            self.loadCustomPartsModel(data.parts_type_index, installed_parts_index, self.preview_cp.wingFlapType);

            self.SBox::Buy.insensitive = true;
            self.Help::HBox::MoveY.backward();
            self.Help::HBox::MoveY.start();

            self.item_w = nil;
            self.data = nil;
            self.insensitive = true;
            self.is_preview = false;

            return true;
        }

        method beginPreviewCarInfo()
        {
            if (!self.is_begin_info && self.preview_cp != nil)
            {
                self.preview_cp.beginInfo();
                self.is_begin_info = true;
            }
        }

        method endPreviewCarInfo()
        {
            if (self.is_begin_info && self.preview_cp != nil)
            {
                self.preview_cp.endInfo();
                self.is_begin_info = false;
            }
        }

        method swapCamera_R1()
        {
            self.camera_point++;

            if (self.camera_point >= sCameraScripts.size)
                self.camera_point = 0;

            self.SceneFace.resetCommandQueue();
            SceneFaceUtil::loadScene(self.SceneFace, sCameraScripts[self.camera_point]);
            return true;
        }

        method swapCamera_L1()
        {
            self.camera_point--;

            if (self.camera_point < 0)
                self.camera_point = sCameraScripts.size - 1;

            self.SceneFace.resetCommandQueue();
            SceneFaceUtil::loadScene(self.SceneFace, sCameraScripts[self.camera_point]);
            return true;
        }

        method loadCustomPartsModel(parts_type_index, parts_index, customwing_index)
        {
            var scene_parts_type_map = [
                gtengine::CarPartsType::WING : 2,
                gtengine::CarPartsType::AERO : 3,
                gtengine::CarPartsType::FLAT_FLOOR : 4,
                gtengine::CarPartsType::FREEDOM : 5
            ];

            var scene_parts_type_index = scene_parts_type_map[parts_type_index];

            if (scene_parts_type_index == nil)
                return;

            var cmd_list = [];

            if (gtengine::CarPartsType::WING == parts_type_index)
            {
                var is_customwing = gtengine::PARTS_WING::CUSTOM == parts_index;
                cmd_list.push("setCarWingCustom %{is_customwing ? 1 : 0} car0");

                if (is_customwing)
                {
                    var n = customwing_index;
                    cmd_list += [
                        "setCarWingParts 0 %{n} car0",
                        "setCarWingParts 1 %{n} car0",
                        "setCarWingParts 2 %{n} car0",
                        "setCarWingParts 3 %{n} car0",
                    ];
                }

                cmd_list.push("setCarCustomParts %{scene_parts_type_index} %{parts_index} car0")
            }
            else
                cmd_list.push("setCarCustomParts %{scene_parts_type_index} %{parts_index} car0");

            self.SceneFace.resetCommandQueue();

            foreach (var cmd in cmd_list)
            {
                self.SceneFace.execCommand(cmd);
            }
        }

        method onActivate(context, event)
        {
            if (event.widget.name == "Buy")
            {
                sound.play("ok");

                var res = QUERY(context, "GTAuto", "Query_ChangeCustomParts");
                if (!res)
                    return EVENTRESULT_FILTER;

                if (!main::GAME_STATUS.user_profile.payTuningCost(data.price))
                {
                    sound.play("disable");
                    ERROR(context, "CommonGTMode", "Message_EnoughMoney");
                    return EVENTRESULT_FILTER;
                }

                if (self.data.parts_index == gtengine::PARTS_WING::CUSTOM)
                {
                    Grim2Util::PUTLOG::CREDIT::withdraw("custom", data.price, self.data.parts_type_index, self.data.parts_index, self.data.customwing_index);
                }
                else
                {
                    Grim2Util::PUTLOG::CREDIT::withdraw("custom", data.price, self.data.parts_type_index, self.data.parts_index, -1);
                }

                CursorProject::StartMenuRoot::StartMenu.reflectCurrentStatus(context);
                ROOT.riding_car.beginInfo();

                if (self.data.parts_type_index == gtengine::CarPartsType::WING)
                {
                    var is_customwing = self.data.parts_index == gtengine::PARTS_WING::CUSTOM;
                    var n = is_customwing ? self.data.customwing_index : 0;

                    ROOT.riding_car.wingCustomized = is_customwing;
                    ROOT.riding_car.wingFlapType = n;
                    ROOT.riding_car.wingEndPlateType = n;
                    ROOT.riding_car.wingStayType = n;
                    ROOT.riding_car.wingMountType = n;
                }

                ROOT.riding_car.setParts(self.data.parts_type_index, self.data.parts_index);
                ROOT.riding_car.endInfo();

                GTAutoUtil::applyCarWashAndRepair(ROOT.riding_car);
                GAME_STATUS.user_profile.garage.updateCar(ROOT.riding_car);
                self.endPreviewCarInfo();
                self.preview_cp.deepCopy(ROOT.riding_car);
                self.beginPreviewCarInfo();

                var need_capture = true;

                PitWorkRoot.openModal(context, GAME_STATUS.user_profile.garage.getRidingGarageId(), need_capture);
                for (var i = 0; i < GTAutoMenu::ListWindow::clip::ListBox.getItemCount(); i++)
                {
                    var w = GTAutoMenu::ListWindow::clip::ListBox.getItemWidget(i);
                    if (w != nil)
                        w.OwnFlag.visible = false;
                }

                self.item_w.OwnFlag.visible = true;
                self.SBox::OwnFlag.visible = true;
                self.SBox::Buy.insensitive = true;
            }

            return EVENTRESULT_FILTER;
        }

        module SceneFace
        {
            attribute current_cp;
            attribute thread;
            attribute finalized = false;

            method initialize(context)
            {
                GTAutoMenu::ListWindow::CarView::SceneCover::Fade.reset();

                self.finalized = false;
                self.visible = false;
            }

            method finalize(context)
            {
                self.clearCar(context);
                self.visible = false;
                self.finalized = true;
            }
    
            method clearCar(context)
            {
                GTAutoMenu::ListWindow::CarView::SceneCover::Fade.reset();

                if (self.thread != nil)
                {
                    self.thread.terminate();
                    self.thread = nil;
                }
            
                if (self.current_cp != nil)
                {
                    self.execCommandImmidiate("clearEntity car0");
                    self.current_cp = nil;
                }
            }

            method loadCar(context, cp)
            {
                self.clearCar(context);
                self.setDefaultCarParameter(cp, 0);
                self.current_cp = cp;

                SceneFaceUtil::loadScene(self, "GTAUTO_Parts_Paint");
                self.saveCommandQueue();

                self.thread = Thread(function(context) 
                {
                    for (;;)
                    {
                        if (self.finalized)
                            return;
                
                        if (self.current_cp == nil)
                            return;

                        if (!self.isUnderSetup())
                        {
                            GTAutoMenu::ListWindow::CarView::SceneCover::Fade.start();
                            return;
                        }

                        Thread::Sleep(0.1);
                    }
                }, context);
            
                self.thread.start();
                self.visible = true;
            }
        }
    }

    module hidden::CategoryItem
    {
        method onActivate(context, event)
        {
            if (self == GTAutoMenu.active_w)
                return EVENTRESULT_FILTER;

            sound.play("ok");

            GTAutoMenu::ListWindow::CarView.endPreview();

            GTAutoMenu.setActive(context, event.widget);
            return EVENTRESULT_FILTER;
        }

        method onKeyPress(context, event)
        {
            if (event.keysym == CELL_PAD_CTRL_L3_RIGHT)
            {
                sound.play("cursor");
                GTAutoMenu::ListWindow::clip::ListBox.inFocus(context);
                return EVENTRESULT_FILTER;
            }

            return EVENTRESULT_CONTINUE;
        }
    }

    module hidden::ListItem
    {
        attribute value;

        method onInitialize(context)
        {
            self.Name.text = "";
            self.Description.text = "";
            self.CrPrice::Price.text = "";
            self.Checkbox.active = false;
            self.OwnFlag.visible = false;
            self.Invalid.visible = false;
            self.Normal.visible = false;
            self.Opacity.reset();
        }

        method initialize(context, parts_data)
        {
            self.Thumbnail.image_path = parts_data.image;
            self.Name.text = manager.translate("Setting", parts_data.name);
            self.Description.text = manager.translate("SettingDescription", parts_data.name);
            self.CrPrice::Price.text = pdiext::MMisc::GetMoneyString(parts_data.price);

            var current_parts_index = ROOT.riding_car.getParts(parts_data.parts_type_index);
            if (current_parts_index < 0)
                current_parts_index = 0;

            if (parts_data.parts_type_index == gtengine::CarPartsType::WING && parts_data.parts_index == gtengine::PARTS_WING::CUSTOM)
            {
                var current_customwing_index = ROOT.riding_car.wingFlapType;
                self.OwnFlag.visible = current_parts_index == parts_data.parts_index && current_customwing_index == parts_data.customwing_index;
            }
            else
                self.OwnFlag.visible = current_parts_index == parts_data.parts_index;

            if (parts_data.parts_name == "NORMAL")
                self.Normal.visible = true;

            self.value = parts_data;
            self.Opacity.start();
        }

        method on_activate(context)
        {
            if (self.Invalid.visible)
            {
                main::sound.play("disable");
                return;
            }

            main::sound.play("ok");

            GTAutoMenu::ListWindow::CarView.startPreview(self.value, self);
        }

        method set_active(active) 
        { 
            if (self.Invalid.visible)
                return;

            self.Checkbox.active = active;
        }
    }
}