module PROJECT::ROOT
{

	function setMoveActor(widget)
	{
		var actor = main::menu::MMoveActor(widget, PS2_SCREEN_W_F + widget.w, widget.y);
		widget.actor = actor;
		widget.actor.ratio = 0.2;
		widget.actor.out = false;
		widget.actor.warp();
	}
	
	setMoveActor(Graph);
	
	static rangePS = 0.0;
	static rangeTQ = 0.0;
	
	static tire_frames = [
		"normal",
		"sports",
		"racing",
		"dirt",
		"snow"
	];
	
	// Determines which tire category value is associated with which tire type
	// Matches with tire_frames[] array
	static tire_categories = [
		[0, 1, 2],
		[3, 4, 5],
		[6, 7, 8, 9, 10],
		[11],
		[12]
	];

	function get_tire_frame(type)
	{
		var parts = current_car.getEquipedParts(type);
		var num = tire_frames.size;
	
		for (var i = 0; i < num; i++)
		{
			var categories = tire_categories[i];
			var jnum = categories.size;
	
			for (var j = 0; j < jnum; j++)
			{
				if (categories[j] == parts)
					return i;
			}
		}
	
		return -1;
	}

	function get_tire_index(type)
	{
		var parts = current_car.getEquipedParts(type);
		var num = tire_frames.size;
		var idx = -1;
	
		for (var i = 0; i < num; i++)
		{
			var categories = tire_categories[i];
			var jnum = categories.size;
	
			for (var j = 0; j < jnum; j++)
			{
				if (categories[j] == parts)
					return j;
			}
		}
	
		return -1;
	}

	function get_available_tire(tire_frame)
	{
		var categories = tire_categories[tire_frame];
		var num = categories.size;
	
		for (var i = 0; i < num; i++)
		{
			if (current_car.isHavingParts(25, categories[i]))
				if (1)
					return i;
		}
	
		return -1;
	}

	function is_tire_available(tire_frame)
	{
		var limited_tire = getLimitedTire(current_race, current_course);
	
		if (limited_tire != nil)
		{
			if (limited_tire == 11 && tire_frame != 3)
				return false;
	
			if (limited_tire == 12 && tire_frame != 4)
				return false;
	
			if (limited_tire == 2 && tire_frame != 0)
				return false;
	
			if (limited_tire == 5)
			{
				if (tire_frame != 0 && tire_frame != 1)
					return false;
			}
	
			if (limited_tire == 10)
			{
				if (tire_frame != 0 && tire_frame != 1 && tire_frame != 2)
					return false;
			}
		}
	
		var idx = get_available_tire(tire_frame);
		return (idx != -1);
	}

	function initialize_optionmenu_tireframe(context, optionmenu, options)
	{
		var vbox = optionmenu["popup"]["vbox"];
		vbox.clearWindow(context);
	
		var num = options.size;
		var insensitive_list = Array(num);
	
		for (var i = 0; i < num; i++)
		{
			insensitive_list[i] = !is_tire_available(i);
	
			var item = hidden::Item.doCopy();
			var name = options[i];
	
			if (name != nil)
			{
				item["label"].text = context.translate(ROOT, name + "_tire");
				item["label"].adjustScale();
	
				item["labeli"].text = item["label"].text;
				item["labeli"].adjustScale();
	
				item.name = name;
				vbox.appendChild(context, item);
			}
			else
			    ;
		}
	
		optionmenu.applyAppend(context);
		optionmenu.setInsensitive(context, insensitive_list);
	}

	function initialize_optionmenu_tire(context, optionmenu, frame_index, type)
	{
		var vbox = optionmenu["popup"]["vbox"];
		vbox.clearWindow(context);
	
		var categories = tire_categories[frame_index];
		var num = categories.size;
		var insensitive_list = Array(num);
	
		for (var i = 0; i < num; i++)
		{
			var cat = categories[i];
			insensitive_list[i] = !current_car.isHavingParts(type, cat);
	
			var item = hidden::Item.doCopy();
			item["label"].text = context.translate(ROOT, getPartsName(type, cat));
			item["label"].adjustScale();
	
			item["labeli"].text = item["label"].text;
			item["labeli"].adjustScale();
	
			vbox.appendChild(context, item);
		}
	
		optionmenu.applyAppend(context);
		optionmenu.setInsensitive(context, insensitive_list);
	}

	function initialize_optionmenu_onoff(context, optionmenu, type, category)
	{
		var vbox = optionmenu["popup"]["vbox"];
		vbox.clearWindow(context);
	
		var insensitive_list = Array(2);
		var parts = current_car.getEquipedParts(type);
	
		var item = hidden::Item.doCopy();
		item["label"].text = context.translate(ROOT, "none");
		item["label"].adjustScale();
		item["labeli"].text = item["label"].text;
		item["labeli"].adjustScale();
		vbox.appendChild(context, item);
	
		insensitive_list[0] = 0;
	
		var item = hidden::Item.doCopy();
		item["label"].text = context.translate(ROOT, getPartsName(type, category));
		item["label"].adjustScale();
		item["labeli"].text = item["label"].text;
		item["labeli"].adjustScale();
		vbox.appendChild(context, item);
	
		insensitive_list[1] = !current_car.isHavingParts(type, category);
	
		if (parts == category)
		{
			optionmenu.setIndex(nil, 1);
		}
	
		optionmenu.applyAppend(context);
		optionmenu.setInsensitive(context, insensitive_list);
	}

	function initialize_optionmenu(context, optionmenu, options, type)
	{
		var vbox = optionmenu["popup"]["vbox"];
		vbox.clearWindow(context);
	
		var num = options.size;
		var insensitive_list = Array(num);
	
		for (var i = 0; i < num; i++)
		{
			if ((type == 3 || type == 14) && i == (num - 1) && !current_car.isExistParts(type, i))
			{
				insensitive_list[i] = true;
				continue;
			}
			else
				;
				
			var name = options[i];
	
			if (name == nil)
			{
				if (current_car.isRemovableType(type))
				{
					if (current_car.isRemovedNormalType(type))
					{
						name = "normal";
					}
					else
					{
						name = "none";
					}
				}
			}
	
			if (name != nil)
			{
				var item = hidden::Item.doCopy();
	
				item["label"].text = context.translate(ROOT, name);
				item["label"].adjustScale();
				item["labeli"].text = item["label"].text;
				item["labeli"].adjustScale();
				item.name = name;
	
				vbox.appendChild(context, item);
			}
			else
				;
			
			insensitive_list[i] = !current_car.isHavingParts(type, i);
		}
	
		if (type == 20 && !current_car.isDefaultNoParts(20))
		{
			insensitive_list[0] = true;
		}
	
		optionmenu.applyAppend(context);
		optionmenu.setInsensitive(context, insensitive_list);
	}

	function onInitialize(context)
	{
	
		hidden.visible = false;
		
		CarName.text = current_car.short_name_no_year;
		CarName.adjustScale();
		
		ScrollWindow::clip::space::VBox1::BRAKECONTROLLER::label.adjustScale();
		ScrollWindow::clip::space::VBox3::DRIVETRAIN::label.adjustScale();
		
		reflect_slot();
		
		var LSD_list2 = [];
		for (var i = 0; i < (LSD_list.size - 1); i++)
		{
			LSD_list2.push(LSD_list[i]);
		}
		
		var vbox = ScrollWindow::clip::space::VBox0;
		initialize_optionmenu(context, vbox["MUFFLER"]["OptionMenu"], SettingProject["MUFFLER" + "_list"], 20);
		initialize_optionmenu(context, vbox["COMPUTER"]["OptionMenu"], SettingProject["COMPUTER" + "_list"], 18);
		initialize_optionmenu(context, vbox["NATUNE"]["OptionMenu"], SettingProject["NATUNE" + "_list"], 13);
		initialize_optionmenu_tireframe(context, vbox["TIREFRAME"]["OptionMenu"], tire_frames);
		
		var frame_index = get_tire_frame(25);
		initialize_optionmenu_tire(context, vbox["FRONTTIRE"]["OptionMenu"], frame_index, 25);
		initialize_optionmenu_tire(context, vbox["REARTIRE"]["OptionMenu"], frame_index, 26);
		
		vbox = ScrollWindow::clip::space::VBox1;
		initialize_optionmenu(context, vbox["NOS"]["OptionMenu"], SettingProject["NOS" + "_list"], 27);
		initialize_optionmenu(context, vbox["TURBINEKIT"]["OptionMenu"], SettingProject["TURBINEKIT" + "_list"], 14);
		initialize_optionmenu(context, vbox["INTERCOOLER"]["OptionMenu"], SettingProject["INTERCOOLER" + "_list"], 19);
		initialize_optionmenu(context, vbox["SUPERCHARGER"]["OptionMenu"], SettingProject["SUPERCHARGER" + "_list"], 28);
		initialize_optionmenu(context, vbox["BRAKE"]["OptionMenu"], SettingProject["BRAKE" + "_list"], 1);
		initialize_optionmenu(context, vbox["BRAKECONTROLLER"]["OptionMenu"], SettingProject["BRAKECONTROLLER" + "_list"], 2);
		
		vbox = ScrollWindow::clip::space::VBox2;
		initialize_optionmenu(context, vbox["SUSPENSION"]["OptionMenu"], SettingProject["SUSPENSION" + "_list"], 3);
		initialize_optionmenu(context, vbox["GEAR"]["OptionMenu"], SettingProject["GEAR" + "_list"], 11);
		initialize_optionmenu(context, vbox["CLUTCH"]["OptionMenu"], SettingProject["CLUTCH" + "_list"], 21);
		initialize_optionmenu(context, vbox["FLYWHEEL"]["OptionMenu"], SettingProject["FLYWHEEL" + "_list"], 22);
		initialize_optionmenu(context, vbox["PROPELLERSHAFT"]["OptionMenu"], SettingProject["PROPELLERSHAFT" + "_list"], 23);
		
		vbox = ScrollWindow::clip::space::VBox3;
		initialize_optionmenu(context, vbox["LSD"]["OptionMenu"], LSD_list2, 24);
		initialize_optionmenu_onoff(context, vbox["AYCC"]["OptionMenu"], 24, 5);
		initialize_optionmenu(context, vbox["DRIVETRAIN"]["OptionMenu"], SettingProject["DRIVETRAIN" + "_list"], 10);
		
		reflect(context);
		reflect_info();
		
		var aspiration_limited = isLimitedAspiration();
		if (!notice_shown && aspiration_limited)
		{
			delayOpenConfirmDialog(context, context.translate(ROOT, "now you are in limited race"));
			notice_shown = 1;
		}
		
		var limited_natune = isLimitedNATUNE();
		var limited_turbo = isLimitedTURBO();
		var limited_supercharger = isLimitedSUPERCHARGER();
		
		ScrollWindow::clip::space::VBox0::NATUNE::OptionMenu.insensitive = (limited_turbo || limited_supercharger);
		ScrollWindow::clip::space::VBox0::NATUNE::Dummy.visible = (limited_turbo || limited_supercharger);
		
		ScrollWindow::clip::space::VBox1::TURBINEKIT::OptionMenu.insensitive = (limited_supercharger || limited_natune);
		ScrollWindow::clip::space::VBox1::TURBINEKIT::Dummy.visible = (limited_supercharger || limited_natune);
		
		ScrollWindow::clip::space::VBox1::SUPERCHARGER::OptionMenu.insensitive = (limited_natune || limited_turbo);
		ScrollWindow::clip::space::VBox1::SUPERCHARGER::Dummy.visible = (limited_natune || limited_turbo);
		
		if (ROOT.getFocusedWidget() == nil)
		{
			ROOT.setFocus(Set::Set0);
		}
	}

	function onFinalize(context)
	{
		var vbox = ScrollWindow::clip::space::VBox0;
	
		vbox["MUFFLER"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["COMPUTER"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["NATUNE"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["TIREFRAME"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["FRONTTIRE"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["REARTIRE"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
	
		vbox = ScrollWindow::clip::space::VBox1;
	
		vbox["NOS"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["TURBINEKIT"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["INTERCOOLER"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["SUPERCHARGER"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["BRAKE"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["BRAKECONTROLLER"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
	
		vbox = ScrollWindow::clip::space::VBox2;
	
		vbox["SUSPENSION"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["GEAR"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["CLUTCH"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["FLYWHEEL"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["PROPELLERSHAFT"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
	
		vbox = ScrollWindow::clip::space::VBox3;
	
		vbox["LSD"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["AYCC"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
		vbox["DRIVETRAIN"]["OptionMenu"]["popup"]["vbox"].clearWindow(context);
	
		Graph.actor.out = 0;
		Graph.actor.warp();
	}
	
	function reflect_slot()
	{
		Set::Set0.active = 0;
		Set::Set1.active = 0;
		Set::Set2.active = 0;
	
		Set["Set" + current_car.slot].active = 1;
	}


	function reflect_info()
	{
		current_car.updateCurrentStatus();
	
		var power = current_car.getCurrentPower();
		if (power > 0)
		{
			Info::Power.text = power.toString() + main::menu::MUnit::GetUnitOfPower();
		}
		else
		{
			Info::Power.text = "--" + main::menu::MUnit::GetUnitOfPower();
		}
	
		var weight = current_car.getCurrentWeight();
		if (weight > 0)
		{
			Info::Weight.text = weight.toString() + main::menu::MUnit::GetUnitOfMass();
		}
		else
		{
			Info::Weight.text = "--" + main::menu::MUnit::GetUnitOfMass();
		}
	
		if (power > 0)
		{
			var [power_points, torque_points, maxPS, maxTQ, minRPM, maxRPM] = current_car.buildEngineCurveData();
	
			if (rangePS < maxPS)
			{
				rangePS = maxPS;
			}
	
			if (rangeTQ < maxTQ)
			{
				rangeTQ = maxTQ;
			}
	
			if (power_points != nil)
			{
				Graph::power_gf.type = "line";
				Graph::power_gf.line_width = 0.25; // Increase this to make the line thicker. On Emulator this gets a lot thinner as rendering res goes up. 1.0 Is a good value
				Graph::power_gf.points = power_points;
			}
	
			if (torque_points != nil)
			{
				Graph::torque_gf.type = "line";
				Graph::torque_gf.line_width = 0.25; // Increase this to make the line thicker. On Emulator this gets a lot thinner as rendering res goes up. 1.0 Is a good value
				Graph::torque_gf.points = torque_points;
			}
	
			Graph.visible = true;
		}
		else
		{
			Graph.visible = false;
		}
	}

	function reflect(context)
	{
		ROOT.visible = false;
	
		reflect_slot();
	
		var vbox = ScrollWindow::clip::space::VBox0;
	
		vbox["MUFFLER"]["OptionMenu"].setIndex(context, current_car.getEquipedParts(20));
		vbox["COMPUTER"]["OptionMenu"].setIndex(context, current_car.getEquipedParts(18));
		vbox["NATUNE"]["OptionMenu"].setIndex(context, current_car.getEquipedParts(13));
		vbox["TIREFRAME"]["OptionMenu"].setIndex(context, get_tire_frame(25));
	
		var frame_index = get_tire_frame(25);
		initialize_optionmenu_tire(context, vbox["FRONTTIRE"]["OptionMenu"], frame_index, 25);
		initialize_optionmenu_tire(context, vbox["REARTIRE"]["OptionMenu"], frame_index, 26);
	
		vbox["FRONTTIRE"]["OptionMenu"].setIndex(context, get_tire_index(25));
		vbox["REARTIRE"]["OptionMenu"].setIndex(context, get_tire_index(26));
		vbox = ScrollWindow::clip::space::VBox1;
	
		vbox["NOS"]["OptionMenu"].setIndex(context, current_car.getEquipedParts(27));
		vbox["TURBINEKIT"]["OptionMenu"].setIndex(context, current_car.getEquipedParts(14));
		vbox["INTERCOOLER"]["OptionMenu"].setIndex(context, current_car.getEquipedParts(19));
		vbox["SUPERCHARGER"]["OptionMenu"].setIndex(context, current_car.getEquipedParts(28));
		vbox["BRAKE"]["OptionMenu"].setIndex(context, current_car.getEquipedParts(1));
		vbox["BRAKECONTROLLER"]["OptionMenu"].setIndex(context, current_car.getEquipedParts(2));
	
		vbox = ScrollWindow::clip::space::VBox2;
	
		vbox["SUSPENSION"]["OptionMenu"].setIndex(context, current_car.getEquipedParts(3));
		vbox["GEAR"]["OptionMenu"].setIndex(context, current_car.getEquipedParts(11));
		vbox["CLUTCH"]["OptionMenu"].setIndex(context, current_car.getEquipedParts(21));
		vbox["FLYWHEEL"]["OptionMenu"].setIndex(context, current_car.getEquipedParts(22));
		vbox["PROPELLERSHAFT"]["OptionMenu"].setIndex(context, current_car.getEquipedParts(23));
	
		vbox = ScrollWindow::clip::space::VBox3;
	
		var lsd = current_car.getEquipedParts(24);
		var lsd_index;
		if (lsd == 5)
		{
			lsd_index = 0;
		}
		else
		{
			lsd_index = lsd;
		}
		
		vbox["LSD"]["OptionMenu"].setIndex(context, lsd_index);
		var aycc_index;
		if (lsd == 5)
		{
			aycc_index = 1;
		}
		else
		{
			aycc_index = 0;
		}
		
		vbox["AYCC"]["OptionMenu"].setIndex(context, aycc_index);
		
		vbox["DRIVETRAIN"]["OptionMenu"].setIndex(context, current_car.getEquipedParts(10));
		
		var fukagyaku_list = [8, 15, 16, 17, 31];
		var text = ""; 
		var num = fukagyaku_list.size;
		var first = 1;
		
		for (var i = 0; i < num; i++)
		{
			var type = fukagyaku_list[i];
			var category = current_car.getEquipedParts(type);
		
			if (category > 0)
			{
				var str = context.translate(ROOT, getPartsName(type, category));
		
				if (!first)
				{
					str = " | " + str;
				}
		
				text = text + str;
				first = 0;
			}
		}
		
		Attr::label.text = text;
		Attr::label.adjustScale();
		
		ROOT.visible = true;
	}

	function onCancel(context)
	{
		main::sound.play("cancel");
	
		if (openConfirmDialog(context, DIALOG_QUERY, context.translate(ROOT, "Do you quit?")))
		{
			main::game.next_menu_project = main::game.major_menu_project;
			start_page(context, nil);
		}
	
		return EVENTRESULT_FILTER;
	}

	function onKeyPress(context, event)
	{
	        switch (event.keysym)
	        {
	            case PS2_PAD_CTRL_START:
	                if (Graph.visible)
			    Graph::onActivate(context);
			else
			    ;
			return EVENTRESULT_FILTER;

	            default:
	                return EVENTRESULT_CONTINUE;
	        }
	}


	function set_regulation_tire()
	{
		var [res, tire] = setLimitedTire(current_car, current_race, current_course);
	
		if (!res)
			;
		else if (tire != nil)
			;
	}

	function canChangeItem(context)
	{
		if (isLimitedAspiration())
		{
			main::sound.play("disable");
	
			openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "this race is limited by aspiration"));
			return false;
		}
		else
		{
			return true;
		}
	}

}

module PROJECT::ROOT::Set::Set0
{
	function onActivate(context)
	{
		if (!canChangeItem(context))
		{
			return EVENTRESULT_FILTER;
		}
	
		main::sound.play("ok");
	
		current_car.slot = 0;
		current_car.setupPartsBuffer();
	
		set_regulation_tire();
	
		reflect(context);
		reflect_info();
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Set::Set1
{
	function onActivate(context)
	{
		if (!canChangeItem(context))
		{
			return EVENTRESULT_FILTER;
		}
	
		main::sound.play("ok");
	
		current_car.slot = 1;
		current_car.setupPartsBuffer();
	
		set_regulation_tire();
	
		reflect(context);
		reflect_info();
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Set::Set2
{
	function onActivate(context)
	{
		if (!canChangeItem(context))
		{
			return EVENTRESULT_FILTER;
		}
	
		main::sound.play("ok");
	
		current_car.slot = 2;
		current_car.setupPartsBuffer();
	
		set_regulation_tire();
	
		reflect(context);
		reflect_info();
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Graph
{
	function onActivate(context)
	{
		main::sound.play("ok");
		Graph.actor.out = true;
		context.sync(0.25);
		EngineCurbePopup::open(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox0::MUFFLER::OptionMenu
{
	function onValueChanged(context, index)
	{
		current_car.changeParts(20, index);
		reflect_info();
	}
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox0::COMPUTER::OptionMenu
{
	function onValueChanged(context, index)
	{
		current_car.changeParts(18, index);
		reflect_info();
	}
}
module PROJECT::ROOT::ScrollWindow::clip::space::VBox0::NATUNE::OptionMenu
{
	function onValueChanged(context, index)
	{
		current_car.changeParts(13, index);
	
		if (index != 0)
		{
			if (VBox1::TURBINEKIT::OptionMenu.index != 0)
			{
				VBox1::TURBINEKIT::OptionMenu.setIndex(context, 0);
				current_car.changeParts(14, 0);
			}
	
			if (VBox1::SUPERCHARGER::OptionMenu.index != 0)
			{
				VBox1::SUPERCHARGER::OptionMenu.setIndex(context, 0);
				current_car.changeParts(28, 0);
			}
		}
	
		reflect_info();
	}
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox0::NATUNE::Dummy
{
	function onActivate(context)
	{
		canChangeItem(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox0::TIREFRAME::OptionMenu
{
	function onValueChanged(context, frame_index)
	{
		ROOT.visible = false;
	
		var vbox = VBox0;
	
		initialize_optionmenu_tire(context, vbox["FRONTTIRE"]["OptionMenu"], frame_index, 25);
	
		var idx = get_available_tire(frame_index);
		vbox["FRONTTIRE"]["OptionMenu"].setIndex(context, idx);
	
		current_car.changeParts(25, tire_categories[frame_index][idx]);
	
		initialize_optionmenu_tire(context, vbox["REARTIRE"]["OptionMenu"], frame_index, 26);
	
		idx = get_available_tire(frame_index);
		vbox["REARTIRE"]["OptionMenu"].setIndex(context, idx);
	
		current_car.changeParts(26, tire_categories[frame_index][idx]);
	
		reflect_info();
	
		ROOT.visible = true;
	}
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox0::FRONTTIRE::OptionMenu
{
	function onValueChanged(context, index)
	{
		var frame_index = TIREFRAME::OptionMenu.index;
		current_car.changeParts(25, tire_categories[frame_index][index]);
		reflect_info();
	}
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox0::REARTIRE::OptionMenu
{
	function onValueChanged(context, index)
	{
		var frame_index = TIREFRAME::OptionMenu.index;
		current_car.changeParts(26, tire_categories[frame_index][index]);
		reflect_info();
	}
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox1::NOS::OptionMenu
{

	function onValueChanged(context, index)
	{
		current_car.changeParts(27, index);
		reflect_info();
	}

}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox1::NOS::Wrench
{
	function onActivate(context)
	{
		main::sound.play("ok");
		start_page(context, NosRoot);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox1::TURBINEKIT::OptionMenu
{
    function onValueChanged(context, index)
    {
        current_car.changeParts(14, index);

        if (index != 0)
        {
            if (VBox0::NATUNE::OptionMenu.index != 0)
            {
                VBox0::NATUNE::OptionMenu.setIndex(context, 0);
                current_car.changeParts(13, 0);
            }

            if (VBox1::SUPERCHARGER::OptionMenu.index != 0)
            {
                VBox1::SUPERCHARGER::OptionMenu.setIndex(context, 0);
                current_car.changeParts(28, 0);
            }
        }

        reflect_info();
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox1::TURBINEKIT::Dummy
{
    function onActivate(context)
    {
        canChangeItem(context);
		return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox1::INTERCOOLER::OptionMenu
{
    function onValueChanged(context, index)
    {
        current_car.changeParts(19, index);
        reflect_info();
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox1::SUPERCHARGER::OptionMenu
{
    function onValueChanged(context, index)
    {
        current_car.changeParts(28, index);

        if (index != 0)
        {
            if (VBox0::NATUNE::OptionMenu.index != 0)
            {
                VBox0::NATUNE::OptionMenu.setIndex(context, 0);
                current_car.changeParts(13, 0);
            }

            if (VBox1::TURBINEKIT::OptionMenu.index != 0)
            {
                VBox1::TURBINEKIT::OptionMenu.setIndex(context, 0);
                current_car.changeParts(14, 0);
            }
        }

        reflect_info();
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox1::SUPERCHARGER::Dummy
{
    function onActivate(context)
    {
        canChangeItem(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox1::BRAKE::OptionMenu
{
    function onValueChanged(context, index)
    {
        current_car.changeParts(1, index);
        reflect_info();
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox1::BRAKECONTROLLER::OptionMenu
{
    function onValueChanged(context, index)
    {
        current_car.changeParts(2, index);
        reflect_info();
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox1::BRAKECONTROLLER::Wrench
{
    function onActivate(context)
    {
        main::sound.play("ok");
        start_page(context, BrakeRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox2::SUSPENSION::OptionMenu
{
    function onValueChanged(context, index)
    {
        current_car.changeParts(3, index);
        reflect_info();
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox2::SUSPENSION::Wrench
{
    function onActivate(context)
    {
        main::sound.play("ok");
        start_page(context, SuspensionRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox2::GEAR::OptionMenu
{
    function onValueChanged(context, index)
    {
        current_car.changeParts(11, index);
        reflect_info();
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox2::GEAR::Wrench
{
    function onActivate(context)
    {
        main::sound.play("ok");
        start_page(context, GearRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox2::CLUTCH::OptionMenu
{
    function onValueChanged(context, index)
    {
        current_car.changeParts(21, index);
        reflect_info();
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox2::FLYWHEEL::OptionMenu
{
    function onValueChanged(context, index)
    {
        current_car.changeParts(22, index);
        reflect_info();
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox2::PROPELLERSHAFT::OptionMenu
{
    function onValueChanged(context, index)
    {
        current_car.changeParts(23, index);
        reflect_info();
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox2::DrivingAid::Wrench
{
    function onActivate(context)
    {
        main::sound.play("ok");
        start_page(context, AIDRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox3::Aero::Wrench
{
    function onActivate(context)
    {
        main::sound.play("ok");
        start_page(context, AeroRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox3::LSD::OptionMenu
{
    function onValueChanged(context, index)
    {
        current_car.changeParts(24, index);
        ScrollWindow::clip::space::VBox3::AYCC::OptionMenu.setIndex(context, 0);
        reflect_info();
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox3::LSD::Wrench
{
    function onActivate(context)
    {
        main::sound.play("ok");
        start_page(context, LSDRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox3::AYCC::OptionMenu
{
    function onValueChanged(context, index)
    {
        if (index == 0)
        {
            current_car.changeParts(24, 0);
        }
        else
        {
            current_car.changeParts(24, 5);
        }

        ScrollWindow::clip::space::VBox3::LSD::OptionMenu.setIndex(context, 0);
        reflect_info();
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox3::AYCC::Wrench
{
    function onActivate(context)
    {
        main::sound.play("ok");
        start_page(context, AYCCRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox3::DRIVETRAIN::OptionMenu
{
    function onValueChanged(context, index)
    {
        current_car.changeParts(10, index);
        reflect_info();
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox3::DRIVETRAIN::Wrench
{
    function onActivate(context)
    {
        main::sound.play("ok");
        start_page(context, DriveTrainRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ScrollWindow::clip::space::VBox3::Ballast::Wrench
{
    function onActivate(context)
    {
        main::sound.play("ok");
        start_page(context, BallastRoot);
        return EVENTRESULT_FILTER;
    }
}
