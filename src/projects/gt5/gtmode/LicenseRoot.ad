













module LicenseRoot
{
    hidden.visible = false;

    #include "LicenseData.ad"

    method open(context)
    {
        SequenceUtil::startPage(context, self);
    }

    method close(context)
    {
        PROJECT.history['LastPageName'] = "";
        PROJECT.history['LicenseRoot::CategoryID'] = nil;
        PROJECT.history['LicenseRoot::FocusIndex'] = nil;
        SequenceUtil::startPage(context, GTModeRoot);
    }

    method onInitialize(context)
    {
        LicenseUtil::initializeRecord();
        ROOT::ButtonHelpGT5.set(context, 
        [
            [ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "Component", "Enter")],
            [ButtonHelpGT5.getCancelButtonName(), context.translate(ROOT, "Component", "Cancel")],
        ]);

        context.pushEvent(main::menu::MFunctionEvent(postInitialize, context));

        ROOT::page_name::white::FadeActor.reverse = false;
        ROOT::page_name::white::FadeActor.reset();

        ROOT::page_name::black::FadeActor.reverse = false;
        ROOT::page_name::black::FadeActor.reset();

        LicenseSelect.hide(context, true);
        CategorySelect.hide(context, true);

        if (checkGameFlags())
        {
            PROJECT.history['LicenseRoot::FocusIndex'] = nil;

            CategorySelect.appear(context, true);
            context.pushEvent(main::menu::MFunctionEvent(onGameFlags, context));
        }
        else if (PROJECT.history['LicenseRoot::CategoryID'] == nil)
        {
            CategorySelect.appear(context, true);
            ROOT.setFocus(self.CategorySelect::Boads::HBox::B);
        }
        else
        {
            LicenseSelect.setCategoryID(context, PROJECT.history['LicenseRoot::CategoryID'], PROJECT.history['LicenseRoot::FocusIndex']);
            LicenseSelect.appear(context, true);

            ROOT::page_name::white::FadeActor.reverse = false;
            ROOT::page_name::white::FadeActor.start();
    
            ROOT::page_name::black::FadeActor.reverse = false;
            ROOT::page_name::black::FadeActor.start();
        }
    }

    method postInitialize(context)
    {
        SoundUtil::MenuBGMCrossfadeGroup("menu", 0.0, 3.0);
        self.openModeIntroduction(context);
    }

    method openModeIntroduction(context)
    {
        if (!GAME_STATUS.user_profile.game_flags.getFlag("INTRODUCTION", "LICENSE"))
        {
            context.wait(0.5);

            DialogUtil::openInformationDialog(context, context.translate(ROOT, "IntroductionGT5", "LICENSE"));
            GAME_STATUS.user_profile.game_flags.setFlag("INTRODUCTION", "LICENSE", true);
        }
    }

    function checkGameFlags()
    {
        var user_profile = GLOBAL_STATUS.user_profile;

        for (var i = 0; i < LicenseUtil::CATEGORY::MAX; i++)
        {
            var category_str = LicenseUtil::GetCategoryString(i);
            var category_result = user_profile.record.license.getCategoryResult(i);

            if (category_result == LicenseUtil::PRIZE::NONE)
                continue;

            if (category_result > LicenseUtil::PRIZE::NONE)
            {
                if (!user_profile.game_flags.getFlag("LICENSE_CATEGORY_CLEAR", category_str))
                    return true;
            }
        }

        return false;
    }

    method onGameFlags(context)
    {
        var user_profile = GLOBAL_STATUS.user_profile;

        for (var i = 0; i < LicenseUtil::CATEGORY::MAX; i++)
        {
            var category_id = i;
            var category_str = LicenseUtil::GetCategoryString(category_id);
            var category_result = user_profile.record.license.getCategoryResult(i);

            if (category_result == LicenseUtil::PRIZE::NONE)
                continue;

            if (category_result > LicenseUtil::PRIZE::NONE)
            {
                if (!user_profile.game_flags.getFlag("LICENSE_CATEGORY_CLEAR", category_str))
                {
                    var lang = main::pdistd::MLocale::getLanguage();
                    var path = "/sound_gt/guide/gt5/license/%s/%s_clear-%s".format(lang, lang, category_str);

                    SoundUtil::PlayStreamWithDelay(context, path, SoundUtil::GetNarrationVolume(), 1.0);
                    DialogUtil::openInformationDialog(context, context.translate(ROOT, "LicenseGT5", "CATEGORY_CLEAR_%{category_str}"));
                    user_profile.game_flags.setFlag("LICENSE_CATEGORY_CLEAR", category_str, true);

                    ActionLogUtil::licenseLevel(category_str);
                    SoundUtil::StopStream(context);
                }

                var next_category = category_id + 1;
                if (next_category < LicenseUtil::CATEGORY::MAX)
                {
                    ROOT::CategorySelect.unveil_animation(context, next_category, false);
                    var next_category_str = LicenseUtil::GetCategoryString(next_category);
                    ROOT.setFocus(self.CategorySelect::Boads::HBox[next_category_str]);
                }
                else
                {
                    ROOT.setFocus(self.CategorySelect::Boads::HBox[category_str]);
                }
            }
        }
    }
}

module LicenseRoot::CategorySelect
{
    attribute focused_category;
    attribute displayed_category;

    method appear(context, warp, focus_category)
    {
        self.insensitive = false;

        PROJECT::ignorePadEvent(true);

        MyHome.cancel_cb_func_ = nil;

        if (focus_category == nil)
            focus_category = LicenseUtil::CATEGORY::B;

        self.focused_category = focus_category;

        var effect_end = method(context) 
        {
            var category_str = LicenseUtil::GetCategoryString(self.focused_category);
            context.pushEvent(main::menu::MFunctionEvent(ROOT.setFocus, self.CategorySelect::Boads::HBox[category_str]));
            PROJECT::ignorePadEvent(false);
            self.Boads::MoveActor.on_effect_end = nil;
        };

        self.Info::FadeActor.reverse = false;
        self.Info::FadeActor.start();

        self.category::FadeActor.reverse = false;
        self.category::FadeActor.start();

        self.Boads::MoveActor.reverse = false;
        self.Boads::MoveActor.on_effect_end = self.*effect_end;
        self.Boads::MoveActor.start();

        if (warp)
        {
            self.Info.FadeActor.warp();
            self.Boads::MoveActor.warp();
        }
    }

    method hide(context, warp)
    {
        self.insensitive = true;
        ROOT.setFocus(nil);

        BalloonTip.reset_value();

        self.Info::FadeActor.reverse = true;
        self.Info::FadeActor.start();
        self.Boads::MoveActor.reverse = true;
        self.Boads::MoveActor.start();
        self.category::FadeActor.reverse = true;
        self.category::FadeActor.start();

        if (warp)
        {
            self.Info.FadeActor.warp();
            self.Boads::MoveActor.warp();
            self.category::FadeActor.warp();
        }
    }

    method unveil_animation(context, category_id, warp)
    {
        if (category_id < LicenseUtil::CATEGORY::A || category_id > LicenseUtil::CATEGORY::S)
            return;

        var sky_no = category_id + 1;
        var sky_img = self.Boads::SkyImages["sky%{sky_no}"];
        sky_img.FadeActor.start();
        if (warp)
            sky_img.FadeActor.warp();

        for (var i = LicenseUtil::CATEGORY::A; i < LicenseUtil::CATEGORY::MAX; i++)
        {
            if (i <= category_id)
            {
                var category_str = LicenseUtil::GetCategoryString(i);
                self.Boads::HBox[category_str]["Level"]["FadeActor"].start();
                self.Boads::HBox[category_str]["Veil"]["VeilActor"].start();

                if (warp)
                    self.Boads::HBox[category_str]["Veil"]["VeilActor"].warp();
            }
        }
    }

    method onInitialize(context)
    {
        self.Info.clearWindow(context);
        self.category::FadeActor.reset();

        for (var it = self.Boads::SkyImages.first; it != nil; it = it.next_widget)
        {
            if (it["FadeActor"] != nil)
                it.FadeActor.reset();
        }

        for (var i = LicenseUtil::CATEGORY::A; i < LicenseUtil::CATEGORY::MAX; i++)
        {
            var category_str = LicenseUtil::GetCategoryString(i);
            self.Boads::HBox[category_str]["Level"]["FadeActor"].reset();
            self.Boads::HBox[category_str]["Level"]["value"].text = LicenseUtil::getCategoryNeedLevel(i);
            self.Boads::HBox[category_str]["Veil"]["VeilActor"].reset();
        }

        for (var i = LicenseUtil::CATEGORY::S; i > LicenseUtil::CATEGORY::B; i--)
        {
            if (LicenseUtil::CaniEnterCategory(i, GAME_STATUS))
            {
                var category_str = LicenseUtil::GetCategoryString(i - 1);
                if (GLOBAL_STATUS.user_profile.game_flags.getFlag("LICENSE_CATEGORY_CLEAR", category_str))
                {
                    ROOT::CategorySelect.unveil_animation(context, i, true);
                    break;
                }
            }
        }
    }

    method onFinalize(context)
    {
        self.Info.clearWindow(context);
        self.focused_category = nil;
        self.displayed_category = nil;
    }

    method onFocusEnter(context, event)
    {
        var category_str = event.widget.name;
        var category_id = LicenseUtil::CATEGORY[category_str];
        var category_name = LicenseUtil::GetCategoryName(context, ROOT, category_id);

        BalloonTip.set_value(context, event.widget, category_name, 30);

        if (self.displayed_category != category_id)
        {
            self.category::FadeActor.reset();
            self.category.image_path = "image/gt5/license/img_%{category_str}_3d.dds";
            self.category::FadeActor.start();

            self.setInfo(context, category_id);
            self.displayed_category = category_id;
        }

        return EVENTRESULT_FILTER;
    }

    method onActivate(context, event)
    {
        main::sound.play("ok");

        var category_str = event.widget.name;
        var category_id = LicenseUtil::CATEGORY[category_str];

        if (!LicenseUtil::CaniEnterCategory(category_id, GAME_STATUS))
        {
            main::sound.play("disable");

            var category_name = LicenseUtil::GetCategoryName(context, ROOT, category_id);
            var prev_category_name = LicenseUtil::GetCategoryName(context, ROOT, category_id - 1);
            var message = context.translate(ROOT, "CANNOT_SELECT_THIS_CATEGORY").build(category_name, prev_category_name);
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, message);
            return EVENTRESULT_FILTER;
        }

        var need_level = LicenseUtil::getCategoryNeedLevel(category_id);
        var current_a_level = GAME_STATUS.user_profile.getAspecLevel();
        var current_b_level = GAME_STATUS.user_profile.getBspecLevel();
        if (current_a_level < need_level && current_b_level < need_level)
        {
            main::sound.play("disable");
            var msg = context.translate(ROOT, "MESSAGE_YOU_DONT_HAVE_ENOUGH_LEVEL").build(need_level);
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
            return EVENTRESULT_FILTER;
        }

        self.hide(context, false);

        LicenseSelect.setCategoryID(context, category_id);
        LicenseSelect.appear(context, false);

        ROOT::page_name::white::FadeActor.reverse = false;
        ROOT::page_name::white::FadeActor.start();

        ROOT::page_name::black::FadeActor.reverse = false;
        ROOT::page_name::black::FadeActor.start();
        return EVENTRESULT_FILTER;
    }

    method onCancel(context, event)
    {
        PROJECT::playBackHomeSound();
        close(context);
        return EVENTRESULT_FILTER;
    }

    method setInfo(context, category_id)
    {
        self.Info.clearWindow(context);

        var license_count = LicenseUtil::GetLicenseCountOfCategory(category_id);
        for (var i = 0; i < license_count; ++i)
        {
            var item = hidden.CategoryInfoItem.doCopy();
            var license_index = LicenseUtil::GetIndex(category_id, i);
            var license_id = LicenseUtil::GetLicenseId(license_index);
            |var result, var best_time| = main::GLOBAL_STATUS.user_profile.record.license.getResult(license_id);

            switch (result)
            {
                case LicenseUtil::PRIZE::GOLD:
                    item.Icon::none.visible = false;
                    item.Icon::trophy.image_path = "image/gt5/icon/trophy_gold.dds";
                    item.Icon::trophy.visible = true;
                    break;

                case LicenseUtil::PRIZE::SILVER:
                    item.Icon::none.visible = false;
                    item.Icon::trophy.image_path = "image/gt5/icon/trophy_silver.dds";
                    item.Icon::trophy.visible = true;
                    break;

                case LicenseUtil::PRIZE::BRONZE:
                    item.Icon::none.visible = false;
                    item.Icon::trophy.image_path = "image/gt5/icon/trophy_bronze.dds";
                    item.Icon::trophy.visible = true;
                    break;

                default:
                    item.Icon::trophy.visible = false;
                    if (i == license_count - 1)
                        item.Icon::none.image_path = "image/gt5/license/pict_test.dds";
                    else
                        item.Icon::none.image_path = "image/gt5/license/pict_allow.dds";
                    item.Icon::none.visible = true;
                    break;
            }

            item.license_num.text = "%d :".format(i + 1);
            item.description.text = context.translate(ROOT, "LicenseGT5", "%03dt".format(license_index + 1));
            self.Info.appendChild(context, item);

            item.FadeActor.setStartDuration(0, 0.3 + (i * 0.05));
            item.FadeActor.restart();
        }
    }

    method onKeyPress(context, event)
    {
        if (pdiext::isQABuild() && event.keysym == CELL_PAD_CTRL_START)
        {
            main::sound.play("next");

            var category_str = event.widget.name;
            var category_id = LicenseUtil::CATEGORY[category_str];
            var license = main::GLOBAL_STATUS.user_profile.record.license;
            var count = LicenseUtil::GetLicenseCountOfCategory(category_id);

            for (var i = 0; i < count; ++i)
            {
                var index = LicenseUtil::GetIndex(category_id, i);
                var license_id = LicenseUtil::GetLicenseId(index);
                |var result, var best_time, var best_score, var best_order| = license.getResult(license_id);

                switch (result)
                {
                    case LicenseUtil::PRIZE::NONE:
                        result = LicenseUtil::PRIZE::BRONZE;
                        break;

                    case LicenseUtil::PRIZE::BRONZE:
                        result = LicenseUtil::PRIZE::SILVER;
                        break;

                    case LicenseUtil::PRIZE::SILVER:
                        result = LicenseUtil::PRIZE::GOLD;
                        break;
                }

                var meta_data = sMetaData["%03d".format(license_id)];
                var event_info = EventInfo(meta_data);
                if (event_info != nil)
                {
                    license.updateResult(license_id, result, event_info.eval_condition_type,
                        best_time - 1, best_score + 1, result);
                }
            }

            self.setInfo(context, category_id);
            return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }
}

module LicenseRoot::LicenseSelect
{
    attribute finder_;
    attribute category_id_;
    attribute focused_license_id_;

    method setCategoryID(context, category_id, focus_index)
    {
        self.category_id_ = category_id;

        if (self.finder_ != nil)
        {
            var initial_data = makeInitialData(context, category_id, focus_index);
            self.finder_.replaceFolder(context, initial_data);
        }

        var category_str = LicenseUtil::GetCategoryString(self.category_id_);
        self.Info::category_img.image_path = "image/gt5/license/img_%{category_str}.dds";
        self.Info::BG::Clip::CourseImageL::ParallelActor.reset();
        self.Info::BG::CourseImageR::ParallelActor.reset();
        
        var color_obj = hidden::CategoryColors[category_str].getColor(0);
        self.Info::BG::red1.setColor(color_obj);
        self.Info::BG::red2.setColor(color_obj);
        self.Info::BG::red3.setColor(color_obj);
        self.Info::BG::Target::label.text = "";
        self.Info::BG::Best::label.text = "";

        self.Info::car_thumb.image_path = "";
        self.Info::title.text = "";
        self.Info::number.text = "";
        self.Info::car_name.text = "";
        self.Info::manufacturer_name.text = "";
        self.Info::course_name.text = "";
        self.Info::target.text = "";
        self.Info::best.text = "";
        self.Info::target1.text = "";
        self.Info::target2.text = "";
        self.Info::target3.text = "";
        self.Info::title.text = "";
        self.Info::category_name.text = "";
        self.Info::Description::ScrolledWindow::clip::space::TextFace.text = "";
    }

    method appear(context, warp)
    {
        self.insensitive = false;

        PROJECT::ignorePadEvent(true);

        MyHome.cancel_cb_func_ = cb_canceled_license;

        var effect_end = method(context) 
        {
            context.pushEvent(main::menu::MFunctionEvent(self.finder_.onFocus, context, LicenseRoot));
            PROJECT::ignorePadEvent(false);
            self.LicenseList::MoveActor.on_effect_end = nil;
        };

        self.info_cover::FadeActor.reverse = false;
        self.info_cover::FadeActor.start();

        self.LicenseList::MoveActor.reverse = false;
        self.LicenseList::MoveActor.on_effect_end = self.*effect_end;
        self.LicenseList::MoveActor.start();

        self.ScaleActor.reverse = false;
        self.ScaleActor.start();

        if (warp)
        {
            self.info_cover.FadeActor.warp();
            self.LicenseList::MoveActor.warp();
            self.ScaleActor.warp();
        }
    }

    method hide(context, warp)
    {
        self.insensitive = true;
        ROOT.setFocus(nil);

        BalloonTip.reset_value();

        self.info_cover::FadeActor.reverse = true;
        self.info_cover::FadeActor.start();
        self.LicenseList::MoveActor.reverse = true;
        self.LicenseList::MoveActor.start();
        self.ScaleActor.reverse = true;
        self.ScaleActor.start();

        if (warp)
        {
            self.info_cover.FadeActor.warp();
            self.LicenseList::MoveActor.warp();
            self.ScaleActor.warp();
        }
    }

    method onInitialize(context)
    {
        self.focused_license_id_ = -1;
        var dummy_initial_data = UIKitProject::FinderRoot.InitialData(UIKitProject::FinderRoot.makeCandidates([]));

        self.finder_ = UIKitProject::FinderRoot::setCopy(context, self.LicenseList::Composite, dummy_initial_data, false);
        
        var description = self.Info::Description;
        description.ScrolledWindow::clip.scroll_mode = SCROLL_MODE_MANUAL;

        var adj = main::menu::MAdjustment();
        description.Scrollbar::VScrollbar.adjustment = adj;
        description.ScrolledWindow::clip.v_adjustment = adj;
        description.ScrolledWindow::clip.space.y = 0.0;
        description.ScrolledWindow::clip.manual_target_y = 0.0;
        hide(context, true);
    }

    method onFinalize(context)
    {
        self.focused_license_id_ = -1;
        if (self.finder_ != nil)
        {
            var parent = self.finder_.parent;
            parent.removeChild(context, self.finder_);
        }
    }

    method cb_selected_license(context, folder_data, close, arg)
    {
        var candidate_data = folder_data.getItemData();
        |var license_id, var license_index, var category_index| = candidate_data.value_;

        if (!LicenseUtil::CaniEnterEvent(license_id, GAME_STATUS))
        {
            main::sound.play("disable");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "CANNOT_SELECT_THIS_LICENSE"));
            return;
        }

        main::sound.play("next");

        var fst = main::pdistd::ReadFile("textdata/gt5/license/l%03d.xml".format(license_id));
        var xml_data = fst["buffer"];
        if (xml_data != nil)
        {
            var gp_list = GameParameterUtil::parseXML(xml_data);
            if (gp_list.size <= 0)
                main::sound.play("disable");

            var gp = gp_list[0];
            gp.game_id = license_id;
            PROJECT.history['LicenseRoot::CategoryID'] = self.category_id_;
            PROJECT.history['LicenseRoot::FocusIndex'] = category_index;
            PROJECT.history['LastPageName'] = ROOT.name;
            main::GLOBAL_STATUS.user_profile.context.license_id = license_id;

            var strlog = "GL=%d:GU=%s".format(license_id, main::PDINetwork.getClientName());
            main::Grim2.requestPutLog(strlog);

            {
                var category_str = LicenseUtil::GetCategoryString(self.category_id_);
                var title = context.translate(ROOT, "%{category_str}-%{category_index + 1}");
                var caption = context.translate(ROOT, "LicenseGT5", "%03dt".format(license_index + 1));

                if (gp.event.reward.prize_table.size == 0)
                    gp.event.reward.prize_table.resize(3);

                var prize_table = Array(gp.event.reward.prize_table.size);
                for (var i = 0; i < gp.event.reward.prize_table.size; ++i)
                    prize_table[i] = gp.event.reward.prize_table[i];

                var eval_condition_type = gp.event.eval_condition.type;
                var eval_condition_data = [gp.event.eval_condition.gold,
                    gp.event.eval_condition.silver,
                    gp.event.eval_condition.bronze];

                var data = CursorProject::LoadingRoot::LicenseData(gp, title, caption, prize_table, eval_condition_type, eval_condition_data);
                CursorProject::LoadingRoot.setData(data);
            }
            GameParameterUtil::executeEvent(context, gp, GAME_STATUS);
        }
    }

    method cb_canceled_license(context, folder_data, func_popup_close)
    {
        main::sound.play("cancel");
        self.focused_license_id_ = -1;
        PROJECT.history['LicenseRoot::FocusIndex'] = 0;
        self.hide(context, false);
        CategorySelect.appear(context, false, self.category_id_);

        ROOT::page_name::white::FadeActor.reverse = true;
        ROOT::page_name::white::FadeActor.start();

        ROOT::page_name::black::FadeActor.reverse = true;
        ROOT::page_name::black::FadeActor.start();
    }

    method cb_focused_license(context, candidate_data, item_w, arg)
    {
        |var license_id, var license_index, var category_index| = candidate_data.value_;
        if (self.focused_license_id_ == license_id)
            return;

        |var result, var best_time, var best_score, var best_order| = GLOBAL_STATUS.user_profile.record.license.getResult(license_id);
        var category_str = LicenseUtil::GetCategoryString(self.category_id_);

        self.Info::title.text = context.translate(ROOT, "LicenseGT5", "%03dt".format(license_index + 1));

        var description_text = context.translate(ROOT, "LicenseGT5", "%03dd".format(license_index + 1));
        var scrollclip = self.Info::Description::ScrolledWindow::clip;
        scrollclip.space::TextFace.text = description_text;
        scrollclip.manual_target_y = 0.0;
        scrollclip.space.y = 0.0;

        self.Info::number.text = context.translate(ROOT, "%{category_str}-%{category_index + 1}");
        self.Info::category_name.text = context.translate(ROOT, "LicenseGT5", "CATEGORY_%s_NO_AGIAN_LANGUAGE".format(category_str));

        var meta_data = sMetaData["%03d".format(license_id)];
        var event_info = EventInfo(meta_data);
        if (event_info != nil)
        {
            var type = event_info.eval_condition_type;
            if (type == main::gtengine::EvalType::TIME)
            {
                self.Info::BG::Best::label.text = context.translate(ROOT, "LicenseGT5", "BEST_TIME");
                self.Info::best.text = main::pdiext::GetRaceTimeString(best_time);

                var target_text = "";
                for (var i = 0; i < 3; i++)
                {
                    var target_no = i + 1;
                    var target_condition = event_info.eval_condition_data[i];

                    if (target_condition <= 0 || target_condition == main::pdiext::MAX_LAPTIME1000)
                        self.Info["target%{target_no}"].text = main::pdiext::GetRaceTimeString(main::pdiext::MAX_LAPTIME1000);
                    else
                    {
                        var target_text =  main::pdiext::GetRaceTimeString(target_condition);
                        self.Info["target%{target_no}"].text = target_text;
                    }
                }

                self.Info::BG::Target::label.text = context.translate(ROOT ,"LicenseGT5", "TARGET_TIME");
                self.Info::target.text = target_text;
            }
            else if (type == main::gtengine::EvalType::ORDER)
            {
                self.Info::BG::Best::label.text = context.translate(ROOT, "LicenseGT5", "BEST_POSITION");
                if (result >= 0 && result < event_info.eval_condition_data.size && event_info.eval_condition_data[result] > 0)
                    self.Info::best.text = OrdinalUtil::getOrdinalNumber(context, ROOT, best_order);
                else
                    self.Info::best.text = "--";

                var target_text = "";
                for (var i = 0; i < 3; i++)
                {
                    var target_no = i + 1;
                    var target_condition = event_info.eval_condition_data[i];

                    if (target_condition <= 0)
                        self.Info["target%{target_no}"].text = "--";
                    else
                    {
                        target_text = OrdinalUtil::getOrdinalNumber(context, ROOT, target_condition);
                        self.Info["target%{target_no}"].text = target_text;
                    }
                }

                self.Info::BG::Target::label.text = context.translate(ROOT ,"LicenseGT5", "TARGET_POSITION");
                self.Info::target.text = target_text;
            }
            else
                ;

            var cp = event_info.entry_car;
            var car_label = cp.getCarLabel();
            var course_label = gtengine::MSpecDB::getCourseLabel(event_info.course);
            var course_info = CourseData::getCourseInfo(event_info.course);

            self.Info::car_name.text = gtengine::MSpecDB::getCarShortName(cp.getCarCode());
            self.Info::manufacturer_name.text = context.translate(ROOT, "TunerName", gtengine::MSpecDB::getTunerLabel(cp.getCarCode()));
            self.Info::course_name.text = context.translate(ROOT, "CourseName", course_info.name);

            var tip_text = "%s : %s".format(self.Info::number.text, self.Info::course_name.text);
            BalloonTip.set_value(context, item_w, tip_text, 45);

            var car_image_path = "piece/license_car/%s_cmp.img".format(car_label);
            if (self.Info::car_thumb.image_path != car_image_path)
            {
                var car_delay_load_complete = method (context)
                {
                    self.Info::car_thumb::FadeActor.restart();
                    self.Info::car_thumb.on_delay_load_complete = nil;
                };

                self.Info::car_thumb.image_path = car_image_path;
                self.Info::car_thumb.on_delay_load_complete = self.*car_delay_load_complete;
                self.Info::car_thumb::FadeActor.reset();
            }
            else
                self.Info::car_thumb::FadeActor.restart();

            var course_image_path = "piece/license_course/%s.img".format(course_label);
            if (self.Info::BG::CourseImageR.image_path != course_image_path)
            {
                var course_delay_load_complete = method (context)
                {
                    self.Info::BG::CourseImageR::ParallelActor.restart();
                    self.Info::BG::Clip::CourseImageL::ParallelActor.restart();
                    self.Info::BG::CourseImageR.on_delay_load_complete = nil;
                };

                self.Info::BG::Clip::CourseImageL.image_path = course_image_path;
                self.Info::BG::Clip::CourseImageL::ParallelActor.reset();

                self.Info::BG::CourseImageR.image_path = course_image_path;
                self.Info::BG::CourseImageR.on_delay_load_complete = self.*course_delay_load_complete;
                self.Info::BG::CourseImageR::ParallelActor.reset();
            }
            else
            {
                self.Info::BG::CourseImageR::ParallelActor.restart();
                self.Info::BG::Clip::CourseImageL::ParallelActor.restart();
            }
        }

        self.focused_license_id_ = license_id;
    }

    method cb_init_item(context, candidate_data, item_w, arg)
    {
        |var license_id, var license_index, var category_index| = candidate_data.value_;
        |var result, var best_time| = main::GLOBAL_STATUS.user_profile.record.license.getResult(license_id);
        var meta_data = sMetaData["%03d".format(license_id)];
        var event_info = EventInfo(meta_data);
        if (event_info != nil)
        {
            var course_code = event_info.course;
            var course_info = CourseData::getCourseInfo(course_code);
            item_w.init(context, result, course_info);
        }
    }

    method cb_on_key_press_license(context, event, item_w, candidate_data)
    {
        if (pdiext::isQABuild() && event.keysym == CELL_PAD_CTRL_START)
        {
            main::sound.play("next");

            var license = main::GLOBAL_STATUS.user_profile.record.license;
            |var license_id, var license_index, var category_index| = candidate_data.value_;
            |var result, var best_time, var best_score, var best_order| = license.getResult(license_id);

            var rank = "GOLD";
            switch (result)
            {
                case LicenseUtil::PRIZE::NONE:
                    result = LicenseUtil::PRIZE::BRONZE;
                    rank = "BRONZE";
                    break;

                case LicenseUtil::PRIZE::BRONZE:
                    result = LicenseUtil::PRIZE::SILVER;
                    rank = "SILVER";
                    break;

                case LicenseUtil::PRIZE::SILVER:
                    result = LicenseUtil::PRIZE::GOLD;
                    rank = "GOLD";
                    break;
            }

            var meta_data = sMetaData["%03d".format(license_id)];
            var event_info = EventInfo(meta_data);
            if (event_info != nil)
            {
                license.updateResult(license_id, result, event_info.eval_condition_type,
                    best_time - 1, best_score + 1, result);
            }

            self.cb_init_item(context, candidate_data, item_w, nil);
            self.cb_focused_license(context, candidate_data, item_w, nil);
            
            return EVENTRESULT_FILTER;
        }

        var scrollclip = self.Info::Description::ScrolledWindow::clip;
        var space = scrollclip.space;
        var textface = space.TextFace;
        var line_height = textface.line_height;

        var status = 0;
        if (event.keysym == CELL_PAD_CTRL_L3_UP)
        {
            if (scrollclip.manualTargetIncY(line_height))
                return EVENTRESULT_STOP;
        }

        if (event.keysym == CELL_PAD_CTRL_L3_DOWN)
        {
            if (scrollclip.manualTargetIncY(-line_height))
                return EVENTRESULT_STOP;
        }

        return EVENTRESULT_CONTINUE;
    }

    method makeInitialData(context, category_id, focus_index)
    {
        var license_count = LicenseUtil::GetLicenseCountOfCategory(category_id);
        var base_license_index = LicenseUtil::GetIndex(category_id, 0);
        var candidates = Array(license_count);

        for (var category_index = 0; category_index < license_count; ++category_index)
        {
            var license_index = base_license_index + category_index;
            var license_id = LicenseUtil::GetLicenseId(license_index);
            candidates[category_index] = UIKitProject::FinderRoot::CandidateData([license_id, license_index, category_index]);
        }

        if (focus_index == nil)
            focus_index = 0;

        var initial_data = UIKitProject::FinderRoot::InitialData(candidates);
        initial_data.view_type_ = UIKitProject::FinderRoot::ViewType::SCROLL_H;
        initial_data.extended_item_ = hidden::LicenseItem;
        initial_data.import_iconbox_parameter_ = self.LicenseList::Composite::IconBox;
        initial_data.cb_init_item_ = self.cb_init_item;
        initial_data.cb_on_activate_ = self.cb_selected_license;
        initial_data.cb_on_cancel_ = self.cb_canceled_license;
        initial_data.cb_focus_enter_ = self.cb_focused_license;
        initial_data.cb_on_key_press_ = self.cb_on_key_press_license;
        initial_data.h_scrollbar_ = self.LicenseList::HScrollbar;
        initial_data.focus_index_ = focus_index;
        initial_data.activate_sound_ = nil;
        return initial_data;
    }
}

SCALE_WIDGET_SDTV(LicenseRoot::LicenseSelect::Info::Description::ScrolledWindow::clip::space::TextFace, 2.6);
    
module LicenseRoot::hidden::LicenseItem
{
    function onLoad(context)
    {
        Laps::TextFace.text = "";
        course_logo.image_path = "";
        course_map.image_path = "";
        Laps.visible = false;
        Record::TextFace.visible = false;
        Record::ImageFace.visible = false;
    }

    method init(context, result, course_info)
    {
        self.course_logo.image_path = "piece/course_logo_M/%{course_info.logo}.img";
        self.course_map.image_path = "piece/course_map_M/%{course_info.map}.img";
    
        var datetime_hour = 12;
        if (course_info.code == gtengine::MSpecDB::getCourseCode("route5")) 
            datetime_hour = 24;
    
        self.Weather.setup_arcade(context, gtengine::DecisiveWeather::SUNNY, datetime_hour, 0);
    
        switch (result)
        {
            case 0:
                self.Record::TextFace.text = "";
                self.Record::TextFace.visible = false;
                self.Record::ImageFace.image_path = "image/gt5/icon/trophy_gold.dds";
                self.Record::ImageFace.visible = true;
                break;
            
            case 1:
                self.Record::TextFace.text = "";
                self.Record::TextFace.visible = false;
                self.Record::ImageFace.image_path = "image/gt5/icon/trophy_silver.dds";
                self.Record::ImageFace.visible = true;
                break;
        
            case 2:
                self.Record::TextFace.text = "";
                self.Record::TextFace.visible = false;
                self.Record::ImageFace.image_path = "image/gt5/icon/trophy_bronze.dds";
                self.Record::ImageFace.visible = true;
                break;
        
            default:
                if (result < 0)
                    self.Record::TextFace.text = "";
                else
                    self.Record::TextFace.text = result + 1;
        
                self.Record::TextFace.visible = true;
                self.Record::ImageFace.image_path = "";
                self.Record::ImageFace.visible = false;
                break;
        }
    }
}

module LicenseRoot::MyHome
{
    attribute cancel_cb_func_;

    method appear(context, warp)
    {
        self.insensitive = false;
        self.FadeActor.reverse = false;
        self.FadeActor.start();

        if (warp)
            self.FadeActor.warp();
    }
    method hide(context, warp)
    {
        self.insensitive = true;
        self.FadeActor.reverse = true;
        self.FadeActor.start();

        if (warp)
            self.FadeActor.warp();
    }

    method onActivate(context)
    {
        PROJECT::playBackHomeSound();
        close(context);
        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        if (cancel_cb_func_ != nil)
            self.cancel_cb_func_(context);
        else
        {
            PROJECT::playBackHomeSound();
            close(context);
        }

        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context, event)
    {
        BalloonTip.set_value(context, event.widget, context.translate(ROOT, "MyHome", "MYHOME_BACK_BUTTON"), 20);
        return EVENTRESULT_STOP;
    }

    method onFocusLeave(context, event)
    {
        BalloonTip.reset_value();
        return EVENTRESULT_STOP;
    }
}