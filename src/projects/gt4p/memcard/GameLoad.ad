module PROJECT::ROOT
{
	function setActor(widget)
	{
		widget.actor = main::menu::MBlinkActor(widget);
		widget.actor.period = 0.25;
	}
	
	setActor(Yes::imgf);
	setActor(No::imgf);
	
	static currentFree = -2;
	static manager = nil;
	static watcher = nil;

	function onCancel(context, item)
	{
		main::sound.play("cancel");
		exitMenu(context);
		return EVENTRESULT_FILTER;
	}

	function exitMenu(context)
	{
		manager = nil;
	
		context.finish();
	
		context.transition = main::menu::MColorTransition();
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		main::game.next_sequence = "menu";
		main::game.next_menu_project = main::game.last_menu_project;
	}

	function onInitialize(context)
	{
		manager = main::menu::MMemoryCardManager("MODE_LOAD_GAME");
		ROOT.setFocus(Yes);
	}

	function onCheck(context)
	{
		if (manager.isConnect())
		{
			if (manager.isFormat())
			{
				var prevFree = free;
				currentFree = manager.free;
	
				if (currentFree != prevFree)
					free.text = "%{currentFree}KB"; // COMPILER NOTE: Empty string in interpolation
			}
			else
			{
				free.text = StoreHouse::unformat.value;
				currentFree = -1;
			}
		}
		else
			free.text = StoreHouse::nocard_game_save_load.value;
	}

	function doLoad(context)
	{
		ProgressDialog::open(context, StoreHouse::reading.value);
	
		var file = manager.getNewFile();
		var r = file.load(manager, ProgressDialog::setTarget);
	
		print "load result %{r}\n";
	
		switch (r)
		{
			case "DEVICE_ERROR":
				print "Device error.";
				OKDialog::open(context, oksound, cancelsound, StoreHouse::read_error.value);
				break;

			case "INVALID_FILE":
				print("invalid file error.");
				OKDialog::open(context, oksound, cancelsound, StoreHouse::invalid_file.value);
				break;

			default:
				manager.clearAutoSaveDisabled();
				OKDialog::open(context, oksoundexit, oksoundexit, StoreHouse::load_complete.value);
				ProgressDialog::close(context);
				context.sync(0.75);
				oksoundexit(context);
				return;
				break;
		}

		ProgressDialog::close(context);
	}

	function oksound(context)
	{
		main::sound.play("ok");
	}

	function cancelsound(context)
	{
		main::sound.play("cancel");
	}

	function oksoundexit(context)
	{
		main::sound.play("ok");
		exitMenu(context);
	}
}

module PROJECT::ROOT::Yes
{
	function onActivate(context, item)
	{
		main::sound.play("ok");
	
		if (manager.isConnect())
		{
			if (manager.isFormat())
			{
				var file = manager.getNewFile();
				var r = file.isExist(manager);
	
				if (r == false)
				{
					doLoad(context);
				}
				else if (r == true)
				{
					OKDialog::open(context, oksound, nil, StoreHouse::no_gt4pfile.value);
				}
				else
					OKDialog::open(context, oksound, nil, StoreHouse::read_error.value);
			}
			else
				OKDialog::open(context, oksound, nil, StoreHouse::no_gt4pfile.value);
		}
		else
		{
			OKDialog::open(context, oksound, nil, StoreHouse::nocard.value);
		}
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::No
{
	function onActivate(context, item)
	{
		main::sound.play("cancel");
		exitMenu(context);
		return EVENTRESULT_FILTER;
	}
}