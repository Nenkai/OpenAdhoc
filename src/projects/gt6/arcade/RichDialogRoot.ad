













module ROOT
{
    hidden.visible = false;

    attribute result_;
    attribute modal_;
    attribute args_;

    class CarButton
    {
        attribute garage_car;
        attribute cp;

        method __init__(garage_car, cp)
        {
            self.garage_car = garage_car;
            self.cp = cp;
        }
    }

    class RidingCarButton : CarButton
    {
        method __init__()
        {
            var garage = GAME_STATUS.user_profile.garage;
            var cp;

            var garage_car;
            if (garage.getRidingGarageId() != gtengine::MSpecDB::NO_CODE)
            {
                var garage_id = garage.getRidingGarageId();
                garage_car = garage.referGarageCar(garage_id);
                cp = garage.getRidingCar();
            }

            __super__::__init__(garage_car, cp);
        }
    }

    function open(context, page_title, button_list, default_focus_value, image_path, is_single_play, progress = true)
    {
        var dialog = ROOT.doCopy();
        dialog.context_number = context.context_number;

        dialog.Pane::Icon.image_path = is_single_play != false ? "/piece/gt6/home/arcade_single_s.img" : "/piece/gt6/home/arcade_multi_s.img";
        return dialog._open(context, page_title, button_list, default_focus_value, image_path, progress);
    }

    method _open(context, page_title, button_list, default_focus_value, image_path, progress)
    {
        self.args_ = [
            page_title, button_list, default_focus_value, image_path, progress
        ];

        self.result_ = nil;

        self.modal_ = main::SequenceUtil::ModalPage(context, self);
        self.modal_.open();
        return self.result_;
    }

    method abort(context)
    {
        self.close(context);
    }

    method setupOpenAnimation(context, progress)
    {
        var actor;
        if (progress)
        {
            self.Pane::CloseActor.stop();
            actor = self.Pane::OpenActor;
            actor.forward();
        }
        else
        {
            self.Pane::OpenActor.stop();
            actor = self.Pane::CloseActor;
            actor.backward();
        }

        return actor;
    }

    method setupActivateAnimation(context)
    {
        self.Pane::OpenActor.stop();
        var actor = self.Pane::CloseActor;
        actor.forward();
        return actor;
    }

    method setupCancelAnimation(context)
    {
        self.Pane::CloseActor.stop();
        var actor = self.Pane::OpenActor;
        actor.backward();
        return actor;
    }

    method close(context, active_close = false)
    {
        if (self.modal_ != nil)
        {
            context.disableInput();
            ROOT.setFocus(nil);

            var actor;
            if (active_close)
            {
                actor = self.setupActivateAnimation(context);
            }
            else
            {
                actor = self.setupCancelAnimation(context);
            }

            actor.restart();
            var delay_time = actor.Opacity.total_time;
            Thread::Sleep(delay_time);

            self.modal_.close();
            self.modal_ = nil;

            context.enableInput();
        }
    }

    method active_close(context)
    {
        self.close(context, true);
    }

    method onInitialize(context)
    {
        |var page_title, var button_list, var default_focus_value, var image_path, var progress| = self.args_;

        self.Pane::label.text = page_title;
        self.Pane::VBox.clearWindow(context);

        var focus_w;

        for (var i = 0; i < button_list.size; i++)
        {
            var button = button_list[i];
            var w;

            if (button[0].isInstanceOf(CarButton))
            {
                var garage_car = button[0].garage_car;
                var cp = button[0].cp;

                if (cp == nil)
                    continue;

                w = hidden::CarItem.doCopy();
                w.Thumbnail.image_path = GarageUtil::Thumbnail::getPath(garage_car.garage_id, 
                    GarageUtil::Thumbnail::Type::Garage,
                    GarageUtil::Thumbnail::Size::L);

                w.Name.text = gtengine::MSpecDB::getCarShortName(cp.getCarCode());
                w.NameF.text = w.Name.text;
                w.defineAttribute("tool_tip", button[1]);
                w.value = button[2];
                w.sound = button.size > 3 ? button[3] : nil;
                w.insensitive = !gSequenceCondition.checkEnableGarageCar(garage_car);
            }
            else
            {
                w = hidden::Item.doCopy();
                w.label.text = manager.translate("CommonArcadeMode", button[0]);
                w.labelF.text = w.label.text;
                w.defineAttribute("tool_tip", button[1]);
                w.value = button[2];
                w.sound = button.size > 3 ? button[3] : nil;
            }

            self.Pane::VBox.appendChild(context, w);
            if (default_focus_value == button[2])
                focus_w = self.Pane::VBox.getChild(i);
        }

        if (focus_w == nil)
        {
            focus_w = self.Pane::VBox.first_window;
        }

        context.disableInput();
        context.cursor_visible = false;
        ROOT.setFocus(focus_w);

        var actor = self.setupOpenAnimation(context, progress);
        actor.restart();
        actor.on_effect_end = function(context)
        {
            actor.on_effect_end = nil;
            context.cursor_visible = true;
            context.enableInput();
        };

        if (image_path != nil)
        {
            self.Pane::ImageFace.from_disk = image_path.find(".img") != -1;
            self.Pane::ImageFace.image_path = image_path;
            self.Pane::ImageFace.visible = true;
        }
        else
        {
            self.Pane::ImageFace.image_path = "";
            self.Pane::ImageFace.visible = false;
        }

        self.Pane::VBox::Tip.text = "";
        self.ToolTip::tip.remove();
    }

    method onActivate(context, event)
    {
        var w = event.widget;

        sound.play(w.sound != nil ? w.sound : "ok");

        if (w.sound == "next")
            SoundUtil::BGMStop();

        self.result_ = w.value;
        self.active_close(context);

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        sound.play("cancel");
        self.result_ = nil;
        self.close(context);

        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context, event)
    {
        var w = event.widget;
        if (w.defined("tool_tip"))
        {
            self.Pane::VBox::Tip::ScalarInterpolator.restart();
            self.Pane::VBox::Tip.text = manager.translate("CommonArcadeMode", w.tool_tip);
        }
        else
        {
            self.Pane::VBox::Tip.text = "";
        }

        return EVENTRESULT_STOP;
    }

    module hidden::Item
    {
        attribute value;
        attribute sound;
    }

    module hidden::CarItem
    {
        attribute value;
        attribute sound;
    }
}