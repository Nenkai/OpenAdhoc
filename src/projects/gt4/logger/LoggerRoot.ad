module PROJECT::ROOT
{
	static progress = nil;
	static logctrl = nil;
	static analyzed = nil;
	static canceled = nil;

	function onInitialize(context)
	{
		logctrl = main::menu::MLoggerControl();
		progress = main::menu::MProgress();
		logctrl.load_track = -1;

		TrackA::CarName.text = logctrl.getCarName(0);
		TrackA::CarName.abbreviate();
		TrackB::CarName.text = logctrl.getCarName(1);
		TrackB::CarName.abbreviate();

		TrackA::Power.text = logctrl.getPower(0);
		TrackB::Power.text = logctrl.getPower(1);

		logctrl.setCourseMap(Logger::CourseMap);
		logctrl.setTotalTime(0, TrackA::Time);
		logctrl.setTotalTime(1, TrackB::Time);	
		logctrl.setSpeedCurrent(0, TrackA::Speed);
		logctrl.setSpeedCurrent(1, TrackB::Speed);		

		setLoggerInfo(context);

		Logger::CourseMap.display_span = false;
		Logger::CourseMap.display_main_point = false;
		Logger::logger.control = logctrl;
		Logger::logger.progress = progress;
		Logger::logger.grab = true;

		analyzed = false;
		canceled = false;

		ToolTipFace.remove();

		var quick_work = main::menu::MQuickWork();
		if (quick_work.CanLogger == false)
		{
			context.pushEvent(main::menu::MScriptEvent(context, LoggerRoot, "forceLoadTrackA"));
		}
		else
		{
			ToolTipFace.value = context.translate(LoggerRoot, "tooltip_analyzing");
			context.pushEvent(main::menu::MScriptEvent(context, LoggerRoot, "makeLoggerInfo")); 
		}
	}

	function onFinalize(context)
	{
		logctrl = nil;
		progress = nil;
		analyzed = nil;
		canceled = nil;
	}

	function exit(context)
	{
		logctrl.analyze_stop();
		main::game.setReturnToLastMenuProject();
		start_page(context, nil);
	}

	function onCancel(context)
	{
		main::sound.play("cancel");
		if (openConfirmDialog(context, DIALOG_QUERY, context.translate(LoggerRoot, context.translate(LoggerRoot, "Exit?"))))
			exit(context);

		return EVENTRESULT_FILTER;
	}

	function forceLoadTrackA(context)
	{
		menu_mode(context);
	}

	function setLoggerInfo(context)
	{
		Logger::CourseName.text = context.translate(LoggerRoot, "CourseName", logctrl.course_label);
		var subnumber = logctrl.race_mode_subnumber;
		var race_mode_subnumber_name = "";
		if (subnumber >= 0)
			race_mode_subnumber_name += subnumber;

		Logger::ModeName.text = context.translate(LoggerRoot, "RaceModeName", logctrl.race_mode_label) + race_mode_subnumber_name;
	}

	function makeLoggerInfo(context)
	{
		setProgress(context, progress);
		openProgressDialog(context, context.translate(LoggerRoot, "analyzing"), stopLoggerInfo);
		setProgressRawMode(context, 1);
		logctrl.analyze_start();
	}

	function stopLoggerInfo(context)
	{
		canceled = true;
		logctrl.analyze_stop();
		menu_mode(context);
	}

	function analyze_finish(context)
	{
		if (canceled)
			return;

		analyzed = true;
		ToolTipFace.value = context.translate(LoggerRoot, "tooltip_logger_operation");
		main::sound.play("ok");
		closeProgressDialog(context);
		Logger::CourseMap.display_span = true;
		Logger::CourseMap.display_main_point = true;

		Logger::logger.progress = nil;
		context.cursor_visible = false;
		setLoggerInfo(context);
	}

	function logger_mode(context)
	{
		if (analyzed == false)
			return;

		ToolTipFace.value = context.translate(LoggerRoot, "tooltip_logger_operation");
		Logger::logger.grab = true;
		context.cursor_visible = false;
		LoggerRoot.setFocus(Logger::logger);
	}

	function logger_restart(context)
	{
		if (canceled == false)
		{
			logger_mode(context);
		}
		else
		{
			analyzed = false;
			canceled = false;
			Logger::logger.progress = progress;
			Logger::logger.grab = true;
			makeLoggerInfo(context);
		}
	}

	function menu_mode(context)
	{
		ToolTipFace.value = "";
		Logger::logger.grab = false;
		context.cursor_visible = true;

		context.pushPage(LoggerMenu);
	}

	function option_mode(context)
	{
		ToolTipFace.value = "";
		Logger::logger.grab = false;
		context.cursor_visible = true;

		context.pushPage(LoggerPopup);	
	}

	function load_mode(context, track)	
	{
		logctrl.analyze_stop();
		logctrl.load_track = track;
		main::game.setReturnToLastMenuProject();

		start_page(context, nil);
	}
}

module PROJECT::ROOT::Logger::logger
{
	function onActivate(context)
	{
		main::sound.play("ok");
		logger_mode(context);
	}

	function onLoggerAnalyzeFinish(context)
	{
		analyze_finish(context);
	}

	function onLoggerMenu(context)
	{
		main::sound.play("cancel");	
		menu_mode(context);
	}
	
	function onLoggerPopup(context)
	{
		main::sound.play("ok");
		option_mode(context);
	}
}	
