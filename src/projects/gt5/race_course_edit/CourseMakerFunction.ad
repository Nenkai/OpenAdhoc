











function getWeatherValue0(percentage)
{
    var min = 0;
    var max = 100;
    var med = (min + max) / 2;

    if (percentage == min)
    {
        return 1;
    }
    else if (min < percentage && percentage < med)
    {
        return 0.5;
    }
    else if (percentage == med)
    {
        return 0;
    }
    else if (med < percentage && percentage < max)
    {
        return -0.5;
    }
    else
    {
        return -1.0
    }
}

function getWeatherValue0Percent(value)
{
    var bad_weather = -1.0
    var gray_weather = 0.0;
    var fine_weather = 1.0;

    if (value == bad_weather)
    {
        return 100;
    }
    else if (bad_weather < value && value < gray_weather)
    {
        return 75;
    }
    else if (value == gray_weather)
    {
        return 50;
    }
    else if (gray_weather < value && value < fine_weather)
    {
        return 25;
    }
    else
    {
        return 0;
    }
    return;
}
function getInitialRetentionPercent(value)
{
    return value * 10;
}

function getWeatherAccelDisplayValue(value)
{
    return value / 100;
}

function getWeatherValue0DisplayString(context, root, value)
{
    var percent = getWeatherValue0Percent(value);
    return context.translate(root, "Unit", "PERCENT").build(percent);
}

function getInitialRetentionDisplayString(context, root, value)
{
    var percent = getInitialRetentionPercent(value);
    return context.translate(root, "Unit", "PERCENT").build(percent);
}



function getWeatherIconImagePath(_genre, _start_datetime, _weather_value0, _weather_accel)
{
    var start_datetime = pdistd::MTime();
    start_datetime.setBySecond(_start_datetime);
    var is_day = 6 <= start_datetime.hour && start_datetime.hour < 18;

    var weather_change_fixed = _weather_accel == 0;

    var is_random = false;
    var is_rain = false;
    var is_snow = false;

    if (weather_change_fixed)
    {
        if (_genre == "template08")
        {
            if (_weather_value0 == -1.0)
            {
                is_snow = true;
            }
            else if (_weather_value0 != 1.0)
            {
                is_random = true;
                is_snow = true;
            }
        }
        else if (_weather_value0 != 1.0)
        {
            is_random = _weather_value0 != -1.0
            is_rain = true;
        }
    }
    else
    {
        is_random = true;
        is_snow = _genre == "template08";
        is_rain = !is_snow;
    }

    var random = is_random ? "random_" : "";
    var day_night = is_day ? "day" : "night";
    var rain_snow = is_rain ? "_rain" : (is_snow ? "_snow" : "");

    return "image/common/weather/%{random}%{day_night}%{rain_snow}.dds";
}

function getTimeIconImagePath(_genre)
{
    return _genre != "template07" ? "image/common/weather/time.dds" : "";
}



function setupWeatherAndTimeChange(rp, weather_value0, initial_retention, weather_accel, start_datetime_mtime, time_progress_speed)
{
    rp.decisive_weather = gtengine::DecisiveWeather::NONE;

    var weather_change_fixed = weather_accel == 0;
    if (weather_change_fixed)
    {
        rp.weather_point_num = 4;
        rp.weather_total_sec = 0.0;
        rp.weather_rate_sec1 = 0.0;
        rp.weather_rate_sec2 = 0.0;

        rp.weather_value0 = weather_value0;
        rp.weather_value1 = weather_value0;
        rp.weather_value2 = weather_value0;
        rp.weather_value3 = weather_value0;
    }
    else
    {
        rp.weather_point_num = 4;
        rp.weather_total_sec = 520;
        rp.weather_rate_sec1 = 180;
        rp.weather_rate_sec2 = 250;

        rp.weather_value0 = weather_value0;
        rp.weather_value1 = 0.0;
        rp.weather_value2 = 0.0;
        rp.weather_value3 = 0.0;
    }

    rp.weather_no_precipitation = false;
    rp.weather_no_wind = false;
    rp.weather_no_schedule = false;
    rp.weather_prec_rain_only = false;
    rp.weather_prec_snow_only = false;
    rp.weather_random = true;
    rp.initial_retention10 = initial_retention;
    rp.weather_accel100 = weather_accel;





    rp.datetime = start_datetime_mtime;
    rp.time_progress_speed = time_progress_speed;
}



module RaceTimeattack {
    #include "projects/gt5/race_timeattack/LocalRankingUtil.ad"
}

module RaceDrift {
    #include "projects/gt5/race_drift/LocalRankingUtil.ad"
}

function loadPathway(course_filename)
{
    var st = pdistd::ReadFile(course_filename);
    if (st == nil)
    {
        return nil;
    }

    return st["buffer"];
}

function deleteRankings(context, course_label, course_filename)
{
    var buf = loadPathway(course_filename);
    if (buf == nil)
    {
        return;
    }
    var ranking_id = pdistd::CRC32(buf);

    var course_code = gtengine::MSpecDB::getCourseCode(course_label);

    RaceTimeattack::LocalRankingUtil::delete(course_code, ranking_id);
    var board_type = RaceDrift::LocalRankingUtil::BOARD_DRIFT_FULL_LAP;
    RaceDrift::LocalRankingUtil::delete(course_code, board_type, ranking_id);
}