//---------------------------------------------------------------------------------------
// LicenseMapRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module LicenseMapRoot
{
    hidden.visible = false;

    attribute popup = nil;
    attribute category_id = nil;
    attribute result = nil;
    attribute trophy_item_parents = nil;
    attribute caller_root = nil;

    method open(context, defult_focus_category, page_in) // Typo in original
    {
        self.category_id = defult_focus_category;

        if (page_in)
            StartPageIn_XEffect(context, context.getRootWindow(), ROOT);
        else
            StartPageOut_XEffect(context, context.getRootWindow(), ROOT);
    }

    method getCategoryWidget(category_id)
    {
        var category_str = LicenseUtil::GetCategoryString(category_id);
        if (LicenseUtil::isFirstStage(category_id))
            return Maps::FirstStageMap[category_str];
        else
            return Maps::SecondStageMap[category_str];
    }

    method onPageInEnd(context)
    {
        BalloonTip.initialize(context);

        ToolTip::tip.visible = true;

        var clear_first_stage = LicenseUtil::isFirstStageClear(gGameStatus);
        Maps::FirstStageMap::GoSecondStage.insensitive = !clear_first_stage;
        Maps::FirstStageMap.right_arrow.visible = clear_first_stage;
        Maps::SecondStageMap::GoFirstStage.insensitive = !clear_first_stage;
        Maps::SecondStageMap.left_arrow.visible = clear_first_stage;

        var focus_w = ROOT.getFocusWidget();
        context.pushEvent(main::menu::MFocusEnterEvent(context, focus_w));
    }

    method onInitialize(context)
    {
        var my_cash = gGameStatus.user_profile.cash;
        Header::Cash::TextFace.text = main::pdiext::MMisc::GetMoneyString(my_cash);

        var game_day = gGameStatus.user_profile.calendar.getGameDay();
        Header::Date::TextFace.text = context.translate(ROOT, "Arcade", "GAME_DAY").build(game_day + 1);
        var start;
        var end;

        if (LicenseUtil::isFirstStage(self.category_id))
        {
            Maps::FirstStageMap.visible = true;
            Maps::FirstStageMap.insensitive = false;
            Maps::FirstStageMap::MoveEffect.reverse = false;
            Maps::FirstStageMap::MoveEffect.reset();
            Maps::SecondStageMap.visible = false;
            Maps::SecondStageMap.insensitive = true;
            Maps::SecondStageMap::MoveEffect.reverse = false;
            Maps::SecondStageMap::MoveEffect.reset();
        }
        else if (LicenseUtil::STAGE::SECOND)
        {
            Maps::FirstStageMap.visible = false;
            Maps::FirstStageMap.insensitive = true;
            Maps::FirstStageMap::MoveEffect.reverse = true;
            Maps::FirstStageMap::MoveEffect.reset();
            Maps::SecondStageMap.visible = true;
            Maps::SecondStageMap.insensitive = false;
            Maps::SecondStageMap::MoveEffect.reverse = true;
            Maps::SecondStageMap::MoveEffect.reset();
        }

        var clear_first_stage = LicenseUtil::isFirstStageClear(gGameStatus);
        Maps::FirstStageMap::GoSecondStage.insensitive = true;
        Maps::FirstStageMap.right_arrow.visible = false;
        Maps::SecondStageMap::GoFirstStage.insensitive = true;
        Maps::SecondStageMap.left_arrow.visible = false;

        if (clear_first_stage)
        {
            start = LicenseUtil::getCategoryStartEnd(LicenseUtil::STAGE::FIRST)[0];
            end = LicenseUtil::getCategoryStartEnd(LicenseUtil::STAGE::SECOND)[1];
        } 
        else 
        {
            |start, end| = LicenseUtil::getCategoryStartEnd(LicenseUtil::STAGE::FIRST);
        }
        
        for (var i = start, lid_base = 0; i <= end; i++)
        {
            var count = LicenseUtil::GetLicenseCountOfCategory(i);
            var license_result = nil;

            for (var ii = lid_base; ii < (lid_base + count); ii++)
            {
                var result = game_record().licenses[ii].result;
                if (result == LicenseUtil::PRIZE::NONE)
                {
                    license_result = LicenseUtil::PRIZE::NONE;
                    break;
                }

                if (license_result == nil)
                    license_result = result;
                
                if (license_result < result)
                    license_result = result;
            }
            lid_base += count;

            var trophy_w;
            switch (license_result)
            {
                case LicenseUtil::PRIZE::GOLD:
                    trophy_w = hidden::trophyGold;
                    break;
                case LicenseUtil::PRIZE::SILVER:
                    trophy_w = hidden::trophySilver;
                    break;
                case LicenseUtil::PRIZE::BRONZE:
                    trophy_w = hidden::trophyBronze;
                    break;
                case LicenseUtil::PRIZE::NONE:
                    trophy_w = hidden::trophyNone;
                    break;
            }

            if (trophy_w != nil)
            {
                var w = trophy_w.doCopy();
                w.x = 0.0;
                w.y = 0.0;
                w.name = "copied_item";
                var parent = getCategoryWidget(i);
                parent.appendChild(context, w);

                if (self.trophy_item_parents == nil)
                    self.trophy_item_parents = [];
                ROOT.trophy_item_parents.push(parent);
            }
        }

        ToolTip::tip.remove();
        ToolTip::tip.visible = false;

        var w = getCategoryWidget(self.category_id);
        ROOT.setFocus(w);

        SoundUtil::BGMPlayGroup('menu', "mission");
    }

    method onFinalize(context)
    {
        self.popup = nil;
        self.category_id = nil;

        if (self.trophy_item_parents != nil)
        {
            foreach (var parent in self.trophy_item_parents)
            {
                if (parent != nil)
                    parent.removeChild(context, parent["copied_item"]);
            }
            self.trophy_item_parents = nil;
        }
    }

    method onActivate(context, event)
    {
        var w = event.widget;
        var category_id = LicenseUtil::CATEGORY[w.name];

        if (LicenseUtil::canEntry(category_id, gGameStatus))
        {
            main::sound.play("ok");

            LicenseRoot.open(context, category_id, true);
        } 
        else 
        {
            main::sound.play("cancel");
            
            var msg = "";
            var category = LicenseUtil::EntryCondition[category_id];
            if (category.isInstanceOf(System::Int))
            {
                var category_str = LicenseUtil::GetCategoryString(category);
                msg = context.translate(LicenseRoot, "CANNOT_SELECT_THIS_CATEGORY").build(category_str);
            }
            else if (category.isInstanceOf(System::Array))
            {
                var category_str1 = LicenseUtil::GetCategoryString(category[0]);
                var category_str2 = LicenseUtil::GetCategoryString(category[1]);
                msg = context.translate(LicenseRoot, "CANNOT_SELECT_THIS_CATEGORY2").build(category_str1,
                                                                                           category_str2);
            }
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
        }

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");

        ROOT.setFocus(Exit);

        return EVENTRESULT_FILTER;
    }

    module Maps
    {
        method MoveMaps(context, to_second)
        {
            context.event_mask &= ~1;
            context.cursor_visible = false;
            var src;
            var dst;
            if (to_second)
            {
                src = Maps::FirstStageMap;
                dst = Maps::SecondStageMap;
            } else {
                src = Maps::SecondStageMap;
                dst = Maps::FirstStageMap;
            }

            src.visible = true;
            dst.visible = true;
            src.MoveEffect.reverse = !to_second;
            src.MoveEffect.restart();
            dst.MoveEffect.reverse = !to_second;
            dst.MoveEffect.restart();
            dst.MoveEffect.on_effect_end = function (context)
            {
                dst.insensitive = false;
                src.visible = false;
                src.insensitive = true;
                if (to_second)
                    ROOT.setFocus(Maps::SecondStageMap::J);
                else
                    ROOT.setFocus(Maps::FirstStageMap::H);

                context.event_mask |= 1;
                context.cursor_visible = true;
                dst.MoveEffect.on_effect_end = nil;
            };
        }

        static tooltip_text = [
            "TOOLTIP|MAIN_ROUTE",
            "TOOLTIP|MAIN_ROUTE",
            "TOOLTIP|HARD_ROUTE",
            "TOOLTIP|MAIN_ROUTE",
            "TOOLTIP|MAIN_ROUTE",
            "TOOLTIP|HARD_ROUTE",
            "TOOLTIP|MAIN_ROUTE",
            "TOOLTIP|MAIN_ROUTE",
            "TOOLTIP|HARD_ROUTE",
            "TOOLTIP|MAIN_ROUTE",
            "TOOLTIP|MAIN_ROUTE",
            "TOOLTIP|HARD_ROUTE",
            "TOOLTIP|MAIN_ROUTE",
            "TOOLTIP|MAIN_ROUTE",
            "TOOLTIP|HARD_ROUTE",
            "TOOLTIP|HARD_ROUTE",
            "TOOLTIP|HARD_ROUTE"
        ];

        method onFocusEnter(context, event)
        {
            var w = event.widget;

            var category_id = LicenseUtil::CATEGORY[w.name];
            var category_str = LicenseUtil::GetCategoryString(category_id);
            var step_text = context.translate(LicenseRoot, "TEXT_STEP").build(category_str);
            var sub_title_key = "CATEGORY_SUB_TITLE_" + category_id;
            var sub_title_text = context.translate(ROOT, "LicenseGT5M", sub_title_key);
            var balloon_text = step_text + " : " + sub_title_text;

            BalloonTip.set_value(context, w, balloon_text, 8);

            var tip_text = context.translate(ROOT, tooltip_text[category_id]);
            ToolTip::tip.value = tip_text;

            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context, event)
        {
            BalloonTip.reset_value();

            return EVENTRESULT_FILTER;
        }

        module FirstStageMap::GoSecondStage
        {
            method onFocusEnter(context, event)
            {
                if (LicenseUtil::isFirstStageClear(gGameStatus))
                    MoveMaps(context, true);
                return EVENTRESULT_FILTER;
            }
        }

        module SecondStageMap::GoFirstStage
        {
            method onFocusEnter(context, event)
            {
                MoveMaps(context, false);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module Exit
    {
        method onActivate(context)
        {
            main::sound.play("ok");

            StartPageOut_XEffect(context, ROOT, GTTopRoot);

            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            var balloon_text = context.translate(ROOT, "Arcade", "quit");
            BalloonTip.set_value(context, self, balloon_text, 12);
            return EVENTRESULT_FILTER;
        }
        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }
}