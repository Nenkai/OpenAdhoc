module MessageProject::ViewProfileRoot
{
	static sActiveWidget = nil;
	static sIsOpenNow = nil;

	function onLoad(context)
	{
		setDialogMoveActorH(Pane);
	}

	function onInitialize(context)
	{
	}

	function onFinalize(context)
	{
		sActiveWidget = nil;
		sIsOpenNow = nil;
	}

	function onCancel(context)
	{
		main::sound.play("cancel");
		close(context);
		return EVENTRESULT_FILTER;
	}

	function open(context, account_id, account_name, sx, sy)
	{
		main::sound.play("ok");
	
		sActiveWidget = nil;
		sIsOpenNow = 1;
	
		Pane.visible = false;
		Pane.doColorize();
	
		Pane::setLabel(context);
	
		if (!Pane::setProfile(context, account_id))
		{
			ViewProfileRoot.setFocus(nil);
			return;
		}
	
		activateWidget(context, sx, sy);
	
		context.getUpdateContext().enterEventLoop();
	}

	function close(context)
	{
		if (isOpenNow())
		{
			sIsOpenNow = false;
			ViewProfileRoot.setFocus(nil);
			deactivateWidget(context);
			context.getUpdateContext().leaveEventLoop();
		}
	}

	function activateWidget(context, _sx, _sy)
	{
		var sx = Pane.sx;
		var sy = (480.0 - Pane.h) / 2.0;
	
		if (_sx != nil)
		{
			sx = _sx;
		}
	
		if (_sy != nil)
		{
			sy = _sy;
		}
	
		Pane.sx = sx;
		Pane.sy = sy;
	
		Pane.actor.out = true;
		Pane.actor.warp();
	
		Pane.visible = true;
		Pane.actor.out = false;
	
		context.sync(0.25);
		context.pushPage(ViewProfileRoot);
	
		sActiveWidget = Pane;
	
		ViewProfileRoot.setFocus(Pane::Buttons::OK);
	}

	function deactivateWidget(context)
	{
		sActiveWidget.actor.out = 1;
		context.sync(0.25);
	
		sActiveWidget.visible = false;
		context.closePage(ViewProfileRoot);
	
		sActiveWidget = nil;
	}


	function isOpenNow()
	{
		return (sIsOpenNow != nil && sIsOpenNow);
	}

	function forcedClose(context)
	{
		if (isOpenNow())
		{
			var event = main::menu::MScriptEvent(context, Pane::Buttons::OK, "onActivate");
			context.pushEvent(event);
		}
	}

}

module MessageProject::ViewProfileRoot::Pane
{
	function translateOM(context, key, arg)
	{
		if (arg == nil)
		{
			return context.translate(ViewProfileRoot, "OnlineMessage", key);
		}
	
		return context.translate(ViewProfileRoot, "OnlineMessage", key).build(arg);
	}

	static sLabelItem = [
		"Player",
		"Nickname",
		"Location",
		"Sex",
		"Age",
		"Comment",
		"Point",
		"RidingCar"
	];

	function setLabel(context)
	{
		var i = 0;
		while (i < sLabelItem.size)
		{
			Pane[sLabelItem[i]].label.text = translateOM(
				context,
				"PROFILE_" + sLabelItem[i].upcase()
			);
			i++;
		}
	}

	function setProfile(context, id)
	{
		Nickname.visible = (main::ProfileNicknameCondition != 2);
		Location.visible = (main::ProfileLocationCondition != 2);
	
		var profile = getPlayerProfile(context, id);
		if (profile == nil)
			return 0;
	
		Title.title.text = translateOM(context, "PROFILE_TITLE", profile[0]);
		Player::text.text = profile[0];
		Nickname::text.text = main::menu::MUtility::GetSanitizedString(profile[1]);
		Location::text.text = main::menu::MUtility::GetSanitizedString(profile[2]);
	
		var sex = "";
		switch (profile[3])
		{
			case 0:
			{
				sex = "--";
				break;
			}
			case 1:
			{
				sex = translateOM(context, "PROFILE_MALE");
				break;
			}
			case 2:
			{
				sex = translateOM(context, "PROFILE_FEMALE");
				break;
			}
		}
	
		Sex::text.text = sex;
		Age::text.text = profile[4];
		Comment::text.text = main::menu::MUtility::GetSanitizedString(profile[5]);
		Point::text.text = profile[6];
	
		RidingCar["chip"].visible = false;
	
		if (profile[7] >= 0)
		{
			var gcar = main::menu::MCarGarage(profile[8]);
			RidingCar["chip"].setData(gcar, profile[7]);
			RidingCar["chip"].visible = true;
		}
		else
		{
			RidingCar::text.text = profile[9];
		}
	
		return true;
	}
}

module MessageProject::ViewProfileRoot::Pane::Buttons::OK
{
	function onActivate(context, event, item)
	{
		main::sound.play("ok");
		close(context);
		return EVENTRESULT_FILTER;
	}
}