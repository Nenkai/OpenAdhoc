static sIMOpenCB = nil
static sIMCloseCB = nil;

function refreshRideCar(root, context)
{
    var garage = main::game.garage;

    var car = root["Common"]["Header"]["Car"];
    var visible = car.visible;
    car.visible = 0;

    var label = car["label"];

    if (garage.hasRidingCar())
    {
        label.text = garage.riding_car.short_name;
        label.abbreviate();

        car["chip"].setData(garage.riding_car);
        car["chip"].doInitialize(context);
        car["chip"].visible = true;
    }
    else
    {
        car["chip"].visible = false;
        label.text = "--";
    }

    refreshHeaderAlignment(root);
    car.visible = visible;
}

function refreshHeaderAlignment(root)
{
    var margin = 8.0;

    var common = root["Common"];
    var header = common["Header"];
    var car = header["Car"];
    var title = header["Title"];

    car["label"].x = car.w - car["label"].getTextSize()[0] - margin;
    car["label"].align = 3;

    car["chip"].x = car["label"].x - 12.0;

    car["chip0"].x = car["chip"].x + 1.0;

    var indicator_left = header["Indicator"].x;
    car.x = indicator_left - car.w;

    var title_label = title["label"];
    title_label.w = (car.x - (title.x + title_label.x) - 12.0);
    title_label.scale_x = 1.0;
    title_label.scale_y = 1.0;
    title_label.adjustScale();
}

function refreshTitleIcon(header, title)
{
    |var label_w, var label_h| = header["Title"]["label"].getTextSize();

    var icon = header["Title"]["Icon"];
    var icon_quick_arcade = icon["QuickArcade"];
    var icon_time_trial   = icon["TimeTrial"];
    var icon_tuned_car    = icon["TunedCar"];
    var icon_private_race = icon["PrivateRace"];

    // Hide all icons initially
    icon_quick_arcade.visible = false;
    icon_time_trial.visible   = false;
    icon_tuned_car.visible    = false;
    icon_private_race.visible = false;

    var target_icon = nil;

    if (title == "QuickArcade")
    {
        target_icon = icon_quick_arcade;
    }
    else if (title == "TunedCar")
    {
        target_icon = icon_tuned_car;
    }
    else if (title == "Private Race")
    {
        target_icon = icon_private_race;
    }

    if (target_icon != nil)
    {
        icon.x = label_w + 10;
        target_icon.visible = true;
    }
}

function setHeadCarVisible(root, flg)
{
    var car = root["Common"]["Header"]["Car"];
    car.visible = flg;
}

function enterPage(context, root, title, IMOpenCB, IMCloseCB)
{
    root.appendChild(context, gTemplateCommon);

    var common = root["Common"];
    common["ToolTip"]["tip"].attach();

    var header = common["Header"];
    var out_title = nil;

    if (title == nil)
    {
        out_title = "";
    }
    else
    {
        out_title = context.translate(root, title);
    }
		
    header["Title"]["label"].text = out_title;

	var enable_msg = isOnlineManager();
	header["Server"].visible = false;
	if (enable_msg)
	{
		var svo_url = main::network.svo_url;
		switch(main::menu::MSystem::GetRegionCode())
		{
			case "jp":
			{
				if (svo_url != "http://svo-gt4online.scej-online.jp:10070/GT4_XML/index.jsp?languageID=3")
				{
					header["Server"].visible = true;
				}
                
			}
            break;
            
			case "us":
			{
				if (svo_url != "http://gt4-pubeta.svo.pdonline.scea.com:10070/GT4_XML/index.jsp?languageID=1")
				{
					header["Server"].visible = true;
				}
			}
			break;

            default:
                break;
		}
	}

    refreshTitleIcon(header, title);
    header["Indicator"].doInitialize(context);
    header["Indicator"].active = main::network.isRTIMEInitialized();
    setBlinkActor(header["Indicator"]["bga"]);
    setBlinkActor(header["IM"]["bga"]);
    header["IM"]["label"].text = "%Bi";

    MessageProject::beginIMCheck(context, header["IM"]);
    refreshRideCar(root, context);
    setHeadCarVisible(root, true);

    sIMOpenCB = IMOpenCB;
    sIMCloseCB = IMCloseCB;
}

function leavePage(context, root)
{
    sIMOpenCB = nil;
    sIMCloseCB = nil;

    MessageProject::endIMCheck();

    var common = root["Common"];
    if (common != nil)
        root.removeChild(context, common);
}