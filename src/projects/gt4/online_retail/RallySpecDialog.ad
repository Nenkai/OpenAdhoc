module PROJECT::ROOT
{
    static result = false;
    static original_y = Dialog.y;

    function setFadeActor(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        actor.repeat = true;
        actor.period = 0.25;
        widget.actor = actor;
    }

    setFadeActor(Dialog::Buttons::OK::bgf);
    setFadeActor(Dialog::Buttons::Cancel::bgf);

    function open_motion(context)
    {
        Dialog.y = PS2_SCREEN_H_F;
        Dialog.opacity = 0.0;

        context.pushPage(RallySpecDialog);

        while (!Dialog.interpolateY(original_y, 0.2))
        {
            var diff = 1.0 - Dialog.opacity;
            Dialog.opacity = (Dialog.opacity + diff * 0.1);
            context.sync();
        }
        Dialog.opacity = 1.0;
    }

    function close_motion(context)
    {
        var target;
        if (result != nil)
            target = -Dialog.h;
        else
            target = PS2_SCREEN_H_F;

        Dialog.opacity = 1.0;

        while (!Dialog.interpolateY(target, 0.2))
        {
            var diff = 0.0 - Dialog.opacity;
            Dialog.opacity = (Dialog.opacity + diff * 0.3);
            context.sync();
        }
        Dialog.opacity = 0.0;

        context.closePage(RallySpecDialog);
    }

    function open(context, title, array)
    {
        Dialog::Title::title.text = title;
        Dialog::Message::Stages::text.text  = array[0];
        Dialog::Message::Players::text.text = array[1];

        open_motion(context);

        Dialog::Message::ScrollBox::SelectBox.clearChildren(context);

        var cnt = array[0];
        
        for (var i = 0; i < cnt; i++)
        {
            |var course, var laps, var max_time_str| = array[i + 3];
            var max_time = max_time_str.toInt() * 1000;

            var item = hidden::Item.doCopy();
            item["course"].image_path = ("piece/crs_logo/" + course + ".img");
            item["laps"].text = (laps + " Laps");

            Dialog::Message::ScrollBox::SelectBox.appendChild(context, item);
        }

        Dialog::Message::ScrollBox::SelectBox.outFocus(RallySpecDialog);
        RallySpecDialog.setFocus(Dialog::Buttons::OK);

        result = false;

        context.getUpdateContext().enterEventLoop();
        return result;
    }

    function close(context)
    {
        RallySpecDialog.setFocus(nil);
        close_motion(context);

        Dialog::Message::ScrollBox::SelectBox.clearChildren(context);

        context.getUpdateContext().leaveEventLoop();
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        result = false;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Dialog::Buttons::OK
{
    function onActivate(context, event, item)
    {
        main::sound.play("ok");
        result = true;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Dialog::Buttons::Cancel
{
    function onActivate(context, event, item)
    {
        main::sound.play("ok");
        result = false;
        close(context);
        return EVENTRESULT_FILTER;
    }
}