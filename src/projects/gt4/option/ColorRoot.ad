













module PROJECT::ROOT
{
    function open(context)
    {
        start_page(context, ROOT);
    }

    function close(context)
    {
        start_page(context, OptionRoot);
    }

    function reflect(context)
    {
        var option = main::game.option;
        |var brightness, var contrast, var chroma, var whiteBalance| = option.race_color_correction;

        Pane::Brightness0::slider.index = brightness;
        Pane::Contrast0::slider.index = contrast;
        Pane::Chroma0::slider.index = chroma;
        Pane::WhiteBalance0::slider.index = whiteBalance;

        |brightness, contrast, chroma, whiteBalance| = option.replay_color_correction;

        Pane::Brightness1::slider.index = brightness;
        Pane::Contrast1::slider.index = contrast;
        Pane::Chroma1::slider.index = chroma;
        Pane::WhiteBalance1::slider.index = whiteBalance;
    }

    function apply()
    {
        main::game.setNeedSave();
        var option = main::game.option;

        var brightness = Pane::Brightness0::slider.index;
        var contrast = Pane::Contrast0::slider.index;
        var chroma = Pane::Chroma0::slider.index;
        var whiteBalance = Pane::WhiteBalance0::slider.index;
        option.race_color_correction = [brightness, contrast, chroma, whiteBalance];

        brightness = Pane::Brightness1::slider.index;
        contrast = Pane::Contrast1::slider.index;
        chroma = Pane::Chroma1::slider.index;
        whiteBalance = Pane::WhiteBalance1::slider.index;
        option.replay_color_correction = [brightness, contrast, chroma, whiteBalance];

    }

    function onInitialize(context)
    {
        ROOT.setFocus(Pane::Brightness0::slider);
        reflect(context);

        setupSlider(Pane::Brightness0::slider);
        setupSlider(Pane::Contrast0::slider);
        setupSlider(Pane::Chroma0::slider);
        setupSlider(Pane::WhiteBalance0::slider);

        setupSlider(Pane::Brightness1::slider);
        setupSlider(Pane::Contrast1::slider);
        setupSlider(Pane::Chroma1::slider);
        setupSlider(Pane::WhiteBalance1::slider);

    }

    function onFinalize(context)
    {

    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Brightness0::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider);
    }
}

module PROJECT::ROOT::Pane::Contrast0::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider);
    }
}

module PROJECT::ROOT::Pane::Chroma0::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider);
    }
}


module PROJECT::ROOT::Pane::WhiteBalance0::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider);
    }
}

module PROJECT::ROOT::Pane::Brightness1::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider);
    }
}

module PROJECT::ROOT::Pane::Contrast1::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider);
    }
}

module PROJECT::ROOT::Pane::Chroma1::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider);
    }
}


module PROJECT::ROOT::Pane::WhiteBalance1::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider);
    }
}

module PROJECT::ROOT::Pane::Buttons::Cancel
{
    function onActivate(context)
    {
        main::sound.play("ok");
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Buttons::OK
{
    function onActivate(context)
    {
        main::sound.play("ok");
        apply();
        close(context);
        return EVENTRESULT_FILTER;
    }
}