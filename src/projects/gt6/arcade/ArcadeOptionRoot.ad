













module ROOT
{
    hidden.visible = false;

    class Data
    {
        attribute cp;
        attribute dp;
        attribute rp;
        attribute game_mode;
        attribute laps_min;
        attribute laps_max;
        attribute visible_drift_type;
        attribute visible_laps;
        attribute visible_difficulty;
        attribute modal_page;
        attribute result;

        method __init__(cp, dp, rp)
        {
            self.cp = cp;
            self.dp = dp;
            self.rp = rp;
            self.laps_min = 0;
            self.laps_max = 99;
            self.visible_drift_type = false;
            self.visible_laps = false;
            self.visible_difficulty = false;
        }
    }

    attribute data;
    attribute result;

    method open(context, data)
    {
        self.data = data;
        self.result = nil;

        SequenceUtil::pushPage(context, self);

        var res = self.result;
        self.result = nil;
        return res;
    }

    method close(context)
    {
        var delay_time = SettingFrame.hide();
        SequenceUtil::popPage(context, self, delay_time);
    }

    method reflect(context)
    {
        if (self.data.visible_difficulty)
        {
            SettingFrame::Pane::ScrolledBody::clip::space::Difficulty::OptionMenu.setIndex(context, GAME_STATUS.user_profile.context.arcade_difficulty);
            SettingFrame::Pane::ScrolledBody::clip::space::Difficulty.visible = true;
        }
        else
        {
            SettingFrame::Pane::ScrolledBody::clip::space::Difficulty.visible = false;
        }

        if (self.data.visible_drift_type)
        {
            OptionMenuUtil::initialize(context, self, SettingFrame::Pane::ScrolledBody::clip::space::DriftType::OptionMenu, hidden::Item,
                ["SECTION", "FULL_LAP"], "TrialSetting");

            SettingFrame::Pane::ScrolledBody::clip::space::DriftType::OptionMenu.setIndex(context, self.data.rp.endless);
            SettingFrame::Pane::ScrolledBody::clip::space::DriftType.visible = true;
        }
        else
        {
            SettingFrame::Pane::ScrolledBody::clip::space::DriftType.visible = false;
        }

        if (self.data.visible_laps)
        {
            var slider = SettingFrame::Pane::ScrolledBody::clip::space::Laps.slider;
            slider.range = [self.data.laps_min, self.data.laps_max];
            slider.index = self.data.rp.race_limit_laps;
            slider.zero_text = manager.translate("TrialSetting", "Infinite");
            slider.setup(context, 1, context.translate(ROOT, "TrialSetting", "Infinite"), context.translate(ROOT, "TrialSetting", "Syuu"), nil, 5);
            SettingFrame::Pane::ScrolledBody::clip::space::Laps.visible = true;
        }
        else
        {
            SettingFrame::Pane::ScrolledBody::clip::space::Laps.visible = false;
        }
    }

    method apply(context)
    {
        if (self.data.visible_difficulty)
        {
            GAME_STATUS.user_profile.context.arcade_difficulty = SettingFrame::Pane::ScrolledBody::clip::space::Difficulty::OptionMenu.index;
        }

        if (self.data.visible_drift_type)
        {
            self.data.rp.endless = SettingFrame::Pane::ScrolledBody::clip::space::DriftType::OptionMenu.index;
        }

        if (self.data.visible_laps && self.data.rp != nil)
        {
            self.data.rp.race_limit_laps = SettingFrame::Pane::ScrolledBody::clip::space::Laps::slider.index;
        }
    }

    method onInitialize(context)
    {
        SettingFrame::Pane::ScrolledBody::clip::space::SingleRaceHeader.visible = self.data.game_mode == gtengine::GameMode::SINGLE_RACE;
        SettingFrame::Pane::ScrolledBody::clip::space::DriftTrialHeader.visible = self.data.game_mode == gtengine::GameMode::DRIFT_ATTACK;
        SettingFrame::Pane::ScrolledBody::clip::space::SplitBattleHeader.visible = self.data.game_mode == gtengine::GameMode::SPLIT_BATTLE;

        self.reflect(context);
        SettingFrame.hide(true);

        context.pushEvent(main::menu::MFunctionEvent(function(context) 
        {
            context.wait();
            SettingFrame.adjust_scrolled_body();
            SettingFrame.appear();
        }, context));

        ROOT.setFocus(SettingFrame::Pane::Foot::OK);
    }

    method onFinalize(context)
    {
        OptionMenuUtil::finalize(context, SettingFrame::Pane::ScrolledBody::clip::space::DriftType::OptionMenu);
        self.data = nil;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.setFocus(SettingFrame::Pane::Foot::Cancel);
        return EVENTRESULT_FILTER;
    }

    module SettingFrame::Pane::Foot
    {
        module OK
        {
            method onActivate(context)
            {
                main::sound.play("next");
                SoundUtil::BGMStop();
                ROOT.apply(context);
                ROOT.result = true;
                ROOT.close(context);
                return EVENTRESULT_FILTER;
            }
        }

        module Cancel
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                ROOT.result = false;
                ROOT.close(context);
                return EVENTRESULT_FILTER;
            }
        }
    }
}