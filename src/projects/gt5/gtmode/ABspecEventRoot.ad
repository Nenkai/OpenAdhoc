













module ROOT
{
    #include "RaceEntryData.ad"
    
    hidden.visible = false;

    static sArgs;

    attribute is_bspec_ = false;

    method open(context, is_bspec = false)
    {
        sArgs = is_bspec;
        SequenceUtil::startPage(context, self);
    }

    method close(context)
    {
        GTModeRoot.open(context);
    }

    method onInitialize(context)
    {
        if (sArgs != nil)
        {
            self.is_bspec_ = sArgs;
            sArgs = nil;
        }

        if (PROJECT.history['ABspecEventRoot::isBspec'] != nil)
        {
            self.is_bspec_ = PROJECT.history['ABspecEventRoot::isBspec'];
            PROJECT.history['ABspecEventRoot::isBspec'] = nil;
        }

        var event_categories = ["BEGINNER", "AMATEUR", "PROFESSIONAL", "EXPERT", "EXTREME", "ENDURANCE"].reverse();
        if (!self.is_bspec_)
        {
            foreach (var category in event_categories)
            {
                var need_level = ABspecUtil::getMinimumNeedLevel(ABspecUtil::ASPEC_CATEGORY[category], false);
                if (GAME_STATUS.user_profile.getAspecLevel() >= need_level)
                {
                    BGBase.image_path = "image/gt5/ABspec/bg_aspec_%s.dds".format(category.downcase());
                    break;
                }
            }

            BG::spec.image_path = "image/gt5/test/event_Aspec.dds";
        }
        else
        {
            foreach (var category in event_categories)
            {
                var need_level = ABspecUtil::getMinimumNeedLevel(ABspecUtil::BSPEC_CATEGORY[category], true);
                if (GAME_STATUS.user_profile.getBspecLevel() >= need_level)
                {
                    BGBase.image_path = "image/gt5/ABspec/bg_bspec_%s.dds".format(category.downcase());
                    break;
                }
            }

            BG::spec.image_path = "image/gt5/test/event_Bspec.dds";
        }

        setupBaseColor(context);
        CategorySelect.initialize(context);
        CategorySelect.hide(context, true);

        Drivers.initialize(context);
        Drivers.hide(context, true);

        GameSelect.hide(context, true);

        GameDetail.hide(context, true);

        HeaderGT5::HBox::AspecLevel.visible = !self.is_bspec_;
        HeaderGT5::HBox::BspecLevel.visible = self.is_bspec_;

        GameDetail::Info::HBox::DriverList.visible = self.is_bspec_;

        var cp = main::GAME_STATUS.user_profile.garage.getRidingCar();
        if (cp == nil)
        {
            PROJECT.history['ABspecEventRoot::GameID'] = nil;
            PROJECT.history['ABspecEventRoot::EventID'] = nil;
            close(context);
            return;
        }

        var game_id = PROJECT.history['ABspecEventRoot::GameID'];
        var event_id = PROJECT.history['ABspecEventRoot::EventID'];
        if (game_id == nil || event_id == nil)
        {
            var focus_index = CategorySelect.getFocusIndex(context);
            CategorySelect.appear(context, false);
        }
        else
        {
            var file_id = ABspecUtil::getFileId(game_id, self.is_bspec_);
            GameDetail.setGame(context, game_id, file_id, event_id);
            GameDetail.appear(context, false);
            PROJECT.history['ABspecEventRoot::GameID'] = nil;
            PROJECT.history['ABspecEventRoot::EventID'] = nil;
        }

        SoundUtil::MenuBGMCrossfadeGroup("menu", 0.0, 3.0, true);
        
        context.pushEvent(main::menu::MFunctionEvent(openModeIntroduction, context));
        context.pushEvent(menu::MScriptEvent(context, ROOT, "postInitialize"));

        ROOT.setFocus(CategorySelect.getFocusWidget());
    }

    method openModeIntroduction(context)
    {
        var mode = !self.is_bspec_ ? "ASPEC_EVENT" : "BSPEC_EVENT";
        if (!GAME_STATUS.user_profile.game_flags.getFlag("INTRODUCTION", mode))
        {
            context.wait(0.5);

            DialogUtil::openInformationDialog(context, context.translate(ROOT, "IntroductionGT5", mode));
            GAME_STATUS.user_profile.game_flags.setFlag("INTRODUCTION", mode, true);
        }
    }

    method postInitialize(context)
    {
        SaveDataUtilGT5::checkSaveEveryWhere(context);
    }

    method setupBaseColor(context)
    {
        var color_obj;
        if (!self.is_bspec_)
            color_obj = hidden::ABspecBaseColors::Aspec.getColor(0);
        else
            color_obj = hidden::ABspecBaseColors::Bspec.getColor(0);

        BG::SlideBG1::red.setColor(color_obj);
        BG::line_red::ColorFace.setColor(color_obj);
        BG::line_red2.setColor(color_obj);
        BG::Category::ColorFace_top.setColor(color_obj);
        BG::Category::ColorFace.setColor(color_obj);
        BG::Category::ColorFace_bottom.setColor(color_obj);
        GameDetail::ThumbBig::SBox::Cover::red.setColor(color_obj);
        hidden::GameSelectItem::Flyer::Cover::red1.setColor(color_obj);
        hidden::GameSelectItem::Flyer::Cover::red2.setColor(color_obj);
        
        for (var it = CategorySelect::VBox.first; it != nil; it = it.next_widget)
        {
            var base = it.Composite::Base;
            base.ColorFace_top.setColor(color_obj);
            base.ColorFace.setColor(color_obj);
            base.ColorFace_bottom.setColor(color_obj);
        }
    }

    method getRecordInstance()
    {
        if (!self.is_bspec_)
            return GLOBAL_STATUS.user_profile.record.aspec_race;
        else
            return GLOBAL_STATUS.user_profile.record.bspec_race;
    }

    method caniEnter(need_level)
    {
        if (!ROOT.isBspec())
        {
            var level = GAME_STATUS.user_profile.getAspecLevel();
            return need_level <= level;
        }
        else
        {
            var level = GAME_STATUS.user_profile.getBspecLevel();
            return need_level <= level;
        }
    }

    method initializeRecord()
    {
        if (!self.is_bspec_)
            ABspecUtil::initializeAspecRecord();
        else
            ABspecUtil::initializeBspecRecord();
    }

    method updateEventResult(event_id, result)
    {
        var event_record = getRecordInstance();
        event_record.updateEventResult(event_id, result);
    }

    method updateGameResult(game_id, result)
    {
        var event_record = getRecordInstance();
        return event_record.updateGameResult(game_id, result);
    }

    method getGameResult(game_id)
    {
        var event_record = getRecordInstance();
        return event_record.getGameResult(game_id);
    }

    method getEventResult(event_id)
    {
        var event_record = getRecordInstance();
        return event_record.getEventResult(event_id);
    }

    method loadGP(file_id, game_id)
    {
        var path;
        if (!ROOT.isBspec())
            path = "textdata/gt5/aspec_race/r%{file_id}.xml";
        else
            path = "textdata/gt5/bspec_race/r%{file_id}.xml";

        if (pdistd::Exist(path))
        {
            var fst = pdistd::ReadFile(path);
            var buf = fst["buffer"];
            if (buf != nil)
            {
                var gp_list = GameParameterUtil::parseXML(buf);
                var gp = gp_list[0];
                gp.game_id = game_id;

                for (var i = 0; i < gp.events.size; i++)
                    gp.events[i].event_id = ABspecUtil::getEventId2(game_id, i);

                return gp;
            }
        }

        return nil;
    }

    function checkRegulation(context, gp, view_only, cp, dp)
    {
        if (cp == nil)
            cp = GAME_STATUS.user_profile.garage.riding_car;

        if (dp == nil)
            dp = GAME_STATUS.user_profile.residence.getPlayer(0);
        
        var regulation = gp.event.regulation;
        return regulation.checkIfQualifiedCar(cp, !view_only);
    }

    function goRaceSequence(context, gp)
    {
        main::sound.play("next");
        GameParameterUtil::executeEvent(context, gp, GAME_STATUS);
    }

    function startEventRace(context, gp, event_id, is_bspec)
    {
        if (is_bspec)
        {
            GLOBAL_STATUS.user_profile.residence.clearEntryDrivers();

            var regulation = gp.event.regulation;
            var need_driver_count = regulation.need_bspec_driver_count > 0 ? regulation.need_bspec_driver_count : 1;
            var limit_driver_count = regulation.limit_bspec_driver_count > 0 ? regulation.limit_bspec_driver_count : 1;
            if (limit_driver_count > 4)
                limit_driver_count = 4;

            var residence_ids;
            {
                var mode = UserProfileProject::DriverPopup::Mode::ENTRY;
                var mode_param = ["max_count": limit_driver_count, "need_count": need_driver_count];
                residence_ids = UserProfileProject::DriverPopup.open(context, mode, mode_param);
            }

            if (residence_ids != nil)
            {
                foreach (var residence_id in residence_ids)
                    GLOBAL_STATUS.user_profile.residence.addEntryDriver(residence_id);
            }
            else
                return false;
        }
        
        // Save state
        PROJECT.history['ABspecEventRoot::isBspec'] = ROOT.isBspec();
        PROJECT.history['ABspecEventRoot::EventID'] = event_id;
        PROJECT.history['ABspecEventRoot::GameID'] = gp.game_id;
        PROJECT.history['LastPageName'] = ROOT.name;

        var event_index = gp.event_index;
        if (gp.championship)
            event_index = -1;

        var strlog;
        if (is_bspec)
            strlog = "GB=%d:GI=%d:GU=%s".format(gp.game_id, event_index, main::PDINetwork.getClientName());
        else
            strlog = "GA=%d:GI=%d:GU=%s".format(gp.game_id, event_index, main::PDINetwork.getClientName());

        main::Grim2.requestPutLog(strlog);

        if (gp.championship)
        {
            GAME_STATUS.user_profile.context.startChampionShip(event_id, gp);
            ROOT.goRaceSequence(context, GAME_STATUS.user_profile.context.playing_gp);
        }
        else
            ROOT.goRaceSequence(context, gp);

        return true;
    }

    method isBspec()
    {
        return self.is_bspec_;
    }

    method onKeyPress(context, event)
    {
        if (!ROOT::GameDetail.insensitive)
        {
            if (event.keysym == CELL_PAD_CTRL_SQUARE)
            {
                if (ROOT::GameDetail::Info::HBox::Garage.visible)
                    return ROOT::GameDetail::Info::HBox::Garage.onActivate(context);
            }

            if (event.keysym == CELL_PAD_CTRL_TRIANGLE)
            {
                if (ROOT::GameDetail::Info::HBox::DriverList.visible)
                    return ROOT::GameDetail::Info::HBox::DriverList.onActivate(context);
            }
        }

        return EVENTRESULT_CONTINUE;
    }
}

module ROOT::MyHome
{
    attribute cancel_cb_func_;

    method appear(context, warp)
    {
        self.insensitive = false;
        self.FadeActor.reverse = false;
        self.FadeActor.start();

        if (warp)
            self.FadeActor.warp();
    }

    method hide(context, warp)
    {
        self.insensitive = true;
        self.FadeActor.reverse = true;
        self.FadeActor.start();

        if (warp)
            self.FadeActor.warp();
    }

    method onActivate(context)
    {
        PROJECT::playBackHomeSound();
        close(context);

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        if (cancel_cb_func_ != nil)  
            self.cancel_cb_func_(context);
        else
        {
            PROJECT::playBackHomeSound();
            close(context);
        }     

        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context, event)
    {
        BalloonTip.set_value(context, event.widget, context.translate(ROOT, "MyHome", "MYHOME_BACK_BUTTON"), 20);

        return EVENTRESULT_STOP;        
    }

    method onFocusLeave(context, event)
    {
        BalloonTip.reset_value();

        return EVENTRESULT_STOP;
    }

    method onKeyPress(context, event)
    {
        if (event.keysym == CELL_PAD_CTRL_L3_UP)
        {
            if (!ROOT::CategorySelect.insensitive)
            {
                ROOT.setFocus(ROOT::CategorySelect.getFocusWidget());
                return EVENTRESULT_FILTER;
            }

            if (!ROOT::GameSelect.insensitive)
            {
                ROOT::GameSelect.finder_.onFocus(context);
                return EVENTRESULT_FILTER;
            }

            if (!ROOT::GameDetail.insensitive)
            {
                ROOT::GameDetail.finder_.onFocus(context);
                return EVENTRESULT_FILTER;
            }
        }

        return EVENTRESULT_CONTINUE;
    }
}

module ROOT::CategorySelect
{
    static sMoveDelayBase = 0.1;

    attribute slowest_item_ = nil;
    attribute focus_index_ = 0;

    method appear(context, warp)
    {
        self.insensitive = false;
        PROJECT::ignorePadEvent(true);
        MyHome.cancel_cb_func_ = nil;

        ROOT::Drivers.hide(context, warp);
        var slowest_item_abs = 0;
        var slowest_item_index = 0;

        var items = getVisibleItems();

        for (var i = 0; i < items.size; i++)
        {
            var item = items[i];
            var diff = i - self.focus_index_;
            var abs = Math::abs(diff);
            item.PageOut.stop();

            item.PageIn.setStartDuration(0, sMoveDelayBase.toFloat() * abs);
            item.Composite::ParallelActor.reverse = false;
            item.Composite::ParallelActor.reset();

            if (slowest_item_abs <= abs)
                slowest_item_index = i;
        }

        if (self.focus_index_ < 0)
            self.setFocus(context, VBox::BEGINNER);

        var effect_end = method (context)
        {
        
            context.pushEvent(menu::MFunctionEvent(ROOT.setFocus, self.getFocusWidget()));
            PROJECT::ignorePadEvent(false);
            self.slowest_item_.PageIn.on_effect_end = nil;
        }    ;

        for (var i = 0; i < items.size; i++)
        {
            var item = items[i];
            if (i >= slowest_item_index)
            {
                item.PageIn.on_effect_end = self.*effect_end;
                self.slowest_item_ = item;
            }

            if (i == self.focus_index_)
            {
                item.Composite::ParallelActor.reverse = false;
                item.Composite::ParallelActor.start();
            }

            item.PageIn.start();

            if (warp)
                item.PageIn.warp();
        }

        BG.slideRight(context, true);
        BG.slideRight2(context, true);

        ButtonHelpGT5.set(context, [
            [ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "Component", "Enter")],
            [ButtonHelpGT5.getCancelButtonName(), context.translate(ROOT, "Component", "Cancel")]
        ])
    }

    method hide(context, warp, focus_index = 0)
    {
        self.insensitive = true;
        ROOT.setFocus(nil);

        BalloonTip.reset_value();

        var slowest_item_abs = 0;
        var slowest_item_index = 0;

        var items = getVisibleItems()

        for (var i = 0; i < items.size; i++)
        {
            var item = items[i];
            var diff = i - focus_index;
            var abs = Math::abs(diff);

            item.PageIn.stop();
            item.PageOut.setStartDuration(0, sMoveDelayBase * abs);
            item.PageOut.start();

            if (warp)
                item.PageOut.warp();
        }
    }

    method getVisibleItems()
    {
        var items = [];                 
        for (var it = VBox.last; it != nil; it = it.prev_widget)
        {
            if (it.visible)
                items.push(it);
        }  

        return items;
    }

    method getFocusIndex(context)
    {
        return self.focus_index_;
    }

    method getFocusWidget(context)
    {
        var items = getVisibleItems();
        return items[self.focus_index_];
    }

    method getCategoryWidget(category)
    {
        var category_string = ABspecUtil::getCategoryString(category);
        return VBox[category_string];
    }

    method setFocus(context, category_widget)
    {
        var items = getVisibleItems();

        for (var i = 0; i < items.size; i++)
        {
            var item = items[i];

            if (item == category_widget)
            {
                self.focus_index_ = i;
                break;
            }
        }
    }

    method initialize(context)
    {
        var open_endurance = false;

        if (!ROOT.isBspec())
        {
            var need_level_for_endurance = ABspecUtil::getMinimumNeedLevel(ABspecUtil::ASPEC_CATEGORY::ENDURANCE, false);
            var open_endurance = need_level_for_endurance <= GAME_STATUS.user_profile.getAspecLevel();
        }
        else
        {
            var need_level_for_endurance = ABspecUtil::getMinimumNeedLevel(ABspecUtil::BSPEC_CATEGORY::ENDURANCE, true);
            var open_endurance = need_level_for_endurance <= GAME_STATUS.user_profile.getBspecLevel();
        }

        VBox::ENDURANCE.insensitive = !open_endurance;
        VBox::ENDURANCE.visible = open_endurance;

        for (var it = VBox.first; it != nil; it = it.next_widget)
        {
            if (!it.defined('category'))
                it.defineAttribute('category')
        
            it.category = !ROOT.isBspec() ? ABspecUtil::ASPEC_CATEGORY[it.name] : ABspecUtil::BSPEC_CATEGORY[it.name];
            if (it.category != nil)
            {
                var need_level = ABspecUtil::getMinimumNeedLevel(it.category, ROOT.isBspec());
                it.Composite::CategoryName::can_enter.visible = ROOT.caniEnter(need_level);
            }        
        }    
    }

    method onFocusEnter(context, event)
    {
        var prev_focus_w = getFocusWidget(context);
        setFocus(context, event.widget);

        var next_focus_w = getFocusWidget(context);
        context.wait(0.15);

        return EVENTRESULT_STOP;
    }

    method onActivate(context, event)
    {
        var category = self.focus_index_;

        if (GetVersionBranch() == "demo" && self.focus_index_ != 0)
        {
            main::sound.play("disable");

            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
            context.translate(ROOT, "Arcade", "cannot_select_in_this_version"));

            return EVENTRESULT_FILTER;
        }

        var need_level = ABspecUtil::getMinimumNeedLevel(category, ROOT.isBspec());
        if (!ROOT.caniEnter(need_level))
        {
            main::sound.play("disable");
            var msg = context.translate(ROOT, "MESSAGE_YOU_DONT_HAVE_ENOUGH_LEVEL").build(need_level);
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);

            return EVENTRESULT_FILTER;
        }

        sound.play("ok");
        PROJECT::ignorePadEvent(true);

        self.hide(context, false, self.focus_index_);
        var slide_end = function (context)
        {
            ROOT::GameSelect.appear(context, false);
        };

        ROOT::GameSelect.setCategory(context, category, nil);
        BG.setCategory(context, category);
        BG.slideLeft(context, false, slide_end);

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        if (PROJECT::DIRECT_CANCEL_BACK)
        {
            PROJECT::playBackHomeSound();
            close(context);
        }
        else
        {
            sound.play("cancel");
            ROOT.setFocus(MyHome);
        }

        return EVENTRESULT_FILTER;
    }
}    

module ROOT::GameSelect
{
    attribute category_;
    attribute finder_;

    method setCategory(context, category, focused_game_id)
    {
        self.category_ = category;
        var initial_data = makeInitialDataForGame(context, category, focused_game_id);
        self.finder_.replaceFolder(context, initial_data);
        return true;
    }

    method appear(context, warp)
    {
        self.insensitive = false;
        PROJECT::ignorePadEvent(true);

        MyHome.cancel_cb_func_ = cb_canceled_game;

        var effect_end = method (context)
        {
            ROOT::Drivers.appear(context, false);

            for (var i = 0; i < finder_.getItemCount(); i++)
            {
                var w = finder_.getItemWidget(i);

                if (w != nil)
                    w.start_cover_animation(context, false);
            }

            context.wait(1.0);

            context.pushEvent(menu::MFunctionEvent(self.finder_.onFocus, context, ROOT));
            PROJECT::ignorePadEvent(false);
            self.FadeActor.on_effect_end = nil;
        };

        self.FadeActor.reverse = false;
        self.FadeActor.reset();

        self.FadeActor.on_effect_end = self.*effect_end;
        self.FadeActor.start();

        if (warp)
            self.FadeActor.warp();

        BG.setCategory(context, self.category_);
        BG.slideLeft(context, warp);
        BG.slideRight2(context, true);

        ButtonHelpGT5.set(context, [
            [ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "Component", "Enter")],
            [ButtonHelpGT5.getCancelButtonName(), context.translate(ROOT, "Component", "Cancel")]    
        ]);
    }

    method hide(context, warp)
    {
        self.insensitive = true;
        ROOT.setFocus(nil);

        BalloonTip.reset_value();

        self.FadeActor.reverse = true;
        self.FadeActor.start();

        if (warp)
            self.FadeActor.warp();
    }

    method onInitialize(context)
    {
        var dummy_initial_data = UIKitProject::FinderRoot.InitialData(UIKitProject::FinderRoot.makeCandidates([]));
        self.finder_ = UIKitProject::FinderRoot::setCopy(context, self.Composite, dummy_initial_data, false);
    }

    method onFinalize(context)
    {
        if (self.finder_ != nil)
        {
            var parent = self.finder_.parent;
            parent.removeChild(context, self.finder_);
        }
    }

    method cb_init_game(context, candidate_data, item_w, arg)
    {
        |var game_id, var file_id, var need_level, var race_count| = candidate_data.value_;
        item_w.init(context, game_id, file_id, need_level, candidate_data.item_index_);
    }

    method cb_selected_game(context, folder_data, close, arg, item_w)
    {
        var candidate_data = folder_data.getItemData();
        |var game_id, var file_id, var need_level, var race_count| = candidate_data.value_;

        var game_index = candidate_data.item_index_;

        if (GetVersionBranch() == "demo")
        {
            if (!ROOT.isBspec() || file_id != 111)
            {
                main::sound.play("disable");
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                context.translate(ROOT, "Arcade", "cannot_select_in_this_version"));
                return;
            }
        }

        if (!ROOT.caniEnter(need_level))
        {
            main::sound.play("disable");
            var msg = context.translate(ROOT, "MESSAGE_YOU_DONT_HAVE_ENOUGH_LEVEL_FOR_GAME").build(need_level);
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
            return;
        }

        main::sound.play("ok");
        PROJECT::ignorePadEvent(true);
        var res = GameDetail.setGame(context, game_id, file_id);

        if (res)
        {
            GameDetail.appear(context, false, item_w);
            context.sync(0.1);
            item_w.opacity = (0.0);
            self.hide(context, false);
        }
        else
        {
            sound.play("disable");
            PROJECT::ignorePadEvent(false);
        }
    }

    method cb_canceled_game(context, finder_data, func_popup_close)
    {
        main::sound.play("cancel");
        PROJECT::ignorePadEvent(true);
        self.hide(context, false);

        var slide_end = method (context)
        {
            var category_widget = self.CategorySelect.getCategoryWidget(self.category_);
            self.CategorySelect.setFocus(context, category_widget);
            self.CategorySelect.appear(context, false);
        }

        BG.slideRight(context, false, self.*slide_end);
    }

    method cb_focused_game(context, candidate_data, item_w, arg)
    {
        |var game_id, var file_id, var need_level, var race_count| = candidate_data.value_;

        var event_title;
        if (!ROOT.isBspec())
            event_title = context.translate(ROOT, "AspecEventInfoGT5", "r%{file_id}t");
        else
            event_title = context.translate(ROOT, "BspecEventInfoGT5", "r%{file_id}t");

        BalloonTip.set_value(context, item_w, event_title, 20);
    }

    method makeInitialDataForGame(context, category, focused_game_id)
    {
        hidden::GameSelectItem.opacity = 0.0;
        var focus_index = 0;
        var candidates = Array();
        var game_ids = ABspecUtil::getCategoryGameIds(category, ROOT.isBspec());
        var game_data_map = ABspecUtil::getGameDataMap(ROOT.isBspec());

        for (var i = 0; i < game_ids.size; i++)
        {
            var game_id = game_ids[i];

            if (focused_game_id == game_id)
                focus_index = i;

            var game_data = game_data_map[game_id];

            var values = [
                game_id,
                game_data["file_id"],
                game_data["level"],
                game_data["event_count"],
            ];

            var candidate_data = UIKitProject::FinderRoot.CandidateData(values);
            candidates.push(candidate_data);
        }

        var initial_data = UIKitProject::FinderRoot::InitialData(candidates);
        initial_data.view_type_ = UIKitProject::FinderRoot::ViewType::SCROLL_V;

        initial_data.h_item_count_ = 3;
        initial_data.extended_item_ = hidden::GameSelectItem;
        initial_data.import_iconbox_parameter_ = self.Composite::IconBox;
        initial_data.cb_init_item_ = self.cb_init_game;
        initial_data.cb_on_activate_ = self.cb_selected_game;
        initial_data.cb_on_cancel_ = self.cb_canceled_game;
        initial_data.cb_focus_enter_ = self.cb_focused_game;
        initial_data.focus_index_ = focus_index;
        initial_data.v_scrollbar_ = self.Scrollbar::VScrollbar;
        initial_data.activate_sound_ = nil;
        return initial_data;
    }
}

module ROOT::hidden::GameSelectItem
{
    static sMoveDelayBase = 0.03;

    method init(context, game_id, file_id, need_level, item_index)
    {
        self.Flyer::ImageFace.image_path = "piece/flyer/r%{file_id}.img";
        self.Flyer::ImageFace.opacity = 0.0;

        self.Level::value.text = need_level;

        if (item_index != nil)
            self.Flyer::Cover::MoveActor.setStartDuration(0, sMoveDelayBase.toFloat() * item_index);
        else
            self.Flyer::Cover::MoveActor.setStartDuration(0, 0.0);

        self.Flyer::Cover::MoveActor.reverse = false;
        self.Flyer::Cover::MoveActor.reset();
        self.Level::FadeActor.reset();
        self.ScaleActor.reverse = false;
        self.ScaleActor.reset();

        var result = ROOT.getGameResult(game_id);

        switch (result)
        {
            case 0:
                self.Record::ImageFace.image_path = "image/gt5/icon/trophy_gold.dds";
                self.Record.visible = true;
                break;

            case 1:
                self.Record::ImageFace.image_path = "image/gt5/icon/trophy_silver.dds";
                self.Record.visible = true;
                break;

            case 2:
                self.Record::ImageFace.image_path = "image/gt5/icon/trophy_bronze.dds";
                self.Record.visible = true;
                break;

            default:
                self.Record.visible = false;
                break;    
        }

        self.opacity = 1.0;
    }

    method onFocusEnter(context)
    {
        self.ScaleActor.reverse = false;
        self.ScaleActor.start();

        return EVENTRESULT_CONTINUE;
    }

    method onFocusLeave(context)
    {
        self.ScaleActor.reverse = true;
        self.ScaleActor.start();

        return EVENTRESULT_CONTINUE;
    }

    method start_cover_animation(context, warp)
    {
        self.Flyer::ImageFace.opacity = 1.0;

        var effect_end = method (context)
        {
            self.Flyer::Cover::MoveActor.on_effect_end = nil;
        };

        self.Flyer::Cover::MoveActor.on_effect_end = self.*effect_end;
        self.Flyer::Cover::MoveActor.start();
        self.Level::FadeActor.start();

        if (warp)
        {
            self.Flyer::Cover::MoveActor.warp();
            self.Level::MoveActor.warp();
        }
    }
}

module ROOT::GameDetail
{
    attribute finder_;
    attribute prev_focus_index_ = -1;
    attribute gp_;
    attribute game_id_;
    attribute file_id_;

    method setGame(context, game_id, file_id, focused_event_id)
    {
        self.game_id_ = game_id;
        self.file_id_ = file_id;

        var gp = ROOT.loadGP(file_id, game_id);
        if (gp != nil)
        {
            self.gp_ = gp;
            var regulation = gp.event.regulation;
            self.prev_focus_index_ = -1;
            var initial_data = makeInitialDataForEvent(context, self.gp_, focused_event_id);
            self.finder_.replaceFolder(context, initial_data);

            var event_info_page = ROOT.isBspec() ? "BspecEventInfoGT5" : "AspecEventInfoGT5";
            self.Info::game_title.text = context.translate(ROOT, event_info_page, "r%{file_id}t");
            self.Info::cache_copy.text = context.translate(ROOT, event_info_page, "r%{file_id}c");
            self.Info::description.text = context.translate(ROOT, event_info_page, "r%{file_id}d");

            if (ROOT.isBspec())
            {
                self.Info::HBox::EntryMax.visible = true;

                var limit_driver_count = (gp.event.regulation.limit_bspec_driver_count > 0) ? gp.event.regulation.limit_bspec_driver_count : 1;
                self.Info::HBox::EntryMax::TextFace.text = limit_driver_count.toString();
            }
            else
                self.Info::HBox::EntryMax.visible = false;

            if (GetVersionBranch() != "demo")
            {
                var tire_index = gp.event.regulation.limit_tire_f;
                if (tire_index > -1)
                    self.Info::HBox::LimitTire::TextFace.text = TireUtil::getName(context, tire_index, ROOT);
                else
                    self.Info::HBox::LimitTire::TextFace.text = context.translate(ROOT, "UNRESTRICTED");
            }
            else
                self.Info::HBox::LimitTire::TextFace.text = "Racing-Medium";

            if (GetVersionBranch() != "demo")
                self.Info::HBox::Garage.setRegulation(regulation);

            self.ThumbBig::SBox::Level::value.text = ABspecUtil::getNeedLevel(self.game_id_, ROOT.isBspec());
            return true;
        }

        return false;
    }

    method appear(context, warp, selected_game_widget)
    {
        self.insensitive = false;
        PROJECT::ignorePadEvent(true);

        MyHome.cancel_cb_func_ = cb_canceled_event;
        ROOT::Drivers.appear(context, false);

        var flyer_path = "piece/flyer/r%{self.file_id_}.img";
        self.ThumbBig::SBox::ImageFace.image_path = flyer_path;
        self.ThumbBig::reflect.image_path = flyer_path;

        var effect_end_thumb_big = method (context)
        {
            self.ThumbBig::ParallelActor.on_effect_end = nil;
            self.ThumbBig::reflect.FadeActor.start();
        };

        if (selected_game_widget != nil)
        {
            var widget = selected_game_widget;

            var tw = widget.w * widget.scale_x;
            var th = widget.h * widget.scale_y;

            self.ThumbBig::ParallelActor::Size.setStartValue(0, [tw, th]);

            self.ThumbBig::ParallelActor::Position.setStartValue(0, [widget.sx - ((tw - widget.w) / 2), widget.sy - ((th - widget.h) / 2)]);

            self.ThumbBig::ParallelActor.reverse = false;

            self.ThumbBig::ParallelActor.on_effect_end = self.*effect_end_thumb_big;
            self.ThumbBig::ParallelActor.restart();
        }
        else
        {
            self.ThumbBig::ParallelActor.reverse = false;
            self.ThumbBig::ParallelActor.on_effect_end = self.*effect_end_thumb_big;
            self.ThumbBig::ParallelActor.start();
            self.ThumbBig::ParallelActor.warp();
        }

        self.ThumbBig::reflect.FadeActor.reverse = false;
        self.ThumbBig::reflect.FadeActor.reset();

        self.ThumbBig::FadeActor.reverse = false;
        self.ThumbBig::FadeActor.start();

        var effect_end_event_select = method(context)
        {
            PROJECT::ignorePadEvent(false);
            self.EventSelect::MoveActor.on_effect_end = nil;
        };

        self.EventSelect::MoveActor.reverse = false;
        self.EventSelect::MoveActor.on_effect_end = self.*effect_end_event_select;

        self.EventSelect::MoveActor.start()

        context.pushEvent(menu::MFunctionEvent(self.finder_.onFocus, context, ROOT));

        self.Info::FadeActor.reverse = false;
        self.Info::FadeActor.start();

        if (warp)
        {
            self.ThumbBig::ParallelActor.warp();
            self.Info::FadeActor.warp()
            self.EventSelect::MoveActor.warp();
        }

        BG.setCategory(context, ABspecUtil::getCategory(self.game_id_));
        BG.slideLeft(context, true);
        BG.slideLeft2(context, warp);

        var button_helps = [
            [ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "Component", "Enter")],
            [ButtonHelpGT5.getCancelButtonName(), context.translate(ROOT, "Component", "Cancel")]
        ];

        if (ROOT::GameDetail::Info::HBox::Garage.visible)
            button_helps.push(["Square", context.translate(ROOT, "GTModeProject::GTModeRoot", "GARAGE")]);

        if (ROOT::GameDetail::Info::HBox::DriverList.visible)
            button_helps.push(["Triangle", context.translate(ROOT, "GTModeProject::GTModeRoot", "DRIVER")]);

        ButtonHelpGT5.set(context, button_helps);
    }

    method hide(context, warp)
    {
        self.insensitive = true;
        ROOT.setFocus(nil);
        BalloonTip.reset_value();

        BG.slideRight2(context, false);

        self.Info::FadeActor.reverse = true;
        self.Info::FadeActor.start();

        self.ThumbBig::FadeActor.reverse = true;
        self.ThumbBig::FadeActor.start();

        self.EventSelect::MoveActor.reverse = true;
        self.EventSelect::MoveActor.start();

        if (warp)
        {
            self.Info::FadeActor.warp();
            self.ThumbBig::FadeActor.warp();
            self.EventSelect::MoveActor.warp();
        }
    }

    function onLoad(context)
    {
        ThumbBig::ParallelActor::Position.setEndValue(0, [ThumbBig.sx, ThumbBig.sy]);
        ThumbBig::ParallelActor::Size.setEndValue(0, [ThumbBig.w, ThumbBig.h]);
    }

    method onInitialize(context)
    {
        ThumbBig::ParallelActor.reset();
        var dummy_initial_data = UIKitProject::FinderRoot.InitialData(UIKitProject::FinderRoot.makeCandidates([]));

        self.finder_ = UIKitProject::FinderRoot::setCopy(context, self.EventSelect::Composite, dummy_initial_data, false);
        self.insensitive = true;
    }

    method onFinalize(context)
    {
        self.prev_focus_index_ = -1;
        self.gp_ = nil;
        self.game_id_ = nil;

        if (self.finder_ != nil)
        {
            var parent = self.finder_.parent;
            parent.removeChild(context, self.finder_);
        }
    }

    method cb_init_event(context, candidate_data, item_w, arg)
    {
        |var event_id, var event_index, var is_championship| = candidate_data.value_;

        var gp = self.gp_;
        var event = gp.events[event_index];
        item_w.init(context, event, event_id, is_championship);

        item_w.Spot::Weather.setup(context, gp, event_index);
    }

    method cb_selected_event(context, folder_data, close, arg)
    {
        var cp = main::GAME_STATUS.user_profile.garage.getRidingCar();
        if (main::gtengine::MSpecDB::checkGenericFlag("one_make_only", cp.getCarCode()))
        {
            main::sound.play("disable");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "MyHome", "CANNOT_ENTER_ASPEC_BSPEC_EVENT"));

            return EVENTRESULT_FILTER;
        }

        var cp = main::GAME_STATUS.user_profile.garage.getRidingCar();
        if (main::gtengine::MSpecDB::checkGenericFlag("is_racing_kart", cp.getCarCode()))
        {
            main::sound.play("disable");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "MyHome", "CANNOT_ENTER_ASPEC_BSPEC_EVENT_FOR_KART"));

            return EVENTRESULT_FILTER;
        }

        var candidate_data = folder_data.getItemData();

        |var event_id, var event_index, var is_championship| = candidate_data.value_;
        var gp = self.gp_;

        if (is_championship)
        {
            gp.championship = true;
            gp.event_index = 0;
        }
        else
        {
            gp.championship = false;
            gp.event_index = event_index;
        }

        if (ROOT.isBspec())
        {
            var need_driver_count = (gp.event.regulation.need_bspec_driver_count > 0) ? gp.event.regulation.need_bspec_driver_count : 1;

            if (GLOBAL_STATUS.user_profile.residence.getOfflineDriverCount() < need_driver_count)
            {
                sound.play("disable");

                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                context.translate(ROOT, "MESSAGE_NO_ENOUGH_BSPEC_DRIVER"));
                return;
            }
        }

        for (;;)
        {
            var report = checkRegulation(context, gp, false);
            if (report[0])
            {
                sound.play("next");
                var data = CursorProject::LoadingRoot::EventRaceData(gp);

                if (!ROOT.isBspec())
                    data.caption = context.translate(ROOT, "AspecEventInfoGT5", "r%{self.file_id_}t");
                else
                    data.caption = context.translate(ROOT, "BspecEventInfoGT5", "r%{self.file_id_}t");

                CursorProject::LoadingRoot.setData(data);
                self.insensitive = true;

                if (!ROOT.startEventRace(context, gp, event_id, ROOT.isBspec()))
                {
                    CursorProject::LoadingRoot.setData(nil);
                    self.insensitive = false;
                }

                break;
            }
            else
            {
                sound.play("disable");

                var res = RegulationReportPopup.open(context, gp.event.regulation, report);
                if (res)
                {
                    GaragePopup.open(context, nil, gp.event.regulation);
                    ROOT::HeaderGT5::HBox::RidingCar.refresh(context);
                }
                
                break;
            }
        }      
    }

    method cb_canceled_event(context, finder_data, func_popup_close)
    {
        main::sound.play("cancel");
        PROJECT::ignorePadEvent(true);

        self.hide(context, false);

        ROOT::GameSelect.setCategory(context, ABspecUtil::getCategory(self.game_id_), self.game_id_);
        ROOT::GameSelect.appear(context, false);
    }

    method cb_focused_event(context, candidate_data, item_w, arg)
    {
        return;
    }

    method cb_on_key_press_event(context, event, item_w, candidate_data)
    {
        var status = EVENTRESULT_CONTINUE;

        if (pdiext::isQABuild() && event.keysym == CELL_PAD_CTRL_START)
        {
            sound.play("next");
            |var event_id, var event_index, var is_championship| = candidate_data.value_;
            var result = ROOT.getEventResult(event_id);

            if (result < 0)
                result = 3;     
            else if (result > 0)
                result--;

            ROOT.updateEventResult(event_id, result);

            self.cb_init_event(context, candidate_data, item_w, nil);
            self.cb_focused_event(context, candidate_data, item_w, nil);

            status = EVENTRESULT_FILTER;
        }

        return status;
    }

    method makeInitialDataForEvent(context, gp, focused_event_id)
    {
        var candidates = Array();
        var focus_index = 0;

        if (gp.championship)
        {
            var event_id = ABspecUtil::getChampionshipEventId(gp.game_id);
            var value = [event_id, -1, true];

            var candidate_data = UIKitProject::FinderRoot.CandidateData(value);

            candidates.push(candidate_data);

            if (event_id == focused_event_id)
                focus_index = 0;
        }

        for (var i = 0; i < gp.events.size; i++)
        {
            var event_id = gp.events[i].event_id;
            var value = [event_id, i, false];

            var candidate_data = UIKitProject::FinderRoot.CandidateData(value);
            candidates.push(candidate_data);

            if (event_id == focused_event_id)
                focus_index = gp.championship ? i + 1 : i;
        }

        var initial_data = UIKitProject::FinderRoot::InitialData(candidates);
        initial_data.view_type_ = UIKitProject::FinderRoot::ViewType::SCROLL_H;
        initial_data.extended_item_ = hidden::EventSelectItem;

        initial_data.import_iconbox_parameter_ = self.EventSelect::Composite::IconBox;
        initial_data.cb_init_item_ = self.cb_init_event;
        initial_data.cb_on_activate_ = self.cb_selected_event;
        initial_data.cb_on_cancel_ = self.cb_canceled_event;
        initial_data.cb_focus_enter_ = self.cb_focused_event;

        initial_data.focus_index_ = focus_index;
        initial_data.cb_on_key_press_ = self.cb_on_key_press_event;
        initial_data.h_scrollbar_ = self.EventSelect::HScrollbar;
        initial_data.activate_sound_ = nil;

        return initial_data;
    }
}

module ROOT::hidden::EventSelectItem
{
    function onLoad(context)
    {
        Spot::weather.image_path = "";
        Spot::Laps::TextFace.text = "";
        Spot::course_logo.image_path = "";
        Spot::course_map.image_path = "";

        Spot.visible = false;
        Championship.visible = false;
        Championship::Info.active = false;
    }

    method init(context, event, event_id, is_championship)
    {
        var record_box;
        if (is_championship)
        {
            self.Championship.visible = true;
            record_box = self.Championship::Info::Record;
        }
        else
        {
            var course_info = CourseData::getCourseInfo(event.track.course_code);

            self.Spot::course_logo.image_path = "piece/course_logo_M/%{course_info.logo}.img";
            self.Spot::course_map.image_path = "piece/course_map_M/%{course_info.map}.img";
            self.Spot::weather.image_path = "image/gt5/icon/weather_01.dds";

            var laps = event.race_parameter.race_limit_laps;
            if (laps > 0)
                self.Spot::Laps::TextFace.text = event.race_parameter.race_limit_laps;
            else
                self.Spot::Laps::TextFace.text = "--";

            self.Spot.visible = true;
            record_box = self.Spot::Record;
        }

        var result = ROOT.getEventResult(event_id);

        switch (result)
        {
            case 0:
                record_box.TextFace.text = "";
                record_box.TextFace.visible = false;

                record_box.ImageFace.image_path = "image/gt5/icon/trophy_gold.dds";
                record_box.ImageFace.visible = true;

                if (is_championship)
                    self.Championship::Info.active = true;

                break;

            case 1:
                record_box.TextFace.text = "";
                record_box.TextFace.visible = false;

                record_box.ImageFace.image_path = "image/gt5/icon/trophy_silver.dds";
                record_box.ImageFace.visible = true;

                if (is_championship)
                    self.Championship::Info.active = true;

                break;

            case 2:
                record_box.TextFace.text = "";
                record_box.TextFace.visible = false;

                record_box.ImageFace.image_path = "image/gt5/icon/trophy_bronze.dds";
                record_box.ImageFace.visible = true;

                if (is_championship)
                    self.Championship::Info.active = true;

                break;

            default:
                if (result < 0)
                {
                    record_box.TextFace.text = "";
                    record_box.TextFace.visible = false;

                    if (is_championship)
                        self.Championship::Info.active = false;
                }
                else
                {
                    record_box.TextFace.text = result + 1;
                    record_box.TextFace.visible = true;

                    if (is_championship)
                        self.Championship::Info.active = true;
                }

                record_box.ImageFace.image_path = "";
                record_box.ImageFace.visible = false;

                break;
        }
    }

    method onFocusEnter(context)
    {
        return EVENTRESULT_CONTINUE;
    }

    method onFocusLeave(context)
    {
        return EVENTRESULT_CONTINUE;
    }
    }

module ROOT::GameDetail::PrizeList
{
    static sListItemMoveDelayBase = 0.1;

    attribute finder_ = nil;

    method setPrize(context, money_table, point_table)
    {
        var prize_list = [];
        var largest_size = 0;

        if (money_table.size < point_table.size)
            largest_size = point_table.size;
        else
            largest_size = money_table.size;

        for (var i = 0; i < largest_size; i++)
        {
            var money = 0;
            var point = 0;

            if (i < point_table.size)
                point = point_table[i];

            if (i < money_table.size)
                money = money_table[i];

            if (money == 0 && point == 0)
                break;
            
            prize_list.push([i, money, point]);
        }

        hidden::PrizeListItem.opacity = 0.0;
        self.ListBox.setItemTemplate(context, hidden::PrizeListItem);
        self.ListBox.setItemCount(prize_list.size);

        for (var i = 0; i < prize_list.size; i++)
        {
            var w = self.ListBox.getItemWidget(i, context);

            |var order, var money, var point| = prize_list[i];

            w.TextFace.text = "%{order} +%{money} Cr. +%{point} Exp";
            w.TextFace.MoveActor.setStartDuration(0, sListItemMoveDelayBase.toFloat() * i);
            w.TextFace.MoveActor.reverse = false;
            w.TextFace.MoveActor.restart();
            w.opacity = 1.0;
        }
    }

    method resetPrize(context)
    {
        self.ListBox.setItemCount(0);
        self.ListBox.postRedraw();
    }
    }

module ROOT::Drivers
{
    method appear(context, warp)
    {
        self.insensitive = false;
        self.FadeActor.reverse = false;
        self.FadeActor.start();

        if (warp)
            self.FadeActor.warp();
    }

    method hide(context, warp)
    {
        self.insensitive = true;

        ROOT.setFocus(nil);
        self.FadeActor.reverse = true;
        self.FadeActor.start();

        if (warp)
            self.FadeActor.warp();
    }

    method initialize(context)
    {
        if (!ROOT.isBspec())
            setupAspecDriver(context);
        else
            setupBspecDrivers(context);

        self.Aspec.visible = !ROOT.isBspec();
        self.Bspec.visible = ROOT.isBspec();
    }

    function onRealize(context)
    {
        return;
    }

    method onInitialize(context)
    {
        self.ButtonOK.insensitive = true;
        self.ButtonOK::FadeActor.reverse = false;
        self.ButtonOK::FadeActor.reset();

        self.veil.FadeActor.reverse = false;
        self.veil.FadeActor.reset();
    }

    method onFinalize(context)
    {
        self.Bspec::HBox.clearWindow(context);
    }

    method setupAspecDriver(context)
    {
        self.Aspec::DriverName.text = pdistd::getPlayerName();

        var avatar_body_id = GAME_STATUS.user_profile.context.avatar_body_id;

        var dp = GAME_STATUS.user_profile.residence.getPlayer(0);

        self.Aspec::DriverImage::head.image_path = ThumbnailUtil::Avatar::getImagePath(
            ThumbnailUtil::Avatar::Genre::COMBO, ThumbnailUtil::Avatar::Type::MET, "M", 
            dp.head_code, dp.head_color_code, dp.body_code, dp.body_color_code
        );
        
        self.Aspec::DriverImage::body.image_path = ThumbnailUtil::Avatar::getImagePath(
            ThumbnailUtil::Avatar::Genre::COMBO, ThumbnailUtil::Avatar::Type::SUITS, "M", 
            dp.head_code, dp.head_color_code, dp.body_code, dp.body_color_code
        );    
    }

    method setupBspecDrivers(context)
    {
        self.Bspec::HBox.clearWindow(context);

        var residence = GLOBAL_STATUS.user_profile.residence;
        var drivers_data = residence.getContractDriverList();

        for (var i = 0; i < drivers_data.size; i++)
        {
            var driver_item = hidden.BspecDriver.doCopy();

            if (i < drivers_data.size)
            {
                |var residence_id, var dp, var riding, var online, var online_grim_id| = drivers_data[i];
                driver_item.setInfo(residence_id, dp, online);
            }

            self.Bspec::HBox.appendChild(context, driver_item)
        }
    }
}

module ROOT::hidden::BspecDriver
{
    method setInfo(residence_id, dp, online)
    {
        self.Online.visible = online;
        self.TextFace.text = dp.display_name;

        var avatar_helmet_id = dp.head_color_code;

        self.ImageFace.image_path = ThumbnailUtil::Avatar::getImagePath(
            ThumbnailUtil::Avatar::Genre::SIMPLE, ThumbnailUtil::Avatar::Type::MET, "M", 
            dp.head_code, dp.head_color_code, dp.body_code, dp.body_color_code
        );

        var condition = dp.growth_parameter.condition;
        var condition_id = 2;
        if (condition > 8)
            condition_id = 1;
        else if (condition < -8)
            condition_id = 3;

        self.Condition.image_path = "piece/driver_condition/%{condition_id}.img";
    }    
}

module ROOT::BG
{
    attribute effect_end_func_;
    attribute effect_end_func2_;
    attribute on_left_;
    attribute on_left2_;

    method onInitialize(context)
    {
        self.on_left_ = true;
        self.on_left2_ = true;

        self.slideRight(context, true);
        self.slideRight2(context, true);
    }

    method setCategory(context, category)
    {
        var category_string = ABspecUtil::getCategoryString(category);

        CategoryName::TextFace.text = context.translate(ROOT, "CATEGORY_%{category_string}");
    }

    method slideLeft(context, warp, effect_end_func)
    {
        if (self.on_left_)
            return;

        self.on_left_ = true;
        self.effect_end_func_ = effect_end_func;

        var effect_end = method (context)
        {
            if (self.effect_end_func_ != nil)
            {
                self.effect_end_func_(context);
                self.effect_end_func_ = nil;
            }

            self.line_red::ColorFace::HightActor.start();         // NOTE: typo (height)
            self.line_red2::WidthActor.start();

            CategoryName::FadeActor.reverse = false;
            CategoryName::FadeActor.start();

            CategoryName::FadeActor.warp();

            CategoryName::TextFace.TransientReset();
            Category::AppearActor.start();

            self.SlideBG1::MoveActor.on_effect_end = nil;
        };

        line_red::ColorFace::HightActor.reverse = false;
        line_red::ColorFace::HightActor.reset();

        line_red2::WidthActor.reverse = false;
        line_red2::WidthActor.reset();

        CategoryName::FadeActor.reverse = false;
        CategoryName::FadeActor.reset()

        Category::HideActor.stop();

        Category::AppearActor.reverse = false;
        Category::AppearActor.reset();

        SlideBG1::MoveActor.reverse = false;
        SlideBG1::MoveActor.reset()

        SlideBG1::MoveActor.on_effect_end = self.*effect_end;
        SlideBG1::MoveActor.start();

        if (warp)
        {
            line_red::ColorFace::HightActor.warp();
            line_red2::WidthActor.warp();
            CategoryName::FadeActor.warp();
            Category::HideActor.warp();
            SlideBG1::MoveActor.warp();
        }
    }

    method slideRight(context, warp, effect_end_func)
    {
        if (!self.on_left_)
            return;

        self.on_left_ = false;
        self.effect_end_func_ = effect_end_func;

        var effect_end = method (context)
        {
            if (self.effect_end_func_ != nil)
            {
                self.effect_end_func_(context);
                self.effect_end_func_ = nil;
            }

            self.SlideBG1::MoveActor.on_effect_end = nil;
        };

        line_red::ColorFace::HightActor.reverse = true;
        line_red::ColorFace::HightActor.start();

        line_red2::WidthActor.reverse = true;
        line_red2::WidthActor.start();

        CategoryName::FadeActor.reverse = true;
        CategoryName::FadeActor.start();

        Category::AppearActor.stop();

        Category::HideActor.reverse = false;
        Category::HideActor.restart();

        SlideBG1::MoveActor.reverse = true;
        SlideBG1::MoveActor.reset();

        SlideBG1::MoveActor.on_effect_end = self.*effect_end;

        SlideBG1::MoveActor.start();

        if (warp)
        {
            line_red::ColorFace::HightActor.warp();
            line_red2::WidthActor.warp();
            SlideBG1::MoveActor.warp();
            CategoryName::FadeActor.warp();
            Category::HideActor.warp();
        }
    }

    method slideLeft2(context, warp, effect_end_func)
    {
        if (self.on_left2_)
            return;

        self.on_left2_ = true;
        self.effect_end_func2_ = effect_end_func;

        var effect_end = method (context)
        {
            if (self.effect_end_func2_ != nil)
            {
                self.effect_end_func2_(context);
                self.effect_end_func2_ = nil;
            }

            self.SlideBG2::MoveActor.on_effect_end = nil;
        };

        SlideBG2::MoveActor.reverse = true;

        SlideBG2::MoveActor.on_effect_end = self.*effect_end;
        SlideBG2::MoveActor.start();

        if (warp)
            SlideBG2::MoveActor.warp();
    }

    method slideRight2(context, warp, effect_end_func)
    {
        if (!self.on_left2_)
            return;

        self.on_left2_ = false;
        self.effect_end_func2_ = effect_end_func;

        var effect_end = method (context)
        {
            if (self.effect_end_func2_ != nil)
            {
                self.effect_end_func2_(context);
                self.effect_end_func2_ = nil;
            }

            self.SlideBG1::MoveActor.on_effect_end = nil;
        };

        SlideBG2::MoveActor.reverse = false;
        SlideBG2::MoveActor.on_effect_end = self.*effect_end;
        SlideBG2::MoveActor.start();

        if (warp)
            SlideBG2::MoveActor.warp();
    }

    module ROOT::GameDetail::Info::HBox::Garage
    {
        attribute regulation_;

        method setRegulation(regulation)
        {
            regulation_ = regulation;
        }

        method onActivate(context)
        {
            sound.play("ok");

            GaragePopup.open(context, nil, self.regulation_);
            ROOT::HeaderGT5::HBox::RidingCar.refresh(context);

            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            ROOT::GameDetail.cb_canceled_event(context, nil);

            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context, event)
        {
            BalloonTip.set_value(context, event.widget, context.translate(ROOT, "GTModeProject::GTModeRoot", "GARAGE"), 0);

            return EVENTRESULT_STOP;
        }

        method onFocusLeave(context, event)
        {
            BalloonTip.reset_value();

            return EVENTRESULT_STOP;
        }
    }

    module ROOT::GameDetail::Info::HBox::DriverList
    {
        method onActivate(context)
        {
            sound.play("ok");

            var mode = UserProfileProject::DriverPopup::Mode["FINDER"];
            var mode_params = Map();
            UserProfileProject::DriverPopup.open(context, mode, mode_params);

            Drivers.initialize(context);

            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            ROOT::GameDetail.cb_canceled_event(context, nil);

            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context, event)
        {
            BalloonTip.set_value(context, event.widget, context.translate(ROOT, "GTModeProject::GTModeRoot", "DRIVER"), 0);

            return EVENTRESULT_STOP;
        }

        method onFocusLeave(context, event)
        {
            BalloonTip.reset_value();

            return EVENTRESULT_STOP;
        }
    }

    module GameDetail::Info::HBox::EnemyCarList
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            var gp = GameDetail.gp_;
            UserProfileProject::EnemyCarListPopup.open(context, gp.event);
        }

        method onCancel(context)
        {
            ROOT::GameDetail.cb_canceled_event(context, nil);

            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context, event)
        {
            BalloonTip.set_value(context, self, context.translate(ROOT, "ENEMY_CAR_LIST"), 0);

            return EVENTRESULT_STOP;
        }

        method onFocusLeave(context, event)
        {
            BalloonTip.reset_value();

            return EVENTRESULT_STOP;
        }
    }

    module GameDetail::Info::HBox::Regulation
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            var gp = GameDetail.gp_;
            var regulation = gp.event.regulation;

            var report = ROOT.checkRegulation(context, gp, true);
            var res = RegulationReportPopup.open(context, regulation, report);

            if (res)
            {
                GaragePopup.open(context, nil, gp.event.regulation);
                ROOT::HeaderGT5::HBox::RidingCar.refresh(context);
            }

            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            ROOT::GameDetail.cb_canceled_event(context);
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context, event)
        {
            BalloonTip.set_value(context, self, context.translate(ROOT, "BALLOON_REGULATION"), 0);

            return EVENTRESULT_STOP;
        }

        method onFocusLeave(context, event)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_STOP;
        }
    }
}

