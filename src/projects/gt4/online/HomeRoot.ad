module PROJECT::ROOT
{
	function onLoad(context)
	{
		setBlinkActor(ButtonsR::Garage::bgf);
		setBlinkActor(ButtonsR::Setting::bgf);
		setBlinkActor(ButtonsR::Profile::bgf);
		setBlinkActor(ButtonsR::LogOff::bgf);
		setBlinkActor(ButtonsL::QuickArcade::imagef);
		setBlinkActor(ButtonsL::PrivateRace::imagef);
		setBlinkActor(ButtonsL::TimeAttack::imagef);
		setBlinkActor(ButtonsL::TunedCar::imagef);
		setBlinkActor(ButtonsL::News::imagef);
	}

	function onUnLoad(context)
	{
	}

	static sFocusWidget = nil;

	function onInitialize(context)
	{
		enterPage(context, HomeRoot, "Online Home");
		var lang = main::game.option.language;
		ButtonsL.setInfoLanguage(lang);
		ButtonsL::News::new.visible = main::NotifyNewInfoNews;
		CarFace::MoveActor.out = true;
		CarFace::MoveActor.warp();
		CarFace::MoveActor.out = false;
		ButtonsR::MoveActor.out = true;
		ButtonsR::MoveActor.warp();
		ButtonsR::MoveActor.out = false;
		CarFace.action_type = "normal";
		CarFace.quality_level = 1;
		CarFace.mirror = 0;
		CarFace.car_model.independent = true;
		if (main::game.garage.hasRidingCar())
		{
			var car_garage = main::game.garage.riding_car;
			CarFace.car_garage = car_garage;
			CarFace.syncLoading();
			CarFace.car_model.motion = 0;
			CarFace.car_model.ry = 90.0;
			CarFace.car_model.warp();
		}

		CarFace.car_model.alpha = 1.0;
		CarFace.car_model.alphaInterpolateSpeed = 1.0;
		CarFace.car_model.transparentRatio = 1.0;
	
		if (sFocusWidget != nil)
		{
			HomeRoot.setFocus(sFocusWidget);
			sFocusWidget = nil;
		}
		else if (HomeRoot.getFocusedWidget() == nil)
		{
			var fw = nil;
			switch(getCurrentModeString())
			{
				case "QuickArcade":
					fw = ButtonsL::QuickArcade;
					break;
				case "TunerCar":
					fw = ButtonsL::TunedCar;
					break;
				case "Private":
					fw = ButtonsL::PrivateRace;
					break;
				case "TimeTrial":
					fw = ButtonsL::TimeAttack;
					break;
				default:
					fw = ButtonsL::QuickArcade;
					break;
			}
			HomeRoot.setFocus(fw);
		}

		clearCurrentRuleSet();
		var event = main::menu::MScriptEvent(context, HomeRoot, "on_initialize");
		context.pushEvent(event);
	}

	function onFinalize(context)
	{
		DeleteWatcher();
		leavePage(context, HomeRoot);
	}
	
	function onCancel(context)
	{
		main::sound.play("cancel");
		var res = openConfirmDialog(context, DIALOG_QUERY, context.translate(HomeRoot, "DO_YOU_QUIT_ONLINE"));
		if (res)
			quit(context);
	
		return EVENTRESULT_FILTER;
	}

	function on_initialize(context)
	{
		main::network.clearGameListFilter();
		return EVENTRESULT_FILTER;
	}
	
	function resetSelectedEventType()
	{
		main::game.selected_event_type = -1;
	}

	function onKeyPress(context, event)
	{
		switch(event.keysym)
		{
			case PS2_PAD_CTRL_L1:
				var enable_info = isOnlineManager();
				if (enable_info)
				{
					TrafficInfoRoot::open(context);
					return EVENTRESULT_FILTER;
				}
				break;
		}
		return EVENTRESULT_CONTINUE;
	}

	function setEventGameListFilter(context)
	{
		var filter = main::network.setGameListFilter("GENERIC_FIELD_3", "EQUAL_TO", 0);
		if (filter <= 0)
		{
			openOnlineErrorDialog(context);
			restart(context);
			return;
		}
	}
}

module PROJECT::ROOT::ButtonsR::Garage
{
	function onActivate(context)
	{
		openGarage(context, 0);
		return EVENTRESULT_FILTER;
	}

	function openGarage(context, slot)
	{
		main::sound.play("ok");
	
		var manager = main::menu::MMemoryCardManager("MODE_LOAD_GAME", slot);
		if (!manager.isConnect())
		{
			openConfirmDialog(context, DIALOG_ERROR, context.translate(HomeRoot, "MemoryCard", "no_memorycard_slot_n").format(slot + 1));
			return EVENTRESULT_CONTINUE;
		}
	
		var r = nil;
		var game = nil;
		while (true)
		{
			var m = checkGameData(context, 0, manager, slot);
			if (m == nil)
			{
				return EVENTRESULT_CONTINUE;
			}
			else
			{
				openProgressDialog(context, context.translate(HomeRoot, "MemoryCard", "now_loading"));
				|r, game| = loadGameDataForTrade(context, manager);
				closeProgressDialog(context);
				if (r != "OK")
				{
					if (!reportGameDataError(context, 0, 0, r, slot))
						return EVENTRESULT_CONTINUE;
				}
				else
					break;
			}
		}
	
		if (game == nil)
		{
			openConfirmDialog(context, DIALOG_ERROR, "fatal error happend.");
			return EVENTRESULT_CONTINUE;
		}
	
		GarageRoot::resetCondition();
		GarageRoot::open(context, game, slot);
	}

	function onKeyPress(context, event)
	{
		var keysym = event.keysym;
		if (keysym == PS2_PAD_CTRL_L3_LEFT)
		{
			main::sound.play("cursor");
			HomeRoot.setFocus(ButtonsL::QuickArcade);
			return EVENTRESULT_FILTER;
		}
	
		return EVENTRESULT_CONTINUE;
	}
}

module PROJECT::ROOT::ButtonsR::Setting
{
	function onActivate(context)
	{
		if (!sureRiding(context))
			return EVENTRESULT_FILTER;
	
		main::sound.play("ok");
		main::network.setSystemEventEnable(0);
		main::game.major_menu_project = "online";
		main::game.major_menu_page = HomeRoot.name;
		start_project(context, "setting");

		main::game.race_code = "";
		main::game.course_code = "";
		main::game.major_menu_widget = "";

		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::ButtonsR::Profile
{
	function onActivate(context)
	{
		main::sound.play("ok");
		start_page(context, ProfileRoot);
		return EVENTRESULT_FILTER;
	}
	
	function onKeyPress(context, event)
	{
		var keysym = event.keysym;
	
		if (keysym == PS2_PAD_CTRL_L3_LEFT)
		{
			main::sound.play("cursor");
			HomeRoot.setFocus(ButtonsL::QuickArcade);
			return EVENTRESULT_FILTER;
		}

		return EVENTRESULT_CONTINUE;
	}
}

	module PROJECT::ROOT::ButtonsR::LogOff
	{
		function onActivate(context, event)
		{
			main::sound.play("ok");
	
			var res = openConfirmDialog(context, DIALOG_QUERY, context.translate(HomeRoot, "DO_YOU_QUIT_ONLINE"));
			if (res)
				quit(context);
	
			return EVENTRESULT_FILTER;
		}
	}
	
module PROJECT::ROOT::ButtonsL
{
	function setInfoLanguage(lang)
	{
		var JP_flag = false;
		var US_flag = false;
		if (lang == "JP")
		{
			JP_flag = true;
			US_flag = false;
		}
		else
		{
			JP_flag = false;
			US_flag = true;
		}

		ButtonsL::QuickArcade::info_JP.visible = JP_flag;
		ButtonsL::TunedCar::info_JP.visible = JP_flag;
		ButtonsL::TimeAttack::info_JP.visible = JP_flag;
		ButtonsL::PrivateRace::info_JP.visible = JP_flag;
		ButtonsL::News::info_JP.visible = JP_flag;
		ButtonsL::QuickArcade::info_US.visible = US_flag;
		ButtonsL::TunedCar::info_US.visible = US_flag;
		ButtonsL::TimeAttack::info_US.visible = US_flag;
		ButtonsL::PrivateRace::info_US.visible = US_flag;
		ButtonsL::News::info_US.visible = US_flag;
	}

	function onKeyPress(context, event)
	{
		var keysym = event.keysym;
		if (keysym == PS2_PAD_CTRL_L3_RIGHT)
		{
			main::sound.play("cursor");
			HomeRoot.setFocus(ButtonsR::Garage);
			return EVENTRESULT_FILTER;
		}

		return EVENTRESULT_CONTINUE;
	}
}

module PROJECT::ROOT::ButtonsL::QuickArcade
{
    function onActivate(context, event)
    {
        main::sound.play("ok");
        setEventGameListFilter(context);
        setMyCarEventNow(0);
        resetSelectedEventType();
        start_page(context, P2PEventRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ButtonsL::TunedCar
{
    function onActivate(context, event)
    {
        if (!canRaceByTheCar(context))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        setMyCarEventNow(1);
        setEventGameListFilter(context);
        resetSelectedEventType();
        start_page(context, P2PEventRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ButtonsL::PrivateRace
{
    function onActivate(context, event)
    {
        if (main::game.garage.hasRidingCar() && !canRaceByTheCar(context))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        resetSelectedEventType();
        LobbyRoot::open(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ButtonsL::TimeAttack
{
    function setupEvent(context)
    {
        setTimeTrialEventNow(1);
        main::game.selected_event_type = 2;
    }

    function onActivate(context, event)
    {
        main::sound.play("ok");
        setEventGameListFilter(context);
        setupEvent(context);
        start_page(context, P2PEventRoot);
        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        var keysym = event.keysym;
        if (keysym == PS2_PAD_CTRL_L3_RIGHT)
        {
            main::sound.play("cursor");
            HomeRoot.setFocus(TA_Info);
            return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }
}

module PROJECT::ROOT::ButtonsL::TimeAttack::TA_Info
{
    function onActivate(context, event)
    {
        main::sound.play("ok");
        NewsDialog::open(context, "TAInfo");
        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        var keysym = event.keysym;
        if (keysym == PS2_PAD_CTRL_L3_RIGHT)
        {
            main::sound.play("cursor");
            HomeRoot.setFocus(ButtonsR::Garage);
            return EVENTRESULT_FILTER;
        }

        if (keysym == PS2_PAD_CTRL_L3_LEFT)
        {
            main::sound.play("cursor");
            HomeRoot.setFocus(ButtonsL::TimeAttack);
            return EVENTRESULT_FILTER;
        }
		
        return EVENTRESULT_CONTINUE;
    }
}

module PROJECT::ROOT::ButtonsL::News
{
    function onActivate(context)
    {
        main::sound.play("ok");
        NewsDialog::open(context, "News");
        return EVENTRESULT_FILTER;
    }
}