//---------------------------------------------------------------------------------------
// CourseEntryRoot.ad
//
// Root handling course selection for freerun, etc
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module PROJECT::ROOT
{
#ifdef GT4O_US_BETA
    static page_title;
    static course_list;
    static last_select_course;
    static course_index;
    static direction_index;
    static freerun_info;
    static practice_info;
    static photo_drive_info;
    static event_info;
    static menu_mode;
#else
    static page_title = nil;
    static course_list = nil;
    static last_select_course = nil;
    static course_index = nil;
    static direction_index = nil;
    static freerun_info = nil;
    static practice_info = nil;
    static photo_drive_info = nil;
    static event_info = nil;
    static menu_mode = nil;
#endif

    function setFreeRunInfo(info)
    {
        freerun_info = info;
    }
    
    function setPracticeInfo(info)
    {
        practice_info = info;
    }
    
    function setPhotoDriveInfo(info)
    {
        photo_drive_info = info;
    }

    function setRaceEventInfo(info)
    {
        event_info = info;
    }

    function onLoad(context)
    {
        Template.visible = false;

        setFadeActor(Buttons::Unit::FreeRun::imagef);
        setFadeActor(Buttons::Unit::Practice::imagef);
        setFadeActor(Buttons::Unit::PhotoDrive::imagef);
        setFadeActor(Buttons::Unit::RaceEvent::imagef);
    }

    function onInitialize(context)
    {
        page_title = main::game.menuRef();

        context.loadGpb("/projects/gtmode", page_title);

        enterPage(context, ROOT, page_title);

        course_list = EventData[page_title + "List"];
        last_select_course = nil;
        course_index = -1;
        BG::image.from_disk = false;
        BG::image.visible = true;
        BG::image.cache = false;
        BG::image.setImagePath("image/gtmode/course/bg_" + page_title + ".png");
        BG::image.doInitialize(context);

        CourseList.visible = false;
        CourseList::SelectBox.y = false;
        CourseList::SelectBox.actor = main::menu::MMoveActor(CourseList::SelectBox, 0.0, 192.0);
        CourseList::SelectBox.actor.ratio = 0.25;
        CourseList::SelectBox.actor.out = true;
        CourseList::SelectBox.actor.warp();

        Buttons.visible = false;
        Buttons::Unit.y = false;
        Buttons::Unit.actor = main::menu::MMoveActor(Buttons::Unit, 0.0, 192.0);
        Buttons::Unit.actor.ratio = 0.25;
        Buttons::Unit.actor.out = true;
        Buttons::Unit.actor.warp();

        CourseImage.visible = false;
        CourseImage.actor = main::menu::MFadeActor(CourseImage, 1.0);
        CourseImage.actor.repeat = false;
        CourseImage.actor.period = 0.3;
        CourseImage.actor.over = 0.5;
        CourseImage.actor.out = true;
        CourseImage.actor.warp();

        CourseInfo.visible = false;
        CourseInfo.actor = main::menu::MFadeActor(CourseInfo, 1.0);
        CourseInfo.actor.repeat = false;
        CourseInfo.actor.period = 0.3;
        CourseInfo.actor.over = 0.5;
        CourseInfo.actor.out = true;
        CourseInfo.actor.warp();

        CourseMap.visible = false;
        CourseMap.x = 0.0;
        CourseMap.actor = main::menu::MMoveActor(CourseMap, PS2_SCREEN_W_F, CourseMap.y);
        CourseMap.actor.ratio = 0.2;
        CourseMap.actor.out = true;
        CourseMap.actor.warp();

        init_course_item(context);
        init_mode(context, 0);

        var event = main::menu::MScriptEvent(context, ROOT, "openCB");
        context.pushEvent(event);

        if (page_title == "PowerAndSpeed")
            main::sound.keepMusic("POWERSPEED");
        else
            main::sound.keepMusic("RACE");
    }

    function openCB(context)
    {
        Car.visible = false;
        Car::CarFace.action_type = "normal";
        Car::CarFace.quality_level = 1;

        if (main::game.garage.hasRidingCar())
        {
            Car::CarFace.car_garage = main::game.garage.riding_car;
            Car::CarFace.syncLoading();
        }

        if (Car::CarFace.car_model != nil)
        {
            Car::CarFace.car_model.motion = true;
            Car::CarFace.car_model.ry = 120.0;
            Car::CarFace.car_model.warp();
        }

        Car.visible = true;
    }

    function onFinalize(context)
    {
        clear_course_list(context);

        CourseList::SelectBox.actor = nil;
        Buttons::Unit.actor = nil;
        CourseImage.actor = nil;
        CourseInfo.actor = nil;
        CourseMap.actor = nil;
        CourseInfo::message.text = nil;
        CourseInfo::name.text = nil;

        leavePage(context, ROOT);

        context.unloadGpb(page_title);

        page_title = nil;
        course_list = nil;
        last_select_course = nil;
        course_index = nil;
        direction_index = nil;
        freerun_info = nil;
        practice_info = nil;
        photo_drive_info = nil;
        event_info = nil;
        menu_mode = nil;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");

        switch (menu_mode)
        {
            case 0:
                var page_title = main::game.menuPop();
                set_last_focus(page_title);
                start_page(context, TopRoot);
                break;

            case 1:
                init_mode(context, 0);
                break;
        }

        return EVENTRESULT_FILTER;
    }

    function init_mode(context, mode)
    {
        switch (mode)
        {
            case 0:
                set_can_focus(CourseList::SelectBox, 1);
                set_can_focus(Buttons::Unit, 0);
                start_course_menu(context);
                Buttons::Unit.actor.out = true;
                context.sync(0.15);
                CourseList::SelectBox.actor.out = false;
                break;

            case 1:
                init_entry_item(context);
                set_can_focus(CourseList::SelectBox, 0);
                set_can_focus(Buttons::Unit, 1);
                start_entry_menu(context);
                CourseList::SelectBox.actor.out = true;
                context.sync(0.15);
                Buttons::Unit.actor.out = false;
                break;
        }

        CourseList.visible = true;
        Buttons.visible = true;
        menu_mode = mode;
    }

    function start_course_menu(context)
    {
        var composite = CourseList::SelectBox;
        if (last_select_course != nil)
        {
            for (var i = 0; i < composite.countChild(); i++)
            {
                var item = composite.getChild(i);
                for (var j = 0; j < 2; j++)
                {
                    // COMPILER NOTE: Original produces an empty string, we don't, it's fine
                    var attr = "name%{j}";
                    if (item.defined(attr) && item[attr] == last_select_course)
                    {
                        ROOT.setFocus(item);
                        item["ScrollBox"]["SelectBox"].index = j;

                        print "reselect %{last_select_course}\n";
                        break;
                    }
                }
            }
        }

        if (ROOT.getFocusedWidget() == nil)
            ROOT.setFocus(composite.first);
    }

    function start_entry_menu(context)
    {
        ROOT.setFocus(Buttons::Unit.first);
    }

    function init_course_item(context)
    {
        ROOT.setFocus(nil);
        clear_course_list(context);

        var composite = CourseList::SelectBox;

        if (course_list == nil)
            return;

        CourseList.visible = false;

        var num = 0;
        for (var i = 0; i < course_list.size; i++)
        {
            var code1 = course_list[i][0];
            var code2 = course_list[i][1];
            if (code1 != nil && !main::game.isCourseAvailable(code1))
                code1 = nil;

            if (code2 != nil && !main::game.isCourseAvailable(code2))
                code2 = nil;

            if (code1 != nil || code2 != nil)
                num++;
        }

        var step = Template::CourseItem::image.w;
        var x;
        if (num < CourseList::SelectBox.w / step)
            x = (CourseList
                ::SelectBox.w - (step * num)) / 2;
        else
            x = 0.0;

        for (var i = 0; i < course_list.size; i++)
        {
            var code1 = course_list[i][0];
            var code2 = course_list[i][1];

            if (code1 != nil && !main::game.isCourseAvailable(code1))
                code1 = nil;

            if (code2 != nil && !main::game.isCourseAvailable(code2))
                code2 = nil;

            if (code1 != nil || code2 != nil)
            {
                var item = add_course(context, composite, code1, code2);
                item.x = x;
                x += Template::CourseItem::image.w;
            }
        }

        CourseList.visible = true;
    }

    function add_course(context, target, name0, name1)
    {
        var item = Template::CourseItem.doCopy();
        var image = item["image"];
        var center_x = image.x + (image.w / 2);
        var center_y = image.y + (image.h / 2);
        
        image.from_disk = false;
        image.cache = true;
        image.setImagePath("image/piece/crs_logo/" + name0 + ".png");
        
        var imagef = item["imagef"];
        imagef.from_disk = false;
        imagef.cache = true;
        imagef.setImagePath("image/piece/crs_logo/" + name0 + ".png");

        target.appendChild(context, item);
        image.adjustSize();
        
        var scale = 0.9;
        var w = image.w * scale;
        var h = image.h * scale;
        image.x = center_x - (w / 2);
        image.y = center_y - (h / 2);
        image.w = w;
        image.h = h;

        imagef.x = image.x;
        imagef.y = image.y;
        imagef.w = image.w;
        imagef.h = image.h;
        setFadeActor(imagef);

        item.defineStatic("name0", name0);
        item.defineStatic("name1", name1);
        item["ScrollBox"].visible = false;

        if (name0 != nil && name1 != nil)
        {
            add_direction(context, item, "DirectionForward");
            add_direction(context, item, "DirectionReverse");
        }

        return item;
    }

    function add_direction(context, target, namekey)
    {
        var item = Template::DirectionItem.doCopy();
        item["Label"].text = context.translate(ROOT, namekey);

        var box = target["ScrollBox"];
        box["SelectBox"].appendChild(context, item);

        if (box["dec_arrow"].actor == nil)
            setFadeActor(box["dec_arrow"]);

        if (box["inc_arrow"].actor == nil)
            setFadeActor(box["inc_arrow"]);
    }

    function clear_course_list(context)
    {
        CourseList::SelectBox.clearChildren(context);
    }

    function set_can_focus(composite, canfocus)
    {
        for (var i = 0; i < composite.countChild(); i++)
        {
            var w = composite.getChild(i);
            w.can_focus = canfocus;
        }
    }

    function init_entry_item(context)
    {
        ROOT.setFocus(nil);
        Buttons.visible = false;

        var course_code = main::game.course_code;

        var n = 0;
        if (freerun_info != nil)
            n++;

        if (practice_info != nil)
            n++;

        if (photo_drive_info != nil)
            n++;

        if (event_info != nil)
            n++;

        var step = 144.0;
        var x = 320.0 - ((step * n) - 16.0) / 2.0;
        if (freerun_info != nil)
        {
            Buttons::Unit::FreeRun.x = x;
            x += step;

            var freerun_image_path = "image/gtmode/course/icon_" + freerun_info.race_code + ".png";
            Buttons::Unit::FreeRun::image.from_disk = false;
            Buttons::Unit::FreeRun::image.cache = false;
            Buttons::Unit::FreeRun::image.setImagePath(freerun_image_path);
            Buttons::Unit::FreeRun::image.doInitialize(context);
            Buttons::Unit::FreeRun::image.adjustSize();
            Buttons::Unit::FreeRun::image.x = (Buttons
                ::Unit::FreeRun.w - Buttons::Unit::FreeRun::image.w) / 2;
            
            Buttons::Unit::FreeRun::imagef.from_disk = false;
            Buttons::Unit::FreeRun::imagef.cache = false;
            Buttons::Unit::FreeRun::imagef.setImagePath(freerun_image_path);
            Buttons::Unit::FreeRun::imagef.doInitialize(context);
            Buttons::Unit::FreeRun::imagef.adjustSize();
            Buttons::Unit::FreeRun::imagef.x = Buttons::Unit::FreeRun::image.x;

            Buttons::Unit::FreeRun::label.text = context.translate(ROOT, freerun_info.race_code);
            Buttons::Unit::FreeRun::label.adjustScale();
            Buttons::Unit::FreeRun.tooltip = true;
            Buttons::Unit::FreeRun.tooltip_key = freerun_info.race_code;
            Buttons::Unit::FreeRun.visible = true;
            
            if (freerun_info.entrance_fee != nil && freerun_info.entrance_fee > 0)
                Buttons::Unit::FreeRun::info.text = "Cr. " + main::menu::MUtility::GetMoneyString(freerun_info.entrance_fee);
            else
                Buttons::Unit::FreeRun::info.text = "";
        }
        else
            Buttons::Unit::FreeRun.visible = false;

        if (practice_info != nil)
        {
            Buttons::Unit::Practice.x = x;
            x += step;

            var practice_image_path = "image/gtmode/course/icon_" + practice_info.race_code + ".png";
            Buttons::Unit::Practice::image.from_disk = false;
            Buttons::Unit::Practice::image.cache = false;
            Buttons::Unit::Practice::image.setImagePath(practice_image_path);
            Buttons::Unit::Practice::image.doInitialize(context);
            Buttons::Unit::Practice::image.adjustSize();
            Buttons::Unit::Practice::image.x = (Buttons
                ::Unit::Practice.w - Buttons::Unit::Practice::image.w) / 2;
            
            Buttons::Unit::Practice::imagef.from_disk = false;
            Buttons::Unit::Practice::imagef.cache = false;
            Buttons::Unit::Practice::imagef.setImagePath(practice_image_path);
            Buttons::Unit::Practice::imagef.doInitialize(context);
            Buttons::Unit::Practice::imagef.adjustSize();
            Buttons::Unit::Practice::imagef.x = Buttons::Unit::Practice::image.x;

            Buttons::Unit::Practice::label.text = context.translate(ROOT, practice_info.race_code);
            Buttons::Unit::Practice::label.adjustScale();
            Buttons::Unit::Practice.tooltip = true;
            Buttons::Unit::Practice.tooltip_key = practice_info.race_code;
            Buttons::Unit::Practice.visible = true;
            
            if (practice_info.entrance_fee != nil && practice_info.entrance_fee > 0)
                Buttons::Unit::Practice::info.text = "Cr. " + main::menu::MUtility::GetMoneyString(practice_info.entrance_fee);
            else
                Buttons::Unit::Practice::info.text = "";
        }
        else
            Buttons::Unit::Practice.visible = false;

        if (photo_drive_info != nil)
        {
            Buttons::Unit::PhotoDrive.x = x;
            x += step;

            var photo_drive_image_path = "image/gtmode/course/icon_" + photo_drive_info.race_code + ".png";
            Buttons::Unit::PhotoDrive::image.from_disk = false;
            Buttons::Unit::PhotoDrive::image.cache = false;
            Buttons::Unit::PhotoDrive::image.setImagePath(photo_drive_image_path);
            Buttons::Unit::PhotoDrive::image.doInitialize(context);
            Buttons::Unit::PhotoDrive::image.adjustSize();
            Buttons::Unit::PhotoDrive::image.x = (Buttons
                ::Unit::PhotoDrive.w - Buttons::Unit::PhotoDrive::image.w) / 2;
            
            Buttons::Unit::PhotoDrive::imagef.from_disk = false;
            Buttons::Unit::PhotoDrive::imagef.cache = false;
            Buttons::Unit::PhotoDrive::imagef.setImagePath(photo_drive_image_path);
            Buttons::Unit::PhotoDrive::imagef.doInitialize(context);
            Buttons::Unit::PhotoDrive::imagef.adjustSize();
            Buttons::Unit::PhotoDrive::imagef.x = Buttons::Unit::PhotoDrive::image.x;

            Buttons::Unit::PhotoDrive::label.text = context.translate(ROOT, photo_drive_info.race_code);
            Buttons::Unit::PhotoDrive::label.adjustScale();
            Buttons::Unit::PhotoDrive.tooltip = true;
            Buttons::Unit::PhotoDrive.tooltip_key = photo_drive_info.race_code;
            Buttons::Unit::PhotoDrive.visible = true;
            
            if (photo_drive_info.entrance_fee != nil && photo_drive_info.entrance_fee > 0)
                Buttons::Unit::PhotoDrive::info.text = "Cr. " + main::menu::MUtility::GetMoneyString(photo_drive_info.entrance_fee);
            else
                Buttons::Unit::PhotoDrive::info.text = "";
        }
        else
            Buttons::Unit::PhotoDrive.visible = false;

        if (event_info != nil)
        {
            Buttons::Unit::RaceEvent.x = x;

            var race_event_image_path = "image/gtmode/course/icon_" + event_info.race_code + ".png";
            Buttons::Unit::RaceEvent::image.from_disk = false;
            Buttons::Unit::RaceEvent::image.cache = false;
            Buttons::Unit::RaceEvent::image.setImagePath(race_event_image_path);
            Buttons::Unit::RaceEvent::image.doInitialize(context);
            Buttons::Unit::RaceEvent::image.adjustSize();
            Buttons::Unit::RaceEvent::image.x = (Buttons
                ::Unit::RaceEvent.w - Buttons::Unit::RaceEvent::image.w) / 2;
            
            Buttons::Unit::RaceEvent::imagef.from_disk = false;
            Buttons::Unit::RaceEvent::imagef.cache = false;
            Buttons::Unit::RaceEvent::imagef.setImagePath(race_event_image_path);
            Buttons::Unit::RaceEvent::imagef.doInitialize(context);
            Buttons::Unit::RaceEvent::imagef.adjustSize();
            Buttons::Unit::RaceEvent::imagef.x = Buttons::Unit::RaceEvent::image.x;

            Buttons::Unit::RaceEvent::label.text = context.translate(ROOT, event_info.race_code);
            Buttons::Unit::RaceEvent::label.adjustScale();
            Buttons::Unit::RaceEvent.tooltip = true;
            Buttons::Unit::RaceEvent.tooltip_key = event_info.race_code;
            Buttons::Unit::RaceEvent.visible = true;
            
            if (event_info.entrance_fee != nil && event_info.entrance_fee > 0)
                Buttons::Unit::RaceEvent::info.text = "Cr. " + main::menu::MUtility::GetMoneyString(event_info.entrance_fee);
            else
                Buttons::Unit::RaceEvent::info.text = "";
        }
        else
            Buttons::Unit::RaceEvent.visible = false;

        Buttons.visible = true;
    }

    function get_course_index(name)
    {
        for (var i = 0; i < course_list.size; i++)
        {
            if (course_list[i][0] == name ||
                course_list[i][1] == name)
                return i;
        }

        return -1;
    }
}

module PROJECT::ROOT::CourseList::SelectBox
{
    function onValueChanged(context)
    {
        return 0;
    }

    function onActivate(context, event, object)
    {
        var item = CourseEntryRoot.getFocusedWidget();
        if (item["name0"] != "nurburgring" &&
            item["name0"] != "testcourse" &&
            item["name0"] != "lasvegas")
        {
            if (!sureNoTestCar(context))
                return EVENTRESULT_FILTER;
        }

        if (item == nil)
        {
            print "error: item is nil\n";
            main::sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        direction_index = item["ScrollBox"]["SelectBox"].index;
        var attr = "name%{direction_index}"; // COMPILER NOTE: Original has empty string in interpolation
        if (!item.defined(attr))
        {
            print "error: attribute %{attr} not found\n";
            main::sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");

        var name = item[attr];
        main::game.course_code = name;
        last_select_course = name;

        print "item %{name} selected\n";

        context.cursor_visible = false;
        ROOT.setFocus(nil);

        if (page_title == "PowerAndSpeed")
        {
            setFreeRunInfo(getFreeRunInfoByCourse(main::game.course_code, EventData::PowerAndSpeedEvents));
            setPracticeInfo(getPracticeInfoByCourse(main::game.course_code, EventData::PowerAndSpeedEvents));
            setPhotoDriveInfo(getPhotoDriveInfoByCourse(main::game.course_code, EventData::PowerAndSpeedEvents));
            setRaceEventInfo(getEventInfoByCourse(main::game.course_code, EventData::PowerAndSpeedEvents));
        } 
        else
        {
            setFreeRunInfo(getFreeRunInfoByCourse(main::game.course_code));
            setPracticeInfo(getPracticeInfoByCourse(main::game.course_code));
            setPhotoDriveInfo(getPhotoDriveInfoByCourse(main::game.course_code));
            setRaceEventInfo(getEventInfoByCourse(main::game.course_code));
        }

        init_mode(context, 1);
        context.cursor_visible = true;
        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        var item = ROOT.getFocusedWidget();
        var box = item["ScrollBox"]["SelectBox"];

        switch (event.keysym)
        {
            case PS2_PAD_CTRL_L3_UP:
                if (box.decIndex())
                    main::sound.play("cursor");
                return EVENTRESULT_FILTER;
                
            case PS2_PAD_CTRL_L3_DOWN:
                if (box.incIndex())
                    main::sound.play("cursor");
                return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }
}

module PROJECT::ROOT::Buttons::Unit::FreeRun
{
    function onActivate(context, event, object)
    {
#ifdef GT4O_US_BETA
        if (page_title == "PowerAndSpeed")
            ;
#else
        // NOTE: In GT4 this never gets popped (compiler bug from their end?)
        page_title == "PowerAndSpeed";
#endif

        if (!sureRiding(context))
        {
            return EVENTRESULT_FILTER;
        }

        var price = freerun_info.entrance_fee;

        if (!sureEnoughMoney(context, price))
        {
            return EVENTRESULT_FILTER;
        }

        if (!checkEntryTire(context, freerun_info.race_code, main::game.course_code))
        {
            return EVENTRESULT_FILTER;
        }

        main::sound.play("next");
        main::game.incMoney(-price);
        main::game.race_code = freerun_info.race_code;
        main::game.major_menu_project = "gtmode";
        main::game.major_menu_page = ROOT.name;

        if (page_title == "PowerAndSpeed")
            exit_menu(context, "machinetest");
        else
            exit_menu(context, "freerun");

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Unit::Practice
{
    function onActivate(context, event, object)
    {
        if (!sureRiding(context))
        {
            return EVENTRESULT_FILTER;
        }

        if (!sureNoOpenModel(context))
        {
            return EVENTRESULT_FILTER;
        }

        if (page_title != "PowerAndSpeed")
            if (!sureNoTestCar(context))
            {
                return EVENTRESULT_FILTER;
            }
        

        var price = practice_info.entrance_fee;

        if (!sureEnoughMoney(context, price))
        {
            return EVENTRESULT_FILTER;
        }

        if (!checkEntryTire(context, practice_info.race_code, main::game.course_code))
        {
            return EVENTRESULT_FILTER;
        }

        main::sound.play("next");
        main::game.incMoney(-price);
        main::game.race_code = practice_info.race_code;

        ROOT.visible = false;

        var ctype = main::menu::MCourseData::GetType(main::game.course_code);
        var dirt = ctype == "dirt" || ctype == "snow";
        main::game.max_entry = 6;

        var max_entry = main::menu::MCourseData::GetMaxCarNum(main::game.course_code);
        var offset = 0.0;
        var range = 0.04;
        var list = main::menu::MCarData::PickUpEnemyCars(main::game.garage.riding_car, 
            EnemyCarData::enemy_carlist,
            offset, range,
            max_entry - 1,
            dirt);
        
        for (var i = 0; i < list.size; i++)
        {
            main::game.setEntryCarCode(i + 1, list[i][0], list[i][1]);
        }
        
        main::game.overwrite_enemy_num = list.size;
        ROOT.visible = true;

        main::game.major_menu_project = "gtmode";
        main::game.major_menu_page = ROOT.name;

        if (page_title == "PowerAndSpeed")
            exit_menu(context, "machinetest");
        else
            exit_menu(context, "practice");

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Unit::PhotoDrive
{
    function onActivate(context, event, object)
    {
        if (!sureRiding(context))
        {
            return EVENTRESULT_FILTER;
        }

        var price = photo_drive_info.entrance_fee;

        if (!sureEnoughMoney(context, price))
        {
            return EVENTRESULT_FILTER;
        }

        if (!checkEntryTire(context, photo_drive_info.race_code, main::game.course_code))
        {
            return EVENTRESULT_FILTER;
        }

        main::sound.play("next");
        main::game.incMoney(-price);
        main::game.race_code = photo_drive_info.race_code;
        main::game.major_menu_project = "gtmode";
        main::game.major_menu_page = ROOT.name;

        if (page_title == "PowerAndSpeed")
            exit_menu(context, "machinetest");
        else
            exit_menu(context, "photo_drive");

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Unit::RaceEvent
{
    function onActivate(context, event, object)
    {
        if (!sureRiding(context))
        {
            return EVENTRESULT_FILTER;
        }

        if (!sureNoOpenModel(context))
        {
            return EVENTRESULT_FILTER;
        }

        if (!sureNoTestCar(context))
        {
            return EVENTRESULT_FILTER;
        }

        var price = event_info.entrance_fee;

        if (!sureEnoughMoney(context, price))
        {
            return EVENTRESULT_FILTER;
        }

        if (!checkEntryTire(context, event_info.race_code, main::game.course_code))
        {
            return EVENTRESULT_FILTER;
        }

        main::sound.play("next");
        SettingPopup::open(context, doRaceEvent);

        return EVENTRESULT_FILTER;
    }

    function doRaceEvent(context, level)
    {
       var price = event_info.entrance_fee;
       main::game.incMoney(-price); 
       main::game.race_code = event_info.race_code;

        var ctype = main::menu::MCourseData::GetType(main::game.course_code);
        var dirt = ctype == "dirt" || ctype == "snow";
        main::game.max_entry = 6;

        var max_entry = main::menu::MCourseData::GetMaxCarNum(main::game.course_code);
        var offset = (level - 3).toFloat() * 0.01;
        var range = 0.01;
        var list = main::menu::MCarData::PickUpEnemyCars(main::game.garage.riding_car, 
            dirt ? EnemyCarData::dirt_enemy_carlist : EnemyCarData::enemy_carlist,
            offset, range,
            max_entry - 1,
            dirt);
        
        for (var i = 0; i < list.size; i++)
        {
            main::game.setEntryCarCode(i + 1, list[i][0], list[i][1]);
        }
        
        main::game.overwrite_enemy_num = list.size;

        main::game.major_menu_project = "gtmode";
        main::game.major_menu_page = ROOT.name;

        if (page_title == "PowerAndSpeed")
            exit_menu(context, "machinetest");
        else
            exit_menu(context, "solo_event");

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Template::CourseItem
{
    function onFocusEnter(context, event)
    {
        var widget = event.widget;
        var name = widget["name0"];
        var tooltip = ROOT["Common"]["ToolTip"]["tip"];
        var info = CourseData::getCourseInfo(name);

        if (info != nil)
        {
            import main::menu::MUnit;
            var text = context.translate(ROOT, "CourseSpecFormat");
            tooltip.value = text.format(MUnit::GetCourseLengthString(info.length), MUnit::GetCourseHeightString(info.height));
        }
        else
        {
            tooltip.value = "";
        }

        var index = get_course_index(name);
        if (index != course_index)
        {
            CourseImage.visible = false;
            CourseInfo.visible = false;
            CourseMap.visible = false;

            widget["ScrollBox"]["SelectBox"].index = 0;

            var insert_origin = index < course_index ? -PS2_SCREEN_W_F : PS2_SCREEN_W_F;
            CourseImage.actor.out = true;
            CourseImage.actor.warp();
            CourseImage::image.from_disk = false;
            CourseImage::image.cache = false;
            CourseImage::image.setImagePath("image/gtmode/course/img_" + name + ".png");
            CourseImage::image.doInitialize(context);
            CourseImage::image.adjustSize();
            CourseImage::image.x = (CourseImage.w - CourseImage::image.w) / 2;

            CourseMap.actor.destinationX = insert_origin;
            CourseMap.actor.out = true;
            CourseMap.actor.warp();
            CourseMap::image.from_disk = false;
            CourseMap::image.cache = false;
            CourseMap::image.setImagePath("image/piece/crs_map_l/" + name + ".png");
            CourseMap::image.doInitialize(context);
            CourseMap::image.adjustSize();
            CourseMap::image.x = (CourseMap.w - CourseMap::image.w) / 2;
            CourseMap::image.y = (CourseMap.h - CourseMap::image.h) / 2;

            CourseInfo.actor.out = true;
            CourseInfo.actor.warp();
            CourseInfo::message.text = context.translate(ROOT, "CRSINFO|" + name);
            
            CourseInfo::message.scale_x = 1.0;
            CourseInfo::message.adjustScale();
            CourseInfo::name.text = context.translate(ROOT, "CourseNameCaption", name);
            
            CourseImage.visible = true;
            CourseInfo.visible = true;
            CourseMap.visible = true;

            CourseImage.actor.out = false;
            CourseInfo.actor.out = false;
            CourseMap.actor.out = false;

            course_index = index;
        }

        widget["ScrollBox"].visible = true;
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        var widget = event.widget;
        widget["ScrollBox"].visible = false;
        return EVENTRESULT_FILTER;
    }
}