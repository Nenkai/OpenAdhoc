//---------------------------------------------------------------------------------------
// ManualRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ROOT
{
    var lang = main::pdistd::MLocale::getLanguage();
    ROOT.load("ManualConfig_" + lang);

    static sGraphChange = 0.4;
    static sRtextPage = "ManualGT5M";
    static sManualConfig = ManualConfig_gt5m;

    hidden.visible = false;

    attribute force_focus_index = nil;

    method getStaffCreditPage(context)
    {
        var region = main::pdiext::MProductInformation::GetGameRegionCode();
        region = region.upcase();
        return "StaffCreditGT5M_%{region}";
    }

    method onLoad(context)
    {
        var version = main::GetDisplayVersionString();

        hidden::TemplateIndex::Graph::Version.text = "Ver. " + version;
    }

    method open(context)
    {
        context.startPage(ROOT);
    }

    method close(context)
    {
        main::SequenceUtil::startProject(context, main::GameSequence::getArgument());
    }

    method onInitialize(context)
    {
        BalloonTip.initialize(context);
        ROOT.setFocus(ScrolledWindow::ListBox)
        SoundUtil::BGMPlayGroup('menu', "manual", true);

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        SoundUtil::BGMFadeout(1.0);

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");

        var idx = ScrolledWindow::ListBox.focus_index;
        if (sManualConfig[idx]['cancel_back'] != nil && sManualConfig[idx]['cancel_back'])
        {
            ROOT.setFocus(Header::Exit);
            return EVENTRESULT_FILTER;
        }

        self.force_focus_index = idx - 1;

        for (var i = idx; -1 < i; i--)
        {
            if (sManualConfig[i]['cancel_back'] != nil && sManualConfig[i]['cancel_back'])
            {
                ScrolledWindow::ListBox.focus_index = i;
                ROOT.setFocus(ScrolledWindow::ListBox);
                return EVENTRESULT_FILTER;
            }
        }

        close(context);
        return EVENTRESULT_FILTER;
    }
}

module ROOT::ScrolledWindow
{
    method onInitialize(context)
    {
        var adj = main::menu::MAdjustment();
        ScrolledWindow::ListBox.h_adjustment = adj;
        ScrolledWindow::HAllow.adjustment = adj;
        ScrolledWindow::HScrollbar.adjustment = adj;
        ROOT.setFocus(ScrolledWindow::ListBox);
    }
}


module ROOT::ScrolledWindow::ListBox
{
    method onInitialize(context)
    {
        for (var child = ManualItem.first; child != nil; child = child.next_widget)
        {
            var item_tree = child.doCopy();
            ROOT::ManualItem.appendChild(context, item_tree);
        }

        ListBox.setItemTemplate(context, hidden::Template02);
        ListBox.setItemCount(sManualConfig.size);
        onFocusNotify(context, 0);
    }

    method onFocusNotify(context, new_index, old_index)
    {
        page_index.text = "%d/%d".format(new_index, ListBox.getItemCount() - 1);
        page_index.visible = new_index > 0;
        Title.visible = new_index > 0;

        var page = ROOT.sRtextPage;
        if (new_index == (ListBox.getItemCount() - 1))
            page = ROOT.getStaffCreditPage(context);

        var title_key = context.translate(ROOT, page, sManualConfig[new_index]['title']);

        ScrolledWindow::Title::Title.text = title_key;
        var item = ListBox.getItemWidget(new_index);
        if (item != nil)
        {
            item.set_focus(context, sManualConfig[new_index]);
        }
        else
        {
            var template = sManualConfig[new_index]['template'];
            item = template.doCopy();
            ListBox.setItemWidget(new_index, context, item);
            item.initialize(context, sManualConfig[new_index]);
            item.set_focus(context, sManualConfig[new_index])
        }
        context.target_widget = item;

        ScrolledWindow::HAllow::dec_arrow.visible = true;
        if (new_index == 0)
            ScrolledWindow::HAllow::dec_arrow.visible = false;

        ScrolledWindow::HAllow::inc_arrow.visible = true;
        if (new_index == (ListBox.getItemCount() - 1))
            ScrolledWindow::HAllow::inc_arrow.visible = false;
    }

    method onVisibleNotify(context, indexes)
    {
        foreach (var i in indexes)
        {
            if (ListBox.getItemVisible(i))
            {
                var item = ListBox.getItemWidget(i);
                if (item == nil)
                {
                    var template = sManualConfig[i]['template'];
                    item = template.doCopy();
                    ListBox.setItemWidget(i, context, item);
                    item.initialize(context, sManualConfig[i]);
                }
            }
        }
    }

    method onFocusEnter(context)
    {
        var item = self.getItemWidget(self.focus_index);
        if (item != nil)
            item.set_focus(context, sManualConfig[self.focus_index]);

        return EVENTRESULT_FILTER;
    }
}

module ROOT::hidden::TextItem
{
    attribute graph = nil;
}

module ROOT::hidden::GraphItem
{
    attribute graph = nil;
}

module ROOT::hidden::Template01
{
    method initialize(context, config)
    {
        var graph = config['graph'];
        if (graph != nil)
        {
            graph = ManualItem::PageItem::Item01[graph];
            var item = graph.doCopy();
            item.name = "Graph";

            Template01.replaceChild(context, item, Template01::Graph);
        }
    }

    method set_focus(context, config)
    {
        ROOT.setFocus(self);
        ScrolledWindow::ScrollBar.visible = false;
    }
}

module ROOT::hidden::Template02
{
    method initialize(context, config)
    {
        foreach (var item in config['contents'])
        {
            var add_item;
            if (item['text'] != nil)
            {
                var text_item = hidden::TextItem.doCopy();
                text_item.text = context.translate(ROOT, ROOT.sRtextPage, item['text']);
                add_item = text_item;
            }
            else
            {
                var graph = item['g_text'];
                if (graph != nil)
                {
                    graph = ManualItem::PageItem::Item02[graph];
                    var graph_item = hidden::GraphItem.doCopy();
                    var cp_graph = graph.doCopy();
                    cp_graph.packable = true;
                    graph_item.appendChild(cp_graph);
                    add_item = graph_item;
                }
            }

            var graph = item['graph'];
            if (graph != nil)
                add_item.graph = ManualItem::PageItem::Item02[graph];

            TextBox::ScrollClip::space.appendChild(context, add_item);
        }
        TextBox::ScrollClip.scroll_mode = 2;
        TextBox::ScrollClip.init(context);
        var adj = main::menu::MAdjustment();
        TextBox::ScrollClip.v_adjustment = adj;
    }

    method set_focus(context, config)
    {
        ROOT.setFocus(self);
        ScrolledWindow::ScrollBar.visible = true;
        ScrolledWindow::ScrollBar.adjustment = TextBox::ScrollClip.v_adjustment;
    }

    method onKeyPress(context, event)
    {
        var line_height = hidden::TextItem.line_height;
        var status = EVENTRESULT_CONTINUE;
        if (event.keysym == PSP_PAD_CTRL_L3_UP) // PSP_PAD_CTRL_L3_UP?
        {
            if (TextBox::ScrollClip.manualTargetIncY(line_height))
                status = EVENTRESULT_STOP;

            TextBox::ScrollClip.key_up = true;
        }
        if (event.keysym == PSP_PAD_CTRL_L3_DOWN) // PSP_PAD_CTRL_L3_DOWN?
        {
            if (TextBox::ScrollClip.manualTargetIncY(-line_height))
                status = EVENTRESULT_STOP;

            TextBox::ScrollClip.key_up = false;
        }
        TextBox::ScrollClip.set_current_graph(context);
        return status;
    }
}

module ROOT::hidden::Template02::TextBox::ScrollClip
{
    attribute current = nil;
    attribute key_up = false;
    attribute prev_graph = nil;

    method init(context)
    {
        var it = space.first;

        if (it.graph != nil)
        {
            current = it;

            prev_graph = current.graph.toString();
            var item = current.graph.doCopy(context);
            item.name = "Graph";

            Template02.replaceChild(context, item, Template02::Graph);
        }
    }

    method set_current_graph(context)
    {
        var cy = -self.manual_target_y + (self.h * sGraphChange);
        for (var it = space.first; it != nil; it = it.next)
        {
            if (cy >= it.y && cy < (it.y + it.h))
            {
                if (current != it)
                {
                    current = it;

                    if (current.graph != nil && current.graph.toString() != prev_graph)
                    {
                        prev_graph = current.graph.toString();
                        var item = current.graph.doCopy();
                        item.name = "Graph";
                        Template02.replaceChild(context, item, Template02::Graph);
                    }
                    else 
                    {
                        if (key_up)
                        {
                            var prev = nil;
                            for (var prev_it = it; prev_it != nil; prev_it = prev_it.prev)
                            {
                                if (prev_it.graph != nil)
                                {
                                    prev = prev_it;
                                    break;
                                }
                            }

                            if (prev != nil && prev.graph.toString() != prev_graph)
                            {
                                prev_graph = prev.graph.toString();
                                var item = prev.graph.doCopy();
                                item.name = "Graph";
                                Template02.replaceChild(context, item, Template02::Graph);
                            }
                        }
                    }
                }
                break;
            }
        }
    }
}

module ROOT::hidden::Template03
{
    method initialize(context, config)
    {
        foreach (var item in config['contents'])
        {
            var add_item;
            if (item['text'] != nil)
            {
                var text_item = hidden::TextItem.doCopy();
                text_item.text = context.translate(ROOT, ROOT.sRtextPage, item['text']);
                add_item = text_item;
            }
            else
            {
                var graph = item['graph'];
                if (graph != nil)
                {
                    graph = ManualItem::PageItem::Item03[graph];
                    var graph_item = graph.doCopy();
                    add_item = graph_item;
                }
            }
            TextBox::ScrollClip::space.appendChild(context, add_item);
        }
        TextBox::ScrollClip.scroll_mode = 2;
        var adj = main::menu::MAdjustment();
        TextBox::ScrollClip.v_adjustment = adj;
    }

    method set_focus(context, config)
    {
        ROOT.setFocus(self);

        ScrolledWindow::ScrollBar.visible = true;
        ScrolledWindow::ScrollBar.adjustment = TextBox::ScrollClip.v_adjustment;
    }

    method onKeyPress(context, event)
    {
        var line_height = hidden::TextItem.line_height;
        var status = EVENTRESULT_CONTINUE;
        if (event.keysym == PSP_PAD_CTRL_L3_UP)
        {
            if (TextBox::ScrollClip.manualTargetIncY(line_height))
                status = EVENTRESULT_STOP;
        }

        if (event.keysym == PSP_PAD_CTRL_L3_DOWN)
        {
            if (TextBox::ScrollClip.manualTargetIncY(-line_height))
                status = EVENTRESULT_STOP;
        }
        
        return status;
    }
}


module ROOT::hidden::Template03::TextBox::ScrollClip
{
    attribute current = nil;
    attribute key_up = false;
    attribute prev_graph = nil;
}

module ROOT::hidden::Template04
{
    method initialize(context, config)
    {
        var page = ROOT.getStaffCreditPage(context);

        var add_item;
        foreach (var item in config['contents'])
        {

            if (item['text'] != nil)
            {
                var text_item = hidden::TextItem_Center.doCopy();
                text_item.text = context.translate(ROOT, page, item['text']);
                add_item = text_item;
            }
            else
            {
                var graph = item['graph'];
                if (graph != nil)
                {
                    graph = ManualItem::PageItem::Item04[graph];
                    var graph_item = graph.doCopy();
                    add_item = graph_item;
                }
            }
            TextBox::ScrollClip::space.appendChild(context, add_item);
        }
        TextBox::ScrollClip.scroll_mode = 2;
        var adj = main::menu::MAdjustment();
        TextBox::ScrollClip.v_adjustment = adj;
    }

    method set_focus(context, config)
    {
        ROOT.setFocus(self);
        ScrolledWindow::ScrollBar.visible = true;
        ScrolledWindow::ScrollBar.adjustment = TextBox::ScrollClip.v_adjustment;
    }

    method onKeyPress(context, event)
    {
        var line_height = hidden::TextItem_Center.line_height;
        var status = EVENTRESULT_CONTINUE;
        if (event.keysym == PSP_PAD_CTRL_L3_UP)
        {
            if (TextBox::ScrollClip.manualTargetIncY(line_height))
                status = EVENTRESULT_STOP;
        }

        if (event.keysym == PSP_PAD_CTRL_L3_DOWN)
        {
            if (TextBox::ScrollClip.manualTargetIncY(-line_height))
                status = EVENTRESULT_STOP;
        }

        return status;
    }
}

module ROOT::hidden::Template04::TextBox::ScrollClip
{
    attribute current = nil;
}

module ROOT::hidden::TemplateIndex
{
    method initialize(context, config)
    {
        IndexList::ListBox.initialize(context, config);
        var adj = main::menu::MAdjustment();
        IndexList::ListBox.adjustment = adj;
    }

    method set_focus(context, config)
    {
        ROOT.setFocus(IndexList::ListBox);

        ScrolledWindow::ScrollBar.visible = true;
        ScrolledWindow::ScrollBar.adjustment = IndexList::ListBox.v_adjustment;
    }

    method onKeyPress(context, event)
    {
        var status = EVENTRESULT_CONTINUE;
        if (event.keysym == PSP_PAD_CTRL_L3_RIGHT)
        {
            ROOT.force_focus_index = 0;
            var focus_index = self.IndexList::ListBox.focus_index;
            var focus_item = self.IndexList::ListBox.getItemWidget(focus_index, context);
            ROOT::ScrolledWindow::ListBox.focus_index = focus_item.jump;
            status = EVENTRESULT_STOP;
        }
        return status;
    }
}

module ROOT::hidden::TemplateIndex::IndexList::ListBox
{
    attribute config = nil;

    method initialize(context, config)
    {
        ListBox.setItemTemplate(context, hidden::IndexItem);
        ListBox.setItemCount(config['indexes'].size);

        self.config = config;
        var size = config['indexes'].size;
        for (var i = 0; i < size; i++)
        {
            var index = config['indexes'][i];
            var item = ListBox.getItemWidget(i, context);
            var page = i == (size - 1) ? ROOT.getStaffCreditPage(context) : ROOT.sRtextPage;
            item.initialize(context, index['text'], index['jump'], page);
        }

        ListBox.focus_index = 0;
    }

    method onActivate(context)
    {
        main::sound.play("ok");
        var focus_item = self.getItemWidget(self.focus_index, context);
        focus_item.on_active(context);
        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context)
    {
        if (ROOT.force_focus_index != nil)
        {
            self.focus_index = ROOT.force_focus_index;
            ROOT.force_focus_index = nil;
        }

        var item = self.getItemWidget(self.focus_index);
        if (item != nil)
        {
            ROOT.setFocus(item);
        }

        return EVENTRESULT_FILTER;
    }
}


module ROOT::hidden::IndexItem
{
    attribute jump = nil;

    method initialize(context, text, jump, page)
    {
        self.label::label::label.text = context.translate(ROOT, page, text);
        self.jump = jump;
    }

    method on_active(context)
    {
        ROOT::ScrolledWindow::ListBox.focus_index = self.jump;
        ROOT.force_focus_index = nil;
    }
}

module ROOT::Header::Exit
{
    attribute balloon_text = nil;

    method onInitialize(context)
    {
        self.balloon_text = context.translate(ROOT, "Arcade", "close");
        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context)
    {
        if (self.balloon_text != nil)
            BalloonTip.set_value(context, self, self.balloon_text, self.h * 0.5);

        return EVENTRESULT_FILTER;
    }

    method onFocusLeave(context)
    {
        BalloonTip.reset_value();
        return EVENTRESULT_FILTER;
    }

    method onActivate(context)
    {
        main::sound.play("ok");
        close(context);
        return EVENTRESULT_FILTER;
    }
}