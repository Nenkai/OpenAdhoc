













module PROJECT
{
    #include "RaceEventUtil.ad"

    PROJECT.load("/scripts/gt6/util/gtmode_pack");

    static sProjectHolder = ProjectUtil::ProjectHolder();
    static sMenuSoundHolder;

    function onLoad(update_context)
    {
        update_context.createRenderContext(1);
        var render_context = update_context.getRenderContext(0);

        ProjectHistoryUtil::DefineVariables(PROJECT,
        [
            ['LastPageName', ""],
            ['LastPageArg1', nil],
            ['LastPageArg2', nil],
            ['LastPageProject', ""],
            ['PushPageName', ""],
            ['PushPageArg1', nil],
            ['PushPageArg2', nil],
            ['GTTopRoot::FocusAreaName', ""],
            ['GTTopRoot::FocusIconName', ""],
            ['GTTopRoot::friend_count', -1],
            ['GTModeRoot::LastFocusGroup', ""],
            ['GTModeRoot::LastFocusItem', ""],
            ['GTModeRoot::CheckUserSpecial', false],
            ['PhotoLocationRoot::LastFocus', nil],
            ['CareerModeRoot::Category', nil],
            ['CareerModeRoot::SelectFolder', nil],
            ['CareerModeRoot::FocusFolder', nil],
            ['CareerModeRoot::FocusEvent', nil],
            ['RaceEventRoot::PrevPage', nil],
            ['RaceEventRoot::FocusEvent', nil],
            ['CarDealerRoot::TunerCarsOrder', 0],
            ['SeasonalEventRoot::EventId', nil],
            ['VisionGTRoot::FeaturedCarIndex', 0],
            ['SennaRoot::ImageIndex', 0],

            ['SierraRoot::SelectedMode', nil],
            ['SierraRoot::SelectedEvent', nil],

            ['CarSearch::PPMin', nil],
            ['CarSearch::PPMax', nil],
            ['CarSearch::PriceMin', nil],
            ['CarSearch::PriceMax', nil],
            ['CarSearch::PriceOption', nil],
            ['CarSearch::YearMin', nil],
            ['CarSearch::YearMax', nil],
            ['CarSearch::YearOption', nil],
            ['CarSearch::Drivetrain', nil],
            ['CarSearch::Aspiration', nil],
            ['CarSearch::Country', nil],
            ['CarSearch::Tuner', nil],
            ['CarSearch::WordSearch', nil],

            ['SearchFilterCourse', nil],
            ['SearchFilterPolicy', nil],
            ['SearchFilterSimulation', nil],
            ['SearchFilterRegion', nil],
            ['SearchFilterShowFull', nil],
            ['SearchFilterShowFriend', nil],
            ['SearchFilterShowClubRoom', nil],
        ]);

        SequenceUtil::setPageTransition(["*,GTTopProject::GTTopRoot" : CursorProject::GTLogoTransition]);

        var start_page;
        if (GetVersionBranch() == "demo")
            start_page = "GTTopRoot";
        else
            start_page = "GTModeRoot";

        var playBgm = false;

        var project = PROJECT;
        var lastProjectName = PROJECT.history['LastPageProject'];

        if (lastProjectName != nil && lastProjectName != "")
        {
            if (lastProjectName == "CommunityProject")
            {
                if (LoginUtil::isOnline())
                {
                    sProjectHolder.load("community", "community");
                    sProjectHolder.load("event_setting", "event_setting");
                    playBgm = true;
                }
            }

            if (__projects__.defined(lastProjectName))
                project = __projects__[lastProjectName];

                PROJECT.history['LastPageProject'] = "";
        }

        var last_page_name = PROJECT.history['LastPageName'];
        if (last_page_name != nil && project.defined(last_page_name))
        {
            var start_page = last_page_name;
            PROJECT.history['LastPageName'] = "";

            if (last_page_name == "RoomRoot")
            {
                sProjectHolder.load("event_setting", "event_setting");
                playBgm = true;
            }
        }

        var arg1 = PROJECT.history['LastPageArg1'];
        var arg2 = PROJECT.history['LastPageArg2'];

        PROJECT.history['LastPageArg1'] = nil;
        PROJECT.history['LastPageArg2'] = nil;

        if (playBgm)
        {
            PlayMenuBGM(render_context, GTModeRoot);
        }

        project[start_page].open(render_context, arg1, arg2);
    }

    function onUnload(update_context)
    {
        var render_context = update_context.getRenderContext(0);
        render_context.disableInput();

        main.removeStatic("getGTModeFirstCar_cache");
        main.removeStatic("getGTModeFirstCarName_cache");
        main.removeStatic("getGTModeFirstCarPP_cache");

        main.removeStatic('HttpUtil');

        GameParameterUtil::end();
        sProjectHolder.release();
    }

    function LoadProject(project_file, project_name)
    {
        return ProjectUtil::LoadProject(project_name, project_file);
    }

    function UnloadProject(project)
    {
        ProjectUtil::UnloadProject(project);
    }

    function IsDevelop(context)
    {
        var is_debug = false; // Compile time?
        return pdiext::isQABuild() || is_debug;
    }

    function GetMenuBGMCode()
    {
        if (!CheckVersion::Test(nil, 35))
            return "menu";

        var code = "menu";

        var t = pdistd::MTime::getCurrentTime();

        if (t.month == 12 && t.day >= 21 && t.day <= 25)
        {
            var sp_code = "christmas";
            var inf = SoundUtil::BGMGetGroupPlayInfo(sp_code);
            if (inf != nil)
            {
                var n = inf[1];
                var loop = inf[2] - 1;
                loop = loop < 0 ? 0 : loop;

                var cnt = inf[0] + (n * loop);
                if (cnt < n - 1)
                    code = sp_code;
            }
        }

        return code;
    }

    function PlayMenuBGM(context, root)
    {
        SoundUtil::SetSystemBGMEnable(context, true);

        switch (root.name)
        {
            case "GarageRoot":
                SoundUtil::MenuBGMCrossfadeGroup("garage", 0.0, 1.0);
                break;
            
            case "LunarExplorationRoot":
                SoundUtil::MenuBGMCrossfadeGroup("menu_moon", 0.0, 1.0);
                break;

            case "XChallengeRoot":
                SoundUtil::MenuBGMCrossfadeGroup("xchallenge", 0.0, 1.0);
                break;

            case "SennaRoot":
            case "SennaChapterRoot":
                SoundUtil::MenuBGMCrossfadeGroup("senna_menu", 0.0, 1.0);
                break;

            default:
                SoundUtil::MenuBGMCrossfadeGroup(GetMenuBGMCode(), 0.0, 1.0);
                break;
        }
    }

    function TryLoadMenuSound()
    {
        if (sMenuSoundHolder == nil)
            sMenuSoundHolder = pdiext::MSoundEffect("sound_gt/se/gt6menu.sgd"); 
    }

    function GetDistanceText(context, running_km)
    {
        var km_mile;
        var unit_text;
        if (GAME_STATUS.user_profile.option.unit_velocity)
        {
            unit_text = context.translate(PROJECT, "Unit", "LENGTH_MILE");
            km_mile = running_km / 1.6;
        }
        else
        {
            unit_text = context.translate(PROJECT, "Unit", "LENGTH_KILOMETER");
            km_mile = running_km;
        }

        if (km_mile > 999999.9)
            km_mile = 999999.94;

        var km_mile_text = pdiext::GetNumberString(10 * km_mile, 1);
        return km_mile_text + " " + unit_text;
    }

    function GetDateText(context, date_time)
    {
        if (!date_time.isInstanceOf(pdistd::MTime))
        {
            var date_time_sec = date_time;
            date_time = main::pdistd::MTime();
            date_time.setBySecond(date_time_sec);
        }

        var local_time = date_time.toLocal();
        return manager.translate("DateTime", "FORMAT_DATE").build(
            local_time.year,
            "%02d".format(local_time.month),
            "%02d".format(local_time.day)
        );
    }

    function GetDateTimeText(context, date_time)
    {
        if (!date_time.isInstanceOf(pdistd::MTime))
        {
            var date_time_sec = date_time;
            date_time = main::pdistd::MTime();
            date_time.setBySecond(date_time_sec);
        }

        var local_time = date_time.toLocal();
        return manager.translate("DateTime", "FORMAT_DATE_TIME").build(
            local_time.year,
            "%02d".format(local_time.month),
            "%02d".format(local_time.day),
            "%02d".format(local_time.hour),
            "%02d".format(local_time.minute)
        );
    }

    function getGTModeFirstCar()
    {
        if (main["getGTModeFirstCar_cache"] == nil)
        {
            main.defineStatic("getGTModeFirstCar_cache");
            main::getGTModeFirstCar_cache = gtengine::MSpecDB::getCarCode("fit_rs_10");
        }

        return main::getGTModeFirstCar_cache;
    }

    function getGTModeFirstCarName()
    {
        if (main["getGTModeFirstCarName_cache"] == nil)
        {
            main.defineStatic("getGTModeFirstCarName_cache");
            main::getGTModeFirstCarName_cache = gtengine::MSpecDB::getCarName(getGTModeFirstCar());
        }

        return main::getGTModeFirstCarName_cache;
    }

    function getGTModeFirstCarPP()
    {
        if (main["getGTModeFirstCarPP_cache"] == nil)
        {
            main.defineStatic("getGTModeFirstCarPP_cache");
            var pp = SPECDB.executeQuery1R1C("SELECT PP FROM GENERIC_CAR WHERE ID=?", [getGTModeFirstCar()]);
            main::getGTModeFirstCarPP_cache = pp.toInt();
        }

        return main::getGTModeFirstCarPP_cache;
    }

    function isDemoVersion()
    {
        return GetVersionBranch() == "demo";
    }

    function isRidingCar()
    {
        var garage_id = GAME_STATUS.user_profile.garage.getRidingGarageId();
        return garage_id != gtengine::MSpecDB::NO_CODE;
    }

    function GetDealerCount(country_codes)
    {
        var where_clause = "";
        var where_conditions = [];
        var params = [];

        if (country_codes != nil)
        {
            foreach (var country_code in country_codes)
            {
                where_conditions.push("Country = ?");
                var country_id = SPECDB.executeQuery1R1C("SELECT ID FROM COUNTRY WHERE code=?", [country_code]);
                params.push(country_id);

                where_clause = "WHERE " + where_conditions.join(" OR ");
            }
        }

        return SPECDB.count("SELECT COUNT (ID) FROM TUNER %{where_clause}", params);
    }

    function OK(context, page, keyword, args)
    {
        var s = manager.translate(page, keyword);
        if (args != nil)
            s = s.build(args);
        
        DialogUtil::openConfirmDialog(context, DialogUtil::OK, s);
    }

    function ERROR(context, page, keyword, args)
    {
        var s = manager.translate(page, keyword);
        if (args != nil)
            s = s.build(args);
        
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, s);
    }

    function GENERIC_RESULT(context, res)
    {
        if (res)
            OK(context, "Community", "GENERIC_SUCCESS");
        else
            ERROR(context, "Community", "GENERIC_FAIL")
    }

    function QUERY(context, page, keyword, args)
    {
        var s = manager.translate(page, keyword);
        if (args != nil)
            s = s.build(args);
        
        return DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, s);
    }

    function QUERY_D_NO(context, page, keyword)
    {
        var s = manager.translate(page, keyword);
        return DialogUtil::openConfirmDialog(context, DialogUtil::DEFAULT_NO, s);
    }

    function REQUEST_ERROR(context, page, keyword, request)
    {
        var text = manager.translate(page, keyword);
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
            Grim2Util::makeRequestError(context, text, request));
    }

    function isQuickMatchAvailable()
    {
        var defaultValue = 1;
        var value = Grim2.getServerOptionToInt("gt", "online.quickmatch.enable", defaultValue);
        return value == 1;
    }

    function checkQuickMatchAvailable(context)
    {
        if (isQuickMatchAvailable())
            return true;

        ERROR(context, "Network", "SERVICE_MAINTENANCE_IN_PROGRESS", 
                manager.translate("GameModeName", "ONLINE_BATTLE"));
        return false;
    }

    function UnlockedServerFlag(appver, key)
    {
        var current_appver = pdiext::MProductInformation::GetApplicationVersionDecimal();
        if (current_appver > appver)
            return true;

        if (current_appver < appver)
            return false;

        return Grim2.getServerOptionToInt("gt", key, 0) != 0;
    }
}