module PROJECT::ROOT
{
    static timeout_enable = true;
    static watcher = nil;
    //static original_logo_w = Maker::logo.w; // aspect fix probably

    function setFadeActor(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        widget.actor = actor;
        widget.actor.period = 0.25;
        widget.actor.out = false;
        widget.actor.warp();
    }

    setFadeActor(GT);
    setFadeActor(Maker);
    
    if (main::game.option.wide_mode)
    {
        GT.w = GT.w * 3 / 4;
        GT.x = (PS2_SCREEN_W_F - GT.w) * 0.5;

        Maker.w = Maker.w * 3 / 4;
        Maker.x = (PS2_SCREEN_W_F - Maker.w) * 0.5;
    }

    function setMoveActor(widget, x, y)
    {
        var actor = main::menu::MMoveActor(widget, widget.x + x, widget.y + y);
        widget.actor = actor;
        widget.actor.ratio = 0.3;
        widget.actor.out = false;
        widget.actor.warp();
    }

    setMoveActor(StartScroll, 0.0, 200.0);

    function setFadeActor2(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        widget.actor = actor;
        widget.actor.period = 0.5;
        widget.actor.repeat = true;
    }

    setFadeActor2(StartScroll::dec_arrow::bga);
    setFadeActor2(StartScroll::inc_arrow::bga);

    static button_list = [
        hidden::Online,
        hidden::Arcade,
        hidden::GTmode,
        hidden::ReplayTheater,
        hidden::Option,
        hidden::Save,
        hidden::Ending, // Ending movie was stripped from GT4O anyway so no point having it on the menu
        hidden::Credit
    ];

    function setButtonActor(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0, 0.2);
        widget.actor = actor;
        widget.actor.period = 0.1;
        widget.actor.out = true;
        widget.actor.warp();

        var label = widget["label"];
        actor = main::menu::MMoveActor(label, label.x - 8.0, label.y);
        label.actor = actor;
        label.actor.ratio = 0.3;
        label.actor.out = true;
        label.actor.warp();
    }

    function onLoad(context)
    {
		// GT logo on main menu
        if (main::menu::MSystem::GetVersionBranch() == "beta" || main::menu::MSystem::GetVersionBranch() == "prebeta" || main::menu::MSystem::GetVersionBranch() == "premium")
            GT::bg.image_path = "image/arcade/top/JP/gt4ol.png";
    }

    static last_focused_name = nil;
    static hidden_optionsave_flg = true;

    function onInitialize(context)
    {
        hidden.visible = false;
        var button_num = 0;
        
        for (var i = 0; i < button_list.size; i++)
        {
            var button = button_list[i];

            if (main::game.option.special_arcade_tuner != "")
            {
                if (button.name == "GTmode")
                    continue;

                if (button.name == "ReplayTheater")
                    continue;

                if (hidden_optionsave_flg)
                    if (button.name == "Save")
                        continue;

                if (button.name == "Ending")
                    continue;

                if (button.name == "Credit")
                    continue;

                if (button.name == "Online")
                    continue;
            }
                
                if ((!main::game.option.can_watch_ending || main::menu::MSystem::GetVersionBranch() == "beta") && button.name == "Ending")
                    continue;

                if (!main.defined("CONFIG_ENABLE_ONLINE") && button.name == "Online")
                    continue;

                var item = button.doCopy();
                setButtonActor(item);
                StartScroll::SelectBox.appendChild(context, item);
                button_num++

                if (main::game.option.special_arcade_tuner != "" && button.name == "Arcade")
                    item["label"].text = context.translate(ROOT, "Start Game");
        }
            
        if (button_num <= 1)
        {
            StartScroll::inc_arrow.visible = false;
            StartScroll::dec_arrow.visible = false;
            setFadeActor2(StartScroll::SelectBox);
        }
        else
        {
            StartScroll::inc_arrow.visible = true;
            StartScroll::dec_arrow.visible = true;
            StartScroll::SelectBox.actor = nil;
        }

        if (main::game.option.special_arcade_tuner != "")
        {
            GT.visible = false;
            Maker.visible = true;

            var logo = Maker::logo;
            logo.from_disk = true;
            logo.cache = false;
            logo.image_path = "piece/tuner_logo2/" + main::game.option.special_arcade_tuner + ".img";
            logo.doInitialize(context);
            logo.adjustSize();

            logo.x = (Maker.w - logo.w) / 2.0;
            logo.y = 90.0 - (logo.h / 2.0);

            mpeg.movie_name = "maker_game";
        }
        else 
        {
            GT.visible = true;
            Maker.visible = false;
        }

        if (watcher == nil)
        {
            watcher = main::menu::MScriptWatcher(context, onTick);
            watcher.interval = 60;
            watcher.append();
        }

        if (StartScroll.visible)
        {
            var focused_name = nil;

            if (main::game.last_sequence == "load_replay")
                focused_name = hidden::ReplayTheater.name;
            else if (main::game.last_menu_project == "gtmode")
                focused_name = hidden::GTmode.name;
            else if (main::game.last_menu_project == "option")
                focused_name = hidden::Option.name;
            else if (main::game.last_menu_project == "demo_movie")
                focused_name = hidden::Ending.name;
            else if (main::game.last_menu_project == "network")
                focused_name = hidden::Online.name;
            else if (main::game.last_menu_project == "online")
                focused_name = hidden::Online.name;
            else 
                focused_name = last_focused_name;

            if (focused_name != nil)
            {
                var focused_index = 0;
                var i = 0;
                var w = StartScroll::SelectBox.first;

                while (w != nil)
                {
                    if (w.name == focused_name)
                    {
                        focused_index = i;
                        break;
                    }

                    i++;
                    w = w.next;
                } 

                StartScroll::SelectBox.index = focused_index;
            }
            
        }
        else
        {
            StartScroll::SelectBox.clearChildren(context);
            ROOT.setFocus(ROOT);
        }

        context.cursor_visible = false;
    }

    function onFinalize(context)
    {
        if (watcher != nil)
        {
            watcher.remove();
            watcher = nil;
        }

        StartScroll::SelectBox.clearWindow(context);
    }

    function onTick(context)
    {
        var timeout_sec = main::game.option.timeout_count_to_autodemo.toFloat();

        if (timeout_enable && timeout_sec > 0.0)
        {
            if (context.time_after_last_input > timeout_sec)
            {
                main::game.major_menu_project = "arcade";
                main::game.next_menu_project = "arcade";
                start_sequence(context, "autodemo");
            }
        }
    }

    function onActivate(context, event, item)
    {
        main::sound.play("return");

        main::game.next_sequence = "menu";
        main::game.next_menu_project = "arcade";

        if (main.defined("MenuForceGame"))
        {
            GameRoot::current_game = main::MenuForceGame;
            start_page(context, CourseRoot);
        }
        else 
        {
            leave(context);
            last_focused_name = event.widget.name;

            context.pushPage(GameRoot);
        }

        timeout_enable = false;

        return EVENTRESULT_FILTER;
    }

    function onCancel(context, event, item)
    {
        if (main::game.option.timeout_count_to_autodemo <= 0)
            return EVENTRESULT_FILTER;

        main::sound.play("cancel");
        main::game.major_menu_project = "arcade";
        main::game.next_menu_project = "arcade";
        start_sequence(context, "autodemo");

        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        if (main::game.option.special_arcade_tuner != "")
        {
            if (event.keysym == PS2_PAD_CTRL_START)
            {
                var state = context.getUpdateContext().getPadButtonState(0);

                if ((state & 256) != 0 && (state & 512) != 0 && (state & 2048) != 0 && (state & 4096) != 0)
                {
                    main::sound.play("return");
                    hidden_optionsave_flg = false;
                    start_page(context, CreditRoot);

                    return EVENTRESULT_FILTER;
                }
            }
        }
        switch (event.keysym)
        {
        }
		return EVENTRESULT_CONTINUE;
    }

    function enter(context)
    {
        timeout_enable = true;
        GT.actor.out = false;
        Maker.actor.out = false;
        StartScroll.actor.out = false;
    }

    function leave(context)
    {
        timeout_enable = false;
        StartScroll.actor.out = true;
        GT.actor.out = true;
        Maker.actor.out = true;
        context.sync(0.1);
    }

    function startCreateGameData(context)
    {
        main::game.next_menu_project = "boot";
        main::game.next_menu_arg = "EntryRoot";
        start_page(context, nil);
    }

    function gameDataCheck(context, manager, mode)
    {
        // COMPILER NOTE: these continue should jump to the end of the loop, which will then jump back to the start.
        // The compiler jumps to the start directly.

        while (1)
        {
            if (isExistGameData(context, manager))
            {
                if (openMcDialog(context, 1, context.translate(ROOT, "load ok?")))
                {
                    setProgress(context, manager.progress);
                    openProgressDialog(context, translateMc(context, "now_loading"));
                    var r = manager.getNewFile().load(manager);

                    if (r == "OK")
                    {
                        context.sync(0.5);
                        closeProgressDialog(context);
                        main::menu::MMemoryCardManager::setExistValidGameData(true);
                        manager.clearAutoSaveDisabled();

                        if (mode == "gtmode")
                            hidden::GTmode::startGTmode(context);
                        else
                            hidden::Online::startOnline(context);

                        return;
                    }
                    else
                        ;

					closeProgressDialog(context);

					if (r == "INVALID_FILE")
					{
						if (openMcDialog(context, 3, context.translate(ROOT, "broken create new?")))
						{
							startCreateGameData(context);
							return;
						}
                        else
                            ;

                        continue;
					}
                    else
                    {
                        openConfirmDialog(context, DIALOG_OK, translateMc(context, "load_error"));
                    }

                    continue;
                }
            
            
                if (!manager.isConnect()) continue;
			
                if (openMcDialog(context, 3, context.translate(ROOT, "create new?")))
                {
                    startCreateGameData(context);
                    return;
                }
                else
                    ;

                return;
            }
            else 
            {
                if (!manager.isConnect())
                {
                    main::sound.play("disable");

                    var mes = context.translate(ROOT, mode == "gtmode" ? "no card" : "no card online");
                    if (openMcDialog(context, 2, mes) || !manager.isConnect())
                        return;
                    else
                        ;

                    continue;
                }

                var mes = context.translate(ROOT, mode == "gtmode" ? "no gt4 game data create?" : "no gt4 game data create online?");
                if (openMcDialog(context, 1, mes))
                {
                    startCreateGameData(context);
                    return;
                }
                else if (manager.isConnect())
                    return;
            }
        }
    }
}

module PROJECT::ROOT::StartScroll::SelectBox
{
    function onValueChanged(context, index) { }
}

module PROJECT::ROOT::hidden::Arcade
{
    function onFocusEnter(context, event)
    {
        event.widget.actor.out = false;
        event.widget["label"].actor.out = false;

        return true;
    }

    function onFocusLeave(context, event)
    {
        event.widget.actor.out = true;
        event.widget["label"].actor.out = true;

        return true;
    }
}

module PROJECT::ROOT::hidden::GTmode
{
    function onActivate(context, event, item)
    {
        timeout_enable = false;
        
        if (main::menu::MMemoryCardManager::getExistValidGameData())
            startGTmode(context);
        else 
        {
            main::sound.play("ok");
            var manager = main::menu::MMemoryCardManager("MODE_LOAD_GAME");
            startMcWatcher(context, manager);
            gameDataCheck(context, manager, "gtmode");
            endMcWatcher();
        }

        timeout_enable = true;

        return EVENTRESULT_FILTER;
    }

    function startGTmode(context)
    {
        main::sound.play("return");
        main::game.next_menu_project = "gtmode";
        main::game.next_menu_arg = "";
        start_page(context, nil);
    }

    function onFocusEnter(context, event)
    {
        event.widget.actor.out = false;
        event.widget["label"].actor.out = false;

        return true;
    }

    function onFocusLeave(context, event)
    {
        event.widget.actor.out = true;
        event.widget["label"].actor.out = true;

        return true;
    }
}

module PROJECT::ROOT::hidden::ReplayTheater
{
    function onActivate(context, event, item)
    {
        main::sound.play("return");
        main::game.major_menu_project = "arcade";
        start_sequence(context, "load_replay");

        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        event.widget.actor.out = false;
        event.widget["label"].actor.out = false;

        return true;
    }

    function onFocusLeave(context, event)
    {
        event.widget.actor.out = true;
        event.widget["label"].actor.out = true;

        return true;
    }
}

module PROJECT::ROOT::hidden::Option
{
    function onActivate(context, event, item)
    {
        main::sound.play("return");
        main::game.major_menu_project = "arcade";
        main::game.next_menu_project = "option";
        start_page(context, nil);

        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        event.widget.actor.out = false;
        event.widget["label"].actor.out = false;

        return true;
    }

    function onFocusLeave(context, event)
    {
        event.widget.actor.out = true;
        event.widget["label"].actor.out = true;

        return true;
    }
}

module PROJECT::ROOT::hidden::Save
{
    function end_func(context)
    {
        openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "MemoryCard", "You can turn off the power"));
        timeout_enable = true;
    }

    function onActivate(context, event, item)
    {
        timeout_enable = false;
        var valid = main::menu::MMemoryCardManager::getExistValidGameData();

        print "valid = %{valid}\n";

        if (!valid)
        {
            main::sound.play("return");
            
            if (openConfirmDialog(context, DIALOG_DEFAULT_NO, context.translate(ROOT, "create new?2")))
            {
                startCreateGameData(context);
                return EVENTRESULT_FILTER;
            }
        }
        else
        {
            main::sound.play("return");

            clearAutoSaveDisabled();
            
            if (openConfirmDialog(context, DIALOG_DEFAULT_NO, context.translate(ROOT, "MemoryCard", "Do you save?")))
            {
                main::game.major_menu_project = "arcade";
                main::game.next_menu_project = "";
                main::game.next_menu_project = "";

                saveAuto(context, ROOT, end_func);
            }
            else
            {
                timeout_enable = true;
            }
        }

        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        event.widget.actor.out = false;
        event.widget["label"].actor.out = false;

        return true;
    }

    function onFocusLeave(context, event)
    {
        event.widget.actor.out = true;
        event.widget["label"].actor.out = true;

        return true;
    }
}

module PROJECT::ROOT::hidden::Ending
{
    function onActivate(context, event, item)
    {
        main::sound.play("ok");
        main::game.major_menu_project = "arcade";
        main::game.next_menu_arg = "ending";
        start_project(context, "demo_movie");

        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        event.widget.actor.out = false;
        event.widget["label"].actor.out = false;

        return true;
    }

    function onFocusLeave(context, event)
    {
        event.widget.actor.out = true;
        event.widget["label"].actor.out = true;

        return true;
    }
}

module PROJECT::ROOT::hidden::Credit
{
    function onActivate(context, event, item)
    {
        main::sound.play("ok");
		main::game.next_sequence = "menu";
		main::game.next_menu_project = "arcade";
        last_focused_name = event.widget.name;
        start_page(context, CreditRoot);

        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        event.widget.actor.out = false;
        event.widget["label"].actor.out = false;

        return true;
    }

    function onFocusLeave(context, event)
    {
        event.widget.actor.out = true;
        event.widget["label"].actor.out = true;

        return true;
    }
}

module PROJECT::ROOT::hidden::Online
{
    function onActivate(context, event, item)
    {
        timeout_enable = false;

        if (main::menu::MMemoryCardManager::getExistValidGameData())
            startOnline(context);
        else 
        {
            main::sound.play("ok");

            var manager = main::menu::MMemoryCardManager("MODE_LOAD_GAME");
            startMcWatcher(context, manager);
            gameDataCheck(context, manager, "online");
            endMcWatcher();
        }

        timeout_enable = true;
        return EVENTRESULT_FILTER;
    }

    function startOnline(context)
    {
        main::sound.play("ok");
        main::game.major_menu_project = "online";
        main::game.major_menu_page = "";
        main::network.network_enable = true;
        start_project(context, "network");
        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        event.widget.actor.out = false;
        event.widget["label"].actor.out = false;

        return true;
    }

    function onFocusLeave(context, event)
    {
        event.widget.actor.out = true;
        event.widget["label"].actor.out = true;

        return true;
    }
}

module PROJECT::OptionPopup
{
    static original_y = Pane.y;

    function open(context)
    {
        OptionPopup.setFocus(nil);
        Pane.y = PS2_SCREEN_H_F;
        context.pushPage(OptionPopup);

        while (!Pane.interpolateY(original_y, 0.3))
            context.sync();

        context.cursor_visible = true;
    }

    function openForCourse(context)
    {
        Pane::Language::OptionMenu.insensitive = true;
        open(context);
    }

    function close(context)
    {
        Pane::Language::OptionMenu.insensitive = false;
        context.cursor_visible = false;
        OptionPopup.setFocus(nil);
        
        while (!Pane.interpolateY(-200.0, 0.3))
            context.sync();

        context.closePage(OptionPopup);
        ROOT::enter(context);
    }

    function initialize_optionmenu(context, optionmenu, options)
    {
        var vbox = optionmenu["popup"]["vbox"];

        var num = options.size;

        for (var i = 0; i < num; i++)
        {
            var item = SettingPopup::hidden::Item.doCopy();
            item["label"].text = context.translate(OptionPopup, options[i]);

            item.name = options[i];
            vbox.appendChild(item);
        }

        optionmenu.applyAppend(context);
    }

    function onLoadInitialize(context)
    {
        if (main.defined("UsingLanguages"))
            initialize_optionmenu(context, Pane::Language::OptionMenu, main::UsingLanguages);
    }

    function apply_option(context)
    {
        var option = main::game.option;

        option.wide_mode = Pane::Screen::OptionMenu.index;
        option.replay_bgm = Pane::Bgm::OptionMenu.index == 0;
        option.race_bgm = Pane::Bgm::OptionMenu.index == 0;
        option.vibration_1p = Pane::Vibration::OptionMenu.index == 0;
        option.race_laps = Pane::RaceLaps::SliderBar.index;
        option.language_for_unit = Pane::LanguageForUnit::OptionMenu.getItem().name;
        option.apply();

        var last_lang = main::menu::MSystem::GetLanguage();
        var new_lang = main::UsingLanguages[Pane::Language::OptionMenu.index];

        if (last_lang != new_lang)
        {
            context.transition.panOut(context);
            context.transition.syncOut(context);
            context.cursor_visible = false;
            context.finish();
            main::menu::MSystem::SetLanguage(new_lang);
        }
    }

    function reflect_option(context)
    {
        var option = main::game.option;

        Pane::Screen::OptionMenu.setIndex(context, option.wide_mode);
        Pane::Bgm::OptionMenu.setIndex(context, !option.replay_bgm);
        Pane::Vibration::OptionMenu.setIndex(context, !option.vibration_1p);
        Pane::RaceLaps::SliderBar.index = option.race_laps;
        Pane::RaceLaps::SliderBar::label.text = option.race_laps;
        Pane::RaceLaps::SliderBar::popup::min.text = Pane::RaceLaps::SliderBar.min;
        Pane::RaceLaps::SliderBar::popup::max.text = Pane::RaceLaps::SliderBar.max;
        Pane::RaceLaps::SliderBar::popup::pinch::value.text = option.race_laps;

        var lang = main::menu::MSystem::GetLanguage();

        for (var i = 0; i < main::UsingLanguages.size; i++)
        {
            if (main::UsingLanguages[i] == lang)
            {
                Pane::Language::OptionMenu.setIndex(context, i);
                break;
            }
        }
		var lang = option.language_for_unit; // 7679
		var num = Pane::LanguageForUnit::OptionMenu.Count();
		// 7690
		for (var i = 0; i < num; i++)
		{
			if (lang == Pane::LanguageForUnit::OptionMenu.getItem(i).name)
			{
				Pane::LanguageForUnit::OptionMenu.setIndex(context, i);
				break;
			}
		}
    }

    function onInitialize(context)
    {
        reflect_option(context);
        Pane::RaceLaps.visible = false;
        Pane::RaceLaps::SliderBar.can_focus = false;
    }

    function onCancel(context, event, item)
    {
        main::sound.play("cancel");
        reflect_option(context);
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::OptionPopup::Pane::Language::OptionMenu
{
    function onValueChanged(context, index)
    {
        main::sound.play("ok");
    }
}

module PROJECT::OptionPopup::Pane::Screen::OptionMenu
{
    function onValueChanged(context, index)
    {
        main::sound.play("ok");
    }
}

module PROJECT::OptionPopup::Pane::Bgm::OptionMenu
{
    function onValueChanged(context, index)
    {
        main::sound.play("ok");
    }
}

module PROJECT::OptionPopup::Pane::Vibration::OptionMenu
{
    function onValueChanged(context, index)
    {
        main::sound.play("ok");
    }
}

module PROJECT::OptionPopup::Pane::RaceLaps::SliderBar
{
    function onValueChanged(context, index)
    {
        popup::pinch::value.text = index;
        label.text = index;
    }
}

module PROJECT::OptionPopup::Pane::OK
{
    function onActivate(context, event, item)
    {
        main::sound.play("next");
        apply_option(context);
        close(context);
        return EVENTRESULT_FILTER;
    }
}