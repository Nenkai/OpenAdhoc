













module ROOT
{
    static sRequestThread;
    static sIsAcceptRequest;
    static sSceneAlias;
    static sNeedRestart;

    function requestParticleCommand(context, scene_alias)
    {
        sSceneAlias = scene_alias;
        requestStop();

        sRequestThread = Thread(function (context)
        {
            for (;;)
            {
                if (context == nil)
                    break;

                if (sIsAcceptRequest)
                {
                    if (sSceneAlias == "TopMenuParticle_Restart")
                    {
                        if (sNeedRestart)
                        {
                            SceneFaceUtil::loadScene(SceneFace, sSceneAlias);
                            sNeedRestart = false;
                        }
                    }
                    else
                    {
                        SceneFaceUtil::loadScene(SceneFace, sSceneAlias);
                        sNeedRestart = true;
                        break;
                    }
                }

                Thread::Sleep(0.5);
            }


        }, context);

        sRequestThread.start();
    }

    function requestStop()
    {
        if (sRequestThread != nil)
        {
            sRequestThread.terminate();
            sRequestThread = nil;
        }
    }

    function onInitialize(context)
    {
        sIsAcceptRequest = false;
        sNeedRestart = false;

        SceneFace.setSimpleRenderer(true);
        SceneFaceUtil::loadScene(SceneFace, "TopMenuParticle_Start");
        SceneFaceUtil::SetSignalHandler(SceneFace, SceneFaceUtil::HandleType::SCENE_START, onSignal);
    }

    function onFinalize(context)
    {
        requestStop();
        sIsAcceptRequest = nil;
        sNeedRestart = nil;
        sSceneAlias = nil;

        SceneFaceUtil::ClearSignalHandler(SceneFace);
    }

    function onSignal(context, enum)
    {
        if (enum == SceneFaceUtil::HandleType::SCENE_START)
            sIsAcceptRequest = true;
    }

    
}