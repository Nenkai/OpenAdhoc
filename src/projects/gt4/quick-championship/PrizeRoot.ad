module PROJECT::ROOT
{
    static prize_amount = nil;
    static grand_prize_mode = false;

    static model_files = [
        "1st.mdl",
        "2nd.mdl",
        "3rd.mdl",
        "other.mdl",
        "other.mdl",
        "other.mdl"
    ]

    static ordinal_keys = [
        "Rank1st",
        "Rank2nd",
        "Rank3rd",
        "Rank4th",
        "Rank5th",
        "Rank6th",
        "Rank7th",
        "Rank8th",
        "Rank9th",
        "Rank10th",
        "Rank11th",
        "Rank12th"
    ]
    
    function onInitialize(context)
    {
        var quick_work = main::menu::MQuickWork();

        Prize.text = "";
        Money::label.text = "Cr." + main::game.money;
        context.cursor_visible = false;
        OK.visible = false;
        
        var race_code = quick_work.raceLabel;
        var name = getEventNameByRaceCode(context, ROOT, race_code);

        var series = getSeriesRaceIndex(race_code);
        var order = grand_prize_mode ? quick_work.SeriesRank : quick_work.playerGridNumber;
        ToolTip::tip.remove();

        if (grand_prize_mode)
            Info::label.text = context.translate(ROOT, "you won championship").build(name);
        else 
        {
            if (main::menu::MSystem::GetRegionCode() == "us")
            {
                var oname = context.translate(ROOT, "RaceDisplay", ordinal_keys[order]);
                Info::label.text = context.translate(ROOT, "you got a prize").build(name, oname, series);
            }
            else 
                Info::label.text = context.translate(ROOT, "you got a prize").build(name, order + 1, series);
        }
        Info::label.adjustScale();

#ifdef GT4O_US_BETA
        var champ_mdl = "other.mdl";
        var modelfile = grand_prize_mode ? champ_mdl : model_files[order];

        model.setModelSetPath("piece/prize/" + modelfile, false /* cache */, true /* from_disk */, false /* block */);
#else
        var modelfile = grand_prize_mode ? "champ.mdl" : model_files[order];
        model.setModelSetPath("piece/prize/" + model_files[order], false /* cache */, true /* from_disk */, false /* block */);
#endif

        model.doInitialize(context);

        rank.text = (order + 1).toString();

        prize_amount = grand_prize_mode ? quick_work.GrandPrize : quick_work.prize;

        context.pushEvent(main::menu::MScriptEvent(context, ROOT, "doAction"));
    }

    function onFinalize(context)
    {
        Info::label.text = nil;
        prize_amount = nil;
    }

    function onKeyPress(context)
    {
        return makePrizeFast();
    }

    function onKeyRelease(context)
    {
        return makePrizeSlow();
    }

    function doAction(context)
    {
        prize_action(context, ROOT, prize_amount, Prize, Money::label, OK, rank);
    }

    function goNext(context)
    {
        var quick_work = main::menu::MQuickWork();

        if (!grand_prize_mode && quick_work.GrandPrize != false)
        {
            grand_prize_mode = true;
#ifdef GT4O_US_BETA
            MediateRoot::open(context, ROOT);
#else
            start_page(context, PrizeRoot);
#endif
        }
        else 
        {
            quick_work.prize = false;
            quick_work.GrandPrize = false;

            start_page(context, AfterRoot);
        }
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        goNext(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::OK
{
    function onActivate(context)
    {
        main::sound.play("ok");
        goNext(context);
        return EVENTRESULT_FILTER;
    }
}