













module CarSplitBaseRoot
{
    attribute thread_;
    attribute thread2_;

    method open(context)
    {
        context.pushPage(self);
        return true;
    }

    method close(context)
    {
        ArcadeProject::ignorePadEvent(true, true);

        foreach(var root in Context1P.getPageList().reverse())
            root.close(Context1P);
        foreach(var root in Context2P.getPageList().reverse())
            root.close(Context2P);

        context.sync(2.0);

        Context1P.clearPage();
        Context2P.clearPage();

        context.closePage(self);

        ArcadeProject::ignorePadEvent(false);
    }

    method onInitialize(context)
    {
        OverLapRoot::ButtonHelpGT5.onSplitCarSelect();

        ArcadeProject::ignorePadEvent(true);

        pdistd::MGamePort::SetWheelAssignMode(pdistd::WheelAssignMode::CONSOLE);

        thread_ = Thread(self.event_pad_mask, context);
        thread_.start();

        self.FadeEffect.reverse = false;
        self.FadeEffect.reset();
        self.FadeEffect.on_effect_end = self.effect_end_func;
        self.FadeEffect.start();

        context.cursor_visible = false;
    }

    method effect_end_func(context)
    {
        var root1 = CarSplitRoot.doCopy();
        var root2 = CarSplitRoot.doCopy();
        root1.context_number = 1;
        root2.context_number = 2;
        Context1P.startPage(root1);
        Context2P.startPage(root2);
    }

    method onFinalize(context)
    {
        pdistd::MGamePort::SetWheelAssignMode(pdistd::WheelAssignMode::SDK);

        if (thread_ != nil)
        {
            thread_.terminate();
            thread_ = nil;
        }
        if (thread2_ != nil)
        {
            thread2_.terminate();
            thread2_ = nil;
        }
    }

    method onCancel(context)
    {
        return EVENTRESULT_FILTER;
    }

    method event_pad_mask(context)
    {
        while (true)
        {
            var root1 = Context1P.getRootWindow();
            var root2 = Context2P.getRootWindow();

            if (root1 != nil && root2 != nil)
            {
                if (root1.initialized && root2.initialized)
                {
                    ArcadeProject::ignorePadEvent(false);


                    thread2_ = Thread(self.check_page_status, context);
                    thread2_.start();

                    break;
                }
            }
            Thread::Sleep(0.1);
        }
    }

    method check_page_status(context)
    {
        while (true)
        {
            var root1 = Context1P.getCurrentPage();
            var root2 = Context2P.getCurrentPage();

            if (root1 != nil && root2 != nil)
            {

                if (root1.defined("ready") && root1.ready &&
                    root2.defined("ready") && root2.ready)
                {
                    var res = gArcadeSequence.moveNextPage(context);
                    if (res)
                    {
                        context.sync(2.0);
                    }
                    break;
                }
            }
            Thread::Sleep(0.1);
        }
    }
}
