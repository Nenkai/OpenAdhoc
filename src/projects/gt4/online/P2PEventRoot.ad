module PROJECT::ROOT
{
	static gXmlEventList = nil;
	static gXmlEventListOld = nil;
	static sEventListShow = nil;
	static sEventTitle = nil;
	static sEventDoc0 = nil;
	static sEventDoc1 = nil;
	static sEventDoc2 = nil;
	static sEventTip = nil;
	static gLastEventID = nil;
	static sEventListType = nil;
	static sXMLErrorMessage = "XML description error!";

	function onLoad(context)
	{
		setDialogMoveActorV(SkillMenu);
		setDialogMoveActorV(TimeTrialMenu);
	}
	
	function fetchEventList(context)
	{
		|gXmlEventList, gXmlEventListOld| = getEventList(context);
	}

	function buildDocTip(context, eventlist)
	{
		sEventDoc0 = [];
		sEventDoc1 = [];
		sEventDoc2 = [];
		sEventTip = [];
		sEventTitle = [];
	
		for (var i = 0; i < eventlist.size; i++)
		{
			var doc0 = "";
			var doc1 = "";
			var doc2 = "";
			var event = eventlist[i];
			var title = event["Name"][0].value;
			var doclist = event["Doc"];
	
			if (doclist != nil && doclist.size > 0)
			{
				for (var j = 0; j < doclist.size; j++)
				{
					if (j == 0)
						doc0 += doclist[j].value;

					if (j == 1)
						doc1 += doclist[j].value;

					if (j == 2)
						doc2 += doclist[j].value;
				}
			}

			sEventTitle.push(title);
			sEventDoc0.push(doc0);
			sEventDoc1.push(doc1);
			sEventDoc2.push(doc2);
			var tip = "";
			var tips = event["Tip"];
			if (tips != nil && tips.size > 0)
			{
				for (var d = 0; d < tips.size; d++)
				{
					var dnode = tips[d];
					tip += dnode.value;
				}
			}

			sEventTip.push(tip);
		}
	}

	function set_event_game_list_filter(context)
	{
		HomeRoot::setEventGameListFilter(context);
	}

	function fetch_event_list(context)
	{
		fetchEventList(context);
		sEventListShow = gXmlEventList;
		sEventListType = [];
		if (isTimeTrialNow())
		{
			sEventListShow = main::menu::MDomNodeList();
	
			if (gXmlEventList != nil)
			{
				var size = gXmlEventList.size;
				
				for (var i = 0; i < size; i++)
				{
					sEventListShow.push(gXmlEventList[i]);
					sEventListType.push("Now");
				}
			}

			if (gXmlEventListOld != nil)
			{
				var size = gXmlEventListOld.size;
				for (var i = 0; i < size; i++)
				{
					sEventListShow.push(gXmlEventListOld[i]);
					sEventListType.push("Old");
				}
			}
		}
		if (sEventListShow != nil)
		{
			buildDocTip(context, sEventListShow);
			ListPane::ScrollBox::ListBox::refresh(context);
		}
		else
		{
			var event = main::menu::MScriptEvent(context, P2PEventRoot, "no_event_alert");
			context.pushEvent(event);
		}

		if (main::network.getCurrentGameWorldID() > 0)
		{
			var res = main::network.leaveGameMGCL();
			if (!res)
			{
				openOnlineErrorDialog(context);
				restart(context);
			}
		}
	}

	function onInitialize(context)
	{
		var is_came_back_from_rankings = false;
		if (main::game.major_menu_page == "P2PEventRoot" && main::game.selected_event_type == 2)
		{
			is_came_back_from_rankings = true;
			main::game.major_menu_page = "";
			HomeRoot::ButtonsL::TimeAttack::setupEvent(context);
		}

		enterPage(context, P2PEventRoot, getCurrentModeString());
		Common.ToolTip.tip.remove();

		var InfoBg = hidden::Item::info_bg;
		if (isTimeTrialNow())
		{
			bg.image_path = "image/online/event/eventBG_BLUE.png";
			InfoBg.image_path = "image/online/event/plate_TA.png";
		}
		else if (isMyCarEventNow())
		{
			bg.image_path = "image/online/event/eventBG_ORANGE.png";
			InfoBg.image_path = "image/online/event/plate_tune.png";
		}
		else
		{
			bg.image_path = "image/online/event/eventBG_GREEN.png";
			InfoBg.image_path = "image/online/event/plate_QA.png";
		}

		bg.doInitialize(context);
		InfoBg.doInitialize(context);

		var hItem = hidden::Item;
		hItem["FinishSign"].visible = false;
		hItem["MarkImage"].visible = false;
		hItem["RaceType"].visible = false;

		hidden.visible = false;

		SkillMenu.visible = false;
		SkillMenu.actor.out = true;
		SkillMenu.actor.warp();

		TimeTrialMenu.visible = false;
		TimeTrialMenu.actor.out = true;
		TimeTrialMenu.actor.warp();

		main::game.course_code = "";
		main::game.car_code = "";
		main::game.layered_selected_list = nil;

		InfoPane::MoveActor.out = true;
		InfoPane::MoveActor.warp();
		InfoPane::MoveActor.out = false;

		InfoPane::event_info::text.text = "";
		InfoPane::car_info::text.text = "";
		InfoPane::course_info::text.text = "";

		ListPane::ScrollBox::ListBox::init(context);

		if (is_came_back_from_rankings)
		{
			var event = main::menu::MScriptEvent(context, HomeRoot, "on_initialize");
			context.pushEvent(event);
			event = main::menu::MScriptEvent(context, HomeRoot, "setEventGameListFilter");
			context.pushEvent(event);
		}

		var event = main::menu::MScriptEvent(context, P2PEventRoot, "fetch_event_list");
		context.pushEvent(event);

		if (isAutoMenu())
		{
			P2PEventRoot::ListPane::ScrollBox::ListBox.focus_index = 0;
			var event = main::menu::MScriptEvent(context, ListPane::ScrollBox::ListBox, "onActivate");
			context.pushEvent(event);
		}
	}

	function onFinalize(context)
	{
		sEventTitle = nil;
		sEventDoc0 = nil;
		sEventDoc1 = nil;
		sEventDoc2 = nil;
		sEventTip  = nil;
		ListPane::ScrollBox::ListBox::finish(context);
		leavePage(context, P2PEventRoot);
	}
	
	function no_event_alert(context)
	{
		openOnlineErrorDialog(context);
		start_page(context, HomeRoot);
	}
	
	function onCancel(context)
	{
		main::sound.play("cancel");
		gXmlEventList     = nil;
		gXmlEventListOld  = nil;
		sEventListShow    = nil;
		sEventListType    = nil;
		QuickInputRoot::disposeCache();
		start_page(context, HomeRoot);
		return EVENTRESULT_FILTER;
	}

	function calcCourseCategoryIndex(event, is_full_car_select)
	{
		var crs_cat_index = nil;
		if (is_full_car_select)
		{
			var crslist = event["Course"];
			if (crslist != nil)
			{
				for (var i = 0; i < crslist.size; i++)
				{
					var val = crslist[i].value;
					if (val.beginWith("#"))
						val = main::menu::MCourseData::GetLabelByID(val.substr(1).toInt());
					
					var crs = val;
					var type = main::menu::MCourseData::GetType(crs);
					if (type == "dirt" || type == "snow")
					{
						crs_cat_index = 3;
						break;
					}
				}
			}
		}
		return crs_cat_index;
	}

	function check_regulation(context, event)
	{
		var limited_regulation = makeRegulationFromEvent(event);
		var result = EventInfoDialog::open(context, limited_regulation);
		return result;
	}

	static sFilter0 = nil
	static sFilter1 = nil

	function do_search(context, skill)
	{
		var event = sEventListShow[ListPane::ScrollBox::ListBox.focus_index];
		var is_my_car = (event["Car"] == nil);
		if (is_my_car)
		{
			var res = check_regulation(context, event);
			if (res == nil || !res)
				return EVENTRESULT_FILTER;
		}

		var res = openProcessDialog(
			context,
			context.translate(P2PEventRoot, "SEARCHING_GAME"),
			search,
			[event, skill]
		);

		if (res)
		{
			if (main::game.garage.hasRidingCar() && main::game.car_code == main::game.garage.riding_car.car_code)
				main::game.car_code = "";
	
			start_page(context, PregridRoot);
		}
		else
		{
			openOnlineErrorDialog(context);
			var error_code = main::network.getLastErrorCode();
			if (error_code != "0:0:0:12:0")
				restart(context);
	
			return EVENTRESULT_FILTER;
		}

		if (sFilter0 != nil)
		{
			main::network.clearGameListFilter(sFilter0);
			sFilter0 = nil;
		}

		if (sFilter1 != nil)
		{
			main::network.clearGameListFilter(sFilter1);
			sFilter1 = nil;
		}

		return EVENTRESULT_FILTER;
	}

	function search(context, args)
	{
		var event = args[0];
		var skill = args[1];
		var game_node = event["Game"][0];
		var carnodes = event["Car"];
		var is_timetrial = isTimeTrialNow();
		var is_my_car = (carnodes == nil);
		var is_voice = (game_node.getAttribute("voice", "") == "enabled");
		var is_full_car_select = !is_my_car && (carnodes[0].getAttribute("full", "") == "true");
		var slowcarboost = event["SlowCarBoost"];
		
		if (slowcarboost != nil)
			slowcarboost = slowcarboost[0].toInt();
	
		var crs_cat_index = calcCourseCategoryIndex(event, is_full_car_select);
		var rule_set = makeCurrentRuleSet(
			event, 0, is_timetrial, is_my_car, is_voice,
			skill, is_full_car_select, slowcarboost, crs_cat_index, nil
		);
	
		sFilter0 = main::network.setGameListFilter("RULES_SET", "EQUAL_TO", rule_set);
		if (sFilter0 <= 0)
			return false;
	
		var maxplayers = event["MaxPlayers"][0].value.toInt();
		sFilter1 = main::network.setGameListFilter("PLAYER_COUNT", "NOT_EQUALS", maxplayers);
		if (sFilter1 <= 0)
			return false;
	
		var result = false;
		if (!isTimeTrialNow())
		{
			do
			{
				var list_size = 16;
				var list_idx = 1;
				while (1)
				{
					var gamelist = main::network.getGameList(list_idx, list_size);
					var list_num = gamelist.size;
					for (var i = 0; i < list_num; i++)
					{
						var game = gamelist[i];
						var WorldStatus = game[11];
						if (WorldStatus == 2)
						{
							main::network.setVoiceChatEnable(is_voice);
							var res = main::network.joinGameMGCL(game[0]);
							if (res)
							{
								result = true;
								break;
							}
						}
					}
					if (list_num < list_size)
						break;
				
					list_idx++;
				}
			} while (isAutoMenu() && !result)
		}
	
		if (!result)
		{
			var eventname = "EV|" + game_node.value;
			if (eventname.size >= 54)
				abort();
	
			var stats = main::menu::MGameStats();
			var stats_string = stats.pack();
			main::network.setVoiceChatEnable(is_voice);
			var rnd = main::menu::MRandom::GetValue(0, 2147483647);
			var res = main::network.createGameMGCL(
				eventname + "~" + "%08x~%08x".format(main::network.my_id, rnd),
				"", stats_string, maxplayers, 2, 0, skill, rule_set
			);
	
			if (res)
				result = true;
		}
		return result;
	}
}

module PROJECT::ROOT::ListPane::ScrollBox::ListBox
{
	function init(context)
	{
		ListBox.setItemTemplate(context, hidden::Item);
		ListBox.visible_callback = visible_callback;
		ListBox.focus_callback = focus_callback;
		ListBox.magnify_ratio = 1.0;
		ListBox.repeat = false;
		ListBox.alignment = 0.5;
		ListBox.step_min = 1;
		ListBox.step_max = 1;
	}
	
	function finish(context)
	{
		ListBox.focus_index = -1;
	}

	function setup_widget(context, i, w)
	{
		if (sEventListShow == nil || sEventListType == nil)
			return;
	
		var event = sEventListShow[i];
		if (sEventListType.size != 0)
		{
			if (sEventListType[i] == "Old")
			{
				w.TimeDoc.visible = false;
				w.FinishSign.visible = true;
			}
			else
			{
				w.TimeDoc.visible = true;
				w.FinishSign.visible = false;
			}
		}
		else
			w.FinishSign.visible = false;
	
		w.Name.text = event["Name"][0].value;
		w.Name.adjustScale();
		
		var time_text;
		if (time_text = event["TimeDoc"] == nil)
			w.TimeDoc.text = "";
		else
			w.TimeDoc.text = event["TimeDoc"][0].value;

		w.TimeDoc.adjustScale();
		var c_idx = 0;
		if (event["Regulation"] != nil)
			c_idx = event["Regulation"][0].getAttribute("color", "0").toInt();
	
		if (c_idx >= 5 && c_idx < 0)
			c_idx = 0;
	
		var color = hidden::ColorPalette["Color" + c_idx.toString()].getColor();
		if (event["Regulation"] != nil)
			w.RegText.text = event["Regulation"][0].getAttribute("text", "");
		else
			w.RegText.text = "";
		
		w.RegText.adjustScale();
		w.RegText.color = color;
		if (event["Game"][0].getAttribute("hot", "") == "true" && w.FinishSign.visible == false)
			w.MarkImage.visible = true;
		else
			w.MarkImage.visible = false;
	
		var bgimage = event["BGImage"][0];
		setupEventImage(context, bgimage, w.flyer_bg);
		w.RaceType.visible = true;
		if (event["Car"] != nil)
		{
			w.RaceType.active = true;
			w.RaceType::car.setColor(color);
			w.RaceType::car.doInitialize(context);
		}
		else
		{
			w.RaceType.active = false;
			w.RaceType::garage.setColor(color);
			w.RaceType::garage.doInitialize(context);
		}

		var notes = event["Note"];
		if (notes != nil)
		{
			w.MarkText.text = notes[0].value;
			w.MarkText.adjustScale();
		}
	}

	function focus_callback(context, new_index, old_index)
	{
		var new_one = ListBox.getItemWidget(new_index, context);
		if (new_one != nil)
		{
			var event = sEventListShow[new_index];
			if (sEventTitle.size > new_index)
				InfoPane::title.text = sEventTitle[new_index];
	
			if (sEventDoc0.size > new_index)
				InfoPane::event_info::text.text = sEventDoc0[new_index];
	
			if (sEventDoc1.size > new_index)
				InfoPane::car_info::text.text = sEventDoc1[new_index];
	
			if (sEventDoc2.size > new_index)
				InfoPane::course_info::text.text = sEventDoc2[new_index];
		}

		var old_one = ListBox.getItemWidget(old_index, context);
		if (P2PEventRoot["Common"] != nil && sEventTip.size > new_index)
			Common.ToolTip.tip.value = sEventTip[new_index];
	}

	function visible_callback(context, index)
	{
		
		for (var i = 0; i < index.size; i++)
		{
			var visible = ListBox.getItemVisible(index[i]);
			if (visible)
			{
				var w = ListBox.getItemWidget(index[i], context);
				setup_widget(context, index[i], w);
				ListBox.setItemUpdate(index[i], 3);
			}
		}
	}

	function onActivate(context)
	{
		if (sEventListShow == nil)
		{
			main::sound.play("disabled");
			return EVENTRESULT_FILTER;
		}

		var event = sEventListShow[ListBox.focus_index];
		if (event.getAttribute("available", "") == "false")
		{
			main::sound.play("disabled");
			var mes = "Not availble now.";
			var msg = event["Message"];
			if (msg != nil && msg.size > 0)
				mes = msg[0].value;
			openConfirmDialog(context, DIALOG_ERROR, mes);
			return EVENTRESULT_FILTER;
		}

		var carnodes = event["Car"];
		var is_my_car = (carnodes == nil);
		var is_full_car_select = !is_my_car && (carnodes[0].getAttribute("full", "") == "true");
		var slowcarboost = event["SlowCarBoost"];
		if (slowcarboost != nil)
			slowcarboost = slowcarboost[0].toInt();
	
		if (is_my_car && !main::game.garage.hasRidingCar())
		{
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, context.translate(HomeRoot, "RIDE_YOUR_CAR"));
			return EVENTRESULT_FILTER;
		}
	
		main::sound.play("ok");
	
		if (isTimeTrialNow())
		{
			var old_flg = (gXmlEventList.size <= ListBox.focus_index);
			TimeTrialMenu::open(context, event, old_flg);
		}
		else if (event.hasAttribute("autoskill"))
		{
			var skills = event["Skill"];
			if (skills == nil)
			{
				openConfirmDialog(context, DIALOG_ERROR, sXMLErrorMessage);
				do_search(context, 0);
			}
			else
			{
				var stats = main::menu::MPlayerStats::unpack(main::network.accountGetStats());
				var point = stats.point;
				var skill = 0;
				for (var i = 0; i < skills.size; i++)
				{
					var thrshld = skills[i].value.toInt();
					if (point < thrshld)
						skill = i;
				}
				do_search(context, skill);
			}
		}
		else
		{
			var skills = event["Skill"];
			if (skills == nil)
				do_search(context, 0);
			else
				SkillMenu::open(context, skills);
		}
		
		return EVENTRESULT_FILTER;
	}

	function refresh(context)
	{
		var last_id = gLastEventID;
		gLastEventID = nil;
		if (sEventListShow == nil)
			return;
	
		for (var i = 0; i < ListBox.getItemCount(); i++)
			ListBox.setItemWidget(i, context, nil);

		var size = sEventListShow.size;
		ListBox.setItemCount(size);

		var fidx = nil;
		for (var i = 0; i < size; i++)
		{
			if (last_id != nil && sEventListShow[i].getAttribute("ID").toInt() == last_id)
			{
				fidx = i;
				last_id = nil;
			}
		}

		if (fidx != nil)
			ListBox.focus_index = fidx;
	}
}

module PROJECT::ROOT::SkillMenu
{
	static sAppendItems = nil;

	function open(context, skills)
	{
		ListPane::ScrollBox::ListBox.can_focus = false;
		sAppendItems = [];
	
		var focus_item = nil;
		for (var i = 0; i < skills.size; i++)
		{
			var item = hidden::SkillItem.doCopy();
			item.oval.label.text = skills[i].value;
			if (focus_item == nil)
				focus_item = item.oval;
	
			item.oval.defineStatic("skill", i);
			SkillMenu.appendChild(context, item);
			sAppendItems.push(item);
		}

		SkillMenu.visible = true;
		SkillMenu.actor.out = false;
		P2PEventRoot.setFocus(focus_item);
		context.sync(0.1);
	}

	function close(context)
	{
		SkillMenu.actor.out = true;
		context.sync(0.1);
		SkillMenu.visible = false;
		if (sAppendItems != nil)
		{
			for (var i = 0; i < sAppendItems.size; i++)
				SkillMenu.removeChild(context, sAppendItems[i]);
			sAppendItems = nil;
		}

		ListPane::ScrollBox::ListBox.can_focus = true;
		P2PEventRoot.setFocus(ListPane::ScrollBox::ListBox);
	}
	
	function onCancel(context)
	{
		main::sound.play("cancel");
		close(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::TimeTrialMenu
{
	static sEvent = nil;

	function open(context, event, old_flg)
	{
		sEvent = event;
		ListPane::ScrollBox::ListBox.can_focus = false;
		TimeTrialMenu.visible = true;
		TTRun::oval.insensitive = old_flg;
		if (old_flg)
			P2PEventRoot.setFocus(TimeTrialMenu::TTRanking::oval);
		else
			P2PEventRoot.setFocus(TimeTrialMenu::TTRun::oval);
	
		TimeTrialMenu.actor.out = false;
		context.sync(0.1);
	}
	
	function close(context)
	{
		TimeTrialMenu.actor.out = true;
		context.sync(0.1);

		TimeTrialMenu.visible = false;
		ListPane::ScrollBox::ListBox.can_focus = true;
		P2PEventRoot.setFocus(ListPane::ScrollBox::ListBox);
		
		sEvent = nil;
	}

	function onCancel(context)
	{
		main::sound.play("cancel");
		close(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::TimeTrialMenu::TTRun
{
	function onActivate(context)
	{
		var event = sEvent;
		TimeTrialMenu::close(context);
		var carnodes = event["Car"];
		var is_my_car = (carnodes == nil);
		var is_full_car_select = !is_my_car && (carnodes[0].getAttribute("full", "") == "true");
		if (is_my_car && !main::game.garage.hasRidingCar())
		{
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, context.translate(HomeRoot, "RIDE_YOUR_CAR"));
			return EVENTRESULT_FILTER;
		}

		main::sound.play("ok");
		if (is_my_car)
		{
			var res = check_regulation(context, event);
			if (!res)
				return EVENTRESULT_FILTER;
		}

		var crs_cat_index = calcCourseCategoryIndex(event, is_full_car_select);
		var rule_set = makeCurrentRuleSet(
			event,
			0, // private?
			1, // timetrial?
			is_my_car, // mycar?
			0, // voice?
			0, // skill?
			is_full_car_select, // full_car_select?
			nil, // slowcarboost?
			crs_cat_index, // crs_index?
			nil // passreq?
		);
	
		main::network.setVoiceChatEnable(0);
		var res = main::network.createGameMGCL(
			"TT|" + "~" + "%08x".format(main::network.my_id),
			"",
			main::menu::MGameStats().pack(),
			1,  // race_type?
			1,  // player_type?
			0,  // password_mode?
			0,  // equalized?
			rule_set
		);
	
		if (!res)
		{
			openOnlineErrorDialog(context);
			restart(context);
		}
		else
			start_page(context, CarRoot);
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::TimeTrialMenu::TTRanking
{
	function onActivate(context, event)
	{
		main::network.event_id = sEvent.getAttribute("ID").toInt();
		main::game.selected_course = main::network.event_id;
		main::sound.play("ok");

		TimeTrialMenu::close(context);

		main::game.major_menu_project = "online";
		main::game.major_menu_page = P2PEventRoot;
		main::game.next_sequence = "online_download_replay";

		start_page(context, nil);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::hidden::SkillItem
{
    function onActivate(context, event)
    {
        main::sound.play("ok");
        SkillMenu::close(context);
        do_search(context, event.widget.skill);
        return EVENTRESULT_FILTER;
    }
}