













module GPSData
{
    #define GPS_DATA_TABLE_NAME "t_gps_data"

    static TABLE_VERSION = 5;

    class GPS_Info_GT5
    {
        attribute id;
        attribute code;
        attribute latitude;
        attribute longitude;
        attribute height;
        attribute rotate_y;
        attribute offset_x;
        attribute offset_z;
        attribute translate_x;
        attribute translate_y;
        attribute translate_z;

        static attr_names;

        method __init__()
        {
            self.id = -1;
            self.code = gtengine::MSpecDB::NO_CODE64;
            self.latitude = 0.0;
            self.longitude = 0.0;
            self.height = 0.0;
            self.rotate_y = 0.0;
            self.offset_x = 0.0;
            self.offset_z = 0.0;
            self.translate_x = 0.0;
            self.translate_y = 0.0;
            self.translate_z = 0.0;
        }

        function begin()
        {
            attr_names = [];

            foreach (|var a, var v| in GPS_Info_GT5)
            {
                if (v.is_attribute)
                    attr_names.push(a.toString());
            }
        }

        method __get_elem__(i)
        {
            return self.getObjectAttribute(i);
        }

        method __set_elem__(i, val)
        {
            self.setObjectAttribute(i, val);
        }

        function GetAttributeNames()
        {
            return attr_names;
        }

        method setParamFromXml(xml_attr_map)
        {
            self.code = xml_attr_map["code"] != nil ? gtengine::MSpecDB::getCourseCode(xml_attr_map["code"]) : gtengine::MSpecDB::NO_CODE64;
            self.latitude = xml_attr_map["latitude"] != nil ? xml_attr_map["latitude"].toFloat() : 0.0;
            self.longitude = xml_attr_map["longitude"] != nil ? xml_attr_map["longitude"].toFloat() : 0.0;
            self.height = xml_attr_map["height"] != nil ? xml_attr_map["height"].toFloat() : 0.0;
            self.rotate_y = xml_attr_map["rotate_y"] != nil ? xml_attr_map["rotate_y"].toFloat() : 0.0;
            self.offset_x = xml_attr_map["offset_x"] != nil ? xml_attr_map["offset_x"].toFloat() : 0.0;
            self.offset_z = xml_attr_map["offset_z"] != nil ? xml_attr_map["offset_z"].toFloat() : 0.0;
            self.translate_x = xml_attr_map["translate_x"] != nil ? xml_attr_map["translate_x"].toFloat() : 0.0;
            self.translate_y = xml_attr_map["translate_y"] != nil ? xml_attr_map["translate_y"].toFloat() : 0.0;
            self.translate_z = xml_attr_map["translate_z"] != nil ? xml_attr_map["translate_z"].toFloat() : 0.0;
        }

        method setParam(columns, params)
        {
            for (var i = 0; i < columns.size; i++)
            {
                var column = columns[i];
                self.setObjectAttribute(column, params[i]);
            }
        }
    }

    GPS_Info_GT5::begin();

    static sEnableGPSDataList;

    function initialize()
    {
        var res = DBUtil::initializeTable(GPS_DATA_TABLE_NAME, TABLE_VERSION);
        if (res)
        {
            var result = createGPSDataTable();
            insertGPSDataFromXML("textdata/gt5/gpsdatalist.xml");
        }
        
        var rows = executeSelect(["code"]);
        if (rows.size == 0)
        {
            insertGPSDataFromXML("textdata/gt5/gpsdatalist.xml");
            rows = executeSelect(["code"]);
            DB_ASSERT(rows.size > 0, 0);
        }

        sEnableGPSDataList = Array(rows.size);
        for (var i = 0; i < rows.size; i++)
        {
            var row = rows[i];
            sEnableGPSDataList[i] = row[0];
        }
    }

    function insertGPSDataFromXML(file_path)
    {
        var res = main::pdistd::ReadFile(file_path);
        if (res["result"] != main::pdistd::FileError::OK)
        {
            return;
        }
        else
        {
            var buf = res["buffer"];
            var xml = main::pdistd::MXml();
            xml.parse(buf);
            var dom = xml.result;
            var nodelist = dom["GPSData"];

            if (nodelist == nil)
                return;

            var node = nodelist[0];
            nodelist = node["course"];

            if (nodelist == nil)
                return;

            SQLITE.begin();

            for (var i = 0; i < nodelist.size; i++)
            {
                node = nodelist[i];
                var attr_map = node.getAttributeMap();
                var course_label = attr_map["code"];
                var course_code = main::gtengine::MSpecDB::getCourseCode(course_label);

                if (course_code != main::gtengine::MSpecDB::NO_CODE64)
                {
                    var gps_info = GPS_Info_GT5();
                    gps_info.setParamFromXml(attr_map);
                    insertGPSInfo(gps_info);
                }
            }

            SQLITE.commit();
        }
    }

    function createGPSDataTable()
    {
        var columns_str = "";
        var attribute_names = GPS_Info_GT5::GetAttributeNames();

        for (var i = 0; i < attribute_names.size; i++)
        {
            var column = attribute_names[i];
            var column_type = "";
            var gps_info = GPS_Info_GT5();

            if (gps_info[column].isInstanceOf(System::String))
                column_type = "TEXT";
            else
                column_type = "INTEGER";

            columns_str += "%s %s, ".format(column, column_type);
        }


        columns_str = columns_str.removeLastOf(", ");
        
        var query = "CREATE TABLE IF NOT EXISTS %{GPS_DATA_TABLE_NAME} (%s, PRIMARY KEY (id))".format(columns_str);
        return SQLITE.execute0(query);
    }

    function executeSelect(columns, conditional_query)
    {
        var columns_str = "";
        foreach (var column in columns)
            columns_str += "%s, ".format(column);

        columns_str = columns_str.removeLastOf(", ");

        if (conditional_query == nil)
            conditional_query = "";

        var select_query = "SELECT %s FROM %{GPS_DATA_TABLE_NAME} ".format(columns_str);
        var query = select_query + conditional_query;
        return SQLITE.executeQuery(query);
    }

    function insertGPSInfo(gps_info)
    {
        var where_query = "WHERE code='%lu'".format(gps_info.code);
        var rows = executeSelect(["code"], where_query);
        if (rows.size)
            return;

        var columns_str = "";
        var values_str = "";
        var params = [];

        var attribute_names = GPS_Info_GT5::GetAttributeNames();
        for (var i = 0; i < attribute_names.size; i++)
        {
            var column = attribute_names[i];
            if (column == "id")
                continue;
                
            var param = gps_info[column];
            params.push(param);
            columns_str += "%s, ".format(column);
            values_str += "?, ";
        }

        columns_str = columns_str.removeLastOf(", ");
        values_str = values_str.removeLastOf(", ");

        var query = "INSERT INTO %{GPS_DATA_TABLE_NAME} (%s) VALUES (%s)".format(columns_str, values_str);
        var result = SQLITE.execute(query, params);
    }

    function getGPSInfo(course)
    {
        var course_code = main::gtengine::MSpecDB::getCourseCode(course);
        var gps_info = GPS_Info_GT5();
        var rows = executeSelect(GPS_Info_GT5::GetAttributeNames(), "WHERE code='%lu'".format(course_code));
        if (rows.size > 0)
        {
            var params = rows[0];
            gps_info.setParam(GPS_Info_GT5::GetAttributeNames(), params);
        }

        return gps_info;
    }

    function getGPSInfoList()
    {
        var rows = executeSelect(["code"]);
        var gps_list = Array(rows.size);
        for (var i = 0; i < rows.size; i++)
        {
            gps_list[i] = rows[i][0];
        }

        return gps_list;
    }
}