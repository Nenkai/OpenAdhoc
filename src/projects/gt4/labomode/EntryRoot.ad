module PROJECT::ROOT
{
	static result = nil;
	static resultText = "";
#ifdef GT4O_US_BETA
	static sUpperY = nil;
	static sLowerY = nil;
#else
	static sUpperY;
	static sLowerY;
#endif
	static opened = false;

	function open(context, type, defaultText)
	{
		context.pushPage(ROOT);

		if (defaultText != nil)
		{
			resultText = defaultText;
		}
		else
			resultText = "";
	
		Keyboard::input.value = resultText;
		result = nil;

		opened = true;
		context.getUpdateContext().enterEventLoop();
		opened = false;

		print("result text = %{resultText}\n");
		return result;
	}

	function getText()
	{
		return resultText;
	}
	
	function close(context)
	{
		ROOT.setFocus(nil);
		context.closePage(ROOT);
		context.getUpdateContext().leaveEventLoop();
	}
	
	function onCancel(context)
	{
		main::sound.play("cancel");
		result = false;
		close(context);
		
		return EVENTRESULT_FILTER;
	}

	function forceCancel(context)
	{
		if (opened)
		{
			if (result == nil)
			{
				result = false;
				close(context);
			}
		}
	}
	
	function ChangeCase(change)
	{
		if (Keyboard::UpperCase.visible)
		{
			ROOT.setFocus(Keyboard::LowerCase::key_capslock);
			Keyboard::LowerCase.visible = true;
			Keyboard::UpperCase.visible = false;
		}
		else
		{
			ROOT.setFocus(Keyboard::UpperCase::key_capslock);
			Keyboard::UpperCase.visible = true;
			Keyboard::LowerCase.visible = false;
		}
	}

	function onInitialize(context)
	{
		Keyboard::UpperCase.visible = false;
		ChangeCase();
	
		if (Keyboard::UpperCase.visible)
			ROOT.setFocus(Keyboard::UpperCase::key_enter);
		else
			ROOT.setFocus(Keyboard::LowerCase::key_enter);
	}
	
	function onFinalize(context)
	{
	}

	function onActivate(context, event, item)
	{
		main::sound.play("ok");
	
		var input = Keyboard::input;
		var widget = ROOT.getFocusedWidget();
		var ch = widget.name.substr(4);
	
		print("ch = %{ch}\n");
	
		switch(ch)
		{
#ifdef GT4O_US_BETA
			case "atmark":
				input.putString("@");
				break;
#endif
			case "semicolon":
				input.putString(";");
				break;
			case "colon":
				input.putString(":");
				break;
			case "comma":
				input.putString(",");
				break;
			case "dot":
				input.putString(".");
				break;
			case "slash":
				input.putString("/");
				break;
			case "space":
				input.putString(" ");
				break;
			case "backspace":
				input.backspace();
				break;
			case "enter":
				resultText = Keyboard::input.value;
				result = true;
				close(context);
				break;
			case "capslock":
				ChangeCase();
				break;
			case "backward":
				input.left();
				break;
			case "forward":
				input.right();
				break;
			default:
				input.putString(ch);
				break;
		}
	
		return EVENTRESULT_FILTER;
	}
}