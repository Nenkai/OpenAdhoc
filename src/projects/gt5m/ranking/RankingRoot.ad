//---------------------------------------------------------------------------------------
// RankingRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ROOT
{
    hidden.visible = false;

    attribute course_code_list = nil;

    function tire_name(context, t)
    {
        return context.translate(ROOT, "TireName", "type_short_%d".format(t));
    }

    function simulation_name(context, physics_pro)
    {
        return context.translate(ROOT, "QuickMenu", physics_pro > 0 ? "SIMULATION_PRO" : "SIMULATION_STANDARD");
    }

    method open(context)
    {
        self.course_code_list = [];
        context.startPage(ROOT);
    }

    method close(context)
    {
        main::SequenceUtil::startProject(context, main::GameSequence::getArgument());
    }

    method onInitialize(context)
    {
        OptionMenuMode.initialize(context, ROOT, hidden::OptionMenuItem, ["TIME_ATTACK", "DRIFT_ATTACK", "DRIFT_ATTACK_ENDLESS"], "GameModeNameGT5P");

        var course_label_list = [];

        var course_list = main::gtengine::MSpecDB::getCourseCodeList();
        for (var i = 0; i < course_list.size; ++i)
        {
            var course_code = course_list[i];
            if (main::gtengine::MSpecDB::NO_CODE64 != course_code)
            {
                self.course_code_list.push(course_code);
                var label = main::gtengine::MSpecDB::getCourseLabel(course_code);
                course_label_list.push(label);
            }
        }

        OptionMenuCategory.initialize(context, ROOT, hidden::OptionMenuItem, course_label_list, "CourseName");

        OptionMenuMode.setIndex(context, 0);
        OptionMenuCategory.setIndex(context, 0);

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        OptionMenuMode.finalize(context);
        OptionMenuCategory.finalize(context);

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PSP_PAD_CTRL_START:
                main::sound.play("ok");
                main::SequenceUtil::startProject(context, "ranking", main::GameSequence::getArgument());
                return EVENTRESULT_FILTER;
            case PSP_PAD_CTRL_L3_UP:
                main::sound.play("cursor");
                ListBox.decIndex(1);
                return EVENTRESULT_FILTER;
            case PSP_PAD_CTRL_L3_DOWN:
                main::sound.play("cursor");
                ListBox.incIndex(1);
                return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }

    method tire_text(context, tire)
    {
        return context.translate(ROOT, "TireName", "type_%d".format(tire));
    }

    method loadRanking(context)
    {
        var mode = OptionMenuMode.index;
        var category = OptionMenuCategory.index;
        if (mode == -1 || category == -1)
            return;

        if (mode == 0)
        {
            var course_code = self.course_code_list[category];
            var board = record().getBoardTA(course_code);
            if (board != nil)
            {
                ListBox.setItemCount(board.table.size);
                ListBox.setItemTemplate(context, hidden::QuickBoardItem);
                var best_time;
                for (var i = 0; i < board.table.size; ++i)
                {
                    var rank = board.table[i];
                    var item = ListBox.getItemWidget(i, context);
                    if (i == 0)
                        best_time = rank.time;

                    initializeForTimeAttackRanking(context, item, i + 1, best_time, rank);
                }
            }
        }
        else
        {
            var course_code = self.course_code_list[category];
            var board = record().getBoardDA(course_code);
            if (nil != board)
            {
                ListBox.setItemCount(board.table.size);
                ListBox.setItemTemplate(context, hidden::QuickBoardItem);
                var best_point;
                for (var i = 0; i < board.table.size; ++i)
                {
                    var rank = mode == 1 ? board.table[i] : board.table_endless[i];
                    if (i == 0)
                        best_point = rank.point;

                    var item = ListBox.getItemWidget(i, context);
                    initializeForDriftAttackRanking(context, item, i + 1, best_point, rank);
                }
            }
        }
    }

    method initializeForTimeAttackRanking(context, item, position, best_time, ta_rank)
    {
        item.Position.TextFace.text = position;
        var even = (position % 2) == 0;
        item.Car.ColorFace0.visible = even;
        item.Car.ColorFace1.visible = !even;
        item.Time.ColorFace0.visible = even;
        item.Time.ColorFace1.visible = !even;

        if (main::gtengine::MSpecDB::NO_CODE64 == ta_rank.car)
        {
            item.Car.ImageFace.image_path = "";
            item.Car.ImageFace.doInitialize(context);
            item.Car.VBox.TextFace1.text = context.translate(ROOT, "QuickMenu", "NO_TARGET_CAR");
            item.Car.VBox.TextFace2.visible = false;
            item.Time.VBox.TextFace.text = context.translate(ROOT, "QuickMenu", "NO_TARGET_TIME");
            item.Time.VBox.TextFaceDiff.visible = false;
        }
        else
        {
            var car_code = ta_rank.car;
            var car_label = main::gtengine::MSpecDB::getCarLabel(car_code);

            item.Car.ImageFace.image_path = "car/thumbnail/%s.%02d".format(car_label, ta_rank.color);
            item.Car.ImageFace.doInitialize(context);
            item.Car.VBox.TextFace1.text = main::gtengine::MSpecDB::getCarShortName(car_code);
            var ranking_format = context.translate(ROOT, "QuickMenu", "RANKING_FORMAT");
            item.Car.VBox.TextFace2.visible = true;
            item.Car.VBox.TextFace2.text = ranking_format.build(
                main::pdiext::GetDateTimeStringShort(ta_rank.date),
                tire_name(context, ta_rank.tire_f),
                tire_name(context, ta_rank.tire_r),
                simulation_name(context, ta_rank.physics_pro),
            );
            item.Time.VBox.TextFace.text = main::pdiext::GetRaceTimeString(ta_rank.time);
            if (best_time == main::pdiext::MAX_LAPTIME1000 || position == 1)
            {
                item.Time.VBox.TextFaceDiff.visible = false;
            }
            else
            {
                item.Time.VBox.TextFaceDiff.visible = true;
                item.Time.VBox.TextFaceDiff.text = "+ %s".format(main::pdiext::GetRaceTimeString(ta_rank.time - best_time))
            }
        }
    }

    method initializeForDriftAttackRanking(context, item, position, best_point, da_rank)
    {
        item.Position.TextFace.text = position;
        var even = (position % 2) == 0;
        item.Car.ColorFace0.visible = even;
        item.Car.ColorFace1.visible = !even;
        item.Time.ColorFace0.visible = even;
        item.Time.ColorFace1.visible = !even;

        if (main::gtengine::MSpecDB::NO_CODE64 == da_rank.car)
        {
            item.Car.ImageFace.image_path = "";
            item.Car.ImageFace.doInitialize(context);
            item.Car.VBox.TextFace1.text = context.translate(ROOT, "QuickMenu", "NO_TARGET_CAR");
            item.Car.VBox.TextFace2.visible = false;
            item.Time.VBox.TextFace.text = context.translate(ROOT, "QuickMenu", "NO_TARGET_POINT");
            item.Time.VBox.TextFaceDiff.visible = false;
        }
        else
        {
            var car_code = da_rank.car;
            var car_label = main::gtengine::MSpecDB::getCarLabel(car_code);

            item.Car.ImageFace.image_path = "car/thumbnail/%s.%02d".format(car_label, da_rank.color);
            item.Car.ImageFace.doInitialize(context);
            item.Car.VBox.TextFace1.text = main::gtengine::MSpecDB::getCarShortName(car_code);
            var ranking_format = context.translate(ROOT, "QuickMenu", "RANKING_FORMAT");
            item.Car.VBox.TextFace2.visible = true;
            item.Car.VBox.TextFace2.text = ranking_format.build(
                main::pdiext::GetDateTimeStringShort(da_rank.date),
                tire_name(context, da_rank.tire_f),
                tire_name(context, da_rank.tire_r),
                simulation_name(context, da_rank.physics_pro),
            );
            item.Time.VBox.TextFace.text = da_rank.point;
            if (best_point < 0 || position == 1)
            {
                item.Time.VBox.TextFaceDiff.visible = false;
            }
            else
            {
                item.Time.VBox.TextFaceDiff.visible = true;
                item.Time.VBox.TextFaceDiff.text = "- %d".format(best_point - da_rank.point)
            }
        }
    }

    module OptionMenuMode
    {
        method onValueChanged(context, index)
        {
            __prototype__::onValueChanged(context);
            ROOT.loadRanking(context);
        }
    }

    module OptionMenuCategory
    {
        method onValueChanged(context, index)
        {
            __prototype__::onValueChanged(context);
            ROOT.loadRanking(context);
        }
    }
}