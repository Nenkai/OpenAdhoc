













module ROOT
{
    #include "TopNews.ad"

    attribute prev_page;
    attribute ignore_on_activate;
    attribute quick_match_version;
    attribute seasonal_version;

    static sUnveilAppver = 109;
    static sUnveilCars = [];
    static sNewDealerCars = [
        "zytek_z11sn_greaves_13",
        "gtr_lm_nismo_15",
        "corvette_stingray_gtc_13",
        "x2014_14",
        "x2014_std_14",
        "dap_racing_kart_80",
        "ralt_rt3_83",
        "lotus_97t_85",
        "is_f_ccsr_11",
        "ts030_hybrid_12",
        "gtr_nismo_gt3_ac_rjn_13",
        "gtr_nismo_14",
        "ft_1_14_sp",
        "m4_14_mp"
    ];

    static sNewFeatureCars = 
    [
        "zytek_z11sn_greaves_13",
        "gtr_lm_nismo_15",
        "corvette_stingray_gtc_13",
        "dap_racing_kart_80",
        "ralt_rt3_83",
        "lotus_97t_85",
        "is_f_ccsr_11",
        "ts030_hybrid_12",
        "gtr_nismo_gt3_ac_rjn_13",
        "gtr_nismo_14",
        "ft_1_14_sp",
        "m4_14_mp"
    ];

    static sNewVisionGTCars = [
        "srt_st_vision_gt_35",
        "srt_lr_vision_gt_35",
        "srt_tr_vision_gt_35",
        "peugeot_vision_gt_14",
        "vw1_vision_gt_15",
        "lf_lc_gt_vision_gt_15",
        "alpine_vision_gt_14",
        "alpine_vision_gt_14_blue",
        "mini_vision_gt_14",
        "mazda_lm55_vision_gt_14",
        "infiniti_vision_gt_14",
        "chaparral_vision_gt_14",
        "subaru_vision_gt_14",
        "toyota_vision_gt_14",
        "astonmartin_vision_gt_14",
        "nissan_vision_gt_14",
        "vw3_vision_gt_14",
        "mitsubishi_vision_gt_14",
        "bmw_vision_gt_14"
    ];

    static sInformationPatchRelease = true;
    static sInformationPatchReleaseImage = "piece/gt6/information/update_details.img";

    static sInformationVisionGTCars = [];

    static sNewRacingGears = [
        ["AVATAR_SET", 70],
        ["AVATAR_SET", 71],
        ["AVATAR_SET", 72],
        ["AVATAR_SET", 75],
        ["AVATAR_SET", 79],
        ["AVATAR_SET", 80],
        ["AVATAR_SET", 81],
    ];

    static sCarPosters = [
        "srt_st_vision_gt_35",
        "srt_lr_vision_gt_35",
        "srt_tr_vision_gt_35",
        "peugeot_vision_gt_14",
        "vw1_vision_gt_15",
    ];

    method open(context)
    {
        self.prev_page = context.getRootWindow();
        SequenceUtil::enableStartMenuRoot();
        SequenceUtil::enableSceneFaceRoot();
        SequenceUtil::startPageDirect(context, self);

        unloadCommunity(context);
    }

    method showTutorial(context)
    {
        var data = 
        [
            // Buy first car
            [
                "check_begin" : "get_first_car",
                "progress" : "get_first_car",
                "exec_func" : function(context, args)
                {
                    ROOT.setFocusGroupItem("Cars_Area", "Cars_Dealer", true);
                    context.pageInRootTransition();
                    var target = ROOT.getGroupItemWidget("Cars_Area", "Cars_Dealer");
                    TutorialUtil::message(context, "get_first_car", 
                       ["open_wait_sec" : 2.0, 
                        "target" : target.WhiteBlink,
                        "build_text" : PROJECT.getGTModeFirstCarName()]);
                },
            ],

            // First car bought
            [
                "check_begin" : "got_first_car",
                "message" : "got_first_car",
                "msg_param" : [
                    "open_wait_sec" : 1.0,
                    "build_text" : [PROJECT.getGTModeFirstCarName(), PROJECT.getGTModeFirstCarPP()],
                ],
                "done" : "got_first_car",
                "begin" : "goto_novice",
            ],

            // After race done
            [
                "check_begin" : "goto_novice",
                "progress" : "goto_novice",
                "begin" : "after_first_race_normal",
                "exec_func" : function(context, args)
                {
                    ROOT.setFocusGroupItem("Career_Area", "Career_N");
                    context.wait(1.0);
                    var target = ROOT.getGroupItemWidget("Career_Area", "Career_N");
                    TutorialUtil::message(context, "goto_novice", ["target" : target.WhiteBlink]);
                }
            ],

            // Go to B
            [
                "check_begin" : "goto_b",
                "progress" : "goto_b",
                "done" : "goto_only_x",
                "message" : "goto_b",
                "msg_param" : ["open_wait_sec" : 1.0],
            ],

            // Go to A
            [
                "check_begin" : "goto_a",
                "progress" : "goto_a",
                "exec_func" : function(context, args)
                {
                    if (!GAME_STATUS.user_profile.option.invalid_moon)
                        TutorialUtil::message(context, "goto_a", ["open_wait_sec" : 1.0]);
                },
            ],

            // Go to IB
            [
                "check_begin" : "goto_ib",
                "progress" : "goto_ib",
                "message" : "goto_ib",
                "begin" : "x2014_welcome",
                "msg_param" : ["open_wait_sec" : 1.0],
            ],

            // x2014 unlocked
            [
                "check_begin" : "goto_only_x",
                "progress" : "goto_only_x",
                "begin" : "x2014_welcome",
                "exec_func" : function(context, args)
                {
                    ROOT.setFocusGroupItem("Career_Area", "Career_Fomula");
                    context.wait(1.5);
                    var target = ROOT.getGroupItemWidget("Career_Area", "Career_Fomula");
                    target.active = true;
                    target.New.visible = true;
                    TutorialUtil::message(context, "goto_only_x", ["target" : target.WhiteBlink]);
                }
            ],

            // Go to IA
            [
                "check_begin" : "goto_ia",
                "progress" : "goto_ia",
                "message" : "goto_ia",
                "msg_param" : ["open_wait_sec" : 1.0],
            ],
            [
                "check_begin" : "goto_s",
                "progress" : "goto_s",
                "message" : "goto_s",
                "msg_param" : ["open_wait_sec" : 1.0],
            ],

            // Goodwood unlocked
            [
                "check_begin" : "open_goodwood_0",
                "progress" : "open_goodwood_0",
                "exec_func" : function(context, args) 
                {
                    context.wait(1.0);
                    GoodWoodWelcomeRoot.open(context, 0);
                    ROOT.setFocusGroupItem("Special_Area", "Special_Goodwood");
                    context.wait(1.5);
                    var target = ROOT.getGroupItemWidget("Special_Area", "Special_Goodwood");
                    target.active = true;
                    target.New.visible = true;
                    TutorialUtil::message(context, "open_goodwood_0", ["target" : target.WhiteBlink]);
                }
            ],
            [
                "check_begin" : "open_goodwood_1",
                "progress" : "open_goodwood_1",
                "exec_func" : function(context, args)
                {
                    context.wait(1.0);
                    GoodWoodWelcomeRoot.open(context, 1);
                    var target = ROOT.getGroupItemWidget("Special_Area", "Special_Goodwood");
                    target.New.visible = true;
                }
            ],
            [
                "check_begin" : "open_goodwood_2",
                "progress" : "open_goodwood_2",
                "exec_func" : function(context, args)
                {
                    context.wait(1.0);
                    GoodWoodWelcomeRoot.open(context, 2);
                    var target = ROOT.getGroupItemWidget("Special_Area", "Special_Goodwood");
                    target.New.visible = true;
                }
            ],
            [
                "check_begin" : "open_goodwood_3",
                "progress" : "open_goodwood_3",
                "exec_func" : function(context, args)
                {
                    context.wait(1.0);
                    GoodWoodWelcomeRoot.open(context, 3);
                    var target = ROOT.getGroupItemWidget("Special_Area", "Special_Goodwood");
                    target.New.visible = true;
                }
            ],
            [
                "check_begin" : "open_goodwood_4",
                "progress" : "open_goodwood_4",
                "exec_func" : function(context, args)
                {
                    context.wait(1.0);
                    GoodWoodWelcomeRoot.open(context, 4);
                    var target = ROOT.getGroupItemWidget("Special_Area", "Special_Goodwood");
                    target.New.visible = true;
                }
            ],
        ];

        if (TutorialUtil::isProgressOrDone("gttop", "goto_ib"))
            TutorialUtil::begin("gttop", "goto_only_x");
        
        TutorialUtil::showTutorial(context, data, "gttop");
    }

    method showGarageFullAtPresentCar(context)
    {
        sound.play("disable");
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
            manager.translate(CarShowroomRoot, "Message_GarageFullAtPresentCar"));
    }

    method showUserSpecialPresent(context)
    {
        if (AppOpt.defined("skip_present"))
            return;

        var checked = PROJECT.history['GTModeRoot::CheckUserSpecial'];
        if (checked)
            return;

            PROJECT.history['GTModeRoot::CheckUserSpecial'] = true;

        var need_check = false;
        var category = "special_present";

        var key_list = ["CAR_0001", "CAR_0002", "CAR_0003", "CAR_0004",
                        "CAR_0005", "CAR_0006", "CAR_0007", "CAR_0008"];

        foreach (var key in key_list)
        {
            var value = KeyValueUtil::get(category, key);
            if (value != "GOT")
            {
                need_check = true;
                break;
            }
        }

        if (!need_check)
            return;

        var type = 3;

        var request = UserProfile2.requestUserSpecialList(type, function(args) { });
        if (Grim2Util::join(context, request, true))
        {
            var user_special_list = UserProfile2.decodeUserSpecialList(request);
            foreach (var u in user_special_list)
            {
                var key = u["key"];
                if (KeyValueUtil::get(category, key) == "")
                    KeyValueUtil::set(category, u["key"], u["value"]);
            }
        }

        foreach (var key in key_list)
        {
            var value = KeyValueUtil::get(category, key);
            if (value == "" || value == "GOT")
                continue;

            if (key.beginWith("CAR"))
            {
                if (GAME_STATUS.user_profile.garage.isFull())
                {
                    showGarageFullAtPresentCar(context);
                    PROJECT.history['GTModeRoot::CheckUserSpecial'] = false;
                    break;
                }

                var car_label = value;
                var cp = gtengine::MCarParameter(gtengine::MSpecDB::getCarCode(car_label));
                cp.setNewCar();

                var message = manager.translate("Voucher", "SPECIAL_PRESENT_%{key}");
                KeyValueUtil::set(category, key, "GOT");
                CarDeliveryRoot.openModal(context, CarDeliveryRoot::OPEN_MODE::PRESENT, cp, message, true);
            }
            else
                ;
        }
    }

    function checkGoodWoodOpen(context)
    {
        var total = GAME_STATUS.user_profile.record.event_record.getStars();
        var array = 
        [
            [total >= 25, "open_goodwood_0"],
            [total >= 50 && TutorialUtil::isDone("gttop", "open_goodwood_0"), "open_goodwood_1"],
            [total >= 75 && TutorialUtil::isDone("gttop", "open_goodwood_1"), "open_goodwood_2"],
            [total >= 100 && TutorialUtil::isDone("gttop", "open_goodwood_2"), "open_goodwood_3"],
            [total >= 125 && TutorialUtil::isDone("gttop", "open_goodwood_3"), "open_goodwood_4"],
        ];

        foreach (|var condition, var key| in array)
        {
            if (condition)
                TutorialUtil::begin("gttop", key);
        }
    }

    function checkCarUnlock(context) { }

    function unloadCommunity(context)
    {
        sProjectHolder.unload("community");
        sProjectHolder.unload("event_setting");

        
    }

    class GroupData
    {
        attribute index;
        attribute widget;
        attribute label;
        attribute items;
        attribute template_widget;
        attribute items_column;
        attribute init_callback;
        attribute invalid = false;

        method __init__(label, items, attribute_map)
        {
            self.label = label;
            self.items = items;
            self.items_column = 3; // hmm..
            self.template_widget = Template::IconGroup;

            if (attribute_map != nil)
            {
                foreach (|var key, var value| in attribute_map)
                    self[key] = value;
            }
        }

        method __set_elem__(i, val)
        {
            self.setObjectAttribute(i, val);
        }

        method generate(context, index)
        {
            var group_w = self.template_widget.doCopy();
            group_w.name = self.label;
            group_w.init(context, self);
            self.index = index;
            self.widget = group_w;
            return group_w;
        }
    }

    class ItemData
    {
        attribute group_widget;
        attribute widget;
        attribute label;
        attribute image;
        attribute template_widget;
        attribute init_callback;
        attribute active_callback;
        attribute focus_enter_callback;
        attribute focus_leave_callback;
        attribute invalid = false;

        method __init__(label, image, attribute_map)
        {
            self.label = label;
            self.image = image;
            self.template_widget = Template::IconS;

            if (attribute_map != nil)
            {
                foreach (|var key, var value| in attribute_map)
                {
                    self[key] = value;
                }
            }
        }

        method __set_elem__(i, val)
        {
            self.setObjectAttribute(i, val);
        }

        method generate(context, group_widget)
        {
            var item_w = self.template_widget.doCopy();
            item_w.name = self.label;
            item_w.init(context, self);
            self.group_widget = group_widget;
            self.widget = item_w;
            return item_w;
        }
    }

    function GenerateGroups(context, base_widget, groups)
    {
        base_widget.clearChildren(context);

        for (var i = 0; i < groups.size; i++)
        {
            var group = groups[i];

            if (group == nil)
                continue;

            var group_w = group.generate(context, i);
            if (group_w != nil)
                base_widget.appendChild(context, group_w);
        }

        HScrollPointer.setItemCount(context, groups.size);
    }

    Template.visible = false;

    module ModuleGroupWidget
    {
        attribute data;

        method onLoad(update_context)
        {
            var render_context = update_context.getRenderContext(0);
            self.Box.clearChildren(render_context);
        }

        method init(context, data)
        {
            self.data = data;

            foreach (var item in data.items)
            {
                if (item.invalid)
                    continue;

                var item_w = item.generate(context, self);
                self.Box.appendChild(context, item_w);
            }

            if (data.init_callback != nil)
                data.init_callback(context, self);
            return EVENTRESULT_CONTINUE;
        }

        method enterFocus(context)
        {
            ROOT.setFocus(self.Box.first);
        }

        method getItem(num)
        {
            return self.Box.getChild(num);
        }

        method onKeyPress(context, event)
        {
            if (LeaveDetectUtil::activated(context, event))
                return EVENTRESULT_FILTER;

             switch (event.keysym)
             {
                 case CELL_PAD_CTRL_L1:
                     if (self.prev != nil)
                     {
                         sound.play("cursor");
                         self.prev.enterFocus(context);
                         HScrollPointer.setPointer(self.data.index);
                     }

                     return EVENTRESULT_FILTER;

                case CELL_PAD_CTRL_R1:
                    if (self.next != nil)
                    {
                        sound.play("cursor");
                        self.next.enterFocus(context);
                        HScrollPointer.setPointer(self.data.index);
                    }

                    return EVENTRESULT_FILTER;
             }

             return EVENTRESULT_CONTINUE;
        }
    }

    module Template::MenuGroup
    {
        import ModuleGroupWidget::*;

        method onFocusEnter(context)
        {
            ScrolledWindow::clip::space::IconGroupBase.setTarget(self.x + self.Box.x, self.Box.w, self.Box.h, true);
            return EVENTRESULT_STOP;
        }
    }

    module Template::IconGroup
    {
        import ModuleGroupWidget::*;

        method init(context, data)
        {
            self.data = data;
            self.Name::label.text = context.translate(ROOT, data.label != nil ? data.label.toString() : "");

            foreach (var item in data.items)
            {
                if (item.invalid)
                    continue;

                var item_w = item.generate(context, self);
                self.Box.appendChild(context, item_w);
            }

            if (data.init_callback != nil)
                data.init_callback(context, self);

            self.Box.column = data.items_column;
            return EVENTRESULT_CONTINUE;
        }

        method onFocusEnter(context)
        {
            ScrolledWindow::clip::space::IconGroupBase.setTarget(self.x + self.Box.x, self.Box.w, self.Box.h, false);
            return EVENTRESULT_STOP;
        }

        module Poster
        {
            attribute car_list;
            attribute index;
            attribute active_dot;
            attribute finalized;

            method onInitialize(context)
            {
                self.visible = false;
                self.finalized = false;
            }

            method onFinalize(context)
            {
                self.SBox::HBox.clearChildren(context);
                self.finalized = true;
            }

            method setCarList(context, car_list)
            {
                self.car_list = car_list;
                self.index = pdistd::MRandom::GetValue(0, car_list.size);
                self.SBox::HBox.clearChildren(context);

                for (var i = 0; i < car_list.size; i++)
                {
                    var dot = ROOT::Template::Dot.doCopy();
                    dot.active = false;
                    self.SBox::HBox.appendChild(context, dot);
                }

                context.pushEvent(main::menu::MFunctionEvent(self.setImage, context));
            }

            method effect_end(context)
            {
                if (self.finalized)
                    return;

                var img = self.ImageFace;

                img.FadeActor.on_effect_end = nil;
                context.pushEvent(main::menu::MFunctionEvent(self.setImage, context));
            }

            method load_complete(context)
            {
                if (self.finalized)
                    return;

                var img = self.ImageFace;
                img.on_delay_load_complete = nil;
                img.FadeActor.on_effect_end = self.*effect_end;
                img.FadeActor.start();
                self.Manufacturer.FadeActor.start();
            }

            method setImage(context)
            {
                if (self.finalized)
                    return;

                if (self.car_list == nil)
                    return;

                self.visible = true;
                var idx = self.index;
                self.index++;

                idx = idx % self.car_list.size;

                var car_label = self.car_list[idx];
                var img = self.ImageFace;
                img.FadeActor.reset();
                
                img.on_delay_load_complete = self.*load_complete;
                img.image_path = "piece/gt6/home/advertise/%s.img".format(car_label);

                if (self.active_dot != nil)
                {
                    self.active_dot.active = false;
                    self.active_dot = nil;
                }

                var dot = self.SBox::HBox.getChild(idx);
                if (dot != nil)
                {
                    dot.active = true;
                    self.active_dot = dot;
                }

                var tuner_label = gtengine::MSpecDB::getTunerLabel(car_label);
                self.Manufacturer.FadeActor.reset();
                self.Manufacturer.text = manager.translate("TunerNameI18n", tuner_label);
                self.Car.text = SpecDatabaseUtil::getAlphabetCarShortName(context, gtengine::MSpecDB::getCarCode(car_label));
            }
        }
    }

    module Template::DemoGroup
    {
        import ModuleGroupWidget::*;

        method init(context, data)
        {
            self.data = data;
            self.Name::label.text = context.translate(ROOT, data.label != nil ? data.label.toString() : "");

            foreach (var item in data.items)
            {
                if (item.invalid)
                    continue;

                var item_w = item.generate(context, self);
                self.Box.appendChild(context, item_w);
            }

            if (data.init_callback != nil)
                data.init_callback(context, self);

            self.Box.column = data.items_column;
            ScrolledWindow::clip::space::IconGroupBase.visible = false;
            return EVENTRESULT_CONTINUE;
        }
    }

    module ModuleItemWidget
    {
        attribute data;

        method init(context, data)
        {
            self.data = data;
            context.pushEvent(main::menu::MFunctionEvent(function (context, item, image)
            {
                item.icon.image_path = "piece/gt6/home/%{image}.img";
            }, context, self, data.image));

            self.label.text = context.translate(ROOT, data.label != nil ? data.label.toString() : "");
            if (self.defined("label_i"))
                self.label_i.text = self.label.text;

            self.active = true;
            self.insensitive = false;

            if (data.init_callback != nil)
                data.init_callback(context, self);
        }

        method onActivate(context)
        {
            if (ROOT.ignore_on_activate)
                return EVENTRESULT_CONTINUE;

            ROOT.saveLastFocus(self);

            var res = EVENTRESULT_CONTINUE;
            if (self.data.active_callback != nil)
            {
                LeaveDetectUtil::suspend(context);
                res = data.active_callback(context, self);
                LeaveDetectUtil::resume(context);
            }

            return res;
        }

        method onFocusEnter(context)
        {
            if (self.data.focus_enter_callback != nil)
            {
                return data.focus_enter_callback(context, self);
            }

            var group_w = self.data.group_widget;
            HScrollPointer.setPointer(group_w.data.index);
            return EVENTRESULT_CONTINUE;
        }

        method onFocusLeave(context)
        {
            if (self.data.focus_leave_callback != nil)
            {
                return data.focus_leave_callback(context, self);
            }

            return EVENTRESULT_CONTINUE;
        }
    }

    module Template::Menu
    {
        import ModuleItemWidget::*;
    }

    module Template::IconS
    {
        import ModuleItemWidget::*;
    }

    module Template::IconW
    {
        import ModuleItemWidget::*;
    }

    module Template::IconF
    {
        import ModuleItemWidget::*;
    }

    module ScrolledWindow::clip::space::IconGroupBase
    {
        attribute chase_target;
        attribute thread;

        method onInitialize(context)
        {
            self.FadeActor.forward();
            self.FadeActor.reset();
        }

        method setTarget(target_x, target_w, target_h, fade_out)
        {
            if (self.thread == nil)
                return;

            self.chase_target = target_x;
            self.SizeActor.setStartValue(0, [self.w, self.h]);
            self.SizeActor.setEndValue(0, [target_w, target_h]);
            self.SizeActor.restart();

            if (fade_out)
                self.FadeActor.backward();
            else
                self.FadeActor.forward();

            self.FadeActor.start();
        }

        method chaseTarget(context)
        {
            for (;;)
            {
                if (self.chase_target != nil)
                    self.ChaseActor.target_x = self.chase_target;

                Thread::Sleep(0.05);
            }
        }

        method chase_start()
        {
            self.thread = Thread(self.chaseTarget);
            self.thread.start();
        }

        method chase_stop()
        {
            if (self.thread != nil)
            {
                self.thread.terminate();
                self.thread = nil;
            }

            self.chase_target = nil;
        }
    }

    // This is where the actual menu and their functions are defined
    module Home // Garage, Gallery, etc
    {
        static menuGarage = ItemData(
            "Home_Garage", // Label
            "garage", // Image
            [
                // Attributes to define
                'template_widget' : Template::Menu,
                'init_callback' : function(context, item)
                {
                    item.New.visible = GAME_STATUS.user_profile.context.garage_new_mark;
                },

                'active_callback' : function(context, item)
                {
                    if (!isRidingCar())
                    {
                        sound.play("disable");
                        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                            manager.translate("CommonGTMode", "Message_GarageEmpty"));
                        return;
                    }

                    sound.play("ok");
                    GarageRoot.open(context);

                    if (TutorialUtil::isBegin("gttop", "buy_car"))
                        context.finish(true);

                    return EVENTRESULT_FILTER;
                },
            ]
        );

        static menuGallery = ItemData(
            "Home_Gallery", // Label
            "gallery", // Image
            [
                // Attributes to define
                'template_widget' : Template::Menu,
                'init_callback' : function(context, item) {},

                'active_callback' : function(context, item)
                {
                    sound.play("ok");
                    LeaveDetectUtil::suspend(context);
                    ReplayListRoot.open(context, ReplayListRoot::MODE::ALL);
                    LeaveDetectUtil::resume(context);

                    return EVENTRESULT_FILTER;
                },
            ]
        );

        // "Top-level" variable
        var menuMessage = ItemData(
            "Home_Message", // Label
            "message", // Image
            [
                // Attributes to define
                'template_widget' : Template::Menu,
                'init_callback' : function(context, item)
                {
                    var max_mail_id = GAME_STATUS.user_profile.mail.getMaxMailId();
                    GTMail.requestAllMailList(max_mail_id, function (args)
                    {
                        |var context, var request| = args;
                        var count = 0;

                        if (request.isDone())
                        {
                            var mail_list = GTMail.decodeMailList(request);
                            GAME_STATUS.user_profile.mail.add(mail_list);
                            count = GAME_STATUS.user_profile.mail.getNewCount();
                        }

                        item.Count::SBox::TextFace.text = count;
                        item.Count.visible = count > 0;
                    });
                },

                'active_callback' : function(context, item) 
                {
                    sound.play("ok");
                    if (!ROOT::checkOnlineFeatureAvailable(context, false))
                        return EVENTRESULT_FILTER;

                    if (PDINetwork.isChatRestricted())
                    {
                        LeaveDetectUtil::suspend(context);
                        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                            manager.translate("Community", "ERROR_CHAT_RESTRICTED"));
                        LeaveDetectUtil::resume(context);
                        return EVENTRESULT_FILTER;
                    }

                    sProjectHolder.load("community", "community");
                    CursorProject::StartMenuRoot::StartMenu.hide();
                    CommunityProject::MessageRoot.open(context, true);

                    var count = GAME_STATUS.user_profile.mail.getNewCount();
                    item.Count::SBox::TextFace.text = count;
                    item.Count.visible = count > 0;

                    unloadCommunity(context);
                    CursorProject::StartMenuRoot::StartMenu.appear();

                    return EVENTRESULT_FILTER;
                },
            ]
        );

        // "Top-level" variable
        var menuNews = ItemData(
            "Home_News", // Label
            "news", // Image
            [
                // Attributes to define
                'template_widget' : Template::Menu,
                'init_callback' : function(context, item)
                {
                    var category_id1 = 1;
                    foreach (var category_id2 in [1, 2])
                    {
                        News2.requestNewsIdList(category_id1, category_id2, function (args)
                        {
                            |var context, var request| = args;
                            if (request.isDone())
                            {
                                var news_id_list = News2.decodeNewsIdList(request);
                                NewsFileUtil::updateNewsIdList(category_id1, category_id2, news_id_list);
                                if (category_id2 == 1)
                                    return;

                                var count = NewsFileUtil::getNotYetReadCount();
                                item.Count::SBox::TextFace.text = count;
                                item.Count.visible = count > 0;
                            }
                        });
                    }
                },

                'active_callback' : function(context, item) 
                {
                    sound.play("ok");
                    if (!ROOT::checkOnlineFeatureAvailable(context, false))
                        return EVENTRESULT_FILTER;

                    sProjectHolder.load("community", "community");
                    CursorProject::StartMenuRoot::StartMenu.hide();
                    CommunityProject::NewsRoot.open(context);

                    var count = NewsFileUtil::getNotYetReadCount();
                    item.Count::SBox::TextFace.text = count;
                    item.Count.visible = count > 0;

                    unloadCommunity(context);
                    CursorProject::StartMenuRoot::StartMenu.appear();

                    return EVENTRESULT_FILTER;
                },
            ]
        );

        static menuStatus = ItemData(
            "Home_Status", // Label
            "status", // Image
            [
                // Attributes to define
                'template_widget' : Template::Menu,
                'init_callback' : function(context, item) {},

                'active_callback' : function(context, item)
                {
                    sound.play("ok");
                    LeaveDetectUtil::suspend(context);
                    Status2Root.open(context);
                    LeaveDetectUtil::resume(context);

                    return EVENTRESULT_FILTER;
                },
            ]
        );

        static menuDLC = ItemData(
            "Home_DLC", // Label
            "dlc", // Image
            [
                // Attributes to define
                'template_widget' : Template::Menu,
                'init_callback' : function(context, item) {},

                'active_callback' : function(context, item) 
                {
                    sound.play("ok");
                    if (!ROOT::checkOnlineFeatureAvailable(context, false))
                        return EVENTRESULT_FILTER;

                    LeaveDetectUtil::suspend(context);
                    DLCRoot.open(context);
                    CursorProject::StartMenuRoot::StartMenu.reflectCurrentStatus(context);
                    LeaveDetectUtil::resume(context);

                    return EVENTRESULT_FILTER;
                },
            ]
        );

        static Area = GroupData("Home_Area",
        [
            menuGarage,
            menuGallery,
            menuStatus,
            menuMessage,
            menuNews,
            menuDLC,
        ],
        [
            'template_widget' : Template::MenuGroup
        ]);
    }

    // Online Menu
    module Online
    {
        // "Top-level" variable
        var iconCommunity = ItemData("Online_Community", "community", 
        [
            // Attributes to define
            'template_widget' : Template::IconS,
            'init_callback' : function(context, item)
            {
                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                // Only unlock if B is done
                item.active = TutorialUtil::isDone("gttop", "complete_career_b");

                var flag = KeyValueUtil::getFlag("new_flag", "community");
                if (flag == nil)
                {
                    flag = true;
                    KeyValueUtil::set("new_flag", "community", flag);
                }

                item.New.visible = item.active && flag;
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                        manager.translate("CommonGTMode", "Message_NeedLicenseForCommunity"));
                    return EVENTRESULT_FILTER;
                }

                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                sound.play("ok");
                KeyValueUtil::set("new_flag", "community", false);

                if (!ROOT::checkOnlineFeatureAvailable(context, false))
                    return EVENTRESULT_FILTER;
                
                if (PDINetwork.isChatRestricted())
                {
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                        manager.translate("Community", "ERROR_CHAT_RESTRICTED"));
                }

                sProjectHolder.load("community", "community");
                sProjectHolder.load("event_setting", "event_setting");

                CommunityProject::CommunityRoot.open(context);
                return EVENTRESULT_FILTER;
            },
        ]);

        var iconOpenLobby = ItemData("Online_OpenLobby", "openlobby",
        [
            // Attributes to define
            'template_widget' : Template::IconS,
            'init_callback' : function(context, item)
            {
                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                // Only unlock if B is done
                item.active = TutorialUtil::isDone("gttop", "complete_career_b");

                var flag = KeyValueUtil::getFlag("new_flag", "openlobby");
                if (flag == nil)
                {
                    flag = true;
                    KeyValueUtil::set("new_flag", "openlobby", flag);
                }

                item.New.visible = item.active && flag;
            },

            'active_callback' : function(context, item) 
            {
                if (!item.active)
                {
                    sound.play("disable");
                    var label_name = manager.translate(ROOT, "Online_OpenLobby");
                    var need_license_name = manager.translate("CommonGTMode", "LICENSE_A");

                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                        manager.translate("CommonGTMode", "Message_NeedLicense").build(label_name, need_license_name));
                    return EVENTRESULT_FILTER;
                }

                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                var size = pdistd::GetDiskFreeSize("/APP_DATA");
                size = size.toLong() - main::REPLAY_MINIMUM_HDD_SPACE;
                if (size < 0)
                {
                    pdistd::MSystemDialog::abortDiskFull(main::REPLAY_MINIMUM_HDD_SPACE / 1024, false);
                    return EVENTRESULT_FILTER;
                }

                sound.play("ok");
                KeyValueUtil::set("new_flag", "openlobby", false);

                if (!ROOT::checkOnlineFeatureAvailable(context, true))
                    return EVENTRESULT_FILTER;
                
                sProjectHolder.load("event_setting", "event_setting");
                RoomRoot.open(context);

                return EVENTRESULT_FILTER;
            },
        ]);

        var iconQuickMatch = ItemData("Online_QuickMatch", "quickmatch",
        [
            // Attributes to define
            'template_widget' : Template::IconS,
            'init_callback' : function(context, item)
            {
                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                // Only unlock if B is done
                item.active = TutorialUtil::isDone("gttop", "complete_career_b");

                var flag = KeyValueUtil::getFlag("new_flag", "quickmatch");
                if (flag == nil)
                {
                    flag = true;
                    KeyValueUtil::set("new_flag", "quickmatch", flag);
                }

                item.New.visible = item.active && flag;
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");
                    var label_name = manager.translate(ROOT, "Online_QuickMatch");
                    var need_license_name = manager.translate("CommonGTMode", "LICENSE_A");

                    var text = manager.translate("CommonGTMode", "Message_NeedLicense")
                                    .build(label_name, need_license_name);

                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, text);
                    return EVENTRESULT_FILTER;
                }

                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                sound.play("ok");
                KeyValueUtil::set("new_flag", "quickmatch", false);

                if (ROOT.quick_match_version != nil)
                    KeyValueUtil::set("online_event", "quick_match_version", ROOT.quick_match_version);
                
                if (!ROOT::checkOnlineFeatureAvailable(context, false))
                    return EVENTRESULT_FILTER;
                
                if (!checkQuickMatchAvailable(context))
                    return EVENTRESULT_FILTER;
                
                if (PDINetwork.isChatRestricted())
                {
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                        manager.translate("Community", "ERROR_CHAT_RESTRICTED"));
                }

                QuickMatchRoot.open(context);
                
                return EVENTRESULT_FILTER;
            },
        ]);

        iconQuickMatch.invalid = OnlineUtility.isLanMode();

        static iconChampionshipMatch = ItemData("Online_Championship", "champions_league", 
        [
            // Attributes to define
            'template_widget' : Template::IconS,
            'init_callback' : function(context, item)
            {
                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                // Only unlock if B is done
                item.active = TutorialUtil::isDone("gttop", "complete_career_b");
            },

            'active_callback' : function(context, item) 
            {
                if (!item.active)
                {
                    sound.play("disable");
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                        manager.translate("CommonGTMode", "Message_NeedLicenseForOnline"));
                    return EVENTRESULT_FILTER;
                }

                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                sound.play("disable");

                if (!ROOT::checkOnlineFeatureAvailable(context, true))
                    return EVENTRESULT_FILTER;
                
                return EVENTRESULT_FILTER;
            },
        ]);

        var iconSeasonalEvent = ItemData("Online_SeasonalEvent", "seasonal", // Image
        [
            // Attributes to define
            'template_widget' : Template::IconS,
            'init_callback' : function(context, item)
            {
                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                // Only unlock if N is done
                item.active = TutorialUtil::isDone("gttop", "complete_career_n");

                var flag = KeyValueUtil::getFlag("new_flag", "seasonal");
                if (flag == nil)
                {
                    flag = !item.active;
                    KeyValueUtil::set("new_flag", "seasonal", flag);
                }

                item.New.visible = item.active && flag;
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");
                    var label_name = manager.translate(ROOT, "Online_SeasonalEvent");
                    var need_license_name = manager.translate("CommonGTMode", "LICENSE_B");

                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                        manager.translate("CommonGTMode", "Message_NeedLicense").build(label_name, need_license_name));
                    return EVENTRESULT_FILTER;
                }

                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                sound.play("ok");

                if (!ROOT::checkOnlineFeatureAvailable(context, false))
                    return EVENTRESULT_FILTER;

                KeyValueUtil::set("new_flag", "seasonal", false);

                if (ROOT.seasonal_version != nil)
                    KeyValueUtil::set("online_event", "seasonal_version", ROOT.seasonal_version);

                SeasonalEventsRoot.open(context);
                
                return EVENTRESULT_FILTER;
            },
        ]);

        static Area = GroupData("Online_Area", 
        [
            iconCommunity,
            iconOpenLobby,
            iconQuickMatch,
            iconSeasonalEvent,
        ],
        [
            'items_column' : 4,
        ]);
    }

    module Arcade
    {
        static iconSinglePlay = ItemData("Arcade_SinglePlay", "arcade_single",
        [
            // Attributes to define
            'template_widget' : Template::IconF,
            'init_callback' : function(context, item)
            {
                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");
            },

            'active_callback' : function(context, item)
            {
                sound.play("ok");
                main::GameSequence::setArgumentObject(["is_single_play" : true]);
                SequenceUtil::startProjectSimple(context, "arcade", "gtmode");
                return EVENTRESULT_FILTER;
            },
        ]);

        static iconMultiPlay = ItemData("Arcade_MultiPlay", "arcade_multi", // Image
        [
            // Attributes to define
            'template_widget' : Template::IconF,
            'init_callback' : function(context, item)
            {
                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");
            },

            'active_callback' : function(context, item)
            {
                sound.play("ok");
                main::GameSequence::setArgumentObject(["is_single_play" : false,
                                                       "fixed_game_mode" : gtengine::GameMode::SPLIT_BATTLE]);
                SequenceUtil::startProjectSimple(context, "arcade", "gtmode");
                return EVENTRESULT_FILTER;
            },
        ]);

        static Area = GroupData("Arcade_Area", 
        [
            iconSinglePlay,
            iconMultiPlay,
        ]);
    }

    module Career
    {
        static iconCareerN = ItemData("Career_N", "career_n",
        [
            // Attributes to define
            'template_widget' : Template::IconF,
            'init_callback' : function(context, item)
            {
                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");
            },

            'active_callback' : function(context, item)
            {
                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                sound.play("ok");
                CareerModeRoot.open(context, CareerModeUtil::CATEGORY::N);
                return EVENTRESULT_FILTER;
            },
        ]);

        static iconCareerB = ItemData("Career_B", "career_b", 
        [
            // Attributes to define
            'template_widget' : Template::IconF,
            'init_callback' : function(context, item)
            {
                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                item.active = TutorialUtil::isDone("gttop", "complete_career_n");
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");
                    return EVENTRESULT_FILTER;
                }

                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                sound.play("ok");
                CareerModeRoot.open(context, CareerModeUtil::CATEGORY::B);
                return EVENTRESULT_FILTER;
            },
        ]);

        static iconCareerA = ItemData("Career_A", "career_a", // Image
        [
            // Attributes to define
            'template_widget' : Template::IconF,
            'init_callback' : function(context, item)
            {
                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                item.active = TutorialUtil::isDone("gttop", "complete_career_b");
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");
                    return EVENTRESULT_FILTER;
                }

                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                sound.play("ok");
                CareerModeRoot.open(context, CareerModeUtil::CATEGORY::A);
                return EVENTRESULT_FILTER;
            },
        ]);

        static iconCareerIB = ItemData("Career_IB", "career_ib", // Image
        [
            // Attributes to define
            'template_widget' : Template::IconF,
            'init_callback' : function(context, item)
            {
                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                item.active = TutorialUtil::isDone("gttop", "complete_career_a");
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");
                    return EVENTRESULT_FILTER;
                }

                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                sound.play("ok");
                CareerModeRoot.open(context, CareerModeUtil::CATEGORY::IB);
                return EVENTRESULT_FILTER;
            },
        ]);

        static iconCareerIA = ItemData("Career_IA", "career_ia",
        [
            // Attributes to define
            'template_widget' : Template::IconF,
            'init_callback' : function(context, item)
            {
                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                item.active = TutorialUtil::isDone("gttop", "complete_career_ib");
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");
                    return EVENTRESULT_FILTER;
                }

                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                sound.play("ok");
                CareerModeRoot.open(context, CareerModeUtil::CATEGORY::IA);
                return EVENTRESULT_FILTER;
            },
        ]);

        static iconCareerS = ItemData("Career_S", "career_s", // Image
        [
            // Attributes to define
            'template_widget' : Template::IconF,
            'init_callback' : function(context, item)
            {
                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                item.active = TutorialUtil::isDone("gttop", "complete_career_ia");
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");
                    return EVENTRESULT_FILTER;
                }

                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                sound.play("ok");
                CareerModeRoot.open(context, CareerModeUtil::CATEGORY::S);
                return EVENTRESULT_FILTER;
            },
        ]);

        var iconCareerFomula = ItemData("Career_Fomula", "career_formula", // Image
        [
            // Attributes to define
            'template_widget' : Template::IconF,
            'init_callback' : function(context, item)
            {
                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                item.active = TutorialUtil::isDone("gttop", "complete_career_a");
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");

                    var label_name = manager.translate(ROOT, "Career_Fomula");
                    var need_license_name = manager.translate("CommonGTMode", "LICENSE_IB");

                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                        manager.translate("CommonGTMode", "Message_NeedLicense").build(label_name, need_license_name));

                    return EVENTRESULT_FILTER;
                }

                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                sound.play("ok");
                XChallengeRoot.open(context);
                return EVENTRESULT_FILTER;
            },
        ]);

        static Area = GroupData("Career_Area", 
        [
            iconCareerN,
            iconCareerB,
            iconCareerA,
            iconCareerIB,
            iconCareerIA,
            iconCareerS,
            iconCareerFomula,
        ]);
    }

    module Cars
    {
        var iconDealer = ItemData("Cars_Dealer", "car_dealer",
        [
            // Attributes to define
            'template_widget' : Template::IconW,
            'init_callback' : function(context, item)
            {
                item.insensitive = false;

                var cars = sNewDealerCars;
                foreach (var car in cars)
                {
                    var flag = KeyValueUtil::getFlag("new_flag", car);
                    if (flag == nil)
                    {
                        flag = true;
                        KeyValueUtil::set("new_flag", car, true);
                    }

                    if (flag)
                        item.New.visible = true;
                }
            },

            'active_callback' : function(context, item)
            {
                sound.play("ok");
                CarDealerRoot.openCarDealer(context);
                return EVENTRESULT_FILTER;
            },
        ]);

        var iconVisionGT = ItemData("Cars_VisionGT", "vision_gt",
        [
            // Attributes to define
            'template_widget' : Template::IconW,
            'init_callback' : function(context, item)
            {
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                var cars = sNewVisionGTCars;
                foreach (var car in cars)
                {
                    var flag = KeyValueUtil::getFlag("new_flag", car);
                    if (flag == nil)
                    {
                        flag = true;
                        KeyValueUtil::set("new_flag", car, true);
                    }

                    if (flag)
                        item.New.visible = true;
                }
            },

            'active_callback' : function(context, item)
            {
                sound.play("ok");
                unloadCommunity(context);
                ServerUtil::ResidentLobby::destroyImmediately(context);
                SequenceUtil::startProjectSimple(context, "vision_gt", "gtmode");

                return EVENTRESULT_FILTER;
            },
        ]);

        var iconFeature = ItemData("Cars_Feature", "car_feature",
        [
            // Attributes to define
            'template_widget' : Template::IconW,
            'init_callback' : function(context, item)
            {
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                var cars = sNewFeatureCars;
                foreach (var car in cars)
                {
                    var flag = KeyValueUtil::getFlag("new_flag", car);
                    if (flag == nil)
                    {
                        flag = true;
                        KeyValueUtil::set("new_flag", car, true);
                    }

                    if (flag)
                        item.New.visible = true;
                }
            },

            'active_callback' : function(context, item)
            {
                sound.play("ok");
                CarDealerRoot.openCategory(context);

                return EVENTRESULT_FILTER;
            },
        ]);

        static iconCarSearch = ItemData("Cars_Search", "car_search",
        [
            // Attributes to define
            'template_widget' : Template::IconW,
            'init_callback' : function(context, item)
            {
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");
            },

            'active_callback' : function(context, item)
            {
                sound.play("ok");
                CarDealerRoot.openCarSearch(context);

                return EVENTRESULT_FILTER;
            },
        ]);

        static Area = GroupData("Cars_Area",
        [
            iconDealer,
            iconFeature,
            iconVisionGT,
            iconCarSearch,
        ],
        [
            'items_column' : 2,
            'init_callback' : function(context, item)
            {
                if (TutorialUtil::isDone("gttop", "get_first_car"))
                {
                    static car_posters  = [];
                    car_posters += sCarPosters;

                    if (car_posters.size > 5)
                        car_posters.resize(5);
                    
                    item.Poster.setCarList(context, car_posters);
                }
            }
        ]);
    }

    module GTAuto
    {
        static iconTuningParts = ItemData("GTAuto_TuningParts", "tuning_parts", // Image
        [
            // Attributes to define
            'template_widget' : Template::IconS,
            'init_callback' : function(context, item)
            {
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");
            },

            'active_callback' : function(context, item)
            {
                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;
                sound.play("ok");

                sProjectHolder.load("gtauto", "gtauto");
                GTAutoProject::GTAutoRoot.openTuningPartsShop(context);

                return EVENTRESULT_FILTER;
            },
        ]);

        var iconRacingGear = ItemData("GTAuto_RacingGear", "racing_gear", 
        [
            // Attributes to define
            'template_widget' : Template::IconS,
            'init_callback' : function(context, item)
            {
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                var list = sNewRacingGears;
                foreach (|var type, var id| in list)
                {
                    var v = "%s_%02d".format(type, id);
                    var flag = KeyValueUtil::getFlag("new_flag", v);
                    if (flag == nil)
                    {
                        flag = true;
                        KeyValueUtil::set("new_flag", v, true);
                    }

                    if (flag)
                        item.New.visible = true;
                }
            },

            'active_callback' : function(context, item)
            {
                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;
                sound.play("ok");

                sProjectHolder.load("gtauto", "gtauto");
                GTAutoProject::GTAutoRoot.openRacingGearShop(context);

                return EVENTRESULT_FILTER;
            },
        ]);

        var iconCustomParts = ItemData("GTAuto_CustomParts", "custom_parts", // Image
        [
            // Attributes to define
            'template_widget' : Template::IconS,
            'init_callback' : function(context, item)
            {
                var flag = KeyValueUtil::getFlag("new_flag", "parts_meter");
                if (flag == nil)
                {
                    flag = true;
                    KeyValueUtil::set("new_flag", "parts_meter", flag);
                }

                item.New.visible = flag;
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");
            },

            'active_callback' : function(context, item)
            {
                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;
                sound.play("ok");

                sProjectHolder.load("gtauto", "gtauto");
                GTAutoProject::GTAutoRoot.openCustomPartsShop(context, "F3");

                return EVENTRESULT_FILTER;
            },
        ]);

        static iconPaint = ItemData("GTAuto_Paint", "paint",
        [
            // Attributes to define
            'template_widget' : Template::IconS,
            'init_callback' : function(context, item)
            {
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");
            },

            'active_callback' : function(context, item)
            {
                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;
                sound.play("ok");

                sProjectHolder.load("gtauto", "gtauto");
                GTAutoProject::GTAutoRoot.openPaintShop(context);

                return EVENTRESULT_FILTER;
            },
        ]);

        static iconPitService = ItemData("GTAuto_PitService", "pit_service", // Image
        [
            // Attributes to define
            'template_widget' : Template::IconS,
            'init_callback' : function(context, item)
            {
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");
            },

            'active_callback' : function(context, item)
            {
                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;
                sound.play("ok");

                sProjectHolder.load("gtauto", "gtauto");
                GTAutoProject::GTAutoRoot.openPitService(context);

                return EVENTRESULT_FILTER;
            },
        ]);

        static Area = GroupData("GTAuto_Area",
        [
            iconTuningParts,
            iconCustomParts,
            iconPitService,
            iconRacingGear,
            iconPaint,
        ],
        [
            'init_callback' : function(context, item) { item.GTAutoLogo.visible = true; }
        ])
    }

    module Special
    {
        var iconLRV = ItemData("Special_LRV", "lrv", // Image
        [
            // Attributes to define
            'invalid' : GAME_STATUS.user_profile.option.invalid_moon,
            'template_widget' : Template::IconF,
            'init_callback' : function(context, item)
            {
                item.visible = TutorialUtil::isDone("gttop", "complete_career_b");

                var flag = KeyValueUtil::getFlag("new_flag", "moon");
                if (flag == nil)
                {
                    flag = true;
                    KeyValueUtil::set("new_flag", "moon", flag);
                }

                item.New.visible = flag;
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");
                    return EVENTRESULT_FILTER;
                }

                sound.play("ok");
                LunarExplorationRoot.open(context);

                return EVENTRESULT_FILTER;
            },
        ]);

        var iconGoodwood = ItemData("Special_Goodwood", "goodwood", 
        [
            // Attributes to define
            'template_widget' : Template::IconF,
            'init_callback' : function(context, item)
            {
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");
                item.active = TutorialUtil::isProgress("gttop", "open_goodwood_0") || TutorialUtil::isDone("gttop", "open_goodwood_0");
                
                var array = ["open_goodwood_0","open_goodwood_1","open_goodwood_2","open_goodwood_3","open_goodwood_4"];
                var is_new = false;
                foreach (var key in array)
                {
                    if (TutorialUtil::isProgress("gttop", key))
                        is_new = true;
                }

                item.New.visible = is_new;
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");
                    return EVENTRESULT_FILTER;
                }

                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                sound.play("ok");
                RaceEventRoot.open(context, CareerModeUtil::CATEGORY::GOODWOOD, "gw_fos");

                return EVENTRESULT_FILTER;
            },
        ]);

        static AcademyInfo = nil;
        var iconAcademy = ItemData("Special_Academy", "academy", 
        [
            // Attributes to define
            'template_widget' : Template::IconF,
            'init_callback' : function(context, item)
            {
                AcademyInfo = nil;

                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                var flag = KeyValueUtil::getFlag("new_flag", "academy2015");
                if (flag == nil)
                {
                    flag = true;
                    KeyValueUtil::set("new_flag", "academy2015", flag);
                }

                item.New.visible = item.active && flag;
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");
                    return EVENTRESULT_FILTER;
                }

                sound.play("ok");
                if (!ROOT::checkOnlineFeatureAvailable(context, false))
                    return EVENTRESULT_FILTER;

                var country = NP.getRegionName();
                var languages = NP.getRegionLanguage();
                var language = "";

                if (languages != nil)
                    language = languages[0];

                var request = Grim2.requestAcademy(country, language, function(args) {});
                if (!Grim2Util::joinAwait(context, request))
                {
                    sound.play("disable");
                    return;
                }

                var academy = Grim2.decodeAcademy(request);
                if (!academy["enable"])
                {
                    sound.play("disable");
                    return;
                }

                KeyValueUtil::set("new_flag", "academy2015", false);
                AcademyRoot.open(context, academy);

                return EVENTRESULT_FILTER;
            },
        ]);

        var iconAyrtonSenna = ItemData("Special_AyrtonSenna", "ayrton_senna", 
        [
            // Attributes to define
            'template_widget' : Template::IconF,
            'init_callback' : function(context, item)
            {
                // Only show if get_first_car tutorial is done
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                var flag = KeyValueUtil::getFlag("new_flag", "senna");
                if (flag == nil)
                {
                    flag = true;
                    KeyValueUtil::set("new_flag", "senna", flag);
                }

                item.New.visible = flag;
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");
                    return EVENTRESULT_FILTER;
                }

                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                sound.play("ok");

                KeyValueUtil::set("new_flag", "senna", false);
                SennaRoot.open(context);
                
                return EVENTRESULT_FILTER;
            },
        ]);

        var iconSierraSS = ItemData("Special_SierraSS", "sierra_ss", 
        [
            // Attributes to define
            'template_widget' : Template::IconF,
            'init_callback' : function(context, item)
            {
                var unlock = KeyValueUtil::isCourseUnlock("andalusia_01", nil);
                if (unlock == nil)
                    KeyValueUtil::setCourseUnlock("andalusia_01", false)

                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                var flag = KeyValueUtil::getFlag("new_flag", "sierra_ss");
                if (flag == nil)
                {
                    flag = true;
                    KeyValueUtil::set("new_flag", "sierra_ss", flag);
                }

                item.New.visible = flag;
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");
                    return EVENTRESULT_FILTER;
                }

                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                sound.play("ok");

                KeyValueUtil::set("new_flag", "sierra_ss", false);
                SierraSSRoot.open(context);
                
                return EVENTRESULT_FILTER;
            },
        ]);

        static Area = GroupData("Special_Area",
        [
            iconGoodwood,
            iconLRV,
            iconAyrtonSenna,
            iconSierraSS
        ],
        [
            'items_column' : 4,
        ]);
    }

    module Tool
    {
        var iconPhoto = ItemData("Tool_Photo", "photo", 
        [
            // Attributes to define
            'template_widget' : Template::IconS,
            'init_callback' : function(context, item)
            {
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");
                item.active = TutorialUtil::isDone("gttop", "complete_career_n");

                var flag = KeyValueUtil::getFlag("new_flag", "photo");
                if (flag == nil)
                {
                    flag = !item.active;
                    KeyValueUtil::set("new_flag", "photo", flag);
                }

                item.New.visible = item.active && flag;
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");
                    var label_name = manager.translate(ROOT, "Tool_Photo");
                    var need_license_name = manager.translate("CommonGTMode", "LICENSE_B");

                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                        manager.translate("CommonGTMode", "Message_NeedLicense").build(label_name, need_license_name));

                    return EVENTRESULT_FILTER;
                }

                if (!checkRidingCar(context))
                    return EVENTRESULT_FILTER;

                sound.play("ok");

                KeyValueUtil::set("new_flag", "photo", false);
                PhotoLocationRoot.open(context);
                
                return EVENTRESULT_FILTER;
            },
        ]);

        var iconGPS = ItemData("Tool_GPS", "gps_replay", 
        [
            // Attributes to define
            'template_widget' : Template::IconS,
            'init_callback' : function(context, item)
            {
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                var flag = KeyValueUtil::getFlag("new_flag", "gps");
                if (flag == nil)
                {
                    flag = true;
                    KeyValueUtil::set("new_flag", "gps", flag);
                }

                item.New.visible = item.active && flag;
            },

            'active_callback' : function(context, item)
            {
                if (GetVersionBranch() != "gt6")
                {
                    sound.play("disable");
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                        manager.translate("CommonGTMode", "Message_NotAvailable"));

                    return;
                }

                sound.play("ok");

                KeyValueUtil::set("new_flag", "gps", false);
                SequenceUtil::startProjectSimple(context, "gps_replay", "gtmode");
                
                return EVENTRESULT_FILTER;
            },
        ]);

        var iconDataLogger = ItemData("Tool_DataLogger", "datalogger", 
        [
            // Attributes to define
            'template_widget' : Template::IconS,
            'init_callback' : function(context, item)
            {
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                var flag = KeyValueUtil::getFlag("new_flag", "data_logger");
                if (flag == nil)
                {
                    flag = true;
                    KeyValueUtil::set("new_flag", "data_logger", flag);
                }

                item.New.visible = item.active && flag;
            },

            'active_callback' : function(context, item)
            {
                if (!item.active)
                {
                    sound.play("disable");
                    return EVENTRESULT_FILTER;
                }

                sound.play("ok");

                KeyValueUtil::set("new_flag", "data_logger", false);
                SequenceUtil::startProjectSimple(context, "datalogger", "gtmode");
                
                return EVENTRESULT_FILTER;
            },
        ]);

        var iconCourseMaker = ItemData("Tool_CourseMaker", "course_maker", 
        [
            // Attributes to define
            'template_widget' : Template::IconS,
            'init_callback' : function(context, item)
            {
                item.insensitive = !TutorialUtil::isDone("gttop", "get_first_car");

                var flag = KeyValueUtil::getFlag("new_flag", "coursemaker");
                if (flag == nil)
                {
                    flag = true;
                    KeyValueUtil::set("new_flag", "coursemaker", flag);
                }

                item.New.visible = item.active && flag;
            },

            'active_callback' : function(context, item)
            {
                sound.play("ok");

                KeyValueUtil::set("new_flag", "coursemaker", false);
                CourseMakerRoot.open(context);
                
                return EVENTRESULT_FILTER;
            },
        ]);

        static Area = GroupData("Tool_Area", 
        [
            iconPhoto,
            iconDataLogger,
            iconGPS,
            iconCourseMaker,
        ],
        [
            'items_column' : 4
        ]);
    }

    module Demo
    {
        static iconSinglePlay = ItemData("Arcade_SinglePlay", "arcade_single",
        [
            // Attributes to define
            'invalid' : !GAME_STATUS.user_profile.option.visible_icon_singleplay,
            'template_widget' : Template::IconF,
            'active_callback' : function(context, item)
            {
                sound.play("ok");
                main::GameSequence::setArgumentObject(["is_single_play" : true]);
                SequenceUtil::startProjectSimple(context, "arcade", "gtmode");
                return EVENTRESULT_FILTER;
            },
        ]);

        static iconOpenLobby = ItemData("Online_OpenLobby", "openlobby",
        [
            // Attributes to define
            'invalid' : !GAME_STATUS.user_profile.option.visible_icon_open_lobby,
            'template_widget' : Template::IconS,
            'active_callback' : function(context, item)
            {
                sound.play("ok");
                sProjectHolder.load("event_setting", "event_setting");
                RoomRoot.open(context);

                return EVENTRESULT_FILTER;
            },
        ]);

        static iconGPS = ItemData("Tool_GPS", "gps_replay",
        [
            // Attributes to define
            'invalid' : !GAME_STATUS.user_profile.option.visible_icon_gps,
            'template_widget' : Template::IconS,
            'active_callback' : function(context, item)
            {
                sound.play("ok");
                SequenceUtil::startProjectSimple(context, "gps_replay", "gtmode");

                return EVENTRESULT_FILTER;
            },
        ]);

        static iconLRV = ItemData("Special_LRV", "lrv",
        [
            // Attributes to define
            'invalid' : GAME_STATUS.user_profile.option.invalid_moon,
            'template_widget' : Template::IconF,
            'active_callback' : function(context, item)
            {
                sound.play("ok");
                LunarExplorationRoot.open(context);

                return EVENTRESULT_FILTER;
            },
        ]);

        static Area = GroupData("Arcade_Area",
        [
            iconSinglePlay,
            iconLRV,
            iconOpenLobby,
            iconGPS,
        ],
        [
            'template_widget' : Template::DemoGroup,
            'items_column' : 4,
            'init_callback' : function(context, item)
            {
                item.AvertiseTexture::ImageFace.image_path = "piece/gt6/home/top_demo_gt6.img";
                item.AvertiseTexture::ImageFace.adjustSize();
            }
        ])
    }

    module VersionGT6
    {
        method onInitialize(context)
        {
            var ver_str = pdiext::MProductInformation::GetDisplayVersion();
            ver_str = ver_str.substr(0, ver_str.rfind("."));

            if (pdiext::isQABuild())
                ver_str = ver_str + ".qa";
            
            self.Version.text = "Ver. " + ver_str;
        }
    }

    function checkRidingCar(context)
    {
        if (!isRidingCar())
        {
            sound.play("disable");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, 
                manager.translate("CommonGTMode", "Message_PleaseSelectCar"));
            return false;
        }

        return true;
    }

    function checkOnlineFeatureAvailable(context, with_chat_restriction)
    {
        if (with_chat_restriction == nil)
            with_chat_restriction = false;

        if (with_chat_restriction && LoginUtil::isChatRestricted(context))
        {
            sound.play("disable");
            return false;
        }

        if (!LoginUtil::makeSureLogin(context, true))
        {
            LoginUtil::setPresence(false);
            return false;
        }

        LoginUtil::setPresence(true);
        Grim2Util::updateFriendList(context);
        Grim2Util::updateGameStats(context);

        if (with_chat_restriction && LoginUtil::isChatRestricted(context))
        {
            sound.play("disable");
            return false;
        }

        if (!NPUtil::checkPlayerName(context))
        {
            sound.play("disable");
            return false;
        }

        return true;
    }

    method startLeaveDetect(context)
    {
        LeaveDetectUtil::end(context);
        if (AppOpt.defined("no_autodemo"))
            return;

        var timeout_sec = GAME_STATUS.user_profile.option.autodemo_start_interval;
        if (timeout_sec > 0)
        {
            if (timeout_sec < 10)
                timeout_sec = 10;

            LeaveDetectUtil::begin(context, timeout_sec - 5, self, startTimeoutMessage, endTimeoutMessage);
        }
    }

    method startAutoDemo(context)
    {
        SequenceUtil::startProject(context, "leavedemo", "gtmode");
    }

    method resetTooltipText(context)
    {
        ToolTip::tip.value = "";
        News.off(context);
    }

    method getTooltipTextForDemo(context)
    {
        var tooltip_text = "";
        var option = GAME_STATUS.user_profile.option;

        if (option.kiosk_mode)
            tooltip_text = manager.translate(ROOT, "Message_NowOnSale");

        return tooltip_text;
    }

    method setTooltipText(context)
    {
        var tooltip_text = getTooltipTextForDemo(context);
        if (tooltip_text != "")
        {
            ToolTip::tip.value = tooltip_text;
            News.off(context);
        }
        else
        {
            ToolTip::tip.value = "";
            News.on(context);
        }
    }

    method startTimeoutMessage(context)
    {
        resetTooltipText(context);
        ToolTip::tip.value = context.translate(ROOT, "Message_StartDemoSoon");
        context.addTimeOut("autodemo_countdown", startAutoDemo, context);
        context.setTimeOut("autodemo_countdown", 5.0);
    }

    method endTimeoutMessage(context)
    {
        context.removeTimeOut("autodemo_countdown");
        setTooltipText(context);
    }

    method getGroupItemWidget(group_label, item_label)
    {
        if (group_label == nil || item_label == nil)
            return nil;

        var group_w = ScrolledWindow::clip::space::HBox[group_label];
        if (group_w == nil)
            return nil;

        return group_w.Box[item_label];
    }

    method setFocusGroupItem(group_label, item_label, warp)
    {
        var item_w = getGroupItemWidget(group_label, item_label);
        if (item_w == nil)
            return;

        ROOT.setFocus(item_w);

        if (warp == true)
            ScrolledWindow::clip.warp(item_w);
    }

    method saveLastFocus(item_w)
    {
        var group_w = item_w.data.group_widget;
        PROJECT.history['GTTopRoot::LastFocusGroup'] = group_w.data.label;
        PROJECT.history['GTTopRoot::LastFocusItem'] = item_w.data.label;
    }

    method returnLastFocus()
    {
        var group_label = PROJECT.history['GTTopRoot::LastFocusGroup'];
        var item_label = PROJECT.history['GTTopRoot::LastFocusItem'];
        self.setFocusGroupItem(group_label, item_label, true);
    }

    function getAvertiseTextureForVGT()
    {
        if (!TutorialUtil::isDone("gttop", "get_first_car"))
            return "";

        var folder = MENUDB.executeQuery1R1C("SELECT Folder FROM t_vision_gt WHERE Featured=1 ORDER BY RANDOM() LIMIT 1");
        if (folder != nil)
            return "piece/gt6/vgt/%s/ad.img".format(folder);
        else
            return "";
    }

    static PrizeFactorTable = 
    [
        1.1,
        1.3,
        1.5,
        1.7,
        2.0
    ];

    function checkLoginPresent(context)
    {
        if (LoginUtil::isOnline())
        {
            var now = pdistd::MTime();
            var last_login = pdistd::MTime();
            var now_epoc_second = pdiext::getBetterTime().getBySecond();
            now.setBySecond(now_epoc_second);
            last_login.setBySecond(GAME_STATUS.user_profile.context.last_login);

            now = now.toLocal();
            last_login = last_login.toLocal();

            var diff = pdistd::MTime::getDifferenceOfDay(now, last_login);

            if (GAME_STATUS.user_profile.context.last_login != 0 
                && now.year == last_login.year
                && now.month == last_login.month
                && now.day == last_login.day)
                return;

            var factor = GAME_STATUS.user_profile.context.exp_factor;
            var factor_index = 0;
            if (factor > 1.0)
            {
                for (var i = 0; i < PrizeFactorTable.size; ++i)
                {
                    if (factor == PrizeFactorTable[i])
                    {
                        factor_index = i;
                        break;
                    }
                }
            }

            if (diff == 1)
            {
                if (factor_index < 4)
                    factor_index++;
            }
            else if (diff > 1 && diff <= 4)
            {
                factor_index = factor_index - (diff - 1);
            }
            else
            {
                factor_index = 0;
            }


            if (factor_index > 4 || factor_index < 0)
                factor_index = 0;

            GAME_STATUS.user_profile.context.exp_factor = PrizeFactorTable[factor_index];
            GAME_STATUS.user_profile.context.last_login = now_epoc_second;

            var head_text = manager.translate("CommonGTMode", "LOGIN_BONUS_TITLE");
            SaveDataUtilGT6::saveEveryWhere(context);

            DialogUtil::openInformationDialog(context, manager.translate("CommonGTMode", "LOGIN_BONUS").build("%s".format(head_text),
                (GAME_STATUS.user_profile.context.exp_factor * 100).toInt()),
                head_text,
                "piece/gt6/information/login_bonus%s.img".format(factor_index + 1));

            CursorProject::StartMenuRoot::StartMenu.reflectCurrentLoginBonus(context);
        }
    }

    function checkBirthDay(context)
    {
        if (LoginUtil::isOnline())
        {
            var birthday = NP.getBirthday();
            if (birthday != nil)
            {
                var today_epoc = pdiext::getBetterTime().getBySecond();
                var last_present_day_epoc = GAME_STATUS.user_profile.context.last_birthday_bonus;

                var today = pdistd::MTime();
                today.setBySecond(today_epoc);
                today = today.toLocal();

                today.hour = 23;
                today.minute = 59;
                today.second = 59;
                today_epoc = today.getBySecond();

                if (today_epoc - last_present_day_epoc < 60 * 60 * 24 * 350)
                    return;

                var present_car_year = birthday.year;
                var toyear_birthday = birthday;
                if (today.month == 1 && birthday.month == 12)
                    toyear_birthday.year = today.year - 1;
                else
                    toyear_birthday.year = today.year;

                var toyear_birthday_epoc = toyear_birthday.getBySecond();
                toyear_birthday_epoc = toyear_birthday_epoc + 86399;

                if (toyear_birthday_epoc <= today_epoc && 
                    toyear_birthday_epoc >= today_epoc - (60 * 60 * 24 * 7))
                {
                    if (present_car_year < 1937)
                        present_car_year = 1937
                    else if (present_car_year > 2014)
                        present_car_year = 2014;
                }

                var present_car_code = "";
                var info = SPECDB.query1("SELECT CarLabel FROM BIRTHDAY_PRESENT WHERE Year=? ORDER BY RANDOM() LIMIT 1  ", [present_car_year]);
                if (info != nil)
                    present_car_code = info.CarLabel.trim();

                if (present_car_code == nil || present_car_code == "")
                    return;

                if (main::GAME_STATUS.user_profile.garage.isFull())
                {
                    sound.play("disable");
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                        manager.translate(CarShowroomRoot, "Message_GarageFullAtPresentCar"));
                    return;
                }

                var cp = gtengine::MCarParameter(present_car_code);
                cp.setNewCar();
                GAME_STATUS.user_profile.context.last_birthday_bonus = today_epoc;

                CarDeliveryRoot.openModal(context, CarDeliveryRoot::OPEN_MODE::PRESENT, cp,
                    manager.translate("CommonGTMode", "PRESENT_HAPPY_BIRTHDAY_HEAD"), true);
            }
        }
    }

    function showUpdateDetails(context)
    {
        if (sInformationPatchRelease)
        {
            var ver = pdiext::MProductInformation::GetApplicationVersionDecimal();
            if (KeyValueUtil::getInt("information", "update_details") < ver)
            {
                var key = "UPDATE_DETAILS_%d".format(ver);
                var message = manager.translate("CommonGTMode", key);
                if (PROJECT::IsDevelop(context) || key != message)
                {
                    DialogUtil::openInformationDialog(context, message, 
                        manager.translate("CommonGTMode", "UPDATE_DETAILS_TITLE"), 
                    sInformationPatchReleaseImage);
                }

                KeyValueUtil::set("information", "update_details", ver);
            }
        }

        var RG = GAME_STATUS.user_profile.item.racing_gear;
        var has_82 = RG.hasItem2("AVATAR_SET", 82);
        var has_83 = RG.hasItem2("AVATAR_SET", 83);
        var has_84 = RG.hasItem2("AVATAR_SET", 84);

        if (KeyValueUtil::getFlag("information", "present_srt_suit") != true)
        {
            DialogUtil::openInformationDialog(context, 
                manager.translate("CommonGTMode", "PRESENT_SRT_RACING_GEARS"),
                manager.translate("CommonGTMode", "PRESENT"),
                "piece/gt6/information/srt_suit.img");

            KeyValueUtil::set("information", "present_srt_suit", true);
        }

        if (!has_82)
            RG.addItem2("AVATAR_SET", 82);
        if (!has_84)
            RG.addItem2("AVATAR_SET", 84);
        if (!has_83)
            RG.addItem2("AVATAR_SET", 83);

        var vgt_carlist = sInformationVisionGTCars;
        foreach (var vgt_car in vgt_carlist)
        {
            if (KeyValueUtil::getFlag("information", vgt_car) != true)
            {
                var car_name = gtengine::MSpecDB::getCarName(vgt_car);
                DialogUtil::openInformationDialog(context,
                    manager.translate("CommonGTMode", "UPDATE_DETAILS_VGT").build(car_name),
                    manager.translate("CommonGTMode", "UPDATE_DETAILS_TITLE"),
                    "piece/gt6/home/advertise/%s.img".format(vgt_car));

                KeyValueUtil::set("information", vgt_car, true);
            }
        }
    }

    method requestOnlineEventVersion(context)
    {
        EventRace2.requestSetting(function(args)
        {
            |var context, var request| = args;
            if (request.isDone())
            {
                var setting = EventRace2.decodeSetting(request);
                ROOT.quick_match_version = setting["quick_match_version"];
                ROOT.seasonal_version = setting["seasonal_version"];

                var saved_quick_match_version = KeyValueUtil::getInt("online_event", "quick_match_version");
                if (saved_quick_match_version < ROOT.quick_match_version)
                {
                    var icon = ROOT.getGroupItemWidget("Online_Area", "Online_QuickMatch");
                    if (icon != nil)
                        icon.New.visible = true;
                }

                var saved_seasonal_version = KeyValueUtil::getInt("online_event", "seasonal_version");
                if (saved_seasonal_version < ROOT.seasonal_version)
                {
                    var icon = ROOT.getGroupItemWidget("Online_Area", "Online_SeasonalEvent");
                    if (icon != nil)
                        icon.New.visible = true;
                }
            }
        });
    }

    method onInitialize(context)
    {
        self.ignore_on_activate = true;
        checkCarUnlock(context);
        checkGoodWoodOpen(context);

        CursorProject::SceneFaceRoot.requestParticleCommand(context, "TopMenuParticle_Restart");
        CursorProject::StartMenuRoot::StartMenu.reflectCurrentStatus(context);

        PROJECT.PlayMenuBGM(context, ROOT);

        News.initialize(context);
        News.off(context);

        ToolTip::tip.remove();
        ToolTip::tip.action_type = 1;
        ToolTip::tip.value = "";

        var groups = [
            Home::Area,
            Online::Area,
            Arcade::Area,
            Career::Area,
            Cars::Area,
            GTAuto::Area,
            Special::Area,
            Tool::Area,
        ];

        var kiosk_mode = GAME_STATUS.user_profile.option.kiosk_mode;

        var btn_state = context.getUpdateContext().getPadButtonState(0);

        var press_skip_commands = btn_state & (0x800 | 0x100 | 0x200 | 0x1000);
        var invalid = !IsPatchDemo() && press_skip_commands;

        var is_kiosk = kiosk_mode && !invalid;
        if (is_kiosk)
            groups = [Demo::Area];

        LogoGT6.visible = is_kiosk;
        VersionGT6.visible = !is_kiosk;
        PageTitle.visible = !is_kiosk;
        CursorProject::StartMenuRoot::StartMenu::StatusClip::MoveBox::Status.is_enable = !is_kiosk;

        GenerateGroups(context, ScrolledWindow::clip::space::HBox, groups);

        requestOnlineEventVersion(context);

        ScrolledWindow::clip::space::IconGroupBase.chase_start();

        startLeaveDetect(context);
        LeaveDetectUtil::suspend(context);

        context.pushEvent(menu::MFunctionEvent(postInitialize, context));

        ContextMain.disableInput();
    }

    method postInitialize(context)
    {
        context.wait();
        ScrolledWindow::Fade.restart();

        returnLastFocus();

        setTooltipText(context);

        var push_page_name = PROJECT.history['PushPageName'];
        if (push_page_name != nil && PROJECT.defined(push_page_name))
        {
            ContextMain.enableInput();
            var arg1 = PROJECT.history['PushPageArg1'];
            var arg2 = PROJECT.history['PushPageArg2'];

            PROJECT.history['PushPageName'] = "";
            PROJECT.history['PushPageArg1'] = nil;
            PROJECT.history['PushPageArg2'] = nil;

            PROJECT[push_page_name].open(context, arg1, arg2);
        }
        else if (!TutorialUtil::isBegin("gttop", "get_first_car"))
        {
            context.pageInRootTransition();
        }

        PROJECT.TryLoadMenuSound();
        ContextMain.enableInput();

        if (!GAME_STATUS.user_profile.option.kiosk_mode)
        {
            if (TutorialUtil::isDone("gttop", "got_first_car"))
            {
                showUserSpecialPresent(context);
                showUpdateDetails(context);
                checkLoginPresent(context);
                checkBirthDay(context);
            }

            showTutorial(context);
        }

        LeaveDetectUtil::resume(context);
        self.ignore_on_activate = false;
    }

    method onFinalize(context)
    {
        GTMail.clearCallback();
        News2.clearCallback();
        EventRace2.clearCallback();
        UserProfile2.clearCallback();
        ScrolledWindow::clip::space::IconGroupBase.chase_stop();

        LeaveDetectUtil::end(context);
        News.finalize(context);
    }

    method onKeyPress(context, event)
    {
        if (self.ignore_on_activate)
            return EVENTRESULT_CONTINUE;

        if (LeaveDetectUtil::activated(context, event))
            return EVENTRESULT_FILTER;

        if (CursorProject::StartMenuRoot::StartMenu.checkKeyPress(context, event))
        {
            startLeaveDetect(context);
            return EVENTRESULT_FILTER;
        }

        switch (event.keysym)
        {
            case CELL_PAD_CTRL_SELECT:
                if (PROJECT::IsDevelop(context))
                {
                    LeaveDetectUtil::suspend(context);
                    var state = context.getUpdateContext().getPadButtonState(0);

                    if (state & 0x800)
                    {
                        var project = manager.loadProject("/%{PROJECT_ROOT_DIR}/develop/develop");
                        DevelopProject::DevelopRoot.open(context);
                        main::manager.unloadProject(project);
                        CursorProject::StartMenuRoot::StartMenu.reflectCurrentStatus(context);
                        context.finish(true);
                    }
                    else if (state & 0x100)
                    {
                        startAutoDemo(context);
                    }
                    else
                    {
                        context.finish(true);
                    }

                    LeaveDetectUtil::resume(context);
                }
                return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }
}