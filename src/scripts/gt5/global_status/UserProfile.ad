

//---------------------------------------------------------------------------------------
// UserProfile.ad
//
// Creates the save profile entity
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module UserProfile
{
    static sNeedTotalPointListForLevelUp = [
        0,
        500,
        1140,
        1959,
        3007,
        4348,
        6064,
        8260,
        11071,
        14669,
        19274, // Level 10
        25168,
        32712,
        42368,
        54728,
        70549,
        90800,
        116721,
        149900,
        192369,
        246729, // Level 20
        316310,
        405374,
        519376,
        665299,
        852080,
        1091160,
        1397182,
        1788890,
        2290276,
        2932050, // Level 30
        3753521,
        4805004,
        6150902,
        7873651,
        10078770,
        12901322,
        16514189,
        21138659,
        27057981,
        34634713, // Level 40
    ];

    function clearInitializer()
    {
        undef CreateStructure;
        undef Initialize;
        undef ReinitializeDB;
        undef clearInitializer;
        undef addInitializer;

        GameRecord::clearInitializer();
        GameItemBox::clearInitializer();
        Garage2::clearInitializer();
        GameMail::clearInitializer();
        GameBbs::clearInitializer();
        GameMuseum::clearInitializer();
        GameMusic::clearInitializer();
        GameNews::clearInitializer();
        GameShoppingCart::clearInitializer();
        GameSuspender::clearInitializer();
        GameEntitlement::clearInitializer();
        GameKeyValue::clearInitializer();
    }

    function CreateStructure()
    {
        var st = STStructure("Impl");
        UserProfile.defineModule(st);
        st.define("cash", STLong());
        st.define("gameday", STLong());
        st.define("can_watch_ending", STByte());
        st.define("quicktune_available", STByte());
        st.define("no_entry_event_yet", STByte());
        st.define("option", GameOption::CreateStructure());
        st.define("context", GameContext::CreateStructure());
        st.define("garage", Garage2::CreateStructure());
        st.define("import_garage", ImportGarage::CreateStructure());
        st.define("residence", Residence::CreateStructure());
        st.define("car_set_list", STArray(STArray(STULong(), 8), 3));
        st.define("record", GameRecord::CreateStructure());
        st.define("game_flags", GameFlags::CreateStructure());

        var item_st = GameItemBox::CreateStructure();
        st.define("itembox", item_st);
        st.define("itembox_tune_shop", item_st);

        st.define("messages", STArray(STString(64), 4));
        st.define("mail", GameMail::CreateStructure());
        st.define("bbs", GameBbs::CreateStructure());
        st.define("inputted_user_profile", STByte());
        st.define("aspec_point", STLong());
        st.define("bspec_point", STLong());
        st.define("aspec_lv", STInt());
        st.define("bspec_lv", STInt());

        st.define("museum", GameMuseum::CreateStructure());
        st.define("music", GameMusic::CreateStructure());
        st.define("news", GameNews::CreateStructure());
        st.define("shopping_cart", GameShoppingCart::CreateStructure());
        st.define("total_aspec_running_km", STFloat());
        st.define("total_bspec_running_km", STFloat());
        st.define("total_aspec_win", STUInt());
        st.define("total_bspec_win", STUInt());
        st.define("total_aspec_race_complete", STUInt());
        st.define("total_bspec_race_complete", STUInt());
        st.define("total_purchased_amount", STUInt());
        st.define("ranking_registration", STInt());
        st.define("victim_of_savedata_corruption", STByte());
        st.define("bot_tweet_deleted", STByte());
        st.define("suspender", GameSuspender::CreateStructure());
        st.define("entitlement", GameEntitlement::CreateStructure());
        st.define("key_value", GameKeyValue::CreateStructure());

        DefineMethod();
        return st;
    }

    function Initialize(instance)
    {
        instance.cash = 2000000 / 100; // Starting money
        instance.gameday = 1;
        instance.can_watch_ending = false;
        instance.quicktune_available = false;
        instance.no_entry_event_yet = true;
        GameOption::Initialize(instance.option);
        GameContext::Initialize(instance.context);
        Garage2::Initialize(instance.garage);
        Residence::Initialize(instance.residence);
        GameRecord::Initialize(instance.record);
        GameFlags::Initialize(instance.game_flags);

        for (var i = 0; i < 3; i++)
        {
            for (var j = 0; j < 8; j++)
                instance.car_set_list[i][j] = main::gtengine::MSpecDB::NO_CODE64;
        }

        for (var i = 0; i < 4; i++)
            instance.messages[i] = "";

        GameItemBox::Initialize(instance.itembox, "_user");
        GameItemBox::Initialize(instance.itembox_tune_shop, "_tune_shop");
        instance.itembox_tune_shop.putGoods("gameitem_tuneshop.xml");

        GameMail::Initialize(instance.mail);
        GameBbs::Initialize(instance.bbs);
        GameMuseum::Initialize(instance.museum);
        GameMusic::Initialize(instance.music);
        GameNews::Initialize(instance.news);
        GameShoppingCart::Initialize(instance.shopping_cart);
        GameEntitlement::Initialize(instance.entitlement);
        GameKeyValue::Initialize(instance.key_value);
        instance.inputted_user_profile = false;
        instance.aspec_point = 0;
        instance.bspec_point = 0;
        instance.aspec_lv = 0;
        instance.bspec_lv = 0;
        ImportGarage::Initialize(instance.import_garage);

        instance.total_aspec_running_km = 0.0;
        instance.total_bspec_running_km = 0.0;
        instance.total_aspec_win = 0;
        instance.total_bspec_win = 0;
        instance.total_aspec_race_complete = 0;
        instance.total_bspec_race_complete = 0;
        instance.total_purchased_amount = 0;
        instance.ranking_registration = 0;
        instance.victim_of_savedata_corruption = false;
        instance.bot_tweet_deleted = false;

        GameSuspender::Initialize(instance.suspender);
    }

    function Finalize(instance)
    {
        GameRecord::Finalize(instance.record);
        GameItemBox::Finalize(instance.itembox);
    }

    function addInitializer(instance)
    {
        GameRecord::addInitialize(instance.record);
        GameFlags::addInitialize(instance.game_flags);
        Garage2::addInitialize(instance.garage);
        instance.ranking_registration = 0;
    }

    function ReinitializeDB(instance)
    {
        GameMusic::ReinitializeDB(instance.music);
    }

    function DefineMethod()
    {
        module Impl
        {
            method apply()
            {
                self.option.apply();
                self.context.apply();
                self.garage.apply();
                self.residence.apply();
                self.record.apply();
            }

            method addCash(context, value, over_limit_message = false)
            {
                var cr = self.cash + value;
                if (cr > (2000000000 / 100).toInt())
                {
                    if (over_limit_message)
                    {
                        var cash_max_str = main::pdiext::MMisc::GetMoneyString((2000000000  / 100).toInt());
                        var error_msg = context.translate(context.getCursorProject(), "Component", "YOU_CANNOT_GET_MONEY_MORE").build(cash_max_str);
                        DialogUtil::openConfirmDialog(context, DialogUtil::OK, error_msg);
                    }

                    cr = (2000000000 / 100).toInt();
                }
                else if (self.cash < 0)
                    cr = 0;

                self.cash = cr;
            }

            method checkCashOverLimit(value)
            {
                return self.cash + value > (2000000000 / 100).toInt()
            }

            method getCashLimit()
            {
                return (2000000000 / 100).toInt();
            }

            function getNeedTotalPointForLevelUp(target_level)
            {
                if (target_level >= sNeedTotalPointListForLevelUp.size)
                    target_level = sNeedTotalPointListForLevelUp.size - 1;

                return sNeedTotalPointListForLevelUp[target_level];
            }

            function getLevelMax(target_level)
            {
                return sNeedTotalPointListForLevelUp.size - 1;
            }

            method addAspecPoint(point)
            {
                var prev_level = self.aspec_lv;
                self.aspec_point += point;
                self.aspec_lv = PointToLevel(self.aspec_point);
                return prev_level - self.aspec_lv;
            }

            method addBspecPoint(point)
            {
                var prev_level = self.bspec_lv;
                self.bspec_point += point;
                self.bspec_lv = PointToLevel(self.bspec_point);
                return prev_level - self.bspec_lv;
            }

            method getAspecTotalPoint()
            {
                return self.aspec_point;
            }

            method getBspecTotalPoint()
            {
                return self.bspec_point;
            }

            method getAspecCurrentPoint()
            {
                return getCurrentPoint(self.aspec_point);
            }

            method getBspecCurrentPoint()
            {
                return getCurrentPoint(self.bspec_point);
            }

            method getAspecPointForNextLevel()
            {
                return getPointForNextLevel(self.getAspecLevel());
            }

            method getBspecPointForNextLevel()
            {
                return getPointForNextLevel(self.getBspecLevel());
            }

            method getAspecLevel()
            {
                return self.aspec_lv.toInt();
            }

            method getBspecLevel()
            {
                return self.bspec_lv.toInt();
            }

            method setAspecLevel(target_level, current_point = 0)
            {
                self.aspec_point = getNeedTotalPointForLevelUp(target_level) + current_point;
                self.aspec_lv = PointToLevel(self.aspec_point);
            }

            method setBspecLevel(target_level, current_point = 0)
            {
                self.bspec_point = getNeedTotalPointForLevelUp(target_level) + current_point;
                self.bspec_lv = PointToLevel(self.bspec_point);
            }

            method getExpForNextLevel(level)
            {
                return getPointForNextLevel(level);
            }

            function getPointForNextLevel(level)
            {
                var level_max = getLevelMax();
                if (level_max <= level)
                    return -1;

                var next_level = level + 1;
                var p1 = getNeedTotalPointForLevelUp(level);
                var p2 = getNeedTotalPointForLevelUp(next_level);
                return p2 - p1;
            }

            function getCurrentPoint(total_point)
            {
                var level = PointToLevel(total_point);
                var level_max = getLevelMax();
                if (level_max <= level)
                    return -1;

                return total_point - getNeedTotalPointForLevelUp(level);
            }

            function PointToLevel(total_point)
            {
                if (total_point <= 0)
                    return 0;

                var level_max = getLevelMax();
                var max = getNeedTotalPointForLevelUp(level_max);
                if (total_point >= max)
                {
                    level_max = getLevelMax();
                    return level_max;
                }

                for (var i = 1; i <= level_max; ++i)
                {
                    if (total_point < getNeedTotalPointForLevelUp(i))
                    {
                        var level = i - 1;
                        return level;
                    }
                }
            }

            function LevelToTotalPoint(level)
            {
                var level_max = getLevelMax();
                if (level_max < level)
                    return -1;

                return getNeedTotalPointForLevelUp(level);
            }
        }
    }
}
