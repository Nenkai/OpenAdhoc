













module ROOT
{
    hidden.visible = true;
    
    attribute event_id;
    attribute finish_result;
    attribute current_result;
    attribute laptime;
    attribute show_button;
    attribute all_disp_same_time;
    attribute popup;
    attribute closed;
    attribute result;

    method open(context, event_id, finish_result, laptime, show_button, all_disp_same_time)
    {
        self.event_id = event_id;
        self.finish_result = finish_result;
        self.laptime = laptime;
        self.show_button = show_button;
        self.all_disp_same_time = all_disp_same_time;
        if (self.all_disp_same_time == nil)
            self.all_disp_same_time = false;

        self.result = false;
        self.closed = false;

        self.popup = main::SequenceUtil::ModalPage(context, ROOT);
        self.popup.open();

        var res = self.result;
        self.result = nil;
        return res;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;

        FadeActor.on_effect_end = function(context)
        {
            if (ROOT.popup != nil)
            {
                ROOT.popup.close();
                ROOT.popup = nil;
            }
        }

        FadeActor.out = false;
    }

    method abort(context)
    {
        if (ROOT.popup != nil)
        {
            ROOT.popup.close();
            ROOT.popup = nil;
        }
    }

    async method onInitialize(context)
    {
        var eval_condition = gSequenceCondition.gp.event.eval_condition;
        |var old_eval_type, var old_best_record| = await GAME_STATUS.user_profile.record.event_record.getBestRecord(self.event_id);

        if (old_best_record == -1)
        {
            if (eval_condition.type == gtengine::EvalType::ORDER)
            {
                old_best_record = gtengine::FinishResult::COMPLETE;
            }
            else
            {
                old_best_record = pdiext::MAX_LAPTIME1000;
            }
        }

        var old_result = await GAME_STATUS.user_profile.record.event_record.getEventResult(self.event_id);
        on_initialize_time(context, old_best_record);
        on_initialize_all(context, old_best_record);

        if (self.laptime < old_best_record)
        {
            var eval_type = eval_condition.type;
            await GAME_STATUS.user_profile.record.event_record.updateResult(self.event_id, self.finish_result, eval_type, self.laptime, 0);

            var new_result = GAME_STATUS.user_profile.record.event_record.convertResult(nil, self.finish_result);
            if (old_result == -1 || old_result >= 3)
            {
                |var start_num, var disqualify| = await GAME_STATUS.user_profile.record.playlog_record.getPlayLog(self.event_id);
                Grim2Util::PUTLOG::EVENT::update_mission("new", start_num, disqualify, self.event_id, new_result, self.laptime);
            }
            else if (new_result != old_result)
            {
                |var start_num, var disqualify| = await GAME_STATUS.user_profile.record.playlog_record.getPlayLog(self.event_id);
                Grim2Util::PUTLOG::EVENT::update_mission("normal", start_num, disqualify, self.event_id, new_result, self.laptime);
            }
        }

        LeaveDetectUtil::begin(context, 75, self, onLeaveDetect, nil);
    }

    method onLeaveDetect(context)
    {
        close(context);
    }

    method on_initialize_time(context, old_best_record)
    {
        var gp = gSequenceCondition.gp;
        var eval_condition = gp.event.eval_condition;

        if (self.finish_result == gtengine::FinishResult::DSQ)
        {
            Time::Info::NewRecord.visible = false;
        }
        else
        {
            var is_new = false;
            if (eval_condition.type == gtengine::EvalType::ORDER)
            {
                is_new = self.finish_result < old_best_record;
            }
            else
            {
                is_new = self.laptime < old_best_record;
            }

            Time::Info::NewRecord.visible = is_new;
        }

        var record = "---";
        if (eval_condition.type == gtengine::EvalType::ORDER)
        {
            switch (self.finish_result)
            {
                case gtengine::FinishResult::GOLD:
                    record = "1";
                    break;

                case gtengine::FinishResult::SILVER:
                    record = "2";
                    break;

                case gtengine::FinishResult::BRONZE:
                    record = "3";
                    break;
            }
        }
        else
        {
            record = pdiext::GetRaceTimeString(self.laptime);
        }

        if (self.finish_result != gtengine::FinishResult::DSQ)
        {
            Time::Info::Result::Time::TextFace.visible = true;
            Time::Info::Result::Time::TextFaceInvalid.visible = false;
            Time::Info::Result::Time::TextFace.text = record;
        }
        else
        {
            Time::Info::Result::Time::TextFace.visible = false;
            Time::Info::Result::Time::TextFaceInvalid.visible = true;
            Time::Info::Result::Time::TextFaceInvalid.text = record;
        }

        Time::Info::Result::Time::TextFace_shadow.text = record;
        if (self.all_disp_same_time)
        {
            Time.ScalarInterpolator.restart();
        }
        else
        {
            Time::Info::Result::Time.VectorInterpolator.restart();
        }

        Time::Info::Result::Time::Trophy.visible = false;
        Time::Info::Cause.visible = false;

        switch (self.finish_result)
        {
            case gtengine::FinishResult::NONE:
                Time::Info::Cause.visible = true;
                Time::Info::Cause.TextFace.text = manager.translate("Game", "UNDER_CLEAR_TIME");
                break;

            case gtengine::FinishResult::DSQ:
                Time::Info::Cause.visible = true;
                Time::Info::Cause.TextFace.text = manager.translate("Game", "INVALID_TIME");
                break;

        }
    }

    method startSE(context)
    {
        if (self.finish_result != gtengine::FinishResult::DSQ)
        {
            switch (self.finish_result)
            {
                case gtengine::FinishResult::GOLD:
                    if (Time::Info::NewRecord.visible)
                        sound.play("big_cheer");
                    else
                        sound.play("clap_b");
                    break;

                case gtengine::FinishResult::SILVER:
                    sound.play("clap_m");
                    break;

                case gtengine::FinishResult::BRONZE:
                    sound.play("clap_s");
                    break;
            }
        }
    }

    method startTrophyActor(widget, visible)
    {
        widget.visible = visible;
        if (visible)
        {
            widget.ParallelActor.ScalarInterpolator.restart();
            widget.ParallelActor.ScalarInterpolator0.restart();
        }
    }

    method on_initialize_all(context, old_best_record)
    {
        var gp = gSequenceCondition.gp;
        var eval_condition = gp.event.eval_condition;

        var message = "";
        if (self.finish_result != gtengine::FinishResult::DSQ)
        {
            switch (self.finish_result)
            {
                case gtengine::FinishResult::GOLD:
                    message = "ACHIEVEMENT_GOLD";
                    sound.play("clap_b");
                    break;

                case gtengine::FinishResult::SILVER:
                    message = "ACHIEVEMENT_SILVER";
                    sound.play("clap_m");
                    break;

                case gtengine::FinishResult::BRONZE:
                    message = "ACHIEVEMENT_BRONZE";
                    sound.play("clap_s");
                    break;
            }
        }

        if (message != "")
        {
            message = manager.translate("QuickMenu", message);
        }

        Trophy::message::TextFace.text = message;

        startTrophyActor(Time::Info::Result::Time::Trophy::Gold, self.finish_result == gtengine::FinishResult::GOLD);
        startTrophyActor(Time::Info::Result::Time::Trophy::Silver, self.finish_result == gtengine::FinishResult::SILVER);
        startTrophyActor(Time::Info::Result::Time::Trophy::Bronze, self.finish_result == gtengine::FinishResult::BRONZE);

        Time::Info::Result::Time::Trophy.visible = true;

        var my_record = "---";
        if (eval_condition.type == gtengine::EvalType::ORDER)
        {
            if (old_best_record != gtengine::FinishResult::COMPLETE)
            {
                my_record = "%d".format((old_best_record - gtengine::FinishResult::GOLD) + 1);
            }
            else
            {
                my_record = pdiext::GetRaceTimeString(old_best_record);
            }
        }

        Trophy::MyRecord::Time.text = my_record;
        |var gold, var silver, var bronze| = RaceRoot::getTargetTime(eval_condition);
        var better_best_record;

        if (eval_condition.type == gtengine::EvalType::ORDER)
        {
            better_best_record = self.finish_result < old_best_record ? self.finish_result : old_best_record;
        }
        else
        {   
            better_best_record = self.laptime < old_best_record ? self.laptime : old_best_record;
        }

        |var is_gold, var is_silver, var is_bronze| = RaceRoot::isClear(better_best_record, eval_condition);
        var mission = gSequenceCondition.game_mode == gtengine::GameMode::MISSION;

        Trophy::Target::Hbox::Target_Gold::Time.text = gold[0];
        Trophy::Target::Hbox::Target_Gold::Check_on.visible = is_gold && !mission;
        Trophy::Target::Hbox::Target_Gold::Check_on_mission.visible = is_gold && mission;
        Trophy::Target::Hbox::Target_Gold::Check_off.visible = !is_gold;
        Trophy::Target::Hbox::Target_Silver::Time.text = silver[0];
        Trophy::Target::Hbox::Target_Silver::Check_on.visible = is_silver && !mission;
        Trophy::Target::Hbox::Target_Silver::Check_on_mission.visible = is_silver && mission;
        Trophy::Target::Hbox::Target_Silver::Check_off.visible = !is_silver;
        Trophy::Target::Hbox::Target_Bronze::Time.text = bronze[0];
        Trophy::Target::Hbox::Target_Bronze::Check_on.visible = is_bronze && !mission;
        Trophy::Target::Hbox::Target_Bronze::Check_on_mission.visible = is_bronze && mission;
        Trophy::Target::Hbox::Target_Bronze::Check_off.visible = !is_bronze;

        if (self.show_button)
        {
            context.cursor_visible = true;
            RaceMenuSimple.initialize(context);
        }
        else
        {
            context.cursor_visible = false;
            RaceMenuSimple::SBox0.ScalarInterpolator.reverse = true;
            RaceMenuSimple::SBox0.ScalarInterpolator.warp();
            ROOT.setFocus(ROOT);
        }

        Trophy.ScalarInterpolator.restart();
        Trophy.visible = true;

        bg.FadeActor.restart();
        bg.visible = true;

        context.addTimeOut("start_se", startSE, context);
        context.setTimeOut("start_se", 0.5);
    }

    method onFinalize(context)
    {
        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        if (!self.show_button)
        {
            sound.play("cancel");
            close(context);
        }

        return EVENTRESULT_FILTER;
    }

    method onActivate(context)
    {
        if (!self.show_button)
        {
            sound.play("ok");
            close(context);
        }

        return EVENTRESULT_FILTER;
    }

    function onRestart(context)
    {
        if (RaceRoot.checkRemainTime())
        {
            main::sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        sound.play("ok");
        ROOT.result = true;
        RaceMenuSimple.terminate(context);
        ROOT.close(context);
        SoundUtil::BGMFadeout(3.0);
    }

    function onExit(context)
    {
        if (RaceRoot.checkRemainTime())
        {
            main::sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        sound.play("ok");
        RaceMenuSimple.terminate(context);
        ROOT.close(context);
        SoundUtil::BGMFadeout(3.0);
    }

    module RaceMenuSimple
    {
        method initialize(context)
        {
            var icons = [];
            icons.push(RaceMenuUtil::Icon("RESTART", "icon_restart.dds", onRestart));
            icons.push(RaceMenuUtil::Icon("EXIT", "icon_exit.dds", onExit));

            var item = hidden::RaceMenuItem;
            self.visible = true;
            var actor = self.SBox0.SBox1.Caption.FadeActor;

            actor.repeat = false;
            actor.out = false;
            actor.warp();

            self.SBox0::ScalarInterpolator.reverse = false;
            self.SBox0::ScalarInterpolator.restart();

            var listbox = self.SBox0.SBox1.ListBox;
            listbox.ScalarInterpolator.reverse = true;
            listbox.ScalarInterpolator.reset();

            var unit_w = item.w;
            listbox.keep_alignment = false;
            listbox.alignment = 0.5;
            listbox.interpolate_ratio = 0.2;
            listbox.ScalarInterpolator.start_value = unit_w;
            listbox.ScalarInterpolator.end_value = (unit_w + listbox.spacing) * icons.size - listbox.spacing;
            listbox.setItemTemplate(context, item);
            listbox.setItemCount(icons.size);
            listbox.focus_callback = listbox.onFocus;
            listbox.focus_active = true;

            for (var i = 0; i < icons.size; i++)
            {
                var icon = icons[i];
                var w = listbox.getItemWidget(i, context);
                w.icon = icon;
                icon.caption = manager.translate("QuickMenu", "caption_" + icon.caption_key);
                w.image.image_path = "/image/gt6/quick_menu/" + icon.image_path ;
                w.doInitialize(context);
                w.separator.visible = i != 0;
            }

            self.SBox0.visible = true;
            ROOT.setFocus(listbox);
        }

        method terminate(context)
        {
            var sbox1 = self.SBox0.SBox1;
            var listbox = sbox1.ListBox;
            var actor = sbox1.Caption.FadeActor;
            actor.out = true;
            self.SBox0.ScalarInterpolator.reverse = true;
            self.SBox0.ScalarInterpolator.start();

            var item = listbox.getItemWidget(listbox.focus_index, context);
            var a = listbox.w - item.w;
            a = a > 0 ? item.x / a : 0;

            listbox.keep_scroll_point = true;
            listbox.interpolate_ratio = 1.0;
            listbox.scroll_point = a;
            listbox.ScalarInterpolator.reverse = true;
            listbox.ScalarInterpolator.start();
            item.separator.visible = false;

            item.Blink.restart();
            context.cursor_visible = false;
            context.wait(0.8);
        }

        module SBox0::SBox1::ListBox
        {
            method onFocus(context, new_index, old_index)
            {
                var new_widget = self.getItemWidget(new_index, context);
                if (new_widget != nil)
                {
                    SBox1.Caption.label.text = new_widget.icon.caption;
                    var i = new_widget.image::VectorInterpolator;
                    i.reverse = false;
                    i.start();
                }

                var old_widget = self.getItemWidget(old_index, context);
                if (old_widget != nil)
                {
                    var i = old_widget.image::VectorInterpolator;
                    i.reverse = true;
                    i.start();
                }
            }

            method onActivate(context)
            {
                var widget = self.getItemWidget(self.focus_index, context);
                if (widget != nil)
                {
                    widget.icon.func(context);
                }
            }
        }
    }

    module hidden::RaceMenuItem
    {
        attribute icon;
    }
}