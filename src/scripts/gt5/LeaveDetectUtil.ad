

//---------------------------------------------------------------------------------------
// LeaveDetectUtil.ad
//
// Utility module for a generic implementation of an idle input checker.
// Takes a specified amount of seconds and a callback to execute once the user
// Has not had any activity for a set amount of seconds.
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module LeaveDetectUtil
{
    static sSuspender = nil;
    static sLeaveDetectSecond = nil;
    static sLeaveDetectRoot = nil;
    static sLeaveDetectMethod = nil;
    static sActivateDetectMethod = nil;
    static sLeaveDetectWatcher = nil;
    static sActivated = nil;

    function on_tick(context)
    {
        if (sSuspender == nil || sSuspender.isSuspend())
            return;

        if (context.time_after_last_input > sLeaveDetectSecond.toFloat())
        {
            if (sActivated)
            {
                if (sLeaveDetectMethod != nil)
                    (sLeaveDetectRoot.*sLeaveDetectMethod)(context);
                sActivated = false;
            }
        }
    }

    function begin(context, leave_second, root, leave_method, activate_method, initial_activated)
    {
        if (leave_second <= 0)
        {
            end(context);
            return;
        }

        sSuspender = WatcherUtil::Suspender();
        sLeaveDetectSecond = leave_second;
        sLeaveDetectRoot = root;
        sLeaveDetectMethod = leave_method;
        sActivateDetectMethod = activate_method;
        sLeaveDetectWatcher = WatcherUtil::Create(context, on_tick);
        sActivated = true;

        if (initial_activated != nil)
            sActivated = initial_activated;

        context.time_after_last_input = 0;
    }

    function end(context)
    {
        sActivated = nil;
        if (sLeaveDetectWatcher != nil)
        {
            WatcherUtil::Delete(sLeaveDetectWatcher);
            sLeaveDetectWatcher = nil;
        }

        sActivateDetectMethod = nil;
        sLeaveDetectMethod = nil;
        sLeaveDetectRoot = nil;
        sLeaveDetectSecond = nil;
        sSuspender = nil;
    }

    function isWorking()
    {
        return sSuspender != nil && !isSuspend();
    }

    function activated(context, event)
    {
        if (sLeaveDetectWatcher == nil)
            return false;

        if (event != nil)
        {
            if (event.keysym == 0xFFD6)
                return false;

            if (event.keysym == CELL_PAD_CTRL_SELECT || event.keysym == CELL_PAD_CTRL_L1)
                return false;
        }

        if (!sActivated)
        {
            if (sActivateDetectMethod != nil)
                (sLeaveDetectRoot.*sActivateDetectMethod)(context);
            sActivated = true;
            return true;
        }

        return false;
    }

    function activatedNoEvent(context)
    {
        return activated(context);
    }

    function left(context)
    {
        if (sActivated)
        {
            if (sLeaveDetectMethod != nil)
                (sLeaveDetectRoot.*sLeaveDetectMethod)(context);
            sActivated = false;
        }
    }

    function suspend(context)
    {
        if (sSuspender != nil)
            sSuspender.Suspend();
    }

    function resume(context)
    {
        if (sSuspender != nil)
        {
            context.time_after_last_input = 0;
            sSuspender.Resume();
        }
    }

    function isSuspend()
    {
        if (sSuspender != nil)
            return sSuspender.isSuspend();

        return false;
    }

    function isActivated()
    {
        return sActivated != nil && sActivated;
    }

    function reset(context)
    {
        context.time_after_last_input = 0;
        sActivated = false;
    }
}