//---------------------------------------------------------------------------------------
// BuyCarRoot.ad
//
// Car scene & scroller, color picker root
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module PROJECT::ROOT
{
#ifdef GT4O_US_BETA
    static current_car;
    static current_gcar;
    static current_col;
    static last_color_index;
    static return_page;
    static current_car_list;
    static current_gpb;
    static current_type;
    static current_week;
    static current_idx;
#else
    static current_car = nil;
    static current_gcar = nil;
    static current_col = nil;
    static last_color_index = nil;
    static return_page = nil;
    static current_car_list = nil;
    static current_gpb = nil;
    static current_type = nil;
    static current_week = nil;
    static current_idx = nil;
#endif
    static original_name_scale_x = CarScroll::Name.scale_x;
    static original_name_scale_y = CarScroll::Name.scale_y;

    function setMoveActor(widget, x, y)
    {
        var actor = main::menu::MMoveActor(widget, widget.x + x, widget.y + y);
        widget.actor = actor;
        widget.actor.ratio = 0.2;
    }

    setMoveActor(CarScroll, 0.0, 200.0);
    setMoveActor(ColScroll, 0.0, 200.0);
    setMoveActor(Pane, 0.0, 200.0);

    function open(context, car_list, ret, gpb, type)
    {
        current_car_list = car_list;
        current_gcar = nil;
        current_col = 0;
        return_page = ret;
        current_gpb = gpb;
        current_type = type;
        current_idx = 0;
        
        start_page(context, ROOT);
    }

    function openUsedCar(context, gcar, week, idx, ret)
    {
        current_car_list = nil;
        current_gcar = gcar;
        current_car = gcar.getCarLabel();
        current_col = gcar.getColorIndex();
        return_page = ret;
        current_type = "used";
        current_week = week;
        current_idx = idx;
        
        start_page(context, ROOT);
    }

    function close(context)
    {
        current_car = nil;
        current_gcar = nil;
        current_col = nil;
        last_color_index = nil;
        current_type = nil;
        current_week = nil;
        current_idx = nil;
    }

    function closeUsedCar(context)
    {
        if (current_type != "used")
        {
            close();
            start_page(context, ROOT);
        }
        else
        {
            last_focus = current_idx.toString();
            close();
            start_page(context, return_page);
        }
    }

    function onInitialize(context)
    {
        hidden.visible = false;

        if (current_gpb != nil)
            context.loadGpb("/projects/arcade", current_gpb);
        
        var nation = nil;
        switch (current_type)
        {
            case "new":
                nation = main::game.menuRef(1);
                bg.image_path = "image/gtmode/car/new_" + nation + ".png";
                CarFace.image_path = "image/gtmode/car/env_akasaka.png";
                break;

            case "used":
                bg.image_path = "image/gtmode/car/used_bg.png";
                CarFace.image_path = "image/gtmode/car/env_akasaka.png";
                break;

            case "legend":
                nation = main::game.menuRef(1);
                bg.image_path = "image/gtmode/car/legend_bg.png";
                CarFace.image_path = "image/gtmode/car/env_legend.png";
                break;

            case "complete":
                nation = main::game.menuRef(1);
                bg.image_path = "image/gtmode/car/complete_bg.png";
                CarFace.image_path = "image/gtmode/car/env_akasaka.png";
                break;
        }

        bg.doInitialize(context);
        CarFace.doInitialize(context);

        last_color_index = 0;

        if (current_type == "used")
            enterPage(context, ROOT, context.translate(UsedCarRoot, "UsedCarTitle"), 1);
        else
            enterPageNation(context, ROOT, context.translate(NationRoot, "CarTown_" + nation), nation);

        CarFace.action_type = "normal";
        CarFace.quality_level = 1;

        if (current_type != "used")
        {
            for (var i = 0; i < current_car_list.size; i++)
            {
                var car = current_car_list[i];
                var item = hidden::CarItem.doCopy();
                var label = main::menu::MCarData::GetCarLabel(car);
                var image = item["image"];
                var pngname = "image/piece/car_mini/" + label + ".png";

                if (context.existGpbBinary(pngname))
                {
                    image.from_disk = false;
                    image.image_path = pngname;
                }
                else
                {
                    image.from_disk = true;
                    image.image_path = "/piece/car_mini/" + label + ".img";
                }

                CarScroll::SelectBox.appendChild(context, item);
            }
        }

        ROOT["Common"]["ToolTip"]["tip"].remove();

        if (current_type != "used")
        {
            CarScroll.actor.out = false;
            ColScroll.actor.out = true;
            Pane.actor.out = true;

            CarScroll::SelectBox.index = current_idx;
            CarScroll::SelectBox.callFocus(ROOT);
            ColScroll::SelectBox.outFocus(ROOT);
            Pane.visible = false;
            Info::Mileage.visible = false;
        }
        else
        {
            CarScroll.actor.out = true;
            ColScroll.actor.out = true;
            Pane.actor.out = false;

            CarScroll::SelectBox.outFocus(ROOT);
            ColScroll::SelectBox.outFocus(ROOT);
            Pane.visible = true;
            Info::Mileage.visible = true;
        }

        CarScroll.actor.warp();
        ColScroll.actor.warp();
        Pane.actor.warp();

        set_car(context);
    }

    function onFinalize(context)
    {
        unset_col_select(context);

        CarScroll::SelectBox.clearChildren(context);

        if (current_gpb != nil)
            context.unloadGpb(current_gpb);
        
        leavePage(context, ROOT);
    }

    function onCancel(context)
    {
        main::sound.play("cancel");

        if (current_type == "used")
            last_focus = current_idx.toString();

        start_page(context, return_page);

        return EVENTRESULT_FILTER;
    }

    function set_car_info(context, car_data)
    {
        var tip = ROOT["Common"]["ToolTip"]["tip"];
        
        var train = car_data.getDTrainType();
        if (train == nil)
            train = "--";

        var power = car_data.getCatPs("%d%s/%s%s");
        var torque = car_data.getCatTq("%.2t%s/%s%s");
        var info = context.translate(ROOT, "car_info");
        tip.value = info.format(train, power, torque);
    }

    function set_car_desc(context, car_data)
    {
        var car = car_data.getCarLabel();
        var did = main::menu::MCarData::GetDescriptionID(car);

        if (description != nil)
            ROOT["Common"]["ToolTip"]["tip"].value = description.get("%08d".format(did));
        else
            ROOT["Common"]["ToolTip"]["tip"].value = "";
    }

    function set_car(context)
    {
        var label = nil;

        if (current_type != "used")
        {
            current_car = current_car_list[CarScroll::SelectBox.index];
            var price = main::menu::MCarData::GetPrice(current_car);

            if (main::menu::MCarData::NotForSell(current_car))
                price = 0;

            Info::Price.text = "Cr. " + main::menu::MUtility::GetMoneyString(price);
            label = main::menu::MCarData::GetCarLabel(current_car);
        }
        else
        {
            Info::Price.text = "Cr. " + main::menu::MUtility::GetMoneyString(current_gcar.getUsedPrice());

            var distance = current_gcar.getOdometer("%.1t%s");
            var mileage = context.translate(ROOT, "mileage");
            Info::Mileage.text = mileage.format(distance);

            label = current_gcar.getCarLabel();
        }

        var image = Logo::bg;
        var pngname = "image/piece/car_logo2/" + label + ".png";

        if (context.existGpbBinary(pngname))
        {
            image.from_disk = false;
            image.image_path = pngname;
        }
        else
        {
            image.from_disk = true;
            image.image_path = "piece/car_logo2/" + label + ".img";
        }

        image.doInitialize(context);

        if (current_type != "used")
            CarFace.car_code = current_car;
        else
            CarFace.car_garage = current_gcar;

        CarScroll::Name.scale_x = original_name_scale_x;
        CarScroll::Name.scale_y = original_name_scale_y;
        CarScroll::Name.text = CarFace.car_data.name;
        CarScroll::Name.adjustScale();
        CarFace::move_car(0, 1);

        last_color_index = 0;

        if (current_type == "used")
        {
            CarFace.setColorIndex(current_col);
            set_car_desc(context, CarFace.car_data);
        }
        else
            set_car_info(context, CarFace.car_data);
    }

    function set_col_select(context)
    {
        CarScroll::SelectBox.outFocus(ROOT);
        CarScroll.actor.out = true;
        
        var car_data = CarFace.car_data;
        var col_list = car_data.getColors();
        var num = col_list.size;

        for (var i = 0; i < num; i++)
        {
            var chip = hidden::ColItem.doCopy();
            chip["chip"].setData(car_data, i);
            ColScroll::SelectBox.appendChild(context, chip);
        }

        ColScroll.actor.out = false;
        ColScroll::SelectBox.index = last_color_index;
        ColScroll::SelectBox.callFocus(ROOT);
        ColScroll.visible = true;
        set_col(context);
    }

    function unset_col_select(context)
    {
        ColScroll.actor.out = true;
        ColScroll::SelectBox.clearChildren(context);
        CarScroll.actor.out = false;

        CarScroll::SelectBox.callFocus(ROOT);
    }

    function set_col(context)
    {
        var index = ColScroll::SelectBox.index;
        last_color_index = index;
        CarFace.setColorIndex(index);

        var colname = CarFace.car_data.getColorName(index);
        if (colname != "-")
            ColScroll::Name.text = colname;
        else
            ColScroll::Name.text= "";

        current_col = index;
    }
}

module PROJECT::ROOT::CarFace
{
    function move_car(phase, warp)
    {
        if (CarFace.car_model != nil)
        {
            if (phase == false)
            {
                CarFace.car_model.motion = 1;
                if (warp == true)
                {
                    CarFace.car_model.tz = 8.5;
                    CarFace.car_model.ry = 180.0;
                    CarFace.car_model.warp();
                }

                CarFace.car_model.tx = 0.0;
                CarFace.car_model.tz = 0.0;
                CarFace.car_model.posInterpolateSpeed = 0.025;
            }
            else
            {
                CarFace.car_model.motion = 2;
                CarFace.car_model.tx = -0.9;
                CarFace.car_model.tz = 1.6;
                CarFace.car_model.ry = 185.5;
                CarFace.car_model.posInterpolateSpeed = 0.1;

                if (warp == true)
                    CarFace.car_model.warp();
            }
        }
    }
}

module PROJECT::ROOT::CarScroll::SelectBox
{
    function onValueChanged(context, index)
    {
        set_car(context);
    }

    function onActivate(context, event, item)
    {
        main::sound.play("ok");
        ROOT.setFocus(nil);
        current_idx = CarScroll::SelectBox.index;
        set_col_select(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ColScroll::SelectBox
{
    function onValueChanged(context, index)
    {
        set_col(context);
    }

    function onCancel(context, event, item)
    {
        ROOT.setFocus(nil);
        main::sound.play("cancel");
        unset_col_select(context);
        return EVENTRESULT_FILTER;
    }

    function onActivate(context, event)
    {
        main::sound.play("ok");

        ColScroll.actor.out = true;
        context.sync(0.25);
        ColScroll.visible = false;
        Pane.visible = true;
        ROOT.setFocus(Pane::Buy);
        Pane.actor.out = false;
        set_car_desc(context, CarFace.car_data);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane
{
    function onCancel(context)
    {
        main::sound.play("cancel");

        if (current_type != "used")
        {
            Pane.actor.out = true;
            context.sync(0.25);
            ColScroll.visible = true;
            Pane.visible = false;
            ColScroll::SelectBox.callFocus(ROOT);
            ColScroll.actor.out = false;
            set_car_info(context, CarFace.car_data);
        }
        else
        {
            last_focus = current_idx.toString();
            start_page(context, return_page);
        }

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Buy
{
    function onActivate(context)
    {
        var price = nil;

        if (current_type == "used")
            price = current_gcar.getUsedPrice();
        else
            price = main::menu::MCarData::GetPrice(current_car);

        var garage = main::game.garage;
        if (garage.isFull())
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "garage full"));
            return EVENTRESULT_STOP;
        }

        main::sound.play("ok");

        var res = nil;
        if (current_type == "used")
            res = BuyCarDialog::open(context, current_gcar, 0, 0, 0);
        else
            res = BuyCarDialog::open(context, current_car, 0, 1, 1);

        if (res)
        {
            var idx = nil;
            if (current_type != "used")
            {
                idx = garage.addNewCar(current_car, current_col);
                main::game.calendar.putBuyNewCarEvent(current_car, current_col);
            }
            else
            {
                idx = garage.addUsedCar(current_gcar);
                main::game.calendar.putBuyUsedCarEvent(current_car, current_col);
                main::game.used_car.set(current_week, current_idx);
            }

            main::game.setCarAvailable(current_car);
            GetCarRoot::open(context, current_car, current_col, current_gcar, price, idx);
            return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_FILTER;
    }
}