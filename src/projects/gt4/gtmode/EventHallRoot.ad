//---------------------------------------------------------------------------------------
// EventHallRoot.ad
//
// Main events menu root
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

#define MIN_LICENSE 0
#define MAX_LICENSE 5

module PROJECT::ROOT
{
#ifdef GT4O_US_BETA
    static page_title;
    static last_select_index;
#else
    static page_title = nil;
    static last_select_index = nil;
#endif

    function onLoad(context)
    {
        hidden.visible = false;
    }

    function setMoveActor(widget)
    {
        var actor = main::menu::MMoveActor(widget, -PS2_SCREEN_W_F, widget.y);
        widget.actor = actor;
        widget.actor.ratio = 0.2;
        widget.actor.out = false;
        widget.actor.warp();
    }

    setMoveActor(ScrollBox);

    function onInitialize(context)
    {
        page_title = getEventTitle(main::game.menuRef());
        var bg_name = main::game.menuRef(1);

        if (page_title != nil)
            context.loadGpb("/projects/gtmode", page_title);

        var return_page = main::game.menuRef(3);
        if (return_page != nil && return_page == "DealerRoot")
        {
            var nation = main::game.menuRef(5);
            enterPageNation(context, ROOT, context.translate(NationRoot, "CarTown_" + nation), nation);
        }
        else
        {
            enterPage(context, ROOT, page_title);
        }

        info.text = context.translate(ROOT, "INFO|" + page_title);
        info.adjustScale();

        if (bg_name.substr(bg_name.size - 4) == ".swf")
        {
            bg_flash.visible = true;
            bg_flash.cache = false;
            bg_flash.setFlashPath("image/gtmode/event/" + bg_name);
            bg_flash.doInitialize(context);
            bg_flash.reset();
            bg_image.visible = false;
        }
        else
        {
            bg_image.visible = true;
            bg_image.cache = false;
            bg_image.setImagePath("image/gtmode/event/" + bg_name + ".png");
            bg_image.doInitialize(context);
            bg_flash.visible = false;
        }

        setFadeActor(ScrollBox::dec_arrow::image);
        setFadeActor(ScrollBox::inc_arrow::image);

        ScrollBox.actor.out = false;
        ScrollBox.actor.warp();

        init_event_item(context);

        if (last_select_index != nil)
        {
            ScrollBox::SelectBox.index = last_select_index;
            ROOT.setFocus(ScrollBox::SelectBox.getChild(last_select_index));
        }
    }

    function onFinalize(context)
    {
        ROOT.setFocus(nil);
        ScrollBox::SelectBox.clearChildren(context);
        ScrollBox::inc_arrow::image.actor = nil;
        ScrollBox::dec_arrow::image.actor = nil;
        leavePage(context, ROOT);

        if (page_title != nil)
            context.unloadGpb(page_title);
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        main::game.menuPop();
        main::game.menuPop();

        var last_focused_widget = main::game.menuPop();
        var return_page_name = main::game.menuPop();

        if (PROJECT.defined(return_page_name))
        {
            set_last_focus(last_focused_widget);
            start_page(context, PROJECT[return_page_name]);
        }
        else
        {
            start_page(context, TopRoot);
        }

        last_select_index = nil;
        return EVENTRESULT_FILTER;
    }

    function onActivate(context, event, object)
    {
        if (!sureRiding(context))
        {
            return EVENTRESULT_FILTER;
        }

        var item = object.getFocusedWidget();
        if (item == nil)
        {
            main::sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        var event_info = item["event_info"];
        var event_index= item["index"];
        last_select_index = event_index;

        if (event_info == nil)
        {
            return EVENTRESULT_FILTER;
        }

        if (event_info.race_code == EVENT_GTWORLDCHAMP_CODE && !canEntryGTWorldChamp())
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "you cannot play GTW"));
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");

        var f = ROOT.getFocusedWidget();
        ROOT.setFocus(nil);

        ScrollBox.actor.out = true;

        var result = EventInfoDialog::open(context, event_info);
        if (result)
        {
            main::game.menuPush(event_index.toString());
            start_page(context, EventCourseRoot);
        }
        else
            ScrollBox.actor.out = false;

        ROOT.setFocus(f);
        context.cursor_visible = true;
        return EVENTRESULT_FILTER;
    }

    function init_event_item(context)
    {
        ROOT.setFocus(nil);

        var composite = ScrollBox::SelectBox;
        composite.clearChildren(context);
        
        var num = getEventInfoNum(main::game.menuRef());

        for (var i = 0; i < num; i++)
        {
            var event_info = getEventInfo(main::game.menuRef(), i);
            add_event(context, composite, i, event_info);
        }

        ROOT.setFocus(composite.first);
    }

    function add_event(context, target, index, event_info)
    {
        var race_code = event_info.race_code;
        var race_type = getRaceType(race_code);
        var large_image_name = "image/gtmode/event/ticket/" + race_type + ".png";
        var small_image_name = "image/gtmode/event/ticket/ts_" + race_type + ".png";
        var default_image_name = "image/gtmode/event/ticket_" + page_title + ".png";

        var simple_ticket = false;
        var image_name = nil;

        if (context.existGpbBinary(large_image_name))
        {
            image_name = large_image_name;
        }
        else
        {
            simple_ticket = true;
            if (context.existGpbBinary(small_image_name))
                image_name = small_image_name;
            else
                image_name = default_image_name;
        }

        var item;
        if (simple_ticket)
            item = hidden::SimpleEventItem.doCopy();
        else
            item = hidden::EventItem.doCopy();

        var eventname = getEventNameByRaceCode(context, ROOT, race_code);
        var eventinfo = getEventDescriptionByRaceCode(context, ROOT, race_code);
        item.defineStatic("tooltip_text", context.translate(ROOT, "ToolTipFormat").format(eventname) + eventinfo);
        item.defineStatic("event_info", event_info);
        item.defineStatic("index", index);
        
        var ticket = item["Ticket"];
        var image = ticket["image"];
        image.from_disk = false;
        image.cache = false;
        image.setImagePath(image_name);
        target.appendChild(context, item);

        if (ticket.defined("label"))
        {
            ticket["label"].text = eventname;
            ticket["label"].adjustScale();
        }

        if (ticket.defined("level"))
        {
            var level = getEventLevelByRaceCode(race_code);
            if (level != nil)
            {
                ticket["level"].text = context.translate(ROOT, "Level_" + level);
            }
        }

        if (simple_ticket)
        {
            if (!is_record_found(event_info))
                add_simple_ticket_stub_long(context, item);
            else
                add_simple_ticket_stub_short(context, item);
        }
        else
        {
            if (!is_record_found(event_info))
                add_ticket_stub_long(context, item);
            else
                add_ticket_stub_short(context, item);
        }

        return item;
    }

    function add_ticket_stub_long(context, ticket)
    {
        var event_info = ticket["event_info"];
        var race_code = event_info.race_code;

        var stub = hidden::TicketStubLong.doCopy();
        ticket.appendChild(context, stub);

        var race_list = extractSubRaceCode(race_code);
        var num_races = race_list != nil ? race_list.size : 0;
        var num_series = getSeriesRaceCount(race_code);
        var race = main::menu::MRaceData(race_list[0]);

        stub["label"].text = getEventNameByRaceCodeForTitle(context, ROOT, race_code);
        stub["label"].adjustScale();
        stub["type"].text = context.translate(ROOT, num_series > 0 ? "ChampionshipRace" : "SingleRace");
        stub["stages"].setImagePath("image/gtmode/event/" + num_races.toString() + ".png");
        stub["stages"].doInitialize(context);
        stub["license"].visible = true;
        stub["license"].cache = false;
        stub["license"].setImagePath("image/gtmode/event/lic_" + race.getNeedLicense().toString() + ".png");
        stub["license"].doInitialize(context);

        var need_license = race.getNeedLicense();
        if (need_license < MIN_LICENSE || need_license > MAX_LICENSE)
            print "need_license = %{need_license}\n";
        
        switch (getRacePrefix(race_code))
        {
            case EVENT_PREFIX_RALLY_HALL:
                stub["aspec"].visible = true;
                stub["bspec"].visible = false;
                break;

            default:
                stub["aspec"].visible = true;
                stub["bspec"].visible = true;
                break;
        }
    }

    function add_ticket_stub_short(context, ticket)
    {
        var event_info = ticket["event_info"];
        var race_code = event_info.race_code;
        var race_list = extractSubRaceCode(race_code);
        var race = main::menu::MRaceData(race_list[0]);

        var stub = hidden::TicketStubShort.doCopy();
        
        ticket.appendChild(context, stub);
        
        stub["license"].visible = true;
        stub["license"].cache = false;
        stub["license"].setImagePath("image/gtmode/event/lic_" + race.getNeedLicense().toString() + ".png");
        stub["license"].doInitialize(context);

        var need_license = race.getNeedLicense();
        if (need_license < MIN_LICENSE || need_license > MAX_LICENSE)
            print "need_license = %{need_license}\n";

        switch (getRacePrefix(race_code))
        {
            case "rh":
                stub["aspec"].visible = true;
                stub["bspec"].visible = false;
                break;
    
            default:
                stub["aspec"].visible = true;
                stub["bspec"].visible = true;
                break;
        }

        set_event_record_list(context, stub["records"], race_code);
    }

    function add_simple_ticket_stub_long(context, ticket)
    {
        var event_info = ticket["event_info"];
        var race_code = event_info.race_code;
        var stub = hidden::SimpleTicketStubLong.doCopy();
        
        ticket.appendChild(context, stub);
        
        var race_list = extractSubRaceCode(race_code);
        var num_races = race_list != nil ? race_list.size : 0;
        var num_series = getSeriesRaceCount(race_code);

        if (race_list == nil || race_list.size == 0)
        {
            return;
        }

        var race = main::menu::MRaceData(race_list[0]);
        stub["type"].text = context.translate(ROOT, num_series > 0 ? "ChampionshipRace" : "SingleRace");
        stub["stages"].setImagePath("image/gtmode/event/" + num_races.toString() + ".png");
        stub["stages"].doInitialize(context);
        stub["license"].visible = true;
        stub["license"].cache = false;
        stub["license"].setImagePath("image/gtmode/event/lic_" + race.getNeedLicense().toString() + ".png");
        stub["license"].doInitialize(context);

        var need_license = race.getNeedLicense();
        if (need_license < MIN_LICENSE || need_license > MAX_LICENSE)
            print "need_license = %{need_license}\n";

        switch (getRacePrefix(race_code))
        {
            case "rh":
                stub["aspec"].visible = true;
                stub["bspec"].visible = false;
                break;
    
            default:
                stub["aspec"].visible = true;
                stub["bspec"].visible = true;
                break;
        }
    }

    function add_simple_ticket_stub_short(context, ticket)
    {
        var event_info = ticket["event_info"];
        var race_code = event_info.race_code;
        var race_list = extractSubRaceCode(race_code);
        var race = main::menu::MRaceData(race_list[0]);

        var stub = hidden::SimpleTicketStubShort.doCopy();
        ticket.appendChild(context, stub);
        
        stub["license"].visible = true;
        stub["license"].cache = false;
        stub["license"].setImagePath("image/gtmode/event/lic_" + race.getNeedLicense().toString() + ".png");
        stub["license"].doInitialize(context);

        var need_license = race.getNeedLicense();
        if (need_license < MIN_LICENSE || need_license > MAX_LICENSE)
            print "need_license = %{need_license}\n";

        switch (getRacePrefix(race_code))
        {
            case "rh":
                stub["aspec"].visible = true;
                stub["bspec"].visible = false;
                break;
    
            default:
                stub["aspec"].visible = true;
                stub["bspec"].visible = true;
                break;
        }

        set_event_record_list(context, stub["records"], race_code);
    }

    function is_record_found(event_info)
    {
        var race_code = event_info.race_code;
        var is_championship = getSeriesRaceCount(race_code) > 0;
        var race_list = extractSubRaceCode(race_code);
        var num = 0;

        for (var i = 0; i < race_list.size; i++)
        {
            var unit = main::game.race_record.getUnit(race_list[i]);
            if (unit != nil)
            {
                switch (is_championship ? unit.result : unit.spot_result)
                {
                    case "1":
                    case "2":
                    case "3":
                    case "4":
                    case "5":
                    case "6":
                        num++;
                        break;
                }
            }
        }

        return num > 0;
    }

    function set_event_record_list(context, target, race_code)
    {
        var race_list = extractSubRaceCode(race_code);
        var num_series = getSeriesRaceCount(race_code);
        var num_races = race_list != nil ? race_list.size : 0;

        if (num_series > 0)
        {
            var tmpname = "RecordUnit_%d".format(num_races);

            if (hidden.defined(tmpname))
            {
                var list = hidden[tmpname].doCopy();
                target.appendChild(context, list);
                list.x = (target.w - list.w) / 2.0;
                list.y = (target.h - list.h) / 2.0;

                for (var i = 0; i < num_races; i++)
                {
                    var box = list["Stage_%d".format(i + 1)];
                    set_record(context, box, race_list[i]);
                }
            }
            else
            {
                print "hidden::%{tmpname} not found\n";
            }
        }
        else
        {
            var num_y = (num_races + 4) / 5;
            var num_x = num_races / num_y;
            
            var tmp = hidden::RecordItem;
            var xspace = (target.w - (tmp.w * num_x)) / (num_x + 1);
            var yspace = (target.h - (tmp.h * num_y)) / (num_y + 1);

            for (var y = 0; y < num_y; y++)
            {
                for (var x = 0; x < num_x; x++)
                {
                    var i = (y * num_x) + x;
                    if (i < num_races)
                    {
                        var item = tmp.doCopy();
                        target.appendChild(context, item);
                        item.x = xspace + ((xspace + item.w) * x);
                        item.y = yspace + ((yspace + item.h) * y);
                        set_record(context, item, race_list[i]);
                    }
                }
            }
        }
    }

    function set_record(context, item, racecode)
    {
        var trophy_name = nil;
        var rank_text = nil;

        var racedata = main::menu::MRaceData(racecode);
        var unit = main::game.race_record.getUnit(racecode);

        if (unit != nil)
        {
            var is_championship = getSeriesRaceCount(racecode) > 0;
            var result = is_championship ? unit.result : unit.spot_result;
            switch (result)
            {
                case "1":
                    trophy_name = "gold";
                    break;

                case "2":
                    if (racedata.entry_num > 2)
                        trophy_name = "silver";
                    else
                        rank_text = result;
                    break;

                case "3":
                    if (racedata.entry_num > 3)
                        trophy_name = "bronze";
                    else
                        rank_text = result;
                    break;
                case "4":
                case "5":
                case "6":
                    rank_text = result;
                    break;
            }
        }

        var image = item["image"];
        if (trophy_name != nil)
        {
            image.from_disk = false;
            image.setImagePath("image/gtmode/license/" + trophy_name + ".png");
            image.doInitialize(context);
        }

        if (rank_text != nil)
        {
            item["label"].text = rank_text;
        }
    }
}

module PROJECT::ROOT::ScrollBox::SelectBox
{
    function onValueChanged(context)
    {
        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        return EVENTRESULT_CONTINUE;
    }
}

module PROJECT::ROOT::hidden::EventItem
{
    function onFocusEnter(context, event)
    {
        var widget = event.widget;
        if (widget != nil && widget.defined("tooltip_text"))
        {
            var tooltip = ROOT["Common"]["ToolTip"]["tip"];
            tooltip.value = widget["tooltip_text"];
        }

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::hidden::SimpleEventItem
{
    function onFocusEnter(context, event)
    {
        var widget = event.widget;
        if (widget != nil && widget.defined("tooltip_text"))
        {
            var tooltip = ROOT["Common"]["ToolTip"]["tip"];
            tooltip.value = widget["tooltip_text"];
        }

        return EVENTRESULT_FILTER;
    }
}
