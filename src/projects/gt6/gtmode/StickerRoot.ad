













module ROOT
{
    attribute sModalPage;
    attribute sCP;
    attribute sSceneFace;
    attribute sPreservedCP;
    attribute sResult;

    method open(context, cp, scene_face)
    {
        self.sCP = cp;
        self.sSceneFace = scene_face;
        self.sPreservedCP = gtengine::MCarParameter();
        self.sPreservedCP.deepCopy(cp);
        self.sResult = false;

        self.sModalPage = SequenceUtil::ModalPage(context, ROOT);
        self.sModalPage.open();

        var changed = self.sResult;
        if (!changed)
        {
            self.sCP.deepCopy(self.sPreservedCP);
            apply(context);
        }

        self.sCP = nil;

        self.sSceneFace.setEntityRotateVelocityY("CAR", "car0", 0);
        self.sSceneFace = nil;
        self.sPreservedCP = nil;
        self.sModalPage = nil;
        self.sResult = nil;

        return changed;
    }

    method close(context)
    {
        if (self.sModalPage != nil)
        {
            var actor = self.CloseActor;
            actor.forward();
            actor.restart();
            self.sModalPage.close(actor.Fade.total_time);
        }
    }

    method onInitialize(context)
    {
        ContextMain.disableInput();

        var actor = self.OpenActor;
        actor.forward();
        actor.restart();

        actor.on_effect_end = function(context)
        {
            actor.on_effect_end = nil;
            ContextMain.enableInput();
        }

        self.CloseActor.stop();

        reflect(context);

        ButtonHelpGT6.set(context, [
            ["L1", manager.translate(ROOT, "Rotate_Left")],
            ["R1", manager.translate(ROOT, "Rotate_Right")],
            ["Close"]
        ]);
    }

    method onFinalize(context)
    {

    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.sResult = true;
        ROOT.close(context);

        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case CELL_PAD_CTRL_L1:
                sound.play("cursor");
                self.sSceneFace.setEntityRotateVelocityY("CAR", "car0", 60, 90);
                break;

            case CELL_PAD_CTRL_R1:
                sound.play("cursor");
                self.sSceneFace.setEntityRotateVelocityY("CAR", "car0", -60, 90);
                break;
        }

        return EVENTRESULT_CONTINUE;
    }

    method onKeyRelease(context, event)
    {
        switch (event.keysym)
        {
            case CELL_PAD_CTRL_L1:
            case CELL_PAD_CTRL_R1:
                self.sSceneFace.setEntityRotateVelocityY("CAR", "car0", 0);
                break;
        }

        return EVENTRESULT_CONTINUE;
    }

    method reflect(context)
    {
        Pane::ScrolledWindow::clip::space::Decken::Design::OptionMenu.setCustomType_CustomId(context, 
            ROOT.sCP.decken_custom_type, ROOT.sCP.decken_custom_id);

        Pane::ScrolledWindow::clip::space::Decken::Type::OptionMenu.setType(context, ROOT.sCP.decken_type);

        Pane::ScrolledWindow::clip::space::Decken::Number::slider.index = ROOT.sCP.decken_number;
        Pane::ScrolledWindow::clip::space::Decken::Number::slider.zero_text = manager.translate(ROOT, "No_Number");
        Pane::ScrolledWindow::clip::space::Decken::Number::slider.setup(context);
    }

    method apply(context)
    {
        if (ROOT.sSceneFace != nil)
        {
            ROOT.sSceneFace.execCommand("setCarDeckenType %d".format(ROOT.sCP.decken_type));
            ROOT.sSceneFace.execCommand("setCarDeckenNumber %d".format(ROOT.sCP.decken_number));
            ROOT.sSceneFace.execCommand("setCarDeckenCustom %d %d".format(ROOT.sCP.decken_custom_type, ROOT.sCP.decken_custom_id));
        }
    }

    module Pane::ScrolledWindow::clip::space::Decken
    {
        module Design::OptionMenu
        {
            method onInitialize(context)
            {
                var car_code = ROOT.sCP.getCarCode();
                var has_default_decken = gtengine::MSpecDB::checkFlag(car_code, gtengine::GenericFlag::CAN_CHANGE_DECKEN);

                var can_custom_decken = SPECDB.executeQuery1R1C("SELECT CanCustomDecken FROM GENERIC_CAR WHERE ID=?", [car_code]);
                if (!has_default_decken && can_custom_decken)
                {
                    self.popup::vbox::Default::label.text = context.translate(ROOT, "Decken_No_Installed");
                }
                else
                {
                    self.popup::vbox::Default::label.text = context.translate(ROOT, "Decken_Normal_Setup");
                }

                self.popup::vbox::Default::label_i.text = self.popup::vbox::Default::label.text;
                self.insensitive = !can_custom_decken;
            }

            method setCustomType_CustomId(context, custom_type, custom_id)
            {
                if (custom_type == 0)
                {
                    self.setIndex(context, 0)
                    return;
                }

                var index = 0;
                var id_list = ROOT.sCP.getDeckenCustomIdList(custom_type);

                for (var i = 1; i < self.Count(); i++)
                {
                    var w = self.getItem(i);
                    if (w.id < id_list.size && id_list[w.id] == custom_id)
                    {
                        index = i;
                        break;
                    }
                }

                self.setIndex(context, index);
            }

            method onValueChanged(context)
            {
                __prototype__::onValueChanged(context);

                var w = self.getItem();
                if (w.id > -1)
                {
                    var custom_type = 1;

                    var id_list = ROOT.sCP.getDeckenCustomIdList(custom_type);
                    ROOT.sCP.decken_custom_id = id_list[w.id];
                    ROOT.sCP.decken_custom_type = custom_type;
                    self.Type::OptionMenu.insensitive = false;
                    self.Number::slider.insensitive = false;
                }
                else
                {
                    var custom_type = 0;

                    ROOT.sCP.decken_custom_type = custom_type;
                    var has_default_decken = gtengine::MSpecDB::checkFlag(ROOT.sCP.getCarCode(), gtengine::GenericFlag::CAN_CHANGE_DECKEN);
                    self.Type::OptionMenu.insensitive = !has_default_decken;
                    self.Number::slider.insensitive = !has_default_decken;
                }

                if (ROOT.sSceneFace != nil)
                {
                    ROOT.sSceneFace.execCommand("setCarDeckenCustom %d %d".format(ROOT.sCP.decken_custom_type, ROOT.sCP.decken_custom_id));
                }
            }
        }

        module Type::OptionMenu
        {
            method setType(context, type)
            {
                for (var i = 0; i < self.Count(); i++)
                {
                    var w = self.getItem(i);
                    if (w.type == type)
                    {
                        self.setIndex(context, i);
                        return;
                    }
                }

                self.setIndex(context, 0);
            }

            method onValueChanged(context)
            {
                __prototype__::onValueChanged(context);

                var w = self.getItem();
                ROOT.sCP.decken_type = w.type;

                if (ROOT.sSceneFace != nil)
                {
                    ROOT.sSceneFace.execCommand("setCarDeckenType %d".format(ROOT.sCP.decken_type));
                }
            }
        }

        module Number::slider
        {
            method onValueChanged(context)
            {
                if (self.initialized != nil)
                {
                    self.sliderValueChanged(context);
                }

                ROOT.sCP.decken_number = self.index;
                
                if (ROOT.sSceneFace != nil)
                {
                    ROOT.sSceneFace.execCommand("setCarDeckenNumber %d".format(ROOT.sCP.decken_number));
                }
            }
        }
    }

    module Pane::ScrolledWindow::clip::space::WindowSticker
    {
        
    }
}