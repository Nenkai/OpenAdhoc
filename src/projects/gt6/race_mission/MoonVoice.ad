













module MOON
{
    static START = 1;
    static GOAL = 2;
    static SECTOR = 3;
    static PYLON = 4;
    static WRONG = 5;
    static DSQ = 6;
    static PHOTO = 7;
    static EVENT_V = 8;
    static MAX = 9;
}

static beforeVoiceTime = nil;
static pylonVoiceCount = 0;

function moonVoice(context, patern_enum, sector_num)
{
    if (!isMoon)
        return;

    var array = [
        [patern_enum == MOON::START, ["1", "2"]],
        [patern_enum == MOON::GOAL, ["4"]],
        [patern_enum == MOON::SECTOR, ["6", "7"]],
        [patern_enum == MOON::PYLON, ["9", "10", "11"]],
        [patern_enum == MOON::WRONG, ["12", "13", "14", "15"]],
        [patern_enum == MOON::DSQ, ["12", "13", "15", "20"]],
        [patern_enum == MOON::EVENT_V, ["8"]],
        [patern_enum == MOON::PHOTO, ["16"]],
    ];

    var course_label = gtengine::MSpecDB::getCourseLabel(gSequenceCondition.event.track.course_code);
    foreach (|var condition, var file_array| in array)
    {
        if (condition)
        {
            if (course_label == "moon")
            {
                if (patern_enum == MOON::GOAL)
                {
                    onMoonVoice(context, "5");
                    return;
                }
            }

            if (course_label == "moon_02")
            {
                if (patern_enum == MOON::START)
                {
                    onMoonVoice(context, "3");
                    return;
                }
            }

            if (patern_enum == MOON::PYLON)
            {
                var now = pdistd::GetSystemTimeMicroSecond();
                if (beforeVoiceTime != nil && now - beforeVoiceTime < 4 * 1000 * 1000)
                    return;

                beforeVoiceTime = now;
                var voice = ["17", "18"];
                var head_voice = ["9", "10", "11"];

                if (pylonVoiceCount >= 5)
                {
                    pylonVoiceCount = 0;
                    voice = head_voice;
                }

                pylonVoiceCount++;
                file_array = voice;
            }

            var idx = pdistd::MRandom::GetValue(0, file_array.size);
            onMoonVoice(context, file_array[idx]);
        }
    }
}

function onMoonVoice(context, voise_file)
{
    var path = "/sound_gt/guide/gt6/moon/%s.sgd".format(voise_file);
    SoundUtil::PlaySGXStreamDirectSGD(path, SoundUtil::GetNarrationVolume());
}