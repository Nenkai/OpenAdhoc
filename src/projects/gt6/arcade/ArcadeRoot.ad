














PROJECT.load("/scripts/gt6/util/CareerModeUtil");

module ROOT
{
    static sFixedGmaeMode;
    static sIsSinglePlay;

    method onInitialize(context)
    {
        sIsSinglePlay = true;
        sFixedGmaeMode = nil;
        
        var arg_objs = main::GameSequence::getArgumentObject();
        if (arg_objs != nil)
        {
            var is_single_play = arg_objs["is_single_play"];
            if (is_single_play != nil)
                sIsSinglePlay = is_single_play;

            var fixed_game_mode = arg_objs["fixed_game_mode"];
            if (fixed_game_mode != nil)
                sFixedGmaeMode = fixed_game_mode;
        }

        SoundUtil::MenuBGMCrossfadeGroup("arcade", 0.0, 1.0);
        context.pushEvent(main::menu::MFunctionEvent(arcade_loop, context));
    }

    method arcade_loop(context)
    {
        for (;;)
        {
            switch (gSequenceCondition.current)
            {
                case SEQUENCE::EXIT:
                    PROJECT.exit(context);
                    return;

                    break;

                case SEQUENCE::GAME_MODE:
                    if (sFixedGmaeMode != nil)
                    {
                        if (gSequenceCondition.progression)
                            gSequenceCondition.enterGameModeSequence(sFixedGmaeMode);
                        else
                            gSequenceCondition.skipCurrentSequence();

                        break;
                    }
                    
                    OverLapRoot.setTopicPath("Page_ModeSelect");

                    var game_mode;
                    if (sIsSinglePlay)
                    {
                        var game_mode_data = [];
                        if (GAME_STATUS.user_profile.option.visible_icon_singlerace)
                            game_mode_data.push(["GameMode_SINGLE_RACE", "TOOLTIP|GameMode_SINGLE_RACE", gtengine::GameMode::SINGLE_RACE]);

                        if (GAME_STATUS.user_profile.option.visible_icon_timetrial)
                            game_mode_data.push(["GameMode_TIME_ATTACK", "TOOLTIP|GameMode_TIME_ATTACK", gtengine::GameMode::TIME_ATTACK]);

                        if (GAME_STATUS.user_profile.option.visible_icon_drifttrial)
                            game_mode_data.push(["GameMode_DRIFT_ATTACK", "TOOLTIP|GameMode_DRIFT_ATTACK", gtengine::GameMode::DRIFT_ATTACK]);

                        if (game_mode_data.size == 0)
                        {
                            game_mode_data.push(["GameMode_SINGLE_RACE", "TOOLTIP|GameMode_SINGLE_RACE", gtengine::GameMode::SINGLE_RACE]);
                            game_mode_data.push(["GameMode_TIME_ATTACK", "TOOLTIP|GameMode_TIME_ATTACK", gtengine::GameMode::TIME_ATTACK]);
                            game_mode_data.push(["GameMode_DRIFT_ATTACK", "TOOLTIP|GameMode_DRIFT_ATTACK", gtengine::GameMode::DRIFT_ATTACK]);
                        }

                        if (game_mode_data.size == 1)
                        {
                            if (gSequenceCondition.progression)
                                gSequenceCondition.enterGameModeSequence(game_mode_data[0][2]);
                            else
                                gSequenceCondition.skipCurrentSequence();
                            break;
                        }

                        game_mode = RichDialogRoot.open(context, 
                            manager.translate("CommonArcadeMode", "Page_ModeSelect"),
                            game_mode_data,
                            game_mode,
                            "/image/gt6/bg/arcade_gamemode.dds",
                            sIsSinglePlay,
                            gSequenceCondition.progression);
                    }
                    else
                    {
                        game_mode = RichDialogRoot.open(context, 
                            manager.translate("CommonArcadeMode", "Page_ModeSelect"),
                            [
                                [manager.translate("CommonArcadeMode", "GameMode_SPLIT_BATTLE"), gtengine::GameMode::SPLIT_BATTLE],
                            ],
                            game_mode,
                            "/image/gt6/bg/arcade_gamemode.dds",
                            sIsSinglePlay,
                            gSequenceCondition.progression);
                    }

                    if (game_mode != nil)
                        gSequenceCondition.enterGameModeSequence(game_mode);
                    else
                        gSequenceCondition.exitArcadeSequencee();

                    break;

                case SEQUENCE::COURSE_CATEGORY:
                    gSequenceCondition.edited_course_data = nil;
                    if (GAME_STATUS.user_profile.option.kiosk_limit_course)
                    {
                        gSequenceCondition.skipCurrentSequence();
                        break;
                    }

                    OverLapRoot.setTopicPath("Page_CourseSelect");
                    var course_category = RichDialogRoot.open(context, 
                        manager.translate("CommonArcadeMode", "Page_CourseSelect"),
                        [
                            ["CourseCategory_circuit", "TOOLTIP|CourseCategory_circuit", COURSE_CATEGORY::CIRCUIT],
                            ["CourseCategory_original", "TOOLTIP|CourseCategory_original", COURSE_CATEGORY::ORIGINAL],
                            ["CourseCategory_city", "TOOLTIP|CourseCategory_city", COURSE_CATEGORY::CITY],
                            ["CourseCategory_snow_dirt", "TOOLTIP|CourseCategory_snow_dirt", COURSE_CATEGORY::SNOW_DIRT],
                            ["CourseCategory_edit", "TOOLTIP|CourseCategory_edit", COURSE_CATEGORY::EDIT],
                        ],
                        gSequenceCondition.course_category,
                        "/image/gt6/bg/arcade_course.dds",
                        sIsSinglePlay,
                        gSequenceCondition.progression);
                    
                    if (course_category != nil)
                    {
                        gSequenceCondition.course_category = course_category;
                        gSequenceCondition.nextGameModeSequence();
                    }
                    else
                    {
                        gSequenceCondition.course_category = nil;
                        gSequenceCondition.prevGameModeSequence();
                    }
                    break;

                case SEQUENCE::COURSE:
                    OverLapRoot.setTopicPath("Page_CourseSelect");
                    var course_code = CourseRoot.open(context, gSequenceCondition.course_category);
                    if (course_code != nil)
                    {
                        var course = SPECDB.query1("SELECT Label, ChangeWeather, Condition, KartOnly FROM COURSE WHERE ID=?", [course_code]);
                        gSequenceCondition.course_code = course_code;

                        if (gtengine::MSpecDB::isDirtSnow(course_code))
                        {
                            var is_snow = course.Condition == gtengine::CourseCondition::SNOW;
                            gSequenceCondition.selected_dirt_course = !is_snow;
                            gSequenceCondition.selected_snow_course = is_snow;
                        }
                        else
                        {
                            gSequenceCondition.selected_dirt_course = false;
                            gSequenceCondition.selected_snow_course = false;
                        }

                        gSequenceCondition.selected_kart_permit_course = !course.ChangeWeather.toBool();
                        gSequenceCondition.selected_kartonly_course = course.KartOnly;
                        gSequenceCondition.nextGameModeSequence();
                    }
                    else
                    {
                        gSequenceCondition.course_code = nil;
                        gSequenceCondition.selected_dirt_course = nil;
                        gSequenceCondition.selected_snow_course = nil;
                        gSequenceCondition.selected_kartonly_course = nil;

                        gSequenceCondition.prevGameModeSequence();
                    }
                    break;

                case SEQUENCE::CAR_CATEGORY:
                    if (GAME_STATUS.user_profile.option.kiosk_mode || 
                        GAME_STATUS.user_profile.option.kiosk_limit_car)
                    {
                        gSequenceCondition.skipCurrentSequence();
                        break;
                    }

                    OverLapRoot.setTopicPath("Page_CarSelect");
                    var sound = gSequenceCondition.game_mode == gtengine::GameMode::TIME_ATTACK ? "next" : nil;
                    var car_category = RichDialogRoot.open(context, 
                        manager.translate("CommonArcadeMode", "Page_CarSelect"),
                        [
                            [RichDialogRoot::RidingCarButton(), "TOOLTIP|CarCategory_RidingCars", CAR_CATEGORY::RIDING_CAR, sound,],
                            ["CarCategory_FavoriteCars", "TOOLTIP|CarCategory_FavoriteCars", CAR_CATEGORY::GARAGE],
                            ["CarCategory_RentACars", "TOOLTIP|CarCategory_RentACars", CAR_CATEGORY::RENT_A_CAR],
                        ],
                        gSequenceCondition.car_category,
                        "/image/gt6/bg/arcade_car.dds",
                        sIsSinglePlay,
                        gSequenceCondition.progression);

                    if (car_category != nil)
                    {
                        gSequenceCondition.car_category = car_category;
                        gSequenceCondition.nextGameModeSequence();
                    }
                    else
                    {
                        gSequenceCondition.car_category = nil;
                        gSequenceCondition.prevGameModeSequence();
                    }
                    break;

                case SEQUENCE::CAR:
                    if (gSequenceCondition.car_category == CAR_CATEGORY::RIDING_CAR)
                    {
                        if (gSequenceCondition.progression)
                            gSequenceCondition.cp = GAME_STATUS.user_profile.garage.getRidingCar();
                        else
                            gSequenceCondition.cp = nil;

                        gSequenceCondition.skipCurrentSequence();
                        break;
                    }

                    OverLapRoot.setTopicPath("Page_CarSelect");

                    var cp = CarRoot.open(context, gSequenceCondition.car_category);
                    if (cp != nil)
                    {
                        gSequenceCondition.cp = cp;
                        gSequenceCondition.nextGameModeSequence();
                    }
                    else
                    {
                        gSequenceCondition.cp = nil;
                        gSequenceCondition.prevGameModeSequence();
                    }     

                    break;

                case SEQUENCE::CAR_DISPLAY:
                    if (!gSequenceCondition.cp.rentacar)
                    {
                        gSequenceCondition.skipCurrentSequence();
                        break;
                    }

                    if (gSequenceCondition.progression)
                    {
                        CarDisplayRoot.display(context, gSequenceCondition.cp);
                        gSequenceCondition.nextGameModeSequence();
                    }
                    else
                    {
                        CarDisplayRoot.hide(context);
                        gSequenceCondition.prevGameModeSequence();
                    }

                    break;

                case SEQUENCE::CAR_COLOR:
                    if (!gSequenceCondition.cp.rentacar)
                    {
                        gSequenceCondition.skipCurrentSequence();
                        break;
                    }

                    var color = CarColorRoot.open(context, gSequenceCondition.cp.getCarCode(), gSequenceCondition.cp.color);
                    if (color != nil)
                    {
                        gSequenceCondition.cp.color = color;
                        gSequenceCondition.nextGameModeSequence();
                    }
                    else
                    {
                        gSequenceCondition.cp.color = 0;
                        gSequenceCondition.prevGameModeSequence();
                    }
                    break;

                case SEQUENCE::CAR_SPLIT:
                    |var cp, var cp2, var dp, var dp2| = CarSplitBaseRoot.open(context, gSequenceCondition.car_category);
                    if (cp != nil && cp2 != nil)
                    {
                        gSequenceCondition.cp = cp;
                        gSequenceCondition.cp2 = cp2;
                        gSequenceCondition.dp = dp;
                        gSequenceCondition.dp2 = dp2;
                        gSequenceCondition.nextGameModeSequence();
                    }
                    else
                    {
                        gSequenceCondition.cp = nil;
                        gSequenceCondition.cp2 = nil;
                        gSequenceCondition.prevGameModeSequence();
                    }
                    break;

                case SEQUENCE::TRANSMISSION:
                    if (!CarDisplayRoot.isDisplay())
                    {
                        gSequenceCondition.skipCurrentSequence();
                        break;
                    }

                    if (gSequenceCondition.cp.isATOnly())
                    {
                        gSequenceCondition.skipCurrentSequence();
                        break;
                    }

                    var sound = gSequenceCondition.isLastSequence() ? "next" : nil;
                    var transmission = LowerDialogRoot.open(context, 
                        manager.translate("CommonArcadeMode", "Page_Transmission"),
                        [
                            [manager.translate("TrialSetting", "AUTOMATIC"), TRANSMISSION::AT],
                            [manager.translate("TrialSetting", "MANUAL"), TRANSMISSION::MT],
                        ],
                        gSequenceCondition.dp.manual ? TRANSMISSION::MT : TRANSMISSION::AT,
                        sound);

                    if (transmission != nil)
                    {
                        gSequenceCondition.dp.manual = transmission == TRANSMISSION::MT;
                        gSequenceCondition.manual_transmission = transmission == TRANSMISSION::MT;
                        gSequenceCondition.nextGameModeSequence();
                    }
                    else
                        gSequenceCondition.prevGameModeSequence();

                    break;

                case SEQUENCE::DRIFT_TYPE:
                    CareerModeUtil::applySideBreak(context);

                    if (!CarDisplayRoot.isDisplay())
                    {
                        gSequenceCondition.skipCurrentSequence();
                        break;
                    }

                    if (gSequenceCondition.edited_course_data != nil)
                    {
                        gSequenceCondition.drift_type = DRIFT_TYPE::ENDLESS;
                        gSequenceCondition.skipCurrentSequence();
                        break;
                    }

                    var sound = gSequenceCondition.isLastSequence() ? "next" : nil;
                    var drift_type = LowerDialogRoot.open(context, 
                        manager.translate("CommonArcadeMode", "Page_DriftType"),
                        [
                            [manager.translate("TrialSetting", "SECTION"), DRIFT_TYPE::SECTOR],
                            [manager.translate("TrialSetting", "FULL_LAP"), DRIFT_TYPE::ENDLESS],
                        ],
                        gSequenceCondition.drift_type,
                        sound);

                    if (drift_type != nil)
                    {
                        gSequenceCondition.drift_type = drift_type;
                        gSequenceCondition.nextGameModeSequence();
                    }
                    else
                    {
                        gSequenceCondition.drift_type = nil;
                        gSequenceCondition.prevGameModeSequence();
                    }

                    break;


                case SEQUENCE::DIFFICULTY:
                    if (GetVersionBranch() == "demo")
                    {
                        gSequenceCondition.skipCurrentSequence();
                        break;
                    }

                    if (!CarDisplayRoot.isDisplay())
                    {
                        gSequenceCondition.skipCurrentSequence();
                        break;
                    }

                    var sound = gSequenceCondition.isLastSequence() ? "next" : nil;
                    if (gSequenceCondition.game_mode == gtengine::GameMode::SINGLE_RACE &&
                        !GAME_STATUS.user_profile.option.kiosk_mode)
                        sound = nil;

                    
                    var difficulty = LowerDialogRoot.open(context, 
                        manager.translate("CommonArcadeMode", "Page_Difficulty"),
                        [
                            [manager.translate("CommonArcadeMode", "Difficulty_Easy"), DIFFICULTY::EASY],
                            [manager.translate("CommonArcadeMode", "Difficulty_Normal"), DIFFICULTY::NORMAL],
                            [manager.translate("CommonArcadeMode", "Difficulty_Hard"), DIFFICULTY::HARD],
                        ],
                        gSequenceCondition.difficulty,
                        sound);

                    if (difficulty != nil)
                    {
                        gSequenceCondition.difficulty = difficulty;
                        gSequenceCondition.nextGameModeSequence();
                    }
                    else
                    {
                        gSequenceCondition.difficulty = nil;
                        gSequenceCondition.prevGameModeSequence();
                    }

                    break;

                case SEQUENCE::START_RACE:
                    var is_car_display = CarDisplayRoot.isDisplay();
                    CarDisplayRoot.hide(context);
                    var one_way_check = false;
                    var gp;

                    switch (gSequenceCondition.game_mode)
                    {
                        case gtengine::GameMode::SINGLE_RACE:
                            gp = createSingleRace(context);
                            break;

                        case gtengine::GameMode::TIME_ATTACK:
                            gp = createTimeTrial(context);
                            one_way_check = true;
                            break;

                        case gtengine::GameMode::DRIFT_ATTACK:
                            gp = createDriftAttack(context);
                            break;

                        case gtengine::GameMode::SPLIT_BATTLE:
                            gp = createSplitBattle(context);
                            break;
                    }

                    if (gSequenceCondition.edited_course_data != nil)
                    {
                        if (!LoginUtil::makeSureLogin(context, true))
                        {
                            LoginUtil::setPresence(false);
                            if (is_car_display)
                            {
                                CarDisplayRoot.display(context, gSequenceCondition.cp);
                                gSequenceCondition.prevGameModeSequence();
                            }

                            break;
                        }

                        LoginUtil::setPresence(true);

                        var course_id = gSequenceCondition.edited_course_data["course_id"];
                        var ted_path = CourseMakerUtil::getTedPath(context, gSequenceCondition.edited_course_data);
                        var fst = pdistd::ReadFile(ted_path);
                        var event = gp.events[0];
                        var rp = event.race_parameter;
                        rp.course_maker_source_type = gtengine::CourseMakerSourceType::TED;

                        if (one_way_check)
                            rp.complete_type = gSequenceCondition.edited_course_data["one_way"] ? gtengine::CompleteType::BYLAPS : gtengine::CompleteType::NONE;

                        event.race_parameter = rp;

                        var track = event.track;
                        track.course_code = gtengine::MSpecDB::getCourseCode("coursemaker");
                        var data = CourseMakerUtil::decrypt(fst["buffer"]);
                        track.edit_data = data;
                        track.generated_course_id = course_id;

                        GAME_STATUS.user_profile.context.coursemaker_course_id = course_id;

                        var gd = ORG.setGenerateData(data);
                        rp.course_code = gd;

                        var lang = pdistd::Language[pdistd::MLocale::getLanguage()];
                        event.information.title.setText(lang, gSequenceCondition.edited_course_data["title"]);
                    }

                    var result = GameParameterUtil::executeArcade(context, gp, GAME_STATUS, GetVersionBranch() == "demo" ? setupRaceConditionForDemo : setupRaceCondition);
                    

                    if (result)
                        return;
                    else
                    {
                        if (is_car_display)
                        {
                            CarDisplayRoot.display(context, gSequenceCondition.cp);
                            gSequenceCondition.prevGameModeSequence();
                        }
                    }

                    break;
            }
        }
    }

    method onFinalize(context)
    {
        gSequenceCondition = nil;
    }

    method createSingleRace(context)
    {
        GameParameterUtil::begin();
        GAME_STATUS.user_profile.context.setArcadeCar(gSequenceCondition.cp);
        GAME_STATUS.user_profile.residence.setArcadePlayer(0, gSequenceCondition.dp);

        var entry_max = 16;

        var laps = GAME_STATUS.user_profile.option.arcade_laps;
        var one_make = false;

        var gp = GameParameterUtil::createSingleRace(gSequenceCondition.course_code, 
            entry_max, 
            laps,
            nil,
            nil,
            nil,
            nil,
            nil,
            one_make);

        gp.event.race_parameter.start_type = gtengine::StartType::ROLLING2;
        gp.event.entry_set.entry_generate.use_rolling_start_param = 1;
        gp.event.entry_set.entry_generate.rolling_start_v = -100;
        gp.event.entry_set.entry_generate.gap_for_start_rolling_distance = 70;

        var course_label = gtengine::MSpecDB::getCourseLabel(gSequenceCondition.course_code);
        if (course_label == "newindoorkart" || course_label == "newindoorkart_short" ||
            course_label == "r_newindoorkart" || course_label == "r_newindoorkart_short")
        {
            gp.event.race_parameter.start_type = gtengine::StartType::ROLLING_DL;
            gp.event.entry_set.entry_generate.rolling_start_v = -100;
            gp.event.entry_set.entry_generate.gap_for_start_rolling_distance = 20;
        }

        if (course_label == "stadium" || course_label == "r_stadium")
            gp.event.race_parameter.start_type = gtengine::StartType::GRID;
        
        var one_way = gSequenceCondition.edited_course_data != nil && gSequenceCondition.edited_course_data["one_way"];
        if (one_way)
        {
            gp.event.race_parameter.start_type = gtengine::StartType::GRID;
            gp.event.race_parameter.race_limit_laps = 1;
        }

        GameParameterUtil::end();
        return gp;
    }

    method createTimeTrial(context)
    {
        GameParameterUtil::begin();
        GAME_STATUS.user_profile.context.setArcadeCar(gSequenceCondition.cp);
        GAME_STATUS.user_profile.residence.setArcadePlayer(0, gSequenceCondition.dp);

        var course_code = gSequenceCondition.course_code;
        var course_label = gtengine::MSpecDB::getCourseLabel(course_code);

        var gp;
        if (course_label == "goodwood_fos" || course_label == "goodwood_fos_2014" || course_label == "goodwood_fos_2015")
        {
            var file = pdistd::ReadFile("/game_parameter/gt6/arcade/goodwood_start.xml");
            var gp_list = GameParameterUtil::parseXML(file["buffer"]);
            gp = gp_list[0];

            var entry_set = gp.event.entry_set;
            entry_set.entries.resize(1);

            var entry = entry_set.entries[0];
            entry.player_no = 0;

            entry.car_parameter = gSequenceCondition.cp;
            entry.driver_parameter = GAME_STATUS.user_profile.residence.getArcadePlayer(0);
            gp.event.track.course_code = course_code;
        }
        else
        {
            gp = GameParameterUtil::createTimeAttack(course_code);
        }

        gp.event.race_parameter.academy_event = GAME_STATUS.user_profile.option.academy_mode;

        var one_way = gSequenceCondition.edited_course_data != nil && gSequenceCondition.edited_course_data["one_way"];
        if (one_way)
        {
            gp.event.race_parameter.start_type = gtengine::StartType::GRID;
        }

        GameParameterUtil::end();
        return gp;
    }

    method createDriftAttack(context)
    {
        GameParameterUtil::begin();
        GAME_STATUS.user_profile.context.setArcadeCar(gSequenceCondition.cp);
        GAME_STATUS.user_profile.residence.setArcadePlayer(0, gSequenceCondition.dp);

        var gp = GameParameterUtil::createDriftAttack(gSequenceCondition.course_code, 0, false);
        
        var one_way = gSequenceCondition.edited_course_data != nil && gSequenceCondition.edited_course_data["one_way"];
        if (one_way)
        {
            gp.event.race_parameter.start_type = gtengine::StartType::GRID;
        }

        GameParameterUtil::end();
        return gp;
    }

    method createSplitBattle(context)
    {
        var gp = GameParameterUtil::createSplitBattle(gSequenceCondition.course_code,
            [gSequenceCondition.cp, gSequenceCondition.cp2],
            [gSequenceCondition.dp,gSequenceCondition.dp2]
        );

        gp.event.constraint.driving_line = false;
        gp.event.race_parameter.low_mu_type = GAME_STATUS.user_profile.context.arcade_low_mu_type;
        gp.event.race_parameter.behavior_damage_type = GAME_STATUS.user_profile.context.arcade_behavior_damage_type;
        gp.event.race_parameter.race_limit_laps = gSequenceCondition._2p_battle_laps;

        return gp;
    }

    method setupRaceCondition(context, gp, cp, dp, player_no)
    {
        var rp = gp.event.race_parameter;
        var constraint = gp.event.constraint;
        var course_code = gp.event.track.course_code;

        if (course_code == gtengine::COURSE_CODE_GENERATED)
            course_code = gp.event.track.getSceneryCourseCode();
        
        switch (gSequenceCondition.game_mode)
        {
            case gtengine::GameMode::SINGLE_RACE:
                if (gSequenceCondition.difficulty == nil)
                {
                    var data = ArcadeOptionRoot::Data(cp, dp, rp);
                    data.visible_difficulty = true;
                    data.visible_laps = !GAME_STATUS.user_profile.option.kiosk_mode;

                    if (gSequenceCondition.edited_course_data != nil)
                        data.visible_laps = !gSequenceCondition.edited_course_data["one_way"];

                    data.game_mode = gp.event.game_mode;
                    
                    var result = ArcadeOptionRoot.open(context, data);
                    if (!result)
                        return false;
                }
                else
                {
                    var display_option = !GAME_STATUS.user_profile.option.kiosk_mode;
                    if (gSequenceCondition.edited_course_data != nil)
                        display_option = !gSequenceCondition.edited_course_data["one_way"];

                    if (display_option)
                    {
                        var data = ArcadeOptionRoot::Data(cp, dp, rp);
                        data.visible_laps = true;
                        data.game_mode = gp.event.game_mode;
                        var result = ArcadeOptionRoot.open(context, data);
                        if (!result)
                            return false;
                    }

                    GAME_STATUS.user_profile.context.arcade_difficulty = gSequenceCondition.difficulty;
                    dp.manual = gSequenceCondition.dp.manual;
                }

                applyDifficulty(context, gp, GAME_STATUS.user_profile.context.arcade_difficulty);
                break;

            case gtengine::GameMode::DRIFT_ATTACK:
                if (gSequenceCondition.drift_type == nil)
                {
                    if (gSequenceCondition.edited_course_data != nil)
                        rp.endless = true;
                    else
                    {
                        var data = ArcadeOptionRoot::Data(cp, dp, rp);
                        data.visible_drift_type = true;
                        data.game_mode = gp.event.game_mode;

                        var result = ArcadeOptionRoot.open(context, data);
                        if (!result)
                            return false;
    
                    }
                }
                else
                {
                    rp.endless = gSequenceCondition.drift_type == DRIFT_TYPE::ENDLESS;
                    dp.manual = gSequenceCondition.dp.manual;
                }

                break;

            case gtengine::GameMode::TIME_ATTACK:
                dp.manual = gSequenceCondition.dp.manual;
                break;
        }

        applyWeatherAndTime(context, gp);

        if (gSequenceCondition.game_mode == gtengine::GameMode::SINGLE_RACE)
        {
            var enemies = getCarTagEnemies(cp.getCarCode());
            if (enemies.size > 0)
                setEntryGenerate(context, gp, enemies);
        }

        // Setup pitting
        if (gSequenceCondition.game_mode != gtengine::GameMode::SPLIT_BATTLE)
        {
            var course_info = SPECDB.query1("SELECT * FROM COURSE WHERE ID=?", [course_code]);
            if (course_info.ChangeWeather && rp.race_limit_laps >= 10)
                rp.enable_pit = true;
            else if (rp.consume_tire == false && rp.consume_fuel == false)
                rp.enable_pit = false;
        }
        else
        {
            rp.enable_pit = false;
        }

        if (gSequenceCondition.cp.getCarLabel() == "m3_gt2_11")
            KeyValueUtil::setCarUnlock("m3_gt2_11_color", true);

        return true;
    }

    method setupRaceConditionForDemo(context, gp, cp, dp, player_no)
    {
        var rp = gp.event.race_parameter;
        var constraint = gp.event.constraint;
        rp.endless = gSequenceCondition.drift_type == DRIFT_TYPE::ENDLESS;

        if (GetVersionBranch() == "demo")
        {
            var new_dp = main::Residence::create_player(true, player_no);
            dp.display_driving_line = new_dp.display_driving_line;
            dp.physics_pro = new_dp.physics_pro;
            dp.manual = gSequenceCondition.dp.manual;
            dp.active_steering = new_dp.active_steering;
            dp.assist_asm = new_dp.assist_asm;
            dp.assist_tcs = new_dp.assist_tcs;
            dp.pad_yaw_gain = new_dp.pad_yaw_gain;
        }

        if (gSequenceCondition.game_mode == gtengine::GameMode::SINGLE_RACE)
        {
            applyDifficulty(context, gp);
            var enemies = getCarTagEnemies(cp.getCarCode());

            if (enemies.size > 0)
                setEntryGenerate(context, gp, enemies);
        }

        applyWeatherAndTime(context, gp);
        return true;
    }

    method getCarTagEnemies(carcode)
    {
        var tags = [
            "GT300",
            "GT500",
            "NASCAR2010",
            "NASCAR2011",
            "NASCAR2013",
            "GT3"
        ];

        var placeholders = [];

        for (var i = 0; i < tags.size; i++)
            placeholders.push("?");

        var tag_ids = SPECDB.executeQuery1C("SELECT ID FROM CAR_TAG WHERE Label IN (%s)".format(placeholders.join(",")), tags);
        var tag = SPECDB.executeQuery1R1C("SELECT TagID FROM CAR_TAG_RELATION WHERE CarID=? AND TagID IN (%s)".format(tag_ids.join(",")), [carcode]);

        if (tag == nil)
            return [];

        var cars = SPECDB.executeQuery1C("SELECT CarID FROM CAR_TAG_RELATION WHERE CarID<>? AND TagID=?", [carcode, tag]);
        return cars;
    }

    method setEntryGenerate(context, gp, entryset)
    {
        if (entryset.size == 0)
            return;

        var event = gp.event;
        var rp = event.race_parameter;
        var entry_generate = event.entry_set.entry_generate;
        var entry_num = entry_generate.entry_num - 1;
        var cp = GAME_STATUS.user_profile.context.getArcadeCar();
        var car_list = [];
        var car_code = cp.getCarCode();
        var random = pdistd::MRandom();
        random.mt_seed = main::pdistd::MRandom::GetValue(0, 0x7FFFFFFF);

        while (true) 
        {
            entryset.randomShuffle(random.mt_seed);
            car_list += entryset;

            if (car_list.size > entry_num)
                break;
        }

        car_list.resize(entry_num);
        car_list.randomShuffle(random.mt_seed);

        entry_generate.cars.resize(car_list.size);
        for (var i = 0; i < car_list.size; i++)
        {
            var car_code = car_list[i];
            var ct = gtengine::MCarThin(car_code);
            var variation = main::gtengine::MSpecDB::getCarVariation(car_code);
            ct.color = random.getMTInt() % variation;
            entry_generate.cars[i] = ct;
        }

        if (entry_generate.cars.size > 0)
            entry_generate.generate_type = gtengine::GenerateType::ORDER;
    }

    static sDifficultyArray = [
        // Easy
        [
            "entry_max" : 6,
            "ai_skill_a" : 90,
            "ai_skill_b" : 90,
            "ai_skill_c" : 85,
            "boost0" : [0, 20, -13, 30, 0, 10, 0, 5, 8, 4, 0],
            "boost1" : [1, 10, -13, 10, 0, 10, 0, 5, 5, 0, 50],
            "replace_at_courseout" : 1,
        ],

        // Intermediate
        [
            "entry_max" : 8,
            "ai_skill_a" : 98,
            "ai_skill_b" : 95,
            "ai_skill_c" : 93,
            "boost0" : [0, 20, -8, 30, 0, 10, 3, 5, 3, 4, 30],
            "boost1" : [1, 20, -5, 30, 0, 10, 0, 2, 3, 0, 70],
            "replace_at_courseout" : 1,
        ],

        // "Professional"
        [
            "entry_max" : 10,
            "ai_skill_a" : 100,
            "ai_skill_b" : 100,
            "ai_skill_c" : 100,
            "boost0" : [0, 30, -8, 60, 0, 10, 2, 2, 2, 2, 40],
            "boost1" : [1, 30, -3, 60, 0, 30, 0, 2, 5, 0, 80],
            "replace_at_courseout" : 0,
        ],
    ];

    method applyDifficulty(context, gp, difficulty)
    {
        var event = gp.event;
        var rp = event.race_parameter;
        var entry_set = event.entry_set;
        var entry_generate = entry_set.entry_generate;
        var map = sDifficultyArray[difficulty];

        entry_set.entry_generate.ai_roughness = GAME_STATUS.user_profile.option.arcade_ai_roughness;
        entry_set.entry_generate.ai_skill_accelerating = map["ai_skill_a"];
        entry_set.entry_generate.ai_skill_breaking = map["ai_skill_b"];
        entry_set.entry_generate.ai_skill_cornering = map["ai_skill_c"];

        var option = main::GAME_STATUS.user_profile.option;
        if (option.arcade_demo_mode)
        {
            switch (difficulty)
            {
                case 0:
                default:
                    entry_set.entry_generate.ai_skill_cornering = option.arcade_ai_skill_easy;
                    break;

                case 1:
                    entry_set.entry_generate.ai_skill_cornering = option.arcade_ai_skill_normal;
                    break;

                case 2:
                    entry_set.entry_generate.ai_skill_cornering = option.arcade_ai_skill_hard;
                    break;
            }
        }

        rp.boost_type = 1;
        rp.boost_flag = 1;
        rp.boost_table = map["boost0"];
        rp.boost_table = map["boost1"];
        rp.replace_at_courseout = map["replace_at_courseout"];
        rp.entry_max = map["entry_max"];
        entry_generate.entry_num = map["entry_max"];
        entry_generate.player_pos = entry_generate.entry_num - 1;
        rp.rolling_player_grid = entry_generate.player_pos;
    }

    static sMagicHourArray = 
    [
        // Daytona
        ["daytona_daynight", [
            ["date_time" : "2013/01/26 08:10:00", "time_progress_speed" : 15.0, "weather" : 1.0],
            ["date_time" : "2013/01/26 12:00:00", "time_progress_speed" : 15.0, "weather" : 1.0],
            ["date_time" : "2013/01/26 17:10:00", "time_progress_speed" : 15.0, "weather" : 1.0],
        ]],
        ["daytona_road_daynight", [
            ["date_time" : "2013/01/26 08:10:00", "time_progress_speed" : 15.0, "weather" : 1.0],
            ["date_time" : "2013/01/26 12:00:00", "time_progress_speed" : 15.0, "weather" : 1.0],
            ["date_time" : "2013/01/26 17:10:00", "time_progress_speed" : 15.0, "weather" : 1.0],
        ]],

        // Le Mans
        ["sarthe2009_daynight", [
            ["date_time" : "2013/06/22 06:30:00", "time_progress_speed" : 15.0, "weather" : 1.0],
            ["date_time" : "2013/06/22 14:30:00", "time_progress_speed" : 15.0, "weather" : 1.0],
            ["date_time" : "2013/06/22 21:00:00", "time_progress_speed" : 15.0, "weather" : 1.0],
        ]],
        ["sarthe2013_daynight", [
            ["date_time" : "2013/06/22 06:30:00", "time_progress_speed" : 15.0, "weather" : 1.0],
            ["date_time" : "2013/06/22 14:30:00", "time_progress_speed" : 15.0, "weather" : 1.0],
            ["date_time" : "2013/06/22 21:00:00", "time_progress_speed" : 15.0, "weather" : 1.0],
        ]],

        // Nurburgring
        ["nurburgring", [
            ["date_time" : "2013/06/21 06:00:00", "time_progress_speed" : 5.0, "weather" : 1.0],
            ["date_time" : "2013/06/21 20:00:00", "time_progress_speed" : 5.0, "weather" : 1.0],
        ]],
        ["nurburgring_24h", [
            ["date_time" : "2013/05/19 07:30:00", "time_progress_speed" : 5.0, "weather" : 1.0],
            ["date_time" : "2013/05/19 19:30:00", "time_progress_speed" : 5.0, "weather" : 1.0],
        ]],
        ["nurburgring_GP", [
            ["date_time" : "2013/07/07 07:00:00", "time_progress_speed" : 15.0, "weather" : 1.0],
            ["date_time" : "2013/07/07 20:00:00", "time_progress_speed" : 15.0, "weather" : 1.0],
        ]],
        ["nurburgring_dtm", [
            ["date_time" : "2013/08/18 07:00:00", "time_progress_speed" : 15.0, "weather" : 1.0],
            ["date_time" : "2013/08/18 20:00:00", "time_progress_speed" : 15.0, "weather" : 1.0],
        ]],
        ["nurburgring_vln", [
            ["date_time" : "2013/08/24 08:30:00", "time_progress_speed" : 15.0, "weather" : 1.0],
            ["date_time" : "2013/08/24 18:30:00", "time_progress_speed" : 15.0, "weather" : 1.0],
        ]],

        // Spa
        ["spa_daynight", [
            ["date_time" : "2013/08/26 09:00:00", "time_progress_speed" : 15.0, "weather" : 1.0],
            ["date_time" : "2013/08/26 11:00:00", "time_progress_speed" : 15.0, "weather" : 1.0],
            ["date_time" : "2013/08/26 19:30:00", "time_progress_speed" : 15.0, "weather" : 1.0],
        ]],

        // Motegi
        ["motegi_daynight", [
            ["date_time" : "2013/05/26 07:00:00", "time_progress_speed" : 15.0, "weather" : 1.0],
            ["date_time" : "2013/05/26 10:00:00", "time_progress_speed" : 15.0, "weather" : 1.0],
            ["date_time" : "2013/05/26 15:30:00", "time_progress_speed" : 15.0, "weather" : 1.0],
        ]],

        // Silverstone
        ["silverstone", [
            ["date_time" : "2013/08/18 10:00:00", "time_progress_speed" : 0, "weather" : 0.8],
            ["date_time" : "2013/08/18 15:00:00", "time_progress_speed" : 0, "weather" : 0.7],
            ["date_time" : "2013/08/18 17:00:00", "time_progress_speed" : 0, "weather" : 0.7],
        ]],
        ["silverstone_international", [
            ["date_time" : "2013/08/18 10:00:00", "time_progress_speed" : 0, "weather" : 0.8],
            ["date_time" : "2013/08/18 15:00:00", "time_progress_speed" : 0, "weather" : 0.7],
            ["date_time" : "2013/08/18 17:00:00", "time_progress_speed" : 0, "weather" : 0.7],
        ]],
        ["silverstone_national", [
            ["date_time" : "2013/08/18 10:00:00", "time_progress_speed" : 0, "weather" : 0.8],
            ["date_time" : "2013/08/18 15:00:00", "time_progress_speed" : 0, "weather" : 0.7],
            ["date_time" : "2013/08/18 17:00:00", "time_progress_speed" : 0, "weather" : 0.7],
        ]],
        ["silverstone_stowe", [
            ["date_time" : "2013/08/18 10:00:00", "time_progress_speed" : 0, "weather" : 0.8],
            ["date_time" : "2013/08/18 15:00:00", "time_progress_speed" : 0, "weather" : 0.7],
            ["date_time" : "2013/08/18 17:00:00", "time_progress_speed" : 0, "weather" : 0.7],
        ]],

        // Ascari
        ["ascari_full_track", [
            ["date_time" : "2013/10/30 10:00:00", "time_progress_speed" : 0, "weather" : 1.0],
            ["date_time" : "2013/10/30 10:00:00", "time_progress_speed" : 0, "weather" : 0.3],
            ["date_time" : "2013/10/30 14:00:00", "time_progress_speed" : 0, "weather" : 1.0],
            ["date_time" : "2013/10/30 18:00:00", "time_progress_speed" : 0, "weather" : 1.0],
        ]],

        // Willow Springs
        ["wls_big_willow", [
            ["date_time" : "2013/05/24 06:00:00", "time_progress_speed" : 15.0, "weather" : 0.94],
            ["date_time" : "2013/05/24 06:00:00", "time_progress_speed" : 15.0, "weather" : 0.68],
            ["date_time" : "2013/05/24 07:00:00", "time_progress_speed" : 15.0, "weather" : 0.68],
            ["date_time" : "2013/05/24 07:00:00", "time_progress_speed" : 15.0, "weather" : 0.94],
            ["date_time" : "2013/05/24 18:00:00", "time_progress_speed" : 15.0, "weather" : 0.68],
            ["date_time" : "2013/05/24 18:00:00", "time_progress_speed" : 15.0, "weather" : 0.94],
            ["date_time" : "2013/05/24 19:00:00", "time_progress_speed" : 15.0, "weather" : 0.68],
            ["date_time" : "2013/05/24 19:00:00", "time_progress_speed" : 15.0, "weather" : 0.94],
            ["date_time" : "2013/05/24 19:45:00", "time_progress_speed" : 15.0, "weather" : 0.68],
            ["date_time" : "2013/05/24 19:45:00", "time_progress_speed" : 15.0, "weather" : 0.94],
        ]],
        ["wls_streets", [
            ["date_time" : "2013/05/24 06:00:00", "time_progress_speed" : 15.0, "weather" : 0.94],
            ["date_time" : "2013/05/24 06:00:00", "time_progress_speed" : 15.0, "weather" : 0.68],
            ["date_time" : "2013/05/24 07:00:00", "time_progress_speed" : 15.0, "weather" : 0.68],
            ["date_time" : "2013/05/24 07:00:00", "time_progress_speed" : 15.0, "weather" : 0.94],
            ["date_time" : "2013/05/24 18:00:00", "time_progress_speed" : 15.0, "weather" : 0.68],
            ["date_time" : "2013/05/24 18:00:00", "time_progress_speed" : 15.0, "weather" : 0.94],
            ["date_time" : "2013/05/24 19:00:00", "time_progress_speed" : 15.0, "weather" : 0.68],
            ["date_time" : "2013/05/24 19:00:00", "time_progress_speed" : 15.0, "weather" : 0.94],
            ["date_time" : "2013/05/24 19:45:00", "time_progress_speed" : 15.0, "weather" : 0.68],
            ["date_time" : "2013/05/24 19:45:00", "time_progress_speed" : 15.0, "weather" : 0.94],
        ]],

        // Brandshatch
        ["brandshatch", [
            ["date_time" : "2013/08/10 20:00:00", "time_progress_speed" : 0, "weather" : 0.95],
            ["date_time" : "2013/08/10 11:00:00", "time_progress_speed" : 0, "weather" : 1.0],
            ["date_time" : "2013/08/10 15:00:00", "time_progress_speed" : 0, "weather" : -0.5],
        ]],
        ["brandshatch_85", [
            ["date_time" : "2013/08/10 20:00:00", "time_progress_speed" : 0, "weather" : 0.95],
            ["date_time" : "2013/08/10 11:00:00", "time_progress_speed" : 0, "weather" : 1.0],
            ["date_time" : "2013/08/10 15:00:00", "time_progress_speed" : 0, "weather" : -0.5],
        ]],
        ["brandshatch_indy", [
            ["date_time" : "2013/05/19 17:00:00", "time_progress_speed" : 0, "weather" : 1.0],
            ["date_time" : "2013/05/19 06:30:00", "time_progress_speed" : 0, "weather" : 1.0],
            ["date_time" : "2013/05/19 14:00:00", "time_progress_speed" : 0, "weather" : 1.0],
        ]],
        ["brandshatch_indy_85", [
            ["date_time" : "2013/05/19 17:00:00", "time_progress_speed" : 0, "weather" : 1.0],
            ["date_time" : "2013/05/19 06:30:00", "time_progress_speed" : 0, "weather" : 1.0],
            ["date_time" : "2013/05/19 14:00:00", "time_progress_speed" : 0, "weather" : 1.0],
        ]],

        // Goodwood
        ["goodwood_fos", [
            ["date_time" : "2013/07/14 06:00:00", "time_progress_speed" : 0, "weather" : 0.9],
            ["date_time" : "2013/07/14 15:30:00", "time_progress_speed" : 0, "weather" : 1.0],
            ["date_time" : "2013/07/14 20:00:00", "time_progress_speed" : 0, "weather" : 0.9],
        ]],
        ["goodwood_fos_2014", [
            ["date_time" : "2013/07/14 06:00:00", "time_progress_speed" : 0, "weather" : 0.9],
            ["date_time" : "2013/07/14 15:30:00", "time_progress_speed" : 0, "weather" : 1.0],
            ["date_time" : "2013/07/14 20:00:00", "time_progress_speed" : 0, "weather" : 0.9],
        ]],
        ["goodwood_fos_2015", [
            ["date_time" : "2013/07/14 06:00:00", "time_progress_speed" : 0, "weather" : 0.9],
            ["date_time" : "2013/07/14 15:30:00", "time_progress_speed" : 0, "weather" : 1.0],
            ["date_time" : "2013/07/14 20:00:00", "time_progress_speed" : 0, "weather" : 0.9],
        ]],

        // Bathrust
        ["mount_panorama", [
            ["date_time" : "2013/10/09 13:00:00", "time_progress_speed" : 15, "weather" : 1.0],
        ]],

        // Apricot Hill
        ["apricot", [
            ["date_time" : "2013/08/08 12:00:00", "time_progress_speed" : 15, "weather" : -0.9],
            ["date_time" : "2013/08/08 18:50:00", "time_progress_speed" : 15, "weather" : 1.0],
            ["date_time" : "2013/08/08 22:30:00", "time_progress_speed" : 15, "weather" : 1.0],
        ]],
        ["r_apricot", [
            ["date_time" : "2013/08/08 12:00:00", "time_progress_speed" : 15, "weather" : -0.9],
            ["date_time" : "2013/08/08 18:50:00", "time_progress_speed" : 15, "weather" : 1.0],
            ["date_time" : "2013/08/08 22:30:00", "time_progress_speed" : 15, "weather" : 1.0],
        ]],

         // Matterhorn
         ["matterhorn_A", [
            ["date_time" : "2013/7/20 07:40:00", "time_progress_speed" : 15, "weather" : 0.7],
            ["date_time" : "2013/7/20 11:50:00", "time_progress_speed" : 15, "weather" : 0.98],
            ["date_time" : "2013/7/20 20:10:00", "time_progress_speed" : 30, "weather" : 0.97],
        ]],
        ["matterhorn_B", [
            ["date_time" : "2013/7/20 07:40:00", "time_progress_speed" : 15, "weather" : 0.7],
            ["date_time" : "2013/7/20 11:50:00", "time_progress_speed" : 15, "weather" : 0.98],
            ["date_time" : "2013/7/20 20:10:00", "time_progress_speed" : 30, "weather" : 0.97],
        ]],
        ["matterhorn_C", [
            ["date_time" : "2013/7/20 07:40:00", "time_progress_speed" : 15, "weather" : 0.7],
            ["date_time" : "2013/7/20 11:50:00", "time_progress_speed" : 15, "weather" : 0.98],
            ["date_time" : "2013/7/20 20:10:00", "time_progress_speed" : 30, "weather" : 0.97],
        ]],
        ["matterhorn", [
            ["date_time" : "2013/7/20 07:40:00", "time_progress_speed" : 15, "weather" : 0.7],
            ["date_time" : "2013/7/20 11:50:00", "time_progress_speed" : 15, "weather" : 0.98],
            ["date_time" : "2013/7/20 20:10:00", "time_progress_speed" : 30, "weather" : 0.97],
        ]],
    ];

    method applyWeatherAndTime(context, gp)
    {
        var course_info = main::SPECDB.query1("SELECT TimeProgressSpeed, StartDateTime, Label, WeatherValue, NoPrecipitation FROM COURSE WHERE ID=?", [gSequenceCondition.course_code]);
        var rp = gp.event.race_parameter;
        rp.decisive_weather = gtengine::DecisiveWeather::NONE;
        rp.weather_no_schedule = false;
        rp.weather_point_num = 2;
        rp.weather_total_sec = 300;
        rp.weather_no_precipitation = course_info.NoPrecipitation;
        rp.setWeatherValue(0, 0, course_info.WeatherValue, course_info.WeatherValue);
        rp.setWeatherValue(1, 1.0, course_info.WeatherValue, course_info.WeatherValue);
        rp.weather_accel10 = 0;

        rp.time_progress_speed = course_info.TimeProgressSpeed;

        var start_datetime = pdistd::MTime::getCurrentTime();
        if (course_info.StartDateTime > 0)
            start_datetime.setForCourse(course_info.StartDateTime);

        rp.datetime = start_datetime;

        if (gSequenceCondition.game_mode != gtengine::GameMode::DRIFT_ATTACK &&
            gSequenceCondition.game_mode != gtengine::GameMode::TIME_ATTACK)
        {
            foreach (var timedata_array in sMagicHourArray)
            {
                var track = timedata_array[0];
                if (track == gtengine::MSpecDB::getCourseLabel(gSequenceCondition.course_code))
                {
                    var map_array = timedata_array[1];
                    var map = map_array[pdistd::MRandom::GetValue(0, map_array.size)];
                    var mtime = pdistd::MTime(map["date_time"]);
                    rp.datetime = mtime;
                    start_datetime = mtime;

                    rp.time_progress_speed = map["time_progress_speed"];
                    var weather_val = map["weather"];
                    rp.setWeatherValue(0, 0, weather_val, weather_val);
                    rp.setWeatherValue(1, 1.0, weather_val, weather_val);
                }
            }
        }
    }

}