module LaboModeProject::ReplayTheaterRoot
{
	static playlist = main::menu::MMemoryCardPlayList();
	
	function onInitialize(context)
	{
		ReplayTheaterRoot.visible = true;
	
		enterPage(context, ReplayTheaterRoot, hidden::Title::title.doCopy());
	
		ReplayTheaterRoot.appendChild(
			context,
			Template::Normal::Scroll.doCopy()
		);
	
		selectFolder_ = 1; /* From project */
		setPreviousFolder(3);
	
		hidden.visible = false;
	
		hideReplayItem(ReplayTheaterRoot);
		initBG(context);
		init(context);
	
		Template::setExitActivate(commandExit);
		Template::setOptionActivate(commandOption);
	}

	function onFinalize(context)
	{
		var scroll = ReplayTheaterRoot["Scroll"];
		if (scroll != nil)
			ReplayTheaterRoot.removeChild(context, scroll);
	
		leavePage(context, ReplayTheaterRoot);
	}
	
	function exit(context)
	{
		main::game.labo_folder = -1;
		main::game.labo_list_index = -1;
	
		main::game.next_menu_project = main::game.major_menu_project;
		main::game.next_menu_arg = main::game.major_menu_page;
		main::game.menu_result = "exit";
	
		start_sequence(context, "menu");
		main::menu::MMemoryCardManager::setAction(0);
	}

	function init(context)
	{
		context.cursor_visible = true;
	
		initCommon(context, ReplayTheaterRoot);
		initList(context);
		initFolders(context);
		initCommands(context);
	
		setDragable(selectFolder_ == 2);
		setAliasFileMode(selectFolder_ == 2);
	
		manager = nil;
		submanager = nil;
	
		var slot = currentSlot();
	
		switch (selectFolder_)
		{
			case 0:
				manager = main::menu::MMemoryCardManager("MODE_DEMONSTRATION", slot);
				submanager = main::menu::MMemoryCardManager("MODE_DEMONSTRATION_SUB", slot);
				submanager.autoloadPlayList.list = playlist;
				submanager.start();
				break;

			case 1:
				manager = main::menu::MMemoryCardManager("MODE_LOAD_REPLAY", slot);
				manager.autoloadPlayList.list = playlist;
				break;

			case 2:
				manager = main::menu::MMemoryCardManager("MODE_REPLAY_PLAYLIST", slot);
				manager.autoloadPlayList.list = playlist;
				manager.list = playlist;
				break;
		}
	
		if (!manager.isChanged())
			requestAutoSetPreviousListIndex();
	
		manager.start();
	}

	function initBG(context)
	{
		var rnd = main::menu::MRandom();
		var n = rnd.getValue(0, 10);
	
		if (n < 5)
		{
			ReplayTheaterRoot::bg1.visible = true;
			ReplayTheaterRoot::bg2.visible = false;
		}
		else
		{
			ReplayTheaterRoot::bg2.visible = true;
			ReplayTheaterRoot::bg1.visible = false;
		}
	}
	
	function currentSlot()
	{
		return main::game.option.replay_memory_card_slot;
	}
	
	static folders_ = ["Demo", "Replay", "PlayList"];

	function initFolders(context)
	{
		initFolderCommon(context, folders_);
	
		var vbox = getFolderVBox();
	
		vbox["PlayList"]["drag"].visible = (selectFolder_ == 1);
		playlist_bg.visible = (selectFolder_ == 2);
	
		switch(selectFolder_)
		{
			case 0:
				folderTipMultiple = context.translate(ReplayTheaterRoot, "Demo_n_movies");
				folderTipSingle = context.translate(ReplayTheaterRoot, "Demo_1_movie");
				break;

			case 1:
				folderTipMultiple = context.translate(ReplayTheaterRoot, "Replay_n_movies");
				folderTipSingle = context.translate(ReplayTheaterRoot, "Replay_1_movie");
				break;

			case 2:
				folderTipMultiple = context.translate(ReplayTheaterRoot, "Playlist_n_movies");
				folderTipSingle = context.translate(ReplayTheaterRoot, "Playlist_1_movie");
				break;
		}
	}

	function commandPlay(context)
	{
		print("play");
		manager.requestPause();
	
		if (selection_.size == 1)
		{
			manager.waitPause();
	
			var index = selection_[0];
			var file = getFile(index);
	
			if (file != nil)
			{
				setProgress(context, manager.progress);
				openProgressDialog(context, translateMc(context, "now_loading"));
	
				var r = file.load(manager);
	
				context.sync(0.5);
				closeProgressDialog(context);
				if (handleLoadResult(context, r))
				{
					main::sound.play("ok");
					saveCurrentFolder();
					start_page(context, nil);
					main::game.menu_result = "";
					main::menu::MMemoryCardManager::setAction(1);
					manager = nil;
				}
			}
		}
	
		if (manager != nil)
			manager.restart();
	}

#ifdef GT4O_US_BETA
	function commandUSBReplaySave(context)
	{
		if (!openConfirmDialog(context, DIALOG_QUERY, translateMc(context, "out usb memory ok?")))
			return;
	
		print("usb replay save");
	
		manager.requestPause();
	
		if (selection_.size == 1)
		{
			manager.waitPause();
	
			var index = selection_[0];
			var file = getFile(index);
	
			if (file != nil)
			{
				setProgress(context, manager.progress);
				openProgressDialog(context, translateMc(context, "read MC and write USB"));
	
				var r = file.copyToUSB(manager);
	
				context.sync(0.5);
				closeProgressDialog(context);
	
				if (handleLoadResult(context, r))
				{
					main::sound.play("ok");
					openConfirmDialog(context, 0, translateMc(context, "usbresult|OK"));
				}
			}
		}
	
		if (manager != nil)
			manager.restart();
	}

	function commandUSBReplayLoadAndMCSave(context)
	{
		print("usb replay load and mc save ");
	
		manager.requestPause();
	
		var file = manager.getNewFile();
	
		if (file != nil)
		{
			manager.waitPause();
	
			var r = copyFromUSBToMC(context, manager, currentSlot(), file);
	
			clearList(context);
			manager.clear();
		}
	
		if (manager != nil)
			manager.restart();
	}
	#endif

	function commandPlayList(context)
	{
		print("play list");
		saveCurrentFolder();
		start_page(context, nil);
		main::game.menu_result = "list";
		main::menu::MMemoryCardManager::setAction(1);
	}

	function commandTrashAlias(context)
	{
		if (selection_.size <= 0)
			return;
	
		var list = playlist;
	
		print("trash alias");
	
		sortSelection();
	
		var nsel = selection_.size;
		for (var i = selection_.size - 1; i >= 0; --i)
		{
			var index = selection_[i];
			list.remove(index);
		}
	
		print("save play list");
	
		manager.requestPause();
		manager.waitPause();
	
		beginIndicator();
	
		var r = manager.autoloadPlayList.save(manager);
	
		if (handleSaveResult(context, r))
			main::sound.play("ok");
	
		endIndicator();
		manager.restart();
	
		clearList(context);
		manager.clear();
	
		changeCommandStateBySelection(context);
	}

	function commandToList(context)
	{
		if (selection_.size <= 0)
			return;
	
		var listmanager = (submanager == nil) ? manager : submanager;
		listmanager.requestPause();
	
		addPlayList(context, playlist);
	
		var r = listmanager.autoloadPlayListResult;
		print("autoload result = %{r}\n");
	
		if (r != "OK")
		{
			print "new play list!\n";

			var not_create = true;
			var invalidlist = (r == "INVALID_FILE");
			
			var mes = invalidlist
				? "broken playlist slot n create?"
				: "no playlist slot n create?";
			
			var slot = currentSlot();
			
			if (openMcDialog(context, 1, context.translate(ReplayTheaterRoot, mes).format(slot + 1)))
			{
				listmanager.waitPause();
			
				var file = listmanager.autoloadPlayList;
				if (file != nil)
				{
					r = saveVariousDataImpl(
						context,
						listmanager,
						"replaylist",
						slot,
						file.size,
						file,
						file
					);
					print("save result = %{r}\n");
					manager.clear();
					not_create = false;
				}
			}

			if (not_create)
			{
				playlist.clear();
			}
		}
		else
		{
			print("save play list");
			
			listmanager.waitPause();
			beginIndicator();
			
			r = listmanager.autoloadPlayList.save(listmanager);
			if (handleSaveResult(context, r))
				main::sound.play("ok");
			
			endIndicator();
		}

		clearSelection(getList());
		changeCommandStateBySelection(context);
		listmanager.restart();
		getList().postRedraw();
	}

	function commandPlayMode(context)
	{
		print("play mode change.");
		if (main::game.option.replay_play_mode == "SHUFFLE")
			main::game.option.replay_play_mode = "STRAIGHT";
		else
			main::game.option.replay_play_mode = "SHUFFLE";
	
		main::game.demonstration.resetPlayListCounter();
		reflectPlayMode();
	}
	
	function commandOption(context)
	{
		print("option!");
		var slot = currentSlot();
		OptionReplayDialog::open(context);
	
		if (slot != currentSlot())
			init(context);
	}

	function commandExit(context)
	{
		print("exit");
		exit(context);
	}

	function initCommands(context)
	{
		var coms = nil;
		switch(selectFolder_)
		{
			case 0:
			default:
				coms = [
					["Play", commandPlay, 1]
				];
				break;

			case 1:
				coms = [
					["Play", commandPlay, 1],
					["ToListMov", commandToList, 2],
					["Trash", commandTrash, 2],
					["Rename", commandRename, 1],
#ifdef GT4O_US_BETA
					["USBSave", commandUSBReplaySave, 1],
					["USBLoad", commandUSBReplayLoadAndMCSave, 0]
#endif
				];
				break;

			case 2:
				coms = [
					["Play", commandPlayList, 3],
					["Trash", commandTrashAlias, 2],
					["Dot", nil],
					["PlayMode", commandPlayMode, 0]
				];
				
				Template::Commands::PlayMode.active = (main::game.option.replay_play_mode == "SHUFFLE");
				break;

		}
		initCommandCommon(context, coms);
	}


	function reflectPlayMode()
	{
		var vbox = getCommandVBox();
		vbox["PlayMode"].active = (main::game.option.replay_play_mode == "SHUFFLE");
	}
	
	function initList(context)
	{
		initListCommon(context, hidden::ReplayItem);
	}

	function setupWidget(context, i, w)
	{
		if (selectFolder_ == 1)
		{
			var f = getFile(i);
	
			if (f != nil)
			{
				w["ListCheck"].visible = true;
				w["ListCheck"].active = (playlist.search(f) >= 0);
			}
		}
	
		return setupWidgetReplay(context, i, w);
	}

}