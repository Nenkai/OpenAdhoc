

//---------------------------------------------------------------------------------------
// GameOption.ad
//
// Creates the save profile config entity
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module GameOption
{
    function clearInitializer()
    {
        undef CreateStructure;
        undef Initialize;
        undef DefineMethod;
        undef DeclareControllers;
        undef clearInitializer;
    }

    function CreateStructure()
    {
        var st = STStructure("Impl");
        GameOption.defineModule(st);

        st.define("extra_language", STByte());
        st.define("extra_language_done", STByte());
        st.define("need_language_select", STByte());

        // Units
        st.define("unit_velocity", STByte());
        st.define("unit_power", STByte());
        st.define("unit_torque", STByte());
        st.define("unit_temperature", STByte());

        st.define("timeout_count_to_topmenu", STInt());


        st.define("special_arcade_tuner", STInt());
        st.define("arcade_skip_to_favorite", STByte());
        st.define("opening_after_autoload", STByte());
        st.define("save_full_replay", STByte());
        st.define("demo_movie_interval", STByte());
        st.define("demo_returning_to_menu_interval", STByte());
        st.define("menu_inactive_pad_mode", STByte());
        st.define("demo_ranker_replay_mode", STByte());
        st.define("auto_demo_mode", STByte());
        st.define("auto_save", STByte());
        st.define("autodemo_start_interval", STInt());
        st.define("autodemo_time_limit", STInt());
        st.define("autodemo_time_limit_max", STInt());
        st.define("open_special_option", STByte());
        st.define("open_config_stereogram", STByte());

        // Kiosk params
        st.define("kiosk_mode", STByte());
        st.define("kiosk_limit_tuner", STInt());
        st.define("kiosk_limit_car", STByte());
        st.define("kiosk_limit_course", STByte());
        st.define("kiosk_limit_enemy", STByte());
        st.define("kiosk_limit_democar", STByte());
        st.define("kiosk_limit_democourse", STByte());
        st.define("kiosk_limit_car_list", STArray(STUInt(), 100));
        st.define("kiosk_limit_enemy_list", STArray(STUInt(), 100));
        st.define("kiosk_limit_course_list", STArray(STUInt(), 100));
        st.define("kiosk_limit_democar_list", STArray(STUInt(), 100));
        st.define("kiosk_limit_democourse_list", STArray(STUInt(), 100));
        st.define("kiosk_enemy_pp_range", STInt());
        st.define("kiosk_enemy_pp_range_min", STInt());

        // Arcade user settings
        st.define("arcade_laps", STInt());
        st.define("arcade_tire_damage", STByte());
        st.define("arcade_time_limit", STInt());
        st.define("arcade_entry_limit", STByte());
        st.define("arcade_ai_roughness", STInt());
        st.define("arcade_enable_damage", STByte());
        st.define("arcade_demo_mode", STByte());
        st.define("arcade_ai_skill_easy", STInt());
        st.define("arcade_ai_skill_normal", STInt());
        st.define("arcade_ai_skill_hard", STInt());

        st.define("professional_control_1p", STByte());
        st.define("professional_control_2p", STByte());
        st.define("special_driver_model_1p", STByte());
        st.define("special_driver_model_2p", STByte());
        st.define("special_guest", STByte());
        st.define("special_guest_name", STString(64));
        st.define("special_guest_region", STString(10));
        st.define("penalty_type", STByte());
        st.define("strict_judgment", STByte());
        st.define("display_license_bestline", STByte());
        st.define("race_display_layout", STByte());
        st.define("play_view_1p", STByte());
        st.define("play_view_2p", STByte());
        st.define("replay_mode", STByte());
        st.define("full_quality_replay", STByte());

        st.define("race_map_view_mode", STByte());
        st.define("race_ghost_type", STByte());

        st.define("racedisplay_view_mode", STByte());

        // Display modes
        st.define("carmeter_disp_mode", STByte());
        st.define("suggested_disp_mode", STByte());
        st.define("tireload_disp_mode", STByte());
        st.define("times_disp_mode", STByte());
        st.define("racername_disp_mode", STByte());
        st.define("replayinfo_disp_mode", STByte());
        st.define("blindside_disp_mode", STByte());
        st.define("driver_name_disp_mode", STByte());
        st.define("racer_list_car", STByte());
        st.define("gap_mode", STByte());

        st.define("edit_course_data_id", STLong());

        st.define("button_navigation_disp_mode", STByte());

        // UI Colors
        st.define("ring_color_index", STByte());
        st.define("meter_color_index", STByte());
        st.define("dial_color_index", STByte());

        // Input configs
        st.define("vibration_1p", STByte());
        st.define("vibration_2p", STByte());
        st.define("key_config", STObject(gtengine::MController));
        st.define("default_sixaxis", STObject(System::Map));
        st.define("default_leopard", STObject(System::Map));
        st.define("default_tigar", STObject(System::Map));
        st.define("default_cheetah", STObject(System::Map));
        st.define("default_cougar", STObject(System::Map));
        st.define("default_jaguar", STObject(System::Map));
        st.define("default_trs", STObject(System::Map));
        st.define("default_panther", STObject(System::Map));
        st.define("default_uncia", STObject(System::Map));
        st.define("default_t300rs", STObject(System::Map));

        // Assists
        st.define("active_steering_1p", STByte());
        st.define("active_steering_2p", STByte());
        st.define("steering_assist_type_1p", STByte());
        st.define("steering_assist_type_2p", STByte());
        st.define("FFB_assist_1p", STByte());
        st.define("FFB_assist_2p", STByte());
        st.define("FFB_level_1p", STByte());
        st.define("FFB_level_2p", STByte());
        st.define("FFB_rise_1p", STByte());
        st.define("FFB_rise_2p", STByte());

        // Volumes
        st.define("menu_bgm_volume", STShort());
        st.define("menu_se_volume", STShort());
        st.define("race_bgm_volume", STShort());
        st.define("race_se_volume", STShort());
        st.define("replay_bgm_volume", STShort());
        st.define("replay_se_volume", STShort());
        st.define("user_bgm_volume", STShort());
        st.define("slide_bgm_volume", STShort());
        st.define("menu_bgm", STByte());
        st.define("menu_se", STByte());
        st.define("race_bgm", STByte());
        st.define("race_se", STByte());
        st.define("replay_bgm", STByte());
        st.define("replay_se", STByte());
        st.define("bgm_upmix_enable", STByte());
        st.define("speaker_layout", STByte());
        st.define("speaker_bits", STShort());
        st.define("speaker_angles", STArray(STShort(), 8));
        st.define("sound_dynamic_range", STByte());
        st.define("loudness_correct", STByte());
        st.define("race_sound_position", STByte());
        st.define("sysbgm_use", STArray(STByte(), 8));
        st.define("sysbgm_valid", STArray(STByte(), 8));
        st.define("sysbgm_context", STArray(STArray(STByte(), main::pdiext::MSystemBGM::getContextSize()), 8));
        
        // Screen settings
        st.define("screen_brightness", STByte());
        st.define("screen_sharpness", STByte());
        st.define("display_margin_sd", STByte());
        st.define("display_margin_sd_adjust_done", STByte());
        st.define("display_margin_hd", STByte());
        st.define("display_margin_hd_adjust_done", STByte());

        // Misc
        st.define("gt_hifi", STByte());
        st.define("temporal_aa", STByte());
        st.define("extra_wide", STByte());
        st.define("image_quality", STByte());
        st.define("enableHMD", STByte());

        st.define("photo_avatar_visible", STByte());

        // Slideshow settings
        st.define("slideshow_style", STByte());
        st.define("slideshow_interval", STFloat());
        st.define("slideshow_transition", STFloat());
        st.define("slideshow_imagetype", STByte());
        st.define("slideshow_bgm", STByte());
        st.define("slideshow_repeat", STByte());
        st.define("slideshow_shuffle", STByte());

        st.define("stop_install", STByte());

        // Server settings
        st.define("server_special_value", STString(64));
        st.define("asset_download_on_boot", STByte());
        st.define("fixed_private_room", STString(16));
        st.define("is_academy_final", STByte());
        st.define("academy_final_event_id", STInt());
        st.define("academy_final_is_host", STByte());
        st.define("academy_final_is_entry", STByte());
        st.define("academy_final_course_code", STLong());
        st.define("academy_final_car_code", STLong());
        st.define("academy_final_car_color", STByte());
        st.define("academy_final_car_grid", STByte());
        st.define("bot_on", STByte());
        st.define("bot_host", STByte());
        st.define("bot_name", STString(32));
        st.define("bot_type", STByte());
        st.define("bot_group", STString(32));
        st.define("bot_room", STString(32));
        st.define("bot_course", STLong());
        st.define("force_nickname", STString(32));
        st.define("bandwidth_up", STArray(STLong(), 3));
        st.define("bandwidth_down", STArray(STLong(), 3));
        st.define("lounge_show_hidden_config", STByte());
        st.define("lounge_demo", STByte());
        st.define("lounge_change_view", STByte());
        st.define("lounge_chat_disabled", STByte());
        st.define("lounge_keyboard_switcher", STByte());
        st.define("lounge_split_screen", STByte());
        st.define("lounge_auto_replay_save", STByte());

        // Multimonitor
        st.define("monitor_host", STByte());
        st.define("monitor_client", STByte());
        st.define("monitor_host_ip", STString(16));
        st.define("monitor_follow_host", STByte());
        st.define("monitor_preset", STByte());
        st.define("monitor_layout", STByte());
        st.define("monitor_layout_x", STByte());
        st.define("monitor_layout_y", STByte());
        st.define("monitor_index", STByte());
        st.define("monitor_round_xy", STByte());
        st.define("monitor_round_angle", STFloat());
        st.define("monitor_view_angle_xy", STByte());
        st.define("monitor_view_angle", STFloat());
        st.define("monitor_view_angle_scale", STFloat());
        st.define("monitor_aspect_ratio_x", STInt());
        st.define("monitor_aspect_ratio_y", STInt());
        st.define("monitor_aspect_ratio_enable", STByte());
        st.define("monitor_rotate", STArray(STFloat(), 3));
        st.define("monitor_translate", STArray(STFloat(), 3));
        st.define("monitor_height", STFloat());
        st.define("monitor_view_offset_x", STFloat());
        st.define("monitor_convergence", STFloat());
        st.define("monitor_frame_delay", STFloat());
        st.define("monitor_frame_delay_enable", STByte());
        st.define("monitor_border", STArray(STFloat(), 2));
        st.define("monitor_pixel_jitter_enable", STByte());
        st.define("monitor_flip_timing", STFloat());
        st.define("monitor_flip_timing_enable", STByte());
        st.define("monitor_race_display_enable", STByte());
        st.define("monitor_race_display_mode", STByte());
        st.define("monitor_use_parallax_view", STByte());
        st.define("monitor_parallax_change_mode", STInt());
        st.define("monitor_ui_depth", STFloat());
        st.define("monitor_auto_boot", STByte());

        // ?
        st.define("simulview_2p_battle", STByte());

        // ?
        st.define("visible_demo_carshow", STByte());
        st.define("visible_demo_opening", STByte());
        st.define("visible_demo_museum", STByte());
        st.define("visible_demo_race", STByte());
        st.define("visible_demo_replay", STByte());

        // gttop
        st.define("visible_icon_singleplay", STByte());
        st.define("visible_icon_lan_party", STByte());
        st.define("visible_icon_open_lobby", STByte());
        st.define("visible_icon_gps", STByte());
        st.define("invalid_moon", STByte());
        st.define("visible_icon_singlerace", STByte());
        st.define("visible_icon_timetrial", STByte());
        st.define("visible_icon_drifttrial", STByte());

        // Misc
        st.define("no_photo_license", STByte());

        st.define("demo_version_code", STString(16));

        st.define("academy_mode", STByte());

        st.define("rtext_debug", STByte());

        DefineMethod();

        return st;
    }

    function Initialize(instance)
    {
        instance.extra_language = pdistd::Language::SYSTEM;
        instance.extra_language_done = false;
        instance.need_language_select = false;
        instance.unit_velocity = main::pdiext::MUnit::GetCurrentUnitOfVelocity();
        instance.unit_power = main::pdiext::MUnit::GetCurrentUnitOfPower();
        instance.unit_torque = main::pdiext::MUnit::GetCurrentUnitOfTorque();
        instance.unit_temperature = main::pdiext::MUnit::GetCurrentUnitOfTemperature();
        instance.timeout_count_to_topmenu = 0;
        instance.opening_after_autoload = true;
        instance.demo_returning_to_menu_interval = 3;
        instance.autodemo_start_interval = 180;
        instance.autodemo_time_limit = 0;
        instance.autodemo_time_limit_max = 500;
        instance.open_special_option = false;
        instance.open_config_stereogram = false;
        instance.kiosk_mode = false;
        instance.kiosk_limit_tuner = gtengine::MSpecDB::NO_CODE;
        instance.kiosk_limit_car = false;
        instance.kiosk_limit_course = false;
        instance.kiosk_limit_enemy = false;
        instance.kiosk_limit_democar = false;
        instance.kiosk_limit_democourse = false;
        instance.kiosk_enemy_pp_range = 0;
        instance.kiosk_enemy_pp_range_min = 30;

        for (var i = 0; i < 100; i++)
            instance.kiosk_limit_car_list[i] = gtengine::MSpecDB::NO_CODE;
        for (var i = 0; i < 100; i++)
            instance.kiosk_limit_enemy_list[i] = gtengine::MSpecDB::NO_CODE;
        for (var i = 0; i < 100; i++)
            instance.kiosk_limit_course_list[i] = gtengine::MSpecDB::NO_CODE;
        for (var i = 0; i < 100; i++)
            instance.kiosk_limit_democar_list[i] = gtengine::MSpecDB::NO_CODE;
        for (var i = 0; i < 100; i++)
            instance.kiosk_limit_democourse_list[i] = gtengine::MSpecDB::NO_CODE;

        instance.arcade_laps = 2;
        instance.arcade_tire_damage = 0;
        instance.arcade_time_limit = 0;
        instance.arcade_entry_limit = 0;
        instance.arcade_ai_roughness = 0;
        instance.arcade_enable_damage = false;
        instance.arcade_demo_mode = false;
        instance.arcade_ai_skill_easy = 85;
        instance.arcade_ai_skill_normal = 90;
        instance.arcade_ai_skill_hard = 97;
        instance.special_driver_model_1p = 0;
        instance.special_driver_model_2p = 0;
        instance.special_guest = false;
        instance.special_guest_name = "";
        instance.special_guest_region = "";
        instance.race_display_layout = main::gtengine::RaceDisplayLayout::NORMAL;
        instance.play_view_1p = main::gtengine::CameraPlayView::NORMAL;
        instance.play_view_2p = main::gtengine::CameraPlayView::NORMAL;
        instance.replay_mode = 0;
        instance.full_quality_replay = 0;
        instance.race_map_view_mode = 1;
        instance.race_ghost_type = 0;
        instance.racedisplay_view_mode = 0;
        instance.carmeter_disp_mode = true;
        instance.suggested_disp_mode = true;
        instance.tireload_disp_mode = false;
        instance.times_disp_mode = true;
        instance.racername_disp_mode = true;
        instance.replayinfo_disp_mode = true;
        instance.blindside_disp_mode = true;
        instance.driver_name_disp_mode = true;
        instance.racer_list_car = false;
        instance.gap_mode = false;
        instance.edit_course_data_id = 0;
        instance.button_navigation_disp_mode = true;
        instance.ring_color_index = 0;
        instance.meter_color_index = 0;
        instance.dial_color_index = 0;
        instance.vibration_1p = true;
        instance.vibration_2p = true;
        instance.key_config = gtengine::MController();
       
        var default_config = gtengine::MController().getConfig();
        var play_config = default_config[main::gtengine::InputMode::PLAY_NORMAL];
        instance.default_sixaxis = play_config["SIXAXIS"];
        instance.default_leopard = play_config["LEOPARD"];
        instance.default_tigar = play_config["TIGAR"];
        instance.default_jaguar = play_config["JAGUAR"];
        instance.default_cheetah = play_config["CHEETAH"];
        instance.default_cougar = play_config["COUGAR"];
        instance.default_trs = play_config["TRS"];
        instance.default_panther = play_config["PANTHER"];
        instance.default_uncia = play_config["UNCIA"];
        instance.default_t300rs = play_config["T300RS"];

        instance.active_steering_1p = false;
        instance.active_steering_2p = false;
        instance.steering_assist_type_1p = 1;
        instance.steering_assist_type_2p = 1;
        instance.FFB_assist_1p = false;
        instance.FFB_assist_2p = false;
        instance.FFB_level_1p = 5;
        instance.FFB_level_2p = 5;
        instance.FFB_rise_1p = 8;
        instance.FFB_rise_2p = 8;
        instance.menu_bgm_volume = 100;
        instance.menu_se_volume = 100;
        instance.race_bgm_volume = 90;
        instance.race_se_volume = 90;
        instance.replay_bgm_volume = 90;
        instance.replay_se_volume = 90;
        instance.user_bgm_volume = 90;
        instance.slide_bgm_volume = 100;
        instance.menu_bgm = 1;
        instance.menu_se = 1;
        instance.race_bgm = 1;
        instance.race_se = 1;
        instance.replay_bgm = 1;
        instance.replay_se = 1;
        instance.bgm_upmix_enable = 1;
        instance.speaker_layout = 0;
        instance.speaker_bits = SpeakerBits::L_R;
        instance.speaker_angles[0] = -30;
        instance.speaker_angles[1] = 30;
        instance.speaker_angles[2] = 0;
        instance.speaker_angles[3] = -110;
        instance.speaker_angles[4] = 110;
        instance.speaker_angles[5] = -150;
        instance.speaker_angles[6] = 150;
        instance.speaker_angles[7] = -180;
        instance.sound_dynamic_range = 0;
        instance.loudness_correct = 0;
        instance.race_sound_position = -1;

        for (var i = 0; i < 8; i++)
        {
            instance.sysbgm_use[i] = 0;
            instance.sysbgm_valid[i] = 0;
        }

        instance.screen_brightness = 50;
        instance.screen_sharpness = 0;
        instance.display_margin_sd = 10;
        instance.display_margin_sd_adjust_done = false;
        instance.display_margin_hd = 10;
        instance.display_margin_hd_adjust_done = false;
        instance.gt_hifi = false;
        instance.temporal_aa = 1;
        instance.extra_wide = 0;
        instance.image_quality = 0;
        instance.enableHMD = 0;
        instance.photo_avatar_visible = false;
        instance.slideshow_style = 0;
        instance.slideshow_interval = 5f;
        instance.slideshow_transition = 1f;
        instance.slideshow_imagetype = 0;
        instance.slideshow_bgm = 1;
        instance.slideshow_repeat = 0;
        instance.slideshow_shuffle = 0;

        instance.stop_install = false;
        instance.server_special_value = "";
        instance.asset_download_on_boot = true;
        instance.fixed_private_room = "";
        instance.is_academy_final = false;
        instance.academy_final_event_id = 0;
        instance.academy_final_is_host = false;
        instance.academy_final_is_entry = false;
        instance.academy_final_course_code = gtengine::MSpecDB::NO_CODE;
        instance.academy_final_car_code = gtengine::MSpecDB::NO_CODE;
        instance.academy_final_car_color = 0;
        instance.academy_final_car_grid = 0;
        instance.bot_on = false;
        instance.bot_host = false;
        instance.bot_name = "";
        instance.bot_type = 0;
        instance.bot_group = "";
        instance.bot_room = "";
        instance.bot_course = gtengine::MSpecDB::NO_CODE;
        instance.force_nickname = "";
        
        for (var i = 0; i < 3; i++)
        {
            instance.bandwidth_up[i] = -1;
            instance.bandwidth_down[i] = -1;
        }

        instance.lounge_show_hidden_config = false;
        instance.lounge_demo = false;
        instance.lounge_change_view = false;
        instance.lounge_chat_disabled = false;
        instance.lounge_keyboard_switcher = false;
        instance.lounge_split_screen = false;
        instance.lounge_auto_replay_save = false;
        instance.monitor_host = false;
        instance.monitor_client = false;
        instance.monitor_host_ip = "";
        instance.monitor_follow_host = false;
        instance.monitor_preset = 0;
        instance.monitor_layout = 0;
        instance.monitor_layout_x = 1;
        instance.monitor_layout_y = 1;
        instance.monitor_index = 0;
        instance.monitor_round_xy = 0;
        instance.monitor_round_angle = 0f;
        instance.monitor_view_angle_xy = 1;
        instance.monitor_view_angle = 52f;
        instance.monitor_view_angle_scale = 1f;
        instance.monitor_aspect_ratio_x = 16;
        instance.monitor_aspect_ratio_y = 9;
        instance.monitor_aspect_ratio_enable = false;
        instance.monitor_rotate[0] = 0f;
        instance.monitor_rotate[1] = 0f;
        instance.monitor_rotate[2] = 0f;
        instance.monitor_translate[0] = 0f;
        instance.monitor_translate[1] = 0f;
        instance.monitor_translate[2] = 0f;
        instance.monitor_height = 0f;
        instance.monitor_view_offset_x = 0.03f;
        instance.monitor_convergence = 0f;
        instance.monitor_frame_delay = 0f;
        instance.monitor_frame_delay_enable = false;
        instance.monitor_border[0] = 0f;
        instance.monitor_border[1] = 0f;
        instance.monitor_pixel_jitter_enable = false;
        instance.monitor_flip_timing = 0.97f;
        instance.monitor_flip_timing_enable = false;
        instance.monitor_race_display_enable = 1;
        instance.monitor_race_display_mode = 1;
        instance.monitor_use_parallax_view = false;
        instance.monitor_parallax_change_mode = 7;
        instance.monitor_ui_depth = 0f;
        instance.monitor_auto_boot = 0;
        instance.simulview_2p_battle = 0;
        instance.visible_demo_carshow = true;
        instance.visible_demo_opening = true;
        instance.visible_demo_museum = true;
        instance.visible_demo_race = true;
        instance.visible_demo_replay = true;
        instance.visible_icon_singleplay = false;
        instance.visible_icon_lan_party = false;
        instance.visible_icon_open_lobby = false;
        instance.visible_icon_gps = false;
        instance.invalid_moon = false;
        instance.visible_icon_singlerace = false;
        instance.visible_icon_timetrial = false;
        instance.visible_icon_drifttrial = false;
        instance.demo_version_code = "";
        instance.academy_mode = false;
        instance.rtext_debug = false;
    }

    function DefineMethod()
    {
        module Impl
        {
            import __toplevel__::main;

            method apply()
            {   
                if (self.extra_language != pdistd::Language::SYSTEM)
                {
                    pdistd::SetLanguage(self.extra_language);
                    manager.rtext_manager.loadCommon("rtext/common");
                }

                main::pdiext::MUnit::SetUnitSystemByLanguage(pdistd::MLocale::getLanguage());

                main::pdiext::MUnit::SetUnitOfVelocity(self.unit_velocity);
                main::gtengine::MController::setVibration(0, self.vibration_1p);
                main::gtengine::MController::setVibration(1, self.vibration_1p); // BUG: I think this is supposed to be vibration_2p?
                main::gtengine::MController::setFFBassist(0, self.FFB_assist_1p);
                main::gtengine::MController::setFFBassist(1, self.FFB_assist_2p);
                main::gtengine::MController::setFFBlevel(0, self.FFB_level_1p);
                main::gtengine::MController::setFFBlevel(1, self.FFB_level_2p);
                main::gtengine::MController::setFFBrise(0, self.FFB_rise_1p);
                main::gtengine::MController::setFFBrise(1, self.FFB_rise_2p);

                main::ORG.replay_mode = self.replay_mode;
                main::ORG.full_quality_replay = self.full_quality_replay;

                SoundUtil::SetDynamicRangeOption(self.sound_dynamic_range);
                SoundUtil::SetSoundEnableOption(self.menu_bgm, self.menu_se, self.race_bgm,
                    self.race_se, self.replay_bgm, self.replay_se);
                SoundUtil::SetSoundVolumeOption(self.menu_bgm_volume, self.menu_se_volume, self.race_bgm_volume, self.race_se_volume,
                    self.replay_bgm_volume, self.replay_se_volume, self.user_bgm_volume);
                SoundUtil::SetRaceSoundPosition(self.race_sound_position);
                SoundUtil::SetBGMUpmixOption(true);
                SoundUtil::ApplySoundVolumeOption();
                SoundUtil::ApplySpeakerLayoutOption(self.speaker_bits);

                var exposure = (self.screen_brightness.toFloat() - 50f) / 50f;
                main::pdiext::MSystemConfiguration::SetMasterRenderExposure(exposure);
                
                var sdtv = main::pdiext::MSystemConfiguration::isSDTV();
                var scale = sdtv ? self.display_margin_sd : self.display_margin_hd;
                var margin = scale.toFloat() / 100f;
                main::pdiext::MSystemConfiguration::SetDisplayMargin(margin);
                
                if (pdiext::isQABuild())
                    ORG.enableHMD = true;
                else
                    ORG.enableHMD = self.enableHMD;
                main::ORG.gt_hifi = self.gt_hifi;
                main::ORG.extra_wide = self.extra_wide;
                
                var quality_define = [
                    [0, 1, 1], 
                    [0, 0, 0], 
                    [1, 1, 1]
                ];

                pdiext::MSystemConfiguration::SetScreenSharpness(quality_define[self.image_quality][0]);
                pdiext::MSystemConfiguration::SetTemporalAntialias(quality_define[self.image_quality][1] && self.temporal_aa);
                var a = ORG.getGameResolution();
                ORG.setGameResolution(a[0], a[1], a[2], quality_define[self.image_quality][2]);

                if (self.stop_install)
                    pdistd::SetFileSystemOptionInt64("/", "PreCopyFileSizeLimit", 0);
                else
                    pdistd::SetFileSystemOptionInt64("/", "PreCopyFileSizeLimit", -1);

                if (self.monitor_use_parallax_view)
                    self.monitor_use_parallax_view = pdiext::MSystemConfiguration::is3DTVAvailable();

                main::ORG.monitor_host = self.monitor_host;
                main::ORG.monitor_host_ip = self.monitor_host_ip;
                main::ORG.monitor_index = self.monitor_index;
                main::ORG.monitor_round_y = self.monitor_round_xy != 0;
                main::ORG.monitor_round_angle = self.monitor_round_angle;
                main::ORG.monitor_view_angle_y = self.monitor_view_angle_xy != 0;
                main::ORG.monitor_view_angle = self.monitor_view_angle;
                main::ORG.monitor_aspect_ratio_enable = self.monitor_aspect_ratio_enable;
                main::ORG.monitor_aspect_ratio = self.monitor_aspect_ratio_x.toFloat() / self.monitor_aspect_ratio_y.toFloat();
                main::ORG.monitor_view_offset_x = self.monitor_view_offset_x;
                main::ORG.monitor_convergence = self.monitor_convergence;
                main::ORG.monitor_frame_delay = self.monitor_frame_delay;
                main::ORG.monitor_frame_delay_enable = self.monitor_frame_delay_enable;
                main::ORG.monitor_border = [self.monitor_border[0], self.monitor_border[1]];
                main::ORG.monitor_pixel_jitter_enable = self.monitor_pixel_jitter_enable;
                main::ORG.monitor_race_display_enable = self.monitor_race_display_enable;
                main::ORG.monitor_race_display_mode = self.monitor_race_display_mode;
                main::ORG.monitor_follow_host = self.monitor_follow_host;

                main::ORG.setUseParallaxView(self.monitor_use_parallax_view.toInt());
                main::ORG.setParallaxChangeMode(self.monitor_parallax_change_mode.toInt());
                ORG.setMonitorLayout(self.monitor_layout_x, self.monitor_layout_y);

                ORG.monitor_view_angle_scale = self.monitor_view_angle_scale;
                ORG.onGameOptionApply();
                ORG.setLineGhost(self.race_ghost_type != 0);

                if (self.monitor_host || self.monitor_client)
                {
                    if (main::MMmDNSConfig == nil)
                    {
                        ServicePublisher.initialize();
                        main::MMmDNSConfig = ServicePublisher.createServiceConfig("MultiDisplay");
                    }
                }

                if (self.monitor_host)
                {
                    if (!main::MMmDNSPublish)
                    {
                        main::MMmDNSPublish = ServicePublisher.publish(main::MMmDNSConfig);

                    }
                }
                else if (main::MMmDNSPublish)
                {
                    main::MMmDNSPublish = false;
                    var res = ServicePublisher.remove(main::MMmDNSConfig);
                }

                pdiext::MSystemConfiguration::SetFlipTiming(self.monitor_flip_timing_enable ? self.monitor_flip_timing : 0f);
                main::manager.rtext_manager.debug = self.rtext_debug.toBool();
            }

            method _hasLimitedSomething(limit_list)
            {
                for (var i = 0; i < limit_list.size; i++)
                {
                    if (limit_list[i] != gtengine::MSpecDB::NO_CODE)
                        return true;
                }

                return false;
            }

            method _getLimitedSomething(limit_list)
            {
                var result = [];
                for (var i = 0; i < limit_list.size; i++)
                {
                    if (limit_list[i] != gtengine::MSpecDB::NO_CODE)
                        result.push(limit_list[i]);
                }

                return result;
            }

            method _copyList(src, dest)
            {
                for (var i = 0; i < dest.size; i++)
                    dest[i] = i < src.size ? src[i] : main::gtengine::MSpecDB::NO_CODE;
            }

            method _setLimitCarList(limit_list, car_list)
            {
                var code_list = [];
                foreach (var car in car_list)
                {
                    var code = gtengine::MSpecDB::getCarCode(car);
                    if (code != gtengine::MSpecDB::NO_CODE)
                        code_list.push(code);
                }

                _copyList(code_list, limit_list);
            }

            method _setLimitCourseList(limit_list, course_list)
            {
                var code_list = [];
                foreach (var car in course_list)
                {
                    var code = gtengine::MSpecDB::getCourseCode(car);
                    if (code != gtengine::MSpecDB::NO_CODE)
                        code_list.push(code);
                }

                _copyList(code_list, limit_list);
            }

            method hasLimitedCar()
            {
                return _hasLimitedSomething(self.kiosk_limit_car_list);
            }

            method setLimitCars(list)
            {
                return _setLimitCarList(self.kiosk_limit_car_list, list);
            }

            method getLimitedCars()
            {
                return _getLimitedSomething(self.kiosk_limit_car_list);
            }

            method hasLimitedDemoCar()
            {
                return _hasLimitedSomething(self.kiosk_limit_democar_list);
            }

            method setLimitDemoCars(list)
            {
                return _setLimitCarList(self.kiosk_limit_democar_list, list);
            }

            method getLimitedDemoCars()
            {
                return _getLimitedSomething(self.kiosk_limit_democar_list);
            }

            method hasLimitedEnemy()
            {
                return _hasLimitedSomething(self.kiosk_limit_enemy_list);
            }

            method setLimitEnemiesCars(list)
            {
                return _setLimitCarList(self.kiosk_limit_enemy_list, list);
            }

            method getLimitedEnemies()
            {
                return _getLimitedSomething(self.kiosk_limit_enemy_list);
            }

            method hasLimitedCourse()
            {
                return _hasLimitedSomething(self.kiosk_limit_course_list);
            }

            method setLimitCourses(list)
            {
                return _setLimitCourseList(self.kiosk_limit_course_list, list);
            }

            method getLimitedCourses()
            {
                return _getLimitedSomething(self.kiosk_limit_course_list);
            }

            method hasLimitedDemoCourse()
            {
                return _hasLimitedSomething(self.kiosk_limit_course_list); // BUG: Should be 'kiosk_limit_democourse_list'?
            }

            method setLimitDemoCourses(list)
            {
                return _setLimitCourseList(self.kiosk_limit_democourse_list, list);
            }

            method getLimitedDemoCourses()
            {
                return _getLimitedSomething(self.kiosk_limit_democourse_list);
            }

            method isLimitedTuner(tuner)
            {
                var tuner_code = tuner.isInstanceOf(String) ? SPECDB.executeQuery1R1C("SELECT ID FROM TUNER WHERE TunerString=?", [tuner]) : tuner;
                return tuner_code == self.kiosk_limit_tuner;
            }

            method isLimitedCourse(course)
            {
                for (var i = 0; i < 100; i++)
                {
                    if (self.kiosk_limit_course_list[i] == course)
                        return true;
                }

                return false;
            }

            method setSystemBGMSetting(type, enable, sysbgm_context)
            {
                self.sysbgm_use[type] = enable;
                if (sysbgm_context != nil)
                {
                    self.sysbgm_context[type] = sysbgm_context;
                    self.sysbgm_valid[type] = true;
                }
            }

            method getSystemBGMSetting(type)
            {
                return [self.sysbgm_use[type] && self.sysbgm_valid[type], self.sysbgm_context[type], self.sysbgm_valid[type]];
            }

            method addBandwidthRecord(args)
            {
                if (args == nil)
                    return;

                |var up, var down| = args;
                if (up > 0 && down > 0)
                {
                    if (up == self.bandwidth_up[0] && down == self.bandwidth_down[0])
                        return;

                    for (var i = 3 - 1; i > 0; i--)
                    {
                        self.bandwidth_up[i] = self.bandwidth_up[i - 1];
                        self.bandwidth_down[i] = self.bandwidth_down[i - 1];
                    }

                    self.bandwidth_up[0] = up;
                    self.bandwidth_down[0] = down;
                }
            }

            method getAverageBandwidth()
            {
                var up = 0;
                var down = 0;
                var count = 0;

                for (var i = 0; i < 3; i++)
                {
                    if (self.bandwidth_up[i] > 0)
                    {
                        up += self.bandwidth_up[i];
                        down += self.bandwidth_down[i];
                        ++count;
                    }
                }

                if (count > 0)
                {
                    up /= count;
                    down /= count;
                }    
                
                return [up, down];
            }

            method hasAmpleBandwidthData()
            {
                for (var i = 0; i < 3; i++)
                {
                    if (self.bandwidth_up[i] < 1)
                        return false;
                }

                return true;
            }
        }
    }
}