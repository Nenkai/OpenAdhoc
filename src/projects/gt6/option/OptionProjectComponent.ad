module OptionProjectComponent::DialogParts::SettingFrame
{
    SCALE_WIDGET_SDTV(ToolTip::tip, 2.6);

    attribute scrolled_body_h;

    method appear(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = false;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method hide(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = true;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method onFinalize(context)
    {
        self.actor = nil;
    }

    method adjust_scrolled_body(scrolled_body_max_h)
    {
        if (scrolled_body_max_h == nil)
            scrolled_body_max_h = self.scrolled_body_h;

        Pane::ScrolledBody::clip.minimum_height = self.scrolled_body_h;
        Pane::ScrolledBody::clip.h = self.scrolled_body_h;

        var clip = Pane::ScrolledBody::clip;
        var space = clip.space;
        clip.updateGeometry();

        var clip_h = space.inner_pad_top + space.inner_pad_bottom;
        var scrollable = false;

        for (var w = space.first; w != nil; w = w.next)
        {
            if (!w.visible || !w.is_enable)
                continue;

            if (clip_h + w.h > scrolled_body_max_h)
                break;

            clip_h += w.h;
        }

        space.x = 0.0;
        space.y = 0.0;

        space.w = clip.w;
        space.minimum_width = clip.w;
        
        space.h = clip_h;
        space.minimum_height = clip.h;

        clip.h = clip_h;
        clip.minimum_height = clip_h;
    }

    method onRealize(context)
    {
        self.scrolled_body_h = Pane::ScrolledBody::clip.h;
    }

    method onInitialize(context)
    {
        var adj = main::menu::MAdjustment();
        Pane::ScrolledBody::VScrollbar.adjustment = adj;
        Pane::ScrolledBody::clip.v_adjustment = adj;
    }
}

module OptionProjectComponent::DialogParts::SettingFrame::Pane::Head
{
    SCALE_WIDGET_SDTV(label, 2.4);

    method setText(text)
    {
        Close::Circle::label.text = text;
        Close::Circle_i::label.text = text;
        Close::Cross::label.text = text;
        Close::Cross_i::label.text = text;
    }

    method onInitialize(context)
    {
        if (pdiext::MSystemConfiguration::GetEnterButtonAssign() == "circle")
        {
            Close::Circle.visible = false;
            Close::Circle_i.visible = false;
            Close::Cross.visible = true;
            Close::Cross_i.visible = true;
        }
        else
        {
            Close::Circle.visible = true;
            Close::Circle_i.visible = true;
            Close::Cross.visible = false;
            Close::Cross_i.visible = false;
        }
    }
}

module OptionProjectComponent::DialogParts::SettingFrame2
{
    SCALE_WIDGET_SDTV(ToolTip::tip, 2.6);

    attribute scrolled_body_h;

    method appear(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = false;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method hide(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = true;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method onFinalize(context)
    {
        self.actor = nil;
    }

    method adjust_scrolled_body(scrolled_body_max_h)
    {
        if (scrolled_body_max_h == nil)
            scrolled_body_max_h = self.scrolled_body_h;

        Pane::Right::ScrolledBody::clip.minimum_height = self.scrolled_body_h;
        Pane::Right::ScrolledBody::clip.h = self.scrolled_body_h;

        var clip = Pane::Right::ScrolledBody::clip;
        var space = clip.space;
        clip.updateGeometry();

        var clip_h = space.inner_pad_top + space.inner_pad_bottom;
        var scrollable = false;

        for (var w = space.first; w != nil; w = w.next)
        {
            if (!w.visible || !w.is_enable)
                continue;

            if (clip_h + w.h > scrolled_body_max_h)
                break;

            clip_h += w.h;
        }

        space.x = 0.0;
        space.y = 0.0;

        space.w = clip.w;
        space.minimum_width = clip.w;
        
        space.h = clip_h;
        space.minimum_height = clip.h;

        clip.h = clip_h;
        clip.minimum_height = clip_h;
    }

    method onRealize(context)
    {
        self.scrolled_body_h = Pane::Right::ScrolledBody::clip.h;
    }

    method onInitialize(context)
    {
        var adj = main::menu::MAdjustment();
        Pane::Right::ScrolledBody::VScrollbar.adjustment = adj;
        Pane::Right::ScrolledBody::clip.v_adjustment = adj;
    }
}

module OptionProjectComponent::DialogParts::SettingFrame2::Pane::Head
{
    SCALE_WIDGET_SDTV(label, 2.4);

    method setText(text)
    {
        Close::Circle::label.text = text;
        Close::Circle_i::label.text = text;
        Close::Cross::label.text = text;
        Close::Cross_i::label.text = text;
    }

    method onInitialize(context)
    {
        if (pdiext::MSystemConfiguration::GetEnterButtonAssign() == "circle")
        {
            Close::Circle.visible = false;
            Close::Circle_i.visible = false;
            Close::Cross.visible = true;
            Close::Cross_i.visible = true;
        }
        else
        {
            Close::Circle.visible = true;
            Close::Circle_i.visible = true;
            Close::Cross.visible = false;
            Close::Cross_i.visible = false;
        }
    }
}

module OptionProjectComponent::DialogParts::Button
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module OptionProjectComponent::DialogParts::OK
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module OptionProjectComponent::DialogParts::Cancel
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module OptionProjectComponent::DialogParts::CheckButton
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    method onActivate(context)
    {
        if (self.is_enable && !self.insensitive)
        {
            main::sound.play("checkbox");
            self.active = !self.active;

            if (self['onValueChanged'] != nil)
                self.onValueChanged(context);
        }

        return EVENTRESULT_CONTINUE;
    }
}

module OptionProjectComponent::DialogParts::Label
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module OptionProjectComponent::DialogParts::LabelButton
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module OptionProjectComponent::DialogParts::LabelButton::vbox::Button
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module OptionProjectComponent::DialogParts::Pulldown
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module OptionProjectComponent::DialogParts::Pulldown::OptionMenu
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    attribute decide_callback;

    method onRealize(manager)
    {
        self.copy_selected_item = false;
        self.popup.visible = true;
        self.decide_callback = nil;
    }

    method pulldownValueChanged(context)
    {
        var w = self.getItem(self.index);
        if (w != nil)
        {
            var w2 = self;
            w2.label.text = w.label.text;
            w2.label.abbreviate = true;
            if (w2.label_i != nil)
            {
                w2.label_i.text = w.label.text;
                w2.label_i.abbreviate = true;
            }
        }
    }

    method onInitialize(context)
    {
        self.pulldownValueChanged(context);
    }

    method onFinalize(context)
    {
        self.decide_callback = nil;
    }

    method onValueChanged(context)
    {
        self.pulldownValueChanged(context);
        if (self.decide_callback != nil)
            decide_callback(context, self.index, self);
    }
}

module OptionProjectComponent::DialogParts::PulldownItem
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module OptionProjectComponent::DialogParts::ON
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module OptionProjectComponent::DialogParts::OFF
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module OptionProjectComponent::DialogParts::PackedButton
{
    SCALE_WIDGET_SDTV(OpenClose::label, 2.4);

    attribute is_packed;

    method pack()
    {
        self.PackingSpace.visible = false;
        self.is_packed = true;
        OpenClose::Icon_opened.visible = false;
        OpenClose::Icon_closed.visible = true;
        OpenClose::arrow_opened.visible = false;
        OpenClose::arrow_closed.visible = true;
    }

    method unpack()
    {
        self.PackingSpace.visible = true;
        self.is_packed = false;
        OpenClose::Icon_opened.visible = true;
        OpenClose::Icon_closed.visible = false;
        OpenClose::arrow_opened.visible = true;
        OpenClose::arrow_closed.visible = false;
    }

    method onInitialize(context)
    {
        self.pack();
    }

    module OpenClose
    {
        method onActivate(context)
        {
            if (self.parent.is_packed)
                self.parent.unpack();
            else
                self.parent.pack();
            return EVENTRESULT_FILTER;
        }
    }
}

module OptionProjectComponent::DialogParts::Slider
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_unit, 2.4);
}

module OptionProjectComponent::DialogParts::Slider::slider
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_unit, 2.4);
    SCALE_WIDGET_SDTV(popup::Max::value, 2.4);
    SCALE_WIDGET_SDTV(popup::Max::label, 2.4);
    SCALE_WIDGET_SDTV(popup::Min::value, 2.4);
    SCALE_WIDGET_SDTV(popup::Min::label, 2.4);

    attribute zero_text;
    attribute unit_text;
    attribute min_text;
    attribute max_text;
    attribute decide_callback;
    attribute format_callback;
    attribute is_zero_callback;
    attribute arg;
    attribute initialized;
    attribute format_string;
    attribute quantizer;
    attribute step_thr;

    method onRealize(manager)
    {
        self.initialized = true;
        self.zero_text = nil;
        self.unit_text = nil;
        self.min_text = nil;
        self.max_text = nil;
        self.decide_callback = nil;
        self.format_callback = nil;
        self.is_zero_callback = nil;
        self.format_string = nil;
        self.quantizer = 1.0;
        self.step_thr = nil;
        
        var pup = self['popup'];
        pup.visible = true;
        pup.minimum_width = self.w;
        pup.w = self.w;
        pup.x = 0.0;
    }

    method onInitialize(context)
    {
        self.setup(context);
        self.initialized = true;
    }

    method onFinalize(context)
    {
        self.initialized = false;
        self.zero_text = nil;
        self.unit_text = nil;
        self.min_text = nil;
        self.max_text = nil;
        self.decide_callback = nil;
        self.format_callback = nil;
        self.is_zero_callback = nil;
        self.format_string = nil;
        self.step_thr = nil;
    }

    method onStepChanged(context)
    {
        if (self.step_thr != nil)
            self.on_step_changed();
    }

    method on_step_changed()
    {
        var x = self.value - self.repeat_start;
        x /= 4.0;

        if (x < 0.0)
            x = -x;

        if (x < 1.0)
            x = 1.0;

        if (x > self.step_thr)
            x = self.step_thr;

        self.step = x;
    }

    method onPopupOpen(context)
    {
        self.sliderPopupOpen(context);
    }

    method onPopupClosed(context)
    {
        self.sliderPopupClosed(context);
    }

    method onValueChanged(context)
    {
        self.sliderValueChanged(context);
    }

    function default_value_format_function(context, value, slider)
    {
        if (slider.zero_text != nil && slider.is_zero_callback(value, slider))
            return slider.zero_text;

        var q = Math::round(value * slider.quantizer);
        return slider.format_string.format(q);
    }

    function default_is_zero_function(value, slider)
    {
        var q = Math::round(value * slider.quantizer);
        return q == 0.0;
    }

    method setup(context)
    {
        if (self.format_callback == nil)
            self.format_callback = default_value_format_function;

        if (self.is_zero_callback == nil)
            self.is_zero_callback = default_is_zero_function;

        var stepscale = Math::log10(self.step);
        var precision = stepscale >= 0.0 ? 0 : Math::ceil(-stepscale).toInt();
        self.quantizer = 10.0 ** precision;

        if (precision <= 0)
            self.format_string = "%d";
        else
            self.format_string = "%." + precision.toString() + "t";

        if (self.unit_text != nil)
            self.parent.label_unit.text = unit_text;

        var pup = self['popup'];
        pup.Min::value.text = call_format_func(context, self.min);
        pup.Max::value.text = call_format_func(context, self.max);

        if (self.min_text != nil)
            pup.Min::label.text = self.min_text;

        if (self.max_text != nil)
            pup.Max::label.text = self.max_text;

        self.reflect(context);
    }

    method reflect(context)
    {
        var text;
        if (self.zero_text != nil && self.is_zero_callback(value, self))
            text = self.zero_text;
        else
            text = call_format_func(context, self.value);

        self.label.text = text;
        if (self.defined('label_i'))
            self.label_i.text = text;
    }

    method call_format_func(context, value)
    {
        return self.format_callback(context, value, self);
    }

    method sliderPopupOpen(context)
    {
        self.sliderValueChanged(context);
    }

    method sliderPopupClosed(context)
    {
        if (!self.initialized)
            return;

        if (!self.cancel)
        {
            self.reflect(context);
            if (self.decide_callback != nil)
                self.decide_callback(context, self.value, self);
        }
    }

    method sliderValueChanged(context)
    {
        if (!self.initialized)
            return;

        var pup = self['popup'];
        var text = call_format_func(context, self.value);
        self.label.text = text;
        if (self.defined('label_i'))
            self.label_i.text = text;
    }
}

module OptionProjectComponent::DialogParts::CheckBox
{
    SCALE_WIDGET_SDTV(label, 2.4);

    attribute is_checkbox = true;
}

module OptionProjectComponent::DialogParts::CheckBox::vbox::CheckButton
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    method onActivate(context)
    {
        if (self.is_enable && !self.insensitive)
        {
            main::sound.play("checkbox");
            self.active = !self.active;

            if (self['onValueChanged'] != nil)
                self.onValueChanged(context);
        }

        return EVENTRESULT_CONTINUE;
    }
}

module OptionProjectComponent::DialogParts::RadioBox
{
    SCALE_WIDGET_SDTV(label, 2.4);

    attribute is_radiobox = true;
    attribute selected_index;

    method onInitialize(context)
    {
        for (var i = 0; i < self.vbox.countChild(); i++)
        {
            var w = self.vbox.getChild(i);
            w.index = i;
        }
    }

    method setup(name_and_value_list)
    {
        foreach (|var name, var value| in name_and_value_list)
        {
            self.vbox[name].value = value;
        }
    }

    method setSelectedIndex(index)
    {
        self._change_index(index);
    }

    method setSelectedButton(name)
    {
        var w = self.vbox[name];
        self._change_index(w.index);
    }

    method setSelectedValue(value)
    {
        for (var w = self.vbox.first; w != nil; w = w.next)
        {
            if (w.value == value)
            {
                self._change_index(w.index);
                break;
            }
        }
    }

    method getValue(index)
    {
        if (index == nil)
            index = self.selected_index;

        var w = self.vbox.getChild(index);
        return w.value;
    }

    method getRadioButton(index)
    {
        if (index == nil)
            index = self.selected_index;

        var w = self.vbox.getChild(index);
        return w;
    }

    method _change_index(next_index)
    {
        self.selected_index = next_index;

        for (var i = 0; i < self.vbox.countChild(); i++)
        {
            var w = self.vbox.getChild(i);
            w.active = self.selected_index == i;
        }
    }
}

module OptionProjectComponent::DialogParts::RadioBox::vbox::RadioButton
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    attribute index;
    attribute value;

    method setup(rvalue)
    {
        if (value != nil)
            self.value = value;
    }

    method onActivate(context)
    {
        main::sound.play("checkbox");
        var vbox = self.parent;

        if (vbox != nil)
        {
            var radiobox = vbox.parent;
            if (radiobox != nil)
            {
                radiobox._change_index(self.index);
                if (radiobox['is_radiobox'] && radiobox['onValueChanged'] != nil)
                    radiobox.onValueChanged(context);
            }
        }

        return EVENTRESULT_CONTINUE;
    }
}

module OptionProjectComponent::DialogParts::TextBox
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module OptionProjectComponent::DialogParts::TextBox::Text::ReadMore
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(Text::label, 2.4);
    SCALE_WIDGET_SDTV(Text::ReadMore::label, 2.4);
    SCALE_WIDGET_SDTV(Text::ReadMore::label_i, 2.4);

    method onActivate(context)
    {
        DialogUtil::readComponentTextBox(context, self.TextBox);
        return EVENTRESULT_FILTER;
    }
}

module OptionProjectComponent::DialogParts::InputTextBox
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module OptionProjectComponent::DialogParts::InputTextBox::Text::input
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(Text::label, 2.4);
    SCALE_WIDGET_SDTV(Text::InputText::label, 2.4);
    SCALE_WIDGET_SDTV(Text::InputText::label_i, 2.4);

    method onKeyPress(context)
    {
        if (self.Text.insensitive)
            return EVENTRESULT_FILTER;
        return EVENTRESULT_CONTINUE;
    }

    method onFocusEnter(context)
    {
        context.target_widget = InputText::Icon;
        return EVENTRESULT_FILTER;
    }
}

module OptionProjectComponent::DialogParts::GroupHeader
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module OptionProjectComponent::DialogParts::MultiSelect
{
    attribute texts = [];
    attribute values = [];
    attribute selected_indexes = [];
    attribute text_all;
    attribute localize_page;
    attribute limit_count;
    attribute need_count;

    SCALE_WIDGET_SDTV(label, 2.4);

    method setup(texts, values, text_all, localize_page, limit_count, need_count)
    {
        self.texts = texts != nil ? texts : [];
        self.values = values != nil ? values : [];
        self.text_all = text_all;
        self.localize_page = localize_page;
        self.limit_count = limit_count;
        self.need_count = need_count;
        self.selected_indexes = [];
        self.updateLabel();
    }

    method onFinalize(context)
    {
        self.texts = [];
        self.values = [];
        self.selected_indexes = [];
        self.text_all = nil;
        self.localize_page = nil;
        self.limit_count = nil;
        self.need_count = nil;
    }

    method setSelectItemIndexes(indexes)
    {
        self.selected_indexes = indexes;
        self.updateLabel();
    }

    method getSelectItemIndexes()
    {
        return self.selected_indexes;
    }

    method setSelectItemValues(values)
    {
        self.selected_indexes = [];
        foreach (var value in values)
        {
            var index = self.values.indexOf(value);
            if (index > -1)
                self.selected_indexes.push(index);
        }

        self.updateLabel();
    }

    method getSelectItemValues()
    {
        var selected_values = [];
        foreach (var index in selected_indexes)
        {
            if (index < self.values.size)
                selected_values.push(self.values[index]);
        }

        return selected_values;
    }

    method onActivate(context)
    {
        if (self.texts == nil)
            return EVENTRESULT_FILTER;

        main::sound.play("cursor");
        var res = DialogUtil::openMultiSelectDialog(context, self.texts, self.selected_indexes, nil, self.text_all, self.localize_page, 
            SBox.sx, SBox.sy, SBox.w, self.limit_count, self.need_count);

        if (res != nil)
        {
            self.selected_indexes = res;
            self.updateLabel();
        }

        return EVENTRESULT_FILTER;
    }

    method getLocalizedText(text)
    {
        if (self.localize_page != nil)
            text = manager.translate(self.localize_page, text);
        return text;
    }
    
    method updateLabel()
    {
        var selected_text = [];
        foreach (var index in self.selected_indexes)
        {
            if (index < self.texts.size)
            {
                var text = self.texts[index];
                text = getLocalizedText(text);
                selected_text.push(text);
            }
        }

        if (selected_text.size == self.texts.size)
            self.SBox::label.text = self.text_all != nil ? getLocalizedText(self.text_all) : manager.translate("Component", "Label_All");
        else
            self.SBox::label.text = selected_text.join(", ");

        self.SBox::label_i.text = self.SBox::label.text;
    }
}

module OptionProjectComponent::ListMenu::ListMenu
{
    attribute cb_vn;
    attribute cb_fn;

    method onRealize(manager)
    {
        self.setDisplayEmpty(false);
    }

    method setCategoryComponent(context, widgets)
    {
        if (widgets.isInstanceOf(menu::MWidget))
            widgets = [widgets];

        foreach (var w in widgets)
            self.Categories::ScrolledWindow::clip::space.appendChild(context, w);
    }

    method clearCategoryComponent(context)
    {
        var space = self.Categories::ScrolledWindow::clip::space;
        foreach (var w in space.getChildList())
        {
            if (w.name == "Header")
                continue;

            space.removeChild(w);
        }
    }

    method getListBox()
    {
        return self.ListWindow::clip::ListBox;
    }

    method setDisplayEmpty(visible, text)
    {
        if (text != nil)
            self.ListWindow::Empty::TextFace.text = text;

        self.ListWindow::Empty.visible = visible;
    }
}

module OptionProjectComponent::ListMenu::ListMenu::ListWindow::clip::ListBox
{
    method onInitialize(context)
    {
        var adj = main::menu::MAdjustment();
        self.clip::VScrollbar.adjustment = adj;
        self.v_adjustment = adj;
    }

    method onFocusEnter(context)
    {
        var w = self.getItemWidget(self.focus_index, context);
        var root = context.getRootWindow();
        root.setFocus(w);
        return EVENTRESULT_FILTER;
    }
}

module OptionProjectComponent::ListMenu::Category
{
    attribute value;

    method setCategoryItemComponent(context, widgets)
    {
        if (widgets.isInstanceOf(menu::MWidget))
            widgets = [widgets];

        foreach (var w in widgets)
            self.VBox.appendChild(context, w);
    }

    method setText(text)
    {
        self.Label.text = text;
    }
}

module OptionProjectComponent::ListMenu::CategoryItem
{
    attribute value;

    method setText(text)
    {
        self.Label.text = text;
        self.Label_i.text = text;
        self.Label_a.text = text;
    }
}

module OptionProjectComponent::ListMenu::OptionItem
{
    attribute value;

    method setText(text1, text2, text3)
    {
        if (text1 != nil)
            self.Label.text = text1;

        if (text2 != nil)
            self.Label2.text = text2;

        if (text3 != nil)
            self.Label3.text = text3;
    }

    method setIcon(image_path, from_disk = false)
    {
        self.Icon.image_path = image_path;
        self.Icon_i.image_path = image_path;
    }
}

module OptionProjectComponent::ButtonHelp::ButtonHelpGT6
{
    module hidden::ButtonSet
    {
        SCALE_WIDGET_SDTV(Circle::label, 2.4);
        SCALE_WIDGET_SDTV(Circle::labeli, 2.4);
        SCALE_WIDGET_SDTV(Square::label, 2.4);
        SCALE_WIDGET_SDTV(Square::labeli, 2.4);
        SCALE_WIDGET_SDTV(Triangle::label, 2.4);
        SCALE_WIDGET_SDTV(Triangle::labeli, 2.4);
        SCALE_WIDGET_SDTV(Cross::label, 2.4);
        SCALE_WIDGET_SDTV(Cross::labeli, 2.4);
        SCALE_WIDGET_SDTV(R1::label, 2.4);
        SCALE_WIDGET_SDTV(R1::labeli, 2.4);
        SCALE_WIDGET_SDTV(L1::label, 2.4);
        SCALE_WIDGET_SDTV(L1::labeli, 2.4);
        SCALE_WIDGET_SDTV(R2::label, 2.4);
        SCALE_WIDGET_SDTV(R2::labeli, 2.4);
        SCALE_WIDGET_SDTV(L2::label, 2.4);
        SCALE_WIDGET_SDTV(L2::labeli, 2.4);
    }

    method clear()
    {
        if (self.current_button_set != nil)
        {
            Pane.removeChild(self.current_button_set);
            self.current_button_set = nil;
        }

        if (self.prev_button_set != nil)
        {
            Pane.removeChild(self.prev_button_set);
            self.prev_button_set = nil;
        }

        self.current_button_set = nil;
        self.prev_button_set = nil;
        self.button_sets = Map();
    }

    method onRealize(manager)
    {
        hidden.visible = false;
    }

    method onFinalize(context)
    {
        clear();
    }

    function getEnterButtonName()
    {
        var assign = main::pdiext::MSystemConfiguration::GetEnterButtonAssign();
        if (assign == "circle")
            return "Circle"
        else
            return "Cross";
    }

    function getCancelButtonName()
    {
        var assign = main::pdiext::MSystemConfiguration::GetEnterButtonAssign();
        if (assign == "circle")
            return "Cross"
        else
            return "Circle";
    }

    attribute is_appear = false;
    attribute current_button_set = nil;
    attribute prev_button_set = nil;
    attribute button_sets = Map();
    attribute current_set = "";

    method set(context, set_list)
    {
        var button_set = hidden::ButtonSet.doCopy();
        if (pdiext::MSystemConfiguration::isSDTV())
        {
            if (set_list.size > 0 && set_list[set_list.size - 1][0] != "R2")
                set_list.push(["R2", manager.translate("Component", "Label_Zoom")]);
                
            
            var pad_left = set_list.size >= 6 ? -28 : 0;
            var w = button_set.first;

            while (w != nil)
            {
                w.pack_pad_left = pad_left;
                w = w.next;
            }
        }

        button_set.visible = false;

        var it = button_set.first;
        while (it != nil)
        {
            it.visible = false;
            it = it.next_widget;
        }

        var order_list = [];
        foreach (var set in set_list)
        {
            |var button_name, var text| = set;
            if (button_name == "Enter")
            {
                if (text == nil)
                    text = manager.translate("Component", "Label_" + button_name);
                var button_name = getEnterButtonName();
            }

            if (button_name == "Back" || button_name == "Cancel" || button_name == "Close")
            {
                if (text == nil)
                    text = manager.translate("Component", "Label_" + button_name);
                var button_name = getCancelButtonName();
            }

            if (text == nil)
                text = "";

            var button_w = button_set[button_name];
            order_list.push(button_w);
            button_w["label"].text = text;
            button_w["label"].visible = true;
            button_w["label_i"].text = text;
            button_w["label_i"].visible = false;
            button_w.visible = true;
        }

        button_set.reorderChild(order_list);
        self.prev_button_set = current_button_set;
        self.current_button_set = button_set;
        if (prev_button_set != nil)
        {
            Pane.removeChild(self.prev_button_set);
            self.prev_button_set = nil;
        }

        Pane.appendChild(context, button_set);
        button_set.InAnimation.restart();
        button_set.visible = true;
    }

    method addButtonSet(context, set_name, set_list)
    {
        self.button_sets[set_name] = set_list;
    }
    
    method setButtonSet(context, set_name)
    {
        if (self.current_set == set_name)
            return;
        var set_list = self.button_sets[set_name];
        self.set(context, set_list);
        self.current_set = set_name;
    }

    method getCurrentButtonSetName()
    {
        return self.current_set;
    }

    method setLabel(context, button_name, text)
    {
        var button_w = Pane::Buttons[button_name];
        button_w["label"].text = text;
        button_w["label_i"].text = text;
    }

    method setInsensitive(button_name, insensitive)
    {
        var button_w = Pane::Buttons[button_name];
        if (button_w != nil)
        {
            button_w["label"].visible = !insensitive;
            button_w["label_i"].visible = insensitive;
        }
    }

    method appear()
    {
        self.FadeEffect.reverse = false;
        self.FadeEffect.start();
        self.is_appear = true;
    }

    method hide()
    {
        self.FadeEffect.reverse = true;
        self.FadeEffect.start();
        self.is_appear = false;
    }

    method appearIf()
    {
        if (!self.is_appear)
        {
            appear();
            return true;
        }

        return false;
    }

    method hideIf()
    {
        if (self.is_appear)
        {
            hide();
            return true;
        }

        return false;
    }
}

module OptionProjectComponent::Tooltip::HDToolTip
{
    SCALE_WIDGET_SDTV(tip, 2.6);
}

module OptionProjectComponent::Buttons::Circle::bgf
{
    method __init__()
    {
        self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = 0.25;
        self.actor.repeat = true;
    }
}

module OptionProjectComponent::HDPulldown::OptionMenu
{
    method onRealize(manager)
    {
        self.copy_selected_item = false;
    }

    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(labeli, 2.4);

    method pulldownValueChanged(context)
    {
        var current_item = self.getItem(self.index);
        if (current_item != nil)
        {
            self["label"].text = current_item["label"].text;
            self["label"].abbreviate = true;

            if (self.defined("labeli"))
            {
                self["labeli"].text = self["label"].text;
                self["labeli"].abbreviate = true;
            }

            if (self.defined("labela"))
            {
                self["labela"].text = self["label"].text;
                self["labela"].abbreviate = true;
            }
        }
    }

    method onValueChanged(context)
    {
        pulldownValueChanged(context);
    }
}

module OptionProjectComponent::HDPulldown::Item
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module OptionProjectComponent::HDSetupPanel::TextRow
{
    method onRealize(manager)
    {
        if (main::pdiext::MSystemConfiguration::isSDTV())
        {
            if (self["label"] != nil)
            {
                self.label.scale_x = 2.4;
                self.label.scale_y = 2.4;
            }

            if (self["Value"] != nil && self["Value"]["label"] != nil)
            {
                self["Value"]["label"].scale_x = 2.4;
                self["Value"]["label"].scale_y = 2.4;
            }
        }
    }
}

module OptionProjectComponent::HDSetupPanel::BaseRow
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module OptionProjectComponent::OptionMenuFrame::Template
{
    method onInitialize(context)
    {
        var clip = self.ScrolledWindow::clip;
        var space = clip.space;

        for (var i = 0; i < space.countChild(); i++)
        {
            var w = space.getChild(i);
            if (w == nil)
                continue;

            if (w["bg"] != nil)
                w["bg"].visible = false;
        }

        space.y = 0.0;
    }

    method set_focus(context, root)
    {
        var clip = self.ScrolledWindow::clip;
        var space = clip.space;
        var focus_target;

        for (var i = 0; i < space.countChild(); i++)
        {
            var w = space.getChild(i);
            if (w == nil || !w.visible)
                continue;

            if (w["CheckBox"] != nil)
            {
                focus_target = w["CheckBox"];
                break;
            }

            if (w["Exec"] != nil)
            {
                focus_target = w["Exec"];
                break;
            }

            if (w["OptionMenu"] != nil)
            {
                focus_target = w["OptionMenu"];
                break;
            }

            if (w["slider"] != nil)
            {
                focus_target = w["slider"];
                break;
            }
        }

        if (focus_target != nil)
            context.pushEvent(main::menu::MFunctionEvent(root.setFocus, focus_target));
    }

    method adjust_size()
    {
        var clip = self.ScrolledWindow::clip;
        var space = clip.space;
        var scrollbar = self.ScrolledWindow::ScrollBar; 
        var h = 0.0;
        var scrollable = false;
        var breakline = false;

        for (var i = 0; i < space.countChild(); i++)
        {
            var w = space.getChild(i);
            if (w == nil || !w.visible)
                continue;

            if (w["breakline"] != nil && !breakline)
            {
                w["breakline"].visible = false;
                breakline = true;
            }

            if (600 < h + w.h)
            {
                scrollable = true;
                break;
            }
            else
                h += w.h;
        }

        scrollbar.x = space.w + 20;
        scrollbar.visible = scrollable;
        clip.minimum_width = space.w;
        clip.minimum_height = h;
    }
}

module OptionProjectComponent::OptionMenuFrame::Template::Buttons::CancelOK::Cancel
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(labeli, 2.4);

    method onKeyPress(context, event)
    {
        if (event.keysym == CELL_PAD_CTRL_L3_RIGHT)
        {
            main::sound.play("cursor");
            var root = context.getRootWindow();
            root.setFocus(CancelOK::OK);
            return EVENTRESULT_FILTER;
        }

        if (event.keysym == CELL_PAD_CTRL_L3_DOWN || event.keysym == CELL_PAD_CTRL_L3_LEFT)
            return EVENTRESULT_FILTER;
        
        return EVENTRESULT_CONTINUE;
    }
}

module OptionProjectComponent::OptionMenuFrame::Template::Buttons::CancelOK::OK
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(labeli, 2.4);
    
    method onKeyPress(context, event)
    {
        if (event.keysym == CELL_PAD_CTRL_L3_LEFT)
        {
            main::sound.play("cursor");
            var root = context.getRootWindow();
            root.setFocus(CancelOK::Cancel);
            return EVENTRESULT_FILTER;
        }

        if (event.keysym == CELL_PAD_CTRL_L3_DOWN || event.keysym == CELL_PAD_CTRL_L3_RIGHT)
            return EVENTRESULT_FILTER;
        
        return EVENTRESULT_CONTINUE;
    }
}