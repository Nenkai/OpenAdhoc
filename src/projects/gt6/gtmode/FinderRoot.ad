













module ROOT
{
    hidden.visible = false;

    Pane::area_check.visible = false;
    Pane::IconBox::area_check.visible = false;

    static sResults;
    static sModalPage;
    static sModalClosed;
    static sArgs;

    function open(context, initial_data, start_animation)
    {
        if (ROOT.sModalPage != nil)
            return nil;

        if (initial_data == nil || !initial_data.isInstanceOf(InitialData))
            return nil;

        if (initial_data.candidates_ == nil)
            return nil;

        ROOT::Pane.setModalArgs(initial_data, start_animation, &ROOT.sResults);
        ROOT.sModalClosed = false;

        ROOT.sModalPage = SequenceUtil::ModalPage(context, ROOT);
        ROOT.sModalPage.open();

        var results = ROOT.sResults;
        ROOT.sResults = nil;
        return results;
    }

    function setCopy(context, parent_widget, initial_data, start_animation)
    {
        if (parent_widget == nil)
            return nil;

        if (initial_data == nil || !initial_data.isInstanceOf(InitialData))
            return nil;

        if (initial_data.candidates_ == nil)
            return nil;

        var pane = ROOT::Pane.doCopy();
        pane.h = parent_widget.h;
        pane.w = parent_widget.w;

        pane.setArgs(initial_data, start_animation);
        parent_widget.appendChild(context, pane);

        return pane;
    }

    module ViewType
    {
        static SCROLL_V = "scroll_h";
        static SCROLL_H = "scroll_v";
        static FLYER = "flyer";
    }

    module ItemType
    {
        static CAR_LIST_S = "car_list_s";
        static CAR_LIST_M = "car_list_m";
        static CAR_LIST_L = "car_list_l";

        static CAR_THUMB_S = "car_thumb_s";
        static CAR_THUMB_L = "car_thumb_l";

        static CAR_DETAIL = "car_detail";

        static COURSE_THUMB_S = "course_thumb_s";
        static COURSE_THUMB_L = "course_thumb_l";

        static COMMON_THUMB_S = "common_thumb_s";
        static COMMON_THUMB_L = "common_thumb_l";
        static COMMON_LIST_S = "common_list_s";
        static COMMON_LIST_M = "common_list_m";
        static COMMON_LIST_L = "common_list_l";

        static FLYER = "flyer";

        static ICON_S = "icon_s";
        static ICON_L = "icon_l";
        static DETAIL_S = "detail_s";
        static DETAIL_L = "detail_l";
        static REDUCE_S = "reduce_s";
        static REDUCE_L = "reduce_l";
    }

    module CancelBehavior
    {
        static PREV_FOLDER = "prev_folder";
        static CLOSE_FINDER = "close_finder";
        static EVENT_FILTER_ONLY = "event_filter";
    }

    class CandidateData
    {
        attribute value_;
        attribute label_;
        attribute label2_;
        attribute label3_;
        attribute balloon_;
        attribute image_path_;
        attribute is_new_;
        attribute is_selected_;
        attribute is_deleted_;
        attribute item_index_;
        attribute cb_on_activate_;
        attribute cb_on_activate_arg_;

        method __init__(value, label, balloon, image_path, is_new, is_selected, is_deleted)
        {
            self.value_ = value;
            self.label_ = label;
            self.balloon_ = balloon;
            self.image_path_ = image_path;
            self.is_new_ = is_new;
            self.is_selected_ = is_selected;
            self.is_deleted_ = is_deleted;

            if (self.is_new_ == nil)
                self.is_new_ = false;

            if (self.is_selected_ == nil)
                self.is_selected_ = false;
            
            if (self.is_deleted_ == nil)
                self.is_deleted_ = false;
        }
    }

    function makeCandidates(value_list, labels, balloons, image_paths, initial_selected_indices, new_item_indices)
    {
        var candidates = Array(value_list.size);
        for (var i = 0; i < value_list.size; i++)
        {
            var data = CandidateData();
            data.item_index_ = i;
            data.value_ = value_list[i];
            candidates[i] = data;
        }

        if (labels != nil)
        {
            for (var i = 0; i < candidates.size && i < labels.size; i++)
                candidates[i].label_ = labels[i];
        }

        if (balloons != nil)
        {
            for (var i = 0; i < balloons.size && i < balloons.size; i++) // BUG: 'balloons.size' x2 instead of 'candidates.size'
                candidates[i].balloon_ = balloons[i];
        }

        if (image_paths != nil)
        {
            for (var i = 0; i < candidates.size && i < image_paths.size; i++) 
                candidates[i].iamge_path_ = image_paths[i]; // BUG: "iamge_path_"
        }

        if (initial_selected_indices != nil)
        {
            for (var i = 0; i < initial_selected_indices.size; i++) 
            {
                var selected_index = initial_selected_indices[i];
                if (selected_index < candidates.size)
                    candidates[selected_index].is_selected_ = true;
            }
        }

        if (new_item_indices != nil)
        {
            for (var i = 0; i < new_item_indices.size; i++) 
            {
                var new_item_index = new_item_indices[i];
                if (new_item_index < candidates.size)
                    candidates[new_item_index].is_new_ = true;
            }
        }

        return candidates;
    }

    class InitialData
    {
        attribute candidates_;
        attribute view_type_;
        attribute item_type_;
        attribute extended_item_;
        attribute title_;
        attribute translate_page_;
        attribute extra_translate_page_;
        attribute select_mode_;
        attribute select_max_;
        attribute tint_visible_;
        attribute focus_index_;
        attribute cancel_behavior_;
        attribute load_gpb_;
        attribute import_iconbox_parameter_;
        attribute item_cache_;
        attribute load_image_from_disk_;
        attribute v_item_count_;
        attribute h_item_count_;
        attribute v_scrollbar_;
        attribute h_scrollbar_;
        attribute activate_sound_;
        attribute cb_init_item_;
        attribute cb_init_item_arg_;

        attribute cb_on_activate_;
        attribute cb_on_activate_arg_;

        attribute cb_change_focus_;
        attribute cb_change_focus_arg_;

        attribute cb_focus_enter_;
        attribute cb_focus_enter_arg_;

        attribute cb_focus_leave_;
        attribute cb_focus_leave_arg_;

        attribute cb_on_cancel_;
        attribute cb_on_cancel_arg_;

        attribute cb_on_time_out_;
        attribute cb_on_key_press_;

        method __init__(candidates)
        {
            self.candidates_ = candidates;
            self.view_type_ = nil;
            self.item_type_ = nil;
            self.extended_item_ = nil;
            self.title_ = nil;
            self.translate_page_ = nil;
            self.extra_translate_page_ = nil;
            self.select_mode_ = false;
            self.select_max_ = 0;
            self.tint_visible_ = false;
            self.focus_index_ = 0;
            self.cancel_behavior_ = nil;
            self.load_gpb_ = nil;
            self.item_cache_ = true;
            self.load_image_from_disk_ = true;
            self.v_item_count_ = -1;
            self.h_item_count_ = -1;
            self.activate_sound_ = "ok";
        }
    }

    function closeModal(context)
    {
        if (!ROOT.sModalClosed)
        {
            ROOT.sModalClosed = true;
            ROOT.sModalPage.close();
            ROOT.sModalPage = nil;
        }
    }

    function onFinalize(context)
    {
        Pane::Scaler.finalize(context);
        Pane::HScrollbar.finalize(context);

        if (!ROOT.sModalClosed)
        {
            ROOT.sModalClosed = true;
            ROOT.sModalPage.close();
            ROOT.sModalPage = nil;
        }
    }

    function onCancel(context)
    {
        closeModal(context);
        return EVENTRESULT_FILTER;
    }
}

module ROOT::Pane
{
    static sModalArgs;
    static sResultsRef;

    attribute is_modal_;
    attribute args_;
    attribute data_stack_;
    attribute loaded_gpb_;

    method onFocus(context, root)
    {
        if (root == nil)
            root = self.root_window;

        if (self.IconBox.can_focus)
            root.setFocus(self.IconBox);
    }

    method setFocusIndex(focus_index)
    {
        IconBox.focus_index = focus_index;
    }

    method getFocusIndex(context)
    {
        return IconBox.focus_index;
    }

    method getItemCount(context)
    {
        return IconBox.getItemCount();
    }

    method getItemWidget(index)
    {
        return IconBox.getItemWidget(index);
    }

    method setTimeOut(value)
    {
        IconBox.time_out = value;
    }

    method getTimeOut(value)
    {
        return IconBox.time_out;
    }

    method getItemData(context, index)
    {
        var folder_data = Pane.getCurrentFolderData();
        return folder_data.getItemData(index);
    }

    method getResults(context)
    {
        var folder_data = self.getCurrentFolderData();
        return folder_data.getSelectedItemData();
    }

    method getCurrentFolderData()
    {
        if (self.data_stack_ == nil || self.data_stack_.size == 0)
            return nil;

        var last_index = self.data_stack_.size - 1;
        return self.data_stack_[last_index];
    }

    method getDataStackCount()
    {
        return self.data_stack_.size;
    }

    method replaceFolder(context, new_initial_data)
    {
        var last_index = self.data_stack_.size - 1;
        self.data_stack_[last_index] = FolderData(context, new_initial_data);

        self.loadCurrentFolderGpb(context);
        self.redrawCurrentFolder(context);
    }

    method redrawCurrentFolder(context)
    {
        BalloonTip.reset_value();

        var folder_data = self.getCurrentFolderData();
        var initial_data = folder_data.initial_data_;

        self.Title.visible = true;
        if (initial_data.title_ != nil)
        {
            if (initial_data.extra_translate_page_ != nil)
                self.Title.text = context.translate(context.getRootWindow(), initial_data.extra_translate_page_, initial_data.title_);
            else if (initial_data.translate_page_ != nil)
                self.Title.text = context.translate(initial_data.translate_page_, initial_data.title_);
            else
                self.Title.text = initial_data.title_;
        }
        else
        {
            self.Title.visible = false;
        }

        self.tint.visible = initial_data.tint_visible_;

        IconBox.initialize(context);

        if (folder_data.view_type_ == ViewType::FLYER)
        {
            Scaler.initialize(context, IconBox);
            Scaler.visible = true;
            HScrollbar.initialize(IconBox);
            HScrollbar.visible = true;
        }
        else
        {
            Scaler.visible = false;
            HScrollbar.visible = false;
        }
    }

    method replaceCurrentFolderCandidates(context, new_candidates, new_focus_index)
    {
        BalloonTip.reset_value();
        var folder_data = self.getCurrentFolderData();
        folder_data.setCandidates(new_candidates);

        if (new_focus_index != nil)
            folder_data.focus_index_ = new_focus_index;
        else
            folder_data.focus_index_ = 0;

        IconBox.initialize(context);
    }

    class ViewTypeParameter
    {
        attribute iconbox_parameter_;
        attribute h_item_count_;
        attribute v_item_count_;
        attribute layout_name_;

        method __init__()
        {
            self.h_item_count_ = -1;
            self.v_item_count_ = 1;
        }

        method setHScrollMode(v_item_count)
        {
            self.h_item_count_ = -1;
            self.v_item_count_ = v_item_count;
        }

        method setVScrollMode(h_item_count)
        {
            self.h_item_count_ = h_item_count;
            self.v_item_count_ = -1;
        }
    }

    function getViewTypeParameter_SCROLL_H()
    {
        var param = ViewTypeParameter();
        param.setHScrollMode(1);
        param.layout_name_ = "TB_LR";
        return param;
    }

    function getViewTypeParameter_SCROLL_V()
    {
        var param = ViewTypeParameter();
        param.setVScrollMode(1);
        param.layout_name_ = "LR_TB";
        return param;
    }

    function getViewTypeParameter_FLYER()
    {
        var param = ViewTypeParameter();
        param.setHScrollMode(1);
        param.layout_name_ = "LR_TB";
        return param;
    }

    static sViewTypeParameters = [
        ViewType::SCROLL_H : getViewTypeParameter_SCROLL_H(),
        ViewType::SCROLL_V : getViewTypeParameter_SCROLL_V(),
        ViewType::FLYER : getViewTypeParameter_FLYER(),
    ];

    class FolderData
    {
        attribute candidates_;
        attribute view_type_;
        attribute item_type_;
        attribute focus_index_;
        attribute selected_indices_;
        attribute deleted_indices_;
        attribute initial_data_;
    

        method __init__(context, initial_data)
        {
            setCandidates(initial_data.candidates_);

            if (initial_data.view_type_ != nil)
                self.view_type_ = initial_data.view_type_.getDeepCopy();
            else
                self.view_type_ = ViewType::SCROLL_H;

            if (initial_data.item_type_ != nil)
                self.item_type_ = initial_data.item_type_.getDeepCopy();

            if (initial_data.view_type_ != nil)
                self.view_type_ = initial_data.view_type_.getDeepCopy();

            if (initial_data.focus_index_ != nil)
                self.focus_index_ = initial_data.focus_index_.getDeepCopy();

            if (self.focus_index_ < 0)
                self.focus_index_ = 0;

            self.initial_data_ = initial_data;
        }

        method setCandidates(candidates)
        {
            if (candidates == nil)
                self.candidates_ = Array();

            self.candidates_ = candidates;

            self.selected_indices_ = Array();
            self.deleted_indices_ = Array();

            for (var i = 0; i < self.candidates_.size; i++)
            {
                var candidate_data = self.candidates_[i];
                candidate_data.item_index_ = i;
                if (candidate_data.is_selected_)
                    self.selected_indices.push(candidate_data.item_index_);

                if (candidate_data.is_deleted_)
                    self.deleted_indices.push(candidate_data.item_index_);
            }
        }

        method getItemData(index)
        {
            var item_index = index;
            if (item_index == nil)
                item_index = self.focus_index_;

            if (item_index == nil || item_index < 0)
                return nil;

            if (item_index < self.candidates_.size)
                return self.candidates_[item_index];
            else
                return nil;
        }

        method getSelectedItemData()
        {
            if (self.selected_indices_ == nil)
                return nil;

            var selected_item_data = Array(self.selected_indices_.size);
            for (var i = 0; i < self.selected_indices_.size; i++)
            {
                var selected_index = self.selected_indices_[i];
                selected_item_data[i] = getItemData(selected_index);
            }

            return selected_item_data;
        }
    }

    method setModalArgs(initial_data, start_animation, results_ref)
    {
        self.is_modal_ = true;
        self.sResultsRef = results_ref;
        self.sModalArgs = [initial_data, start_animation];
    }

    method setArgs(initial_data, start_animation)
    {
        self.is_modal_ = false;
        self.args_ = [initial_data, start_animation];
    }

    method changeFolder(context, initial_data_for_next_folder)
    {
        var success = false;
        if (initial_data_for_next_folder != nil)
        {
            var folder_data = FolderData(context, initial_data_for_next_folder);
            self.data_stack_.push(folder_data);
            success = true;
        }
        else if (self.data_stack_.size > 1)
        {
            self.data_stack_.pop();
            success = true;
        }

        if (success)
        {
            self.loadCurrentFolderGpb(context);
            self.redrawCurrentFolder(context);
        }

        return success;
    }

    method loadCurrentFolderGpb(context)
    {
        var folder_data = self.getCurrentFolderData();
        var load_gpb = folder_data.initial_data_.load_gpb_;
        if (load_gpb != nil)
        {
            self.unloadGpb(context);
            context.loadGpb(load_gpb[0], load_gpb[1]);

            self.loaded_gpb_ = load_gpb;
        }
    }

    method unloadGpb(context)
    {
        if (self.loaded_gpb_ != nil)
        {
            context.unloadGpb(self.loaded_gpb_[0], self.loaded_gpb_[1]);
            self.loaded_gpb_ = nil;
        }
    }

    method onPrepareResource(context)
    {
        context.loadGpb(main::PROJECT_ROOT_DIR + "/" + "gtmode", "FinderRoot");
    }

    method onCleanupResource(context)
    {
        context.unloadGpb(main::PROJECT_ROOT_DIR + "/" + "gtmode", "FinderRoot");
    }

    method onInitialize(context)
    {
        var initial_data, start_animation;

        if (self.is_modal_)
        {
            if (self.sModalArgs == nil)
                return;

            initial_data = self.sModalArgs[0];
            start_animation = self.sModalArgs[1];

            self.sModalArgs = nil;
        }
        else
        {
            if (self.args_ == nil)
                return;

            initial_data = self.args_[0];
            start_animation = self.args_[1];

            context.loadGpb(main::PROJECT_ROOT_DIR + "/" + "gtmode", "FinderRoot");
        }

        if (start_animation != nil && start_animation)
        {
            self.FadeEffect.reverse = false;
            self.FadeEffect.start();
        }
        else
        {
            self.FadeEffect.reverse = true;
            self.FadeEffect.reset();
        }

        self.data_stack_ = Array();
        self.changeFolder(context, initial_data);

        BalloonTip.initialize(context);
    }

    method onFinalize(context)
    {
        self.FadeEffect.reverse = true;
        self.FadeEffect.start();

        context.sync(0.3);

        var folder_data = self.getCurrentFolderData();
        if (self.sResultsRef != nil)
        {
            *self.sResultsRef = folder_data.getSelectedItemData();
            self.sResultsRef = nil;
        }

        self.unloadGpb(context);

        context.unloadGpb(main::PROJECT_ROOT_DIR + "/" + "gtmode", "FinderRoot");

        self.IconBox.finalize(context);
        self.data_stack_ = nil;
        self.is_modal_ = nil;
        self.args_ = nil;
    }

    method onCancel(context)
    {
        var folder_data = self.getCurrentFolderData();
        var initial_data = folder_data.initial_data_;

        if (initial_data.cb_on_cancel_ != nil)
            initial_data.cb_on_cancel_(context, folder_data, initial_data.cb_on_cancel_arg_);

        switch (initial_data.cancel_behavior_)
        {
            case CancelBehavior::CLOSE_FINDER:
                if (self.is_modal_)
                    return EVENTRESULT_CONTINUE;
                else
                    return EVENTRESULT_CONTINUE;

            case CancelBehavior::PREV_FOLDER:
                main::sound.play("cancel");
                self.changeFolder(context);
                self.onFocus(context);
                return EVENTRESULT_FILTER;

            case CancelBehavior::EVENT_FILTER_ONLY:
                return EVENTRESULT_FILTER;
            }

        if (self.is_modal_)
        {
            main::sound.play("cancel");
            return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }
}

module ROOT::Pane::IconBox
{
    attribute v_scroll_adj_;
    attribute h_scroll_adj_;
    attribute h_item_count_;
    attribute v_item_count_;

    method initialize(context)
    {
        var folder_data = Pane.getCurrentFolderData();
        var initial_data = folder_data.initial_data_;
        var total_item_count = folder_data.candidates_.size;
        var param = Pane.sViewTypeParameters[folder_data.view_type_];

        if (initial_data.import_iconbox_parameter_ != nil)
        {
            var iconbox_w = initial_data.import_iconbox_parameter_;
            self.setIconboxParameter(iconbox_w);
        }
        else if (param.iconbox_parameter_ != nil)
        {
            var iconbox_w = param.iconbox_parameter_;
            self.setIconboxParameter(iconbox_w);
        }
        else
        {
            self.setIconboxParameter(hidden::IconBoxForDefault);

            self.x = 0;
            self.y = 0;
            self.w = Pane.w;
            self.h = Pane.h;
        }

        if (total_item_count > 0)
        {
            if (initial_data.h_item_count_ > 0 || initial_data.v_item_count_ > 0)
            {
                self.h_item_count_ = initial_data.h_item_count_;
                self.v_item_count_ = initial_data.v_item_count_;
            }
            else
            {
                self.h_item_count_ = param.h_item_count_;
                self.v_item_count_ = param.v_item_count_;
            }

            if (self.h_item_count_ <= 0 || self.v_item_count_ <= 0)
            {
                if (self.h_item_count_ > 0)
                    self.v_item_count_ = (total_item_count + (self.h_item_count_ - 1)) / self.h_item_count_;
                else if (self.v_item_count_ > 0)
                    self.h_item_count_ = (total_item_count + (self.v_item_count_ - 1)) / self.v_item_count_;
            }

            if (initial_data.import_iconbox_parameter_ == nil && param.layout_name_ != nil)
                self.layout_name = param.layout_name_;
        }

        var tmp_item;
        if (initial_data.extended_item_ != nil)
            tmp_item = initial_data.extended_item_;

        self.v_scroll_adj_ = nil;
        if (initial_data.v_scrollbar_ != nil)
        {
            if (initial_data.v_scrollbar_["pinch"] != nil)
            {
                if (initial_data.v_scrollbar_["pinch"]["point"] != nil)
                {
                    self.v_scroll_adj_ = main::menu::MAdjustment();
                    initial_data.v_scrollbar_.adjustment = self.v_scroll_adj_;
                }
                else
                {
                    self.v_adjustment = main::menu::MAdjustment();
                    initial_data.v_scrollbar_.adjustment = self.v_adjustment;
                }
            }
        }

        self.h_scroll_adj_ = nil;
        if (initial_data.h_scrollbar_ != nil)
        {
            if (initial_data.h_scrollbar_["pinch"] != nil)
            {
                if (initial_data.h_scrollbar_["pinch"]["point"] != nil)
                {
                    self.h_scroll_adj_ = main::menu::MAdjustment();
                    initial_data.h_scrollbar_.adjustment = self.h_scroll_adj_;
                }
                else
                {
                    self.h_adjustment = main::menu::MAdjustment();
                    initial_data.h_scrollbar_.adjustment = self.h_adjustment;
                }
            }
        }

        self.setItemTemplate(context, tmp_item);
        self.setItemCount(0, 0);
        self.postRedraw();
        if (total_item_count > 0)
        {
            self.visible = false;
            self.setItemCount(self.h_item_count_, self.v_item_count_);
            self.can_focus = true;

            for (var i = total_item_count; i < self.h_item_count_ * self.v_item_count_; i++)
            {
                self.setItemVisibleValue(i, false);
            }

            self.visible = true;
        }
        else
        {
            self.can_focus = false;
        }

        adjust_scrollbar(context);
        self.focus_index = folder_data.focus_index_;
    }

    method finalize(context)
    {
        self.v_scroll_adj_ = nil;
        self.h_scroll_adj_ = nil;
        self.h_item_count_ = nil;
        self.v_item_count_ = nil;

        self.setItemCount(0, 0);
    }

    method setIconboxParameter(iconbox_w)
    {
        self.x = iconbox_w.x;
        self.y = iconbox_w.y;
        self.w = iconbox_w.w;
        self.h = iconbox_w.h;
        self.step_min = iconbox_w.step_min;
        self.step_max = iconbox_w.step_max;
        self.h_magnify = iconbox_w.h_magnify;
        self.v_magnify = iconbox_w.v_magnify;
        self.x_scroll_point = iconbox_w.x_scroll_point;
        self.y_scroll_point = iconbox_w.y_scroll_point;
        self.x_alignment = iconbox_w.x_alignment;
        self.y_alignment = iconbox_w.y_alignment;
        self.focus_active = iconbox_w.focus_active;
        self.repeat = iconbox_w.repeat;
        self.keep_scroll_point = iconbox_w.keep_scroll_point;
        self.adjust_scale = iconbox_w.adjust_scale;
        self.layout_name = iconbox_w.layout_name;
        self.inner_pad_left = iconbox_w.inner_pad_left;
        self.inner_pad_right = iconbox_w.inner_pad_right;
        self.inner_pad_top = iconbox_w.inner_pad_top;
        self.inner_pad_bottom = iconbox_w.inner_pad_bottom;
        self.h_scacing = iconbox_w.h_scacing;
        self.v_scacing = iconbox_w.v_scacing;
    }

    method set_balloon(context)
    {
        var folder_data = Pane.getCurrentFolderData();
        var initial_data = folder_data.initial_data_;

        var candidate_data = folder_data.getItemData(self.focus_index);
        if (candidate_data == nil)
        {
            Pane::BalloonTip.reset_value();
            return;
        }

        var item = self.getItemWidget(self.focus_index);
        var balloon = candidate_data.balloon_;

        if (item != nil && balloon != nil && balloon != "")
        {
            if (initial_data.extra_translate_page_ != nil)
            {
                Pane::BalloonTip.set_value(context, item, 
                    context.translate(context.getRootWindow(), initial_data.extra_translate_page_, balloon), 35);
            }
            else if (initial_data.translate_page_ != nil)
            {
                Pane::BalloonTip.set_value(context, item, 
                    context.translate(initial_data.translate_page_, balloon), 35);
            }
            else
            {
                Pane::BalloonTip.set_value(context, item, balloon, 35);
            }
        }
        else
        {
            Pane::BalloonTip.reset_value();
        }
    }

    method adjust_scrollbar(context)
    {
        var folder_data = Pane.getCurrentFolderData();
        var initial_data = folder_data.initial_data_;

        if (self.v_scroll_adj_ != nil)
        {
            var pinch = initial_data.v_scrollbar_["pinch"];
            var point = initial_data.v_scrollbar_["pinch"]["point"];

            if (self.v_item_count_ > 1)
            {
                var ratio = 1.0 / pinch.minimum_height;
                var h_item_index = self.focus_index / self.h_item_count_;
                var space_x = h_item_index.toFloat() / (self.v_item_count_ - 1);
                var clip_w = point.h * ratio;
                var space_w = 1.0 + clip_w;
                self.v_scroll_adj_.adjust(space_x, clip_w, space_w);
            }
            else
            {
                self.v_scroll_adj_.adjust(0.0, 1.0, 1.0);
            }
        }

        if (self.h_scroll_adj_ != nil)
        {
            var pinch = initial_data.h_scrollbar_["pinch"];
            var point = initial_data.h_scrollbar_["pinch"]["point"];

            if (self.h_item_count_ > 1)
            {
                var ratio = 1.0 / pinch.minimum_width;
                var v_item_index = self.focus_index / self.v_item_count_;
                var space_x = v_item_index.toFloat() / (self.h_item_count_ - 1);
                var clip_w = point.w * ratio;
                var space_w = 1.0 + clip_w;
                self.h_scroll_adj_.adjust(space_x, clip_w, space_w);
            }
            else
            {
                self.h_scroll_adj_.adjust(0.0, 1.0, 1.0);
            }
        }
    }

    method initialize_item(context, init_item, init_item_index)
    {
        init_item.can_focus = true;

        var folder_data = Pane.getCurrentFolderData();
        var initial_data = folder_data.initial_data_;
        var candidate_data = folder_data.getItemData(init_item_index);

        if (candidate_data == nil)
            return;

        var param = Pane.sViewTypeParameters[folder_data.view_type_];
        if (initial_data.cb_init_item_ != nil)
        {
            initial_data.cb_init_item_(context, candidate_data, init_item, initial_data.cb_init_item_arg_);
        }
    }

    method onActivate(context)
    {
        var f_index = self.focus_index;

        var folder_data = Pane.getCurrentFolderData();
        var initial_data = folder_data.initial_data_;
        var candidate_data = folder_data.getItemData(f_index);
        var item = self.getItemWidget(f_index);

        if (item == nil)
        {
            main::sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        if (candidate_data == nil)
        {
            main::sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        if (candidate_data.is_deleted_)
        {
            main::sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        if (initial_data.activate_sound_ != nil)
            main::sound.play(initial_data.activate_sound_);

        var close_modal = Pane.is_modal_ ? ROOT.closeModal : nil;
        if (!initial_data.select_mode_)
        {
            folder_data.selected_indices_ = Array(1);
            folder_data.selected_indices_[0] = f_index;

            var initial_data_for_next = nil;
            if (candidate_data.cb_on_activate_ != nil)
                initial_data_for_next = candidate_data.cb_on_activate_(context, folder_data, close_modal, candidate_data.cb_on_activate_arg_, item);
            else if (initial_data.cb_on_activate_ != nil)
                initial_data_for_next = initial_data.cb_on_activate_(context, folder_data, close_modal, initial_data.cb_on_activate_arg_, item);
            else if (close_modal != nil)
                close_modal(context);

            if (initial_data_for_next != nil && initial_data_for_next.isInstanceOf(InitialData))
            {
                folder_data.selected_indices_ = nil;
                Pane.changeFolder(context, initial_data_for_next);
                Pane.onFocus(context);
            }
        }
        else
        {
            var select_enable;
            if (initial_data.select_max_ <= 0)
                select_enable = true;
            else
                select_enable = candidate_data.is_selected_ || folder_data.selected_indices_.size < initial_data.select_max_;

            if (select_enable)
            {
                candidate_data.is_selected_ = candidate_data.is_selected_ ? false : true;
                if (item["CheckBox"] != nil)
                    item.CheckBox.active = candidate_data.is_selected_;

                folder_data.selected_indices_ = Array();

                for (var i = 0; i < folder_data.candidates_.size; i++)
                {
                    var candidate_data = folder_data.candidates_[i];
                    if (candidate_data.is_selected_)
                        folder_data.selected_indices_.push(i);
                }

                if (candidate_data.cb_on_activate_ != nil)
                    candidate_data.cb_on_activate_(context, folder_data, close_modal, candidate_data.cb_on_activate_arg_, item);
                else if (initial_data.cb_on_activate_ != nil)
                    initial_data.cb_on_activate_(context, folder_data, close_modal, initial_data.cb_on_activate_arg_, item);
            }
            else
            {
                main::sound.play("disable");
            }
        }

        return EVENTRESULT_FILTER;
    }

    method onFocusNotify(context, new_index, old_index)
    {
        if (!self.focus)
            return;

        var folder_data = Pane.getCurrentFolderData();
        var initial_data = folder_data.initial_data_;
    
        if (folder_data.candidates_ != nil && folder_data.candidates_.size > 0)
        {
            var old_item = self.getItemWidget(old_index);
            var old_candidate_data = folder_data.getItemData(old_index, context);

            var new_item = self.getItemWidget(new_index);
            var new_candidate_data = folder_data.getItemData(new_index, context);

            Pane::BalloonTip.reset_value();

            if (old_item != nil && old_candidate_data != nil)
            {
                if (initial_data.cb_focus_leave_ != nil)
                    initial_data.cb_focus_leave_(context, old_candidate_data, old_item, initial_data.cb_focus_leave_arg_);
            }
            folder_data.focus_index_ = new_index;

            if (initial_data.cb_change_focus_ != nil)
                initial_data.cb_change_focus_(context, new_candidate_data, new_item, old_candidate_data, old_item, initial_data.cb_change_focus_arg_);

            set_balloon(context);
            adjust_scrollbar(context);

            Pane::HScrollbar.update_arrow();
            Pane::Scaler.update();

            if (new_item != nil && new_candidate_data != nil)
            {
                if (initial_data.cb_focus_enter_ != nil)
                    initial_data.cb_focus_enter_(context, new_candidate_data, new_item, initial_data.cb_focus_enter_arg_);
            }

            if (new_item != nil && new_index == self.focus_index)
                self.root_window.setFocus(new_item);
        }
    }

    method onFocusEnter(context, event)
    {
        var folder_data = Pane.getCurrentFolderData();
        var initial_data = folder_data.initial_data_;

        if (event.widget == self)
        {
            folder_data.focus_index_ = self.focus_index;

            var root = context.getRootWindow();
            var item = self.getItemWidget(self.focus_index);

            if (item == nil)
            {
                item = self.getItemWidget(self.focus_index, context);
                if (item != nil)
                {
                    self.initialize_item(context, item, self.focus_index);
                }
            }
        }

        return EVENTRESULT_FILTER;
    }

    method onFocusLeave(context, event)
    {
        var folder_data = Pane.getCurrentFolderData();
        var initial_data = folder_data.initial_data_;

        if (event.widget == self)
            return EVENTRESULT_FILTER;

        return EVENTRESULT_FILTER;
    }

    method onVisibleNotify(context, indexes)
    {
        var folder_data = Pane.getCurrentFolderData();
        var initial_data = folder_data.initial_data_;

        var item_cache = initial_data.item_cache_;
        foreach (var i in indexes)
        {
            if (self.getItemVisible(i))
            {
                var item = self.getItemWidget(i);
                if (item == nil)
                {
                    item = self.getItemWidget(i, context);
                    self.initialize_item(context, item, i);
                }
            }
            else if (!item_cache)
            {
                self.setItemWidget(i, context, nil);
            }
        }

        context.clearTrashDataAll();
    }

    method onTimeOut(context)
    {
        var folder_data = Pane.getCurrentFolderData();
        var initial_data = folder_data.initial_data_;

        if (initial_data.cb_on_time_out_ != nil)
            initial_data.cb_on_time_out_(context);
    }

    method onKeyPress(context, event)
    {
        var folder_data = Pane.getCurrentFolderData();
        var initial_data = folder_data.initial_data_;

        var candidate_data = folder_data.getItemData(self.focus_index);
        var item = self.getItemWidget(self.focus_index);

        var return_code;

        if (item != nil && initial_data.cb_on_key_press_ != nil)
            return_code = initial_data.cb_on_key_press_(context, event, item, candidate_data);

        if (return_code != nil)
            return return_code;
        else
            return EVENTRESULT_CONTINUE;
    }
}

module ROOT::Pane::HScrollbar
{
    attribute iconbox_w_;

    method initialize(iconbox_w)
    {
        iconbox_w.h_adjustment = main::menu::MAdjustment();

        HScrollbar.adjustment = iconbox_w.h_adjustment;
        self.iconbox_w_ = iconbox_w;

        inc_arrow_animation(true, true);
        dec_arrow_animation(true, true);
    }

    method finalize(context)
    {
        self.iconbox_w_ = nil;
    }

    method inc_arrow_animation(reverse, warp = false)
    {
        var effect = HScrollbar::inc_arrow::Pane::Effect;
        if (!warp)
        {
            if (effect.reverse != reverse)
            {
                effect.reverse = reverse;
                effect.restart();
            }
        }
        else
        {
            effect.reverse = !reverse;
            effect.reset();
            effect.reverse = reverse;
        }
    }

    method dec_arrow_animation(reverse, warp = false)
    {
        var effect = HScrollbar::dec_arrow::Pane::Effect;
        if (!warp)
        {
            if (effect.reverse != reverse)
            {
                effect.reverse = reverse;
                effect.restart();
            }
        }
        else
        {
            effect.reverse = !reverse;
            effect.reset();
            effect.reverse = reverse;
        }
    }

    method update_arrow()
    {
        if (!self.visible)
            return;

        var focus_index = self.iconbox_w_.focus_index;
        var item_count = self.iconbox_w_.getItemCount();

        var inc_arrow_active = focus_index < (item_count - 1) ? true : false;
        var dec_arrow_active = focus_index > 0 ? true : false;

        inc_arrow_animation(!inc_arrow_active);
        dec_arrow_animation(!dec_arrow_active);

    }
}

module ROOT::Pane::Scaler
{
    attribute iconbox_w_;
    attribute activated_widget_;

    method initialize(context, iconbox_w)
    {
        self.iconbox_w_ = iconbox_w;
        self.activated_widget_ = nil;
        self.clearChildren(context);

        if (iconbox_w.getItemCount() > 1)
        {
            for (var i = 0; i < iconbox_w.getItemCount(); i++)
            {
                var item_w = hidden::ScalerItem.doCopy();
                self.appendChild(context, item_w);
            }
        }
    }

    method finalize(context)
    {
        self.clearChildren(context);
        self.iconbox_w_ = nil;
        self.activated_widget_ = nil;
    }

    method update()
    {
        if (!self.visible)
            return;

        if (self.activated_widget_ != nil)
        {
            self.activated_widget_.active = false;
            self.activated_widget_ = nil;
        }

        var active_widget = self.getChild(self.iconbox_w_.focus_index);
        if (active_widget != nil)
        {
            active_widget.active = true;
            active_widget.ColorFace::ScalarInterpolator.restart();
            self.activated_widget_ = active_widget;
        }
    }
}