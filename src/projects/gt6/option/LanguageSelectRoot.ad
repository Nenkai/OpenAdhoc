













module ROOT
{
    hidden.visible = false;

    attribute finished = false;
    attribute language_list;
    attribute result;

    method open(context)
    {
        var langs = pdistd::MLocale::getOutOfSystemLanguages();
        self.language_list = ["SYSTEM"];
        self.language_list.append(langs);

        SettingFrame.appear();

        self.result = nil;

        SequenceUtil::pushPage(context, self);

        var r = self.result;
        self.result = nil;

        return r;
    }

    method close(context)
    {
        var delay_time = SettingFrame.hide();
        SequenceUtil::popPage(context, self, delay_time);
    }

    method isFinished()
    {
        return self.finished;
    }

    method onInitialize(context)
    {
        LangUtil::translate_text(ROOT);
        SettingFrame::Pane::Body::List::ListBox.initialize(context);
    }

    method onFinalize(context)
    {
        SettingFrame::Pane::Body::List::ListBox.setItemCount(0);
    }
    
    module SettingFrame::Pane::Body::List::ListBox
    {
        method initialize(context)
        {
            var tmp = hidden::Item;
            var size = ROOT.language_list.size;
            ListBox.setItemTemplate(context, tmp);
            ListBox.setItemCount(size);
            
            var total_space = ListBox.spacing * (size - 1);
            var border_width = 20 * 2;
            ListBox.minimum_height = (tmp.h * size) + total_space + border_width;
        }

        method onVisibleNotify(context, indices)
        {
            var count = self.getItemCount();
            foreach (var i in indices)
            {
                if (self.getItemVisible(i))
                {
                    var item = self.getItemWidget(i);
                    if (item == nil)
                    {
                        item = self.getItemWidget(i, context);
                    }
                    if (item.language == nil)
                    {
                        item.initialize(context, ROOT.language_list[i]);
                    }
                }
                else
                    ;
            }
        }

        method onFocusNotify(context, new_index, old_index)
        {
            var new_item = self.getItemWidget(new_index, context);
            if (new_item != nil)
            {
                ROOT.setFocus(new_item);
            }
            return EVENTRESULT_FILTER;
        }

        method change_language(context)
        {
            CursorUtil::setCursor(ContextMain, "wait");

            var request = main::Grim2.requestSetLanguage(main::pdiext::MProductInformation::GetGameRegionCode(),
                main::pdistd::MLocale::getLanguage(), function(args) {});

            if (Grim2Util::join(context, request, true))
            {
                var language = main::Grim2.decodeResultString(request);
                main::Grim2.setLanguage(language);
            }   

            LangUtil::reload();

            foreach (var it in __projects__)
            {
                var proj = *it[1];
                if (proj.isInstanceOf(menu::MProject))
                    LangUtil::translate_text(proj);
            }

            CursorUtil::setCursor(ContextMain, "cursor_chrome");
        }

        method onActivate(context)
        {
            main::sound.play("ok");
            var item = self.getItemWidget(self.focus_index, context);
            var language = item.language;

            if (language != "SYSTEM")
            {
                var str = "";

                switch (language)
                {
                    case "EL":
                        str = "GREEK";
                        break;
                    case "CZ":
                        str = "CZECH";
                        break;
                    case "HU":
                        str = "HUNGARIAN";
                        break;
                    case "MS":
                        str = "MEXICANSPANISH";
                        break;
                }

                var text0 = manager.translate("BootProject::LanguageSelectRoot", "DO_YOU_REALLY_WANT_TO_SET_TO_%{str}_%{str}");
                var text1 = manager.translate("BootProject::LanguageSelectRoot", "DO_YOU_REALLY_WANT_TO_SET_TO_%{str}");

                var res = DialogUtil::openConfirmDialog(context, DialogUtil::DEFAULT_NO, text0 + "\n\n" + text1);
                if (res)
                {
                    var option = GAME_STATUS.user_profile.option;
                    option.extra_language = pdistd::Language[language];
                    option.extra_language_done = true;
                    ROOT.result = "close_option";

                    pdistd::SetLanguage(option.extra_language);
                    change_language(context);
                    ROOT.close(context);
                    return EVENTRESULT_FILTER;
                }
            }
            else
            { 
                var text = manager.translate("BootProject::LanguageSelectRoot", "DO_YOU_REALLY_WANT_TO_SET_TO_SYSTEM_LANGUAGE");
                var res = DialogUtil::openConfirmDialog(context, DialogUtil::DEFAULT_NO, text);

                if (res)
                {

                    var option = GAME_STATUS.user_profile.option;
                    option.extra_language = pdistd::Language::SYSTEM;
                    option.extra_language_done = false;
                    ROOT.result = "close_option";
                    pdiext::SetStaticLanguage();
                    change_language(context);
                    ROOT.close(context);
                    return EVENTRESULT_FILTER;
                }
            }

            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module hidden::Item
    {
        attribute language;
		
        method initialize(context, language)
        {
            self.language = language;
            self.label.text = manager.translate("Language", language).build(manager.translate("Language", pdistd::MLocale::getDefaultLanguage()));
        }
    }
}