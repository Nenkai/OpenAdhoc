
















module CarRoot
{
    hidden.visible = false;

    static sCaptureMode = false;

    function open(context, from_prev_page)
    {
        var gp = gArcadeSequence.getGP();
        if (gp != nil)
        {
            var cp = main::gtengine::MCarParameter(main::gtengine::MSpecDB::NO_CODE64);

            var entries = gp.event.entry_set.entries;
            for (var i = 0; i < entries.size; i++)
            {
                var entry = entries[i];
                if (entry.player_no == 0)
                    cp = main::gtengine::MCarParameter(entry.car);
            }

            if (cp.getCarCode() == main::gtengine::MSpecDB::NO_CODE64)
            {

                if (1 == gp.event.constraint.cars.size)
                {
                    var car_thin = gp.event.constraint.cars[0];

                    if (1 == main::gtengine::MSpecDB::getCarVariation(car_thin.getCarCode()))
                    {
                        cp = main::gtengine::MCarParameter(car_thin);

                    }
                }
            }

            if (cp.getCarCode() != main::gtengine::MSpecDB::NO_CODE64)
            {

                if (from_prev_page)
                {
                    main::GAME_STATUS.user_profile.context.setArcadeCar(cp);
                    gArcadeSequence.moveNextPage(context);
                } 
                else 
                {
                    gArcadeSequence.movePrevPage(context);
                }
                return false;
            }

            if (1 < gp.event.constraint.cars.size)
            {

                CarFinder.set_open_mode(CarFinder::OPEN_MODE::CUSTOM);
                context.pushPage(CarRoot);
                return true;
            }
        }
        
        CarFinder.set_open_mode(CarFinder::OPEN_MODE::ARCADE);
        context.pushPage(CarRoot);
        return true;
    }

    method close(context)
    {
        LeaveDetectUtil::end(context);

        SceneFace.clearCar();

        ArcadeProject::ignorePadEvent(true, true);

        self.FadeEffect.reverse = true;
        self.FadeEffect.on_effect_end = self.close_end;
        self.FadeEffect.start();
    }


    method close_end(context)
    {
        self.FadeEffect.reverse = false;
        self.FadeEffect.reset();
        context.closePage(self);

        ArcadeProject::ignorePadEvent(false);
    }

    method reset_widgets()
    {
        official_name.text = "";

        Info.reset();

        DetailBox.reset();
    }


    function checkDebugCommand(context)
    {
        if (pdiext::isQABuild())
        {
            var state = context.getUpdateContext().getPadButtonState(0);
            if(state & 2048)
                return true;
        }

        return false;
    }

    method onInitialize(context)
    {
        CarRoot.setFocus(nil);

        OverLapRoot.onCarSelect(context);

        reset_widgets();

        self.FadeEffect.start();

        context.pushEvent(main::menu::MFunctionEvent(postInitialize, context));
    }

    method postInitialize(context)
    {
        if (checkDebugCommand(context))
            sCaptureMode = true;


        self.insensitive = false;

        if (0 < ArcadeProject.gLeaveDetectTime)
        {
            LeaveDetectUtil::reset(context);
            LeaveDetectUtil::begin(context, ArcadeProject.gLeaveDetectTime, CarRoot, ArcadeProject.onLeaveDetect, nil, true);
        }

        var gp = gArcadeSequence.getGP();
        var cp = main::gtengine::MCarParameter(main::gtengine::MSpecDB::NO_CODE64);
        if (gp != nil)
        {
            if (gp.event.constraint.cars.size == 1)
            {
                cp = main::gtengine::MCarParameter(gp.event.constraint.cars[0]);
            }
        }

        if (cp.getCarCode() != main::gtengine::MSpecDB::NO_CODE64)
        {
            var car_code = cp.getCarCode();
            var car_color = main::gtengine::MSpecDB::getCarVariationFlag(car_code, 1);
            cp.color = car_color;

            load_car(context, cp);

            while (true)
            {
                car_color = CarColorSelector.open(context, car_code, car_color);

                if (car_color == nil)
                    return;

                if (-1 < car_color)
                {
                    cp.color = car_color;

                    if (1 == gp.event.constraint.cars.size)
                    {
                        var ct = gtengine::MCarThin(cp.getCarCode());
                        ct.color = cp.color;
                        gp.event.constraint.cars[0] = ct;
                    }

                    main::GAME_STATUS.user_profile.context.setArcadeCar(cp);
                    var result = gArcadeSequence.moveNextPage(context);
                    if (result == nil || result)
                        break;
                    
                    OverLapRoot.onCarSelect(context);
                }
                else
                {
                    gArcadeSequence.movePrevPage(context);
                    break;
                }
            }
        }
        else
        {
            CarFinder.appear(true);
        }
    }


    method onFinalize(context)
    {
        sCaptureMode = false;
    }

    method onRealize(context)
    {
        Info::tuner_logo.image_path = "";
        Info::flag.image_path = "";
    }

    method onKeyPress(context, event)
    {
        LeaveDetectUtil::activated(context, event);

        if (event.keysym == CELL_PAD_CTRL_TRIANGLE)
        {
            ContextMain.getCursorProject().CursorRoot.visible = false;
            Context1P.getCursorProject().CursorRoot.visible = false;
            context.getCursorProject().CursorRoot.visible = false;

            var res = SceneFace.setRotateFast(true);
            if (res)
            {
                return EVENTRESULT_FILTER;
            } 
            else 
            {
                main::sound.play("disable");
            }
        }

        return EVENTRESULT_CONTINUE;
    }

    method onKeyRelease(context, event)
    {
        if (event.keysym == CELL_PAD_CTRL_TRIANGLE)
        {
            SceneFace.setRotateFast(false);
            return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }

    method load_car(context, cp, tab_id) 
    {
        if (cp != nil)
        {
            SceneFace.clearCar();
            SceneFace.setCar(cp);
        }

        SceneFace.loadCar();
        cp = SceneFace.getCar();

        if (cp == nil)
            return;
        var car_code = cp.getCarCode();

        official_name.text = main::gtengine::MSpecDB::getCarShortName_A(car_code).upcase();
        CarRoot.official_name.TransientReset();

        var is_ps3 = main::gtengine::MSpecDB::checkGenericFlag("has_premium_model", car_code);
        OverLapRoot::ButtonHelpGT5.setInsensitive("Square", !is_ps3);

        Info.set(context, car_code);

        var show_real_spec = false;
        if (tab_id == CarFinder::TAB_TYPE::FAVORITE)
            show_real_spec = true;

        DetailBox.set(context, cp, show_real_spec);
    }

    module CarFinder
    {
        class TabClass
        {
            attribute id_;
            attribute tab_w_;
            attribute initial_data_;
            method __init__(id, tab_w)
            {
                self.id_ = id;
                self.tab_w_ = tab_w;
                self.initial_data_ = nil;

                if (!self.tab_w_.defined('id_'))
                    self.tab_w_.defineAttribute('id_');
                self.tab_w_.id_ = self.id_;
            }

            method set_finder(context, finder)
            {
                finder.replaceFolder(context, self.initial_data_);
            }
        }

        module OPEN_MODE 
        {
            static ARCADE = "arcade";
            static CUSTOM = "custom";
        }

        module TAB_TYPE 
        {
            static ARCADE = "arcade";
            static FAVORITE = "favorite";
            static IMPORT = "import";
            static KIOSK = "kiosk";
            static CUSTOM = "custom";
        }

        static sDuration;
        attribute open_mode_;
        attribute tabs_;
        attribute current_tab_;
        attribute finder_;

        method set_open_mode(mode) { self.open_mode_ = mode;}

        method change_tab(context, id, on_initialize=false)
        {
            foreach (var tab in self.tabs_)
            {
                if (id == tab.id_)
                {
                    self.current_tab_ = tab;
                    tab.tab_w_.active = true;
                } else {
                    tab.tab_w_.active = false;
                }
            }
            Body::empty_message::FadeEffect.reset();
            Body::empty_message.visible = false;

            self.current_tab_.set_finder(context, self.finder_);

            if (0 < self.finder_.getItemCount())
            {
                Tabs.focus_navigate(true);
            
                if (!on_initialize)
                {
                    ArcadeProject::ignorePadEvent(true);
                    self.finder_.onFocus(context, CarRoot);
                }
            } 
            else 
            {
            
                switch(id)
                {
                    case TAB_TYPE::FAVORITE:

                        Body::empty_message::FadeEffect.restart();
                        Body::empty_message.text = context.translate(CarRoot, "MESSAGE_WHEN_FAVORITE_CARS_ARE_EMPTY");
                        Body::empty_message.visible = true;
                        break;
                    case TAB_TYPE::IMPORT:

                        Body::empty_message::FadeEffect.restart();
                        Body::empty_message.text = context.translate(CarRoot, "MESSAGE_WHEN_IMPORT_CARS_ARE_EMPTY");
                        Body::empty_message.visible = true;
                        break;

                    default:
                        Body::empty_message::FadeEffect.restart();
                        Body::empty_message.text = context.translate(CarRoot, "MESSAGE_WHEN_CARS_ARE_EMPTY");
                        Body::empty_message.visible = true;
                        break;
                }
            }
        }

        method getTab(tab_id)
        {
            foreach (var tab in self.tabs_)
            {
                if(tab_id == tab.id_)
                    return tab;
            }
        }

        method appear(on_root_open = false)
        {
            ArcadeProject::ignorePadEvent(true);

            var end_move = method(context) {
                self.insensitive = false;
                context.pushEvent(main::menu::MFunctionEvent(self.finder_.onFocus, context, CarRoot));
                ArcadeProject::ignorePadEvent(false);
                self.MoveEffect.on_effect_end = nil;
            }

            self.MoveEffect.reverse = false;


            if (on_root_open)
                self.MoveEffect.setStartDuration(0, self.sDuration);
            else
                self.MoveEffect.setStartDuration(0, 0.0);

            self.MoveEffect.on_effect_end = self.*end_move;
            self.MoveEffect.start();
        }

        method hide(context, warp)
        {
            self.insensitive = true;
            CarRoot.setFocus(nil);

            BalloonTip.reset_value();

            if (warp)
            {
                self.MoveEffect.reverse = true;
                self.MoveEffect.start();
                self.MoveEffect.warp();
            } else {
                self.MoveEffect.reverse = true;
                self.MoveEffect.start();
            }
        }

        method onLoad(context)
        {
            self.sDuration = self.MoveEffect.getStartDuration(0);
        }

        method onUnLoad(context)
        {
            self.sDuration = nil;
        }

        method onInitialize(context)
        {
            self.current_tab_ = nil;

            self.tabs_ = [];
            if (self.open_mode_ == nil || self.open_mode_ == OPEN_MODE::ARCADE)
            {
                if (main::GAME_STATUS.user_profile.option.limit_favorite_car_only &&
                    main::GAME_STATUS.user_profile.option.hasFavoriteCar())
                {

                    self.tabs_.push(TabClass(TAB_TYPE::KIOSK, Tabs::Kiosk));
                }
                else
                {
                    if (GetVersionBranch() != "demo")
                        self.tabs_.push(TabClass(TAB_TYPE::FAVORITE, Tabs::FavoriteCars));

                    self.tabs_.push(TabClass(TAB_TYPE::ARCADE, Tabs::ArcadeCars));

                    if (GetVersionBranch() != "demo")
                        self.tabs_.push(TabClass(TAB_TYPE::IMPORT, Tabs::ImportCars));
                }
            }
            else if (self.open_mode_ == OPEN_MODE::CUSTOM)
            {
                self.tabs_.push(TabClass(TAB_TYPE::CUSTOM, Tabs::CustomCars));
            }

            for (var it = Tabs.first; it != nil; it = it.next_widget)
            {
                if (!it.is_face)
                    it.visible = false; 
            }

            var focus_tab;
            foreach (var tab in self.tabs_)
            {
                var initial_data = self.makeInitialDataForCar(context, tab.id_);
                tab.initial_data_ = initial_data;

                if (focus_tab == nil && initial_data.candidates_.size > 0)
                    focus_tab = tab;


                if (1 < self.tabs_.size)
                    tab.tab_w_.visible = true;
            }
            if (focus_tab == nil)
                focus_tab = self.tabs_[0];

            var dummy_initial_data = UIKitProject::FinderRoot.InitialData(UIKitProject::FinderRoot.makeCandidates([]));
            self.finder_ = UIKitProject::FinderRoot.setCopy(context,
                Body::Composite,
                dummy_initial_data,
                false);
                
            change_tab(context, focus_tab.id_, true);

            hide(context, true);
        }

        method onFinalize(context)
        {
            context.removeTimeOut("change_car");

            self.tabs_ = nil;
            self.current_tab_ = nil;

            if (self.finder_ != nil)
            {
                var parent = self.finder_.parent;
                parent.removeChild(context, self.finder_);
                self.finder_ = nil;
            }
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            gArcadeSequence.movePrevPage(context);
            return EVENTRESULT_FILTER;
        }

        method cb_init_car(context, candidate_data, item_w, arg)
        {
            |var car, var car_name, var is_enable, var is_invalid| = candidate_data.value_;
            item_w.setInfo(context, car);
            item_w.disable.visible = !is_enable;
            item_w.caution.visible = is_invalid;
        }

        method cb_selected_car(context, folder_data, func_close, arg)
        {
            var candidate_data = folder_data.getItemData();
            |var car, var car_name, var is_enable| = candidate_data.value_;

            if (!is_enable)
            {
                main::sound.play("disable");
                return;
            }

            var cp;
            if (car.isInstanceOf(Garage2::CarParameterProxy) ||
                car.isInstanceOf(ImportGarage::CarParameterProxy) ||
                car.isInstanceOf(CarData::CarParameterProxy))
            {
                cp = car.getCP();
            } 
            else if (car.isInstanceOf(gtengine::MCarThin)) 
            {
                cp = gtengine::MCarParameter(car);
            } 
            else 
            {
                cp = car;
            }

            var tab_id = arg;
            var skip_color_selector = tab_id == TAB_TYPE::FAVORITE || tab_id == TAB_TYPE::IMPORT;

            self.hide(context, false);

            while (true)
            {
                if (!skip_color_selector)
                {
                    var car_color = CarColorSelector.open(context, cp.getCarCode(), cp.color);

                    if (car_color == nil)
                        return;

                    if (car_color < 0)
                    {

                        self.appear();
                        break;
                    }
                    cp.color = car_color;
                }
                main::GAME_STATUS.user_profile.context.setArcadeCar(cp);
                var result = gArcadeSequence.moveNextPage(context);
                if (result != nil && result == false)
                {

                    OverLapRoot.onCarSelect(context);

                    if (skip_color_selector)
                    {

                        self.appear();
                        break;
                    }
                } 
                else 
                {
                    break;
                }
            }
        }


        method cb_focused_car(context, candidate_data, item_w, arg)
        {
            ArcadeProject::ignorePadEvent(false);

            |var car, var car_name, var is_enable| = candidate_data.value_;
            var tab_id = arg;

            var cp;
            if (car.isInstanceOf(Garage2::CarParameterProxy))
            {
                cp = car.getCP();
            } 
            else if (car.isInstanceOf(ImportGarage::CarParameterProxy) ||
                       car.isInstanceOf(CarData::CarParameterProxy)) 
            {
                cp = car.getCT();
            } 
            else 
            {
                cp = car;
            }

            BalloonTip.set_value(context, item_w.car, car_name, 20);

            |var same_code, var same_color| = SceneFace.isSameCar(cp);
            if (tab_id == TAB_TYPE::IMPORT && same_code && !same_color)
            {
                SceneFace.setCarVariation(cp.color);
            }
            else
            {
                SceneFace.clearCar();
                SceneFace.setCar(cp);
                CarRoot.reset_widgets();
            
                context.addTimeOut("change_car", CarRoot.load_car, context, nil, tab_id);

                context.setTimeOut("change_car", 0.1);
            }
        }

        method makeInitialDataForCar(context, tab_id)
        {
            var Finder = UIKitProject::FinderRoot;

            var candidates = getCarCandidates(context, tab_id);
            var initial_data = UIKitProject::FinderRoot.InitialData();
            initial_data.view_type_ = UIKitProject::FinderRoot::ViewType::SCROLL_H;

            initial_data.extended_item_ = hidden::CarThumb;
            initial_data.candidates_ = candidates;

            initial_data.cb_init_item_ = self.cb_init_car;
            initial_data.cb_on_activate_ = self.cb_selected_car;
            initial_data.cb_on_activate_arg_ = tab_id;
            initial_data.cb_focus_enter_ = self.cb_focused_car;
            initial_data.cb_focus_enter_arg_ = tab_id;
            initial_data.h_scrollbar_ = Body::HScrollbar;
            initial_data.import_iconbox_parameter_ = Body::Composite::IconBox;

            return initial_data;
        }

        function getCarCandidates(context, tab_id)
        {
            var course_data_holder = gArcadeSequence.getSelectedCourse();
            var course_code = course_data_holder.getCourseCode();
            var course_info = CourseData::getCourseInfo(course_code);
            var course_is_dirt = gtengine::MSpecDB::isDirt(course_code);
            var course_is_snow = gtengine::MSpecDB::isSnow(course_code);
            var decisive_weather = course_data_holder.getDecisiveWeather();
            var cars = [];

            switch (tab_id)
            {
                case TAB_TYPE::ARCADE:
                    if ("demo" == GetVersionBranch())
                        cars = gEnablePremiumCars;
                    else
                    {    
                        cars = CarData::ArcadeModeGT5::getCarList();
                    }
                    break;

                case TAB_TYPE::FAVORITE:

                    cars = GAME_STATUS.user_profile.garage.getFavoriteCPPList(nil, nil, nil, "power", "DESC");
                    break;

                case TAB_TYPE::IMPORT:

                    cars = GAME_STATUS.user_profile.import_garage.getFavoriteCPPList(nil, nil, nil, "power", "DESC");
                    break;

                case TAB_TYPE::CUSTOM:

                    var gp = gArcadeSequence.getGP();
                    cars = gp.event.constraint.cars;
                    break;

                case TAB_TYPE::KIOSK:

                    var favorite_cars = main::GAME_STATUS.user_profile.option.favorite_cars;
                    for (var i = 0; i < favorite_cars.size; i++)
                    {
                        var car_code = favorite_cars[i];

                        if (car_code == main::gtengine::MSpecDB::NO_CODE64)
                            continue;

                        var ct = gtengine::MCarThin(car_code);
                        ct.color = main::gtengine::MSpecDB::getCarVariationFlag(car_code, 1);
                        cars.push(ct);
                    }
                    break;
            }

            var car_code;
            var candidates = Array();
            for (var i = 0; i < cars.size; i++)
            {
                var car = cars[i];
                var car_code;
                if (car.isInstanceOf(Garage2::CarParameterProxy) || 
                    car.isInstanceOf(ImportGarage::CarParameterProxy) ||
                    car.isInstanceOf(CarData::CarParameterProxy)) {
                    car_code = car.car_code;
                } else {
                    car_code = car.getCarCode();
                }
                var is_enable = true;

                var is_racing_kart = gtengine::MSpecDB::checkGenericFlag("is_racing_kart", car_code);

                if (course_data_holder.is_edit_course_)
                {
                    var edit_course_data = course_data_holder.edit_course_data_;
                    if (edit_course_data.weather_value0 != 1.0 || edit_course_data.weather_accel != 0)
                    {

                        if (is_racing_kart)
                        {
                            is_enable = false;
                        }
                    }
                }
                else
                {
                    var crs_param = course_data_holder.course_parameter_;


                    if (crs_param.weather_changeable_ ||
                        crs_param.rain_situation_ ||
                        crs_param.snow_situation_)
                    {

                        if (is_racing_kart)
                        {
                            is_enable = false;
                        }
                    }
                }

                var course_label = main::gtengine::MSpecDB::getCourseLabel(course_code);
                if ("newindoorkart" == course_label ||
                    "r_newindoorkart" == course_label ||
                    "newindoorkart_short" == course_label ||
                    "r_newindoorkart_short" == course_label)
                {
                    is_enable = is_racing_kart;
                }

                if (is_enable)
                {
                    if (tab_id == TAB_TYPE::FAVORITE)
                    {
                        var cp = car.getCP();

                        if (course_is_dirt)
                        {
                            if (cp.isHavingParts(gtengine::CarPartsType::FRONT_TIRE, gtengine::PARTS_TIRE::DIRT_A) ||
                                cp.isHavingParts(gtengine::CarPartsType::REAR_TIRE, gtengine::PARTS_TIRE::DIRT_A))
                                is_enable = true;
                            else
                                is_enable = false;
                        }

                        if (course_is_snow)
                        {
                            if (cp.isHavingParts(gtengine::CarPartsType::FRONT_TIRE, gtengine::PARTS_TIRE::SNOW_A) &&
                                cp.isHavingParts(gtengine::CarPartsType::REAR_TIRE, gtengine::PARTS_TIRE::SNOW_A))
                                is_enable = true;
                            else
                                is_enable = false;
                        }
                    }
                    else
                    {
                        if (course_is_dirt || course_is_snow)
                        {
                            if (gtengine::MSpecDB::checkGenericFlag("have_dirt_tire", car_code))
                                is_enable = true;
                            else
                                is_enable = false;
                        }
                    }
                }

                var is_invalid = false;
                if (is_enable && car.isInstanceOf(Garage2::CarParameterProxy))
                {
                    is_invalid = 0 != car.invalid;
                    is_enable = !is_invalid;
                }


                if (tab_id == TAB_TYPE::ARCADE && !is_enable)
                    continue;

                var car_name = main::gtengine::MSpecDB::getCarShortName(car_code);
                candidates.push(UIKitProject::FinderRoot::CandidateData([car, car_name, is_enable, is_invalid]));
            }
            return candidates;
        }
    }

    module CarFinder::Tabs
    {
        attribute activate_tab_w_;

        method onActivate(context, event)
        {
            if (event.widget == CarFinder.current_tab_.tab_w_)
                return EVENTRESULT_FILTER;

            main::sound.play("tab_switch");
            CarFinder.change_tab(context, event.widget.id_);
            return EVENTRESULT_FILTER;
        }

        method focus_navigate(ON)
        {
            if (ON)
            {
                for (var it = self.first; it != nil; it = it.next_widget)
                {
                    if (!it.is_face)

                        it.insensitive = it != CarFinder.current_tab_.tab_w_;
                }
            }
            else
            {

                for (var it = self.first; it != nil; it = it.next_widget)
                {
                    if (!it.is_face)

                        it.insensitive = false;
                }
            }
        }

        method onFocusLeave(context, event)
        {
            focus_navigate(true);
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context, event)
        {
            BalloonTip.reset_value();
            focus_navigate(false);
            return EVENTRESULT_FILTER;
        }
    }

    module Info
    {
        method set(context, car_code)
        {
            var country_code = main::gtengine::MSpecDB::getCarCountry(car_code);
            var tuner_label = main::gtengine::MSpecDB::getTunerLabel(car_code);

            var delay_load_complete = method(context)
            {
                self.Info::FadeEffect.start();
            }

            self.Info::tuner_logo.on_delay_load_complete = self.*delay_load_complete;
            self.Info::tuner_logo.image_path = "piece/tunner_logo_L/%{tuner_label}.img";
            self.Info::flag.image_path = "piece/flag_menu/%{country_code}.img";
            self.Info::tuner_name.text = context.translate(CarRoot, "TunerNameI18n", tuner_label);

            var is_ps3 = main::gtengine::MSpecDB::checkGenericFlag("has_premium_model", car_code);
            self.Info::premium.visible = is_ps3;
            self.Info::standard.visible = !is_ps3;
            self.Info::FadeEffect.reset();
        }

        method reset()
        {
            self.Info::tuner_logo.image_path = "";
            self.Info::flag.image_path = "";
            self.Info::tuner_name.text = "";
            self.Info::premium.visible = false;
            self.Info::standard.visible = false;
            self.Info::FadeEffect.reset();
        }
    }

    module DetailBox
    {
        method set(context, cp, show_real_spec)
        {
            var car_code = cp.getCarCode();
            DetailBox::FadeEffect.on_effect_end = nil;
            DetailBox::FadeEffect.restart();
            DetailBox::FadeEffect.on_effect_end = function()
            {
                DetailBox::FadeEffect.on_effect_end = nil;

                if (show_real_spec == true)
                {
                    cp.beginInfo();
                    DetailBox::MaxPower::value.TransientReset();
                    DetailBox::MaxPower::value.text = cp.getPowerString(true);
                    DetailBox::MaxTorque::value.TransientReset();
                    DetailBox::MaxTorque::value.text = cp.getTorqueString(true);
                    DetailBox::Weight::value.TransientReset();
                    DetailBox::Weight::value.text = cp.getWeightString();
                    cp.endInfo();
                } 
                else 
                {
                    DetailBox::MaxPower::value.TransientReset();
                    DetailBox::MaxPower::value.text = SpecDatabaseUtil::getCarMaxPowerText(context, car_code);
                    DetailBox::MaxTorque::value.TransientReset();
                    DetailBox::MaxTorque::value.text = SpecDatabaseUtil::getCarMaxTorqueText(context, car_code);
                    DetailBox::Weight::value.TransientReset();
                    DetailBox::Weight::value.text = SpecDatabaseUtil::getCarWeightText(context, car_code);
                }
                DetailBox::Displacement::value.TransientReset();
                DetailBox::Displacement::value.text = SpecDatabaseUtil::getCarDisplacementText(context, car_code);
                DetailBox::Drivetrain::value.TransientReset();
                DetailBox::Drivetrain::value.text = SpecDatabaseUtil::getCarDrivetrainText(context, car_code);
                DetailBox::Length::value.TransientReset();
                DetailBox::Length::value.text = SpecDatabaseUtil::getCarLengthText(context, car_code);
                DetailBox::Width::value.TransientReset();
                DetailBox::Width::value.text = SpecDatabaseUtil::getCarWidthText(context, car_code);
                DetailBox::Height::value.TransientReset();
                DetailBox::Height::value.text = SpecDatabaseUtil::getCarHeightText(context, car_code);
            }
        }

        method reset()
        {
            DetailBox::Displacement::value.text = "";
            DetailBox::MaxPower::value.text = "";
            DetailBox::MaxTorque::value.text = "";
            DetailBox::Drivetrain::value.text = "";
            DetailBox::Length::value.text = "";
            DetailBox::Width::value.text = "";
            DetailBox::Height::value.text = "";
            DetailBox::Weight::value.text = "";
            DetailBox::FadeEffect.on_effect_end = nil;
            DetailBox::FadeEffect.reset();
        }
    }

    module CarColorSelector
    {
        static sDuration;
        attribute finder_;
        attribute result_;
        attribute prev_focus_;


        method open(context, car_code, focus_index)
        {
            ArcadeProject::ignorePadEvent(true);

            self.prev_focus_ = CarRoot.getFocusWidget();

            var initial_data = makeInitialDataForCarVariation(context, car_code, focus_index);
            self.finder_.replaceFolder(context, initial_data);

            var end_move = method(context) {
                self.insensitive = false;
                context.pushEvent(main::menu::MFunctionEvent(self.finder_.onFocus, context, CarRoot));
                ArcadeProject::ignorePadEvent(false);
                self.MoveEffect.on_effect_end = nil;
            }
            self.MoveEffect.reverse = false;
            self.MoveEffect.on_effect_end = self.*end_move;
            self.MoveEffect.start();
            self.insensitive = false;

            self.result_ = nil;

            context.enterEventLoop();
            var result = self.result_;
            self.result_ = nil;
            return result;
        }


        method close(context)
        {
            self.MoveEffect.reverse = true;
            self.MoveEffect.start();

            self.insensitive = true;
            CarRoot.setFocus(nil);

            context.sync(0.2);

            var dummy_initial_data = UIKitProject::FinderRoot.InitialData(UIKitProject::FinderRoot.makeCandidates([]));
            self.finder_.replaceFolder(context, dummy_initial_data);

            CarRoot.setFocus(self.prev_focus_);
            self.prev_focus_ = nil;

            BalloonTip.reset_value();

            context.leaveEventLoop();
        }

        method onLoad(context)
        {
            self.sDuration = hidden::ColorTip::FadeEffect.getStartDuration(0);
        }


        method onInitialize(context)
        {
            var dummy_initial_data = UIKitProject::FinderRoot.InitialData(UIKitProject::FinderRoot.makeCandidates([]));
            self.finder_ = UIKitProject::FinderRoot.setCopy(context,
                self.Composite,
                dummy_initial_data,
                false);
        }

        method onFinalize(context)
        {
            if (self.finder_ != nil)
            {
                var parent = self.finder_.parent;
                parent.removeChild(context, self.finder_);
                self.finder_ = nil;
            }
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            self.result_ = -1;
            self.close(context);
            return EVENTRESULT_FILTER;
        }

        method cb_init_color(context, candidate_data, item_w, arg)
        {
            var car_code = arg;

            var duration_time = candidate_data.item_index_ * self.sDuration + self.MoveEffect.getInterpolationPeriod(0);
            item_w.ColorFace.setCarColor(car_code, candidate_data.value_);
            item_w.FadeEffect.setStartDuration(0, duration_time);
            item_w.FadeEffect.restart();
        }


        method cb_selected_color(context, folder_data, func_close, arg)
        {
            |var car_code| = arg;
            var candidate_data = folder_data.getItemData();

            self.result_ = candidate_data.value_;

            self.close(context);
        }

        method cb_focused_color(context, candidate_data, item_w, arg)
        {
            |var car_code| = arg;
            var car_color = candidate_data.value_;

            var color_name = main::gtengine::MSpecDB::getCarColorName(car_code, car_color).trim();
            color_name = color_name.trim();
            if (color_name != "")
                BalloonTip.set_value(context, item_w, color_name, 20);
            else
                BalloonTip.reset_value();

            SceneFace.setCarVariation(car_color);
        }

        method makeInitialDataForCarVariation(context, car_code, focus_index)
        {
            var variation = main::gtengine::MSpecDB::getCarVariation(car_code);

            var list = Array(variation);
            for (var i = 0; i < variation; i++)
            {
                list[i] = i;
            }

            if (focus_index == nil)
                focus_index = main::gtengine::MSpecDB::getCarVariationFlag(car_code, 1);

            var initial_data = UIKitProject::FinderRoot.InitialData();
            initial_data.view_type_ = UIKitProject::FinderRoot::ViewType::SCROLL_H;
            initial_data.candidates_ = UIKitProject::FinderRoot.makeCandidates(list);
            initial_data.extended_item_ = hidden::ColorTip;
            initial_data.tint_visible_ = false;
            initial_data.cancel_behavior_ = nil;
            initial_data.focus_index_ = focus_index;
            initial_data.cb_init_item_ = self.cb_init_color;
            initial_data.cb_init_item_arg_ = car_code;
            initial_data.cb_on_activate_ = self.cb_selected_color;
            initial_data.cb_on_activate_arg_ = [car_code];
            initial_data.cb_focus_enter_ = self.cb_focused_color;
            initial_data.cb_focus_enter_arg_ = [car_code];
            initial_data.import_iconbox_parameter_ = Composite::IconBox;

            return initial_data;
        }
    }

    module SceneFace
    {
        attribute zoom_model_;
        attribute rotate_fast_;
        attribute rotate_speed_;
        attribute request_cp_;
        attribute current_cp_;
        attribute car_animation_thread_;
        attribute scene_fade_thread_;


        method getCar(cp)
        {
            if (self.current_cp_ != nil)
            {
                return self.current_cp_;
            }
            else if (self.request_cp_ != nil)
            {
                return self.request_cp_;
            }

            return nil;
        }

        method setCar(cp)
        {
            if (cp.isInstanceOf(gtengine::MCarParameter))
            {
                self.request_cp_ = cp;
            }
            else if (cp.isInstanceOf(gtengine::MCarThin))
            {
                self.request_cp_ = gtengine::MCarThin(cp.getCarCode());
                self.request_cp_.color = cp.color;
            }
            return;
        }

        method clearCar()
        {
            if (self.current_cp_ != nil)
            {
                self.execCommandImmidiate("clearEntity car0");
                self.current_cp_ = nil;
            }

            self._terminate_thread(self.scene_fade_thread_);
            SceneActor::CarFadeActor.reverse = false;
            SceneActor::CarFadeActor.reset();
            SceneActor::RotateSpeedActor.reverse = false;
            SceneActor::RotateSpeedActor.reset();
            SceneActor.opacity = 0.0;
            self.scene_fade = 0.0;
            self.rotate_fast_ = false;
            self.rotate_speed_ = 15.0;
        }

        method isSameCar(cp)
        {
            if (self.current_cp_ != nil)
            {
                var same_code = cp.getCarCode() == self.current_cp_.getCarCode();
                var same_color = cp.color == self.current_cp_.color;
                return [same_code, same_color];
            }
            else if (self.request_cp_ != nil)
            {
                var same_code = cp.getCarCode() == self.request_cp_.getCarCode();
                var same_color = cp.color == self.request_cp_.color;
                return [same_code, same_color];
            }
            return [false, false];
        }

        method setCarVariation(car_color)
        {
            if (car_color == nil)
                car_color = 0;

            self.execCommand("setCarVariation %{car_color} car0");
            if (request_cp_ != nil)
                self.request_cp_.color = car_color;
            if (current_cp_ != nil)
                self.current_cp_.color = car_color;
        }

        method loadCar()
        {
            if (self.request_cp_ == nil)
                return;
            if (self.request_cp_.getCarCode() == main::gtengine::MSpecDB::NO_CODE64)
                return;


            var car_code = self.request_cp_.getCarCode();
            var car_label = self.request_cp_.getCarLabel();
            var car_color = self.request_cp_.color;

            self.resetCommandQueue();
            if (self.request_cp_.isInstanceOf(gtengine::MCarParameter))
            {
                self.setDefaultCarParameter(self.request_cp_, 0);
                self.execCommand("changeCar _default car0 true false mirror");
            }
            else if (self.request_cp_.isInstanceOf(gtengine::MCarThin))
            {
                var request_cp = main::gtengine::MCarParameter(self.request_cp_);
                self.setDefaultCarParameter(request_cp, 0);
                self.execCommand("changeCar _default car0 true false mirror");
            }
            self.execCommand("resetGlobalMotionFrame");

            self.current_cp_ = self.request_cp_;
            self.request_cp_ = nil;


            var is_racing_kart = gtengine::MSpecDB::checkGenericFlag("is_racing_kart", car_code);
            self.zoom_factor = is_racing_kart ? 1.2 : 1.0;


            self._terminate_thread(self.scene_fade_thread_);
            self.scene_fade_thread_ = self._start_thread(self._scene_fade);
        }

        method setRotateFast(speed_fast)
        {

            if (!self.zoom_model_)
            {
                self.rotate_fast_ = speed_fast;
                OverLapRoot::ButtonHelpGT5.setInsensitive("Square", speed_fast);
                return true;
            } 
            else 
            {
                return false;
            }
        }

        method setZoomModel(zoom)
        {
            if (self.current_cp_ != nil)
            {
                var is_ps3 = main::gtengine::MSpecDB::checkGenericFlag("has_premium_model", self.current_cp_.getCarCode());
                if (!is_ps3)
                    return false;
            }


            if (!self.rotate_fast_)
            {
                self.zoom_model_ = zoom;
                OverLapRoot::ButtonHelpGT5.setInsensitive("Triangle", zoom);
                return true;
            }

            return false;
        }

        method _scene_fade(context)
        {
            while (true)
            {
                if (self.current_cp_ == nil)
                    return;

                if (!self.isUnderSetup())
                {

                    SceneActor::CarFadeActor.start();

                    if (!CarRoot::sCaptureMode)
                    {

                        if (!SceneActor::CarFadeActor.reverse && 0.5 < self.scene_fade)
                        {
                            SceneActor::RotateSpeedActor.reverse = !self.rotate_fast_;
                            SceneActor::RotateSpeedActor.start();
                        }

                        self.setEntityRotateVelocityY("CAR", "car0", SceneActor.rotate);
                    } else {
                    
                        self.setEntityRotateY("CAR", "car0", CarRoot::hidden::CaptureCarAngleValue.text.toInt());
                    }
                }
                
                self.scene_fade = SceneActor.opacity;

                Thread::Sleep(0.005);
            }
        }

        method _start_thread(exec_function)
        {
            var thread = Thread(exec_function);
            thread.start();
            return thread;
        }


        method _terminate_thread(thread)
        {
            if (thread != nil)
            {
                thread.terminate();
                thread = nil;
            }
        }

        method onInitialize(context)
        {
            self.rotate_fast_ = false;
            self.zoom_model_ = false;
            self.rotate_speed_ = 15.0;
            self.setClearColorBuffer(false);

            self.loadCommandFile("code:s0397");

            self.saveCommandQueue();
        }

        method onFinalize(context)
        {
            self._terminate_thread(self.scene_fade_thread_);

            self.request_cp_ = nil;
            self.current_cp_ = nil;
        }
    }
}