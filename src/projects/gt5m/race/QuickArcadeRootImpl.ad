//---------------------------------------------------------------------------------------
// QuickArcadeRootImpl.ad (standalone script)
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

#ifndef ROOT
    #define ROOT QuickArcadeRoot
#endif

#include "DetailUtil.ad"

module ROOT
{
    RaceProject.load("/scripts/gt5m/util/ArcadeDifficultyUtil");
    RaceProject.load("/scripts/gt5m/util/RewardUtil");

    attribute sStartRaceBlock = nil;
    attribute sCanExit = true;

    method onStartRace(context)
    {
        if (ROOT.sStartRaceBlock)
            return;

        if (TextFaceLoading.visible)
            return;

        applyEnemyLevel();

        var res = RaceProject::doStartRace(context);
        if (res)
            self.sStartRaceBlock = true;

        return EVENTRESULT_FILTER;
    }

    method onStartReplay(context)
    {
        PluginModule::doStartReplay(context);
        return EVENTRESULT_FILTER;
    }

    method onSaveReplay(context)
    {
        context.cursor_visible = false;
        ActorUtil::ResetInterpolators(VeilForSave, false);
        var targets = [MainFrame, bg, Header, Controller];
        foreach (var w in targets)
            w.visible = false;

        PluginModule::doSaveReplay(context);
        foreach (var w in targets)
            w.visible = true;

        ActorUtil::ResetInterpolators(VeilForSave, true);
        context.cursor_visible = true;

        return EVENTRESULT_FILTER;
    }

    method onExit(context)
    {
        SequenceUtil::startSequence(context, main::GameSequence::MENU);

        SoundUtil::BGMFadeout(1.0);
        main::ORG.getRaceSound().start = false;

        return EVENTRESULT_FILTER;
    }

    method open(context)
    {
        main::ORG.pauseAvailable = false;

        SequenceUtil::startPage(context, ROOT);
    }

    method on_initialize_info(context)
    {
    }

    method on_checkin_done(context)
    {
        on_initialize_info(context);
    }

    method changeDifficulty(context)
    {
        var rp = main::RaceOperator.race_parameter;
        updateQuickRaceInfo(context, rp);
        updatePankuzu(context, rp);

        var event = gSequenceCondition.event;
        event.reward.prize_table = RewardUtil::calculate(gSequenceCondition.course_length,
                                                         rp.race_limit_laps,
                                                         main::GlobalStatus::game_context.race_difficulty,
                                                         main::GlobalStatus::game_context.penalty_level);
    }

    method applyEnemyLevel()
    {
        var diff = main::GlobalStatus::game_context.race_difficulty;
        var ai_level = ArcadeDifficultyUtil::getAISkillByDifficulty(diff);

        var course_code = getCurrentCourse();
        var sr_rank = gSequenceCondition.game_status.user_profile.record.getBoardSR(course_code);

        if (sr_rank != nil && sr_rank.rank != nil && diff == (4 - sr_rank.rank))
            ai_level = sr_rank.point;

        for (var i = 0; i < main::ORG.getEntryMaxAtCurrentRace(); i++)
        {
            var dp = main::ORG.getEntriedDriverParameter(i);
            if (dp != nil && !dp.isHuman())
                dp.setAILevel(ai_level);

            main::ORG.setChangeableDriverParameterAtBeginningOfSession(i, nil, dp);
        }

        var param = ArcadeDifficultyUtil::getBoostParamByDifficulty(diff);
        var rp = main::RaceOperator.race_parameter;
        rp.setBoostParams(param[0], param[1], param[2], param[3], param[4], param[5]);

        main::RaceOperator.race_parameter = rp;
    }

    method on_initialize_demo(context)
    {
        main::ORG.pauseAvailable = false;

        changeDifficulty(context);

    }

    method on_loading_done(context)
    {
        Veil::ScalarInterpolator.reverse = true;
        Veil::ScalarInterpolator.start();

        on_initialize_demo(context);

        TextFaceLoading.visible = false;

        ROOT.sCanExit = true;

        var auto_start = false;
        if (main::AppOpt["bootrace"] != nil)
            auto_start = true;
        if (auto_start)
            Controller::HBox::Start.onActivate(context);
        else
        {
            SoundUtil::BGMFadeout(0.5);
            SoundUtil::BGMPlayGroup('menu', "quick_before");
        }

        Controller::HBox::Start.active = true;
        Controller::HBox::Exit.active = true;
    }

    method onInitialize(context)
    {
        main::ORG.pauseRace = true;

        main::ORG.disableRenderingRace();
        main::ORG.disableSoundingRace();

        self.sStartRaceBlock = false;
        BalloonTip.visible = false;
        BalloonTip.initialize(context);

        RenderControl.begin(main::ORG);

        Veil::ScalarInterpolator.on_effect_end = function (context)
        {
            BalloonTip.visible = true;
            main::menu::MFocusEnterEvent(context, ROOT.focus_widget).dispatchEvent();
            Veil::ScalarInterpolator.on_effect_end = nil;
        }
        Veil::ScalarInterpolator.reverse = true;
        Veil::ScalarInterpolator.restart();
        Veil::ScalarInterpolator.reverse = false;

        showQuickBoard(context);
        createQuickRaceInfo(context);
        DetailUtil::createQuickCourseInfo(context, ROOT, MainFrame);
        DetailUtil::createQuickCarInfo(context, ROOT, MainFrame);

        if (main::ORG.canEnterCourse())
        {
            self.sCanExit = true;
            TextFaceLoading.visible = false;
            self.on_initialize_info(context);
            self.on_initialize_demo(context);
            Veil::ScalarInterpolator.reverse = true;
            Veil::ScalarInterpolator.start();
            Controller::HBox::Start.active = true;
            Controller::HBox::Exit.active = true;
        }
        else
        {
            TextFaceLoading.visible = true;

            self.sCanExit = false;
            LoadingUtil::start(context, self, on_checkin_done, on_loading_done);
            Controller::HBox::Start.active = false;
            Controller::HBox::Exit.active = false;
        }

        ROOT.setFocus(Controller::HBox::Start);

        if (main::ORG.canEnterCourse())
        {
            var is_finished = gSequenceCondition.finish_result != nil &&
                              gSequenceCondition.finish_result != main::gtengine::FinishResult::NONE;
            SoundUtil::BGMPlayGroup('menu', is_finished ? "quick_after" : "quick_before");
        }
    }

    method onFinalize(context)
    {
        self.sStartRaceBlock = nil;

        MainFrame.clearChildren(context);

        main::ORG.endSession();
        main::ORG.pauseRace = false;
        main::ORG.pauseAvailable = true;
        main::ORG.disableRenderingRace();
        main::ORG.disableSoundingRace();

        RenderControl.end(main::ORG);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.setFocus(Controller::HBox::Exit);
        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PSP_PAD_CTRL_START:
                onStartRace(context);
                return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }

    method showQuickBoard(context)
    {
        var board = Template::QuickBoard.doCopy(context);
        board.visible = false;
        MainFrame.appendChild(context, board);

        var is_not_finished = gSequenceCondition.finish_result == nil ||
                              gSequenceCondition.finish_result == main::gtengine::FinishResult::NONE;

        if (is_not_finished)
        {
            var listbox = board.Body2;

            board.Body.visible = false;

            board.title.text = context.translate(ROOT, "StartingGrid");

            var rp = main::RaceOperator.race_parameter;
            var list = main::RaceOperator.getAccountFixedCarParameterList();
            listbox.setItemCount(list.size);
            listbox.setItemTemplate(context, Template::QuickBoardItem);

            for (var i = 0; i < list.size; ++i)
            {
                var cp = list[i];
                var item = listbox.getItemWidget(i, context);
                item.initializeForBeforeArcade(context, i + 1, cp);
                if (i == 0 && list.size < 4)
                    listbox.h = item.h * list.size;
            }
        }
        else
        {
            var listbox = board.Body;
            board.VScrollbar.adjustment = listbox.adjustment;
            board.Body2.visible = false;

            board.title.text = context.translate(ROOT, "RaceResult");

            var entry_list = gSequenceCondition.result_entry_list;
            if (entry_list != nil)
            {
                listbox.setItemCount(entry_list.size);
                listbox.setItemTemplate(context, Template::QuickBoardItem);

                for (var i = 0; i < entry_list.size; ++i)
                {
                    var entry = entry_list[i];
                    var item = listbox.getItemWidget(i, context);
                    item.initializeForAfterArcade(context, i + 1, entry.cp, entry.total_time, entry.total_time_diff);
                    if (i == 0 && entry_list.size < 4)
                        listbox.h = item.h * entry_list.size;
                }
            }
        }

        Controller::HBox.Replay.visible = PluginModule.defined("canStartReplay") && PluginModule::canStartReplay();

        var rp = main::RaceOperator.race_parameter;
        updatePankuzu(context, rp);

        board.visible = true;
        ActorUtil::ResetInterpolators(board, true, true);
    }

    method getQuickRaceInfoValues(context, rp)
    {
        var course_length = gSequenceCondition.course_length;
        var laps = rp.race_limit_laps;
        var difficulty = main::GlobalStatus::game_context.race_difficulty;
        var penalty_level = 0;
        var rewards = RewardUtil::calculate(course_length, laps, difficulty, penalty_level);
        
        var list = [ "%d %s".format(laps, context.translate(ROOT, "TrialSetting", "Syuu")),
                     main::pdiext::MMisc::GetMoneyString(rewards[0]),
                     main::pdiext::MMisc::GetMoneyString(rewards[1]),
                     main::pdiext::MMisc::GetMoneyString(rewards[2]) ];
        return list;
    }

    method createQuickRaceInfo(context)
    {
        var rp = main::ORG.getCurrentRaceParameter();
        var values = getQuickRaceInfoValues(context, rp);
        var list = [ [ "label" : "Laps",      "value" : values[0] ],
                     [ "label" : "PRIZE_1ST", "value" : values[1] ],
                     [ "label" : "PRIZE_2ND", "value" : values[2] ],
                     [ "label" : "PRIZE_3RD", "value" : values[3] ] ];

        var title = context.translate(ROOT, "Arcade", "singlerace");

        DetailUtil::createQuickInfo(context, ROOT, MainFrame, title, list);
    }

    method updateQuickRaceInfo(context, rp)
    {
        var values = getQuickRaceInfoValues(context, rp);
        var listbox = MainFrame.getChild(1).Body2;
        for (var i = 0; i < values.size; ++i)
        {
            var item = listbox.getItemWidget(i, context);
            item.Value.TextFace.text = values[i];
        }
    }

    method updatePankuzu(context, rp)
    {
        var pankuzu_format = context.translate(ROOT, "PankuzuSingleRace");

        var rank = main::GlobalStatus::game_context.race_difficulty;
        var rank_table = ["RANK_D", "RANK_C", "RANK_B", "RANK_A", "RANK_S"];
        var rank_text = context.translate(ROOT, "TrialSetting", rank_table[rank]);

        Header.TextFacePankuzu.text = pankuzu_format.build(rank_text, rp.race_limit_laps);
    }

    module Controller::HBox
    {
        attribute quick_index = -1;

        method onFocusEnter(context, event)
        {
            var w = event.widget;
            BalloonTip.set_value(context, w, w.balloon.text, 3.5);

            if (self.quick_index != w.quick_index)
            {
                for (var i = 0; i < MainFrame.countChild(); ++i)
                {
                    if (i != w.quick_index)
                        ActorUtil::ResetInterpolators(MainFrame.getChild(i), true, true);
                }

                if (w.quick_index != -1)
                    ActorUtil::ResetInterpolators(MainFrame.getChild(w.quick_index), false);

                self.quick_index = w.quick_index;
            }

            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }

        module Start
        {
            attribute quick_index = 0;

            method onActivate(context)
            {
                if (ROOT.sStartRaceBlock)
                    return EVENTRESULT_FILTER;

                if (TextFaceLoading.visible)
                {
                    main::sound.play("cancel");
                    return EVENTRESULT_FILTER;
                }

                Blink.ScalarInterpolator.restart();

                ROOT.onStartRace(context);

                return EVENTRESULT_FILTER;
            }
        }

        module Opt::RaceDetail
        {
            attribute quick_index = 1;

            method showRaceDetail(context, rp)
            {
                var option = gSequenceCondition.game_status.user_profile.option;

                var one_make = false;
                {
                    var event = gSequenceCondition.event;
                    if (event.entry_set.entry_generate.generate_type == main::GamePlan::GenerateType::ONE_MAKE)
                        one_make = true;
                }

                var data = DetailProject::RaceDetailPopup::Data();
                data.mode = main::GlobalStatus::game_context.game_mode;
                data.arcade_laps = rp.race_limit_laps;
                data.course_length = gSequenceCondition.course_length;
                data.one_make = one_make;
                data.can_change_one_make = false;

                var result = DetailProject::RaceDetailPopup.open(context, data);
                if (result["result"])
                {
                    var arcade_laps = result["arcade_laps"];
                    option.arcade_laps = arcade_laps;
                    rp.race_limit_laps = arcade_laps;
                    rp.penalty_level = main::GlobalStatus::game_context.penalty_level;

                    var event = gSequenceCondition.event;
                    event.race.penalty_level = main::GlobalStatus::game_context.penalty_level;
                    event.reward.prize_table = RewardUtil::calculate(gSequenceCondition.course_length,
                                                                     arcade_laps,
                                                                     main::GlobalStatus::game_context.race_difficulty,
                                                                     main::GlobalStatus::game_context.penalty_level);

                    main::RaceOperator.race_parameter = rp;
                }

                return result["result"];
            }

            method onActivate(context)
            {
                if (ROOT.sStartRaceBlock)
                    return EVENTRESULT_FILTER;
                
                main::sound.play("ok");

                var rp = main::RaceOperator.race_parameter;

                if (showRaceDetail(context, rp))
                {
                    updateQuickRaceInfo(context, rp);
                    updatePankuzu(context, rp);
                }

                return EVENTRESULT_FILTER;
            }
        }

        module Opt::CourseDetail
        {
            attribute quick_index = 2;

            method onActivate(context)
            {
                if (ROOT.sStartRaceBlock)
                    return EVENTRESULT_FILTER;

                main::sound.play("ok");
                if (DetailUtil::showCourseDetail(context))
                {
                    var listbox = MainFrame.getChild(self.quick_index).Body2;
                    DetailUtil::updateQuickCourseInfo(context, ROOT, listbox);

                    changeDifficulty(context);
                }
                
                return EVENTRESULT_FILTER;
            }
        }

        module Opt::CarDetail
        {
            attribute quick_index = 3;

            method onActivate(context)
            {
                if (ROOT.sStartRaceBlock)
                    return EVENTRESULT_FILTER;
                
                main::sound.play("ok");
                if (DetailUtil::showCarDetail(context, false, false))
                {
                    var listbox = MainFrame.getChild(self.quick_index).Body2;
                    DetailUtil::updateQuickCarInfo(context, ROOT, listbox);
                }
                return EVENTRESULT_FILTER;
            }
        }

        module Replay::LoadReplay
        {
            attribute quick_index = 0;

            method onActivate(context)
            {
                if (ROOT.sStartRaceBlock)
                    return EVENTRESULT_FILTER;

                onStartReplay(context);
                return EVENTRESULT_FILTER;
            }
        }

        module Replay::SaveReplay
        {
            attribute quick_index = 0;

            method onActivate(context)
            {
                if (ROOT.sStartRaceBlock)
                    return EVENTRESULT_FILTER;

                onSaveReplay(context);
                return EVENTRESULT_FILTER;
            }
        }

        module Exit
        {
            attribute quick_index = 0;

            method onActivate(context)
            {
                if (ROOT.sStartRaceBlock)
                    return EVENTRESULT_FILTER;

                if (ROOT.sCanExit) {
                    main::sound.play("ok");
                    onExit(context);
                } 
                else 
                {
                    main::sound.play("cancel");
                }
                
                return EVENTRESULT_FILTER;
            }
        }
    }
}