module ROOT
{
    attribute popup;
    attribute closed = false;
    attribute result;
    attribute user_profile;

    method open(context)
    {
        self.result = false;

        self.closed = false;
        self.popup = main::SequenceUtil::ModalPage(context, ROOT);
        self.popup.open();

        return self.result;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;
        ContextMain.event_mask = 5;
        ContextMain.disableInput();

        FadeActor.on_effect_end = function (context)
        {
            if (ROOT.popup != nil)
            {
                ROOT.popup.close();
                ROOT.popup = nil;
            }

            ContextMain.enableInput();
        }

        FadeActor.out = true;

    }

    method onInitialize(context)
    {
        var format = context.translate(ROOT, "MyHome", "WITHIN_N_LETTERS");

        Popup::Pane::Body::OnlineRace::Entry::HBox::TextFace.text = "%s %s".format(
            context.translate(ROOT, "AutoMessage", "CASE_ENTRY"), format.build(30)
        );

        Popup::Pane::Body::OnlineRace::Win::HBox::TextFace.text = "%s %s".format(
            context.translate(ROOT, "AutoMessage", "CASE_WIN"), format.build(30)
        );

        Popup::Pane::Body::OnlineRace::Exit::HBox::TextFace.text = "%s %s".format(
            context.translate(ROOT, "AutoMessage", "CASE_EXIT"), format.build(30)
        );

        var auto_message = GAME_STATUS.user_profile.context.auto_message;
        Popup::Pane::Body::OnlineRace::Entry::InputText::InputTextFace.value = auto_message.entry;
        Popup::Pane::Body::OnlineRace::Win::InputText::InputTextFace.value = auto_message.win;
        Popup::Pane::Body::OnlineRace::Exit::InputText::InputTextFace.value = auto_message.exit;

        ROOT.setFocus(Popup::Pane::FootRow::CancelOK::OK);

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {

    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.setFocus(Popup::Pane::FootRow::CancelOK::Cancel);

        return EVENTRESULT_FILTER;
    }

    method updateData(context)
    {
        var auto_message = GAME_STATUS.user_profile.context.auto_message;

        var entry = Popup::Pane::Body::OnlineRace::Entry::InputText::InputTextFace.value;
        var win = Popup::Pane::Body::OnlineRace::Win::InputText::InputTextFace.value;
        var exit = Popup::Pane::Body::OnlineRace::Exit::InputText::InputTextFace.value;

        var changed = entry != auto_message.entry || win != auto_message.win || exit != auto_message.exit;
        if (!changed)
            return true;

        VulgarityFilterUtil::begin();

        | var entry_result, var entry_sanitized_text| = VulgarityFilterUtil::check(entry);
        | var win_result, var win_sanitized_text| = VulgarityFilterUtil::check(win);
        | var exit_result, var exit_sanitized_text| = VulgarityFilterUtil::check(exit);

        VulgarityFilterUtil::end();

        if (!entry_result || !win_result || !exit_result)
            return false;

        auto_message.entry = entry_sanitized_text;
        auto_message.win = win_sanitized_text;
        auto_message.exit = exit_sanitized_text;

        ROOT.result = true;

        return true;
    }

    module Popup::Pane
    {
        module FootRow::CancelOK
        {
            module Cancel
            {
                method onActivate(context)
                {
                    main::sound.play("ok");
                    ROOT.close(context);
                
                    return EVENTRESULT_FILTER;
                }
            
                method onCancel(context)
                {
                    main::sound.play("cancel");
                    ROOT.close(context);
                
                    return EVENTRESULT_FILTER;
                }            
            }

            module OK
            {
                method onActivate(context)
                {
                    main::sound.play("ok");

                    var res = ROOT.updateData(context);
                    if (res)
                        ROOT.close(context);                
                    else
                    {
                        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, 
                        context.translate(ROOT, "Network", "ERROR_ONLINE_FUNCTION"));
                    }
                
                    return EVENTRESULT_FILTER;
                }    
            }
        }    
    }
}