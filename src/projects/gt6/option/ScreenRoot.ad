













module ROOT
{
    static sOpenMode;
    static sPreviousBrightness;
    static sPreviousQuality;
    static sPreviousDisplayMarginSD;
    static sPreviousDisplayMarginHD;

    static ScanMode = [
        "i" : "interlace",
        "p" : "progressive",
    ];

    static RefleshRate = [
        50 : "50",
        59 : "59.94",
        60 : "60",
    ];

    static sEnDush = "-";

    static resolution_list_org = [
        "1920 x 1080",
        "1280 x 1080",
        "720",
        "576 (16:9)",
        "576 (4:3)",
        "480 (16:9)",
        "480 (4:3)",
    ];

    static resolution_list = [];

    static resolution_value_org = [
        [1440, 1080, false],
        [1280, 1080, false],
        [1280, 720, false],
        [720, 576, false],
        [720, 576, true],
        [720, 480, false],
        [720, 480, true],
    ];

    static resolution_value = [];

    function createResolutionList()
    {
        if (ORG.getUseParallaxView())
        {
            resolution_list = ["--"];
            resolution_value = [ 
                [0, 0, false] 
            ];
        }
        else
        {
            var list = [];
            var value = [];
            for (var i = 0; i < resolution_list_org.size; ++i)
            {
                var reso = resolution_value_org[i];
                if (ORG.isSelectableGameResolution(reso[0], reso[1], reso[2]))
                {
                    list.push(resolution_list_org[i]);
                    value.push(resolution_value_org[i]);
                }
            }

            resolution_list = list;
            resolution_value = value;
        }
    }

    function getResolutionIndex(width, height, is4x3)
    {
        for (var i = 0; i < resolution_value.size; ++i)
        {
            if (height == 1080)
            {
                if (width == resolution_value[i][0] &&
                    height == resolution_value[i][1])
                        return i;
            }
            else
            {
                if (width == resolution_value[i][0] &&
                    height == resolution_value[i][1] &&
                    is4x3 == resolution_value[i][2])
                    return i;
            }
        }

        return -1;
    }

    function getResolution(idx)
    {
        return resolution_value[idx];
    }

    method open(context, open_mode)
    {
        if (open_mode != nil) 
            sOpenMode = open_mode;

        SettingFrame.appear();
        SequenceUtil::pushPage(context, self);
    }

    method close(context)
    {
        var delay_time = SettingFrame.hide();
        SequenceUtil::popPage(context, self, delay_time);
    }

    method reflect(context)
    {
        var option = main::GAME_STATUS.user_profile.option;
        var reso = main::pdiext::MSystemConfiguration::GetDisplayResolution();

        if (reso[0] == 1440)
            reso[0] = 1920;

        var ext_mode = "";
        if (reso[1] == 1470)
        {
            reso[1] = 720;
            ext_mode = "[3D]";
        }

        var scan_mode = context.translate(ROOT, ScanMode[reso[2]] + "_short");
        var refresh_rate = RefleshRate[reso[3].toInt()];
        if (refresh_rate == nil)
            refresh_rate = "";

        var region = pdiext::MProductInformation::GetGameRegionCode();
        var language = pdistd::MLocale::getLanguage();

        if ((region == "scee" || region == "sceb") && language != "GB")
            refresh_rate = refresh_rate.split(".").join(",");

        SettingFrame::Pane::ScrolledBody::clip::space::CurrentReso::Text::label.text = "%d x %d %s%s %s".format(
            reso[0], reso[1], refresh_rate, scan_mode, ext_mode
        );
        SettingFrame::Pane::ScrolledBody::clip::space::CurrentReso::Text::label.adjustScale();

        if (!ORG.getUseParallaxView())
        {
            |var width, var height, var is4x3| = ORG.getGameResolution();
            var idx = getResolutionIndex(width, height, is4x3);
            SettingFrame::Pane::ScrolledBody::clip::space::Reso::OptionMenu.setIndex(context, idx);
        }
        else
        {
            SettingFrame::Pane::ScrolledBody::clip::space::Reso::OptionMenu.setIndex(context, 0);
        }

        SettingFrame::Pane::ScrolledBody::clip::space::Brightness::slider.index = (option.screen_brightness - 50) / 5;
        SettingFrame::Pane::ScrolledBody::clip::space::Brightness::slider.reflect(context);

        SettingFrame::Pane::ScrolledBody::clip::space::ImageQuality::OptionMenu.setIndex(context, option.image_quality);

        SettingFrame::Pane::ScrolledBody::clip::space::DisplaySizeSD::slider.index = 100 - option.display_margin_sd;
        SettingFrame::Pane::ScrolledBody::clip::space::DisplaySizeSD::slider.reflect(context);

        SettingFrame::Pane::ScrolledBody::clip::space::DisplaySizeHD::slider.index = 100 - option.display_margin_hd;
        SettingFrame::Pane::ScrolledBody::clip::space::DisplaySizeHD::slider.reflect(context);
    }

    method apply(context)
    {
        var option = main::GAME_STATUS.user_profile.option;
        if (!ORG.getUseParallaxView())
        {
            |var width, var height, var is4x3| = getResolution(SettingFrame::Pane::ScrolledBody::clip::space::Reso::OptionMenu.index);
            ORG.setGameResolution(width, height, is4x3);
        }

        option.screen_brightness = SettingFrame::Pane::ScrolledBody::clip::space::Brightness::slider.index * 5 + 50;

        option.image_quality = SettingFrame::Pane::ScrolledBody::clip::space::ImageQuality::OptionMenu.index;

        option.display_margin_sd = 100 - SettingFrame::Pane::ScrolledBody::clip::space::DisplaySizeSD::slider.index;
        option.display_margin_hd = 100 - SettingFrame::Pane::ScrolledBody::clip::space::DisplaySizeHD::slider.index;
        option.apply();
    }

    method onInitialize(context)
    {
        if (gDirectApplyMode)
            SettingFrame::Pane::Foot.visible = false;
        
        ScreenMarker.visible = false;

        var option = main::GAME_STATUS.user_profile.option;

        sPreviousBrightness = option.screen_brightness;
        sPreviousQuality = option.image_quality;
        sPreviousDisplayMarginSD = option.display_margin_sd;
        sPreviousDisplayMarginHD = option.display_margin_hd;

        createResolutionList();

        OptionMenuUtil::initialize(context, ROOT, 
            SettingFrame::Pane::ScrolledBody::clip::space::Reso::OptionMenu,
            OptionRoot::hidden::PulldownItem,
            resolution_list, "Resolution");

        SettingFrame::Pane::ScrolledBody::clip::space::Reso::OptionMenu.insensitive = ORG.getUseParallaxView();

        PROJECT.SetWidgetEnable(false, SettingFrame::Pane::ScrolledBody::clip::space.getChildList());

        var focus_w;
        switch (sOpenMode)
        {
            case "DISP_size":
                SettingFrame::Pane::Head::label.text = context.translate(OptionRoot, "DISP_size");
                SettingFrame::Pane::ScrolledBody::clip::space::CurrentReso.is_enable = true;
                if (GetVersionBranch() == "runviewer")
                    SettingFrame::Pane::ScrolledBody::clip::space::Reso.is_enable = true;

                var is_sd = main::pdiext::MSystemConfiguration::isSDTV();
                var sd_slider = SettingFrame::Pane::ScrolledBody::clip::space::DisplaySizeSD::slider;
                sd_slider.setup(context);
                sd_slider.insensitive = !is_sd;

                var hd_slider = SettingFrame::Pane::ScrolledBody::clip::space::DisplaySizeHD::slider;
                hd_slider.setup(context);
                hd_slider.insensitive = is_sd;
                SettingFrame::Pane::ScrolledBody::clip::space::DisplaySizeHD.is_enable = true;

                PROJECT.SetWidgetEnable(true, [SettingFrame::Pane::ScrolledBody::clip::space::DisplaySizeSD,
                    SettingFrame::Pane::ScrolledBody::clip::space::DisplaySizeHD]);

                if (is_sd)
                    focus_w = sd_slider;
                else
                    focus_w = hd_slider;
                break;

            case "DISP_output":
                SettingFrame::Pane::Head::label.text = context.translate(OptionRoot, "DISP_output");
                SettingFrame::Pane::ScrolledBody::clip::space::Brightness::slider.format_callback = (context, value, _self) => 
                {
                    if (value == 0)
                        return "+0";

                    var sign_text = value >= 0 ? "+" : manager.translate("SpecialCharacter", "EnDash");
                    return sign_text + "%.1f".format(Math::abs(value.toFloat()) / 10f);
                };

                SettingFrame::Pane::ScrolledBody::clip::space::Brightness::slider.setup(context, 1, "+0 EV", " EV");

                PROJECT.SetWidgetEnable(true, [SettingFrame::Pane::ScrolledBody::clip::space::Brightness,
                    SettingFrame::Pane::ScrolledBody::clip::space::ImageQuality]);

                focus_w = SettingFrame::Pane::ScrolledBody::clip::space::Brightness::slider;
                break;
        }             
        
        reflect(context);
        SettingFrame.adjust_scrolled_body();
        ROOT.setFocus(focus_w);
        SettingFrame::Pane::ScrolledBody::clip::space.parent.warp(focus_w);
    }

    method onFinalize(context)
    {
        OptionMenuUtil::finalize(context, SettingFrame::Pane::ScrolledBody::clip::space::Reso::OptionMenu);
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        if (gDirectApplyMode)
        {
            ROOT.apply();
            ROOT.close(context);
        }
        else
            ROOT.setFocus(SettingFrame::Pane::Foot::Cancel);

        return EVENTRESULT_FILTER;
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Brightness::slider
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);

            var option = main::GAME_STATUS.user_profile.option;
            option.screen_brightness = self.index * 5 + 50;
            option.apply();
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::ImageQuality::OptionMenu
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);

            var option = main::GAME_STATUS.user_profile.option;
            option.image_quality = self.index;
            option.apply();
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::DisplaySizeSD::slider
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);

            var option = main::GAME_STATUS.user_profile.option;
            option.display_margin_sd = 100 - self.index;
            option.apply();
        }

        method onPopupOpen(context)
        {
            ScreenMarker.visible = true;
            __prototype__::onPopupOpen(context);
        }

        method onPopupClosed(context)
        {
            ScreenMarker.visible = false;
            __prototype__::onPopupClosed(context);
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::DisplaySizeHD::slider
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);

            var option = main::GAME_STATUS.user_profile.option;
            option.display_margin_hd = 100 - self.index;
            option.apply();
        }

        method onPopupOpen(context)
        {
            ScreenMarker.visible = true;
            __prototype__::onPopupOpen(context);
        }

        method onPopupClosed(context)
        {
            ScreenMarker.visible = false;
            __prototype__::onPopupClosed(context);
        }
    }

    module SettingFrame::Pane::Foot::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.apply();
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::Foot::Cancel
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            ScreenRoot.close(context);
            return EVENTRESULT_FILTER;
        }
    }
}