//---------------------------------------------------------------------------------------
// OptionRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ROOT
{
    #include "projects/gt5m/option/KeyConfig.h";
    #include "projects/gt5m/option/PSPController.h";

    hidden.visible = false;

    attribute option_at_the_beginning = nil;
    attribute options = nil;
    attribute config = nil;
    attribute config_psp = nil;
    attribute change_focus = false;
    attribute is_closing = false;
    attribute suspend_sound_update = false;

    method open(context)
    {
        self.options = Map();
        self.is_closing = false;
        context.startPage(ROOT);
    }

    method close(context)
    {
        main::SequenceUtil::startProject(context, main::GameSequence::getArgument());
    }

    method onInitialize(context)
    {
        BalloonTip.initialize(context);

        self.change_focus = false;

        self.option_at_the_beginning = game_option().serialize();

        self.config = game_option().key_config.getConfig(0);
        var play_config = self.config[main::gtengine::InputMode::PLAY_NORMAL];
        self.config_psp = play_config["PLAYSTATION_PORTABLE"];

        Pane.initialize(context);

        reflectAll(context);

        self.setFocus(Pane::Tab::Header::General::Cursor);

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        Pane.finalize(context);

        self.option_at_the_beginning = nil;
        self.options = nil;
        self.config = nil;
        self.config_psp = nil;

        SoundUtil::BGMFadeout(1.0);

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        if (self.is_closing)
            return EVENTRESULT_FILTER;

        main::sound.play("cancel");
        ROOT.setFocus(Pane::Footer::HBox::Cancel);
        return EVENTRESULT_FILTER;
    }

    method closeImpl(context)
    {
        if (self.is_closing)
            return EVENTRESULT_FILTER;

        main::sound.play("cancel");
        self.is_closing = true;

        var close_ok = true;
        var option = game_option();

        applyGeneral(context, option);
        applyDevice(context, option);
        applySound(context, option);
        applyMisc(context, option);

        if (self.option_at_the_beginning != option.serialize())
        {
            if (DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "EXIT_WITHOUT_SAVE")))
                option.deserialize(self.option_at_the_beginning);
            else
                close_ok = false;
        }

        option.apply();

        if (close_ok)
            self.close(context);
        else
            self.is_closing = false;

        return EVENTRESULT_FILTER;
    }

    method reflectAll(context)
    {
        var option = game_option();
        reflectGeneral(context, option);
        reflectDevice(context, option);
        reflectSound(context, option);
        reflectMisc(context, option);
    }

    method reflectGeneral(context, option)
    {
        var general = Pane::Tab::Body::General::ScrollClip::space::General;
        general.Opening::OptionMenu.setIndex(context, 1 - option.opening_after_autoload);
        general.AutoSave::OptionMenu.setIndex(context, 1 - option.auto_save);
        var timelimit_index = option.arcade_time_limit;
        if (timelimit_index > 0)
            timelimit_index -= 25;

        general.TimeLimit::slider.index = timelimit_index;

        var off = context.translate(ROOT, "OFF");

        Pane::Tab::Body::General::ScrollClip::space::General::TimeLimit::slider.format_function = function (value, scale, range, format, zero_text)
        {
            if (value > 0)
                value += 25;

            var v = scale * value;
            if (v == 0 && zero_text != nil)
                return zero_text;

            return format.format(v);
        }

        Pane::Tab::Body::General::ScrollClip::space::General::TimeLimit::slider.setup(context, 1, off);
        Pane::Tab::Body::General::ScrollClip::space::Display::Mode::OptionMenu.setIndex(context, option.image_quality);
        Pane::Tab::Body::General::ScrollClip::space::Display::ButtonDisplay::OptionMenu.setIndex(context, option.disable_button_display);

        var unit = Pane::Tab::Body::General::ScrollClip::space::Unit;
        unit.Velocity::OptionMenu.setIndex(context, option.unit_velocity);
        unit.Power::OptionMenu.setIndex(context, option.unit_power);
        unit.Torque::OptionMenu.setIndex(context, option.unit_torque);
    }

    method reflectDevice(context, option)
    {
        foreach (|var key, var option_menu| in ROOT.options)
            reflectKeyConfig(context, option_menu);
    }

    method reflectSound(context, option)
    {
        self.suspend_sound_update = true;
        var volume = Pane::Tab::Body::Sound::ScrollClip::space::Volume;
        var user_bgm = Pane::Tab::Body::Sound::ScrollClip::space::UserBGM;
        var sound_misc = Pane::Tab::Body::Sound::ScrollClip::space::SoundMisc;

        var user_bgm_unlocked = LicenseUtil::canEntry(LicenseUtil::CATEGORY::D, game_status());

        volume.MenuBGM::slider.index = option.menu_bgm_volume;
        volume.MenuSE::slider.index = option.menu_se_volume;
        volume.RaceBGM::slider.index = option.race_bgm_volume;
        volume.RaceSE::slider.index = option.race_se_volume;
        volume.ReplayBGM::slider.index = option.replay_bgm_volume;
        volume.ReplaySE::slider.index = option.replay_se_volume;

        user_bgm.visible = user_bgm_unlocked;
        user_bgm.UserBGM::slider.index = option.user_bgm_volume;
        user_bgm.UserBGMSelect::OptionMenu.setIndex(context, option.sysbgm_use[1]);

        sound_misc.SpeakerEQ::slider.index = option.eq_speaker;
        sound_misc.DynamicRange::OptionMenu.setIndex(context, option.sound_dynamic_range);

        var off = context.translate(ROOT, "OFF");

        volume.MenuBGM::slider.setup(context, 1, off);
        volume.MenuSE::slider.setup(context, 1, off);
        volume.RaceBGM::slider.setup(context, 1, off);
        volume.RaceSE::slider.setup(context, 1, off);
        volume.ReplayBGM::slider.setup(context, 1, off);
        volume.ReplaySE::slider.setup(context, 1, off);
        user_bgm.UserBGM::slider.setup(context, 1, off);
        sound_misc.SpeakerEQ::slider.setup(context, 1, nil);
        self.suspend_sound_update = false;
    }

    method reflectMisc(context, option)
    {
        var battle = Pane::Tab::Body::Misc::ScrollClip::space::Battle;
        battle.DelayRatio::slider.index = option.battle_delay_ratio;
        battle.DelayRatio::slider.setup(context);
        battle.ShuffleBase::slider.index = option.battle_shuffle_base;
        battle.ShuffleBase::slider.setup(context, 1, nil, nil, true, 20);
        battle.ShuffleRatio::slider.index = option.battle_shuffle_ratio;
        battle.ShuffleRatio::slider.setup(context, 1, nil, nil, true, 10);
    }

    method applyAll(context)
    {
        if (!DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "EXIT_WITH_SAVE")))
            return false;

        self.is_closing = true;

        var option = game_option();
        applyGeneral(context, option);
        applyDevice(context, option);
        applySound(context, option);
        applyMisc(context, option);

        if (option.auto_save)
        {
            if (self.option_at_the_beginning != option.serialize())
                game_context().need_save = true;
        }

        option.apply();
        return true;
    }

    method applyGeneral(context, option)
    {
        var general = Pane::Tab::Body::General::ScrollClip::space::General;
        option.opening_after_autoload = 1 - general.Opening::OptionMenu.index;
        option.auto_save = 1 - general.AutoSave::OptionMenu.index;
        option.arcade_time_limit = general.TimeLimit::slider.index;
        if (option.arcade_time_limit > 0)
            option.arcade_time_limit += 25;

        option.image_quality = Pane::Tab::Body::General::ScrollClip::space::Display::Mode::OptionMenu.index;
        option.disable_button_display = Pane::Tab::Body::General::ScrollClip::space::Display::ButtonDisplay::OptionMenu.index;

        var unit = Pane::Tab::Body::General::ScrollClip::space::Unit;
        option.unit_velocity = unit.Velocity::OptionMenu.index;
        option.unit_power = unit.Power::OptionMenu.index;
        option.unit_torque = unit.Torque::OptionMenu.index;
    }

    method applyDevice(context, option)
    {
        foreach (|var key, var option_menu| in ROOT.options)
            applyKeyConfig(context, option_menu);

        option.key_config.setConfig(self.config, 0);
    }

    method applySound(context, option)
    {
        var volume = Pane::Tab::Body::Sound::ScrollClip::space::Volume;
        var user_bgm = Pane::Tab::Body::Sound::ScrollClip::space::UserBGM;
        var sound_misc = Pane::Tab::Body::Sound::ScrollClip::space::SoundMisc;

        option.menu_bgm_volume = volume.MenuBGM::slider.index;
        option.menu_se_volume = volume.MenuSE::slider.index;
        option.race_bgm_volume = volume.RaceBGM::slider.index;
        option.race_se_volume = volume.RaceSE::slider.index;
        option.replay_bgm_volume = volume.ReplayBGM::slider.index;
        option.replay_se_volume = volume.ReplaySE::slider.index;
        option.user_bgm_volume = user_bgm.UserBGM::slider.index;
        option.eq_speaker = sound_misc.SpeakerEQ::slider.index;
        option.sound_dynamic_range = sound_misc.DynamicRange::OptionMenu.index;
        option.sysbgm_use[1] = user_bgm.UserBGMSelect::OptionMenu.index;
    }

    method applyMisc(context, option)
    {
        var battle = Pane::Tab::Body::Misc::ScrollClip::space::Battle;
        option.battle_delay_ratio = battle.DelayRatio::slider.index;
        option.battle_shuffle_base = battle.ShuffleBase::slider.index;
        option.battle_shuffle_ratio = battle.ShuffleRatio::slider.index;
    }

    method reflectKeyConfig(context, option_menu)
    {
        var key_info = option_menu.key_info;
        var selected_index = -1;

        if (key_info.analog_channel != nil)
        {
            var port_channel = main::pdistd::SuperPortAnalogChannel[key_info.analog_channel];
            var analog_config = ROOT.config_psp["analog"];
            var key_config = analog_config[port_channel];

            var index = key_info.key_action_list.indexOf(0x800 | key_config);
            if (index > -1)
                selected_index = index;
        }

        if (key_info.button_channel != nil)
        {
            var port_channel = main::pdistd::SuperPortButtonBit[key_info.button_channel];
            var button_config = ROOT.config_psp["button"];
            var key_config = button_config[port_channel];
            var index = key_info.key_action_list.indexOf(0x400 | key_config);
            if (index > -1)
                selected_index = index;
        }

        if (selected_index > -1)
            option_menu.setIndex(context, selected_index);
        else
            option_menu.setIndex(context, option_menu.Count() - 1);
    }

    method applyKeyConfig(context, option_menu)
    {
        var key_info = option_menu.key_info;
        var current_action = key_info.key_action_list[option_menu.index];

        if (key_info.analog_channel != nil)
        {
            var port_channel = main::pdistd::SuperPortAnalogChannel[key_info.analog_channel];
            var analog_config = ROOT.config_psp["analog"];

            if (current_action & 0x800)
                analog_config[port_channel] = current_action - 0x800;
            else
                analog_config[port_channel] = main::gtengine::AnalogCode::INVALID;
        }

        if (key_info.button_channel != nil)
        {
            var port_channel = main::pdistd::SuperPortButtonBit[key_info.button_channel];
            var button_config = ROOT.config_psp["button"];

            if (current_action & 0x400)
                button_config[port_channel] = current_action - 0x400;
            else
                button_config[port_channel] = main::gtengine::ButtonCode::INVALID;
        }
    }

    method getActionList(context, key_info)
    {
        var result = Array();
        var action_list = key_info.key_action_list;
        for (var i = 0; i < action_list.size; i++)
        {
            var localize_key = "";
            if (action_list[i] & 0x800)
                localize_key = sAnalogCodeMap_forLocalizeKey[action_list[i] - 0x800];
            else if (action_list[i] & 0x400)
                localize_key = sButtonCodeMap_forLocalizeKey[action_list[i] - 0x400];

            result.push(localize_key);
        }
        return result;
    }

    module Pane
    {
        method initialize(context)
        {
            Tab.changePage(context, true, false, false, false);

            var adj = main::menu::MAdjustment();
            Tab::Body::General::ScrollClip.v_adjustment = adj;
            Tab::Body::General::ScrollBar.adjustment = adj;

            var adj2 = main::menu::MAdjustment();
            Tab::Body::Sound::ScrollClip.v_adjustment = adj2;
            Tab::Body::Sound::ScrollBar.adjustment = adj2;

            Tab::Body::Device::PlaceHolderL.initialize(context);
            Tab::Body::Device::PlaceHolderR.initialize(context);
        }

        method finalize(context)
        {
            Tab::Body::Device::PlaceHolderL.finalize(context);
            Tab::Body::Device::PlaceHolderR.finalize(context);
        }
    }

    module Pane::Tab
    {
        attribute active_color = main::menu::MColorObject(1.0, 1.0, 1.0);
        attribute inactive_color = main::menu::MColorObject(0.5, 0.5, 0.5);
        attribute active_h = 31.0;
        attribute inactive_h = 30.0;

        method changePage(context, general, device, sound, misc)
        {
            Header::General.active = general;
            Header::Device.active = device;
            Header::Sound.active = sound;
            Header::Misc.active = misc;

            Header::General::Cursor.setColor(general ? self.active_color : self.inactive_color);
            Header::Device::Cursor.setColor(device ? self.active_color : self.inactive_color);
            Header::Sound::Cursor.setColor(sound ? self.active_color : self.inactive_color);
            Header::Misc::Cursor.setColor(misc ? self.active_color : self.inactive_color);

            Body::General.visible = general;
            Body::Device.visible = device;
            Body::Sound.visible = sound;
            Body::Misc.visible = misc;


            var nt1 = Pane::Tab::Header::General.navigate_target;
            var nt2 = Pane::Tab::Header::Device.navigate_target;
            var nt3 = Pane::Tab::Header::Sound.navigate_target;
            var nt4 = Pane::Tab::Header::Misc.navigate_target;
            nt1[3] = general ? active_h : inactive_h;
            nt2[3] = device ? active_h : inactive_h;
            nt3[3] = sound ? active_h : inactive_h;
            nt4[3] = misc ? active_h : inactive_h;
            Pane::Tab::Header::General.navigate_target = nt1;
            Pane::Tab::Header::Device.navigate_target = nt2;
            Pane::Tab::Header::Sound.navigate_target = nt3;
            Pane::Tab::Header::Misc.navigate_target = nt4;
        }
    }

    module Pane::Tab::Header
    {
        method onFocusEnter(context, event)
        {
            var w = event.widget;
            BalloonTip.set_value(context, w, w.balloon.text, 12.9);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Tab::Header::General
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            changePage(context, true, false, false, false);
            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Tab::Header::Device
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            changePage(context, false, true, false, false);
            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Tab::Header::Sound
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            changePage(context, false, false, true, false);
            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Tab::Header::Misc
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            changePage(context, false, false, false, true);
            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Tab::Body::Sound::ScrollClip::space::Volume::MenuBGM::slider
    {
        method onPopupOpen(context)
        {
            SoundUtil::BGMPlayGroup('menu', "option", true, 0.5, 0.5);

            __prototype__::onPopupOpen(context);
        }

        method onValueChanged(context)
        {
            self.sliderValueChanged(context);
            SoundUtil::PreviewBGMVolume(self.index);
        }
    }

    module Pane::Tab::Body::Sound::ScrollClip::space::Volume::RaceBGM::slider
    {
        method onPopupOpen(context)
        {
            SoundUtil::BGMPlayGroup('race', "racing", true, 0.5, 0.5);

            __prototype__::onPopupOpen(context);
        }

        method onValueChanged(context)
        {
            self.sliderValueChanged(context);
            SoundUtil::PreviewBGMVolume(self.index);
        }
    }

    module Pane::Tab::Body::Sound::ScrollClip::space::Volume::ReplayBGM::slider
    {
        method onPopupOpen(context)
        {
            SoundUtil::BGMPlayGroup('replay', "racing", true, 0.5, 0.5);

            __prototype__::onPopupOpen(context);
        }

        method onValueChanged(context)
        {
            self.sliderValueChanged(context);
            SoundUtil::PreviewBGMVolume(self.index);
        }
    }

    module Pane::Tab::Body::Sound::ScrollClip::space::UserBGM::UserBGM::slider
    {
        method onPopupOpen(context)
        {
            if (SoundUtil::CheckSystemBGMPlay("racing"))
            {
                SoundUtil::BGMPlayGroup('race', "racing", true, 1.0, 1.0);
            }

            __prototype__::onPopupOpen(context);
        }

        method onValueChanged(context)
        {
            self.sliderValueChanged(context);
            var composite = Pane::Tab::Body::Sound::ScrollClip::space::Volume;
            var race_bgm_volume_percent = composite.RaceBGM.slider.index;
            SoundUtil::PreviewBGMVolume(race_bgm_volume_percent, self.index);
        }
    }

    module Pane::Tab::Body::Sound::ScrollClip::space::SoundMisc::SpeakerEQ::slider
    {
        method onPopupOpen(context)
        {
            __prototype__::onPopupOpen(context);
        }

        method onValueChanged(context)
        {
            self.sliderValueChanged(context);
            SoundUtil::PreviewPSPSpeakerEQ(self.index);
        }
    }

    module Pane::Tab::Body::Sound::ScrollClip::space::UserBGM::UserBGMSelect::OptionMenu
    {
        method onValueChanged(context)
        {
            if (!ROOT.suspend_sound_update)
            {
                SoundUtil::BGMFadeout(0.5);
                if (SoundUtil::PreviewSystemBGM("racing", self.index))
                    SoundUtil::BGMPlayGroup('race', "racing", true, 1.0, 1.0);
            }

            self.pulldownValueChanged(context);
        }
    }

    module Pane::Tab::Body::Device
    {
        method onPopupOpen(context, option_menu)
        {
            option_menu.select_index = option_menu.index;
            return EVENTRESULT_FILTER;
        }

        method onPopupClosed(context, option_menu, new_index)
        {
            var key_info = option_menu.key_info;
            var link_list = key_info.key_link_list;

            if (link_list != nil && option_menu.select_index != option_menu.index)
            {
                var src_action = key_info.key_action_list[option_menu.select_index];
                var dst_action = key_info.key_action_list[option_menu.index];
                var res = key_info.findKeyLinkTarget(src_action, dst_action);
                if (res != nil)
                {
                    var target_name = res[0];
                    var target_action = res[1];

                    var target_OptionMenu = ROOT.options[target_name];
                    var target_action_list = target_OptionMenu.key_info.key_action_list;
                    var target_action_idx = target_action_list.indexOf(target_action);
                    target_OptionMenu.setIndex(context, target_action_idx);
                }
            }

            if (ROOT.change_focus)
            {
                ROOT.setFocus(Pane::Tab::Body::Device::Outline[key_info.name]);
                ROOT.change_focus = false;
            }

            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Tab::Body::Device::Outline
    {
        attribute last_focus_widget_name = nil;

        method onActivate(context, event)
        {
            var key_name = event.widget.name;
            ROOT.change_focus = true;
            context.pushEvent(main::menu::MActivateEvent(context, ROOT.options[key_name]));
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context, event)
        {
            self.last_focus_widget_name = event.widget.name;
            var option_menu = ROOT.options[self.last_focus_widget_name];
            if (option_menu != nil)
                option_menu.active = true;

            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            var option_menu = ROOT.options[self.last_focus_widget_name];
            if (option_menu != nil)
                option_menu.active = false;

            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Tab::Body::Device::PlaceHolderL
    {
        attribute last_focus_option_menu = nil;
        attribute option_menus = nil;

        method initialize(context)
        {
            self.option_menus = [
                OptionMenu_L_button,
                OptionMenu_up_button, OptionMenu_left_button, OptionMenu_right_button, OptionMenu_down_button,
                OptionMenu_Lstick ];

            foreach (var option_menu in self.option_menus)
            {
                var action_list = getActionList(context, option_menu.key_info);
                option_menu.initialize(context, ROOT, hidden::Item, action_list, "Keyconfig");
                ROOT.options[option_menu.key_info.name] = option_menu;
            }
        }

        method reInitialize(context)
        {
            foreach (var option_menu in self.option_menus)
                reflectKeyConfig(context, option_menu);
        }

        method finalize(context)
        {
            foreach (var option_menu in self.option_menus)
                option_menu.finalize(context);
        }

        method onFocusEnter(context, event)
        {
            if (event.widget.isInstanceOf(main::menu::MOptionMenu))
            {
                self.last_focus_option_menu = event.widget;
                Pane::Tab::Body::Device::Outline[self.last_focus_option_menu.key_info.name].active = true;
            }

            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            if (self.last_focus_option_menu != nil)
                Pane::Tab::Body::Device::Outline[self.last_focus_option_menu.key_info.name].active = false;

            return EVENTRESULT_FILTER;
        }

        module OptionMenu_L_button 
        {
            attribute key_info = sKey_L;
            attribute select_index = nil;
            
            method onPopupOpen(context)
            {
                return Pane::Tab::Body::Device.onPopupOpen(context, self);
            }

            method onPopupClosed(context, new_index)
            {
                return Pane::Tab::Body::Device.onPopupClosed(context, self, new_index);
            }
        }

        module OptionMenu_up_button 
        {
            attribute key_info = sKey_UP;
            attribute select_index = nil;
            method onPopupOpen(context)
            {
                return Pane::Tab::Body::Device.onPopupOpen(context, self);
            }

            method onPopupClosed(context, new_index)
            {
                return Pane::Tab::Body::Device.onPopupClosed(context, self, new_index);
            }
        }

        module OptionMenu_left_button 
        {
            attribute key_info = sKey_LEFT;
            attribute select_index = nil;

            method onPopupOpen(context)
            {
                return Pane::Tab::Body::Device.onPopupOpen(context, self);
            }

            method onPopupClosed(context, new_index)
            {
                return Pane::Tab::Body::Device.onPopupClosed(context, self, new_index);
            }
        }

        module OptionMenu_right_button 
        {
            attribute key_info = sKey_RIGHT;
            attribute select_index = nil;
            
            method onPopupOpen(context)
            {
                return Pane::Tab::Body::Device.onPopupOpen(context, self);
            }

            method onPopupClosed(context, new_index)
            {
                return Pane::Tab::Body::Device.onPopupClosed(context, self, new_index);
            }
        }

        module OptionMenu_down_button 
        {
            attribute key_info = sKey_DOWN;
            attribute select_index = nil;

            method onPopupOpen(context)
            {
                return Pane::Tab::Body::Device.onPopupOpen(context, self);
            }
            method onPopupClosed(context, new_index)
            {
                return Pane::Tab::Body::Device.onPopupClosed(context, self, new_index);
            }
        }

        module OptionMenu_Lstick 
        {
            attribute key_info = sKey_BX1;
            attribute select_index = nil;
            method onPopupOpen(context)
            {
                return Pane::Tab::Body::Device.onPopupOpen(context, self);
            }

            method onPopupClosed(context, new_index)
            {
                return Pane::Tab::Body::Device.onPopupClosed(context, self, new_index);
            }
        }
    }


    module Pane::Tab::Body::Device::PlaceHolderR
    {
        attribute last_focus_option_menu = nil;
        attribute option_menus = nil;

        method initialize(context)
        {
            self.option_menus = [
                OptionMenu_R_button,
                OptionMenu_triangle_button, OptionMenu_square_button, OptionMenu_circle_button, OptionMenu_cross_button,
                OptionMenu_select_button, OptionMenu_start_button ];

            foreach (var option_menu in self.option_menus)
            {
                var action_list = getActionList(context, option_menu.key_info);
                option_menu.initialize(context, ROOT, hidden::Item, action_list, "Keyconfig");
                ROOT.options[option_menu.key_info.name] = option_menu;
            }
        }

        method reInitialize(context)
        {
            foreach (var option_menu in self.option_menus)
                reflectKeyConfig(context, option_menu);
        }

        method finalize(context)
        {
            foreach (var option_menu in self.option_menus)
                option_menu.finalize(context);
        }

        method onFocusEnter(context, event)
        {
            if (event.widget.isInstanceOf(main::menu::MOptionMenu))
            {
                self.last_focus_option_menu = event.widget;
                Pane::Tab::Body::Device::Outline[self.last_focus_option_menu.key_info.name].active = true;
            }

            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            if (self.last_focus_option_menu != nil)
                Pane::Tab::Body::Device::Outline[self.last_focus_option_menu.key_info.name].active = false;

            return EVENTRESULT_FILTER;
        }

        module OptionMenu_R_button 
        {
            attribute key_info = sKey_R;
            attribute select_index = nil;
            method onPopupOpen(context)
            {
                return Pane::Tab::Body::Device.onPopupOpen(context, self);
            }
            method onPopupClosed(context, new_index)
            {
                return Pane::Tab::Body::Device.onPopupClosed(context, self, new_index);
            }
        }

        module OptionMenu_triangle_button 
        {
            attribute key_info = sKey_TRIANGLE;
            attribute select_index = nil;

            method onPopupOpen(context)
            {
                return Pane::Tab::Body::Device.onPopupOpen(context, self);
            }

            method onPopupClosed(context, new_index)
            {
                return Pane::Tab::Body::Device.onPopupClosed(context, self, new_index);
            }
        }

        module OptionMenu_square_button 
        {
            attribute key_info = sKey_SQUARE;
            attribute select_index = nil;

            method onPopupOpen(context)
            {
                return Pane::Tab::Body::Device.onPopupOpen(context, self);
            }

            method onPopupClosed(context, new_index)
            {
                return Pane::Tab::Body::Device.onPopupClosed(context, self, new_index);
            }
        }

        module OptionMenu_circle_button 
        {
            attribute key_info = sKey_CIRCLE;
            attribute select_index = nil;

            method onPopupOpen(context)
            {
                return Pane::Tab::Body::Device.onPopupOpen(context, self);
            }

            method onPopupClosed(context, new_index)
            {
                return Pane::Tab::Body::Device.onPopupClosed(context, self, new_index);
            }
        }

        module OptionMenu_cross_button 
        {
            attribute key_info = sKey_CROSS;
            attribute select_index = nil;

            method onPopupOpen(context)
            {
                return Pane::Tab::Body::Device.onPopupOpen(context, self);
            }

            method onPopupClosed(context, new_index)
            {
                return Pane::Tab::Body::Device.onPopupClosed(context, self, new_index);
            }
        }

        module OptionMenu_select_button 
        {
            attribute key_info = sKey_SELECT;
            attribute select_index = nil;

            method onPopupOpen(context)
            {
                return Pane::Tab::Body::Device.onPopupOpen(context, self);
            }

            method onPopupClosed(context, new_index)
            {
                return Pane::Tab::Body::Device.onPopupClosed(context, self, new_index);
            }
        }

        module OptionMenu_start_button 
        {
            attribute key_info = sKey_START;
            attribute select_index = nil;

            method onPopupOpen(context)
            {
                return Pane::Tab::Body::Device.onPopupOpen(context, self);
            }

            method onPopupClosed(context, new_index)
            {
                return Pane::Tab::Body::Device.onPopupClosed(context, self, new_index);
            }
        }
    }

    module Pane::Tab::Body::Misc::ScrollClip::space::Misc
    {
        module DataInstall::Button
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                SoundUtil::BGMFadeout(1.0);

                var res = main::pdiext::MSystemPatch::installedPatch();
                if (res)
                {
                    DialogUtil::openConfirmDialog(context, DialogUtil::OK, context.translate(ROOT, "SaveDataPSP", "YOU_HAVE_ALREADY_INSTALLED"));
                    return EVENTRESULT_FILTER;
                }

                res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "SaveDataPSP", "DO_YOU_INSTALL"));
                if (!res)
                    return EVENTRESULT_FILTER;

                {
                    var project_name = "install";
                    var project = main::manager.loadProject("/%{main::PROJECT_ROOT_DIR}/%{project_name}/%{project_name}");
                    res = InstallProject::PatchRoot.open(context);
                    main::manager.unloadProject(project);
                }

                return EVENTRESULT_FILTER;
            }
        }

        module ExportData::Button
        {
            method onActivate(context)
            {
                if (ROOT.is_closing)
                    return EVENTRESULT_FILTER;

                main::sound.play("ok");

                var user_profile = game_user_profile();
                var garage = user_profile.garage;

                garage.money = user_profile.cash;
                var data = USBPSPCommPSP::DataForExport();
                data.titleId = main::pdiext::MProductInformation::GetGameProductNumberShort();
                data.buf = garage.serializeForTransferring();

                USBPSPCommPSP::exportDataToPS3(context, data, OptionProject);

                return EVENTRESULT_FILTER;
            }
        }
    }

    module Pane::Footer
    {
        method onFocusEnter(context, event)
        {
            var w = event.widget;
            BalloonTip.set_value(context, w, context.translate(ROOT, "Balloon", w.name), 3.5);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Footer::HBox::Cancel
    {
        method onActivate(context)
        {
            return ROOT.closeImpl(context);
        }
    }

    module Pane::Footer::HBox::OK
    {
        method onActivate(context)
        {
            if (ROOT.is_closing)
            {
                return EVENTRESULT_FILTER;
            }

            main::sound.play("ok");

            if (ROOT.applyAll(context))
            {
                Blink.ScalarInterpolator.on_effect_end = function (context)
                {
                    ROOT.close(context);
                }
                Blink.ScalarInterpolator.restart();
            }

            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Tab::Body::General::ScrollClip::space::Misc::Default::Button
    {
        method onActivate(context)
        {
            main::sound.play("ok");

            var general = Pane::Tab::Body::General::ScrollClip::space::General;
            general.Opening::OptionMenu.setIndex(context, 0);
            general.AutoSave::OptionMenu.setIndex(context, 0);
            general.TimeLimit::slider.index = 0;
            general.TimeLimit::slider.reflect(context);

            var display = Pane::Tab::Body::General::ScrollClip::space::Display;
            display.Mode::OptionMenu.setIndex(context, 0);
            display.ButtonDisplay::OptionMenu.setIndex(context, 0);

            main::pdiext::MUnit::SetUnitSystemByLanguage(main::pdistd::MLocale::getLanguage());

            var unit = Pane::Tab::Body::General::ScrollClip::space::Unit;
            unit.Velocity::OptionMenu.setIndex(context, main::pdiext::MUnit::GetCurrentUnitOfVelocity());
            unit.Power::OptionMenu.setIndex(context, main::pdiext::MUnit::GetCurrentUnitOfPower());
            unit.Torque::OptionMenu.setIndex(context, main::pdiext::MUnit::GetCurrentUnitOfTorque());

            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Tab::Body::Device::PlaceHolderL::Default::Button
    {
        method onActivate(context)
        {
            main::sound.play("ok");

            var device = Pane::Tab::Body::Device;
            var left = device.PlaceHolderL;
            var right = device.PlaceHolderR;

            left.OptionMenu_L_button.setIndex(context, 7);
            left.OptionMenu_up_button.setIndex(context, 3);
            left.OptionMenu_left_button.setIndex(context, 0);
            left.OptionMenu_right_button.setIndex(context, 0);
            left.OptionMenu_down_button.setIndex(context, 2);
            left.OptionMenu_Lstick.setIndex(context, 0);

            right.OptionMenu_R_button.setIndex(context, 5);
            right.OptionMenu_triangle_button.setIndex(context, 4);
            right.OptionMenu_square_button.setIndex(context, 2);
            right.OptionMenu_circle_button.setIndex(context, 1);
            right.OptionMenu_cross_button.setIndex(context, 0);
            right.OptionMenu_select_button.setIndex(context, 6);
            right.OptionMenu_start_button.setIndex(context, 0);

            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Tab::Body::Sound::ScrollClip::space::Misc::Default::Button
    {
        method onActivate(context)
        {
            main::sound.play("ok");

            var volume = Pane::Tab::Body::Sound::ScrollClip::space::Volume;
            var user_bgm = Pane::Tab::Body::Sound::ScrollClip::space::UserBGM;
            var sound_misc = Pane::Tab::Body::Sound::ScrollClip::space::SoundMisc;

            volume.MenuBGM::slider.index = 100;
            volume.MenuSE::slider.index = 100;
            volume.RaceBGM::slider.index = 80;
            volume.RaceSE::slider.index = 80;
            volume.ReplayBGM::slider.index = 80;
            volume.ReplaySE::slider.index = 80;
            user_bgm.UserBGM::slider.index = 90;
            sound_misc.SpeakerEQ::slider.index = 70;
            sound_misc.DynamicRange::OptionMenu.setIndex(context, 0);
            user_bgm.UserBGMSelect::OptionMenu.setIndex(context, 0);

            volume.MenuBGM::slider.reflect(context);
            volume.MenuSE::slider.reflect(context);
            volume.RaceBGM::slider.reflect(context);
            volume.RaceSE::slider.reflect(context);
            volume.ReplayBGM::slider.reflect(context);
            volume.ReplaySE::slider.reflect(context);
            user_bgm.UserBGM::slider.reflect(context);
            sound_misc.SpeakerEQ::slider.reflect(context);

            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Tab::Body::Misc::ScrollClip::space::Misc::Default::Button
    {
        method onActivate(context)
        {
            main::sound.play("ok");

            var battle = Pane::Tab::Body::Misc::ScrollClip::space::Battle;
            battle.DelayRatio::slider.index = 1;
            battle.DelayRatio::slider.reflect(context);
            battle.ShuffleBase::slider.index = 500;
            battle.ShuffleBase::slider.reflect(context);
            battle.ShuffleRatio::slider.index = 10;
            battle.ShuffleRatio::slider.reflect(context);

            return EVENTRESULT_FILTER;
        }
    }
}