//---------------------------------------------------------------------------------------
// ProgressDialog.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ProgressDialog
{
    static cancelCB = nil;
    static eventLoop = nil;

    function setFadeActor(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        actor.repeat = true;
        actor.period = 0.25;
        widget.actor = actor;
    }

    function setMoveActor(widget)
    {
        var actor = main::menu::MMoveActor(widget, widget.x, PSP_SCREEN_W);
        widget.actor = actor;
        widget.actor.ratio = 0.2;
    }

    function setFadeActorRoot(root)
    {
        var actor = main::menu::MFadeActor(root, 1.0);
        actor.repeat = false;
        actor.period = 0.5;
        root.actor = actor;
    }

    method onRealize(context)
    {
        ROOT.display_priority = 50;

        setMoveActor(Dialog);
        setFadeActorRoot(ROOT);
    }

    method onInitialize(context)
    {
        BalloonTip.initialize(context);
    }

    method onFinalize(context)
    {
        if (eventLoop != nil)
        {
            eventLoop.leave();
            eventLoop = nil;
        }
        Dialog::Progress::remain.text = "";
        Dialog::Message::message.text = "";
    }

    function appear(context)
    {
        Dialog.actor.out = false;
        ROOT.actor.out = false;
    }

    function disappear(context)
    {
        Dialog.actor.out = true;
        ROOT.actor.out = true;
    }

    function open(context, message_begin, message_success, message_failed, func, args)
    {
        var prev_cursor_visible = context.cursor_visible;
        context.cursor_visible = false;

        var ratio = context.cursor_speed_ratio;
        Dialog.actor.ratio = 0.2 * ratio;
        Dialog.actor.destinationY = ((main::menu::ScreenHeight - Dialog.h) / 2) + 100;
        Dialog.actor.out = true;
        Dialog.actor.warp();

        ROOT.actor.period = 0.25 / ratio;
        ROOT.actor.out = true;
        ROOT.actor.warp();

        Dialog::Progress::Bar::progress.final_width = Dialog::Progress::Bar::bg.w;
        Dialog::Progress::remain.text = "";
        Dialog::Progress::remain.visible = true;
        Dialog::Message::message.text = message_begin;
        Dialog::Buttons::OK.insensitive = true;
        Dialog::Buttons::OK.visible = false;

        context.pushPage(ROOT);
        ROOT.setFocus(nil);
        appear(context);
        context.sync(0.4);

        var func_res = func(context, args);


        var skip = false;
        var success = true;
        var complete_callback = nil;
        var res;
        if (func_res.isInstanceOf(Array))
        {
            if (func_res.size > 0)
            {
                res = func_res[0];
                success = func_res[0];
            }

            if (func_res.size > 1)
            {
                if (func_res[1].isInstanceOf(Bool))
                    skip = func_res[1];
                else if (func_res[1].isInstanceOf(FunctionObject))
                    complete_callback = func_res[1];
            }

            if (func_res.size > 2)
                res = func_res;
        }
        else
        {
            res = func_res;
            success = res;
        }

        if (success)
        {
            if (Dialog::Progress::Bar::progress.progress != nil)
                Dialog::Progress::Bar::progress.progress.complete();
        }
        else
        {
            Dialog::Progress::Bar::progress.raw_mode = true;
        }

        var message = success ? message_success : message_failed;
        if (message != nil)
            setMessage(message);


        if (complete_callback != nil)
        {
            var cb_result = complete_callback(context, success);
            if (cb_result != nil)
                skip = cb_result;
        }

        Dialog::Progress::remain.visible = false;
        Dialog::Buttons::OK.insensitive = false;
        Dialog::Buttons::OK.visible = true;
        ROOT.setFocus(Dialog::Buttons::OK);
        if (skip)
            close(context, true);
        else
        {
            if (eventLoop != nil)
            {
                eventLoop.leave();
                eventLoop = nil;
            }
            eventLoop = main::menu::EventLoop(context);
            eventLoop.enter();
        }
        context.cursor_visible = prev_cursor_visible;

        return res;
    }

    function close(context, no_enter)
    {
        if (no_enter == nil)
        {
            if (eventLoop != nil)
            {
                eventLoop.leave();
                eventLoop = nil;
            }
        }

        Dialog.actor.destinationY = ((main::menu::ScreenHeight - Dialog.h) / 2) - 200;
        disappear(context);
        context.sync(0.5);
        context.closePage(ROOT);
        Dialog::Progress::Bar::progress.progress = nil;
        cancelCB = nil;
        Dialog::Progress::Bar::progress.raw_mode = false;
    }

    function getProgress()
    {
        return Dialog::Progress::Bar::progress.progress;
    }

    function setProgress(progress)
    {
        Dialog::Progress::Bar::progress.progress = progress;
    }

    function setMessage(message)
    {
        Dialog::Message::message.text = message;
    }

    function setRemainSecond(context, second)
    {
        if (second < 1.0)
        {
            Dialog::Progress::remain.text = "";
        }
        else
        {
            var remain_text;
            if (second >= 600)
                remain_text = context.translate(ROOT, "REMAIN_MINUTE").build("%2d".format(second / 60));
            else if (second >= 60)
                remain_text = context.translate(ROOT, "REMAIN_MINUTE_SECOND").build("%2d".format(second / 60), "%2d".format(second % 60));
            else
                remain_text = context.translate(ROOT, "REMAIN_SECOND").build("%2d".format(second));

            Dialog::Progress::remain.text = remain_text;
        }
    }

    function setRawMode(mode)
    {
        Dialog::Progress::Bar::progress.raw_mode = mode;
    }

    function setCancelCB(func)
    {
        cancelCB = func;
    }

    function onCancel(context)
    {
        if (cancelCB != nil)
        {
            main::sound.play("cancel");
            cancelCB(context);
        }
        return EVENTRESULT_FILTER;
    }
}

module ROOT::Dialog::Buttons::OK
{
    function onActivate(context)
    {
        main::sound.play("ok");
        close(context);
        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context)
    {
        context.cursor_visible = true;
        BalloonTip.set_value(context, self, self.label.text, 3.5);
        return EVENTRESULT_FILTER;
    }
}