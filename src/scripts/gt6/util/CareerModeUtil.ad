













module CareerModeUtil
{
    module CATEGORY
    {
        static N = 1;
        static B = 2;
        static A = 3;
        static IB = 4;
        static IA = 5;
        static S = 6;
        static FORMULA = 7;
        static MOON = 8;
        static GOODWOOD = 9;
    }

    module TYPE
    {
        static MAIN_EVENT = 0;
        static LICENSE = 1;
        static MISSION = 2;
        static COFFEE_BREAK = 3;
        static ONE_MAKE = 4;
        static ENDURANCE = 5;
    }

    module RESULT
    {
        static NONE = -1;
        static GOLD = 0;
        static SILVER = 1;
        static BRONZE = 2;
    }

    static CategoryString = [
        CATEGORY::N : "N",
        CATEGORY::B : "B",
        CATEGORY::A : "A",
        CATEGORY::IB : "IB",
        CATEGORY::IA : "IA",
        CATEGORY::S : "S",
        CATEGORY::FORMULA : "FORMULA",
        CATEGORY::MOON : "MOON",
        CATEGORY::GOODWOOD : "GOODWOOD",
    ];

    static TypeString = [
        TYPE::MAIN_EVENT : "MAIN_EVENT",
        TYPE::LICENSE : "LICENSE",
        TYPE::MISSION : "MISSION",
        TYPE::COFFEE_BREAK : "COFFEE_BREAK",
        TYPE::ONE_MAKE : "ONE_MAKE",
        TYPE::ENDURANCE : "ENDURANCE",
    ];

    static EntryConditions = [
        CATEGORY::N : nil,
        CATEGORY::B : CATEGORY::N,
        CATEGORY::A : CATEGORY::B,
        CATEGORY::IB : CATEGORY::A,
        CATEGORY::IA : CATEGORY::IB,
        CATEGORY::S : CATEGORY::IA,
        CATEGORY::FORMULA : CATEGORY::IB,
    ];

    static NextCategory = [
        CATEGORY::N : CATEGORY::B,
        CATEGORY::B : CATEGORY::A,
        CATEGORY::A : CATEGORY::IB,
        CATEGORY::IB : CATEGORY::IA,
        CATEGORY::IA : CATEGORY::S,
    ];

    function GetEventType(category, type = 0)
    {
        return (category * 1000) + (type * 100);
    }

    function GetTypeFromEventType(eventType)
    {
        if (eventType <= 100)
            return TYPE::MAIN_EVENT;

        var str = eventType.toString();
        var digit = str[str.size - 3].toInt();
        var ret = TYPE.find_static(function(a) { return a[1] == digit; });

        if (ret.size == 0)
            return -1;

        return ret[0][1];
    }

    function GetNextCategory(category)
    {
        return NextCategory[category];
    }

    function GetCategoryString(category)
    {
        return CategoryString[category];
    }

    function GetCategoryText(category)
    {
        return manager.translate("CommonGTMode", "CareerCategory_%{GetCategoryString(category)}");
    }

    function GetTypeString(type)
    {
        return TypeString[type];
    }

    function GetTypeText(type)
    {
        return manager.translate("CommonGTMode", "CareerType_%{GetTypeString(type)}");
    }

    function GetCategoryByFolderID(folder_id)
    {
        var type = MENUDB.executeQuery1R1C("SELECT Type FROM t_event_folder WHERE FolderID=?", [folder_id]);
        var v = (type * 0.001).toInt();
        return v >= CATEGORY::N && v <= CATEGORY::GOODWOOD ? v : nil;
    }

    function applySideBreak(context)
    {
        if (KeyValueUtil::getFlag_NotNil("career", "apply_side_break"))
            return;

        KeyValueUtil::begin();
        KeyValueUtil::set("career", "apply_side_break", true);
        KeyValueUtil::commit();

        var sPort = 0;
        var sConfig = main::GAME_STATUS.user_profile.option.key_config.getConfig(sPort);
        var play_config = sConfig[main::gtengine::InputMode::PLAY_NORMAL];
        var sConfig_SIXAXIS = play_config["SIXAXIS"];

        var port_channel = main::pdistd::SuperPortAnalogChannel["PRESS_CIRCLE"];
        var analog_config = sConfig_SIXAXIS["analog"];
        var key_config = analog_config[port_channel];


        if (key_config != 0)
            return;

        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, manager.translate("RaceEvent", "ASSIGNE_SIDE_BREAK"));
        if (!res)
            return;

        var current_action = 0x800 | main::gtengine::AnalogCode["SIDEBRAKE"];


        port_channel = main::pdistd::SuperPortAnalogChannel["PRESS_CIRCLE"];
        analog_config = sConfig_SIXAXIS["analog"];

        if (current_action & 0x800)
            analog_config[port_channel] = current_action - 0x800;

        port_channel = main::pdistd::SuperPortButtonBit["CIRCLE"];
        var button_config = sConfig_SIXAXIS["button"];

        if (current_action & 0x400)
        {
            button_config[port_channel] = current_action - 0x400;
            var after = sButtonCodeMap_forLocalizeKey[button_config[port_channel]];
        }
        else
        {
            button_config[port_channel] = main::gtengine::ButtonCode::INVALID;
        }


        main::GAME_STATUS.user_profile.option.key_config.setConfig(sConfig, sPort);
    }
}