module PhotoShootProject::SaveDialog
{
	static result = false;
	static original_y = nil;
	static slot = 0;
	static kind = 0;

	function open(context, type)
	{
		slot = main::game.option.photo_save_slot;
		kind = main::game.option.photo_save_method;
	
		import Dialog::Buttons::*;
		switch(type)
		{
			case 0:
			{
				Yes.visible = false;
				No.visible = false;
				OK.visible = true;
				break;
			}
			case 1:
			{
				Yes.visible = true;
				No.visible = true;
				OK.visible = false;
				break;
			}
		}
	
		original_y = Dialog.y;
		Dialog.y = 480.0;
	
		Dialog::Contents::Destination::OptionMenu::Init(context);
		Dialog::Contents::Method::OptionMenu::Init(context);
	
		context.pushPage(SaveDialog);
	
		Dialog::Contents::Destination::OptionMenu::Init2(context);
		Dialog::Contents::Method::OptionMenu::Init2(context);
	
		switch (type)
		{
			case 0:
			{
				SaveDialog.setFocus(OK);
				break;
			}
			case 1:
			{
				SaveDialog.setFocus(Yes);
				break;
			}
		}
		
		if (!Dialog.interpolateY(original_y, 0.4))
		{
			context.sync();
		}
	
		result = 0;
	
		var update_context = context.getUpdateContext();
		update_context.enterEventLoop();
	
		main::game.option.photo_save_slot = slot;
		main::game.option.photo_save_method = kind;
	
		return result;
	}

	function close(context)
	{
		SaveDialog.setFocus(nil);
	
		var target_y;
		if (result != nil)
			target_y = -Dialog.h;
		else
			target_y = 480.0;
	
		if (!Dialog.interpolateY(target_y, 0.4))
			context.sync();
	
		context.closePage(SaveDialog);
		var update_context = context.getUpdateContext();
		update_context.leaveEventLoop();
		Dialog.y = original_y;
	}

	function onCancel(context, event, item)
	{
		main::sound.play("cancel");
		result = nil;
		close(context);
		result = false;
		return EVENTRESULT_FILTER;
	}
}

module PhotoShootProject::SaveDialog::Dialog::Contents::Destination::OptionMenu
{
	function Init(context)
	{
		popup::vbox::Slot1::label.adjustScale();
		popup::vbox::Slot2::label.adjustScale();
		popup::vbox::USB::label.adjustScale();
	}

	function Init2(context)
	{
		OptionMenu.setIndex(context, slot);
	}

	function onValueChanged(context, index)
	{
		slot = index;
	
		var opt = Dialog::Contents::Method::OptionMenu;
	
		if (slot == 2)
		{
			opt.insensitive = true;
			opt.setIndex(context, 2);
			kind = 2;
		}
		else
			opt.insensitive = false;
	}
}

module PhotoShootProject::SaveDialog::Dialog::Contents::Method::OptionMenu
{
	function Init(context)
	{
		popup::vbox::Film::label.adjustScale();
		popup::vbox::FilmPhoto::label.adjustScale();
		popup::vbox::Photo::label.adjustScale();
	}

	function Init2(context)
	{
		if (slot == 2)
		{
			OptionMenu.insensitive = true;
			OptionMenu.setIndex(context, 2);
		}
		else
		{
			OptionMenu.insensitive = false;
			OptionMenu.setIndex(context, kind);
		}
	}

	function onValueChanged(context, index)
	{
		kind = index;
	}
}

module PhotoShootProject::SaveDialog::Dialog::Buttons::No
{
	function onActivate(context, event, item)
	{
		main::sound.play("ok");
		result = false;
		close(context);
		return EVENTRESULT_FILTER;
	}
}

module PhotoShootProject::SaveDialog::Dialog::Buttons::Yes
{
	function onActivate(context, event, item)
	{
		main::sound.play("ok");
		result = true;
		close(context);
		return EVENTRESULT_FILTER;
	}
}

module PhotoShootProject::SaveDialog::Dialog::Buttons::OK
{
	function onActivate(context, event, item)
	{
		main::sound.play("ok");
		result = true;
		close(context);
		return EVENTRESULT_FILTER;
	}
}