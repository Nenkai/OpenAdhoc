module PROJECT::MComponent::SetupPanel::SetupWindow
{
	method doColorize()
	{
		var title = MComponent::SetupPanel::SetupWindow::Title;
		var slider, pulldown, text_input, number_input, vacant, bottom_spacer, buttons;

		if (MComponent::SetupPanel.defined("Slider"))
			slider = MComponent::SetupPanel::Slider;
	
		if (MComponent::SetupPanel.defined("Pulldown"))
			pulldown = MComponent::SetupPanel::Pulldown;
	
		if (MComponent::SetupPanel.defined("TextInput"))
			text_input = MComponent::SetupPanel::TextInput;
	
		if (MComponent::SetupPanel.defined("NumberInput"))
			number_input = MComponent::SetupPanel::NumberInput;
	
		if (MComponent::SetupPanel.defined("Vacant"))
			vacant = MComponent::SetupPanel::Vacant;
	
		if (MComponent::SetupPanel.defined("BottomSpacer"))
			bottom_spacer = MComponent::SetupPanel::BottomSpacer;
	
		if (MComponent::SetupPanel.defined("Buttons"))
			buttons = MComponent::SetupPanel::Buttons;
	
		var i = 0;
		for (var it = self.first_window; it != nil; it = it.next_window)
		{
			var p = it.__prototype__;
	
			if (p == title)
				continue;
			else
				;

			if (p == buttons)
				continue;
			else
				;

			if (it.visible)
			{
				if (p == bottom_spacer)
				{
					var ii = (i % 2) + 7;
					var c = main::menu::MColorObject();
					c.color_index = ii;
					it.bspacer.setColor(c);
				}
				else if (p == pulldown || p == text_input || p == number_input || p == slider || p == vacant)
				{
					var ii = ((i + 1) % 2) + 7;
					var c = main::menu::MColorObject();
					c.color_index = ii;
					it.bg.setColor(c);
					i++;
				}
			}
		}
	}

	method onLoad(context)
	{
		doColorize();
	}
}

module PROJECT
{
	#include "../quick-share/catalog_spec.ad"

	class http
	{
		#include "../share/http.ad"
	}

	static gHttp = http.new();

	module svo
	{
		#include "../share/svo.ad"
	}

	#include "../share/dialog.ad"
	#include "../share/actor.ad"
	#include "../share/online_util.ad"
	#include "../share/online_event.ad"
	#include "../share/online_error.ad"
	#include "../share/watcher_util.ad"
	#include "../share/page_util.ad"
	#include "../share/netfile.ad"
	#include "../share/shot_screen.ad"
	#include "../share/online_ruleset.ad"
	#include "../share/regulation.ad"
	#include "../share/online_xml.ad"
	#include "../share/online_page_util.ad"

	static sMessageProject = nil;
	static gTemplateCommon = nil;
	static sCanUseLobbyFunc = nil;
	static sFileManager = nil;

	function onKeyPress(context, event)
	{
		switch(event.keysym)
		{
			case PS2_PAD_CTRL_L2:
			{
				if (sCanUseLobbyFunc)
				{
					if (__project__.defined("MessageProject"))
					{
						if (sIMOpenCB != nil)
							sIMOpenCB(context);
							
						MessageProject::openIM(context);
			
						if (sIMCloseCB != nil)
							sIMCloseCB(context);
			
						return EVENTRESULT_FILTER;
					}
				}
				return EVENTRESULT_FILTER;
			}

			default:
				return EVENTRESULT_CONTINUE;
		}
	}

	function onLoad(context)
	{
		var arg = main::game.next_menu_arg;
	
		sCanUseLobbyFunc = (arg == "MODE_DOWNLOAD_REPLAY");
	
		if (main::network.isRTIMEInitialized())
		{
			main::network.setCallbackModule(PROJECT);
	
			if (sCanUseLobbyFunc)
				main::network.inLobby(1);
		}
	
		main::network.setSystemEventEnable(1);
		main::sound.load();
	
		sMessageProject = main::manager.loadProject("/projects/message/message");
	
		if (sCanUseLobbyFunc)
		{
			context.loadGpb("projects/quick-online", "Template");
			gTemplateCommon = Template::Common.doCopy();
		}
	
		context.createRenderContext(1);
	
		var render_context = context.getRenderContext(0);
		render_context.transition = main::menu::MColorTransition();
	
		sFileManager = nil;
		var page = nil;
	
		if (arg == "MODE_DOWNLOAD_REPLAY" || arg == "MODE_DOWNLOAD_BESTLAP_REPLAY")
		{
			page = RankingRoot;
		}
		else if (arg == "MODE_UPLOAD_BESTLAP_REPLAY")
		{
			page = GhostRoot;
		}
		else
		{
			page = TimeTrialRoot;
		}
	
		render_context.startPage(page);
	}

	static restart_flg = false;

	function onUnload(context)
	{
		sFileManager = nil;
	
		if (main::sound.isPlayingStream())
			main::sound.stopStream();
	
		main::sound.unload();
	
		if (sCanUseLobbyFunc)
		{
			context.unloadGpb("Template");
			gTemplateCommon = nil;
	
			main::manager.unloadProject(sMessageProject);
			sMessageProject = nil;
	
			main::network.inLobby(0);
		}
	
		main::network.setCallbackModule(nil);
		sCanUseLobbyFunc = nil;
	
		if (restart_flg)
			terminateRTIME();
	}

	function restart(context)
	{
		if (!restart_flg)
		{
			restart_flg = true;
	
			main::menu::MNetFileManager::setAction(0);
	
			main::game.major_menu_project = "online";
			main::game.major_menu_page = "EntryRoot";
	
			start_project(context, "network");
		}
	}
	
	function getCurrentEventIDFromGameInfo()
	{
		var info = main::network.getCurrentGameInfo();
		var rule_set = info[7];
	
		setCurrentRuleSet(rule_set);
	
		var event_id = getCurrentEventID();
	
		clearCurrentRuleSet();
	
		return event_id;
	}
}