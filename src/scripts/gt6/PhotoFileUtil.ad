

//---------------------------------------------------------------------------------------
// PhotoFileUtil.ad
//
// Utility module for dealing with photos
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module PhotoFileUtil
{
    module GENRE
    {
        static PHOTO_RACE = 1;
        static PHOTO_TRAVEL = 2;
        static PHOTO_PROFILE = 3;
    }

    static TABLE_VERSION = 111; // 1.11

    class Data
    {
        attribute id;
        attribute genre;
        attribute filename;
        attribute filesize;
        attribute filename_t;
        attribute filesize_t;
        attribute width;
        attribute height;
        attribute orientation;
        attribute title;
        attribute subtitle;
        attribute description;
        attribute car_label;
        attribute datetime;
        attribute snapshot_filename;
        attribute favorite;
        attribute online
        attribute vertical;
        attribute is_3d;
        attribute position_x;
        attribute position_y;
        attribute position_z;
        attribute online_id;
        attribute grim_photo_id;
        attribute local_userid;

        method setup(data)
        {
            datetime = pdiext::getBetterTime().getBySecond();
            filesize = data.filesize;
            filesize_t = data.filesize_t;
            width = data.width;
            height = data.height;
            orientation = data.orientation;
            id = data.id;
            genre = data.genre;
            title = data.title;
            subtitle = data.subtitle;
            description = data.description;
            car_label = data.car_label;
            snapshot_filename = data.snapshot_filename;
            favorite = data.favorite;
            online = data.online;
            vertical = data.vertical;
            is_3d = data.is_3d;
            position_x = data.position_x;
            position_y = data.position_y;
            position_z = data.position_z;
            online_id = data.online_id;
            grim_photo_id = "";
            local_userid = getUserId();
        }
    }

    function initialize()
    {
        if (!DBUtil::initializeTable(USERDB, "t_photo_files", TABLE_VERSION))   
            return true; // Already exists

        var sql = "CREATE TABLE IF NOT EXISTS " "t_photo_files" " ("
                    "id INTEGER, "
                    "genre INTEGER, "
                    "filename TEXT, "
                    "filesize INTEGER, "
                    "filename_t TEXT, "
                    "filesize_t INTEGER, "
                    "width INTEGER, "
                    "height INTEGER, "
                    "orientation INTEGER, "
                    "title TEXT, "
                    "subtitle TEXT, "
                    "description TEXT, "
                    "car_label TEXT, "
                    "datetime INTEGER, "
                    "snapshot_filename TEXT, "
                    "favorite INTEGER, "
                    "online INTEGER, "
                    "vertical INTEGER, "
                    "is_3d INTEGER, "
                    "position_x REAL, "
                    "position_y REAL, "
                    "position_z REAL, "
                    "online_id TEXT, "
                    // There was something here
                    "grim_photo_id TEXT, "
                    "local_userid INTEGER, "
                    "PRIMARY KEY (id))";

        var res = USERDB.execute0(sql);
        if (res != 0)
            return false;

        return true;
    }

    function getTitleList(favorite)
    {
        var where = "WHERE local_userid = ?";
        var params = [getUserId()];

        if (favorite)
        {
            where += " AND favorite = ?";
            params.push(1);
        }

        var sql = "SELECT DISTINCT genre, title FROM %s %s ORDER BY title".format("t_photo_files", where);
        var rows = USERDB.executeQuery(sql, params);

        var result = Array(rows.size);
        for (var i = 0; i < rows.size; i++)
            result[i] = rows[i];

        return result;
    }

    function getIs3DList(title, favorite)
    {
        var where = "WHERE local_userid = ?";
        var params = [getUserId()];

        if (title != nil)
        {
            where += " AND title = ?";
            params.push(title);
        }

        if (favorite)
        {
            where += " AND favorite = ?";
            params.push(1);
        }

        var sql = "SELECT DISTINCT is_3d FROM %s %s ORDER BY is_3d".format("t_photo_files", where);
        var rows = USERDB.executeQuery(sql, params);

        var result = Array(rows.size);
        for (var i = 0; i < rows.size; i++)
            result[i] = rows[i][0];

        return result;
    }

    function get(id)
    {
        var list = getListImpl("WHERE id = %{id}", nil, nil);
        return list.size > 0 ? list[0] : nil;
    }

    function getList(genre, title, order, by)
    {
        var conditions = [];
        if (genre != nil)
            conditions.push("genre = %{genre}");

        if (title != nil)
            conditions.push("title = '%{title}'");

        var where = "";
        if (conditions.size > 0)
            where = "WHERE " + conditions.join(" AND ");
        
        return getListImpl(where, order, by);
    }

    function getListCondition(title, format)
    {
        var conditions = [];
        if (title != nil)
            conditions.push("title = '%{title}'");

        if (format != nil)
            conditions.push("is_3d = %{format}");
        
        var where = "";
        if (conditions.size > 0)
            where = "WHERE " + conditions.join(" AND ");
        
        return where;
    }

    function getList2(title, format)
    {
        var conditions = getListCondition(title, format);
        return getListImpl(conditions);
    }

    function getFavoriteList(title, format, order, by)
    {
        var conditions = getListCondition(title, format);
        if (conditions == "")
            conditions = "WHERE favorite = 1";
        else
            conditions += " AND favorite = 1";
        return getListImpl(conditions);
    }

    function setFavorite(id, favorite)
    {
        var sql = "UPDATE %s SET favorite = %d WHERE id = %d".format("t_photo_files", favorite ? 1 : 0, id);
        var res = USERDB.execute(sql);
        if (!(res == 101))
        {
            ErrorUtil::warningDBFailed(res, __FILE__, __LINE__);
            return false;
        }
    }

    function getFavoriteCount()
    {
        return getCount("WHERE favorite = 1");
    }

    function getFavoriteMax()
    {
        return 50;
    }

    function getData(path)
    {
        var query = DBUtil::getSelectQuery("t_photo_files", Data);
        var cond = " WHERE filename = ?";
        var params = [path];

        var res = USERDB.executeQuery(query + cond, params);
        var list = DBUtil::getDataList(Data, res);

        if (list.size > 0)
            return list[0];
        else
            return nil;
    }

    function getOnlineList(order, by)
    {
        return getListImpl("WHERE online = 1", order, by);
    }

    function setOnline(id, online)
    {
        var sql = "UPDATE %s SET online = %d WHERE id = %d".format("t_photo_files", online ? 1 : 0, id);
        var res = USERDB.execute(sql);
        if (!(res == 101))
        {
            ErrorUtil::warningDBFailed(res, __FILE__, __LINE__);
            return false;
        }
    }

    function getOnlineCount()
    {
        return getCount("WHERE online = 1");
    }

    function getOnlineMax()
    {
        return Grim2Util::Photo::getOnlineMax();
    }

    function getProfileBannerList(order, by)
    {
        return getListImpl("WHERE width = height", order, by);
    }

    function updateComment(id, comment)
    {
        var sql = "UPDATE %s SET description = ? WHERE id = %d".format("t_photo_files", id);
        var res = USERDB.execute(sql, [comment]);
        if (!(res == 101))
        {
            ErrorUtil::warningDBFailed(res, __FILE__, __LINE__);
            return false;
        }
    }

    function  updateGrimPhotoId(id, grim_photo_id)
    {
        var sql = "UPDATE %s SET grim_photo_id = ? WHERE id = %d".format("t_photo_files", id);
        var res = USERDB.execute(sql, [grim_photo_id]);
        if (!(res == 101))
        {
            ErrorUtil::warningDBFailed(res, __FILE__, __LINE__);
            return false;
        }
    }

    function _save(work_path, thumb_path, data, play_id)
    {
        var path_base = IO::Path::GetDirName(ORG.photo_org_path) + ("/" "pht#%s#%016lx#").format(data.online_id, play_id);
        if (data.is_3d)
            data.filename = DBUtil::getUniqFileName(USERDB, "t_photo_files", path_base, "mpo");
        else
            data.filename = DBUtil::getUniqFileName(USERDB, "t_photo_files", path_base, "jpg");

        data.filename_t = IO::Path::StripExtension(data.filename) + "_t.jpg";
        data.local_userid = play_id;
        DBUtil::insert(USERDB, "t_photo_files", data);
        _removeFiles(data);

        pdistd::RenameFile(work_path, data.filename);
        pdistd::RenameFile(thumb_path, data.filename_t);
    }

    function save(context, work_path, thumb_path, photo_data)
    {
        var data = Data();
        data.setup(photo_data);
        _save(work_path, thumb_path, data, getUserId());
    }

    function save_file(path)
    {
        var cols = path.split("#");
        var online_id = "";
        var play_id = pdiapp::play_id;
        if (cols.size >= 4)
        {
            online_id = cols[1];
            play_id = ("0x" + cols[2]).toULong();
        }

        var thumb = IO::Path::StripExtension(path) + "_t.jpg";
        var t_path = IO::Path::GetDirName(path) + "/tmp_photo.dat";

        if (pdistd::Exist(t_path))
            pdistd::RemoveFile(t_path);
        pdistd::RenameFile(path, t_path);

        var t_thumb = IO::Path::GetDirName(path) + "/tmp_thumb.dat";
        if (pdistd::Exist(t_thumb))
            pdistd::RemoveFile(t_thumb);
        pdistd::RenameFile(thumb, t_thumb);

        var photo_data = Data();
        var st = pdistd::GetFileStatus(t_path);
        var st_t = pdistd::GetFileStatus(t_thumb);

        photo_data.filesize = st["size"];
        photo_data.filesize_t = st_t["size"];

        photo_data.width = 0;
        photo_data.height = 0;
        photo_data.orientation = 0;
        photo_data.id = 0;
        photo_data.genre = 0;
        photo_data.title = "";
        photo_data.subtitle = "";
        photo_data.description = "";
        photo_data.car_label = "";
        photo_data.datetime = st["_time"].getBySecond();
        photo_data.snapshot_filename = "";
        photo_data.favorite = 0;
        photo_data.online = online_id != "";
        photo_data.vertical = false;
        photo_data.is_3d = IO::Path::GetExtension(path) == "mpo";
        photo_data.position_x = 0;
        photo_data.position_y = 0;
        photo_data.position_z = 0;
        photo_data.online_id = online_id;
        photo_data.grim_photo_id = "";

        _save(t_path, t_thumb, photo_data, play_id);
    }

    function _removeFiles(data)
    {
        if (pdistd::Exist(data.filename))
            pdistd::RemoveFile(data.filename);

        if (pdistd::Exist(data.filename_t))
            pdistd::RemoveFile(data.filename_t);
    }

    function remove(data)
    {
        _removeFiles(data);
        DBUtil::deleteRow(USERDB, "t_photo_files", data);
    }

    function removeByList(data_list)
    {
        foreach (var data in data_list)
        {
            remove(data);
        }
    }

    function removeAll()
    {
        var list = getList();
        foreach (var data in list)
            _removeFiles(data);

        DBUtil::deleteAll(USERDB, "t_photo_files");
    }

    function isExist(id)
    {
        var sql = "SELECT id FROM %s WHERE id = ?".format("t_photo_files");
        var rows = USERDB.executeQuery(sql, [id]);
        return rows.size > 0;
    }

    function getLastProfilePhotoId()
    {
        var sql = "SELECT id FROM %s WHERE genre = ? ORDER BY id DESC LIMIT 1".format("t_photo_files");
        var rows = USERDB.executeQuery(sql, [GENRE::PHOTO_PROFILE]);
        var result = getResult1(rows);
        return result != nil ? result : -1;
    }

    function getTitleText(context, genre, title)
    {
        if (genre == GENRE::PHOTO_RACE)
            return manager.translate("CourseName", title);
        else if (genre == GENRE::PHOTO_TRAVEL)
            return manager.translate("PhotoMode", title);
        else
            return manager.translate("PhotoMode", "PROFILE_PHOTO_TITLE");
    }

    function getUserId()
    {
        return pdiapp::play_id;
    }

    function getListImpl(condition, order, by)
    {
        if (condition != "")
            condition += " AND local_userid = ?";
        else
            condition = "WHERE local_userid = ?";

        var sql = "%s %s %s".format(DBUtil::getSelectQuery("t_photo_files", Data),
                                    condition,
                                    createOrderBy(order, by));

        var res = USERDB.executeQuery(sql, [getUserId()]);
        return DBUtil::getDataList(Data, res);
    }

    function getCount(where)
    {
        var sql = "SELECT COUNT (*) FROM %s %s AND local_userid = ?".format("t_photo_files", where);
        var res = USERDB.executeQuery(sql, [getUserId()]);
        var count = getResult1(res);
        return count == nil ? 0 : count;
    }

    function createOrderBy(order, by)
    {
        if (nil == order)
            order = "datetime";

        if (nil == by)
            by = "ASC";

        var by2 = by;
        if ("datetime" == order || "filesize" == order)
        {
            if ("ASC" == by)
                by2 = "DESC";
            else if ("DESC" == by)
                by2 = "ASC";
        }

        return "order by %{order} %{by2}, id";
    }

    function getResult1(res)
    {
        if (res.size == 0)
            return nil;

        var row = res[0];
        if (row.size == 0)
            return nil;
        return res[0][0];
    }
}