module PROJECT::ROOT
{
	static car_list = nil;
	static last_color_index = 0;
	car_list = nil; // tf?
	static current_car = nil;
	static current_col = nil;
	

	function onInitialize(context)
	{
		car_list = MethodRoot::getCurrentCarList();
		set_car_select(context);
		set_car(context);
	}
	
	function onFinalize(context)
	{
		unset_car_select(context);
		car_list = nil;
	}


	function getCurrentCar()
	{
		return current_car.car_code;
	}
	
	function getCurrentColor()
	{
		if (current_col != nil)
			return current_col;
		else

		return false;
	}
	
	function getRaceCode()
	{
		return "gt4p_jp_old";
	}


	function set_car_select(context)
	{
		var car_num = car_list.size;
		for (var i = 0; i < car_num; i++)
		{
			var mini = StoreHouse::CarMiniItem.doCopy();
			var car = car_list[i];
	
			var path = "piece/car_mini/" + car.car_code + ".img";
			mini["image"].image_path = path;
	
			var flare = mini["flare"];
			flare.actor = main::menu::MBlinkActor(flare);
	
			CarScroll::SelectBox.appendChild(context, mini);
		}
	
		ColScroll.visible = false;
	}


	function unset_car_select(context)
	{
		CarScroll::SelectBox.clearChildren(context);
	}
	
	function set_car(context)
	{
		var index = CarScroll::SelectBox.index;
		var car = car_list[index];
	
		CarFace.car_code = car.car_code;
		current_car = car;
	
		CarFace::move_car(0, 1);
	
		last_color_index = 0;
	}


	function set_col_select(context)
	{
		CarScroll::SelectBox.outFocus(ROOT);
	
		CarScroll.visible = false;
	
		var car_data = CarFace.car_data;
		var col_list = car_data.getColors();
		var num = col_list.size;
		for (var i = 0; i < num; i++)
		{
			var chip = StoreHouse::ColItem.doCopy();
	
			if (car_data.getColorName(0) == "-")
			{
				chip["gt"].visible = true;
				chip["base"].visible = false;
			}
			else
			{
				chip["gt"].visible = false;
				chip["base"].setColor(col_list[i]);
			}
	
			var flare = chip["flare"];
			flare.actor = main::menu::MBlinkActor(flare);
	
			ColScroll::SelectBox.appendChild(context, chip);
		}
	
		ColScroll.visible = true;
		ColScroll::SelectBox.index = last_color_index;
		ColScroll::SelectBox.callFocus(ROOT);
	}


	function unset_col_select(context)
	{
		ColScroll.visible = false;
		ColScroll::SelectBox.clearChildren(context);
		CarScroll.visible = true;
		CarScroll::SelectBox.callFocus(ROOT);
	}
	
	function set_col(context)
	{
		var index = ColScroll::SelectBox.index;
		last_color_index = index;
		CarFace.setColorIndex(index);
		current_col = index;
	}
}

module PROJECT::ROOT::CarFace
{
	function move_car(phase, warp)
	{
		if (CarFace.car_model != nil)
		{
			if (phase == 0)
			{
				CarFace.car_model.motion = 1;
	
				if (warp == 1)
				{
					CarFace.car_model.tz = 8.5;
					CarFace.car_model.ry = 180.0;
					CarFace.car_model.warp();
				}
	
				CarFace.car_model.tx = 0.0;
				CarFace.car_model.tz = 0.0;
				CarFace.car_model.posInterpolateSpeed = 0.025;
			}
			else
			{
				CarFace.car_model.motion = 2;
				CarFace.car_model.tx = -0.9;
				CarFace.car_model.tz = 1.6;
				CarFace.car_model.ry = 185.5;
				CarFace.car_model.posInterpolateSpeed = 0.1;
	
				if (warp == 1)
					CarFace.car_model.warp();
			}
		}
	}
}

module PROJECT::ROOT::CarScroll::SelectBox
{
	function onValueChanged(context, index)
	{
		main::sound.play("cursor");
		set_car(context);
	}
	
	function onCancel(context, item)
	{
		main::sound.play("cancel");
		context.transition.panOutIn(context);
		context.transition.syncOut(context);
	
		if (GameRoot::isSkipMethod())
			context.startPage(CourseRoot);
		else
		{
			var root_window = MethodRoot::getCurrentMethodRoot();
			context.startPage(root_window);
		}
	
		return EVENTRESULT_FILTER;
	}


	function onActivate(context, item)
	{
		ROOT.setFocus(nil);
		main::sound.play("cursor");
		set_col_select(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::ColScroll::SelectBox
{
	function onValueChanged(context, index)
	{
		main::sound.play("cursor");
		set_col(context);
	}
	
	function onCancel(context, item)
	{
		ROOT.setFocus(nil);
		main::sound.play("cursor");
		unset_col_select(context);
		return EVENTRESULT_FILTER;
	}
	
	function onActivate(context, item)
	{
		main::sound.play("cursor");
		GameRoot::doGame(context);
		return EVENTRESULT_FILTER;
	}
}