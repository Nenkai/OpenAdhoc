
















static mcdialogopend = false;
static mcmanager = nil;
static mcwatcher = nil;
static mcaccessWidget = nil;

function setMcAccessIndicator(w)
{
    mcaccessWidget = w;
}

function beginAccessIndicator(save)
{
    if (mcaccessWidget != nil)
    {
        var w = mcaccessWidget[save ? "save" : "load"];
        w.actor = main::menu::MBlinkActor(w);
        w.actor.period = 0.1;
        w.visible = true;
    }
}

function endAccessIndicator()
{
    if (mcaccessWidget != nil)
    {
        var w = mcaccessWidget["save"];
        w.actor = nil;
        w.visible = false;

        w = mcaccessWidget["load"];
        w.actor = nil;
        w.visible = false;
    }
}

function translateMc(context, key)
{
    return context.translate(BootProject, "MemoryCard", key);
}

function startMcWatcher(context, manager)
{
    mcwatcher = main::menu::MScriptWatcher(context, onMcCheck);
    mcwatcher.interval = 2;
    mcwatcher.append();
    mcmanager = manager;
}

function endMcWatcher()
{
    mcmanager = nil;
    if (mcwatcher != nil)
        mcwatcher.remove();

    mcwatcher = nil;
}

function onMcCheck(context)
{
    if (mcdialogopend && mcmanager != nil)
    {
        if (mcmanager.isChanged())
        {
            cancelConfirmDialog(context);
            mcdialogopend = false;
        }
    }
}

function handleMcChange(context)
{
    if (mcdialogopend)
    {
        cancelConfirmDialog(context);
        mcdialogopend = false;
    }
}

function openMcDialog(context, mode, message, title, yes, no)
{
    mcdialogopend = true;
    if (mcmanager != nil)
        mcmanager.isChanged()

    var r = openConfirmDialog(context, mode, message, title, yes, no);
    mcdialogopend = false;
    return r;
}

function loadGameData(context, manager)
{
    if (manager == nil)
        manager = main::menu::MMemoryCardManager("MODE_LOAD_GAME");

    if (!isExistGameData(context, manager))
    {
        print "no data\n";
        return "FILE_NOT_FOUND";
    }

    var r = manager.getNewFile().load(manager);
    if (r == "OK")
    {
        manager.clearAutoSaveDisabled();
        main::menu::MMemoryCardManager::setExistValidGameData(true);
    }

    return r;
}

function loadGameDataForTrade(context, manager)
{
    if (manager == nil)
        manager = main::menu::MMemoryCardManager("MODE_LOAD_GAME");

    setProgress(context, manager.progress);

    if (!isExistGameData(context, manager))
    {
        return ["FILE_NOT_FOUND", nil];
    }

    var [r, game] = manager.getNewFile().loadInstance(manager);
    return [r, game];
}

function isExistGameData(context, manager)
{
    if (manager == nil)
        manager = main::menu::MMemoryCardManager("MODE_LOAD_GAME");

    return (manager.isConnect() && 
        manager.isFormat() && 
        manager.getNewFile().isExist(manager) == 0);
}

function checkGameData(context, forceRetry, manager, slot)
{
    if (slot == nil)
        slot = 0;

    if (forceRetry == nil)
        forceRetry = true;

    if (manager == nil)
        manager = main::menu::MMemoryCardManager("MODE_LOAD_GAME", slot);

    while (true)
    {
        if (!manager.isConnect())
        {
            if (openConfirmDialog(context, forceRetry ? 2 : 1, 
                translateMc(context, forceRetry ? "no_memory_card_retry_confirm" : "no_memory_card_retry?").format(slot + 1)))
                continue;
            else
                return nil;
        }

        var no_file = !manager.isFormat();
        if (!no_file)
        {
            var r = manager.getNewFile().isExist(manager);
            if (r == 0)
            {
                return manager;
            }
            else if (r == 1)
            {
                no_file = true;
            }
            else
            {
                if (openConfirmDialog(context, forceRetry ? 2 : 1, 
                    translateMc(context, forceRetry ? "load_error_retry_confirm" : "load_error_retry?")))
                    continue;
                else
                    return nil;
            }
        }

        if (no_file)
        {
            if (openConfirmDialog(context, forceRetry ? 2 : 1, 
                translateMc(context, forceRetry ? "no_gt4_data_retry_confirm" : "no_gt4_data_retry?").format(slot + 1)))
                continue;
            else
                return nil;
        }
    }
}

function reportGameDataError(context, forceRetry, saveMode, result, slot, general)
{
    if (slot == nil)
        slot = 0;

    if (general == nil)
        general = false;

    var key = "";

    switch (result)
    {
        case "INVALID_FILE":
            key = forceRetry ? "broken_file_retry_confirm" : "broken_file_retry?";
            break;

        case "FILE_NOT_FOUND":
            key = forceRetry ? "no_gt4_data_retry_confirm" : "no_gt4_data_retry?";
            break;

        case "DIFFERENT_MEMORYCARD":
            if (general)
                key = "different_card_retry?_2";
            else
                key = forceRetry ? "different_card_retry_confirm" : "different_card_retry?";
            break;

        case "NO_CARD":
            key = forceRetry ? "no_memory_card_retry_confirm" : "no_memory_card_retry?";
            break;

        case "DEVICE_ERROR":
        default:
            if (saveMode)
                key = forceRetry ? "save_error_retry_confirm" : "save_error_retry?";
            else
                key = forceRetry ? "load_error_retry_confirm" : "load_error_retry?";
            break;
    }

    return openConfirmDialog(context, forceRetry ? 2 : 1, translateMc(context, key).format(slot + 1));
}

function handleLoadSaveResult(context, result, savemode)
{
    print "result %{result}\n";

    var key;
    switch (result)
    {
        case "OK":
            return true;

        case "INVALID_FILE":
            key = "broken_file";
            break;

        case "DIFFERENT_MEMORYCARD":
            key = "different_card";
            break;

        case "NO_CARD":
            key = "no_memorycard";
            break;

        case "USB_INTERFACE_ERROR":
            key = "usbresult|no interface";
            break;

        case "USB_READ_NOFILE_ERROR":
            key = "usbresult|no file";
            break;

        case "USB_READ_INVALID_ERROR":
            key = "usbresult|invalid";
            break;

        case "USB_READ_ERROR":
            key = "usbresult|read error";
            break;

        case "USB_WRITE_ERROR":
            key = "usbresult|write error";
            break;

        case "FILE_NOT_FOUND":
        case "DEVICE_ERROR":
        default:
            key = savemode ? "save_error" : "load_error";
            break;
    }

    main::sound.play("disable");
    openConfirmDialog(context, 2, translateMc(context, key));
    return 0;
}

function handleLoadResult(context, result)
{
    return handleLoadSaveResult(context, result, false);
}

function handleSaveResult(context, result)
{
    return handleLoadSaveResult(context, result, true);
}

function createGameData(context, extfunc)
{
    var manager = main::menu::MMemoryCardManager("MODE_SAVE_GAME");
    setProgress(context, manager.progress);

    var file = manager.getNewFile();
    var datasize = file.size;

    var result = false;

    startMcWatcher(context, manager);

    while (true)
    {
        if (openConfirmDialog(context, 1, 
            translateMc(context, "create_game_data_need_n_byte_confirm").format(datasize)))
        {
            if (createGameDataImpl(context, manager, datasize, 0, extfunc))
            {
                result = true;
                break;
            }
        }
        else
        {
            if (openConfirmDialog(context, 3, translateMc(context, "cannot play GT mode if no game data"), nil,
                translateMc(context, "not_create"), translateMc(context, "return")))
                break;
        }
    }

    endMcWatcher();
    return result;
}

function createGameDataImpl(context, manager, datasize, initgarage, extfunc)
{
    var file = manager.getNewFile();
    if (!manager.isConnect())
    {
        openConfirmDialog(context, 2, translateMc(context, "no_memory_card"));
        return false;
    }

    if (!manager.isFormat())
    {
        if (manager.isConnect() &&
            openMcDialog(context, 3, translateMc(context, "format_slot_n_cofirm").format(1)))
        {
            openProgressDialog(context, translateMc(context, "now_formatting"));
            if (!file.format(manager))
            {
                closeProgressDialog(context);
                openConfirmDialog(context, 2, translateMc(context, "format_error"));
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    else
    {
        var r = file.isExist(manager);
        if (r == 0)
        {
            print "overwrite";

            var filesize = file.readSize(manager);
            print "size data %{datasize}, file %{filesize}, free %{manager.realFree}\n";

            if (filesize == datasize || datasize - filesize <= manager.realFree)
            {
                if (!openMcDialog(context, 3, translateMc(context, "exist game data over write ok?")))
                    return false;
                
                openProgressDialog(context, translateMc(context, "now_deleting"));
                if (!file.remove(manager))
                {
                    closeProgressDialog(context);
                    openConfirmDialog(context, 2, translateMc(context, "delete_error"));
                    return false;
                }
            }
            else
            {
                openConfirmDialog(context, 2, 
                    translateMc(context, "not_enough_space_slot_to_create_game_need_more_n_byte").format(datasize - filesize));
                return false;
            }
        }
        else if (r == 1)
        {
            print "new";

            if (datasize > manager.realFree - 1)
            {
                openConfirmDialog(context, 2, 
                    translateMc(context, "not_enough_space_slot_to_create_game_need_n_byte").format(datasize));
                return false;
            }
        }
        else
        {
            openConfirmDialog(context, 2, translateMc(context, "access_error"));
            return false;
        }
    }

    print "saving...\n";

    if (initgarage)
        main::game.garage.delAllCarExceptRidingCar();


    openProgressDialog(context, translateMc(context, "now_saving"));
    var r = file.saveNew(manager, translateMc(context, "FILENAME|game_data"));
    if (r == "OK" && extfunc != nil)
        r = extfunc(context, manager);

    closeProgressDialog(context);

    if (r != "OK")
    {
        openConfirmDialog(context, 2, translateMc(context, "save_error"));
        return false;
    }

    openConfirmDialog(context, 0, translateMc(context, "save_done"));
    
    main::menu::MMemoryCardManager::setExistValidGameData(true);
    manager.clearAutoSaveDisabled();
    return true;
}

function saveVariousData(context, mode, kind, slot)
{
    var manager = main::menu::MMemoryCardManager(mode, slot);
    var result = false;
    var file = manager.getNewFile();
    var datasize = file.size;

    startMcWatcher(context, manager);

    result = saveVariousDataImpl(context, manager, kind, slot, datasize, file, file);

    endMcWatcher();

    return result;
}

function saveVariousDataImpl(context, manager, kind, slot, datasize, file, newfile)
{
    var r = saveVariousDataImpl2(context, manager, kind, slot, datasize, file, newfile);
    return r == 1;
}

function saveVariousDataForSelector(context, manager, kind, slot, file, newfile)
{
    return saveVariousDataImpl2(context, manager, kind, slot, newfile.size, file, newfile);
}

function saveVariousDataImpl2(context, manager, kind, slot, datasize, file, newfile)
{
    setProgress(context, manager.progress);

    if (!manager.isConnect())
    {
        openConfirmDialog(context, 2, translateMc(context, "no_memorycard_slot_n").format(slot + 1));
        return 0;
    }

    var messageShowed = false;

    if (manager.isFormat())
    {
        var r = file.isExist(manager);
        if (r == 0)
        {
            print "overwrite";

            var filesize = file.readSize(manager);
            print "size data %{datasize}, file %{filesize}, free %{manager.realFree}\n";

            if (filesize == datasize || datasize - filesize <= manager.realFree)
            {
                if (!openMcDialog(context, 3, translateMc(context, kind + " data over write ok?")))
                    return 0;
                
                openProgressDialog(context, translateMc(context, "now_deleting"));
                if (!file.remove(manager))
                {
                    closeProgressDialog(context);
                    openConfirmDialog(context, 2, translateMc(context, "delete_error"));
                    return -1;
                }

                messageShowed = true;
            }
            else
            {
                openConfirmDialog(context, 2, translateMc(context, "not_enough_space_slot_to_create_" + kind + "_more_need_n_byte")
                    .format(slot + 1, datasize - filesize));
                return 0;
            }
        }
        else if (r == 1)
        {
            print "new";

            if (datasize > manager.realFree - 1)
            {
                openConfirmDialog(context, 2, 
                    translateMc(context, "not_enough_space_slot_to_create_" + kind + "_need_n_byte").format(slot + 1, datasize));
                return 0;
            }
        }
        else
        {
            openConfirmDialog(context, 2, translateMc(context, "access_error"));
            return -1;
        }
    }

    if (!messageShowed)
    {
        if (!openMcDialog(context, 1, 
                translateMc(context, "create_" + kind + "_need_n_byte_confirm").format(slot + 1, datasize)))
            return 0;

        if (!manager.isFormat())
        {
            if (manager.isConnect() && openMcDialog(context, 3, translateMc(context, "format_slot_n_cofirm").format(slot + 1)))
            {
                openProgressDialog(context, translateMc(context, "now_formatting"));
                if (!file.format(manager))
                {
                    closeProgressDialog(context);
                    openConfirmDialog(context, 2, translateMc(context, "format_error"));
                    return -1;
                }
            }
            else
            {
                return 0;
            }
        }
    }

    print "saving...\n";

    openProgressDialog(context, translateMc(context, "now_saving"));
    var r = newfile.saveNew(manager, translateMc(context, "FILENAME|" + kind + "_data"));
    closeProgressDialog(context);

    if (r != "OK")
    {
        main::sound.play("disable");
        openConfirmDialog(context, 2, translateMc(context, "save_error"));
        return -1;
    }

    main::sound.play("ok");

    openConfirmDialog(context, 0, translateMc(context, "save_done"));
    
    return 1;
}

function copyFromUSBToMC(context, manager, slot, file)
{
    setProgress(context, manager.progress);

    if (!manager.isConnect())
    {
        openConfirmDialog(context, 2, translateMc(context, "no_memorycard_slot_n").format(slot + 1))
        return 0;
    }

    manager.progress.value = 0.0;
    openProgressDialog(context, translateMc(context, "check USB"));

    manager.progress.value = 0.8;

    var [r, datasize, kind] = file.getReplayInfoFromUSB();
    manager.progress.value = 1.0;

    context.sync(0.5);
    closeProgressDialog(context);

    if (!handleLoadResult(context, r))
    {
        return 0;
    }

    main::sound.play("ok");

    startMcWatcher(context, manager);

    var res = copyFromUSBToMCImpl(context, manager, slot, file, kind, datasize);

    endMcWatcher();

    return res;
}

function copyFromUSBToMCImpl(context, manager, slot, file, kind, datasize)
{
    if (manager.isFormat())
    {
        if (datasize > manager.realFree - 1)
        {
            openConfirmDialog(context, 2, 
                translateMc(context, "not_enough_space_slot_to_create_" + kind + "_need_n_byte").format(slot + 1, datasize));
            return 0;
        }
    }

    
    if (!openMcDialog(context, 1, 
            translateMc(context, "create_" + kind + "_need_n_byte_confirm").format(slot + 1, datasize)))
        return 0;

    if (!manager.isFormat())
    {
        if (manager.isConnect() && openMcDialog(context, 3, translateMc(context, "format_slot_n_cofirm").format(slot + 1)))
        {
            openProgressDialog(context, translateMc(context, "now_formatting"));
            if (!file.format(manager))
            {
                closeProgressDialog(context);
                openConfirmDialog(context, 2, translateMc(context, "format_error"));
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    

    print "saving...\n";

    openProgressDialog(context, translateMc(context, "read USB and write MC"));
    var r = file.copyFromUSB(manager);
    closeProgressDialog(context);

    if (r != "OK")
    {
        main::sound.play("disable");
        openConfirmDialog(context, 2, translateMc(context, "save_error"));
        return 0;
    }

    main::sound.play("ok");

    openConfirmDialog(context, 0, translateMc(context, "save_done"));
    
    return 1;
}

function autoSave(context, indicator, manager)
{
    return autoSave2(context, indicator, manager, true);
}

function autoSave2(context, indicator, manager, makeEnable)
{
    if (manager == nil)
        manager = main::menu::MMemoryCardManager("MODE_SAVE_GAME");

    setMcAccessIndicator(indicator);
    setProgress(context, manager.progress);

    var file = manager.getNewFile();
    var datasize = file.size;

    var result = false;

    startMcWatcher(context, manager);

    do
    {
        ;
    } while (!autoSaveImpl2(context, manager, datasize, &result, makeEnable));

    endMcWatcher();
    
    return result;
}

function autoSaveImpl(context, manager, datasize, resultRef)
{
    return autoSaveImpl2(context, manager, datasize, resultRef, 1);
}

function autoSaveImpl2(context, manager, datasize, resultRef, makeEnable)
{
    var dummyResult = 0;
    if (resultRef == nil)
        resultRef = &dummyResult;

    if (makeEnable == nil)
        makeEnable = true;

    &resultRef = 0;

    var title = translateMc(context, "Auto Save");
    var file = manager.getNewFile();
    manager.isChanged();

    if (!manager.isConnect())
    {
        if (!openMcDialog(context, 1, 
            translateMc(context, "no_memory_card_retry?").format(1), title,
            translateMc(context, "save cancel"),
            translateMc(context, "retry")))
        {
            return 0;
        }
        else
        {
            return 1;
        }
    }

    var createGame = false;
    if (manager.isFormat())
    {
        var r = file.isExist(manager);
        if (r == 0)
        {
            print "overwrite\n";

            var broken = false;
            if (manager.isAutoSaveDisabled())
            {
                if (!openMcDialog(context, 1, translateMc(context, "slot1 card changed try save?", title)))
                {
                    return manager.isConnect();
                }
            }

            print "saving...\n";

            beginAccessIndicator(1);
            r = file.save(manager);
            endAccessIndicator();

            print "result = %{r}\n";

            if (r == "OK")
            {
                main::sound.play("ok");
                manager.clearAutoSaveDisabled();
                main::game.isNeedSave();
                main::menu::MMemoryCardManager::setExistValidGameData(true);
                &resultRef = 1;
                return true;
            }
            else if (r == "DIFFERENT_MEMORYCARD")
            {
                main::sound.play("disable");
                if (openMcDialog(context, 1, translateMc(context, "different_card_retry?"), title))
                    return false;

                if (!manager.isConnect())
                    return false;
            }
            else if (r == "INVALID_FILE")
            {
                main::sound.play("disable");
                broken = true;
            }
            else
            {
                main::sound.play("disable");
                if (!openConfirmDialog(context, 1, translateMc(context, "save_error_retry?"), title))
                {
                    if (manager.isConnect())
                        return true;
                }
                
                return false;
            }

            if (broken)
            {
                if (openMcDialog(context, 1, translateMc(context, "broken_file_retry?"), title))
                    return false;

                if (!manager.isConnect())
                    return false;
            }

            if (!makeEnable)
                return true;

            if (!openMcDialog(context, 3, translateMc(context, "akiramete create? delete garage"), title,
                translateMc(context, "create"),
                translateMc(context, "save cancel")))
            {
                if (!manager.isConnect())
                    return false;
                
                return true;
            }

            createGame = true;
        }
        else if (r < 0)
        {
            return openMcDialog(context, 1, translateMc(context, "access_error"), title,
                translateMc(context, "save cancel"),
                translateMc(context, "retry"));
        }
    }

    if (!createGame)
    {
        if (openMcDialog(context, 3, translateMc(context, "no_gt4_data_retry?").format(1), title))
            return false;

        if (manager.isChanged())
            return false;

        if (!makeEnable)
            return true;

        if (!openMcDialog(context, 3, translateMc(context, "create? delete garage"), nil,
            translateMc(context, "create"),
            translateMc(context, "save cancel")))
        {
            if (!manager.isConnect())
                return false;
            
            return true;
        }
    }

    if (!openMcDialog(context, 3, translateMc(context, "hontoni? delete garage dayo?")))
        return false;

    if (openMcDialog(context, 3, translateMc(context, "create_game_data_need_n_byte_confirm").format(datasize),
        translateMc(context, "Akiramete New Save")))
    {
        return createGameDataImpl(context, manager, datasize, 1);
    }

    return false;
}

function clearAutoSaveDisabled(manager)
{
    if (manager == nil)
        manager = main::menu::MMemoryCardManager("MODE_OPERATION");

    manager.clearAutoSaveDisabled();
}

function checkUnformat(context, event)
{
    
}