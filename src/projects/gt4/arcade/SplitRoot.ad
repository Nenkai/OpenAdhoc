module PROJECT::ROOT
{
    static now1p = nil;
    CarRoot::setCrossFade(P1::Logo::bg, false);
    CarRoot::setCrossFade(P1::Logo::bg1, true);
    CarRoot::setCrossFade(P2::Logo::bg, false);
    CarRoot::setCrossFade(P2::Logo::bg1, true);

    function set_car(context, pane, car, color_idx)
    {
        var carface = pane["CarFace"];

        if (car != "")
        {
            carface.visible = true;
            carface.car_code = car;
            carface.setColorIndex(color_idx);
            move_car(carface);
        }
        else
            carface.visible = false;
    }

    function set_car_garage(context, pane, gcar)
    {
        var carface = pane["CarFace"];

        if (gcar != nil)
        {
            carface.visible = true;
            carface.car_garage = gcar;
            move_car(carface);
        }
        else
            carface.visible = false;
    }

    function set_info(context, pane, car)
    {
        var type = pane["Type"];
        var logo = pane["Logo"];
        var info = pane["Info"];

        if (car != "")
        {
            pane["Pad"].visible = false;
            type.visible = true;
            var ctry = main::menu::MCarData::GetCountry(car);
            type["nation"].image_path = "image/arcade/common/" + ctry + ".png";
            type["nation"].doInitialize(context);
            var ctgry = main::menu::MCarData::GetCategory(car);
            type["label"].text = context.translate(CarRoot, ctgry);

            logo.visible = true;
            var label = main::menu::MCarData::GetCarLabel(car);
            var tuner = main::menu::MCarData::GetTuner(car);
            logo["bg"].image_path = "piece/car_logo2/" + label + ".img";
            logo["bg"].doInitialize(context);
            var bg1 = logo["bg1"];
            bg1.image_path = "piece/tuner_logo2/" + tuner + ".img";
            bg1.doInitialize(context);
            bg1.adjustSize();
            bg1.x = logo["bg"].x + (logo["bg"].w - bg1.w) * 0.5;
            bg1.y = logo["bg"].y + (logo["bg"].h - bg1.h) * 0.5;

            CarRoot::resetCrossFade(logo["bg"], false);
            CarRoot::resetCrossFade(logo["bg1"], true);

            var cg = main::menu::MCarGarage(car);
            info["Year"]["label"].text = context.translate(ROOT, "Year:") + main::menu::MCarData::GetModelYear(car);

            var train = cg.getDTrainType();
            train = context.translate(ROOT, "DriveTrainName", train);
            info["Type"]["label"].text = context.translate(ROOT, "Type:") + train;

            info["Power"]["label"].text = context.translate(ROOT, "Power:") + cg.getCatPs("%d%s/%s%s");
            info["Torque"]["label"].text = context.translate(ROOT, "Torque:") + cg.getCatTq("%.2t%s/%s%s");

            pane["Buttons"]["Select"]["label"].text = context.translate(ROOT, "Change");
        }
        else
        {
            pane["Pad"].visible = true;
            type.visible = false;
            type["label"].text = "";
            logo.visible = false;
            info["Year"]["label"].text = "";
            info["Type"]["label"].text = "";
            info["Power"]["label"].text = "";
            info["Torque"]["label"].text = "";
            pane["Buttons"]["Select"]["label"].text = context.translate(ROOT, "Select");
        }
    }

    function decided1p()
    {
        return main::game.car_code != "" || main::game.car_garage != nil;
    }

    function decided2p()
    {
        return main::game.car_code_2p != "" || main::game.car_garage_2p != nil;
    }

    function onInitialize(context)
    {
        P1::CarFace.action_type = "normal";
        P1::CarFace.quality_level = 0;

        P2::CarFace.action_type = "normal";
        P2::CarFace.quality_level = 0;

        var decided_1p = decided1p();
        var decided_2p = decided2p();

        set_car(context, P2, main::game.car_code_2p, main::game.car_color_2p);

        var cg = main::game.car_garage;
        if (cg != nil)
        {
            set_info(context, P1, cg.car_code);
            set_car_garage(context, P1, cg);
        }
        else
        {
            set_info(context, P1, main::game.car_code);
            set_car(context, P1, main::game.car_code, main::game.car_color);
        }

        cg = main::game.car_garage_2p;
        if (cg != nil)
        {
            set_info(context, P2, cg.car_code);
            set_car_garage(context, P2, cg);
        }
        else
        {
            set_info(context, P2, main::game.car_code_2p);
            set_car(context, P2, main::game.car_code_2p, main::game.car_color_2p);
        }

        if (decided_1p && decided_2p)
            ROOT.setFocus(RaceStart);
        else if (decided_1p)
            ROOT.setFocus(P2::Buttons::Select);
        else if (decided_2p)
            ROOT.setFocus(P1::Buttons::Select);
        else
            ROOT.setFocus(P1::Buttons::Select);
            
        RaceStart.visible = decided_1p && decided_2p;
    }

    function onFinalize(context) { }

    function onKeyPress(context, event) { return EVENTRESULT_CONTINUE; }

    function onCancel(context)
    {
        main::sound.play("cancel");

        var decided_1p = decided1p();
        var decided_2p = decided2p();

        if (decided_1p || decided_2p)
        {
            if (openConfirmDialog(context, DIALOG_QUERY, context.translate(ROOT, "car selection will be initialized.")))
            {
                start_page(context, CourseRoot);
            }
            else
                ;
        }
        else
        {
            start_page(context, CourseRoot);
        }

        return EVENTRESULT_FILTER;
    }

    function move_car(carface)
    {
        if (carface.car_model != nil)
        {
            carface.car_model.motion = 1;
            carface.car_model.ry = 180.0;
            carface.car_model.tx = 0.0;
            carface.car_model.tz = 0.0;
            carface.car_model.warp();
        }
    }


}

module PROJECT::ROOT::P1::Buttons::Select
{
    function onActivate(context)
    {
        main::sound.play("ok");
        now1p = true;

        if (GameRoot::isSkipMethod())
        {
            MethodRoot::current_method = "ByFavorite";
            start_page(context, CarRoot);
        }
        else if (main::game.option.special_arcade_tuner != "")
        {
            MethodRoot::current_method = "ByMaker";
            MakerRoot::selected_name = main::game.option.special_arcade_tuner;
            start_page(context, CarRoot);
        }
        else
            start_page(context, MakerRoot)

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::P2::Buttons::Select
{
    function onActivate(context)
    {
        main::sound.play("ok");
        now1p = false;

        if (GameRoot::isSkipMethod())
        {
            MethodRoot::current_method = "ByFavorite";
            start_page(context, CarRoot);
        }
        else if (main::game.option.special_arcade_tuner != "")
        {
            MethodRoot::current_method = "ByMaker";
            MakerRoot::selected_name = main::game.option.special_arcade_tuner;
            start_page(context, CarRoot);
        }
        else
            start_page(context, MakerRoot)

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::RaceStart
{
    function onActivate(context)
    {
        var decided_1p = decided1p();
        var decided_2p = decided2p();

        if (decided_1p && decided_2p)
        {
            main::sound.play("next");
            GameRoot::doGame(context);
            return EVENTRESULT_FILTER;
        }
        else
            main::sound.play("disable");
    }
}