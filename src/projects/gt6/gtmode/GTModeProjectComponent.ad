module GTModeProjectComponent::DialogParts::InfoDialogFrame
{
    method appear(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = false;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method hide(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = true;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method onFinalize(context)
    {
        self.actor = nil;
    }
}

module GTModeProjectComponent::DialogParts::DialogFrame
{

    method appear(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = false;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }


    method hide(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = true;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }


    method onFinalize(context)
    {
        self.actor = nil;
    }
}

module GTModeProjectComponent::DialogParts::DialogFrame::Pane::Head
{
    SCALE_WIDGET_SDTV(label, 2.4);

    method setText(text)
    {
        Close::Circle::label.text = text;
        Close::Circle_i::label.text = text;
        Close::Cross::label.text = text;
        Close::Cross_i::label.text = text;
    }

    method onInitialize(context)
    {
        if (pdiext::MSystemConfiguration::GetEnterButtonAssign() == "circle")
        {
            Close::Circle.visible = false;
            Close::Circle_i.visible = false;
            Close::Cross.visible = true;
            Close::Cross_i.visible = true;
        }
        else
        {
            Close::Circle.visible = true;
            Close::Circle_i.visible = true;
            Close::Cross.visible = false;
            Close::Cross_i.visible = false;
        }
    }
}

module GTModeProjectComponent::DialogParts::SettingFrame
{
    SCALE_WIDGET_SDTV(ToolTip::tip, 2.6);

    attribute scrolled_body_h;

    method appear(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = false;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method hide(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = true;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method onFinalize(context)
    {
        self.actor = nil;
    }

    method adjust_scrolled_body(scrolled_body_max_h)
    {
        if (scrolled_body_max_h == nil)
            scrolled_body_max_h = self.scrolled_body_h;

        Pane::ScrolledBody::clip.minimum_height = self.scrolled_body_h;
        Pane::ScrolledBody::clip.h = self.scrolled_body_h;

        var clip = Pane::ScrolledBody::clip;
        var space = clip.space;
        clip.updateGeometry();

        var clip_h = space.inner_pad_top + space.inner_pad_bottom;
        var scrollable = false;

        for (var w = space.first; w != nil; w = w.next)
        {
            if (!w.visible || !w.is_enable)
                continue;

            if (clip_h + w.h > scrolled_body_max_h)
                break;

            clip_h += w.h;
        }

        space.x = 0.0;
        space.y = 0.0;

        space.w = clip.w;
        space.minimum_width = clip.w;
        
        space.h = clip_h;
        space.minimum_height = clip.h;

        clip.h = clip_h;
        clip.minimum_height = clip_h;
    }

    method onRealize(context)
    {
        self.scrolled_body_h = Pane::ScrolledBody::clip.h;
    }

    method onInitialize(context)
    {
        var adj = main::menu::MAdjustment();
        Pane::ScrolledBody::VScrollbar.adjustment = adj;
        Pane::ScrolledBody::clip.v_adjustment = adj;
    }
}

module GTModeProjectComponent::DialogParts::SettingFrame::Pane::Head
{
    SCALE_WIDGET_SDTV(label, 2.4);

    method setText(text)
    {
        Close::Circle::label.text = text;
        Close::Circle_i::label.text = text;
        Close::Cross::label.text = text;
        Close::Cross_i::label.text = text;
    }

    method onInitialize(context)
    {
        if (pdiext::MSystemConfiguration::GetEnterButtonAssign() == "circle")
        {
            Close::Circle.visible = false;
            Close::Circle_i.visible = false;
            Close::Cross.visible = true;
            Close::Cross_i.visible = true;
        }
        else
        {
            Close::Circle.visible = true;
            Close::Circle_i.visible = true;
            Close::Cross.visible = false;
            Close::Cross_i.visible = false;
        }
    }
}

module GTModeProjectComponent::DialogParts::SettingFrame2
{
    SCALE_WIDGET_SDTV(ToolTip::tip, 2.6);

    attribute scrolled_body_h;

    method appear(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = false;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method hide(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = true;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method onFinalize(context)
    {
        self.actor = nil;
    }

    method adjust_scrolled_body(scrolled_body_max_h)
    {
        if (scrolled_body_max_h == nil)
            scrolled_body_max_h = self.scrolled_body_h;

        Pane::Right::ScrolledBody::clip.minimum_height = self.scrolled_body_h;
        Pane::Right::ScrolledBody::clip.h = self.scrolled_body_h;

        var clip = Pane::Right::ScrolledBody::clip;
        var space = clip.space;
        clip.updateGeometry();

        var clip_h = space.inner_pad_top + space.inner_pad_bottom;
        var scrollable = false;

        for (var w = space.first; w != nil; w = w.next)
        {
            if (!w.visible || !w.is_enable)
                continue;

            if (clip_h + w.h > scrolled_body_max_h)
                break;

            clip_h += w.h;
        }

        space.x = 0.0;
        space.y = 0.0;

        space.w = clip.w;
        space.minimum_width = clip.w;
        
        space.h = clip_h;
        space.minimum_height = clip.h;

        clip.h = clip_h;
        clip.minimum_height = clip_h;
    }

    method onRealize(context)
    {
        self.scrolled_body_h = Pane::Right::ScrolledBody::clip.h;
    }

    method onInitialize(context)
    {
        var adj = main::menu::MAdjustment();
        Pane::Right::ScrolledBody::VScrollbar.adjustment = adj;
        Pane::Right::ScrolledBody::clip.v_adjustment = adj;
    }
}

module GTModeProjectComponent::DialogParts::SettingFrame2::Pane::Head
{
    SCALE_WIDGET_SDTV(label, 2.4);

    method setText(text)
    {
        Close::Circle::label.text = text;
        Close::Circle_i::label.text = text;
        Close::Cross::label.text = text;
        Close::Cross_i::label.text = text;
    }

    method onInitialize(context)
    {
        if (pdiext::MSystemConfiguration::GetEnterButtonAssign() == "circle")
        {
            Close::Circle.visible = false;
            Close::Circle_i.visible = false;
            Close::Cross.visible = true;
            Close::Cross_i.visible = true;
        }
        else
        {
            Close::Circle.visible = true;
            Close::Circle_i.visible = true;
            Close::Cross.visible = false;
            Close::Cross_i.visible = false;
        }
    }
}

module GTModeProjectComponent::DialogParts::Button
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module GTModeProjectComponent::DialogParts::OK
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module GTModeProjectComponent::DialogParts::Cancel
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module GTModeProjectComponent::DialogParts::CheckButton
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    method onActivate(context)
    {
        if (self.is_enable && !self.insensitive)
        {
            main::sound.play("checkbox");
            self.active = !self.active;

            if (self['onValueChanged'] != nil)
                self.onValueChanged(context);
        }

        return EVENTRESULT_CONTINUE;
    }
}

module GTModeProjectComponent::DialogParts::LabelButton
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module GTModeProjectComponent::DialogParts::LabelButton::vbox::Button
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module GTModeProjectComponent::DialogParts::Pulldown
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module GTModeProjectComponent::DialogParts::Pulldown::OptionMenu
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    attribute decide_callback;

    method onRealize(manager)
    {
        self.copy_selected_item = false;
        self.popup.visible = true;
        self.decide_callback = nil;
    }

    method pulldownValueChanged(context)
    {
        var w = self.getItem(self.index);
        if (w != nil)
        {
            var w2 = self;
            w2.label.text = w.label.text;
            w2.label.abbreviate = true;
            if (w2.label_i != nil)
            {
                w2.label_i.text = w.label.text;
                w2.label_i.abbreviate = true;
            }
        }
    }

    method onInitialize(context)
    {
        self.pulldownValueChanged(context);
    }

    method onFinalize(context)
    {
        self.decide_callback = nil;
    }

    method onValueChanged(context)
    {
        self.pulldownValueChanged(context);
        if (self.decide_callback != nil)
            decide_callback(context, self.index, self);
    }
}

module GTModeProjectComponent::DialogParts::PulldownItem
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module GTModeProjectComponent::DialogParts::Slider
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module GTModeProjectComponent::DialogParts::Slider::slider
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
    SCALE_WIDGET_SDTV(popup::Max::value, 2.4);
    SCALE_WIDGET_SDTV(popup::Max::label, 2.4);
    SCALE_WIDGET_SDTV(popup::Min::value, 2.4);
    SCALE_WIDGET_SDTV(popup::Min::label, 2.4);

    attribute zero_text;
    attribute unit_text;
    attribute min_text;
    attribute max_text;
    attribute decide_callback;
    attribute format_callback;
    attribute is_zero_callback;
    attribute arg;
    attribute initialized;
    attribute format_string;
    attribute quantizer;
    attribute step_thr;

    method onRealize(manager)
    {
        self.initialized = true;
        self.zero_text = nil;
        self.unit_text = nil;
        self.min_text = nil;
        self.max_text = nil;
        self.decide_callback = nil;
        self.format_callback = nil;
        self.is_zero_callback = nil;
        self.format_string = nil;
        self.quantizer = 1.0;
        self.step_thr = nil;
        
        var pup = self['popup'];
        pup.visible = true;
        pup.minimum_width = self.w;
        pup.w = self.w;
        pup.x = 0.0;
    }

    method onInitialize(context)
    {
        self.setup(context);
        self.initialized = true;
    }

    method onFinalize(context)
    {
        self.initialized = false;
        self.zero_text = nil;
        self.unit_text = nil;
        self.min_text = nil;
        self.max_text = nil;
        self.decide_callback = nil;
        self.format_callback = nil;
        self.is_zero_callback = nil;
        self.format_string = nil;
        self.step_thr = nil;
    }

    method onStepChanged(context)
    {
        if (self.step_thr != nil)
            self.on_step_changed();
    }

    method on_step_changed()
    {
        var x = self.value - self.repeat_start;
        x /= 4.0;

        if (x < 0.0)
            x = -x;

        if (x < 1.0)
            x = 1.0;

        if (x > self.step_thr)
            x = self.step_thr;

        self.step = x;
    }

    method onPopupOpen(context)
    {
        self.sliderPopupOpen(context);
    }

    method onPopupClosed(context)
    {
        self.sliderPopupClosed(context);
    }

    method onValueChanged(context)
    {
        self.sliderValueChanged(context);
    }

    function default_value_format_function(context, value, slider)
    {
        if (slider.zero_text != nil && slider.is_zero_callback(value, slider))
            return slider.zero_text;

        var q = Math::round(value * slider.quantizer);
        return slider.format_string.format(q);
    }

    function default_is_zero_function(value, slider)
    {
        var q = Math::round(value * slider.quantizer);
        return q == 0.0;
    }

    method setup(context)
    {
        if (self.format_callback == nil)
            self.format_callback = default_value_format_function;

        if (self.is_zero_callback == nil)
            self.is_zero_callback = default_is_zero_function;

        var stepscale = Math::log10(self.step);
        var precision = stepscale >= 0.0 ? 0 : Math::ceil(-stepscale).toInt();
        self.quantizer = 10.0 ** precision;

        if (precision <= 0)
            self.format_string = "%d";
        else
            self.format_string = "%." + precision.toString() + "t";

        if (self.unit_text != nil)
            self.parent.label_unit.text = unit_text;

        var pup = self['popup'];
        pup.Min::value.text = call_format_func(context, self.min);
        pup.Max::value.text = call_format_func(context, self.max);

        if (self.min_text != nil)
            pup.Min::label.text = self.min_text;

        if (self.max_text != nil)
            pup.Max::label.text = self.max_text;

        self.reflect(context);
    }

    method reflect(context)
    {
        var text;
        if (self.zero_text != nil && self.is_zero_callback(value, self))
            text = self.zero_text;
        else
            text = call_format_func(context, self.value);

        self.label.text = text;
        if (self.defined('label_i'))
            self.label_i.text = text;
    }

    method call_format_func(context, value)
    {
        return self.format_callback(context, value, self);
    }

    method sliderPopupOpen(context)
    {
        self.sliderValueChanged(context);
    }

    method sliderPopupClosed(context)
    {
        if (!self.initialized)
            return;

        if (!self.cancel)
        {
            self.reflect(context);
            if (self.decide_callback != nil)
                self.decide_callback(context, self.value, self);
        }
    }

    method sliderValueChanged(context)
    {
        if (!self.initialized)
            return;

        var pup = self['popup'];
        var text = call_format_func(context, self.value);
        self.label.text = text;
        if (self.defined('label_i'))
            self.label_i.text = text;
    }
}

module GTModeProjectComponent::DialogParts::CheckBox
{
    SCALE_WIDGET_SDTV(label, 2.4);

    attribute is_checkbox = true;
}

module GTModeProjectComponent::DialogParts::CheckBox::vbox::CheckButton
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    method onActivate(context)
    {
        if (self.is_enable && !self.insensitive)
        {
            main::sound.play("checkbox");
            self.active = !self.active;

            if (self['onValueChanged'] != nil)
                self.onValueChanged(context);
        }

        return EVENTRESULT_CONTINUE;
    }
}

module GTModeProjectComponent::DialogParts::InputTextBox
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module GTModeProjectComponent::DialogParts::InputTextBox::Text::input
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
    SCALE_WIDGET_SDTV(Text::InputText::label, 2.4);
    SCALE_WIDGET_SDTV(Text::InputText::label_i, 2.4);

    method onKeyPress(context)
    {
        if (self.Text.insensitive)
            return EVENTRESULT_FILTER;

        return EVENTRESULT_CONTINUE;
    }

    method onFocusEnter(context)
    {
        context.target_widget = InputText::Icon;
        return EVENTRESULT_FILTER;
    }
}

module GTModeProjectComponent::DialogParts::Column
{
    SCALE_WIDGET_SDTV(label, 2.4);

}

module GTModeProjectComponent::DialogParts::GroupHeader
{
    SCALE_WIDGET_SDTV(label, 2.4);

}

module GTModeProjectComponent::ListMenu::ListMenu
{
    attribute cb_vn;
    attribute cb_fn;

    method onRealize(manager)
    {
        self.setDisplayEmpty(false);
    }

    method setCategoryComponent(context, widgets)
    {
        if (widgets.isInstanceOf(menu::MWidget))
            widgets = [widgets];

        foreach (var w in widgets)
            self.Categories::ScrolledWindow::clip::space.appendChild(context, w);
    }

    method clearCategoryComponent(context)
    {
        var space = self.Categories::ScrolledWindow::clip::space;
        foreach (var w in space.getChildList())
        {
            if (w.name == "Header")
                continue;

            space.removeChild(w);
        }
    }

    method getListBox()
    {
        return self.ListWindow::clip::ListBox;
    }

    method setDisplayEmpty(visible, text)
    {
        if (text != nil)
            self.ListWindow::Empty::TextFace.text = text;

        self.ListWindow::Empty.visible = visible;
    }
}

module GTModeProjectComponent::ListMenu::ListMenu::ListWindow::clip::ListBox
{
    method onInitialize(context)
    {
        var adj = main::menu::MAdjustment();
        self.clip::VScrollbar.adjustment = adj;
        self.v_adjustment = adj;
    }

    method onFocusEnter(context)
    {
        var w = self.getItemWidget(self.focus_index, context);
        var root = context.getRootWindow();
        root.setFocus(w);
        return EVENTRESULT_FILTER;
    }
}

module GTModeProjectComponent::ListMenu::Category
{
    attribute value;

    method setCategoryItemComponent(context, widgets)
    {
        if (widgets.isInstanceOf(menu::MWidget))
            widgets = [widgets];

        foreach (var w in widgets)
            self.VBox.appendChild(context, w);
    }

    method setText(text)
    {
        self.Label.text = text;
    }
}

module GTModeProjectComponent::ListMenu::CategoryItem
{
    attribute value;

    method setText(text)
    {
        self.Label.text = text;
        self.Label_i.text = text;
        self.Label_a.text = text;
    }
}

module GTModeProjectComponent::ListMenu::ReplayItem
{
    attribute value;

    method onRealize(manager)
    {
        self.Favorite.visible = false;
        self.Logo.image_path = "";
        self.Name::Label.text = "";
        self.Name::Type.visible = false;
        self.Record::Label.text = "";
        self.PlayTime::Label.text = "";
        self.Datetime::Label.text = "";
    }

    method isBlank(is_blank)
    {
        if (is_blank == nil)
            return self.active2;
        else
        {
            self.active2 = is_blank;
            return true;
        }
    }

    method visibleCheckbox(visible)
    {
        if (visible == nil)
            return self.active3;
        else
        {
            self.active3 = visible;
            return true;
        }
    }

    method insensitiveCheckbox(_insensitive)
    {
        if (_insensitive == nil)
            return self.Checkbox::Check.insensitive;
        else
        {
            self.Checkbox::Check.insensitive = _insensitive;
            return true;
        }
    }

    method activeCheckbox(active)
    {
        if (active == nil)
        {
            return self.Checkbox::Check.active;
        }
        else if (self.Checkbox::Check.insensitive && active)
        {
            return false;
        }
        else
        {
            self.Checkbox::Check.active = active;
            return true;
        }
    }

    method setInfo(context, replay)
    {
        self.value = replay;
        self.Favorite.visible = replay.favorite;
    
        var course_code = replay.course_code;

        if (course_code == gtengine::COURSE_CODE_GENERATED)
            course_code = replay.scenery_code;

        var course_info = SPECDB.query1("SELECT Logo FROM COURSE WHERE ID=?", [course_code]);
        if (course_info == nil)
            return;

        self.Logo.image_path = "piece/gt6/course_logo_M/%s.img".format(course_info.Logo);
        self.Name::Label.text = replay.subtitle != "" ? replay.subtitle : manager.translate("RaceTypeName", "GameMode_%{replay.title}");

        if (replay.onelap > 0)
            self.Name::Label.text += manager.translate("SaveData", "BEST_LAP_REPLAY");

        if (replay.title == "EVENT_RACE")
        {
            self.Name::Type.visible = true;
            self.Name::Type::TextFace.text = replay.snapshot_filename == "B" ? "B" : "A";
        }

        self.Record::Label.text = ReplayFileUtil::getRaceBestResultText(replay);
        self.PlayTime::Label.text = ReplayFileUtil::getPlayTimeText(replay);

        var date_time = pdistd::MTime();
        date_time.setBySecond(replay.datetime);
        var local_time = date_time.toLocal();
        
        self.Datetime::Label.text = manager.translate("DateTime", "FORMAT_DATE_TIME")
            .build(local_time.year, 
                "%02d".format(local_time.month),
                "%02d".format(local_time.day),
                "%02d".format(local_time.hour),
                "%02d".format(local_time.minute));
    }
}

module GTModeProjectComponent::ListMenu::MusicItem
{
    attribute value;

    method onRealize(manager)
    {
        self.Favorite.visible = false;
        self.Name::Label.text = "";
        self.Genre::Label.text = "";
        self.Artist::Label.text = "";
    }

    method isBlank(is_blank)
    {
        if (is_blank == nil)
            return self.active2;
        else
        {
            self.active2 = is_blank;
            return true;
        }
    }

    method visibleCheckbox(visible)
    {
        if (visible == nil)
            return self.active3;
        else
        {
            self.active3 = visible;
            return true;
        }
    }

    method insensitiveCheckbox(_insensitive)
    {
        if (_insensitive == nil)
            return self.Checkbox::Check.insensitive;
        else
        {
            self.Checkbox::Check.insensitive = _insensitive;
            return true;
        }
    }

    method activeCheckbox(active)
    {
        if (active == nil)
        {            
            return self.Checkbox::Check.active;
        }
        else if (self.Checkbox::Check.insensitive && active)
        {
            return false;
        }
        else
        {
            self.Checkbox::Check.active = active;
            return true;
        }
    }

    method setInfo(context, music)
    {
        self.value = music;
        self.Name::Label.text = music.title;
        self.Artist::Label.text = music.artist;
        self.Genre::Label.text = music.genre;

        var playing = SoundUtil::BGMIsPlaying(music.code);
        self.PlayPause::ImageFacePlay.visible = !playing;
        self.PlayPause::ImageFacePause.visible = playing;
    }
}

module GTModeProjectComponent::ListMenu::PhotoItem
{
    attribute value;

    method onRealize(manager)
    {
        self.Favorite.visible = false;
        self.Thumbnail.image_path = "";
        self.Name::Label.text = "";
        self.Name::LabelComment.text = "";
        self.Datetime::Label.text = "";
        self.Ratio::Label.text = "";
        self.Ratio::LabelSize.text = "";
        self.Format::Label.text = "";
        self.Format::LabelSize.text = "";

    }

    method isBlank(is_blank)
    {
        if (is_blank == nil)
            return self.active2;
        else
        {
            self.active2 = is_blank;
            return true;
        }
    }

    method visibleCheckbox(visible)
    {
        if (visible == nil)
            return self.active3;
        else
        {
            self.active3 = visible;
            return true;
        }
    }

    method insensitiveCheckbox(_insensitive)
    {
        if (_insensitive == nil)
            return self.Checkbox::Check.insensitive;
        else
        {
            self.Checkbox::Check.insensitive = _insensitive;
            return true;
        }
    }

    method activeCheckbox(active)
    {
        if (active == nil)
        {            
            return self.Checkbox::Check.active;
        }
        else if (self.Checkbox::Check.insensitive && active)
        {
            return false;
        }
        else
        {
            self.Checkbox::Check.active = active;
            return true;
        }
    }

    method gcd(x, y)
    {
        if (x == 0 || y == 0)
            return 0;

        var r;
        while ((r = x % y) != 0)
        {
            x = y;
            y = r;
        }

        return y;
    }

    method setInfo(context, photo)
    {
        self.value = photo;
        self.Favorite.visible = photo.favorite;
        self.Thumbnail.image_path = photo.filename_t;
        self.Name::Label.text = PhotoFileUtil::getTitleText(context, photo.genre, photo.title);
        self.Name::LabelComment.text = photo.description;

        var date_time = pdistd::MTime();
        date_time.setBySecond(photo.datetime);

        var local_time = date_time.toLocal();
        self.Datetime::Label.text = manager.translate("DateTime", "FORMAT_DATE_TIME")
            .build(local_time.year, 
                "%02d".format(local_time.month),
                "%02d".format(local_time.day),
                "%02d".format(local_time.hour),
                "%02d".format(local_time.minute));

        var gcd_num = gcd(photo.width, photo.height);
        if (gcd_num == 0)
        {
            self.Ratio::Label.text = "- : -";
            self.Ratio::LabelSize.text = "";
        }
        else
        {
            self.Ratio::Label.text = "%d : %d".format(photo.width / gcd_num, photo.height / gcd_num);
            self.Ratio::LabelSize.text = "(%d x %d)".format(photo.width, photo.height);
        }

        self.Format::Label.text = photo.is_3d ? "MPO" : "JPEG";
        self.Format::LabelSize.text = UnitUtil::getDiskSizeString(context, photo.filesize);
    }
}

module GTModeProjectComponent::ListMenu::MovieItem
{
    attribute value;

    method onRealize(manager)
    {
        self.Favorite.visible = false;
        self.Thumbnail.image_path = "";
        self.Name::Label.text = "";
        self.Name::LabelComment.text = "";
        self.Datetime::Label.text = "";
    }

    method isBlank(is_blank)
    {
        if (is_blank == nil)
            return self.active2;
        else
        {
            self.active2 = is_blank;
            return true;
        }
    }

    method visibleCheckbox(visible)
    {
        if (visible == nil)
            return self.active3;
        else
        {
            self.active3 = visible;
            return true;
        }
    }

    method insensitiveCheckbox(_insensitive)
    {
        if (_insensitive == nil)
            return self.Checkbox::Check.insensitive;
        else
        {
            self.Checkbox::Check.insensitive = _insensitive;
            return true;
        }
    }

    method activeCheckbox(active)
    {
        if (active == nil)
        {            
            return self.Checkbox::Check.active;
        }
        else if (self.Checkbox::Check.insensitive && active)
        {
            return false;
        }
        else
        {
            self.Checkbox::Check.active = active;
            return true;
        }
    }

    method setInfo(context, movie)
    {
        self.value = movie;
        self.Favorite.visible = false;
        self.Thumbnail.image_path = "/piece/gt6/movie_img/%s.img".format(movie.Name.downcase());
        self.Name::Label.text = manager.translate("Movie", movie.Name + "_TITLE");
        self.Name::LabelComment.text = manager.translate("Movie", movie.Name + "_DESCRIPTION");

        var mm = "%02d".format(movie.Duration / 60);
        var ss = "%02d".format(movie.Duration % 60);

        self.Datetime::Label.text = "%{mm}:%{ss}";
    }
}

module GTModeProjectComponent::ListMenu::CourseItem
{
    attribute value;

    method onRealize(manager)
    {
        self.Favorite.visible = false;
        self.Logo.image_path = "";
        self.Name::Label.text = "";
        self.Name::Type.visible = false;
        self.Theme::Label.text = "";
        self.Length::Label.text = "";
        self.Datetime::Label.text = "";
    }

    method isBlank(is_blank)
    {
        if (is_blank == nil)
            return self.active2;
        else
        {
            self.active2 = is_blank;
            return true;
        }
    }

    method visibleCheckbox(visible)
    {
        if (visible == nil)
            return self.active3;
        else
        {
            self.active3 = visible;
            return true;
        }
    }

    method insensitiveCheckbox(_insensitive)
    {
        if (_insensitive == nil)
            return self.Checkbox::Check.insensitive;
        else
        {
            self.Checkbox::Check.insensitive = _insensitive;
            return true;
        }
    }

    method activeCheckbox(active)
    {
        if (active == nil)
        {            
            return self.Checkbox::Check.active;
        }
        else if (self.Checkbox::Check.insensitive && active)
        {
            return false;
        }
        else
        {
            self.Checkbox::Check.active = active;
            return true;
        }
    }

    method setInfo(context, course)
    {
        self.value = course;
        self.Name::Label.text = course["title"];
        self.Theme::Label.text = manager.translate("CourseName", course["theme"]);
        self.Length::Label.text = pdiext::MUnit::GetCourseLengthString(course["length"], true);

        var local_time = course["create_time"].toLocal();
        if (local_time.year < 2015) // Weird
            self.Datetime::Label.text = "---";
        else
        {
            self.Datetime::Label.text = manager.translate("DateTime", "FORMAT_DATE_TIME")
                .build(local_time.year, 
                    "%02d".format(local_time.month),
                    "%02d".format(local_time.day),
                    "%02d".format(local_time.hour),
                    "%02d".format(local_time.minute));
        }

        var image_face = self.Logo;
        var photo_id = course["photo_id"];

        if (CourseMakerUtil::isSampleCourse(course["course_id"]))
        {
            image_face.image_path = "/piece/gt6/coursemaker/%{photo_id}.img";
        }
        else
        {
            var image_path = Photo.getPngImagePath(photo_id);
            if (pdistd::Exist(image_path))
            {
                image_face.image_path = image_path;
            }
            else
            {
                Photo.requestPngImage(photo_id, function(args)
                {
                    |var context, var request| = args;
                    if (request.isDone())
                        image_face.image_path = image_path;
                })
            }
        }
    }
}

module GTModeProjectComponent::ButtonHelp::ButtonHelpGT6
{
    module hidden::ButtonSet
    {
        SCALE_WIDGET_SDTV(Circle::label, 2.4);
        SCALE_WIDGET_SDTV(Circle::labeli, 2.4);
        SCALE_WIDGET_SDTV(Square::label, 2.4);
        SCALE_WIDGET_SDTV(Square::labeli, 2.4);
        SCALE_WIDGET_SDTV(Triangle::label, 2.4);
        SCALE_WIDGET_SDTV(Triangle::labeli, 2.4);
        SCALE_WIDGET_SDTV(Cross::label, 2.4);
        SCALE_WIDGET_SDTV(Cross::labeli, 2.4);
        SCALE_WIDGET_SDTV(R1::label, 2.4);
        SCALE_WIDGET_SDTV(R1::labeli, 2.4);
        SCALE_WIDGET_SDTV(L1::label, 2.4);
        SCALE_WIDGET_SDTV(L1::labeli, 2.4);
        SCALE_WIDGET_SDTV(R2::label, 2.4);
        SCALE_WIDGET_SDTV(R2::labeli, 2.4);
        SCALE_WIDGET_SDTV(L2::label, 2.4);
        SCALE_WIDGET_SDTV(L2::labeli, 2.4);
    }

    method clear()
    {
        if (self.current_button_set != nil)
        {
            Pane.removeChild(self.current_button_set);
            self.current_button_set = nil;
        }

        if (self.prev_button_set != nil)
        {
            Pane.removeChild(self.prev_button_set);
            self.prev_button_set = nil;
        }

        self.current_button_set = nil;
        self.prev_button_set = nil;
        self.button_sets = Map();
    }

    method onRealize(manager)
    {
        hidden.visible = false;
    }

    method onFinalize(context)
    {
        clear();
    }

    function getEnterButtonName()
    {
        var assign = main::pdiext::MSystemConfiguration::GetEnterButtonAssign();
        if (assign == "circle")
            return "Circle"
        else
            return "Cross";
    }

    function getCancelButtonName()
    {
        var assign = main::pdiext::MSystemConfiguration::GetEnterButtonAssign();
        if (assign == "circle")
            return "Cross"
        else
            return "Circle";
    }

    attribute is_appear = false;
    attribute current_button_set = nil;
    attribute prev_button_set = nil;
    attribute button_sets = Map();
    attribute current_set = "";

    method set(context, set_list)
    {
        var button_set = hidden::ButtonSet.doCopy();
        if (pdiext::MSystemConfiguration::isSDTV())
        {
            if (set_list.size > 0 && set_list[set_list.size - 1][0] != "R2")
                set_list.push(["R2", manager.translate("Component", "Label_Zoom")]);
                
            
            var pad_left = set_list.size >= 6 ? -28 : 0;
            var w = button_set.first;

            while (w != nil)
            {
                w.pack_pad_left = pad_left;
                w = w.next;
            }
        }

        button_set.visible = false;

        var it = button_set.first;
        while (it != nil)
        {
            it.visible = false;
            it = it.next_widget;
        }

        var order_list = [];
        foreach (var set in set_list)
        {
            |var button_name, var text| = set;
            if (button_name == "Enter")
            {
                if (text == nil)
                    text = manager.translate("Component", "Label_" + button_name);
                var button_name = getEnterButtonName();
            }

            if (button_name == "Back" || button_name == "Cancel" || button_name == "Close")
            {
                if (text == nil)
                    text = manager.translate("Component", "Label_" + button_name);
                var button_name = getCancelButtonName();
            }

            if (text == nil)
                text = "";

            var button_w = button_set[button_name];
            order_list.push(button_w);
            button_w["label"].text = text;
            button_w["label"].visible = true;
            button_w["label_i"].text = text;
            button_w["label_i"].visible = false;
            button_w.visible = true;
        }

        button_set.reorderChild(order_list);
        self.prev_button_set = current_button_set;
        self.current_button_set = button_set;
        if (prev_button_set != nil)
        {
            Pane.removeChild(self.prev_button_set);
            self.prev_button_set = nil;
        }

        Pane.appendChild(context, button_set);
        button_set.InAnimation.restart();
        button_set.visible = true;
    }

    method addButtonSet(context, set_name, set_list)
    {
        self.button_sets[set_name] = set_list;
    }
    
    method setButtonSet(context, set_name)
    {
        if (self.current_set == set_name)
            return;
        var set_list = self.button_sets[set_name];
        self.set(context, set_list);
        self.current_set = set_name;
    }

    method getCurrentButtonSetName()
    {
        return self.current_set;
    }

    method setLabel(context, button_name, text)
    {
        var button_w = Pane::Buttons[button_name];
        button_w["label"].text = text;
        button_w["label_i"].text = text;
    }

    method setInsensitive(button_name, insensitive)
    {
        var button_w = Pane::Buttons[button_name];
        if (button_w != nil)
        {
            button_w["label"].visible = !insensitive;
            button_w["label_i"].visible = insensitive;
        }
    }

    method appear()
    {
        self.FadeEffect.reverse = false;
        self.FadeEffect.start();
        self.is_appear = true;
    }

    method hide()
    {
        self.FadeEffect.reverse = true;
        self.FadeEffect.start();
        self.is_appear = false;
    }

    method appearIf()
    {
        if (!self.is_appear)
        {
            appear();
            return true;
        }

        return false;
    }

    method hideIf()
    {
        if (self.is_appear)
        {
            hide();
            return true;
        }

        return false;
    }
}

module GTModeProjectComponent::Tooltip::HDToolTip
{
    SCALE_WIDGET_SDTV(tip, 2.6);
}

module GTModeProjectComponent::Tooltip::BalloonTip
{
    attribute current_widget;

    method set_value(context, widget, text, display_position, distance, visible_time)
    {
        if (self.current_widget == nil)
            return;

        self.current_widget.reset();
        if (self.current_widget == self['TIP_02'])
            self.current_widget = self['TIP_01'];
        else
            self.current_widget = self['TIP_02'];

        self.current_widget.visible = true;
        self.current_widget.set_value(context, widget, text, display_position, distance, visible_time);
    }

    method reset_value()
    {
        if (self.current_widget == nil)
            return;

        self.current_widget.reset();
    }

    method initialize(context)
    {
        if (self['TIP_01'] == nil)
        {
            var tip01 = self.Tip.doCopy();
            tip01.name = "TIP_01";
            tip01.opacity = 0.0;
            self.appendChild(context, tip01);
        }

        if (self['TIP_02'] == nil)
        {
            var tip02 = self.Tip.doCopy();
            tip02.name = "TIP_02";
            tip02.opacity = 0.0;
            self.appendChild(context, tip02);
        }

        self.current_widget = self['TIP_01'];
    }

    method onInitialize(context)
    {
        self.Tip.visible = false;
        initialize(context);
    }

    method onFinalize(context)
    {
        self.current_widget = nil;

        if (self['TIP_01'] != nil)
        {
            self.removeChild(context, self['TIP_01']);
        }

        if (self['TIP_02'] != nil)
        {
            self.removeChild(context, self['TIP_02']);
        }
    }
}

module GTModeProjectComponent::Tooltip::BalloonTip::Tip
{
    attribute thread;
    attribute widget;
    attribute default_w;
    attribute is_visible_end;
    attribute display_position;
    attribute distance;
    attribute visible_time;

    SCALE_WIDGET_SDTV(Text::TextFace, 2.4);

    method set_value(context, widget, text, display_position, distance, visible_time)
    {
        reset();

        self.widget = widget;
        self.Text.TextFace.text = text;

        self.display_position = display_position != nil ? display_position : "D";
        self.distance = distance != nil ? distance : 36;
        self.visible_time = visible_time != nil ? visible_time : 3;
        self.thread = Thread(display_tip_tick, context);
        self.thread.start();
    }

    method clear()
    {
        self.widget = nil;
        self.default_w = nil;
        self.display_position = nil;
        self.distance = nil;
        self.visible_time = nil;

        if (self.thread != nil)
        {
            self.thread.terminate();
            self.thread = nil;
        }
    }

    method reset()
    {
        clear();

        self.opacity = 0.0;
        self.AppearEffect.reset();
        self.VisibleEffect.reset();
        self.Text.TextFace.text = "";
        self.w = 0;
        self.h = 0;
        self.default_w = self.w;
        self.is_visible_end = false;
    }

    method onFinalize(context)
    {
        clear();
    }

    method display_tip_tick(context)
    {
        var current_w = self.default_w;

        for (;;)
        {
            if (self.is_visible_end || self.widget == nil)
            {
                reset();
                break;
            }

            if (self.default_w < current_w)
            {
                display_tip(context);
                break;
            }
        
            current_w = self.w;
            Thread::Sleep(0.05);
        }
    }

    method display_tip(context)
    {
        var bbox = self.widget.getBoundingBox();
        var base_x = bbox.x + (bbox.w * self.widget.cursor_align_x);
        var base_y = bbox.y + (bbox.h * self.widget.cursor_align_y);

        var disp_x, disp_y;
        if ("U" == self.display_position)
        {
            disp_x = base_x - (self.w * 0.5);
            disp_y = (base_y - self.distance) - self.Tip.h;
        }
        else
        {
            disp_x = base_x - (self.w * 0.5);
            disp_y = base_y + self.distance;
        }

        var viewport = context.getViewport();
        var display_area_L = viewport.x + 20;
        var display_area_R = (viewport.x + viewport.w) - 20;

        var adjust_x = 0;
        var left_x = disp_x;
        if (left_x < display_area_L)
            adjust_x = left_x - display_area_L;

        var right_x = disp_x + self.w;
        if (right_x > display_area_R)
            adjust_x = right_x - display_area_R;

        disp_x -= adjust_x;

        self.sx = disp_x;
        self.sy = disp_y;

        if (self.AppearEffect.pause && self.AppearEffect.time == 0)
        {
            var scale_cx = 0.0;
            if (self.BalloonTip.w > 0.0)
            {
                scale_cx = disp_x == 0.0 ? 0.0 : disp_x / self.BalloonTip.w;
            }

            var scale_cy = 0.0;
            if (self.BalloonTip.h > 0.0)
            {
                scale_cy = disp_y == 0.0 ? 0.0 : disp_y / self.BalloonTip.h;
            }

            self.BalloonTip.center = [scale_cx, scale_cx]; // PDI Typo?
            self.AppearEffect.restart();
        }

        if (self.VisibleEffect.pause && self.AppearEffect.time == 0)
        {
            self.VisibleEffect.setStartDuration(0, self.visible_time);
            self.VisibleEffect.restart();
            self.VisibleEffect.on_effect_end = function(context)
            {
                self.is_visible_end = true;
                self.VisibleEffect.on_effect_end = nil;
            };
        }
    }
}

module GTModeProjectComponent::Scroller::HScrollPointer
{
    attribute pointer_reseted;

    method onLoad(context)
    {
        hidden.visible = false;
        self.space.clearChildren();
    }

    method onInitialize(context)
    {
        self.pointer.visible = false;
        self.space.clearChildren();
    }

    method getItemCount()
    {
        return self.space.countChild();
    }

    method setItemCount(context, count)
    {
        if (count > 1)
        {
            self.visible = true;
            self.space.clearChildren();

            for (var i = 0; i < count; i++)
            {
                var w = hidden::Dot.doCopy();
                self.space.appendChild(context, w);
            }
        }
        else
            self.visible = false;
    }

    method setPointer(index, warp)
    {
        var w = hidden::Dot.w;
        var target_x = self.space.x + (w * index);
        var actor = self.pointer::MoveX;

        actor.setStartValue(0, self.pointer.x);
        actor.setEndValue(0, target_x);
        actor.restart();

        var warp;
        if (self.pointer.visible == false)
        {
            self.pointer.visible = true;
            warp = true;
        }

        if (warp == true)
        {
            actor.warp();
        }
    }

    method warpPointer(index)
    {
        var w = hidden::Dot.w;
        var target_x = self.space.x + (w * index);
        var actor = w.pointer::MoveX;

        actor.stop();
        w.pointer.x = target_x;
    }
}

module GTModeProjectComponent::Icon::WeatherS
{
    method onRealize(manager)
    {
        self.hidden.visible = false;
        self.icon.image_path = "";
    }
        
    method setIcon(info, hour)
    {
        var materials = [];
        if (info.ChangeWeather)
            materials.push("random");

        if (hour == nil)
        {
            var datetime = pdistd::MTime();
            datetime.setForCourse(info.StartDateTime);
            hour = datetime.hour;
        }

        var is_day = hour >= 6 && hour < 18;
        if (is_day)
            materials.push("day");
        else
            materials.push("night");

        switch (info.Condition)
        {
            case gtengine::CourseCondition::DRY:
                if (info.ChangeWeather)
                    materials.push("rain");
                break;

            case gtengine::CourseCondition::WET:
                materials.push("rain");
                break;

            case gtengine::CourseCondition::SNOW:
                materials.push("snow");
                break;
        }

        var icon_name = materials.join("_");
        self.icon.image_path = "/image/common/weather_s/%s.dds".format(icon_name);
    }
}

module GTModeProjectComponent::Icon::ChangeTimeS
{
    method onRealize(manager)
    {
        self.icon.visible = false;
    }

    method setIcon(info)
    {
        self.icon.visible = info.ChangeTime;
    }
}

module GTModeProjectComponent::MapClip
{
    attribute map_data;
    attribute thread0;

    method initializeImpl(context, gp, course_info)
    {
        CourseMapFaceUtil::initialize(context, MapClip.CourseMapFace, course_info, gp.event);
        restart();
    }

    method initialize(context, gp, course_info)
    {
        if (course_info.Scenery && !ORG.getDerivedMapData())
        {
            self.thread0 = Thread(function(context)
            {
                while (!ORG.getDerivedMapData())
                    Thread::Sleep(1.0);
                
                MapClip.initializeImpl(context, gp, course_info);
            }, context);
            self.thread0.start();

            yield;
        }
        else
            initializeImpl(context, gp, course_info);
    }

    method finalize(context)
    {
        self.map_data = nil;
        if (self.thread0 != nil)
        {
            self.thread0.terminate();
            self.thread0 = nil;
        }
    }

    method restart()
    {
        self.CourseMapFace.SpanActor.restart();
    }
}

module GTModeProjectComponent::Buttons::Circle::bgf
{
    method __init__()
    {
        self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = 0.25;
        self.actor.repeat = true;
    }
}

module GTModeProjectComponent::HDPulldown::Item
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module GTModeProjectComponent::HDSetupPanel::BaseRow
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module GTModeProjectComponent::RaceMenu::Template::SBox0::ScalarInterpolator
{
    method onEffectEnd(context)
    {
        RaceMenuUtil::onEffectEnd_Sbox0ScalarInterpolator(context);
    }
}

module GTModeProjectComponent::RaceMenu::Template::SBox0::SBox1::ListBox
{
    method onFocusEnter(context)
    {
        return RaceMenuUtil::onFocusEnterListBox(context, self);
    }

    method onFocusLeave(context)
    {
        return RaceMenuUtil::onFocusLeaveListBox(context, self);
    }

    method onFocus(context, new_index, old_index)
    {
        RaceMenuUtil::onFocusListBox(context, self, new_index, old_index);
    }

    method onActivate(context)
    {
        return RaceMenuUtil::onActivateListBox(context, self);
    }
}

module GTModeProjectComponent::RaceMenu::Template::Item
{
    attribute icon;
}

module GTModeProjectComponent::GTAutoMenu::GTAutoMenu
{
    attribute cb_vn;
    attribute cb_fn;

    method onRealize(manager)
    {
        self.setDisplayEmpty(false);
    }

    method setCategoryComponent(context, widgets)
    {
        if (widgets.isInstanceOf(menu::MWidget))
            widgets = [widgets];

        foreach (var w in widgets)
            self.Categories::ScrolledWindow::clip::space.appendChild(context, w);
    }

    method clearCategoryComponent(context)
    {
        self.Categories::ScrolledWindow::clip::space.clearChildren(context);
    }

    method getListBox()
    {
        return self.ListWindow::clip::ListBox;
    }

    method setDisplayEmpty(visible, text)
    {
        if (text != nil)
            self.ListWindow::Empty::TextFace.text = text;

        self.ListWindow::Empty.visible = visible;
    }
}

module GTModeProjectComponent::GTAutoMenu::GTAutoMenu::ListWindow::clip::ListBox
{
    method onInitialize(context)
    {
        var adj = main::menu::MAdjustment();
        self.clip::VScrollbar.adjustment = adj;
        self.clip::VScrollArrow.adjustment = adj;
        self.v_adjustment = adj;
    }

    method onFocusEnter(context)
    {
        var w = self.getItemWidget(self.focus_index, context);
        var root = context.getRootWindow();
        root.setFocus(w);
        return EVENTRESULT_FILTER;
    }
}

module GTModeProjectComponent::RoomInformation
{
    module Info
    {
        attribute getCourseCallback;

        method isBlank()
        {
            return blank.is_enable;
        }

        method setBlank(flag)
        {
            Container.is_enable = !flag;
            blank.is_enable = flag;
        }

        method setInfo(context, room)
        {
            Container.setInfo(context, room);
        }

        method setClubName(name)
        {
            Container.setClubName(name);
        }

        method setInsensitiveText(text)
        {
            Insensitive.setText(text);
        }

        method setGetCourseCallback(func)
        {
            self.getCourseCallback = func;
        }

        method onDestroy(manager)
        {
            self.getCourseCallback = nil;
        }

        method setColor(mode)
        {
            Container.Mode.setColor(mode);
        }

        method setVisibilityLevel(level)
        {
            switch (level)
            {
                case 1:
                    Container::EventInfo.visible = true;
                    Container::Message.visible = false;
                    Container::RoomInfo.visible = false;
                    break;

                case 2:
                    Container::EventInfo.visible = true;
                    Container::Message.visible = true;
                    Container::RoomInfo.visible = false;
                    break;

                case 3:
                    Container::EventInfo.visible = true;
                    Container::Message.visible = true;
                    Container::RoomInfo.visible = true;
                    break;
            }
        }

        method deactivateAllMode()
        {
            Container.Mode.deactivateAllMode();
        }

        module blank
        {
            method onRealize(manager)
            {
                var text = manager.translate("Regulation", "pp");
                Limit::PP.off.off.text = text;
                Limit::PP.on.on.text = text;

                text = pdiext::MUnit::GetUnitOfPower();
                Limit::PS.off.off.text = text;
                Limit::PS.on.on.text = text;
            }
        }

        module Insensitive
        {
            method onRealize(manager)
            {
                Text::TextFace.text = "";
            }

            method setText(text)
            {
                Text::TextFace.text = text;
            }
        }

        module Container
        {
            function getSignalLevel(rtt)
            {
                var level = 0;
                if (rtt < 0)
                    ;
                else if (rtt <= 50 * 1000)
                    level = 5;
                else if (rtt <= 100 * 1000)
                    level = 4;
                else if (rtt <= 150 * 1000)
                    level = 3;
                else if (rtt <= 300 * 1000)
                    level = 2;
                else
                    level = 1;

                return level;
            }

            function getCourseNameShort(course)
            {
                if (!course.isInstanceOf(STRecord))
                    course = getCourse(course);

                return manager.translate("CourseName", course.Name);
            }

            function getCourseAttributeText(info)
            {
                var list = [];
                if (info.Reverse)
                    list.push(manager.translate("CourseData", "direction_reverse"));
    
                if (info.ChangeWeather)
                    list.push(manager.translate("CourseData", "track_change_weather"));
    
                if (info.ChangeTime)
                    list.push(manager.translate("CourseData", "track_change_time"));

                return list.size > 0 ? list.join(" / ") : "";
            }

            method onRealize(manager)
            {
                Mode.reset();
            }

            method setInfo(context, room)
            {
                Mode.reflectState(context, room);
                EventInfo.setInfo(context, room);
                Message.setInfo(context, room);
                RoomInfo.setInfo(context, room);
            }

            method setClubName(name)
            {
                EventInfo.setClubName(name);
            }

            module EventInfo
            {
                method onRealize(context)
                {
                    ClubName.visible = false;
                    ClubName::TextFace.text = "";
                    Course::TextFace.text = "";
                    Course::Attribute.text = "";

                    var text = manager.translate("Regulation", "pp");
                    Limit::PP.off.off.text = text;
                    Limit::PP.on.on.text = text;
    
                    text = pdiext::MUnit::GetUnitOfPower();
                    Limit::PS.off.off.text = text;
                    Limit::PS.on.on.text = text;
                }

                method setInfo(context, room)
                {
                    if (room["roomType"] == gtengine::RoomType::CLUB_LOBBY ||
                        room["roomType"] == gtengine::RoomType::CLUB_EVENT)
                    {
                        Mode.setColor(2);
                        if (room["clubName"] != nil)
                        {
                            ClubName.visible = true;
                            ClubName::TextFace.text = room["clubName"];
                        }
                    }

                    var courseCode = room["realCourseCode"];
                    var course;
                    if (self.parent.getCourseCallback != nil)
                        course = self.parent.getCourseCallback(courseCode);
                    else
                    {
                        course = SPECDB.query1("SELECT Name, Logo, Reverse, ChangeWeather, ChangeTime"
                                               " FROM COURSE WHERE ID = %d".format(courseCode));
                    }

                    Course::TextFace.text = getCourseNameShort(course);
                    Course::Attribute.text = getCourseAttributeText(course);

                    var INVALID = gtengine::MGameParameter::INVALID_VALUE_INT;
                    self.Limit::PP.active = room["limitPP"] != INVALID;
                    self.Limit::PS.active = room["limitPower"] != INVALID;
                    self.Limit::Weight.active = room["needWeight"] != INVALID;
                    self.Limit::Car.active = room["isCarModelRestricted"];
                    self.Limit::Setting.active = room["isTuningRestricted"];
                    self.Limit::Option.active = room["isDrivingOptionRestricted"];
                }

                method setClubName(name)
                {
                    ClubName.visible = true;
                    ClubName::TextFace.text = name;
                }
            }

            module Message
            {
                method onRealize(context)
                {
                    Comment::TextFace.text = "";
                    Policy::TextFace.text = "";
                }

                method setInfo(context, room)
                {
                    Comment::TextFace.text = room["comment"];
                    if (room["roomType"] == gtengine::RoomType::CLUB_LOBBY ||
                        room["roomType"] == gtengine::RoomType::CLUB_EVENT)
                    {
                        Policy.visible = false;
                    }
                    else
                    {
                        Policy::TextFace.text = OnlineUtil::getRoomPolicyString(room["roomPolicy"]);
                        Policy.visible = true;
                    }
                }
            }

            module RoomInfo
            {
                method onRealize(context)
                {
                    HBox::MemberNum::TextFace.text = "";
                    HBox::Country::CountryFlag.image_path = "";
                    HBox::Country::TextFace.text = "";
                    HBox::Owner::TextFace.text = "";
    
                    VoiceChat.active = false;
    
                    for (var it = Antena::HBox.first; it != nil; it = it.next)
                        it.visible = false;
                }
            

                method setInfo(context, room)
                {
                    if (room["ownerRegion"] != "")
                    {
                        HBox::Owner::TextFace.text = room["displayName"];
                        HBox::Country::CountryFlag.image_path = "piece/flag_ranking/%s.img".format(room["ownerRegion"].downcase());
                        HBox::Country::TextFace.text = manager.translate("Country", room["ownerRegion"].upcase());
                    }

                    HBox::MemberNum::TextFace.text = "%2d/%2d".format(room["memberNum"], room["maxSlot"]);
                    VoiceChat.active = room["voiceChatActivity"];

                    var stars = "";
                    var race_quality = OnlineUtil::getRaceQualityType(room["qualityControlTemplateType"]);

                    for (var i = 0; i <= race_quality; i++)
                        stars += RaceQuality::star.text;

                    RaceQuality::Level.text = stars;

                    var signal_lv = getSignalLevel(room["rtt"]);

                    if (signal_lv > 0)
                    {
                        for (var it = Antena::HBox.first, i = 0; i < signal_lv; it = it.next, i++)
                        {
                            it.visible = true;
                        }
                    }

                    self.FriendOnly.visible = self.visible && room["scope"] == gtengine::Scope::FRIEND;
                }
            }
        }
    }

    module ModeBase
    {
        method reset(set_color = true)
        {
            if (set_color)
                self.setColor(1);

            self.Practice.setState(false);
            self.FreeRun.setState(false);
            self.Qualify.setState(false);
            self.TimeTrial.setState(false);
            self.Race.setState(false);
            self.Endurance.setState(false);
            self.Drift.setState(false);
        }

        method deactivateAllMode()
        {
            self.Practice.setActive(false);
            self.FreeRun.setActive(false);
            self.Qualify.setActive(false);
            self.TimeTrial.setActive(false);
            self.Race.setActive(false);
            self.Endurance.setActive(false);
            self.Drift.setActive(false);
        }

        method setColor(mode)
        {
            var base_color = ColorSample::OpenLobby::HeaderBaseColor;
            switch (mode)
            {
                case 1:
                    base_color = ColorSample::OpenLobby::HeaderBaseColor;
                    break;

                case 2:
                    base_color = ColorSample::ClubLobby::HeaderBaseColor
                    break;

                case 3:
                    base_color = ColorSample::Setting::HeaderBaseColor;
                    break;
            }

            Practice.BaseColor.setColor(base_color);
            FreeRun.BaseColor.setColor(base_color);
            Qualify.BaseColor.setColor(base_color);
            TimeTrial.BaseColor.setColor(base_color);
            Race.BaseColor.setColor(base_color);
            Endurance.BaseColor.setColor(base_color);
            Drift.BaseColor.setColor(base_color);
        }

        method reflectState(context, room)
        {
            var roomGameMode = room["roomGameMode"];
            var hasEvent = roomGameMode != gtengine::RoomGameMode::FREERUN;
            var isFreeRun = room["isFreeRun"];

            if (hasEvent)
            {
                var hasQualifier = room["qualifierRaceType"] != gtengine::RaceType::NONE;
                var eventPhase = room["eventPhase"];
                var isInQualifier = hasQualifier && eventPhase == gtengine::EventPhase::Qualifier;
                self.FreeRun.setState(false);

                self.Qualify.setState(hasQualifier, isInQualifier);
                var str = manager.translate("OnlineMessage", "RoomGameModeInfo_Qualify_Time")
                    .build(room["qualifierPeriod"] / 60);
                self.Qualify.setText(str);
            

                var hasRace = roomGameMode == gtengine::RoomGameMode::RACE ||
                              roomGameMode == gtengine::RoomGameMode::RACE_WITH_QUALIFIER;
                var isInRace = hasRace && !isInQualifier && !isFreeRun || eventPhase == gtengine::EventPhase::Game;
                self.Race.setState(hasRace, isInRace);
                str = manager.translate("OnlineMessage", "RoomGameModeInfo_Race_Lap")
                    .build(room["totalLaps"]);
                self.Race.setText(str);

                var hasEndurance = roomGameMode == gtengine::RoomGameMode::ENDURANCE ||
                                   roomGameMode == gtengine::RoomGameMode::ENDURANCE_WITH_QUALIFIER;
                var isInEndurance = hasEndurance && !isInQualifier && !isFreeRun || eventPhase == gtengine::EventPhase::Game;
                self.Endurance.setState(hasEndurance, isInEndurance);
                var minutes = room["raceLimitMinute"];
                var isHour = MiscUtil::isHourSuitableForMinute(minutes, Constant::Online::HourThresholdMinutes);
                var key = isHour ? "RoomGameModeInfo_Race_Time_Hour" : "RoomGameModeInfo_Race_Time";
                str = manager.translate("OnlineMessage", key).build(isHour ? minutes / 60 : minutes);
                self.Endurance.setText(str);

                var isInTimeTrial = !isFreeRun;
                self.TimeTrial.setState(roomGameMode == gtengine::RoomGameMode::TIME_TRIAL, isInTimeTrial);
                str = manager.translate("OnlineMessage", "RoomGameModeInfo_Race_Time").build(room["qualifierPeriod"] / 60);
                self.TimeTrial.setText(str);

                var isInDrift = !isFreeRun;
                self.Drift.setState(roomGameMode == gtengine::RoomGameMode::DRIFT_TRIAL, isInDrift);
                str = manager.translate("OnlineMessage", "RoomGameModeInfo_Race_Time").build(room["qualifierPeriod"] / 60);
                self.Drift.setText(str);

                var isInPractice = !isInQualifier && !isInRace && !isInEndurance && !isInTimeTrial && !isInDrift;
                self.Practice.setState(true, isInPractice);
            }
            else
            {
                self.FreeRun.setState(true, true);
                self.Practice.setState(false);
                self.Qualify.setState(false);
                self.Race.setState(false);
                self.Endurance.setState(false);
                self.TimeTrial.setState(false);
                self.Drift.setState(false);
            }
        }

        method reflectRoomConfig(context, room_game_mode, rc, sinfo)
        {
            var hasEvent = room_game_mode != gtengine::RoomGameMode::FREERUN;
            var isFreeRun = ORG.isFreeRun();

            if (hasEvent)
            {
                self.FreeRun.setState(false);

                var hasQualifier = rc.hasQualifier();
                var isInQualifier = hasQualifier && sinfo.event_phase == gtengine::EventPhase::Qualifier;
                var str = manager.translate("OnlineMessage", "RoomGameModeInfo_Qualify_Time")
                    .build(rc.qualifier_period / 60);
                self.Qualify.setState(hasQualifier, isInQualifier);
                self.Qualify.setText(str);
            
                var hasRace = room_game_mode == gtengine::RoomGameMode::RACE ||
                              room_game_mode == gtengine::RoomGameMode::RACE_WITH_QUALIFIER;
                var isInRace = hasRace && !isInQualifier && !isFreeRun || sinfo.event_phase == gtengine::EventPhase::Game;
                str = manager.translate("OnlineMessage", "RoomGameModeInfo_Race_Lap")
                    .build(rc.race_limit_laps);
                self.Race.setState(hasRace, isInRace);
                self.Race.setText(str);

                var hasEndurance = rc.isEnduranceMode();
                var isInEndurance = hasEndurance && !isInQualifier && !isFreeRun || sinfo.event_phase == gtengine::EventPhase::Game;
                var minutes = rc.race_limit_minute;
                var isHour = MiscUtil::isHourSuitableForMinute(minutes, Constant::Online::HourThresholdMinutes);
                var key = isHour ? "RoomGameModeInfo_Race_Time_Hour" : "RoomGameModeInfo_Race_Time";
                str = manager.translate("OnlineMessage", key).build(isHour ? minutes / 60 : minutes);
                self.Endurance.setState(hasEndurance, isInEndurance);
                self.Endurance.setText(str);

                var hasTimeTrial = room_game_mode == gtengine::RoomGameMode::TIME_TRIAL;
                var isInTimeTrial = !isFreeRun;
                str = manager.translate("OnlineMessage", "RoomGameModeInfo_Race_Time").build(rc.qualifier_period / 60);
                self.TimeTrial.setState(hasTimeTrial, isInTimeTrial);
                self.TimeTrial.setText(str);

                var hasDriftTrial = room_game_mode == gtengine::RoomGameMode::DRIFT_TRIAL;
                var isInDriftTrial = !isFreeRun;
                str = manager.translate("OnlineMessage", "RoomGameModeInfo_Race_Time").build(rc.qualifier_period / 60);
                self.Drift.setState(hasDriftTrial, isInDriftTrial);
                self.Drift.setText(str);

                var isInPractice = !isInQualifier && !isInRace && !isInEndurance && !isInTimeTrial && !isInDriftTrial;
                self.Practice.setState(true, isInPractice);
            }
            else
            {
                self.FreeRun.setState(true, true);
                self.Practice.setState(false);
                self.Qualify.setState(false);
                self.Race.setState(false);
                self.Endurance.setState(false);
                self.TimeTrial.setState(false);
                self.Drift.setState(false);
            }
        }

        method reflectRoomGameMode(room_game_mode)
        {
            self.reset(false);
            self.Practice.setState(true);

            switch (room_game_mode)
            {
                case gtengine::RoomGameMode::FREERUN:
                    self.FreeRun.setState(true);
                    self.Practice.setState(false);
                    break;

                case gtengine::RoomGameMode::RACE:
                    self.Race.setState(true);
                    break;

                case gtengine::RoomGameMode::RACE_WITH_QUALIFIER:
                    self.Race.setState(true);
                    self.Qualify.setState(true);
                    break;

                case gtengine::RoomGameMode::TIME_TRIAL:
                    self.TimeTrial.setState(true);
                    break;

                case gtengine::RoomGameMode::DRIFT_TRIAL:
                    self.Drift.setState(true);
                    break;

                case gtengine::RoomGameMode::ENDURANCE:
                    self.Endurance.setState(true);
                    break;

                case gtengine::RoomGameMode::ENDURANCE_WITH_QUALIFIER:
                    self.Endurance.setState(true);
                    self.Qualify.setState(true);
                    break;
            }
        }
    }

    module ModeItemBase
    {
        method setState(visible, active = false)
        {
            if (visible)
            {
                self.Normal.visible = true;
                self.setActive(active);
            }

            self.visible = visible;
        }

        method setActive(active)
        {
            if (self.defined("Active"))
            {
                self.Active.visible = active;
            }
        }

        method setText(text)
        {
            self.Normal::Info::Pack::label.text = text;
            self.Active::Info::Pack::label.text = text;
        }
    }

    module Mode_L
    {
        import ModeBase::*;
        
        module Practice
        {
            import ModeItemBase::*;
        }

        module FreeRun
        {
            import ModeItemBase::*;
        }

        module Qualify
        {
            import ModeItemBase::*;
        }

        module TimeTrial
        {
            import ModeItemBase::*;
        }

        module Race
        {
            import ModeItemBase::*;
        }

        module Endurance
        {
            import ModeItemBase::*;
        }

        module Drift
        {
            import ModeItemBase::*;
        }
    }

    module Mode_M
    {
        import ModeBase::*;
        
        module Practice
        {
            import ModeItemBase::*;
        }

        module FreeRun
        {
            import ModeItemBase::*;
        }

        module Qualify
        {
            import ModeItemBase::*;
        }

        module TimeTrial
        {
            import ModeItemBase::*;
        }

        module Race
        {
            import ModeItemBase::*;
        }

        module Endurance
        {
            import ModeItemBase::*;
        }

        module Drift
        {
            import ModeItemBase::*;
        }
    }

    module Mode_S
    {
        import ModeBase::*;
        
        module Practice
        {
            import ModeItemBase::*;
        }

        module FreeRun
        {
            import ModeItemBase::*;
        }

        module Qualify
        {
            import ModeItemBase::*;
        }

        module TimeTrial
        {
            import ModeItemBase::*;
        }

        module Race
        {
            import ModeItemBase::*;
        }

        module Endurance
        {
            import ModeItemBase::*;
        }

        module Drift
        {
            import ModeItemBase::*;
        }
    }
}