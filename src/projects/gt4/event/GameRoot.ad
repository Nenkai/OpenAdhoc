module PROJECT::ROOT
{
	static current_game = nil;
	
	static game_list = [
		"SingleRace",
		"PhotoMode",
		"LANBattle",
		"TimeTrial",
		"Ranking"
	];
	
	function onInitialize(context)
	{
		if (current_game != nil)
			ROOT.setFocus(ROOT[current_game]);
		
		LANBattle.insensitive = !main::network.isNetworkInitialized();
	}
	
	function onCancel(context, item)
	{
		main::sound.play("cancel");
		context.transition.panOutIn(context);
		context.transition.syncOut(context);
		context.startPage(TopRoot);
		return EVENTRESULT_FILTER;
	}

	function goCourse(context)
	{
		main::sound.play("ok");
		context.transition.panOutIn(context);
		context.transition.syncOut(context);
		context.startPage(CourseRoot);
		return EVENTRESULT_FILTER;
	}


	function isSkipMethod()
	{
		switch (current_game)
		{
			case "PhotoMode":
			case "LANBattle":
				return true;
			default:
				return false;
		}
	}

	function doGame(context)
	{
		context.transition.panOut(context);
		context.transition.syncOut(context);

		switch (current_game)
		{
			case "SingleRace":
			{
				main::game.next_sequence = "single_race";
				main::game.next_menu_project = "event";
				main::game.race_code = CarRoot::getRaceCode();
				break;
			}

			case "PhotoMode":
				main::game.next_sequence = "photo_shoot";
				main::game.next_menu_project = "photo_shoot";
				break;
		}

		main::game.course_code = CourseRoot::getCurrentCourse();
		main::game.car_code = CarRoot::getCurrentCar();
		main::game.car_color = CarRoot::getCurrentColor();
		context.finish();
	}
}

module PROJECT::ROOT::SingleRace
{
	function onActivate(context, item)
	{
		current_game = "SingleRace";
		goCourse(context);
		return;
	}
}

module PROJECT::ROOT::PhotoMode
{

	function onActivate(context, item)
	{
		current_game = "PhotoMode";
		MethodRoot::current_method = "ByHot";
		goCourse(context);
		return;
	}
}

module PROJECT::ROOT::LANBattle
{

	function onActivate(context, item)
	{
		main::sound.play("ok");
		context.transition.panOutIn(context);
		context.transition.syncOut(context);
		context.startPage(WaitRoot);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Ranking
{
	function onActivate(context, item)
	{
		current_game = "Ranking";
		main::sound.play("ok");
		context.transition.panOut(context);
		context.transition.syncOut(context);
		main::game.next_menu_project = "ranking";
		context.finish();
		return EVENTRESULT_FILTER;
	}
}