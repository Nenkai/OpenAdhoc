//---------------------------------------------------------------------------------------
// QuickDriftAttackRootImpl.ad (standalone script)
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

#ifndef ROOT
    #define ROOT QuickDriftAttackRoot
#endif

#include "DetailUtil.ad"

module ROOT
{
    attribute sStartRaceBlock = nil;
    attribute sCanExit = true;

    method onStartRace(context)
    {
        if (ROOT.sStartRaceBlock)
            return;
        
        if (TextFaceLoading.visible)
            return;

        main::ORG.pauseRace = false;

        var rp = main::RaceOperator.race_parameter;

        if (main::RaceOperator.race_parameter.endless)
            rp.start_type = main::gtengine::StartType::ATTACK;
        else
            rp.start_type = main::gtengine::StartType::COURSEINFO;

        main::RaceOperator.race_parameter = rp;

        var res = doStartRace(context);
        if (res)
        {
            self.sStartRaceBlock = true;
        }

        return EVENTRESULT_FILTER;
    }

    method onStartReplay(context)
    {
        PluginModule::doStartReplay(context);
        return EVENTRESULT_FILTER;
    }

    method onSaveReplay(context)
    {
        context.cursor_visible = false;
        ActorUtil::ResetInterpolators(VeilForSave, false);
        var targets = [MainFrame, bg, Header, Controller];
        foreach (var w in targets)
            w.visible = false;

        PluginModule::doSaveReplay(context);
        foreach (var w in targets)
            w.visible = true;

        ActorUtil::ResetInterpolators(VeilForSave, true);
        context.cursor_visible = true;

        return EVENTRESULT_FILTER;
    }

    method onExit(context)
    {
        SequenceUtil::startSequence(context, main::GameSequence::MENU);

        SoundUtil::BGMFadeout(1.0);
        main::ORG.getRaceSound().start = false;

        return EVENTRESULT_FILTER;
    }

    method open(context)
    {
        main::ORG.pauseAvailable = false;

        SequenceUtil::startPage(context, ROOT);
    }

    method on_initialize_info(context)
    {
    }

    method on_checkin_done(context)
    {
        on_initialize_info(context);
    }

    method on_initialize_demo(context)
    {
        main::ORG.pauseAvailable = false;
    }

    method on_loading_done(context)
    {
        Veil::ScalarInterpolator.reverse = true;
        Veil::ScalarInterpolator.start();

        on_initialize_demo(context);

        TextFaceLoading.visible = false;

        ROOT.sCanExit = true;

        SoundUtil::BGMFadeout(0.5);
        SoundUtil::BGMPlayGroup('menu', "quick_before");

        Controller::HBox::Start.active = true;
        Controller::HBox::Exit.active = true;
    }

    method onInitialize(context)
    {
        main::ORG.pauseRace = true;

        self.sStartRaceBlock = false;

        BalloonTip.visible = false;
        BalloonTip.initialize(context);

        Veil::ScalarInterpolator.on_effect_end = function (context)
        {
            BalloonTip.visible = true;
            main::menu::MFocusEnterEvent(context, ROOT.focus_widget).dispatchEvent();
            Veil::ScalarInterpolator.on_effect_end = nil;
        }

        Veil::ScalarInterpolator.reverse = true;
        Veil::ScalarInterpolator.restart();
        Veil::ScalarInterpolator.reverse = false;

        if (main::ORG.canEnterCourse())
        {
            self.sCanExit = true;
            TextFaceLoading.visible = false;
            self.on_initialize_info(context);
            self.on_initialize_demo(context);
            Veil::ScalarInterpolator.reverse = true;
            Veil::ScalarInterpolator.start();
            Controller::HBox::Start.active = true;
            Controller::HBox::Exit.active = true;

            SoundUtil::BGMPlayGroup('menu', "quick_before");
        }
        else
        {
            TextFaceLoading.visible = true;

            self.sCanExit = false;
            LoadingUtil::start(context, self, on_checkin_done, on_loading_done);
            Controller::HBox::Start.active = false;
            Controller::HBox::Exit.active = false;
        }

        showQuickBoard(context);
        DetailUtil::createQuickCourseInfo(context, ROOT, MainFrame);
        DetailUtil::createQuickCarInfo(context, ROOT, MainFrame);

        ROOT.setFocus(Controller::HBox::Start);
    }

    method onFinalize(context)
    {
        self.sStartRaceBlock = nil;

        MainFrame.clearChildren(context);

        main::ORG.endSession();
        main::ORG.pauseRace = false;
        main::ORG.pauseAvailable = true;
        main::ORG.disableRenderingRace();
        main::ORG.disableSoundingRace();
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.setFocus(Controller::HBox::Exit);
        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PSP_PAD_CTRL_START:
                onStartRace(context);
                return EVENTRESULT_FILTER;

            case PSP_PAD_CTRL_L3_UP:
                main::sound.play("cursor");
                var index = MainFrame.getChild(0).Body.focus_index;
                if (index > 3)
                {
                    MainFrame.getChild(0).Body.decIndex(1);
                }
                return EVENTRESULT_FILTER;

            case PSP_PAD_CTRL_L3_DOWN:
                main::sound.play("cursor");
                MainFrame.getChild(0).Body.incIndex(1);
                return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }

    method showQuickBoard(context)
    {
        var board = Template::QuickBoard.doCopy(context);
        board.visible = false;
        MainFrame.appendChild(context, board);

        board.title.text = context.translate(ROOT, "QuickMenu", "RANKING");
        var listbox = board.Body;
        listbox.adjustment = main::menu::MAdjustment();
        board.VScrollbar.adjustment = listbox.adjustment;
        board.Body2.visible = false;

        var course_code = getCurrentCourse();
        var ranking_list = gSequenceCondition.game_status.user_profile.record.getBoardDA(course_code);
        if (ranking_list != nil)
        {
            listbox.setItemCount(ranking_list.table.size);
            listbox.setItemTemplate(context, Template::QuickBoardItem);
            updateQuickBoardImpl(context, ranking_list, listbox);
        }

        Controller::HBox.Replay.visible = PluginModule.defined("canStartReplay") && PluginModule::canStartReplay();

        var rp = main::RaceOperator.race_parameter;
        updatePankuzu(context, rp);

        board.visible = true;
        ActorUtil::ResetInterpolators(board, true, true);
    }

    method updateQuickBoard(context)
    {
        var course_code = getCurrentCourse();
        var ranking_list = gSequenceCondition.game_status.user_profile.record.getBoardDA(course_code);
        if (ranking_list != nil)
        {
            var listbox = MainFrame.getChild(0).Body;
            updateQuickBoardImpl(context, ranking_list, listbox);
        }
    }

    method updateQuickBoardImpl(context, ranking_list, listbox)
    {
        var my_carcode = getPlayerCar(0).getCarCode();
        var best_point = nil;
        var my_rank = -1;
        var table = main::RaceOperator.race_parameter.endless > 0 ? ranking_list.table_endless : ranking_list.table;
        for (var i = 0; i < table.size; ++i)
        {
            var rank = table[i];
            if (i == 0)
                best_point = rank.point;

            var item = listbox.getItemWidget(i, context);
            item.initializeForDriftAttackRanking(context, i + 1, my_carcode, best_point, rank);
            if (my_carcode == rank.car && i > 3)
                my_rank = i;
        }

        if (my_rank != -1 && gSequenceCondition.new_record)
            listbox.focus_index = my_rank;
        else
            listbox.focus_index = 3;
    }

    method updatePankuzu(context, rp)
    {
        var pankuzu_format = context.translate(ROOT, "PankuzuDriftAttack");
        var drift_type = context.translate(ROOT, "TrialSetting", main::RaceOperator.race_parameter.endless > 0 ? "FULL_LAP" : "SECTION");

        Header.TextFacePankuzu.text = pankuzu_format.build(drift_type);
    }

    module Controller::HBox
    {
        attribute quick_index = -1;

        method onFocusEnter(context, event)
        {
            var w = event.widget;
            BalloonTip.set_value(context, w, w.balloon.text, 3.5);

            if (self.quick_index != w.quick_index)
            {
                for (var i = 0; i < MainFrame.countChild(); ++i)
                {
                    if (i != w.quick_index)
                        ActorUtil::ResetInterpolators(MainFrame.getChild(i), true, true);
                }

                if (w.quick_index != -1)
                    ActorUtil::ResetInterpolators(MainFrame.getChild(w.quick_index), false);

                self.quick_index = w.quick_index;
            }

            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }

        module Start
        {
            attribute quick_index = 0;

            method onActivate(context)
            {
                if (ROOT.sStartRaceBlock)
                    return EVENTRESULT_FILTER;

                if (TextFaceLoading.visible)
                {
                    main::sound.play("cancel");
                    return EVENTRESULT_FILTER;
                }

                Blink.ScalarInterpolator.restart();
                ROOT.onStartRace(context);

                return EVENTRESULT_FILTER;
            }
        }

        module Opt::CourseDetail
        {
            attribute quick_index = 1;

            method onActivate(context)
            {
                if (ROOT.sStartRaceBlock)
                    return EVENTRESULT_FILTER;

                main::sound.play("ok");
                var endless = main::RaceOperator.race_parameter.endless;
                if (DetailUtil::showCourseDetail(context))
                {
                    var listbox = MainFrame.getChild(self.quick_index).Body2;
                    if (endless != main::RaceOperator.race_parameter.endless)
                    {
                        var rp = main::RaceOperator.race_parameter;
                        updatePankuzu(context, rp);
                        updateQuickBoard(context);
                    }
                    DetailUtil::updateQuickCourseInfo(context, ROOT, listbox);
                }

                return EVENTRESULT_FILTER;
            }
        }

        module Opt::CarDetail
        {
            attribute quick_index = 2;

            method onActivate(context)
            {
                if (ROOT.sStartRaceBlock)
                    return EVENTRESULT_FILTER;

                main::sound.play("ok");
                if (DetailUtil::showCarDetail(context, true, true))
                {
                    var listbox = MainFrame.getChild(self.quick_index).Body2;
                    DetailUtil::updateQuickCarInfo(context, ROOT, listbox);
                }

                return EVENTRESULT_FILTER;
            }
        }

        module Replay::LoadReplay
        {
            attribute quick_index = 0;

            method onActivate(context)
            {
                if (ROOT.sStartRaceBlock)
                    return EVENTRESULT_FILTER;

                onStartReplay(context);
                return EVENTRESULT_FILTER;
            }
        }

        module Replay::SaveReplay
        {
            attribute quick_index = 0;

            method onActivate(context)
            {
                if (ROOT.sStartRaceBlock)
                    return EVENTRESULT_FILTER;

                onSaveReplay(context);
                return EVENTRESULT_FILTER;
            }
        }

        module Exit
        {
            attribute quick_index = 0;

            method onActivate(context)
            {
                if (ROOT.sStartRaceBlock)
                    return EVENTRESULT_FILTER;

                if (ROOT.sCanExit) 
                {
                    main::sound.play("ok");
                    onExit(context);
                } 
                else 
                    main::sound.play("cancel");

                return EVENTRESULT_FILTER;
            }
        }
    }
}