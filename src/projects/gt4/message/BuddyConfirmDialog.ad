module MessageProject::BuddyConfirmDialog
{
	static result = nil;
	static current_type = 0;
	static cancel_disable = nil;
	static original_y = Dialog.y;

	function setFadeActor(widget)
	{
		var actor = main::menu::MFadeActor(widget, 1.0);
		actor.repeat = 1;
		actor.period = 0.25;
		widget.actor = actor;
	}

	function setMoveActor(widget)
	{
		var actor = main::menu::MMoveActor(widget, widget.x, 480.0);
		widget.actor = actor;
		widget.actor.ratio = 0.2;
	}

	function setFadeActorRoot(root)
	{
		var actor = main::menu::MFadeActor(root, 1.0);
		actor.repeat = 0;
		actor.period = 0.5;
		root.actor = actor;
	}

	function onLoad(context)
	{
		setFadeActor(Dialog::Buttons::YesNo::Yes::bgf);
		setFadeActor(Dialog::Buttons::YesNo::No::bgf);
		setFadeActor(Dialog::Buttons::OK::bgf);
		setMoveActor(Dialog);
		setFadeActorRoot(BuddyConfirmDialog);
	}

	function open_motion(context)
	{
		var ratio = context.cursor_speed_ratio;
	
		Dialog.actor.ratio = 0.2 * ratio;
		Dialog.actor.destinationY = 480.0;
		Dialog.actor.out = true;
		Dialog.actor.warp();
	
		Dialog::Buttons::YesNo::Yes::bgf.actor.period = 0.25 / ratio;
		Dialog::Buttons::YesNo::No::bgf.actor.period = 0.25 / ratio;
		Dialog::Buttons::OK::bgf.actor.period = 0.25 / ratio;
	
		BuddyConfirmDialog.actor.period = 0.5 / ratio;
		BuddyConfirmDialog.actor.out = true;
		BuddyConfirmDialog.actor.warp();
	
		context.pushPage(BuddyConfirmDialog);
	
		Dialog.actor.out = false;
		BuddyConfirmDialog.actor.out = false;
	
		context.sync(0.1);
	
		Dialog::Message::caution.x = Dialog::Message.w - Dialog::Message::caution.w - 3;
	
		context.sync(0.4);
	}

	function close_motion(context)
	{
		if (result)
		{
			Dialog.actor.destinationY = -Dialog.h;
		}
		else
		{
			Dialog.actor.destinationY = 480.0;
		}
	
		Dialog.actor.out = true;
		BuddyConfirmDialog.actor.out = true;
	
		context.sync(0.5);
		context.closePage(BuddyConfirmDialog);
	}

	function open(context, type, message, title, root, yes_text, no_text, equalized)
	{
		if (title != nil)
		{
			if (root != nil)
			{
				Dialog::Title::title.text = context.translate(root, title);
			}
			else
			{
				Dialog::Title::title.text = title;
			}
		}
	
		if (yes_text == nil)
		{
			if (type != 4)
			{
				yes_text = context.translate(BuddyConfirmDialog, "OK");
			}
			else
			{
				yes_text = context.translate(BuddyConfirmDialog, "Yes");
			}
		}
		else if (root != nil)
		{
			yes_text = context.translate(root, yes_text);
		}
	
		cancel_disable = true;
	
		if (no_text == nil)
		{
			if (type != 4)
			{
				no_text = context.translate(BuddyConfirmDialog, "Cancel");
			}
			else
			{
				no_text = context.translate(BuddyConfirmDialog, "No");
			}
		}
		else if (root != nil)
		{
			no_text = context.translate(root, no_text);
		}
	
		cancel_disable = true;
	
		var mf = Dialog::Message::message;
	
		if (equalized != nil && equalized)
		{
			mf.align = -1;
			mf.equalized = true;
		}
		else
		{
			mf.align = 4;
			mf.equalized = false;
		}
	
		Dialog::Buttons::YesNo::Yes::label.text = yes_text;
		Dialog::Buttons::YesNo::Yes::label.adjustScale();
	
		Dialog::Buttons::YesNo::No::label.text = no_text;
		Dialog::Buttons::YesNo::No::label.adjustScale();
	
		Dialog::Buttons::OK::label.text = yes_text;
		Dialog::Buttons::OK::label.adjustScale();
	
		current_type.value = type;
		switch (type)
		{
			case 0:
			{
				Dialog::Buttons::YesNo.visible = false;
				Dialog::Buttons::OK.visible = true;
		
				if (title == nil)
				{
					Dialog::Title::title.text = context.translate(BuddyConfirmDialog, "Confirm");
				}
		
				Dialog::Title::title.visible = true;
				Dialog::Title::titleE.visible = false;
				Dialog::Title::bg.visible = true;
				Dialog::Title::bgE.visible = false;
				Dialog::Message::caution.visible = false;
				break;
			}
			case 1:
			case 3:
			case 4:
			{
				Dialog::Buttons::YesNo.visible = true;
				Dialog::Buttons::OK.visible = false;
		
				if (title == nil)
				{
					Dialog::Title::title.text = context.translate(BuddyConfirmDialog, "Dialog");
				}
		
				Dialog::Title::title.visible = true;
				Dialog::Title::titleE.visible = false;
				Dialog::Title::bg.visible = true;
				Dialog::Title::bgE.visible = false;
				Dialog::Message::caution.visible = false;
				break;
			}
			case 2:
			{
				Dialog::Buttons::YesNo.visible = false;
				Dialog::Buttons::OK.visible = true;
		
				if (title == nil)
				{
					Dialog::Title::titleE.text = context.translate(BuddyConfirmDialog, "Incomplete");
				}
		
				Dialog::Title::title.visible = false;
				Dialog::Title::titleE.visible = true;
				Dialog::Title::bg.visible = false;
				Dialog::Title::bgE.visible = true;
				Dialog::Message::caution.visible = true;
				break;
			}
		}
	
		Dialog::Message::message.text = message;
	
		switch (type)
		{
			case 0:
			{
				BuddyConfirmDialog.setFocus(Dialog::Buttons::OK);
				break;
			}
			case 1:
			case 4:
			{
				BuddyConfirmDialog.setFocus(Dialog::Buttons::YesNo::Yes);
				break;
			}
			case 3:
			{
				BuddyConfirmDialog.setFocus(Dialog::Buttons::YesNo::No);
				break;
			}
			case 2:
			{
				BuddyConfirmDialog.setFocus(Dialog::Buttons::OK);
				break;
			}
		}
	
		open_motion(context);
	
		result = nil;
	
		context.getUpdateContext().enterEventLoop();
	
		var r = result;
	
		if (r == nil)
		{
			r = false;
		}
	
		result = nil;
	
		return r;
	}

	function close(context)
	{
		BuddyConfirmDialog.setFocus(nil);
		close_motion(context);
	
		Dialog::Message::message.text = nil;
		cancel_disable = nil;
	
		context.getUpdateContext().leaveEventLoop();
	}

	function forceCancel(context)
	{
		if (result == nil)
		{
			result = false;
			close(context);
		}
	}

	function onCancel(context)
	{
		if (cancel_disable != nil && cancel_disable)
		{
			return EVENTRESULT_FILTER;
		}
	
		main::sound.play("cancel");
		result = false;
		close(context, 0);
		return EVENTRESULT_FILTER;
	}
}

module MessageProject::BuddyConfirmDialog::Dialog::Buttons::OK
{
	function onActivate(context, event, item)
	{
		main::sound.play("ok");
		result = true;
		close(context);
		return EVENTRESULT_FILTER;
	}
}

module MessageProject::BuddyConfirmDialog::Dialog::Buttons::YesNo::No
{
	function onActivate(context, event, item)
	{
		main::sound.play("ok");
		result = false;
		close(context);
		return EVENTRESULT_FILTER;
	}
}

module MessageProject::BuddyConfirmDialog::Dialog::Buttons::YesNo::Yes
{
	function onActivate(context, event, item)
	{
		main::sound.play("ok");
		result = true;
		close(context);
		return EVENTRESULT_FILTER;
	}
}