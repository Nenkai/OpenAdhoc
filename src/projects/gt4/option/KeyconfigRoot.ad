module PROJECT::ROOT
{
    static original_y = Pane.y;
    static peripheral = nil;
    static key_module = nil;
    static port = nil;
    static conflict = nil;

    function open(context)
    {
        common_open(context, ROOT, original_y);
    }

    function close(context)
    {
        common_close(context, ROOT);
    }

    #include "ds2.ad";
    #include "cth.ad";
    #include "jgr.ad";
    #include "cgr.ad";

    function append_optionmenu(context, vbox, options)
    {
        var num = options.size;

        for (var i = 0; i < num; i++)
        {
            var name = options[i];
            var item = nil;
            
            if (name == "L1" || name == "L2" || name == "R1" || name == "R2")
            {
                item = hidden::Item.doCopy();
                item["img"].image_path = "image/option/keys/" + name + ".png";
                item["img"].setColor(main::menu::MColorObject(0.0, 0.0, 0.0, 1.0));
            }
            else if (name == "CIRCLE" || name == "CROSS" || name == "TRIANGLE" || name == "SQUARE")
            {
                item = hidden::Item.doCopy();
                item["img"].image_path = "image/option/keys/" + name + ".png";   
            }
            else
            {
                item = OptionRoot::hidden::OptionItem.doCopy();
                item["label"].text = context.translate(ROOT, name);
                item["label"].adjustScale();
            }
            vbox.appendChild(context, item);
        }
    }

    function initialize_optionmenu(context, optionmenu, options1, options2)
    {
        var vbox = optionmenu["popup"]["vbox"];
        vbox.clearWindow(context);
        append_optionmenu(context, vbox, options1);
        append_optionmenu(context, vbox, options2);

        if (options1.size + options2.size > 0)
        {
            optionmenu.insensitive = false;
            optionmenu.applyAppend(context);
        }
        else 
            optionmenu.insensitive = true;
    }

    function finalize_optionmenu(context, optionmenu)
    {
        var vbox = optionmenu["popup"]["vbox"];
        vbox.clearWindow(context);
    }

    function set_reflect(context, optionmenu, key_list, candidate, offset)
    {
        for (var k = 0; k < key_list.size; k++)
        {
            var key = key_list[k];

            for (var i = 0; i < candidate.size; i++)
            {
                if (key == candidate[i])
                {
                    optionmenu.setIndex(context, i + offset);
                    return true;
                }
            }
        }

        return false;
    }

    function reflect_dual(context, option, optionmenu, button_func, analog_func, button_list, analog_list)
    {
        var found = false;

        if (!found)
        {
            var key_list = option.searchButtonConfig(port, peripheral, button_func);
            found = set_reflect(context, optionmenu, key_list, button_list, 0);
        }

        if (!found)
        {
            var key_list = option.searchAnalogConfig(port, peripheral, analog_func);
            found = set_reflect(context, optionmenu, key_list, analog_list, button_list.size);
        }

        if (!found)
        {
            found = set_reflect(context, optionmenu, ["NONE"], button_list, 0);
        }

        if (!found)
        {
            var key_list = option.searchButtonConfig(port, peripheral, button_func);
            for (var i = 0; i < key_list.size; i++)
            {
                // Commented out search loop?
            }

            var key_list = option.searchAnalogConfig(port, peripheral, analog_func);

            for (var i = 0; i < key_list.size; i++)
            {
                // Weird
            }
        }
    }

    function reflect(context)
    {
        var option = main::game.option;
        reflect_dual(context, option, Pane::Steering::OptionMenu, "", "ANALOG_STEER", key_module["button_steer_list"], key_module["analog_steer_list"]);
        reflect_dual(context, option, Pane::Accel::OptionMenu, "BUTTON_ACCEL", "ANALOG_ACCEL", key_module["button_accel_list"], key_module["analog_accel_list"]);
        reflect_dual(context, option, Pane::Brake::OptionMenu, "BUTTON_BRAKE", "ANALOG_BRAKE", key_module["button_brake_list"], key_module["analog_brake_list"]);
        reflect_dual(context, option, Pane::Reverse::OptionMenu, "BUTTON_REVERSEGEAR", "ANALOG_REVERSEGEAR", key_module["button_reverse_list"], key_module["analog_reverse_list"]);
        reflect_dual(context, option, Pane::Side::OptionMenu, "BUTTON_SIDEBRAKE", "ANALOG_SIDEBRAKE", key_module["button_side_list"], key_module["analog_side_list"]);
        reflect_dual(context, option, Pane::ShiftUp::OptionMenu, "BUTTON_SHIFTUP", "ANALOG_SHIFTUP", key_module["button_shiftup_list"], key_module["analog_shiftup_list"]);
        reflect_dual(context, option, Pane::ShiftDown::OptionMenu, "BUTTON_SHIFTDOWN", "ANALOG_SHIFTDOWN", key_module["button_shiftdown_list"], key_module["analog_shiftdown_list"]);
        reflect_dual(context, option, Pane::BackView::OptionMenu, "BUTTON_BACKVIEW", "", key_module["button_backview_list"], key_module["analog_backview_list"]);
        reflect_dual(context, option, Pane::PlayView::OptionMenu, "BUTTON_PLAYVIEW", "", key_module["button_playview_list"], key_module["analog_playview_list"]);
        reflect_dual(context, option, Pane::Special::OptionMenu, "BUTTON_SPECIAL", "", key_module["button_special_list"], key_module["analog_special_list"]);
        reflect_dual(context, option, Pane::Ghost::OptionMenu, "BUTTON_GHOST", "", key_module["button_ghost_list"], key_module["analog_ghost_list"]);
    }

    function apply_dual(context, option, index, button_func, analog_func, button_list, analog_list)
    {
        option.unsetButtonKey(port, peripheral, button_func, button_list);
        option.unsetAnalogKey(port, peripheral, analog_func, analog_list);
        
        if (index < button_list.size)
            option.setButtonConfig(port, peripheral, button_list[index], button_func);
        else if (index - button_list.size < analog_list.size)
            option.setAnalogConfig(port, peripheral, analog_list[index - button_list.size], analog_func);
    }

    function apply(context)
    {
        main::game.setNeedSave();
        var option = main::game.option;
        apply_dual(context, option, Pane::Steering::OptionMenu.index, "", "ANALOG_STEER", key_module["button_steer_list"], key_module["analog_steer_list"]);
        apply_dual(context, option, Pane::Accel::OptionMenu.index, "BUTTON_ACCEL", "ANALOG_ACCEL", key_module["button_accel_list"], key_module["analog_accel_list"]);
        apply_dual(context, option, Pane::Brake::OptionMenu.index, "BUTTON_BRAKE", "ANALOG_BRAKE", key_module["button_brake_list"], key_module["analog_brake_list"]);
        apply_dual(context, option, Pane::Reverse::OptionMenu.index, "BUTTON_REVERSEGEAR", "ANALOG_REVERSEGEAR", key_module["button_reverse_list"], key_module["analog_reverse_list"]);
        apply_dual(context, option, Pane::Side::OptionMenu.index, "BUTTON_SIDEBRAKE", "ANALOG_SIDEBRAKE", key_module["button_side_list"], key_module["analog_side_list"]);
        apply_dual(context, option, Pane::ShiftUp::OptionMenu.index, "BUTTON_SHIFTUP", "ANALOG_SHIFTUP", key_module["button_shiftup_list"], key_module["analog_shiftup_list"]);
        apply_dual(context, option, Pane::ShiftDown::OptionMenu.index, "BUTTON_SHIFTDOWN", "ANALOG_SHIFTDOWN", key_module["button_shiftdown_list"], key_module["analog_shiftdown_list"]);
        apply_dual(context, option, Pane::BackView::OptionMenu.index, "BUTTON_BACKVIEW", "", key_module["button_backview_list"], key_module["analog_backview_list"]);
        apply_dual(context, option, Pane::PlayView::OptionMenu.index, "BUTTON_PLAYVIEW", "", key_module["button_playview_list"], key_module["analog_playview_list"]);
        apply_dual(context, option, Pane::Special::OptionMenu.index, "BUTTON_SPECIAL", "", key_module["button_special_list"], key_module["analog_special_list"]);
        apply_dual(context, option, Pane::Ghost::OptionMenu.index, "BUTTON_GHOST", "", key_module["button_ghost_list"], key_module["analog_ghost_list"]);
    }

    function onInitialize(context)
    {
        hidden.visible = false;
        Pane::Title::title.scale_x = 0.875;
        Pane::Title::title.scale_y = 0.875;
        Pane::Title::title.text = context.translate(ROOT, "title " + peripheral + " port" + port);
        Pane::Title::title.adjustScale();
        initialize_optionmenu(context, Pane::Steering::OptionMenu, key_module["button_steer_list"], key_module["analog_steer_list"]);
        initialize_optionmenu(context, Pane::Accel::OptionMenu, key_module["button_accel_list"], key_module["analog_accel_list"]);
        initialize_optionmenu(context, Pane::Brake::OptionMenu, key_module["button_brake_list"], key_module["analog_brake_list"]);
        initialize_optionmenu(context, Pane::Reverse::OptionMenu, key_module["button_reverse_list"], key_module["analog_reverse_list"]);
        initialize_optionmenu(context, Pane::Side::OptionMenu, key_module["button_side_list"], key_module["analog_side_list"]);
        initialize_optionmenu(context, Pane::ShiftUp::OptionMenu, key_module["button_shiftup_list"], key_module["analog_shiftup_list"]);
        initialize_optionmenu(context, Pane::ShiftDown::OptionMenu, key_module["button_shiftdown_list"], key_module["analog_shiftdown_list"]);
        initialize_optionmenu(context, Pane::BackView::OptionMenu, key_module["button_backview_list"], key_module["analog_backview_list"]);
        initialize_optionmenu(context, Pane::PlayView::OptionMenu, key_module["button_playview_list"], key_module["analog_playview_list"]);
        initialize_optionmenu(context, Pane::Special::OptionMenu, key_module["button_special_list"], key_module["analog_special_list"]);
        initialize_optionmenu(context, Pane::Ghost::OptionMenu, key_module["button_ghost_list"], key_module["analog_ghost_list"]);

        reflect(context);
        on_value_changed(context);

        if (port == 1)
        {
            Pane::Special::OptionMenu.insensitive = true;
            Pane::Ghost::OptionMenu.insensitive = true;
            set_reflect(context, Pane::Special::OptionMenu, ["NONE"], key_module["button_special_list"], 0);
            set_reflect(context, Pane::Ghost::OptionMenu, ["NONE"], key_module["button_ghost_list"], 0);
        }
        else
        {
            Pane::Special::OptionMenu.insensitive = false;
            Pane::Ghost::OptionMenu.insensitive = false;
        }

        if (Pane::Steering::OptionMenu.insensitive == 1)
            ROOT.setFocus(Pane::Accel::OptionMenu);
        else
            ROOT.setFocus(Pane::Steering::OptionMenu);
    }
    
    function onFinalize(context)
    {
        finalize_optionmenu(context, Pane::Steering::OptionMenu);
        finalize_optionmenu(context, Pane::Accel::OptionMenu);
        finalize_optionmenu(context, Pane::Brake::OptionMenu);
        finalize_optionmenu(context, Pane::Reverse::OptionMenu);
        finalize_optionmenu(context, Pane::Side::OptionMenu);
        finalize_optionmenu(context, Pane::ShiftUp::OptionMenu);
        finalize_optionmenu(context, Pane::ShiftDown::OptionMenu);
        finalize_optionmenu(context, Pane::BackView::OptionMenu);
        finalize_optionmenu(context, Pane::PlayView::OptionMenu);
        finalize_optionmenu(context, Pane::Special::OptionMenu);
        finalize_optionmenu(context, Pane::Ghost::OptionMenu);

        peripheral = nil;
        key_module = nil;
        port = nil;
        conflict = nil;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");   
        close(context);
        return EVENTRESULT_FILTER;
    }

    function get_key(optionmenu, button_list, analog_list)
    {
        var idx = optionmenu.index;

        if (idx < button_list.size)
            return button_list[idx];
        else if (idx - button_list.size < analog_list.size)
            return analog_list[idx - button_list.size];
        else
            return nil;
    }

    function on_value_changed(context)
    {
        var pairs = [];
        conflict = false;
        
        Pane::Steering.active = false;
        Pane::Accel.active = false;
        Pane::Brake.active = false;
        Pane::Reverse.active = false;
        Pane::Side.active = false;
        Pane::ShiftUp.active = false;
        Pane::ShiftDown.active = false;
        Pane::BackView.active = false;
        Pane::PlayView.active = false;
        Pane::Special.active = false;
        Pane::Ghost.active = false;

        var key = get_key(Pane::Steering::OptionMenu, key_module["button_steer_list"], key_module["analog_steer_list"]);
        if (key != nil)
            pairs.push([key, Pane::Steering]);

        var key = get_key(Pane::Accel::OptionMenu, key_module["button_accel_list"], key_module["analog_accel_list"]);
        if (key != nil)
            pairs.push([key, Pane::Accel]);

        var key = get_key(Pane::Brake::OptionMenu, key_module["button_brake_list"], key_module["analog_brake_list"]);
        if (key != nil)
            pairs.push([key, Pane::Brake]);

        var key = get_key(Pane::Reverse::OptionMenu, key_module["button_reverse_list"], key_module["analog_reverse_list"]);
        if (key != nil)
            pairs.push([key, Pane::Reverse]);

        var key = get_key(Pane::Side::OptionMenu, key_module["button_side_list"], key_module["analog_side_list"]);
        if (key != nil)
            pairs.push([key, Pane::Side]);

        var key = get_key(Pane::ShiftUp::OptionMenu, key_module["button_shiftup_list"], key_module["analog_shiftup_list"]);
        if (key != nil)
            pairs.push([key, Pane::ShiftUp]);

        var key = get_key(Pane::ShiftDown::OptionMenu, key_module["button_shiftdown_list"], key_module["analog_shiftdown_list"]);
        if (key != nil)
            pairs.push([key, Pane::ShiftDown]);

        var key = get_key(Pane::BackView::OptionMenu, key_module["button_backview_list"], key_module["analog_backview_list"]);
        if (key != nil)
            pairs.push([key, Pane::BackView]);

        var key = get_key(Pane::PlayView::OptionMenu, key_module["button_playview_list"], key_module["analog_playview_list"]);
        if (key != nil)
            pairs.push([key, Pane::PlayView]);

        var key = get_key(Pane::Special::OptionMenu, key_module["button_special_list"], key_module["analog_special_list"]);
        if (key != nil)
            pairs.push([key, Pane::Special]);

        var key = get_key(Pane::Ghost::OptionMenu, key_module["button_ghost_list"], key_module["analog_ghost_list"]);
        if (key != nil)
            pairs.push([key, Pane::Ghost]);

        var num = pairs.size;
        for (var i = 0; i < num; i++)
        {
            for (var j = i + 1; j < num; j++)
            {
                var key0 = pairs[i][0];
                var key1 = pairs[j][0];

                if ((key0 == key1 && key0 != "NONE") || (key0 + "F" == key1 || key0 + "L" == key1))
                {
                    pairs[i][1].active = true;
                    pairs[j][1].active = true;
                    conflict = true;
                }
            }    
        }
    }
}

module PROJECT::ROOT::Pane::Steering::OptionMenu
{
    function onValueChanged(context)
    {
        on_value_changed(context);
    }
}

module PROJECT::ROOT::Pane::Accel::OptionMenu
{
    function onValueChanged(context)
    {
        on_value_changed(context);
    }
}

module PROJECT::ROOT::Pane::Brake::OptionMenu
{
    function onValueChanged(context)
    {
        on_value_changed(context);
    }
}

module PROJECT::ROOT::Pane::Reverse::OptionMenu
{
    function onValueChanged(context)
    {
        on_value_changed(context);
    }
}

module PROJECT::ROOT::Pane::Side::OptionMenu
{
    function onValueChanged(context)
    {
        on_value_changed(context);
    }
}

module PROJECT::ROOT::Pane::ShiftUp::OptionMenu
{
    function onValueChanged(context)
    {
        on_value_changed(context);
    }
}

module PROJECT::ROOT::Pane::ShiftDown::OptionMenu
{
    function onValueChanged(context)
    {
        on_value_changed(context);
    }
}

module PROJECT::ROOT::Pane::BackView::OptionMenu
{
    function onValueChanged(context)
    {
        on_value_changed(context);
    }
}

module PROJECT::ROOT::Pane::PlayView::OptionMenu
{
    function onValueChanged(context)
    {
        on_value_changed(context);
    }
}

module PROJECT::ROOT::Pane::Special::OptionMenu
{
    function onValueChanged(context)
    {
        on_value_changed(context);
    }
}

module PROJECT::ROOT::Pane::Ghost::OptionMenu
{
    function onValueChanged(context)
    {
        on_value_changed(context);
    }
}

module PROJECT::ROOT::Pane::Buttons::Cancel
{
    function onActivate(context)
    {
        main::sound.play("ok");
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Buttons::Default
{
    function onActivate(context)
    {
        main::sound.play("ok");
        if (!openConfirmDialog(context, DIALOG_QUERY, context.translate(ROOT, "reset Default. OK?")))
            return EVENTRESULT_FILTER;

        var option = main::game.option;
        key_module["setDefault"](context, option, port);
        on_value_changed(context);
    }
}

module PROJECT::ROOT::Pane::Buttons::OK
{
    function onActivate(context)
    {
        if (conflict)
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "Conflict"));
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");
        apply(context);
        close(context);
        return EVENTRESULT_FILTER;
    }
}