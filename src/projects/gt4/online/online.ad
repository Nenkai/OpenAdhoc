module PROJECT::MComponent::SetupPanel::SetupWindow
{
	method doColorize()
	{
        var title = MComponent::SetupPanel::SetupWindow::Title;
        var slider;

        if (MComponent::SetupPanel.defined("Slider"))
            slider = MComponent::SetupPanel::Slider;

        var pulldown;
        if (MComponent::SetupPanel.defined("Pulldown"))
            pulldown = MComponent::SetupPanel::Pulldown;

        var text_input;
        if (MComponent::SetupPanel.defined("TextInput"))
            text_input = MComponent::SetupPanel::TextInput;

        var number_input;
        if (MComponent::SetupPanel.defined("NumberInput"))
            number_input = MComponent::SetupPanel::NumberInput;

        var vacant;
        if (MComponent::SetupPanel.defined("Vacant"))
            vacant = MComponent::SetupPanel::Vacant;

        var bottom_spacer;
        if (MComponent::SetupPanel.defined("BottomSpacer"))
            bottom_spacer = MComponent::SetupPanel::BottomSpacer;

        var buttons;
        if (MComponent::SetupPanel.defined("Buttons"))
            buttons = MComponent::SetupPanel::Buttons;
		
		var i = 0;
		for (var it = self.first_window; it != nil; it = it.next_window)
		{
			var p = it.__prototype__;
	
			if (p == title)
				continue;

			if (p == buttons)
				continue;

			if (it.visible)
			{
				if (p == bottom_spacer)
				{
					var ii = (i % 2) + 7;
					var c = main::menu::MColorObject();
					c.color_index = ii;
					it.bspacer.setColor(c);
				}
				else if (p == pulldown || p == text_input || p == number_input || p == slider || p == vacant)
				{
					var ii = ((i + 1) % 2) + 7;
					var c = main::menu::MColorObject();
					c.color_index = ii;
					it.bg.setColor(c);
					i++;
				}
			}
		}
	}

	method onLoad(context)
	{
		doColorize();
	}
}

module PROJECT::MComponent::SetupPanel::Buttons::OK::bgf
{
	method __copy_init__()
	{
		self.actor = main::menu::MFadeActor(self, 1.0);
		self.actor.period = 0.25;
		self.actor.repeat = true;
	}
}

module PROJECT::MComponent::SetupPanel::Buttons::CancelOK::No::bgf
{
	method __copy_init__()
	{
		self.actor = main::menu::MFadeActor(self, 1.0);
		self.actor.period = 0.25;
		self.actor.repeat = true;
	}
}

module PROJECT::MComponent::SetupPanel::Buttons::CancelOK::Yes::bgf
{
	method __copy_init__()
	{
		self.actor = main::menu::MFadeActor(self, 1.0);
		self.actor.period = 0.25;
		self.actor.repeat = true;
	}
}

module PROJECT::MComponent::Buttons::oval
{
	method decide(context)
	{
		var bgf = self.bgf;
		bgf.actor.period = 0.05;
		context.sync(0.5);
		bgf.actor.period = 0.25;
		bgf.actor.out = false;
		bgf.actor.warp();
	}
}

module PROJECT::MComponent::Buttons::oval::bgf
{
	method __copy_init__()
	{
		self.actor = main::menu::MFadeActor(self, 1.0);
		self.actor.period = 0.25;
		self.actor.repeat = true;
	}
}

module PROJECT
{
	class http
	{
		#include "../share/http.ad"
	}
	static gHttp = http.new();
	module svo
	{
		#include "../share/svo.ad"
	}
	module AutoTick
	{
		#include "../share/auto_tick.ad"
	}
	#include "../share/dialog.ad"
	#include "../share/actor.ad"
	#include "../share/online_event.ad"
	#include "../share/online_error.ad"
	#include "../share/online_ruleset.ad"
	#include "../share/online_xml.ad"
	#include "../share/online_page_util.ad"
	#include "../share/online_util.ad"
	#include "../share/watcher_util.ad"
	#include "../share/memorycard.ad"
	#include "../share/page_util.ad"
	#include "../share/course_define.ad"
	#include "../share/regulation.ad"
	#include "../share/shot_screen.ad"
	#include "../share/maker.ad"
	#include "../share/netfile.ad"
	#include "rating.ad"

	module PrivateRaceCommon
	{
		#include "private_race_common.ad"
	}
	
	static sMessageProject = nil;
	static gTemplateCommon = nil;
	
	function isAutoMenu()
	{
		return false;
	}

	function onKeyPress(context, event)
	{
		switch(event.keysym)
		{
			case PS2_PAD_CTRL_TRIANGLE:
				var enable_shell = isOnlineManager();
				if (enable_shell)
				{
					if (__project__.defined("MessageProject"))
					{
						MessageProject::openShell(context);
						return EVENTRESULT_FILTER;
					}
				}
				return EVENTRESULT_FILTER;

			case XK_F10:
				var enable_chSrc = isOnlineManager();
				if (enable_chSrc)
				{
					main::sound.play("next");
					var res = switchDownloadSource();
					openConfirmDialog(context, DIALOG_OK, res ? "read from SERVER" : "read from LOCAL");
				}
				else
					main::sound.play("disable");
				return EVENTRESULT_FILTER;

			case PS2_PAD_CTRL_L2:
				if (__project__.defined("MessageProject"))
				{
					if (sIMOpenCB != nil)
						sIMOpenCB(context);
		
					MessageProject::openIM(context);
		
					if (sIMCloseCB != nil)
						sIMCloseCB(context);
		
					return EVENTRESULT_FILTER;
				}
				return EVENTRESULT_FILTER;

			case PS2_PAD_CTRL_L1:
				var enable_xmlup = isOnlineManager();
				if (enable_xmlup && (event.state & 16) == 0)
				{
					if (__project__.defined("MessageProject"))
					{
						MessageProject::openUpdateXmlRoot(context);
						return EVENTRESULT_FILTER;
					}
				}
				return EVENTRESULT_FILTER;
		}
		return EVENTRESULT_CONTINUE;
	}

	function onLoad(context)
	{
		if (main::network.isRTIMEInitialized())
		{
			main::network.setCallbackModule(OnlineProject);
			main::network.inLobby(1);
		}
		main::network.setSystemEventEnable(1);
		main::sound.load();
		sMessageProject = main::manager.loadProject("/projects/message/message");
		context.loadGpb("projects/online", "Template");
		context.createRenderContext(1);
		var render_context = context.getRenderContext(0);
		render_context.transition = main::menu::MColorTransition();
		render_context.transition.panIn(render_context);
		SettingPopup::onLoadInitialize(render_context);
		gTemplateCommon = Template::Common.doCopy();
		PregridRoot::onLoadInitialize(render_context);
		var page = nil;
		
		if (main::game.major_menu_page == "")
			page = HomeRoot;
		else 
		{
			if (main::game.major_menu_page == "P2PEventRoot")
				P2PEventRoot::gLastEventID = main::game.selected_course;
			
			page = OnlineProject[main::game.major_menu_page];
		}
	
		main::game.selected_course = 0;
		render_context.startPage(page);
	}

	static restart_flg = false;
	static restart_all_flg = false;
	
	function onUnload(context)
	{
		gTemplateCommon = nil;
		context.unloadGpb("Template");
		main::manager.unloadProject(sMessageProject);
		sMessageProject = nil;
		main::sound.unload();
		main::network.inLobby(0);
		main::network.setCallbackModule(nil);
		if (restart_flg)
			terminateRTIME();
		if (restart_all_flg)
			downNetwork();
	}

	function restart(context)
	{
		if (!restart_flg)
		{
			restart_flg = true;
			HomeRoot::resetSelectedEventType();
			main::network.setSystemEventEnable(0);
			main::game.major_menu_project = "online";
			main::game.major_menu_page = "EntryRoot";
			start_project(context, "network");
		}
	}
	
	function quit(context)
	{
		if (!restart_all_flg)
		{
			restart_all_flg = true;
			restart_flg = true;
			HomeRoot::resetSelectedEventType();
			main::network.setSystemEventEnable(0);
			main::game.major_menu_page = "arcade";
			start_project(context, "arcade");
		}
	}

	function onRallyBot(context, message, time_data, stage_index, course_id)
	{
		RallyRoot::onRallyBot(context, message, time_data, stage_index, course_id);
	}
	
	function saveAuto(context, root, end_func)
	{
		main::game.major_menu_project = "online";
		main::game.major_menu_page = "";
		context.pushEvent(main::menu::MScriptEvent(context, OnlineProject, "doAutoSave", [root, end_func]));
	}
	
	function doAutoSave(context, root, end_func)
	{
		openProgressDialog(
			context,
			context.translate(OnlineProject, "MemoryCard", "now_saving")
		);
	
		var r = autoSave(context, nil);
	
		closeProgressDialog(context);
	
		if (r && end_func != nil)
			end_func(context);
	}

	function setAppropriateTire(riding_car, course)
	{
		var equiped_tire = riding_car.getEquipedParts(25);
		var type = main::menu::MCourseData::GetType(course);
		var tire = nil;
		switch(type)
		{
			case "dirt":
				if (equiped_tire != 11)
					tire = 11;
				break;

			case "snow":
				if (equiped_tire != 12)
					tire = 12;
				break;

			default:
				if (equiped_tire == 11 || equiped_tire == 12)
				{
					var tire_order = [4 , 3, 2, 1, 0, 5, 6, 7, 8, 9, 10];
					for (var i = 0; i < tire_order.size; i++)
					{
						if (riding_car.isHavingParts(25, tire_order[i]))
						{
							tire = tire_order[i];
							break;
						}
					}
				}
				break;
		}

		if (tire != nil)
		{
			riding_car.loadPartsInfo();
			riding_car.setParts(25, tire);
			riding_car.setParts(26, tire);
			riding_car.syncWheel();
		}
	}

	module TireIndex
	{
		static NORMAL_ECONOMY      = 0;
		static NORMAL_COMFORT      = 1;
		static NORMAL_STREET       = 2;
		static SPORTS_HARD         = 3;
		static SPORTS_MEDIUM       = 4;
		static SPORTS_SOFT         = 5;
		static RACING_SUPER_HARD   = 6;
		static RACING_HARD         = 7;
		static RACING_MEDIUM       = 8;
		static RACING_SOFT         = 9;
		static RACING_QUALIFY      = 10;
		static DIRT                = 11;
		static SNOW                = 12;
	}

	function get_tire_index(str)
	{
		return TireIndex[str]
	}

	function setSpecifiedTire(gcar, tire)
	{
		if (tire == nil)
			return;
	
		var idx = get_tire_index(tire);
		main::game.tire_idx = idx;
	
		gcar.loadPartsInfo();
	
		gcar.getParts(25, idx);
		gcar.setParts(25, idx);
	
		gcar.getParts(26, idx);
		gcar.setParts(26, idx);
	}

	function applyEquipedTire(gcar)
	{
		main::game.tire_idx = gcar.getEquipedParts(25);
	}

	function canRaceByTheCar(context)
	{
		if (!sureRiding(context))
			return false;
	
		if (!sureNoStrange(context))
			return false;
	
		if (!sureNoOpenModel(context))
			return false;
	
		if (!sureNoTestCar(context))
			return false;
	
		return true;
	}
	
	function sureRiding(context)
	{
		if (!main::game.garage.hasRidingCar())
		{
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, context.translate(HomeRoot, "RIDE_YOUR_CAR"));
			return false;
		}
		else
			return true;
	}

	function sureNoStrange(context)
	{
		if (!main::game.garage.hasRidingCar())
			return EVENTRESULT_STOP;
	
		var cg = main::game.garage.riding_car;
		var open_model_type = main::menu::MCarData::GetOpenModelType(cg.car_code);
	
		if (cg.isStrange())
		{
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, context.translate(HomeRoot, "NoStrangeCar").format(cg.name));
			return false;
		}
		else
			return true;
	}

	function sureNoOpenModel(context)
	{
		if (!main::game.garage.hasRidingCar())
			return true;
	
		var cg = main::game.garage.riding_car;
		var open_model_type = main::menu::MCarData::GetOpenModelType(cg.car_code);
	
		if (open_model_type == 2)
		{
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, context.translate(HomeRoot, "NoOpenModelCar").format(cg.name));
			return false;
		}
		else
			return true;
	}

	function sureNoTestCar(context)
	{
		if (!main::game.garage.hasRidingCar())
			return true;
	
		var cg = main::game.garage.riding_car;
		var test_car = main::menu::MCarData::IsTestCar(cg.car_code);
	
		if (test_car)
		{
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, context.translate(HomeRoot, "NoTestCar").format(cg.name));
			return false;
		}
		else
			return true;
	}
}