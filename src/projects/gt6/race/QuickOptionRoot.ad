













module ROOT
{
    class Data
    {
        method __init__(cp, dp, constraint, map_clip, window_id)
        {
            self.cp = cp;
            self.dp = dp;
            self.map_clip = map_clip;
            self.window_id = window_id;
            self.insensitive_drivingline = false;
            self.invisible_drivingline = false;

            if (constraint != nil)
            {
                self.insensitive_drivingline = constraint.driving_line != gtengine::MGameParameter::INVALID_VALUE_INT;
                if (dp != nil)
                {
                    if (dp.type == gtengine::DriverType::AI)
                    {
                        self.insensitive_drivingline = true;
                        self.invisible_drivingline = true;
                    }
                }
            }
        }

        attribute cp;
        attribute dp;
        attribute map_clip;
        attribute window_id;
        attribute insensitive_drivingline;
        attribute invisible_drivingline;
    }

    attribute data;
    attribute aborted;
    attribute popup;
    attribute minus_sign;
    attribute slider_value_color;
    attribute slider_red_color;

    function onVolumeDecided(context, value, slider)
    {
        slider.label.color = value > 100 ? ROOT.slider_red_color : ROOT.slider_value_color;
    }

    function rgb2hsv(r, g, b)
    {
        var r = r.toDouble();
        var g = g.toDouble();
        var b = b.toDouble();
        var h = 0d;
        var s = 0d;
        var v = 0d;

        var cmax = r > g ? (r > b ? r : b) : (g > b ? g : b);
        var cmin = r < g ? (r < b ? r : b) : (g < b ? g : b);

        v = cmax;
        
        var c = cmax - cmin;

        s = cmax == 0d ? 0d : c / cmax;

        h = 0d;

        if (s != 0d)
        {
            if (r == cmax)
                h = (g - b) / c;
            else if (g == cmax)
                h = 2d + ((b - r) / c);
            else if (b == cmax)
                h = 4d + ((r - g) / c);

            h *= 60d;
            if (h < 0d)
                h = h + 360d;
        }

        h = h / 360d;

        return [h, s, v];
    }

    function hsv2rgb(h, s, v)
    {
        h = h.toDouble();
        s = s.toDouble();
        v = v.toDouble();
        
        var r = 0d;
        var g = 0d;
        var b = 0d;

        if (s == 0d)
        {
            r = g = b = v;
            return [r, g, b];
        }

        if (h > 1d)
            h -= 1d;

        if (h < 0d)
            h += 1d;

        h *= 6d;

        var in = h.toInt();
        in %= 6;

        var fl = h - in.toDouble();
        var p = v * (1d - s);
        var q = v * (1d - (s * fl));
        var t = v * (1d - (s * (1d - fl)));

        switch (in)
        {
            case 0: r = v; g = t; b = p; break;
            case 1: r = q; g = v; b = p; break;
            case 2: r = p; g = v; b = t; break;
            case 3: r = p; g = q; b = v; break;
            case 4: r = t; g = p; b = v; break;
            case 5: r = v; g = p; b = q; break;
        }

        return [r, g, b];
    }

    method open(context, data)
    {
        self.data = data;
        self.aborted = false;

        SettingFrame.appear();

        self.popup = SequenceUtil::ModalPage(context, ROOT);
        self.popup.open();

        var res = self.aborted;
        self.aborted = nil;
        return !res;
    }

    method close(context)
    {
        if (self.popup != nil)
        {
            self.popup.close();
            self.popup = nil;
        }
    }

    method abort(context)
    {
        if (self.data != nil)
        {
            close(context);
            self.aborted = true;
        }
    }

    method reflect(context)
    {
        var option = main::GAME_STATUS.user_profile.option;
        if (gSequenceCondition.game_mode == gtengine::GameMode::EVENT_RALLY)
        {
            SettingFrame::Pane::ScrolledBody::clip::space::MapViewMode::OptionMenu::popup::vbox::NorthUp.visible = false;
            SettingFrame::Pane::ScrolledBody::clip::space::MapViewMode::OptionMenu::popup::vbox::OverHead.visible = false;
            SettingFrame::Pane::ScrolledBody::clip::space::MapViewMode::OptionMenu.setIndex(context, option.race_map_view_mode > 0 ? 1 : 0);
        }
        else
        {
            SettingFrame::Pane::ScrolledBody::clip::space::MapViewMode::OptionMenu.setIndex(context, option.race_map_view_mode);
        }

        SettingFrame::Pane::ScrolledBody::clip::space::GhostType::OptionMenu.setIndex(context, option.race_ghost_type);

        SettingFrame::Pane::ScrolledBody::clip::space::Brightness::slider.format_callback = (context, value) => 
        {
            if (value == 0)
                return "+0";
            
            if (value < 0)
                value -= 0.05;
            else if (value > 0)
                value += 0.05f;

            var sign = value >= 0 ? "+" : ROOT.minus_sign;
            return sign + "%.1f".format(Math::abs(value));
        };

        SettingFrame::Pane::ScrolledBody::clip::space::Brightness::slider.unit_text = " EV";
        SettingFrame::Pane::ScrolledBody::clip::space::Brightness::slider.value = (option.screen_brightness - 50.0) / 50.0;
        SettingFrame::Pane::ScrolledBody::clip::space::Brightness::slider.setup(context);

        var d_option = main::GAME_STATUS.user_profile.context.saved_driving_option[self.data.window_id];
        SettingFrame::Pane::ScrolledBody::clip::space::InCarFovy::OptionMenu.setIndex(context, d_option.in_car_fovy);

        SettingFrame::Pane::ScrolledBody::clip::space::RD_ViewMode::OptionMenu.setIndex(context, option.racedisplay_view_mode);
        SettingFrame::Pane::ScrolledBody::clip::space::RacerList::OptionMenu.setIndex(context, option.racer_list_car ? 1 : 0);
        SettingFrame::Pane::ScrolledBody::clip::space::RaceSoundPosition::OptionMenu.setIndex(context, option.race_sound_position + 1);

        var off_text = context.translate(ROOT, "Component", "Off");
        SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider.zero_text = off_text;
        SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider.value = option.race_bgm_volume;
        SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider.decide_callback = onVolumeDecided;
        SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider.setup(context);
        onVolumeDecided(context, SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider.value, SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider);

        SettingFrame::Pane::ScrolledBody::clip::space::SEVolume::slider.zero_text = off_text;
        SettingFrame::Pane::ScrolledBody::clip::space::SEVolume::slider.value = option.race_se_volume;
        SettingFrame::Pane::ScrolledBody::clip::space::SEVolume::slider.decide_callback = onVolumeDecided;
        SettingFrame::Pane::ScrolledBody::clip::space::SEVolume::slider.setup(context);
        onVolumeDecided(context, SettingFrame::Pane::ScrolledBody::clip::space::SEVolume::slider.value, SettingFrame::Pane::ScrolledBody::clip::space::SEVolume::slider);

        SettingFrame::Pane::ScrolledBody::clip::space::DrivingLine.visible = !self.data.invisible_drivingline;
        if (GetVersionBranch() != "runviewer" && GetVersionBranch() != "behavior")
        {
            SettingFrame::Pane::ScrolledBody::clip::space::DrivingLine::OptionMenu.setIndex(context, ORG.getDrivingLineDispFlag(self.data.window_id));
        }

        SettingFrame::Pane::ScrolledBody::clip::space::DrivingLine::OptionMenu.insensitive = self.data.insensitive_drivingline;
        SettingFrame::Pane::ScrolledBody::clip::space::BlindSide::OptionMenu.setIndex(context, option.blindside_disp_mode);
        SettingFrame::Pane::ScrolledBody::clip::space::ButtonNavigation::OptionMenu.setIndex(context, option.button_navigation_disp_mode);

        if (gSequenceCondition.is_online && 
            RaceOperator.game_parameter.event.constraint.suggested_gear != gtengine::MGameParameter::INVALID_VALUE_INT)
        {
            SettingFrame::Pane::ScrolledBody::clip::space::SuggestedGear::OptionMenu.setIndex(context, 0);
            SettingFrame::Pane::ScrolledBody::clip::space::SuggestedGear::OptionMenu.insensitive = true;
        }
        else
        {
            SettingFrame::Pane::ScrolledBody::clip::space::SuggestedGear::OptionMenu.setIndex(context, option.suggested_disp_mode);
        }

        SettingFrame::Pane::ScrolledBody::clip::space::SpeedRing::OptionMenu.setIndex(context, GAME_STATUS.user_profile.option.ring_color_index);
        SettingFrame::Pane::ScrolledBody::clip::space::SpeedScale::OptionMenu.setIndex(context, GAME_STATUS.user_profile.option.meter_color_index);

        SettingFrame::Pane::ScrolledBody::clip::space::Parallax::slider.insensitive = !option.monitor_use_parallax_view;
        SettingFrame::Pane::ScrolledBody::clip::space::Parallax::slider.index = (option.monitor_view_offset_x * 100.0 + 0.5).toInt();
        SettingFrame::Pane::ScrolledBody::clip::space::Convergence::slider.insensitive = !option.monitor_use_parallax_view;
        SettingFrame::Pane::ScrolledBody::clip::space::Convergence::slider.index = (option.monitor_convergence * 100.0 + 0.5).toInt();

        |var r, var g, var b| = self.data.cp.extraMeterBacklightColor;
        var color = menu::MColorObject(r, g, b);
        var no_meter = true;

        for (var i = 0; i < self.data.cp.extraMeterCount; ++i)
        {
            var meter = self.data.cp.getExtraMeterKind(i);
            if (meter != -1)
                no_meter = false;
        }

        if (self.data.cp.rentacar)
            no_meter = true;

        |var h, var s, var v| = rgb2hsv(r, g, b);

        var slider = SettingFrame::Pane::ScrolledBody::clip::space::AdditionalMeter::H::slider;
        slider.ignore_update = true;
        slider.setup(context);
        slider.value = h * slider.max;
        slider.insensitive = no_meter;

        slider = SettingFrame::Pane::ScrolledBody::clip::space::AdditionalMeter::S::slider;
        slider.ignore_update = true;
        slider.setup(context);
        slider.value = s * slider.max;
        slider.insensitive = no_meter;

        slider = SettingFrame::Pane::ScrolledBody::clip::space::AdditionalMeter::V::slider;
        slider.ignore_update = true;
        slider.setup(context);
        slider.value = v * slider.max;
        slider.insensitive = no_meter;

        SettingFrame::Pane::ScrolledBody::clip::space::AdditionalMeter::CurrentColor.insensitive = no_meter;
        SettingFrame::Pane::ScrolledBody::clip::space::AdditionalMeter::CurrentColor::vbox::SBox::HBox::ColorTip::ColorFace.setColor(color);
        SettingFrame::Pane::ScrolledBody::clip::space::AdditionalMeter.updateColor(context);
        SettingFrame::Pane::ScrolledBody::clip::space::AdditionalMeter.updated = false;
    }

    method apply()
    {
        var option = main::GAME_STATUS.user_profile.option;
        option.race_map_view_mode = SettingFrame::Pane::ScrolledBody::clip::space::MapViewMode::OptionMenu.index;
        option.race_ghost_type = SettingFrame::Pane::ScrolledBody::clip::space::GhostType::OptionMenu.index;

        ORG.setLineGhost(option.race_ghost_type != 0);

        option.racedisplay_view_mode = SettingFrame::Pane::ScrolledBody::clip::space::RD_ViewMode::OptionMenu.index;
        option.screen_brightness = (SettingFrame::Pane::ScrolledBody::clip::space::Brightness::slider.value * 50) + 50;

        var d_option = main::GAME_STATUS.user_profile.context.saved_driving_option[self.data.window_id];
        d_option.in_car_fovy = SettingFrame::Pane::ScrolledBody::clip::space::InCarFovy::OptionMenu.index;
        option.racedisplay_view_mode = SettingFrame::Pane::ScrolledBody::clip::space::RD_ViewMode::OptionMenu.index;
        option.racer_list_car = 0 != SettingFrame::Pane::ScrolledBody::clip::space::RacerList::OptionMenu.index;
        option.race_sound_position = SettingFrame::Pane::ScrolledBody::clip::space::RaceSoundPosition::OptionMenu.index - 1;
        option.race_bgm_volume = SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider.value;
        option.race_se_volume = SettingFrame::Pane::ScrolledBody::clip::space::SEVolume::slider.value;

        if (!self.data.invisible_drivingline)
        {
            var display_driving_line = SettingFrame::Pane::ScrolledBody::clip::space::DrivingLine::OptionMenu.index != 0;
            var dp_list = [self.data.dp];
            if (self.data.window_id == 0)
            {
                dp_list.push(GAME_STATUS.user_profile.residence.referPlayer());
                dp_list.push(GAME_STATUS.user_profile.residence.referArcadePlayer(0));
            }
            else if (self.data.window_id == 1)
            {
                dp_list.push(GAME_STATUS.user_profile.residence.referArcadePlayer(1));
            }

            if (GetVersionBranch() != "runviewer" && GetVersionBranch() != "behavior")
            {
                foreach (var dp in dp_list)
                    dp.display_driving_line = display_driving_line;

                    ORG.setDrivingLineDispFlag(self.data.window_id, display_driving_line);
            }

            RaceOperator.setTargetDriverParameter(self.data.window_id, 0, self.data.dp);
        }

        option.blindside_disp_mode = SettingFrame::Pane::ScrolledBody::clip::space::BlindSide::OptionMenu.index != 0;
        option.button_navigation_disp_mode = SettingFrame::Pane::ScrolledBody::clip::space::ButtonNavigation::OptionMenu.index != 0;
        if (!SettingFrame::Pane::ScrolledBody::clip::space::SuggestedGear::OptionMenu.insensitive)
            option.suggested_disp_mode = SettingFrame::Pane::ScrolledBody::clip::space::SuggestedGear::OptionMenu.index != 0;

        
        GAME_STATUS.user_profile.option.ring_color_index = SettingFrame::Pane::ScrolledBody::clip::space::SpeedRing::OptionMenu.index;
        GAME_STATUS.user_profile.option.meter_color_index = SettingFrame::Pane::ScrolledBody::clip::space::SpeedScale::OptionMenu.index;

        option.monitor_view_offset_x = SettingFrame::Pane::ScrolledBody::clip::space::Parallax::slider.index.toFloat() / 100.0;
        option.monitor_convergence = SettingFrame::Pane::ScrolledBody::clip::space::Convergence::slider.index.toFloat() / 100.0;
        option.apply();
        
        var face = OnboardMeterRoot::RaceDisplayFace;
        face.blindside_disp = option.blindside_disp_mode;

        if (!SettingFrame::Pane::ScrolledBody::clip::space::SuggestedGear::OptionMenu.insensitive)
            face.suggested_disp = option.suggested_disp_mode;
        
        SoundUtil::SetRaceSoundPosition(option.race_sound_position);
        SoundUtil::SetRaceSoundVolumeOption(option.race_bgm_volume, option.race_se_volume);
        SoundUtil::ApplySoundVolumeOption();
        SoundUtil::SetupSound(SoundUtil::SCENE_RACE, true);
        SoundUtil::UpdateBGMVolume();

        |var r, var g, var b| = SettingFrame::Pane::ScrolledBody::clip::space::AdditionalMeter.getColorRGB();
        self.data.cp.extraMeterBacklightColor = [r, g, b];

        if (SettingFrame::Pane::ScrolledBody::clip::space::AdditionalMeter.updated)
        {
            var slot_id = RaceOperator.getPlayerSlot();
            ORG.setChangeableCarParameterAtBeginningOfSession(slot_id, self.data.cp);
            GAME_STATUS.user_profile.garage.updateCar(self.data.cp);
        }
    }

    method onLoad(context)
    {
        if (GetVersionBranch() == "demo")
        {
            SettingFrame::Pane::ScrolledBody::clip::space::SuggestedGear.is_enable = false;
            SettingFrame::Pane::ScrolledBody::clip::space::CustomMeter.is_enable = false;
            SettingFrame::Pane::ScrolledBody::clip::space::SpeedScale.is_enable = false;
            SettingFrame::Pane::ScrolledBody::clip::space::SpeedRing.is_enable = false;
            SettingFrame::Pane::ScrolledBody::clip::space::BlindSide.is_enable = false;
        }

        var is4x3 = ORG.getGameResolution()[2];
        SettingFrame::ToolTip.minimum_width = is4x3 ? 1440 : 1920;
        self.slider_red_color = menu::MColorObject(1.0, 0.2, 0.2);
        self.slider_value_color = SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider::label.color;
    }

    async method onInitialize(context)
    {
        self.minus_sign = context.translate(ROOT, "SpecialCharacter", "EnDash");
        var width = pdiext::MSystemConfiguration::is4x3() ? 1440 : 1920;
        Notice.w = width;
        SettingFrame::Pane::ScrolledBody::clip::space::Parallax::slider.setup(context);

        SettingFrame::Pane::ScrolledBody::clip::space::Convergence::slider.format_callback = (context, value) => 
        {
            var scale = 0.01;
            var value100 = 100 * (scale * value + 0.005);
            return pdiext::GetNumberString(value100, 2);
        };
        SettingFrame::Pane::ScrolledBody::clip::space::Convergence::slider.setup(context);

        await reflect(context);

        var focus_w = SettingFrame::Pane::ScrolledBody::clip::space::DrivingLine::OptionMenu;
        ROOT.setFocus(focus_w);
        SettingFrame::Pane::ScrolledBody::clip::space.parent.warp(focus_w);
    }

    method onFinalize(context)
    {
        self.data = nil;
        SettingFrame::Pane::ScrolledBody::clip::space::AdditionalMeter.updated = nil;
        SettingFrame::Pane::ScrolledBody::clip::space::AdditionalMeter::H::slider.ignore_update = nil;
        SettingFrame::Pane::ScrolledBody::clip::space::AdditionalMeter::S::slider.ignore_update = nil;
        SettingFrame::Pane::ScrolledBody::clip::space::AdditionalMeter::V::slider.ignore_update = nil;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");

        if (true)
        {
            apply();
            close(context);
        }
        else
            ROOT.setFocus(SettingFrame::Pane::Foot::Cancel);

        return EVENTRESULT_FILTER;
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::MapViewMode::OptionMenu
    {
        method onValueChanged(context)
        {
            ROOT.data.map_clip.mapmode = self.index;
            __prototype__::onValueChanged(context);
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Brightness::slider
    {
        method onValueChanged(context)
        {
            pdiext::MSystemConfiguration::SetMasterRenderExposure(self.value);
            __prototype__::sliderValueChanged(context);
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::InCarFovy::OptionMenu
    {
        method onValueChanged(context)
        {
            main::ORG.setInCarFovyType(ROOT.data.window_id, self.index);
            __prototype__::pulldownValueChanged(context);
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::RD_ViewMode::OptionMenu
    {
        method onValueChanged(context)
        {
            var view_mode = self.index;
            SettingFrame::Pane::ScrolledBody::clip::space::MapViewMode::OptionMenu.insensitive = view_mode;
            SettingFrame::Pane::ScrolledBody::clip::space::RacerList::OptionMenu.insensitive = view_mode;
            OnboardMeterRoot::RaceDisplayFace.dispmode = self.index;

            __prototype__::onValueChanged(context);
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider
    {
        method onValueChanged(context)
        {
            SoundUtil::PreviewBGMVolume(self.value, GAME_STATUS.user_profile.option.user_bgm_volume);
            
            __prototype__::onValueChanged(context);
        }

        method onPopupOpen(context)
        {
            SoundUtil::BGMPause(false);
            __prototype__::onPopupOpen(context);
        }

        method onPopupClosed(context)
        {
            SoundUtil::BGMPause(true);
            __prototype__::onPopupClosed(context);
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::SpeedScale::OptionMenu
    {
        method onValueChanged(context)
        {
            var w = self.getItem(self.index);
            var color = w.Chip::ColorFace.face_color;
            var color_obj = menu::MColorObject(color[0] / 255.0, color[1] / 255.0, color[2] / 255.0);
            self.ColorTip::ColorFace.setColor(color_obj);

            __prototype__::onValueChanged(context);
            return EVENTRESULT_STOP;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::SpeedRing::OptionMenu
    {
        method onValueChanged(context)
        {
            var w = self.getItem(self.index);
            var color = w.Chip::ColorFace.face_color;
            var color_obj = menu::MColorObject(color[0] / 255.0, color[1] / 255.0, color[2] / 255.0);
            self.ColorTip::ColorFace.setColor(color_obj);

            __prototype__::onValueChanged(context);
            return EVENTRESULT_STOP;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::AdditionalMeter
    {
        attribute updated;

        method getColorRGB()
        {
            var h = H::slider.value / H::slider.max;
            if (h == 1.0)
                h = 0.0;

            var s = S::slider.value / S::slider.max;
            var v = V::slider.value / V::slider.max;

            return hsv2rgb(h, s, v);
        }

        method updateColor(context)
        {
            |var r, var g, var b| = getColorRGB();
            var target = CurrentColor::vbox::SBox::HBox;
            target.TextFaceR.text = Math::round(r * 255.0).toInt();
            target.TextFaceG.text = Math::round(g * 255.0).toInt();
            target.TextFaceB.text = Math::round(b * 255.0).toInt();
            target.ColorTip::ColorFace.setColor(menu::MColorObject(r, g, b));
            self.updated = true;
        }

        module CurrentColor::OptionMenu
        {
            static sColorPalet = 
            [
                [[0xFF, 0xFF, 0xFF], "WHITE"],
                [[0xFF, 0x3C, 0xDC], "PINK"],
                [[0xFF, 0x00, 0xFF], "MAGENTA"],
                [[0x8C, 0x00, 0xFF], "PURPLE_RED"],
                [[0x50, 0x00, 0xFF], "PURPLE"],
                [[0x28, 0x00, 0xFF], "VIOLET"],
                [[0x10, 0x00, 0xFF], "BLUE_VIOLET"],
                [[0x00, 0x00, 0xFF], "MARINE_BLUE"],
                [[0x00, 0x1E, 0xFF], "COBALT_BLUE"],
                [[0x00, 0x64, 0xFF], "CERULEAN_BLUE"],
                [[0x00, 0xFF, 0xFF], "AQUA_BLUE"],
                [[0x00, 0xFF, 0x64], "EMERALD_GREEN"],
                [[0x00, 0x7F, 0x00], "GREEN"],
                [[0x55, 0xFF, 0x00], "LIME"],
                [[0xFF, 0xFF, 0x00], "YELLOW"],
                [[0xFF, 0x82, 0x00], "YELLOW_ORANGE"],
                [[0xFF, 0x2D, 0x00], "ORANGE"],
                [[0xFF, 0x00, 0x00], "RED"],
            ];

            method onInitialize(context)
            {
                self.popup::vbox.clearChildren(context);

                foreach (var color in sColorPalet)
                {
                    |var r, var g, var b| = color[0];
                    var color_name = color[1];;

                    var w = hidden::ColorItem.doCopy();
                    w.Chip::ColorFace.face_color = [r, g, b, 0xFF];
                    w.label.text = manager.translate("Color", color_name);
                    self.popup::vbox.appendChild(context, w);
                }

                self.applyAppend(context);
                self.setIndex(context, 0);
            }

            method onActivate(context)
            {
                if (self.is_popuped)
                {
                    sound.play("ok");
                    var w = self.getItem(self.index);
                    var color = w.Chip::ColorFace.face_color;
                    var r = color[0] / 255.0;
                    var g = color[1] / 255.0;
                    var b = color[2] / 255.0;

                    |var h, var s, var v| = rgb2hsv(r, g, b);
                    H::slider.value = h * H::slider.max;
                    S::slider.value = s * S::slider.max;
                    V::slider.value = v * V::slider.max;

                    SettingFrame::Pane::ScrolledBody::clip::space::AdditionalMeter.updateColor(context);
                }

                return EVENTRESULT_FILTER;
            }
        }

        module H::slider
        {
            attribute ignore_update;

            method onValueChanged(context)
            {
                __prototype__::onValueChanged(context);

                if (!self.ignore_update)
                    AdditionalMeter.updateColor(context);

                self.ignore_update = false;

                var h = self.value / self.max;
                if (h == 1d)
                    h = 0d;

                var rgb = hsv2rgb(h, 1d, 1d);
                var hue = menu::MColorObject(rgb[0], rgb[1], rgb[2], 1);
                S::slider::popup::bg::ColorFaceH.setColor(hue);
                V::slider::popup::bg::ColorFaceH.setColor(hue);
            }
        }

        module S::slider
        {
            attribute ignore_update;

            method onValueChanged(context)
            {
                __prototype__::onValueChanged(context);

                if (!self.ignore_update)
                    AdditionalMeter.updateColor(context);

                self.ignore_update = false;
                var s = self.value / self.max;

                V::slider::popup::bg::ColorFaceS.setColor(menu::MColorObject(1,1,1, 1.0 - s));
            }
        }

        module V::slider
        {
            attribute ignore_update;

            method onValueChanged(context)
            {
                __prototype__::onValueChanged(context);

                if (!self.ignore_update)
                    AdditionalMeter.updateColor(context);

                self.ignore_update = false;
                var v = self.value / self.max;

                S::slider::popup::bg::ColorFaceV.setColor(menu::MColorObject(0,0,0, 1.0 - v));
            }
        }
    }

    module SettingFrame::Pane::Foot::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.apply();
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::Foot::Cancel
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }
}
