













module ROOT
{
    hidden.visible = true;
    
    attribute event_id;
    attribute current_result;
    attribute laptime;
    attribute show_button;
    attribute popup;
    attribute closed;
    attribute result;

    method open(context, laptime)
    {
        self.laptime = laptime;
        self.show_button = true;
        self.result = false;
        self.closed = false;

        self.popup = main::SequenceUtil::ModalPage(context, ROOT);
        self.popup.open();

        var res = self.result;
        self.result = nil;
        return res;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;

        FadeActor.on_effect_end = function(context)
        {
            if (ROOT.popup != nil)
            {
                ROOT.popup.close();
                ROOT.popup = nil;
            }
        }

        FadeActor.out = false;
    }

    method abort(context)
    {
        if (ROOT.popup != nil)
        {
            ROOT.popup.close();
            ROOT.popup = nil;
        }
    }

    async method onInitialize(context)
    {
        on_initialize_time(context);
        context.cursor_visible = true;
        RaceMenuSimple.initialize(context);
    }

    method on_initialize_time(context)
    {
        var laptime0 = pdiext::GetRaceTimeString(self.laptime);
        Time::Info::Result::Time::TextFace.visible = true;
        Time::Info::Result::Time::TextFaceInvalid.visible = false;
        Time::Info::Result::Time::TextFace.text = laptime0;
        Time::Info::Result::Time::TextFace_shadow.text = laptime0;
        Time::Info::Result::Time.VectorInterpolator.restart();
    }

    method onFinalize(context)
    {
        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        if (!self.show_button)
        {
            sound.play("cancel");
            close(context);
        }

        return EVENTRESULT_FILTER;
    }

    method onActivate(context)
    {
        if (!self.show_button)
        {
            sound.play("ok");
            close(context);
        }

        return EVENTRESULT_FILTER;
    }

    function onRestart(context)
    {
        if (RaceRoot.checkRemainTime())
        {
            main::sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        sound.play("ok");
        ROOT.result = true;
        RaceMenuSimple.terminate(context);
        ROOT.close(context);
        SoundUtil::BGMFadeout(3.0);
    }

    function onExit(context)
    {
        if (RaceRoot.checkRemainTime())
        {
            main::sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        sound.play("ok");
        RaceMenuSimple.terminate(context);
        ROOT.close(context);
        SoundUtil::BGMFadeout(3.0);
    }

    module RaceMenuSimple
    {
        method initialize(context)
        {
            var icons = [];
            icons.push(RaceMenuUtil::Icon("RESTART", "icon_restart.dds", onRestart));
            icons.push(RaceMenuUtil::Icon("EXIT", "icon_exit.dds", onExit));

            var item = hidden::RaceMenuItem;
            self.visible = true;
            var actor = self.SBox0.SBox1.Caption.FadeActor;

            actor.repeat = false;
            actor.out = false;
            actor.warp();

            self.SBox0::ScalarInterpolator.reverse = false;
            self.SBox0::ScalarInterpolator.restart();

            var listbox = self.SBox0.SBox1.ListBox;
            listbox.ScalarInterpolator.reverse = true;
            listbox.ScalarInterpolator.reset();

            var unit_w = item.w;
            listbox.keep_alignment = false;
            listbox.alignment = 0.5;
            listbox.interpolate_ratio = 0.2;
            listbox.ScalarInterpolator.start_value = unit_w;
            listbox.ScalarInterpolator.end_value = (unit_w + listbox.spacing) * icons.size - listbox.spacing;
            listbox.setItemTemplate(context, item);
            listbox.setItemCount(icons.size);
            listbox.focus_callback = listbox.onFocus;
            listbox.focus_active = true;

            for (var i = 0; i < icons.size; i++)
            {
                var icon = icons[i];
                var w = listbox.getItemWidget(i, context);
                w.icon = icon;
                icon.caption = manager.translate("QuickMenu", "caption_" + icon.caption_key);
                w.image.image_path = "/image/gt6/quick_menu/" + icon.image_path ;
                w.doInitialize(context);
                w.separator.visible = i != 0;
            }

            self.SBox0.visible = true;
            ROOT.setFocus(listbox);
        }

        method terminate(context)
        {
            var sbox1 = self.SBox0.SBox1;
            var listbox = sbox1.ListBox;
            var actor = sbox1.Caption.FadeActor;
            actor.out = true;
            self.SBox0.ScalarInterpolator.reverse = true;
            self.SBox0.ScalarInterpolator.start();

            var item = listbox.getItemWidget(listbox.focus_index, context);
            var a = listbox.w - item.w;
            a = a > 0 ? item.x / a : 0;

            listbox.keep_scroll_point = true;
            listbox.interpolate_ratio = 1.0;
            listbox.scroll_point = a;
            listbox.ScalarInterpolator.reverse = true;
            listbox.ScalarInterpolator.start();
            item.separator.visible = false;

            item.Blink.restart();
            context.cursor_visible = false;
            context.wait(0.8);
        }

        module SBox0::SBox1::ListBox
        {
            method onFocus(context, new_index, old_index)
            {
                var new_widget = self.getItemWidget(new_index, context);
                if (new_widget != nil)
                {
                    SBox1.Caption.label.text = new_widget.icon.caption;
                    var i = new_widget.image::VectorInterpolator;
                    i.reverse = false;
                    i.start();
                }

                var old_widget = self.getItemWidget(old_index, context);
                if (old_widget != nil)
                {
                    var i = old_widget.image::VectorInterpolator;
                    i.reverse = true;
                    i.start();
                }
            }

            method onActivate(context)
            {
                var widget = self.getItemWidget(self.focus_index, context);
                if (widget != nil)
                {
                    widget.icon.func(context);
                }

                return EVENTRESULT_FILTER;
            }
        }
    }

    module hidden::RaceMenuItem
    {
        attribute icon;
    }
}