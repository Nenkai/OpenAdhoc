













module ROOT
{
    static sCarCode;
    static sCarColor;

    hidden.visible = false;

    method open(context, car_code, car_color)
    {
        sCarCode = car_code;
        if (car_color == nil)
            car_color = gtengine::MSpecDB::getCarVariationFlag(car_code, 1);
        
        sCarColor = car_color;

        SequenceUtil::enableStartMenuRoot();
        SequenceUtil::startPageSimple(context, self);
    }

    method close(context)
    {
        CarDealerRoot.open(context, sCarCode);
    }

    method updateDisplayCredits(context, car_code)
    {
        var cr_str = manager.translate("Unit", "CREDIT");
        var price = gtengine::MSpecDB::getCarPrice(car_code);

        CarQuotation::Price::Value.text = "%s %s".format(cr_str, pdiext::MMisc::GetMoneyString(price));
        CarQuotation::Price::OwnFlag.visible = GAME_STATUS.user_profile.garage.hasCar(car_code);
        
        var current_credits = GAME_STATUS.user_profile.cash;
        CarQuotation::CurrentCredits::Value.text = "%s %s".format(cr_str, pdiext::MMisc::GetMoneyString(current_credits));

        var remain_credits = current_credits - price;
        if (remain_credits > -1)
        {
            CarQuotation::RemainCredits::Value.text = "%s %s".format(cr_str, pdiext::MMisc::GetMoneyString(remain_credits));
            CarQuotation::RemainCredits::Value.visible = true;
            CarQuotation::RemainCredits::Value_minus.visible = false;
        }
        else
        {
            CarQuotation::RemainCredits::Value.visible = false;
            CarQuotation::RemainCredits::Value_minus.text = "%s -%s".format(cr_str, pdiext::MMisc::GetMoneyString(-remain_credits));
            CarQuotation::RemainCredits::Value_minus.visible = true;
        }
    }

    method setupDisplay(context, cp)
    {
        var car_code = cp.getCarCode();
        var car_label = cp.getCarLabel();

        var it = SPECDB.query1("SELECT * FROM CAR_VIEW WHERE ID=?", [car_code]);
        CarName.text = SpecDatabaseUtil::getAlphabetCarName(context, car_code);
        LabelQuotation::CarName.text = gtengine::MSpecDB::getCarName(car_code);

        var country_str = gtengine::MSpecDB::getCountryString(gtengine::MSpecDB::getCarCountry(car_code));
        Class_and_PP::Country::NationalFlag.image_path = "piece/gt6/flag_menu/%s.img".format(country_str);
        Class_and_PP::Country::Name.text = manager.translate("Country", country_str);

        var category = gtengine::MSpecDB::getCarCategory(car_code);
        var category_label;

        switch (category)
        {
            case gtengine::CarCategory::NORMAL:
                category_label = "car_category_normal";
                break;

            case gtengine::CarCategory::RACING:
                category_label = "car_category_racing";
                break;

            case gtengine::CarCategory::TUNING:
                category_label = "car_category_tuning";
                break;

            case gtengine::CarCategory::CONCEPT:
                category_label = "car_category_concept";
                break;
        }

        Class_and_PP::Class.text = manager.translate("SpecFormat", category_label);
        cp.setNewCar();
        cp.beginInfo();
        var pp = cp.getPP1000();
        cp.endInfo();

        var unit_pp = manager.translate("Unit", "PERFORMANCE_POINT");
        Class_and_PP::PP.text = "%s %d".format(unit_pp, pp);
        Manufacturer.text = manager.translate("TunerNameI18n", gtengine::MSpecDB::getTunerLabel(car_code));

        var catalog = gtengine::MSpecDB::getCatalogSpec(car_code);
        CarPerformance::MaxPower::Value.text = catalog.power;
        CarPerformance::MaxTorque::Value.text = catalog.torque;

        var drivetrain_label = manager.translate(ROOT, "Label_Drivetrain");
        var aspiration_label = manager.translate("Regulation", "aspiration");
        var drivetrain_txt = manager.translate("DriveTrainName", catalog.DriveTypeName);
        var aspiration_txt = LocalizeUtil::GetAspirationText(cp.getCurrentAspirationType());

        CarPerformance::Drivetrain::Label.text = "%{drivetrain_label}/%{aspiration_label}";
        CarPerformance::Drivetrain::Value.text = "%{drivetrain_txt}/%{aspiration_txt}";
        CarPerformance::Length::Value.text = catalog.length;
        CarPerformance::Width::Value.text = catalog.width;
        CarPerformance::Height::Value.text = catalog.height;
        CarPerformance::Weight::Value.text = catalog.weight;

        var displacement = catalog.displacement;
        if (!displacement.beginWith("---") && displacement.find("x") == -1)
            displacement = pdistd::TextConv("<#%{displacement}>");

        CarPerformance::Displacement::Value.text = displacement;

        var rtext = main::pdistd::MRTextDB();
        rtext.load("/description/gt6/%s.rt2".format(pdistd::MLocale::getLanguage()));
        var car_catch = rtext.get("CarCatch", car_label);
        CarCatch.remove();
        CarCatch.action_type = 1;
        CarCatch.value = pdistd::TextConv(car_catch);

        var logo = MENUDB.executeQuery1R1C("SELECT Logo FROM t_award_car WHERE CarLabel=?", [car_label]);
        if (logo != nil)
            AwardLogo.image_path = "piece/award_logo/%s.img".format(logo);
        else
            AwardLogo.image_path = "";

        var interior_type = SPECDB.executeQuery1R1C("SELECT InteriorType FROM GENERIC_CAR WHERE ID=?", [car_code]);
        switch (interior_type)
        {
            case 0:
                InteriorType::TextFace.text = manager.translate(ROOT, "InteriorType_None");
                break;

            case 1:
                InteriorType::TextFace.text = manager.translate(ROOT, "InteriorType_Standard");
                break;

            case 2:
                InteriorType::TextFace.text = manager.translate(ROOT, "InteriorType_Premium");
                break;
            
            default:
                InteriorType.visible = false;
                break;
        }

        updateDisplayCredits(context, car_code);
    }

    method checkGarageFull()
    {
        
    }

    method receiveCar(context, car_code, car_color, present_car, debug_free = false)
    {
        if (!TutorialUtil::isProgress("gttop", "get_first_car") && !present_car)
            PDINetwork.unlockTrophyAsync(gtengine::TrophyType::MY_CAR);

        var tuner_label = gtengine::MSpecDB::getTunerLabel(car_code);
        KeyValueUtil::addInt("favorite_tuner", tuner_label, 1);

        var new_car = gtengine::MCarParameter(car_code);
        new_car.color = car_color;
        new_car.setNewCar();

        var return_page = CarDealerRoot;
        var return_page_args = car_code;
        var priceless = present_car;

        if (SceneFace.thread_ != nil)
        {
            SceneFace.thread_.terminate();
            SceneFace.thread_ = nil;
        }

        SceneCover::Fade.forward();
        SceneCover::Fade.start();

        for (;;)
        {
            if (SceneCover.opacity == 1.0)
                break;

            context.wait(0.1);
        }
        
        ORG.setEnableStereoRendering(false);
        SceneFace.visible = false;

        if (debug_free)
        {
            CarDeliveryRoot.open(context, CarDeliveryRoot::OPEN_MODE::PRESENT, new_car, return_page, return_page_args, "GET BY DEBUG COMMAND!!!");
        }
        else if (present_car)
        {
            var message = manager.translate("CommonGTMode", "PRESENT_UNVEIL_CAR");
            CarDeliveryRoot.open(context, CarDeliveryRoot::OPEN_MODE::PRESENT, new_car, return_page, return_page_args, message, priceless);
        }
        else
        {
            CarDeliveryRoot.open(context, CarDeliveryRoot::OPEN_MODE::CAR_DEALER, new_car, return_page, return_page_args, "", priceless);
        }

        return true;
    }

    method receivePresentCar(context, car_code, car_color)
    {
        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, 
            manager.translate("CommonGTMode", "Message_ReceiveThisCar"));

        if (!res)
            return false;

        var mgarage = GAME_STATUS.user_profile.garage;
        if (mgarage.isFull())
        {
            sound.play("disable");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, 
                manager.translate("GTModeProject::CarShowroomRoot", "Message_GarageFull"));

            return false;
        }

        var res = receiveCar(context, car_code, car_color, true);
        if (res)
        {
            var car_label = gtengine::MSpecDB::getCarLabel(car_code);
            KeyValueUtil::setPresentCarFlag(car_label, false);

            var tuner_label = gtengine::MSpecDB::getTunerLabel(car_code);
            var int_v = KeyValueUtil::getInt("present_car_count", tuner_label);
            if (int_v > 0)
            {
                KeyValueUtil::addInt("present_car_count", tuner_label, -1);
            }
        }

        return res;
    }

    method buyCar(context, car_code, car_color, debug_free = false)
    {
        var mycash_ref = &main::GAME_STATUS.user_profile.cash;
        var price = gtengine::MSpecDB::getCarPrice(car_code);

        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, manager.translate("GTModeProject::CarShowroomRoot", "Message_BuyThisCar"));
        if (!res)
            return false;

        var mgarage = GAME_STATUS.user_profile.garage;
        if (mgarage.isFull())
        {
            sound.play("disable");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, 
                manager.translate("GTModeProject::CarShowroomRoot", "Message_GarageFull"));
            return false;
        }

        if (!debug_free)
        {
            if (!main::GAME_STATUS.user_profile.payCash(price))
            {
                sound.play("disable");
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, 
                    manager.translate("CommonGTMode", "Message_EnoughMoney"));
                return false;
            }

            Grim2Util::PUTLOG::CREDIT::withdraw("car", price, gtengine::MSpecDB::getCarLabel(car_code), car_color);
        }
        
        return receiveCar(context, car_code, car_color, false, debug_free);
    }

    method setCarColor(car_code, color)
    {
        CarColor::Chip::ColorChipFace.setCarColor(car_code, color);
        var color_name = gtengine::MSpecDB::getCarColorName(car_code, color);
        CarColor::Name.text = color_name.trim() == "" ? "--" : color_name;
        SceneFace.setCarVariation(color);
    }

    method onInitialize(context)
    {
        var cp = gtengine::MCarParameter(sCarCode);
        cp.color = gtengine::MSpecDB::getCarVariationFlag(sCarCode, 1);
        self.setupDisplay(context, cp);

        var has_present_car = KeyValueUtil::hasPresentCar(sCarCode);
        Menus::vbox::Receive.visible = has_present_car;
        Menus::vbox::Purchase.visible = !has_present_car;

        var has_variation = gtengine::MSpecDB::getCarVariation(cp.getCarCode()) > 1;
        Menus::vbox::ColorSelect.insensitive = !has_variation;

        var is_premium = SPECDB.count("SELECT COUNT(ID) FROM GENERIC_CAR WHERE SpecifyFlags1 & %d AND ID=%d".format(
            gtengine::GenericFlag::USE_PREMIUM_MODEL, cp.getCarCode()))
            .toBool();

        Menus::vbox::GalleryView.insensitive = !is_premium;

        SceneFace.visible = true;
        SceneFace.loadCar(context, cp);

        self.setCarColor(sCarCode, sCarColor);

        menu::FrameInterval = 2;
        ORG.setEnableStereoRendering(true);
    }

    method onFinalize(context)
    {
        CursorUtil::setCursor(ContextMain, "cursor_chrome");
        SceneFace.clearCar();

        menu::FrameInterval = 1;
        ORG.setEnableStereoRendering(false);

        context.enableInput();
    }

    method onCancel(context)
    {
        sound.play("cancel");
        self.close(context);
        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        if (CursorProject::StartMenuRoot::StartMenu.checkKeyPress(context, event))
            return EVENTRESULT_FILTER;

        return EVENTRESULT_CONTINUE;
    }

    module Menus::vbox
    {
        module ColorSelect
        {
            attribute popup_opened;

            method onInitialize(context)
            {
                self.popup_opened = false;
                self.popup.visible = true;
                self.popup::vbox.minimum_height = 0.0;
            }

            method onFinalize(context)
            {
                self.popup::vbox.clearChildren(context);
            }

            method createPulldownItems(context, car_code, focus_color)
            {
                if (focus_color == nil)
                    focus_color = gtengine::MSpecDB::getCarVariationFlag(car_code, 1);

                var v = gtengine::MSpecDB::getCarVariation(car_code);

                for (var i = 0; i < v; i++)
                {
                    var item = hidden::PulldownItem.doCopy();
                    var color_name = gtengine::MSpecDB::getCarColorName(car_code, i);
                    item.label.text = color_name.trim() == "" ? "--" : color_name;
                    item.label_i.text = item.label.text;
                    item.color = i;
                    item.Chip::ColorChipFace.setCarColor(car_code, i);
                    self.popup::vbox.appendChild(context, item);
                }

                self.applyAppend(context);
                self.popup.minimum_height = 0.0;
                self.setIndex(context, focus_color);
            }

            method onValueChanged(context)
            {
                var item = self.getItem();
                ROOT::sCarColor = item.color;
            }

            method onPopupOpen(context)
            {
                if (!self.popup_opened)
                {
                    self.createPulldownItems(context, sCarCode, sCarColor);
                    self.popup_opened = true;
                }
            }

            method onPopupClosed(context)
            {
                var item = self.getItem();
                ROOT.setCarColor(ROOT::sCarCode, item.color);
                return EVENTRESULT_STOP;
            }
        }

        // Leftover/Unimplemented by PDI
        module TestDrive
        {
            method onActivate(context)
            {
                sound.play("disable");
                var cp = gtengine::MCarParameter(ROOT::sCarCode);
                cp.color = ROOT::sCarColor;

                main::menu::FrameInterval = 2;
                ORG.setEnableStereoRendering(false);
                return EVENTRESULT_FILTER;
            }
        }

        module AboutCar
        {
            method onActivate(context)
            {
                sound.play("ok");
                var rtext = main::pdistd::MRTextDB();
                rtext.load("/description/gt6/%s.rt2".format(pdistd::MLocale::getLanguage()));
                var car_label = gtengine::MSpecDB::getCarLabel(ROOT::sCarCode);
                var car_description = rtext.get("CarDescription", car_label);
                rtext.unload();

                DialogUtil::openTextReaderDialog(context,
                    gtengine::MSpecDB::getCarShortName(ROOT::sCarCode), [pdistd::TextConv(car_description)]);

                return EVENTRESULT_FILTER;
            }
        }

        module GalleryView
        {
            method onActivate(context)
            {
                sound.play("ok");
                var cp = gtengine::MCarParameter(ROOT::sCarCode);
                cp.color = ROOT::sCarColor;
                CursorProject::StartMenuRoot::StartMenu.hide();
                GalleryViewRoot.open(context, GalleryViewRoot::OPEN_MODE::CAR_DEALER, cp);
                CursorProject::StartMenuRoot::StartMenu.appear();

                return EVENTRESULT_FILTER;
            }
        }

        module Receive
        {
            method onActivate(context, event)
            {
                sound.play("ok");
                ROOT.receivePresentCar(context, ROOT.sCarCode, ROOT.sCarColor);

                return EVENTRESULT_FILTER;
            }
        }

        module Purchase
        {
            method onActivate(context, event)
            {
                sound.play("ok");

                var debug_free = false;

                ROOT.buyCar(context, ROOT.sCarCode, ROOT.sCarColor, debug_free);

                return EVENTRESULT_FILTER;
            }
        }
    }

    module hidden::PulldownItem
    {
        attribute color;

        method onFocusEnter(context)
        {
            ROOT.setCarColor(ROOT::sCarCode, self.color);
            return EVENTRESULT_STOP;
        }
    }

    module SceneFace
    {
        attribute current_cp_;
        attribute thread_;

        method onInitialize(context)
        {
            SceneCover::Fade.forward();
            SceneCover::Fade.reset();
        }

        method loadCar(context, cp)
        {
            self.thread_ = Thread(function(context)
            {
                SceneCover::Fade.forward();
                SceneCover::Fade.start();
    
                for (;;)
                {
                    if (SceneCover::Fade.ramain_time == 0)
                        break;

                    Thread::Sleep(0.1);
                }

                SceneFaceUtil::loadScene(SceneFace, "dealer", cp);
                SceneFace.current_cp_ = cp;
                
                for (;;)
                {
                    if (!self.isUnderSetup())
                        break;

                    Thread::Sleep(0.1);
                }
                    

                SceneCover::Fade.backward();
                SceneCover::Fade.start();
            }, context);

            self.thread_.start();
        }

        method setCarVariation(car_color)
        {
            self.execCommand("setCarVariation %{car_color} car0");
        }

        method clearCar()
        {
            if (self.current_cp_ != nil)
            {
                self.execCommandImmidiate("clearEntity car0");
                self.current_cp_ = nil;
            }

            if (self.thread_ != nil)
            {
                self.thread_.terminate();
                self.thread_ = nil;
            }
        }
    }
}