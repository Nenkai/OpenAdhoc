













module ROOT
{
    hidden.visible = false;

    attribute penalty_reason;
    attribute penalty_text;
    attribute crsmap_data;
    attribute ignore_init_music;

    method onRealize(context)
    {
        hidden::DriverOrderItem::Number.image_path = "";
        hidden::DriverOrderItem::Driver::TextFace.text = "";
        hidden::DriverOrderItem::Driver::TextFaceA.text = "";
        hidden::DriverOrderItem::Driver::National_Flag.image_path = "";
        hidden::DriverOrderItem::Car::TextFace.text = "";
        hidden::DriverOrderItem::Car::TextFaceA.text = "";

        var RaceStart = GT6::Common::InformationWindow::RaceStart;
        RaceStart.TextFace.text = "";
        RaceStart.Time.Num.text = "";
        RaceStart.Time.NumA.text = "";
        RaceStart.Time.unit.text = "";
        RaceStart.visible = false;
    }

    method appearPanel()
    {
        self.fire(false);
    }

    method disappearPanel()
    {
        self.fire(true);
    }

    method fire(reverse)
    {
        var targets = [
            GT6::Subjective_Meter::FadeInterpolator,
            GT6::Objective_Meter::FadeInterpolator,
            GT6::Common::G_Meter::FadeInterpolator,
            GT6::Common::Tire_Condition::FadeInterpolator
        ];

        if (DivWork["GT6"] != nil)
        {
            targets.push(DivWork.GT6::Subjective_Meter::FadeInterpolator);
            targets.push(DivWork.GT6::Objective_Meter::FadeInterpolator);
            targets.push(DivWork.GT6::Common::G_Meter::FadeInterpolator);
            targets.push(DivWork.GT6::Common::Tire_Condition::FadeInterpolator);
        }

        foreach (var i in targets)
        {
            i.reverse = reverse;
            i.start();
        }
    }

    function resetInformationWindowActor(target, span_sec)
    {
        target.FadeInterpolator.setEndDuration(0, span_sec - 0.3);
        target.FadeInterpolator.initialize();
        target.FadeInterpolator.restart();
        
        target.ScaleInterpolator.setEndDuration(0, span_sec - 0.3);
        target.ScaleInterpolator.initialize();
        target.ScaleInterpolator.restart();

        target.visible = true;
    }

    method activePenalty(slot_id, speed_kmh, reason, span_sec, now_sec)
    {
        if (reason < 1 || reason > 7)
            return;

        self.penalty_reason = reason;

        var target = GT6::Common::InformationWindow;
        target.TimePenaltyVBox::HBox::TextFace.text = self.penalty_text[reason];
        target.TimePenaltyVBox::HBox::Num.text = "%d".format(span_sec.toInt());
        target.TimePenaltyVBox::HBox::Unit.text = manager.translate("Unit", "SEC");
        target.TimePenaltyVBox::HBox::Colon.visible = true;
        target.TimePenaltyVBox::HBox::Num.visible = true;
        target.TimePenaltyVBox::HBox::Unit.visible = true;
        target.TimePenaltyVBox.visible = true;
        target.InvalidTimeHBox.visible = false;
        target.PrizeHBox.visible = false;
        target.RaceStart.visible = false;
        target.Matching.visible = false;
        target.TestDriveCompleted.visible = false;

        resetInformationWindowActor(target, span_sec);
    }

    method activeWarning(slot_id, message)
    {
        var target = GT6::Common::InformationWindow;
        target.TimePenaltyVBox::HBox::TextFace.text = message;
        target.TimePenaltyVBox::HBox::Colon.visible = false;
        target.TimePenaltyVBox::HBox::Num.visible = false;
        target.TimePenaltyVBox::HBox::Unit.visible = false;
        target.TimePenaltyVBox.visible = true;
        target.InvalidTimeHBox.visible = false;
        target.PrizeHBox.visible = false;
        target.RaceStart.visible = false;
        target.Matching.visible = false;
        target.TestDriveCompleted.visible = false;

        resetInformationWindowActor(target, 5);
    }

    method activeTestDriveCompleted(context)
    {
        var target = GT6::Common::InformationWindow;
        target.TimePenaltyVBox.visible = false;
        target.InvalidTimeHBox.visible = false;
        target.PrizeHBox.visible = false;
        target.RaceStart.visible = false;
        target.Matching.visible = false;
        target.TestDriveCompleted.visible = true;

        resetInformationWindowActor(target, 5);
    }

    method activeFlyingAlert(enable)
    {
        var target = GT6::Common::Alert_Flying;
        if (enable && target.visible == false)
        {
            target.ScalarInterpolator.initialize();
            target.ScalarInterpolator.restart();
            target.visible = true;
        }
        else if (!enable && target.visible == true)
        {
            target.visible = false;
        }
    }

    method PrizeMessage(result, span_sec)
    {
        if (result < 0 || result > 2)
            return;

        var target = GT6::Common::InformationWindow;
        target.PrizeHBox::gold.visible = false;
        target.PrizeHBox::silver.visible = false;
        target.PrizeHBox::bronze.visible = false;

        switch (result)
        {
            case 0:
                target.PrizeHBox::gold.visible = true;
                target.PrizeHBox::TextFace.text = manager.translate("RaceProject::RaceRoot", "TRIAL_GET_GOLD");
                break;

            case 1:
                target.PrizeHBox::silver.visible = true;
                target.PrizeHBox::TextFace.text = manager.translate("RaceProject::RaceRoot", "TRIAL_GET_SILVER");
                break;

            case 2:
                target.PrizeHBox::bronze.visible = true;
                target.PrizeHBox::TextFace.text = manager.translate("RaceProject::RaceRoot", "TRIAL_GET_BRONZ");
                break;
        }

        target.TimePenaltyVBox.visible = false;
        target.InvalidTimeHBox.visible = false;
        target.PrizeHBox.visible = true;
        target.RaceStart.visible = false;
        target.Matching.visible = false;
        target.TestDriveCompleted.visible = false;

        resetInformationWindowActor(target, span_sec);
    }

    method InvalidTimeMessage(reason, span_sec, next_lap)
    {
        var target = GT6::Common::InformationWindow;

        if (next_lap != nil && next_lap)
        {
            switch (reason)
            {
                case gtengine::ReasonTypes::SHORTCUT:
                    target.InvalidTimeHBox::TextFace.text = manager.translate("RaceProject::RaceRoot", "NEXTLAP_INVALID_COURSE_OUT");
                    break;

                default:
                    target.InvalidTimeHBox::TextFace.text = manager.translate("RaceProject::RaceRoot", "NEXTLAP_INVALID");
                    break;
            }
        }
        else
        {
            switch (reason)
            {
                case gtengine::ReasonTypes::SHORTCUT:
                    target.InvalidTimeHBox::TextFace.text = manager.translate("RaceProject::RaceRoot", "THISLAP_INVALID_COURSE_OUT");
                    break;

                case gtengine::ReasonTypes::CRASHCAR:
                case gtengine::ReasonTypes::CRASHCAR2:
                    target.InvalidTimeHBox::TextFace.text = manager.translate("RaceProject::RaceRoot", "THISLAP_INVALID_CAR_HIT");
                    break;

                case gtengine::ReasonTypes::CRASHWALL:
                case gtengine::ReasonTypes::ALONGWALL:
                    target.InvalidTimeHBox::TextFace.text = manager.translate("RaceProject::RaceRoot", "THISLAP_INVALID_WALL_HIT");
                    break;

                default:
                    target.InvalidTimeHBox::TextFace.text = manager.translate("RaceProject::RaceRoot", "THISLAP_INVALID");
                    break;
            }
        }

        target.TimePenaltyVBox.visible = false;
        target.InvalidTimeHBox.visible = true;
        target.PrizeHBox.visible = false;
        target.RaceStart.visible = false;
        target.Matching.visible = false;
        target.TestDriveCompleted.visible = false;

        resetInformationWindowActor(target, span_sec);
    }

    method CountDownStart(context, seconds, labelText)
    {
        var target = GT6::Common::InformationWindow;

        target.RaceStart::TextFace.text = labelText;
        target.RaceStart::Time.active = seconds < 11.0;

        var text = "%d".format(seconds.toInt());
        target.RaceStart::Time::Num.text = text;
        target.RaceStart::Time::NumA.text = text;
        target.RaceStart::Time::unit.text = manager.translate("Unit", "SEC");

        target.TimePenaltyVBox.visible = false;
        target.InvalidTimeHBox.visible = false;
        target.PrizeHBox.visible = false;
        target.RaceStart.visible = true;
        target.Matching.visible = false;
        target.TestDriveCompleted.visible = false;

        if (!target.visible)
            resetInformationWindowActor(target, seconds + 1);
    }

    method CountDownEnd(context)
    {
        var target = GT6::Common::InformationWindow;

        target.RaceStart::Time.active = false;
        target.RaceStart::Time::Num.text = "0";
        target.RaceStart::Time::NumA.text = "0";

        context.pushEvent(menu::MFunctionEvent(function() { target.visible = false; }, context, 1.0));
    }




    // New section
    function getTargetList()
    {
        var target_list = [ROOT];
        if (DivWork["GT6"] != nil)
            target_list.push(DivWork);

        return target_list;
    }

    function setMusicInformation(skip)
    {
        |var title, var artist| = SoundUtil::BGMGetPlayingMusicInfo();
        var target_list = getTargetList();
        foreach (var target in target_list)
        {
            var first = target.GT6::Replay_Info::Music_Name::Music.text == "" && 
                target.GT6::Replay_Info::Music_Name::Composer.text == "";
            
            var valid = title != "";
            target.GT6::Replay_Info::Information::Music_Name.visible = valid;
            target.GT6::Replay_Info::Information::Music_Name::Music.text = title;
            target.GT6::Replay_Info::Information::Music_Name::Composer.text = artist;
            
            target.GT6::Replay_Info::Music_Name.visible = valid;
            target.GT6::Replay_Info::Music_Name::Music.text = title;
            target.GT6::Replay_Info::Music_Name::Composer.text = artist;

            if (skip == nil && !first)
                target.GT6::Replay_Info::Music_Name::Opacity.restart();
        }
    }

    function initMusicInformation()
    {
        if (ROOT.ignore_init_music)
        {
            ROOT.ignore_init_music = false;
            return;
        }

        var target_list = getTargetList();
        foreach (var target in target_list)
        {
            target.GT6::Replay_Info::Information::Music_Name::Music.text = "";
            target.GT6::Replay_Info::Information::Music_Name::Composer.text = "";
            target.GT6::Replay_Info::Music_Name::Music.text = "";
            target.GT6::Replay_Info::Music_Name::Composer.text = "";
        }
    }

    method initializePenaltyText(context)
    {
        var target_list = getTargetList();
        foreach (var target in target_list)
        {
            target.GT6::Common::InformationWindow.visible = false;
            
            self.penalty_text = Array(8);
            self.penalty_text[0] = context.translate(ROOT, "penalty_");
            self.penalty_text[1] = context.translate(ROOT, "Penalty_Collision");
            self.penalty_text[2] = context.translate(ROOT, "Penalty_PullingOver");
            self.penalty_text[3] = context.translate(ROOT, "Penalty_Contact");
            self.penalty_text[4] = context.translate(ROOT, "Penalty_SideAttack");
            self.penalty_text[5] = context.translate(ROOT, "Penalty_Shortcut");
            self.penalty_text[6] = context.translate(ROOT, "Penalty_Flying");
            self.penalty_text[7] = "";

            self.penalty_reason = 0;
        }
    }

    method initializeDefault(context)
    {
        var image_path = UnitImagePath6();
        var target_list = getTargetList();
        foreach (var target in target_list)
        {
            target.GT6::Subjective_Meter::Speed_Digital::kmh_mph.image_path = image_path;
            target.GT6::Objective_Meter::Left::Speed_Meter::Speed_Digital::kmh_mph.image_path = image_path;
            target.GT6::BSpec_Meter::Panel::Speed_Meter::Speed_Digital::kmh_mph.image_path = image_path;
            target.GT6::Common::HUD::Speed_Digital::kmh_mph.image_path = image_path;
            target.RaceDisplayFace.tireload_disp = false;

            target.GT6::Common::SectionTime::Opacity.warp();
            target.GT6::Common::DiffTime::Opacity.warp();

            if (GetVersionBranch() == "demo") // Why?
                target.GT6::Common::BlindSide_Indicator.visible = false; 
        }
    }

    method initializeClearTime(context)
    {
        var license_condition = gSequenceCondition.event.license_condition;
        if (!license_condition.isDefault())
            initializeClearTimeByLicenseCondition(context);
        else
            initializeClearTimeNormal(context);
    }

    method initializeClearTimeNormal(context)
    {
        var target_list = getTargetList();
        foreach (var target0 in target_list)
        {   
            var target = target0.GT6::Common::ClearTime;
            target.visible = hasClearTime();

            if (!target.visible)
                continue;

            var eval_condition = gSequenceCondition.gp.event.eval_condition;
            var eval_type = eval_condition.type;

            target.GoldTime.visible = eval_condition.gold != 0;
            target.SilverTime.visible = eval_condition.silver != 0;
            target.BronzeTime.visible = eval_condition.bronze != 0;

            if (eval_type == main::gtengine::EvalType::ORDER)
            {
                var gold_data = OrdinalUtil::getOrdinalNumber(eval_condition.gold.toInt());
                var silver_data = OrdinalUtil::getOrdinalNumber(eval_condition.silver.toInt());
                var bronze_data = OrdinalUtil::getOrdinalNumber(eval_condition.bronze.toInt());

                target.GoldTime::TextFace.text = gold_data;
                target.SilverTime::TextFace.text = silver_data;
                target.BronzeTime::TextFace.text = bronze_data;
                target.GoldTime::ImageShape.visible = false;
                target.SilverTime::ImageShape.visible = false;
                target.BronzeTime::ImageShape.visible = false;
                
                target.GoldTime::TextFace.visible = target.GoldTime.visible;
                target.SilverTime::TextFace.visible = target.SilverTime.visible;
                target.BronzeTime::TextFace.visible = target.BronzeTime.visible;
            }
            else if (eval_type == main::gtengine::EvalType::DRIFT)
            {
                var gold_data = pdiext::GetNumberString(eval_condition.gold);
                var silver_data = pdiext::GetNumberString(eval_condition.silver);
                var bronze_data = pdiext::GetNumberString(eval_condition.bronze);

                target.GoldTime::TextFace.text = gold_data;
                target.SilverTime::TextFace.text = silver_data;
                target.BronzeTime::TextFace.text = bronze_data;
                target.GoldTime::ImageShape.visible = false;
                target.SilverTime::ImageShape.visible = false;
                target.BronzeTime::ImageShape.visible = false;
                
                target.GoldTime::TextFace.visible = target.GoldTime.visible;
                target.SilverTime::TextFace.visible = target.SilverTime.visible;
                target.BronzeTime::TextFace.visible = target.BronzeTime.visible;
            }
            else
            {
                target.GoldTime::ImageShape.visible = true;
                target.SilverTime::ImageShape.visible = true;
                target.BronzeTime::ImageShape.visible = true;

                target.GoldTime::TextFace.visible = false;
                target.SilverTime::TextFace.visible = false;
                target.BronzeTime::TextFace.visible = false;
            }
        }
    }

    method initializeClearTimeByLicenseCondition(context)
    {
        if (GetVersionBranch() == "behavior")
            return;

        |var gold, var silver, var bronze| = RaceRoot::getTargetScoreByLicenseCondition();
        var target_list = getTargetList();
        foreach (var target0 in target_list)
        {
            var target = target0.GT6::Common::ClearTime;
            target.visible = false;

            if (gold[0] != "---")
            {
                target.GoldTime.visible = true; 
                target.SilverTime.visible = silver[0] == "---" ? false : true;
                target.BronzeTime.visible = bronze[0] == "---" ? false : true;

                var by_time = true;

                switch (gSequenceCondition.event.license_condition.display_mode)
                {
                    case gtengine::LicenseDisplayModeType::PYLON_NUM:
                    case gtengine::LicenseDisplayModeType::DRIFT_SCORE:
                    case gtengine::LicenseDisplayModeType::FUEL_DIST:
                        by_time = false;
                }

                if (!by_time)
                {
                    target.GoldTime::TextFace.text = gold[0] + " " + gold[1];
                    target.SilverTime::TextFace.text = silver[0] + " " + silver[1];
                    target.BronzeTime::TextFace.text = bronze[0] + " " + bronze[1];

                    target.GoldTime::ImageShape.visible = false;
                    target.SilverTime::ImageShape.visible = false;
                    target.BronzeTime::ImageShape.visible = false;

                    target.GoldTime::TextFace.visible = target.GoldTime.visible;
                    target.SilverTime::TextFace.visible = target.SilverTime.visible;
                    target.BronzeTime::TextFace.visible = target.BronzeTime.visible;
                }
                else
                {
                    target.GoldTime::ImageShape.visible = true;
                    target.SilverTime::ImageShape.visible = true;
                    target.BronzeTime::ImageShape.visible = true;

                    target.GoldTime::TextFace.visible = false;
                    target.SilverTime::TextFace.visible = false;
                    target.BronzeTime::TextFace.visible = false;
                }

                target.visible = true;
            }
        }
    }

    method initializeBehaviorIf(context)
    {
        if (gSequenceCondition.game_mode != gtengine::GameMode::BEHAVIOR)
            return;

        var target = GT6::Common;
        target.DriverOrder.visible = false;
        target.TotalTime.visible = false;
        target.BestLap.visible = false;
    }

    method initializeMultiMonitor(context)
    {
        var enable = ORG.monitor_host || ORG.monitor_race_display_enable;
        self.visible = enable;
        RaceRoot.visible = enable;
    }

    method initializeLastTime(context)
    {
        var count = 3;
        if (gSequenceCondition.game_mode == gtengine::GameMode::TIME_ATTACK && !hasClearTime())
            count = 8;
        else if (gSequenceCondition.game_mode == gtengine::GameMode::SPLIT_BATTLE)
            count = 2;

        var target_list = getTargetList();
        foreach (var target in target_list)
        {
            for (var i = 0; i < count; ++i)
            {
                var item = hidden::lapshape.doCopy();
                target.GT6::Common::LastLap.appendChild(context, item);
                item.y = hidden::lapshape.h * i;

                item.x = hidden::lapshape.x;
                item.w = hidden::lapshape.w;
                item.h = hidden::lapshape.h;
            }
        }
    }

    method initializeLastScore(context)
    {
        var count = 8;
        var game_mode = gSequenceCondition.game_mode;
        if (game_mode == gtengine::GameMode::ONLINE_ROOM || 
            game_mode == gtengine::GameMode::ONLINE_BATTLE)
            count = 3;

        var target_list = getTargetList();
        foreach (var target in target_list)
        {
            for (var i = 0; i < count; ++i)
            {
                var item = hidden::lapshape.doCopy();
                target.GT6::Common::LastScore.appendChild(context, item);
                item.y = hidden::lapshape.h * i;
    
                item.x = hidden::lapshape.x;
                item.w = hidden::lapshape.w;
                item.h = hidden::lapshape.h;
            }
        }
    }

    method initializeRacerPane(context)
    {
        var game_mode = gSequenceCondition.game_mode;
        var rp = ORG.getBackRaceParameter();
        if (rp.race_type != gtengine::RaceType::COMPETITION || 
            rp.flagset == gtengine::RaceFlagSet::FLAGSET_RALLY ||
            rp.racers_max <= 1 || 
            hasClearTime() ||
            game_mode == gtengine::GameMode::TIME_ATTACK || 
            game_mode == gtengine::GameMode::FREE_RUN || 
            game_mode == gtengine::GameMode::DRIFT_ATTACK || 
            game_mode == gtengine::GameMode::ARCADE_STYLE_RACE || 
            game_mode == gtengine::GameMode::COURSE_EDIT || 
            game_mode == gtengine::GameMode::PRACTICE)
            GT6::Common::DriverOrder.visible = false;
        else
            GT6::Common::DriverOrder.visible = true;

        if (game_mode == gtengine::GameMode::DRIFT_ATTACK && rp.online_on)
            GT6::Common::DriverOrder.visible = true;
    }

    async method initializeCourseMap(context)
    {
        self.crsmap_data = nil;
        var crscode = main::ORG.getCurrentCourseCode();

        if (crscode != nil)
        {
            var crsname = gtengine::MSpecDB::getCourseRow(crscode).ModelName;

            var st = await pdistd::ReadFile("/crs/%{crsname}.map");
            if (st["result"] == pdistd::FileError::OK)
                self.crsmap_data = st["buffer"];
            else
                self.crsmap_data = 0;
        }
        else
            self.crsmap_data = 0;

        var option = GAME_STATUS.user_profile.option;
        var target_list = getTargetList();
        var window_number = 0;

        foreach (var target in target_list)
        {
            target.GT6::Common::MapClip::CourseMapFace.begin(ORG, GT6::Common::MapClip, self.crsmap_data, option.race_map_view_mode, 0, window_number++);
            target.GT6::Common::MapClip::CourseMapFace.map_fovy = 20;
            target.GT6::Common::MapClip::CourseMapFace.map_dolly = 1300;
            target.GT6::Common::MapClip::CourseMapFace.map_depression = 41;
            target.GT6::Common::MapClip::CourseMapFace.marker_scale = 18;
        }
    }

    method initializeRaceDisplay(context)
    {
        var option = GAME_STATUS.user_profile.option;
        var is_replay = gSequenceCondition.is_buffer_replay_mode;
        var is_demo = gSequenceCondition.isDemo();
        var is_autodemo = is_demo && !is_replay;

        var replay_mode = is_autodemo || is_replay;

        var is_spectator = gSequenceCondition.is_spectator_mode && !gSequenceCondition.is_instant_replay;
        var is_bspec = gSequenceCondition.enable_director_command && !is_replay;
        var is_gps_replay = gSequenceCondition.gp.event.game_mode == gtengine::GameMode::GPS_REPLAY;
        
        var tc = GT6::Common::Tire_Condition;
        tc.FL.number.visible = !is_gps_replay;
        tc.FL.Tire_Kind.visible = !is_gps_replay;
        tc.FR.number.visible = !is_gps_replay;
        tc.FR.Tire_Kind.visible = !is_gps_replay;
        tc.RL.number.visible = !is_gps_replay;
        tc.RL.Tire_Kind.visible = !is_gps_replay;
        tc.RR.number.visible = !is_gps_replay;
        tc.RR.Tire_Kind.visible = !is_gps_replay;

        var target_list = getTargetList();
        var window_number = 0;
        var is_bspec0 = ORG.getBackRaceParameter().enable_pilot_commander;

        foreach (var target in target_list)
        {
            target.GT6::Replay_Info.visible = replay_mode || is_spectator;
            target.GT6::Replay_Info::Information::Replay_Name::Icon.visible = replay_mode;
            target.GT6::Replay_Info::Information::Replay_Name::LIVE.visible = is_spectator && !replay_mode;
            target.GT6::Objective_Meter.visible = !is_bspec;
            target.GT6::Subjective_Meter.visible = !is_bspec;
            target.GT6::BSpec_Meter.visible = is_bspec;
            target.GT6::Bspec_Pause.visible = is_bspec;

            var parent = window_number == 0 ? ROOT : DivWork;
            target.RaceDisplayFace.begin(ORG, RaceOperator, parent, window_number++, RaceRoot::Info, is_bspec0);

            target.GT6::Common::DriverOrder::TargetCamera.is_enable = true;
            target.RaceDisplayFace.is_instant_replay = gSequenceCondition.is_instant_replay;

            if (replay_mode)
                target.RaceDisplayFace.dispmode = !gSequenceCondition.is_instant_replay;
            else if (is_spectator)
            {
                target.RaceDisplayFace.dispmode = is_bspec ? 0 : 1;
                if (is_bspec)
                {
                    var target_slot_id = RaceOperator.getPlayerSlot(0);
                    if (target_slot_id >= 0)
                    {
                        var race = ORG.getRace();
                        var driver = race.getDriver(target_slot_id);
                        if (driver != nil)
                        {
                            var dp = driver.getParameter();
                            GT6::BSpec_Meter::Panel::Driver::Avatar.setAvatar(context, dp.head_code, dp.head_color_code, dp.body_code, dp.body_color_code);
                        }
                    }

                    var rp = ORG.getBackRaceParameter();
                    GT6::BSpec_Meter::Panel::Driver::PIT::pit_disable.visible = !rp.enable_pit;
                }
            }
            else
            {
                target.RaceDisplayFace.dispmode = option.racedisplay_view_mode;
            }

            target.RaceDisplayFace.setColorIndex(GAME_STATUS.user_profile.option.ring_color_index,
                                                GAME_STATUS.user_profile.option.meter_color_index,
                                                GAME_STATUS.user_profile.option.dial_color_index);
        }
    }

    method initializeMarkInfo(context)
    {
        for (var i = 0; i < 32; ++i)
        {
            var item = hidden::MarkItem.doCopy();
            item.label.visible = true;
            GT6::Common::MarkName.appendChild(context, item);
        }
    }

    method finalizeMarkInfo(context)
    {
        GT6::Common::MarkName.clearChildren(context);
    }

    method initializeFor2P(context)
    {
        initializeCourseMap(context);
        initializeRaceDisplay(context);

        DivWork.x = 0;
        DivWork.y = 1080 / 2;
        DivWork.visible = true;

        var target_list = [self, DivWork];
        foreach (var w in target_list)
        {
            w.GT6::Common.h = 540;
            w.GT6::Subjective_Meter.h = 540;
            w.GT6::Objective_Meter.h = 540;
            w.GT6::GT6Logo.h = 540;
            w.GT6::Replay_Info.h = 540;

            w.GT6::Common::MapClip.H.restart();
            w.GT6::Common::MapClip.H.warp();

            foreach (var label in ["CurrentTime", "SectionTime", "DiffTime"])
            {
                w.GT6::Common[label].TranslateY.restart();
                w.GT6::Common[label].TranslateY.warp();
            }
        }
    }

    method initializeForSingle(context)
    {
        initializeDriverInfo(context);
        initializeCourseMap(context);
        initializeMarkInfo(context);
        initializeRaceDisplay(context);

        var option = GAME_STATUS.user_profile.option;
        RaceDisplayFace.carmeter_disp = option.carmeter_disp_mode;

        if (gSequenceCondition.is_online && RaceOperator.game_parameter.event.constraint.suggested_gear 
            != gtengine::MGameParameter::INVALID_VALUE_INT)
            RaceDisplayFace.suggested_disp = false;
        else
        {
            RaceDisplayFace.suggested_disp = option.suggested_disp_mode;
        }

        RaceDisplayFace.tireload_disp = option.tireload_disp_mode;
        RaceDisplayFace.time_disp = option.times_disp_mode;
        RaceDisplayFace.racername_disp = option.racername_disp_mode;
        RaceDisplayFace.replayinfo_disp = option.replayinfo_disp_mode;
        RaceDisplayFace.blindside_disp = option.blindside_disp_mode;

        var game_mode = gSequenceCondition.game_mode;
        var online_mode = game_mode == gtengine::GameMode::ONLINE_ROOM ||
                          game_mode == gtengine::GameMode::ONLINE_BATTLE || 
                          game_mode == gtengine::GameMode::SPLIT_ONLINE_BATTLE;
        
        if (online_mode && RaceOperator.isTheater())
            RaceDisplayFace.driver_name_disp = GAME_STATUS.user_profile.option.driver_name_disp_mode;
    }

    method initializeDriverInfo(context)
    {
        var target_list = getTargetList();
        var race = ORG.getRace();

        for (var i = 0; i < 16; ++i)
        {
            var driver_name = "";
            var country_name = "NONE";
            var country_order = "unknown";

            var car = i < race.getEntryMax() ? race.getCar(i) : nil;
            var cp = nil;

            if (car != nil)
            {
                var driver = race.getDriver(i);
                if (driver != nil)
                {
                    var dp = driver.getParameter();
                    var cp = car.getParameter();
                    driver_name = dp.display_name;

                    if (dp.region != "")
                    {
                        country_name = dp.region;
                        country_order = dp.region.downcase();
                    }
                }
            }

            foreach (var target in target_list)
            {
                var item = hidden::DriverOrderItem.doCopy();
                item.Driver::TextFace.text = driver_name;
                item.Driver::TextFaceA.text = driver_name;
                item.y = i * item.h;

                if (cp != nil)
                {
                    item.Driver::National_Flag.image_path = "/piece/flag_ranking/%{country_order}.img";
                    
                    var car_name = gtengine::MSpecDB::getCarShortName(cp.getCarCode());
                    item.Car::TextFace.text = car_name;
                    item.Car::TextFaceA.text = car_name;
                    item.Car::ColorTip::ColorChipFace.setCarParameter(cp);

                    if (RaceOperator.getPlayerSlot() == i)
                    {
                        item.Number.face_color = [0xF2, 0xA7, 0x00, 0xFF]; // RGBA
                        item.Driver.active = true;
                        item.Car.active = true;
                    }
                }
                else
                    item.visible = false;

                if (gSequenceCondition.is_online)
                    item.Car::ColorTip.visible = false;

                target.GT6::Common::DriverOrder::Base.appendChild(context, item);
            }
            
            foreach (var target in target_list)
            {
                var item = hidden::NameItem.doCopy();
                item.label.text = driver_name;
                item.label.visible = true;
                item.flag.image_path = "/image/race_display/flag/%{country_name.upcase()}.dds";

                target.GT6::DriverName.appendChild(context, item);
                item.flag.doInitialize(context);
                item.opacity = 0.0;
                item.visible = false;


            }
        }

        RaceDisplayFace.racer_list_car = GAME_STATUS.user_profile.option.racer_list_car;
    }

    method finalizeDriverInfo(context)
    {
        var target_list = getTargetList();
        foreach (var target in target_list)
        {
            target.GT6::Common::LastLap.clearChildren(context);
            target.GT6::Common::LastScore.clearChildren(context);
            target.GT6::DriverName.clearChildren(context);
            target.GT6::Common::DriverOrder::Base.clearChildren(context);
        }
    }

    method isRemainTime(rp)
    {
        if (rp.race_limit_minute > 0)
            return [true, false, gtengine::EventPhase::Qualifier];

        var game_mode = gSequenceCondition.game_mode;
        if (game_mode != gtengine::GameMode::ONLINE_ROOM && !gSequenceCondition.is_online)
        {
            if (gSequenceCondition.gp.event.play_style.time_limit > 0)
                return [true, false, 0];
            else
                return [false, false, 0];
        }

        return [true, true];
    }

    method initializeByMode(context)
    {
        var drift_section = false;
        var position = false;
        var lap = false;
        var current_time = false;
        var section_time = false;
        var total_time = false;
        var best_time = false;
        var last_time = false;
        var last_score = false;
        var racer = false;
        var course_info = false;
        var time_limit = false;
        var debug_license_submode = false;
        var pylon = false;
        var pylon_num_target = 0;
        var eco_distance = false;
        var eco_time = false;
        var force_invisible_cleartime = false;
        var sector_remain = false;
        var timerally = false;
        var pit_const_disp = false;

        var rp = ORG.getBackRaceParameter();
        var game_mode = gSequenceCondition.game_mode;
        var race_type = ORG.getCurrentRaceParameter().race_type;
        var online_mode = game_mode == gtengine::GameMode::ONLINE_ROOM ||
            game_mode == gtengine::GameMode::ONLINE_BATTLE || 
            game_mode == gtengine::GameMode::SPLIT_ONLINE_BATTLE;

        var online_drift = false;
        if (online_mode)
        {
            var online_drift = race_type == gtengine::RaceType::DRIFTATTACK;
            if (rp.pit_constraint > 0)
                pit_const_disp = true;
        }

        if (game_mode == gtengine::GameMode::DRIFT_ATTACK || 
            game_mode == gtengine::GameMode::ONLINE_DRIFT_ATTACK
            || online_mode && online_drift)
        {
            var endless = rp.endless || online_mode;
            drift_section = true;
            lap = endless;

            if (online_mode && gSequenceCondition.is_spectator_mode)
                last_score = false;
            else
                last_score = endless;

            position = online_mode;
            racer = online_mode;
            course_info = true;
        }
        else if (game_mode == gtengine::GameMode::TUTORIAL)
        {
            lap = true;
        }
        else if (game_mode == gtengine::GameMode::ONLINE_TIME_ATTACK ||
            game_mode == gtengine::GameMode::TIME_ATTACK ||
            game_mode == gtengine::GameMode::PRACTICE)
        {
            lap = game_mode != gtengine::GameMode::PRACTICE;
            current_time = true;
            section_time = true;
            total_time = true;
            best_time = true;
            last_time = true;
            course_info = true;
            time_limit = true;
        }
        else if (game_mode == gtengine::GameMode::SINGLE_RACE ||
            game_mode == gtengine::GameMode::EVENT_RACE)
        {
            position = true;
            lap = true;
            current_time = true;
            section_time = true;
            total_time = true;
            best_time = true;
            last_time = true;
            racer = rp.racers_max > 1;
            course_info = true;
        }
        else if (game_mode == gtengine::GameMode::ONLINE_SINGLE_RACE)
        {
            position = true;
            lap = true;
            current_time = true;
            section_time = true;
            total_time = true;
            best_time = true;
            last_time = true;
            course_info = true;

            var racer = rp.racers_max > 1;

            if (racer)
            {
                var eval_condition = gSequenceCondition.gp.event.eval_condition;
                if (eval_condition.type == main::gtengine::EvalType::ORDER)
                {
                    if (eval_condition.gold == 1 && eval_condition.silver == 2
                        && eval_condition.bronze == 3)
                        force_invisible_cleartime = true;
                    else
                        racer = false;
                }
            }
        }
        else if (game_mode == gtengine::GameMode::MISSION)
        {
            position = true;
            lap = true;
            current_time = true;
            section_time = true;
            total_time = true;
            best_time = true;
            last_time = true;
            course_info = true;
            time_limit = true;
        }
        else if (game_mode == gtengine::GameMode::COFFEE_BREAK)
        {
            debug_license_submode = true;

            switch (gSequenceCondition.event.license_condition.display_mode)
            {
                case gtengine::LicenseDisplayModeType::PYLON_TIME:
                    position = false;
                    lap = false;
                    current_time = true;
                    section_time = false;
                    total_time = true;
                    best_time = true;
                    last_time = true;
                    racer = false;
                    course_info = true;
                    time_limit = true;
                    pylon = true;
                    pylon_num_target = gSequenceCondition.event.license_condition.finish_condition[0].uint_value;
                    break;

                case gtengine::LicenseDisplayModeType::PYLON_NUM:
                    position = false;
                    lap = false;
                    current_time = true;
                    section_time = false;
                    total_time = true;
                    best_time = false;
                    last_time = true;
                    racer = false;
                    course_info = true;
                    time_limit = true;
                    pylon = true;
                    time_limit = true;
                    break;

                case gtengine::LicenseDisplayModeType::FUEL_TIME:
                    position = false;
                    lap = false;
                    current_time = true;
                    section_time = false;
                    total_time = true;
                    best_time = true;
                    last_time = true;
                    racer = false;
                    course_info = true;
                    time_limit = true;
                    eco_time = true;
                    break;

                case gtengine::LicenseDisplayModeType::FUEL_DIST:
                    position = false;
                    lap = false;
                    current_time = true;
                    section_time = false;
                    total_time = true;
                    best_time = false;
                    last_time = true;
                    racer = false;
                    course_info = true;
                    time_limit = true;
                    eco_distance = true;
                    time_limit = true; // PDI pls
                    break;

                case gtengine::LicenseDisplayModeType::DRIFT_SCORE:
                    drift_section = true;
                    position = false;
                    lap = false;
                    current_time = false;
                    section_time = false;
                    total_time = false;
                    best_time = false;
                    last_time = false;
                    racer = false;
                    course_info = true;
                    time_limit = true;
                    eco_distance = false;
                    time_limit = false; // PDI pls
                    break;

                case gtengine::LicenseDisplayModeType::NONE:
                default:
                    position = false;
                    lap = false;
                    current_time = true;
                    section_time = false;
                    total_time = true;
                    best_time = true;
                    last_time = true;
                    racer = false;
                    course_info = true;
                    time_limit = true;
                    break;
            }
        }
        else if (game_mode == gtengine::GameMode::ARCADE_STYLE_RACE)
        {
            position = false;
            lap = false;
            total_time = true;
            best_time = false;
            last_time = true;
            racer = false;
            course_info = true;
            time_limit = true;
            sector_remain = true;
            timerally = true;
        }
        else
        {
            position = true;
            lap = true;
            current_time = true;
            section_time = true;
            total_time = true;
            best_time = true;
            if (online_mode && gSequenceCondition.is_spectator_mode)
                last_time = false;
            else
                last_time = true;

            racer = rp.racers_max > 1;
            course_info = true;
            time_limit = true;
        }

        if (PluginModule.defined("isMoon"))
        {
            if (PluginModule::isMoon)
            {
                position = false;
                lap = false;
            }
        }

        |var remain_time, var qualify_mode| = isRemainTime(rp);
        var target_list = getTargetList();

        foreach (var target0 in target_list)
        {
            var target = target0.GT6::Common;
            target.PositionLapSection::Position.visible = position;
            target.PositionLapSection::Lap.visible = lap;
            target.PositionLapSection::Lap::Numbers::Total_Number.visible = rp.complete_type != gtengine::CompleteType::BYTIME;
            target.PositionLapSection::Section.visible = drift_section && (!lap || sector_remain);
            target.CurrentTime.visible = current_time;
            target.SectionTime.visible = section_time;
            target.TotalTime.visible = total_time;
            target.BestLap.visible = best_time;
            target.LastLap.visible = last_time;
            target.LastScore.visible = last_score;
            target.DriverOrder.visible = racer;

            target0.GT6::DriverName.visible = online_mode || timerally;

            target.Course_Time.visible = course_info;
            target.Course_Water.visible = course_info;
            target.TimeLimit.visible = time_limit;
            target.TotalScore.visible = drift_section;
            target.BestScore.visible = drift_section;
            target.BestScore7.visible = timerally;
            target.DriftScore.visible = drift_section;
            target.DriftScore.ParallelActor.warp();
            target.AICondition.visible = gSequenceCondition.enable_director_command;

            if (!gtengine::isDevelopVersion())
                debug_license_submode = false;
            target.DebugLicenseSubMode.visible = debug_license_submode;

            var online_trial = false;
            if (online_mode)
            {
                var rc = OnlineSession.getRoomConfig();
                online_trial = !rc.hasQualifier() && (race_type == gtengine::RaceType::DRIFTATTACK || race_type == gtengine::RaceType::TIMEATTACK);
            }

            target.Remain_Time.visible = remain_time;
            target.Remain_Time::TextFace.visible = !qualify_mode && !online_trial;
            target.Remain_Time::TextFace_Qualify.visible = qualify_mode && !online_trial;
            target.Remain_Time::TextFace_Trial.visible = online_trial;
            target.Notice.visible = false;
            target.Pylon.visible = pylon;

            if (pylon)
            {
                if (pylon_num_target > 0)
                {
                    target.Pylon.HBox::Denominator.text = "/%d".format(pylon_num_target);
                    target.Pylon.HBox::Denominator.visible = true;
                }
                else
                {
                    target.Pylon.HBox::Denominator.visible = false;
                }
            }

            target.Eco.visible = eco_time || eco_distance;
            target.Eco::Distance.visible = eco_distance;

            if (eco_distance)
                target.Eco::Distance::Unit.text = pdiext::MUnit::GetUnitOfCourseLength();
            
            if (force_invisible_cleartime)
                target.ClearTime.visible = false;

            target.OverallBest.visible = online_mode;
            target.PitConstraint.visible = online_mode && pit_const_disp;
            target.TimeRally.visible = timerally;
            target.TimeRally::Message::ScalarInterpolator.warp();
            target.SectorRemain.visible = sector_remain;

            if (!sector_remain)
            {
                target.SectorRemain::sierra_Map::base.image_path = "";

                for (var i = 0; i < 12; ++i)
                {
                    var w = target.SectorRemain::sierra_Map["sec%02d".format(i + 1)];
                    w.image_path = "";
                }
            }
        }
    }

    method initializeCourseInfo(context)
    {
        var course_info = getCurrentCourseInfo();
        if (course_info == nil)
            return;

        var target_list = getTargetList();
        foreach (var target in target_list)
        {
            target.GT6::Common::Course_Water.visible = course_info.ChangeWeather && course_info.CelsiusBase0 >= 0;
            target.GT6::Common::Course_Time.visible = true;
            target.GT6::Replay_Info::Information::CourseLogo.image_path = "/piece/gt6/course_logo_L/%{course_info.Logo}.img";
        }
    }

    method initializeCar(context, overwrite_slot_id)
    {
        var target_list = getTargetList();

        var player_no = 0;
        foreach (var target in target_list)
        {
            var use_nos = false;
            var target_slot_id = RaceOperator.getPlayerSlot(player_no++);
            if (overwrite_slot_id != nil)
                target_slot_id = overwrite_slot_id;

            var cp = ORG.getEntriedCarParameter(target_slot_id);
            if (cp != nil)
            {
                var nos = SPECDB.query1("SELECT TorqueVolumeMin, TorqueVolumeMax, TorqueVolume FROM NOS WHERE ID = ?", [cp.NOS]);
                if (nos != nil)
                {
                    use_nos = cp.getParts(gtengine::CarPartsType::NOS) == gtengine::PARTS_NOS::ONE;
                }
            }

            target.GT6::Subjective_Meter::Nos_Meter.visible = use_nos;
            target.GT6::Objective_Meter::Right::Nos_Meter.visible = use_nos;
            target.GT6::BSpec_Meter::Panel::Nos_Meter.visible = use_nos;

            var place = target.GT6::Objective_Meter::Right::Tacho_Meter::Tacho_guage_place;
            var y0 = use_nos ? place.y + (place.h / 2) : place.y;
            var h0 = use_nos ? (place.h / 2) : place.h;

            target.GT6::Objective_Meter::Right::Tacho_Meter::Tacho_guage.y = y0;
            target.GT6::Objective_Meter::Right::Tacho_Meter::Tacho_guage.h = h0;

            target.GT6::BSpec_Meter::Panel::Tacho_Meter::Tacho_guage.y = y0;
            target.GT6::BSpec_Meter::Panel::Tacho_Meter::Tacho_guage.h = h0;
        }
    }

    method onInitialize(context)
    {
        DivWork.clearChildren(context);
        
        var window_max = RaceOperator.window_max;
        if (window_max == 2)
        {
            var target_list = [RaceDisplayFace, GT6];
            foreach (var w in target_list)
            {
                var widget = w.doCopy();
                DivWork.appendChild(context, widget);
            }
        }

        Splitter2P.visible = window_max == 2;
        
        initializeDefault(context);
        initializeClearTime(context);
        initializeLastTime(context);
        initializeLastScore(context);
        initializeRacerPane(context);
        initializeCourseInfo(context);
        initializeCar(context);
        initializePenaltyText(context);
        initializeByMode(context);
        initializeBehaviorIf(context);
        initializeMultiMonitor(context);
        
        if (window_max == 2)
            initializeFor2P(context);
        else
            initializeForSingle(context);
        
        if (AppOpt.defined("chromakey"))
            ChromaKey.visible = true;
        
        self.ignore_init_music = false;
        initMusicInformation();
        setMusicInformation(true);
        self.ignore_init_music = true;

        var is_replay = gSequenceCondition.is_buffer_replay_mode;
        var is_autodemo = gSequenceCondition.isDemo() && !is_replay;
        var is_spectator = gSequenceCondition.is_online && gSequenceCondition.is_spectator_mode;
        var is_bspec = gSequenceCondition.enable_director_command;

        var width = (pdiext::MSystemConfiguration::is4x3() && !is_autodemo && !is_replay && !is_spectator && !is_bspec) ? 1440 : 1920;

        var target_list = getTargetList();
        foreach (var target in target_list)
        {
            target.GT6::Common.w = width;
            target.GT6::Subjective_Meter.w = width;
            target.GT6::Objective_Meter.w = width;
            target.GT6::BSpec_Meter.w = width;
            target.GT6::GT6Logo.w = width;
            target.GT6::Replay_Info.w = width;

            if (gSequenceCondition.replay_title != nil)
                target.GT6::Replay_Info::Information::Replay_Name::Name.text = gSequenceCondition.replay_title;
        }

        if (GetVersionBranch() != "demo" && is_replay)
            SoundUtil::BGMRegisterNotifyCallback(setMusicInformation);

        if (gSequenceCondition.game_mode == gtengine::GameMode::ONLINE_ROOM && !RaceOperator.isTheater())
            ORG.setEnableStereoRendering(true);
    }

    method onFinalize(context)
    {
        if (gSequenceCondition.game_mode == gtengine::GameMode::ONLINE_ROOM && !RaceOperator.isTheater())
            ORG.setEnableStereoRendering(false);

        if (GetVersionBranch() != "demo")
            SoundUtil::BGMUnregisterNotifyCallback(setMusicInformation);

        var target_list = getTargetList();
        foreach (var target in target_list)
        {
            target.RaceDisplayFace.end();
            target.GT6::Common::MapClip::CourseMapFace.end();
        }

        finalizeDriverInfo(context);
        finalizeMarkInfo(context);
        self.crsmap_data = nil;
    }

    module GT6::BSpec_Meter::Panel::Driver::Avatar
    {
        method setAvatar(context, head_code, head_color_code, body_code, body_color_code)
        {
            var head_load_complete = method(context) 
            {
                self.Head.on_delay_load_complete = nil;
                if (self.Body.on_delay_load_complete == nil)
                    self.FadeActor.start();
            };

            var body_load_complete = method(context)
            {
                self.Body.on_delay_load_complete = nil;
                if (self.Head.on_delay_load_complete == nil)
                    self.FadeActor.start();
            };

            self.FadeActor.reset();

            self.Head.on_delay_load_complete = self.*head_load_complete;
            self.Body.on_delay_load_complete = self.*body_load_complete;

            self.Head.image_path = ThumbnailUtil::Avatar::getImagePathGT6(
                ThumbnailUtil::Avatar::Genre::COMBO,
                ThumbnailUtil::Avatar::Type::MET,
                head_code, head_color_code, nil, nil);

            self.Body.image_path = ThumbnailUtil::Avatar::getImagePathGT6(
                ThumbnailUtil::Avatar::Genre::COMBO,
                ThumbnailUtil::Avatar::Type::SUITS,
                nil, nil, body_code, body_color_code);
        }
    }
}