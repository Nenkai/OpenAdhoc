










module RaceEventUtil
{
    class Data
    {
        method __init__(l, va, i, vi = false, rs = false, rv = false)
        {
            self.label = l;
            self.value = va;
            self.image_path = i;
            self.violation = vi;
            self.reward_status = rs;
            self.rewardcheck_visible = rv;

            self.paint_id = nil;
            self.car_label = nil;
        }

        attribute label;
        attribute value;
        attribute image_path;
        attribute violation;
        attribute reward_status;
        attribute rewardcheck_visible;
        attribute paint_id;
        attribute car_label;
    }

    function getFolderTitleText(event_folder)
    {
        var title = event_folder["title"];
        if (title == nil)
            return "";

        var lang = main::pdistd::MLocale::getLanguage();
        return title[lang];
    }

    function getFolderCopyText(event_folder)
    {
        var copy = event_folder["copy"];
        if (copy == nil)
            return "";

        var lang = main::pdistd::MLocale::getLanguage();
        return copy[lang];
    }

    function getFolderDescriptionText(event_folder)
    {
        var description = event_folder["description"];
        if (description == nil)
            return "";

        var lang = main::pdistd::MLocale::getLanguage();
        return description[lang];
    }

    function decode(s)
    {
        s = s.replaceAll("&amp;", "&");
        return s.replaceAll("\xC2\xA0", " ");
    }

    function getTitleText(event)
    {
        var text = event.information.title.getText();
        return decode(text);
    }

    function getDescriptionText(event)
    {
        var text = event.information.description.getText();
        return decode(text);
    }

    function getOneLineTitleText(event)
    {
        var text = event.information.one_line_title.getText();
        return decode(text);
    }

    function getRegistrationNoticeText(event)
    {
        var text = event.information.registration_notice.getText();
        return decode(text);
    }

    function getAdvancedNoticeText(event)
    {
        var text = event.information.advanced_notice.getText();
        return decode(text);
    }

    function getGameModeText(context, event)
    {
        var text = "";
        
        switch (event.game_mode)
        {
            case gtengine::GameMode::TIME_ATTACK:
            case gtengine::GameMode::ONLINE_TIME_ATTACK:
                text = manager.translate("GameModeName", "TIME_ATTACK");
                break;

            case gtengine::GameMode::EVENT_RACE:
                text = manager.translate("GameModeName", "EVENT_RACE");
                break;

            case gtengine::GameMode::LICENSE:
                text = manager.translate("GameModeName", "LICENSE");
                break;
    
            case gtengine::GameMode::MISSION:
                text = manager.translate("GameModeName", "MISSION");
                break;

            case gtengine::GameMode::COFFEE_BREAK:
                text = manager.translate("GameModeName", "COFFEE_BREAK");
                break;

            case gtengine::GameMode::ONLINE_DRIFT_ATTACK:
                text = manager.translate("GameModeName", "DRIFT_ATTACK");
                break;

            case gtengine::GameMode::ONLINE_SINGLE_RACE:
                text = manager.translate("GameModeName", "SINGLE_RACE");
                break;
        }

        return text;
    }

    function getCompleteTypeText(context, event, is_oneway)
    {
        var text = "";
        var rp = event.race_parameter;

        switch (rp.complete_type)
        {
            case gtengine::CompleteType::BYTIME:
                text = UnitUtil::getTimeStr(context, rp.race_limit_minute);
                break;

            case gtengine::CompleteType::BYLAPS: 
                if (is_oneway == nil)
                    is_oneway = !main::SPECDB.executeQuery1R1C("SELECT Loop FROM COURSE WHERE ID=?", [event.track.course_code]).toBool();
                
                if (is_oneway)
                {
                    return manager.translate("RaceEvent", "SECTION");
                }
                else
                {
                    var laps = rp.race_limit_laps;
                    text = laps + UnitUtil::getLapStrJP(context, laps);
                }
                break;

            case gtengine::CompleteType::BYSECTION:
            case gtengine::CompleteType::BYSTOP:
                text = manager.translate("RaceEvent", "SECTION");
                break;
        }

        return text;
    }

    function getPresentInfo(present)
    {
        var item_name = "";
        var paint_id = nil;
        var car_label = nil;

        if (present.itemcategory == 901 || present.itemcategory == 902)
        {
            car_label = present.f_name;
            item_name = gtengine::MSpecDB::getCarShortName(car_label);

            if (present.itemcategory == 902)
                item_name += " " + manager.translate("CommonGTMode", "INSTALL_PARTS_C");
        }
        else if (present.itemcategory == 601)
        {
            paint_id = present.argument1;
            var info = SPECDB.query1("SELECT Type, LabelJpn, LabelEng FROM PAINT_COLOR_INFO WHERE ID=?", [paint_id]);

            if (info != nil)
            {
                if (main::pdistd::MLocale::getLanguage() == "JP")
                    item_name = info.LabelJpn.trim();
                else
                    item_name = info.LabelEng.trim();
            }
        }
        else if (present.itemcategory == 301 || present.itemcategory == 302 || present.itemcategory == 303)
        {
            var map = [301 : ["MET", "met"],
                       302 : ["SUIT", "suit"],
                       303 : ["SET", "met"]];
            
            var code = present.argument4;
            var data = map[present.itemcategory];

            item_name = "%s %s".format(
                manager.translate("GTAuto", "Type_AVATAR_%s".format(data[0])),
                manager.translate("RacingGear", "%s_%02d".format(data[1], code))
            );
        }

        return [item_name, paint_id, car_label];
    }

    function checkViolationInvalidValue(should_be, key)
    {
        if (should_be == nil)
        return false;

        var value = should_be.getObjectAttribute(key);
        return value != gtengine::MGameParameter::INVALID_VALUE_INT;
    }

    function checkViolationSize(should_be, key)
    {
        if (should_be == nil)
            return false;

        var value = should_be.getObjectAttribute(key);
        return value.size > 0;
    }

    function checkViolationNil(should_be, key)
    {
        if (should_be == nil)
            return false;

        var value = should_be.getObjectAttribute(key);
        return value != nil;
    }

    function getRegulationCarCategories(name, needs, label, should_be)
    {
        var result = [];
        var violation = checkViolationSize(should_be, name);

        var label0 = label;

        foreach (var category in needs)
        {
            var res = gtengine::CarCategory.find_static(function(pair) { return pair[1] == category; });
            if (res.size > 0)
            {
                var name = res[0][0];
                result.push(Data(label0, manager.translate("Regulation", "CATEGORY_%{name}"), nil, violation));
                label0 = "";
            }
        }

        return result;
    }

    function getRegulationCars(name, needs, label, should_be)
    {
        var result = [];
        var violation = checkViolationSize(should_be, name);

        var label0 = label;

        for (var i = 0; i < needs.size; ++i)
        {
            var car = needs[i];
            var car_name = gtengine::MSpecDB::getCarShortName(car.label);
            result.push(Data(label0, car_name, nil, violation));
            label0 = "";
        }

        return result;
    }

    function getRegulationTuners(name, needs, label, should_be)
    {
        var result = [];
        var violation = checkViolationSize(should_be, name);

        var label0 = label;

        foreach (var tuner in needs)
        {
            var name = gtengine::MSpecDB::getTunerString(tuner);
            result.push(Data(label0, manager.translate("TunerName", name), nil, violation));
            label0 = "";
        }

        return result;
    }

    function getRegulationCountries(name, needs, label, should_be)
    {
        var result = [];
        var violation = checkViolationSize(should_be, name);

        var label0 = label;

        foreach (var country in needs)
        {
            var name = gtengine::MSpecDB::getCountryString(country);
            result.push(Data(label0, manager.translate("Country", name), nil, violation));
            label0 = "";
        }

        return result;
    }

    function getRegulationEntitlement(name, need, label, should_be)
    {
        var violation = checkViolationNil(should_be, name);
        return [Data(label, manager.translate("Regulation", "entitlement_%{need}"), nil, violation)];
    }

    function getRegulationLicense(name, need, label, should_be)
    {
        var value = "-";
        var table = [
            "NAME_LICENSE_B_CLEAR",
            "NAME_LICENSE_A_CLEAR",
            "NAME_LICENSE_IC_CLEAR",
            "NAME_LICENSE_IB_CLEAR",
            "NAME_LICENSE_IA_CLEAR",
            "NAME_LICENSE_S_CLEAR",
        ];

        var index = need.toInt();

        if (index < table.size)
            value = manager.translate("Trophy", table[index]);

        var violation = checkViolationInvalidValue(should_be, "need_%{name}");
        return [Data(label, value, nil, violation)];
    }

    function getRegulationDrivetrain(name, needs, label, should_be)
    {
        var result = [];
        var violation = checkViolationInvalidValue(should_be, "need_%{name}");
        var label0 = label;

        foreach (var drive_train in needs)
        {
            var res = gtengine::DriveTrainType.find_static(function(pair) { return pair[1] == drive_train; });
            if (res.size > 0)
            {
                var name = res[0][0];
                result.push(Data(label0, manager.translate("DriveTrainName", name), nil, violation));
                label0 = "";
            }
        }

        return result;
    }

    function getRegulationAspiration(name, needs, label, should_be)
    {
        var result = [];
        var violation = checkViolationInvalidValue(should_be, "need_%{name}");
        var label0 = label;

        foreach (var aspiration in needs)
        {
            var res = gtengine::AspirationType.find_static(function(pair) { return pair[1] == aspiration; });
            if (res.size > 0)
            {
                var name = res[0][0];
                result.push(Data(label0, manager.translate("AspirationName", "Label_%{name}"), nil, violation));
                label0 = "";
            }
        }

        return result;
    }

    function getRegulationTuning(name, need, label, should_be)
    {
        var violation = checkViolationInvalidValue(should_be, name);

        if (need == 1)
            return [Data(label, manager.translate("Regulation", "ONLY"), nil, violation)];
        else
            return [Data(label, manager.translate("Regulation", "PROHIBITED"), nil, violation)];
    }

    function getRegulationNOS(name, need, label, should_be)
    {
        var violation = checkViolationInvalidValue(should_be, name);
        var text = "";

        if (need == 0)
            text = manager.translate("Regulation", "NOT_EQUIPPED");
        else if (need == 1)
            text = manager.translate("Regulation", "EQUIPPED");

        return [Data(label, text, nil, violation)];
    }

    function getRegulationKart(name, need, label, should_be)
    {
        var violation = checkViolationInvalidValue(should_be, name);
        var text = "";

        if (violation && need != 1)
        {
            text = manager.translate("Regulation", "PROHIBITED");
            return [Data(label, text, nil, violation)];
        }
        else
            return [Data("", "", nil, false)];
    }

    module ConvertFunction
    {
        function pp(value)
        {
            return value;
        }

        function tire(value)
        {
            return manager.translate("TireName", "name_%03d".format(value));
        }

        function tire_f(value)
        {
            return tire(value);
        }

        function tire_r(value)
        {
            return tire(value);
        }

        function power(value)
        {
            return pdiext::MUnit::GetPowerForDisplay(value) + " " + pdiext::MUnit::GetUnitOfPower();
        }

        function torque(value)
        {
            return pdiext::MUnit::GetTorqueForDisplay(value) + " " + pdiext::MUnit::GetUnitOfTorque();
        }

        function weight(value)
        {
            return "%{value} " + pdiext::MUnit::GetUnitOfMass();
        }

        function length(value)
        {
            return "%{value} %s".format(pdiext::MUnit::GetUnitOfLength());
        }

        function year(value)
        {
            var language = pdistd::MLocale::getLanguage();
            if (language == "JP" || language == "TW" || language == "KR")
                return "%{value} " + manager.translate("Unit", "YEAR");
            else
                return "%{value}";
        }
    }

    function getRegulationDefault(name, need, limit, label, should_be)
    {
        var result = [];
        var func = ConvertFunction[name];

        var need_value = func != nil ? func(need) : need;
        var limit_value = func != nil ? func(limit) : limit;
        
        if (need == limit)
        {
            var key = name == "tire_f" ? "limit" : "need";
            var violation = checkViolationInvalidValue(should_be, "%{key}_%{name}");
            result.push([need_value, violation]);
        }
        else 
        {
            var need_key = name == "year" ? "need_year" : "need";
            var limit_key = name == "year" ? "limit_year" : "limit";

            if (need != gtengine::MGameParameter::INVALID_VALUE_INT)
            {
                var text = manager.translate("Regulation", need_key).build(need_value);
                var violation = checkViolationInvalidValue(should_be, "need_%{name}");
                result.push([text, violation]);
            }

            if (limit != gtengine::MGameParameter::INVALID_VALUE_INT)
            {
                if (name == "restrictor_limit")
                    limit_value = manager.translate("Unit", "PERCENT").build(pdiext::GetNumberString(limit_value, 1));

                var text = manager.translate("Regulation", limit_key).build(limit_value);
                var violation = checkViolationInvalidValue(should_be, "limit_%{name}");
                result.push([text, violation]);
            }

            if (result.size == 1)
                return [Data(label, result[0][0], nil, result[0][1])];
            else
            {
                var list = [];
                var label0 = label;
                foreach (|var text, var violation| in result)
                {
                    list.push(Data(label0, text, nil, violation));
                    label0 = "";
                }

                return list;
            }
        }
    }

    function getRegulation(event, should_be)
    {
        var result = [];
        if (isRentACarEvent(event))
            return result;

        var info = event.regulation.createInfo();
        var tire_fr_same = false;
        var koumoku_tire_f = nil;
        var koumoku_tire_r = nil;

        foreach (var koumoku in info)
        {
            if (koumoku[0] == "tire_f")
            {
                koumoku_tire_f = koumoku;
                continue;
            }

            if (koumoku[0] == "tire_r")
            {
                koumoku_tire_r = koumoku;
                continue;
            }
        }

        if (koumoku_tire_f != nil && koumoku_tire_r != nil && 
                koumoku_tire_f[1] == koumoku_tire_r[1] && 
                koumoku_tire_f[2] == koumoku_tire_r[2])
            tire_fr_same = true;

        foreach (var koumoku in info)
        {
            var name = koumoku.shift();
            if (name == "tire_f" && tire_fr_same)
                name = "tire";

            if (name == "tire_r" && tire_fr_same)
                continue;

            var label = manager.translate("Regulation", name);
            if (name == "tire")
                name = "tire_f";

            var values = [];

            switch (name)
            {
                case "car_categories":
                    values = getRegulationCarCategories(name, koumoku, label, should_be);
                    break;
                case "cars":
                case "ban_cars":
                    values = getRegulationCars(name, koumoku, label, should_be);
                    break;
                case "tuners":
                    values = getRegulationTuners(name, koumoku, label, should_be);
                    break;
                case "countries":
                    values = getRegulationCountries(name, koumoku, label, should_be);
                    break;
                case "license":
                    values = getRegulationLicense(name, koumoku[0], label, should_be);
                    break;
                case "entitlement":
                    values = getRegulationEntitlement(name, koumoku[0], label, should_be);
                    break;
                case "drivetrain":
                    values = getRegulationDrivetrain(name, koumoku, label, should_be);
                    break;
                case "aspiration":
                    values = getRegulationAspiration(name, koumoku, label, should_be);
                    break;
                case "tuning":
                    values = getRegulationTuning(name, koumoku[0], label, should_be);
                    break;
                case "NOS":
                    values = getRegulationNOS(name, koumoku[0], label, should_be);
                    break;
                case "kart_permitted":
                    values = getRegulationKart(name, koumoku[0], label, should_be);
                    break;
                default:
                    values = getRegulationDefault(name, koumoku[0], koumoku[1], label, should_be);
                    break;
            }

            if (name == "pp" && values[0].violation)
                TutorialUtil::begin("gttop", "pp_over");
            
            result.append(values);
        }

        return result;
    }

    function getOrdinalNoPrefix(number)
    {
        var ordinal = "";
        switch (number)
        {
            case 1:
                ordinal = "NOPREFIX_ORDINAL_ST";
                break;
            case 2:
                ordinal = "NOPREFIX_ORDINAL_ND";
                break;
            case 3:
                ordinal = "NOPREFIX_ORDINAL_RD";
                break;
            
            default:
                ordinal = "NOPREFIX_ORDINAL_TH";
                break;
        }

        return manager.translate("Number", ordinal).build("");
    }

    function getOrdinal(number, with_number)
    {
        var ordinal = "";
        switch (number)
        {
            case 1:
                ordinal = "ordinal_st";
                break;
            case 2:
                ordinal = "ordinal_nd";
                break;
            case 3:
                ordinal = "ordinal_rd";
                break;
            
            default:
                ordinal = "ordinal_th";
                break;
        }

        var value = with_number ? number : "";
        return manager.translate("Number", ordinal).build(value);
    }

    function getPrizeImagePath(order)
    {
        if (order > 3)
            return nil;

        var rank = ["gold", "silver", "bronze"][order - 1];
        var image_path = "/image/gt5/icon/trophy_%{rank}.dds";
        return image_path;
    }

    function getPrize(event)
    {
        var result = [];
        if (event.game_mode == gtengine::GameMode::ONLINE_BATTLE)
            return result;

        var prize_table = event.reward.prize_table;

        for (var i = 0; i < prize_table.size && i < 3; ++i)
        {
            var prize = prize_table[i];
            if (prize == 0)
                continue;

            var image_path = getPrizeImagePath(i + 1);
            var cr = manager.translate("Unit", "CREDIT");

            var rank = ["THE_GOLD", "THE_SILVER", "THE_BRONZE"][i];

            var rewardcheck_visible = false;
            var reward_status = false;

            if (event.reward.prize_type)
            {
                rewardcheck_visible = true;
                var event_result = GAME_STATUS.user_profile.record.event_record.getEventResult(event.event_id);
                if (event_result != -1 && event_result <= i)
                    reward_status = true;

                var entry = Data(manager.translate("RaceEvent", rank), cr + pdiext::GetMoneyString(prize), image_path, false, reward_status, rewardcheck_visible);
                result.push(entry);
            }
        }

        return result;
    }

    function getPresent(event)
    {
        var result = [];
        var present_list = event.reward.present;

        for (var i = 0; i < present_list.size && i < 3; ++i)
        {
            var present = present_list[i];
            |var item_name, var paint_id, var car_label| = getPresentInfo(present);
            if (item_name == "")
                continue;

            var image_path = getPrizeImagePath(i + 1);
            var rank = ["THE_GOLD", "THE_SILVER", "THE_BRONZE"][i];
            var rewardcheck_visible = false;
            var reward_status = false;

            if (event.reward.is_once)
            {
                rewardcheck_visible = true;
                var event_result = GAME_STATUS.user_profile.record.event_record.getEventResult(event.event_id);
                if (event_result != -1 && event_result <= i)
                    reward_status = true;

                if (present.itemcategory == 601)
                {
                    var paint_id = present.argument1;
                    reward_status = GAME_STATUS.user_profile.item.paint.hasItem(paint_id);
                }

                if (present.itemcategory == 301 || present.itemcategory == 302 || present.itemcategory == 303)
                {
                    var color = present.argument1;
                    var code = present.argument4;

                    var type;
                    if (present.itemcategory == 301)
                        type = "AVATAR_MET";
                    else if (present.itemcategory == 302)
                        type = "AVATAR_SUIT";
                    else if (present.itemcategory == 303)
                        type = "AVATAR_SET";

                    reward_status = GAME_STATUS.user_profile.item.racing_gear.hasItem2(type, code, color);
                }
            }

            var entry = Data(manager.translate("RaceEvent", rank), item_name, image_path, false, reward_status, rewardcheck_visible);
            entry.paint_id = paint_id;
            entry.car_label = car_label;
            result.push(entry);
        }

        return result;
        /*
        if (present.itemcategory == 901 || present.itemcategory == 902)
        {
            car_label = present.f_name;
            item_name = gtengine::MSpecDB::getCarShortName(car_label);

            if (present.itemcategory == 902)
                item_name += " " + manager.translate("CommonGTMode", "INSTALL_PARTS_C");
        }
        else if (present.itemcategory == 601)
        {
            paint_id = present.argument1;
            var info = SPECDB.query1("SELECT Type, LabelJpn, LabelEng FROM PAINT_COLOR_INFO WHERE ID=?", [paint_id]);

            if (info != nil)
            {
                if (main::pdistd::MLocale::getLanguage() == "JP")
                    item_name = info.LabelJpn.trim();
                else
                    item_name = info.LabelEng.trim();
            }
        }
        else if (present.itemcategory == 301 || present.itemcategory == 302 || present.itemcategory == 303)
        {
            var map = [301 : ["MET", "met"],
                       302 : ["SUIT", "suit"],
                       303 : ["SET", "met"]];
            
            var code = present.argument4;
            var data = map[present.itemcategory];

            item_name = "%s %s".format(
                manager.translate("GTAuto", "Type_AVATAR_%S".format(data[0])),
                manager.translate("RacingGear", "%s_%02d".format(data[1], code))
            );
        }

        return [item_name, paint_id, car_label];
        */
    }

    function getEntryPresent(event)
    {
        var result = [];
        var present_list = event.reward.entry_present;

        var _event_id = getEventIDForEntryPresent(event.event_id);

        for (var i = 0; i < present_list.size && i < 3; ++i)
        {
            var present = present_list[i];
            |var item_name, var paint_id, var car_label| = getPresentInfo(present);

            if (item_name == "")
                continue;

            var rewardcheck_visible = true;
            var reward_status = false;
            if (GAME_STATUS.user_profile.record.event_present.checkEventPresent(_event_id, i) != nil)
                reward_status = true;

            var entry = Data("", item_name, "", false, reward_status, rewardcheck_visible);
            entry.paint_id = paint_id;
            entry.car_label = car_label;
            result.push(entry);
        }

        return result;
    }

    function getEnemyCar(event)
    {
        var result = [];
        var entry_base_array = event.entry_set.entry_generate.entry_base_array;

        for (var i = 0; i < entry_base_array.size && i < 3; ++i)
        {
            var entry_base = entry_base_array[i];
            var car_thin = entry_base.car;

            var enemy_car = Data(
                gtengine::MSpecDB::getCarShortName(car_thin.code),
                manager.translate("TunerName", gtengine::MSpecDB::getTunerLabel(car_thin.code)),
            );

            result.push(enemy_car);
        }

        return result;
    }

    function getEvalCondition(event)
    {
        if (!event.license_condition.isDefault())
            return [];

        var eval_condition = event.eval_condition;
        if (eval_condition.type != gtengine::EvalType::TIME)
            return [];

        var gold = Data(
            manager.translate("RaceEvent", "THE_GOLD"), 
            pdiext::GetRaceTimeString(eval_condition.gold),
            getPrizeImagePath(1)
        );

        var silver = Data(
            manager.translate("RaceEvent", "THE_SILVER"), 
            pdiext::GetRaceTimeString(eval_condition.silver),
            getPrizeImagePath(2)
        );

        var bronze = Data(
            manager.translate("RaceEvent", "THE_BRONZE"), 
            pdiext::GetRaceTimeString(eval_condition.bronze),
            getPrizeImagePath(3)
        );

        return [gold, silver, bronze];
    }

    function getEvalConditionScore(event)
    {
        if (!event.license_condition.isDefault())
            return [];

        var eval_condition = event.eval_condition;
        if (eval_condition.type != gtengine::EvalType::DRIFT)
            return [];

        var gold = Data(
            manager.translate("RaceEvent", "THE_GOLD"), 
            pdiext::GetNumberString(eval_condition.gold),
            getPrizeImagePath(1)
        );

        var silver = Data(
            manager.translate("RaceEvent", "THE_SILVER"), 
            pdiext::GetNumberString(eval_condition.silver),
            getPrizeImagePath(2)
        );

        var bronze = Data(
            manager.translate("RaceEvent", "THE_BRONZE"), 
            pdiext::GetNumberString(eval_condition.bronze),
            getPrizeImagePath(3)
        );

        return [gold, silver, bronze];
    }

    function getEvalLicenseCondition(event)
    {
        if (event.license_condition.isDefault())
            return [];

        var target_text = "";

        switch (event.license_condition.display_mode)
        {
            case gtengine::LicenseDisplayModeType::PYLON_NUM:
                target_text = "EVAL_CONDITION_NUM";
                break;

            case gtengine::LicenseDisplayModeType::DRIFT_SCORE:
                target_text = "EVAL_CONDITION_SCORE";
                break;

            case gtengine::LicenseDisplayModeType::FUEL_DIST:
                target_text = "EVAL_CONDITION_DISTANCE";
                break;

            case gtengine::LicenseDisplayModeType::FUEL_TIME:
                target_text = "EVAL_CONDITION_TIME";
                break;

            case gtengine::LicenseDisplayModeType::PYLON_TIME:
                target_text = "EVAL_CONDITION_TARGET";
                break;
        }

        var label_list = ["THE_GOLD", "THE_SILVER", "THE_BRONZE"];
        var target_list = [target_text];

        var success_condition = event.license_condition.success_condition;
        
        for (var i = 0; i < success_condition.size && i < 3; ++i)
        {
            var condition = success_condition[i];
            var target = "";

            switch (event.license_condition.display_mode)
            {
                case gtengine::LicenseDisplayModeType::PYLON_NUM:
                case gtengine::LicenseDisplayModeType::DRIFT_SCORE:
                    target = pdiext::GetNumberString(condition.uint_value);
                    break;

                case gtengine::LicenseDisplayModeType::FUEL_DIST:
                    target = "%s %s".format(pdiext::MUnit::GetCourseLengthString(condition.float_value), 
                    pdiext::MUnit::GetUnitOfCourseLength());
                    break;

                default:
                    target = pdiext::GetRaceTimeString(condition.uint_value);
                    break;
            }

            var data = Data(
                manager.translate("RaceEvent", label_list[i]), 
                target,
                getPrizeImagePath(i + 1),
            );

            target_list.push(data);
    
        }

        return target_list;
    }

    function getClearCondition(event)
    {
        var eval_condition = event.eval_condition;
        if (eval_condition.type == gtengine::EvalType::TIME)
            return [Data(manager.translate("RaceEvent", "CLEAR_CONDITION_BRONZE"), "")];
        else
            return [Data(manager.translate("RaceEvent", "CLEAR_CONDITION_3RD"), "")];
    }

    function getClearLengthString(score)
    {
        var score0 = pdiext::MUnit::GetCourseLengthString(score);
        return [score0, pdiext::MUnit::GetUnitOfCourseLength()];
    }

    function getLicenseConditionScoreText(event, score, initial_text)
    {
        var license_condition = event.license_condition;
        var finish_condition = license_condition.finish_condition[0];
        var display_mode = license_condition.display_mode;

        var text = initial_text;
        var unit = "";

        switch (display_mode)
        {
            case gtengine::LicenseDisplayModeType::PYLON_NUM:
            case gtengine::LicenseDisplayModeType::DRIFT_SCORE:
                if (score != -1)
                {
                    text = pdiext::GetNumberString(score);
                }
                break;

            case gtengine::LicenseDisplayModeType::FUEL_DIST:
                if (score != -1)
                    |text, unit| = getClearLengthString(score);
                break;

            default:
                text = pdiext::GetRaceTimeString(score);
                break;
        }

        return [text, unit];
    }

    function dateTime(d)
    {
        var format = manager.translate("DateTime", "FORMAT_DATE_TIME");
        var t0 = pdistd::MTime();
        t0.setBySecond(d);

        var t = t0.toLocal();
        return format.build(
            "%4d".format(t.year),
            "%02d".format(t.month),
            "%02d".format(t.day),
            "%02d".format(t.hour),
            "%02d".format(t.minute),
        );
    }

    function getPeriod(event)
    {
        var eval_condition = event.eval_condition;
        if (!event.is_seasonal_event)
            return [];
        return getBeginEnd(event.begin_date, event.end_date);
    }

    function getRankingPeriod(event)
    {
        var eval_condition = event.eval_condition;
        if (!event.is_seasonal_event)
            return [];

        if (event.game_mode == gtengine::GameMode::ONLINE_SINGLE_RACE ||
            event.game_mode == gtengine::GameMode::ONLINE_BATTLE)
            return [];
        
        return getBeginEnd(event.ranking.begin_date, event.ranking.end_date);
    }

    function getBeginEnd(begin_date, end_date)
    {
        var begin = dateTime(begin_date);
        var end = dateTime(end_date);

        var event_finish = false;
        var text = "";
        var now = pdiext::getBetterTimeLocal();

        var e = pdistd::MTime();
        e.setBySecond(end_date);
        e = e.toLocal();
        
        if (e.getBySecond() < now.getBySecond())
        {
            event_finish = true;
            text = manager.translate("RaceEvent", "EVENT_CLOSE");
        }
        else
        {
            text = manager.translate("RaceEvent", "EVENT_OPEN");
        }

        return [Data("%{begin} - %{end}", text, nil, event_finish)];
    }

    function getResult(event_id)
    {
        return GAME_STATUS.user_profile.record.event_record.getEventResult(event_id);
    }

    function getBestRecord(event_id)
    {
        return GAME_STATUS.user_profile.record.event_record.getBestRecord(event_id);
    }

    function isRentACarEvent(event, ref_car_label, ref_car_color)
    {
        var rent_a_car = false;

        var n = event.entry_set.entries.size;
    
        for (var i = 0; i < n; i++)
        {
            var entry = event.entry_set.entries[i];
            if (entry.player_no == 0)
            {
                if (!entry.car_parameter.isVacant())
                {
                    rent_a_car = true;
                    if (ref_car_label != nil)
                        *ref_car_label = entry.car_parameter.getCarLabel();
                    
                    if (ref_car_color != nil)
                        *ref_car_color = entry.car_parameter.color;
                }
                else if (entry.car != nil && entry.car.code != gtengine::MSpecDB::NO_CODE)
                {
                    rent_a_car = true;
                    if (ref_car_label != nil)
                        *ref_car_label = entry.car.label;
                        
                    if (ref_car_color != nil)
                        *ref_car_color = entry.car.color;
                }
                else if (entry.entry_base.car != nil && entry.entry_base.car.code != gtengine::MSpecDB::NO_CODE)
                {
                    rent_a_car = true;
                    if (ref_car_label != nil)
                        *ref_car_label = entry.entry_base.car.label;
                        
                    if (ref_car_color != nil)
                        *ref_car_color = entry.entry_base.car.color;
                }

                break;
            }
        }

        var n = event.constraint.cars.size;
        for (var i = 0; i < n; i++)
        {
            var car = event.constraint.cars[i];
            if (car.code != gtengine::MSpecDB::NO_CODE)
            {
                rent_a_car = true;
                if (ref_car_label != nil)
                    *ref_car_label = car.label;

                if (ref_car_color != nil)
                    *ref_car_color = car.color;
            }
        }

        return rent_a_car;
    }

    function getRentalCarList(event)
    {
        var carList = [];
        
        var entry_set = event.entry_set;
        var n = entry_set.entries.size;
        for (var i = 0; i < n; ++i)
        {
            var entry = entry_set.entries[i];
            var entry_base = entry.entry_base;
            if (entry_base.car != nil)
            {
                var car = entry_base.car;
                if (car.code != gtengine::MSpecDB::NO_CODE)
                    carList.push(car);
            }
        }

        return carList;
    }

    function getRentalCarCPList(event)
    {
        var cp_list = [];
        
        var entry_set = event.entry_set;
        var n = entry_set.entries.size;
        for (var i = 0; i < n; ++i)
        {
            var entry = entry_set.entries[i];
            var entry_base = entry.entry_base;
            if (entry_base.car != nil)
            {
                var cp = LaunchRaceUtil::makeCarParameterFromEntryBase(entry.entry_base);
                cp_list.push(cp);
            }
        }

        return cp_list;
    }

    function checkRegulation(gp, text)
    {
        var event = gp.events[gp.event_index];
        if (isRentACarEvent(event))
            return true;

        var riding_car = GAME_STATUS.user_profile.garage.getRidingCar();
        if (riding_car == nil)
        {
            *text = manager.translate("CommonGTMode", "Message_PleaseSelectCar");
            return false;
        }

        var regulation = event.regulation;
        |var qualified, var should_be, var current| = regulation.checkIfQualifiedCar(riding_car, false);
        if (!qualified)
            *text = manager.translate("QuickMenu", "REGULATION_DISQUALIFIED");

        return qualified;
    }

    function checkEventBeforeOpen(context, event, verbose = false)
    {
        if (PROJECT::IsDevelop(context))
        {
            var state = context.getUpdateContext().getPadButtonState(0);
            if (state & 0x800)
                return false;
        }

        var now = pdiext::getBetterTimeLocal();
        var begin = pdistd::MTime();
        begin.setBySecond(event.begin_date);
        begin = begin.toLocal();

        if (now.getBySecond() < begin.getBySecond())
        {
            if (verbose)
                ;

            return true;
        }
        else
            return false;
    }

    function checkEventOpen(context, event, verbose = false)
    {
        var now = pdiext::getBetterTimeLocal();
        var begin = pdistd::MTime();
        begin.setBySecond(event.begin_date);
        begin = begin.toLocal();

        var end = pdistd::MTime();
        end.setBySecond(event.end_date);
        end = end.toLocal();

        if (now.getBySecond() < begin.getBySecond())
        {
            if (verbose)
                ;

            return false;
        }
        else if (end.getBySecond() < now.getBySecond())
        {
            if (verbose)
            {
                var format = manager.translate("Network", "RANKING_EVENT_WAS_END");
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                    format.build(pdiext::GetDateTimeStringShort(end.getBySecond())));
            }

            return false;
        }
        else
            return true;
    }

    function checkEventClosed(context, event, verbose = false)
    {
        var now = pdiext::getBetterTimeLocal();
        var end = pdistd::MTime();
        end.setBySecond(event.end_date);
        end = end.toLocal();

        if (end.getBySecond() < now.getBySecond())
        {
            if (verbose)
            {
                var format = manager.translate("Network", "RANKING_EVENT_WAS_END");
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                    format.build(pdiext::GetDateTimeStringShort(end.getBySecond())));
            }

            return true;
        }
        else
            return false;
    }

    function getEventIDForEntryPresent(event_id)
    {
        return 90000000 + event_id;
    }
}