//---------------------------------------------------------------------------------------
// LicenseDetailPopupImpl.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module LicenseDetailPopup
{
    DetailProject.load("/scripts/gt5m/util/LicenseUtil");

    attribute data = nil;
    attribute reverse = nil;
    attribute caller_root = nil;
    attribute race_difficulty = nil;
    attribute dirt_tire_limited = nil;
    attribute snow_tire_limited = nil;

    class Data
    {
        attribute cp = nil;
        attribute dp = nil;
        attribute course_label = nil;
        attribute driving_line = nil;
        attribute constraint = nil;
        attribute ai_skill = nil;
        attribute license_title = nil;
        attribute result = nil;

        method __init__()
        {
        }
    }

    method open(context, data)
    {
        self.caller_root = context.getRootWindow();
        self.data = data;
        self.reverse = false;
        self.closing = false;
        self.result = false;
        self.popup = main::SequenceUtil::ModalPage(context, LicenseDetailPopup);
        self.popup.open();

        return [ "result" : self.result,
                 "reverse" : self.reverse,
                 "driving_line" :self.data.driving_line,
                 "race_difficulty" : self.race_difficulty,
                 "ai_skill" : self.data.ai_skill ];
    }

    method onInitialize(context)
    {

        setCursor(context, "wait");


        BalloonTip.visible = false;
        BalloonTip.initialize(context);
        Pane.initialize(context, context.translate(LicenseDetailPopup, "Balloon", "LicenseDetail"));

        var space = Pane::Setting::Body::ScrollClip::space;
        space.y = 0;
        space.Transmission::OptionMenu.initialize(context, LicenseDetailPopup, Template::OptionMenuItem1, ["AUTOMATIC", "MANUAL"], "TrialSetting");
        space.DrivingLine::OptionMenu.initialize(context, LicenseDetailPopup, Template::OptionMenuItem1, ["OFF", "ON"], "TrialSetting");
        space.ActiveSteering::OptionMenu.initialize(context, LicenseDetailPopup, Template::OptionMenuItem1, ["OFF", "ACTIVE_STEERING_WEAK", "ACTIVE_STEERING_STRONG"], "TrialSetting");
        space.TCSASM::OptionMenuASM.initialize(context, LicenseDetailPopup, Template::OptionMenuItem2, ["OFF", "ON"], "TrialSetting");


        Contents::Trophy::trophyGold.visible = self.data.result == LicenseUtil::PRIZE::GOLD;
        Contents::Trophy::trophySilver.visible = self.data.result == LicenseUtil::PRIZE::SILVER;
        Contents::Trophy::trophyBronze.visible = self.data.result == LicenseUtil::PRIZE::BRONZE;
        Contents::Trophy::trophyNone.visible = self.data.result == LicenseUtil::PRIZE::NONE;

        var index = LicenseUtil::GetIndexByLicenseId(main::GlobalStatus::game_context.license_id);
        |var category, var category_index| = LicenseUtil::GetCategoryIdAndCategoryIndex(index);
        var category_str = LicenseUtil::GetCategoryString(category);

        Contents::ImageFace.image_path = "piece_gt5m/mission_flyer/mission_%s.img".format(category_str.downcase());
        Contents::ImageFace.doInitialize(context);

        Contents::TextFaceCategory.text = "%s - %d".format(category_str, category_index + 1);
        Contents::TextFaceCar.text = main::gtengine::MSpecDB::getCarShortName(self.data.cp.getCarCode());
        var course_label = self.data.course_label;
        if (course_label.beginWith("r_"))
            course_label = course_label.substr(2);

        Contents::TextFaceCourse.text = context.translate(LicenseDetailPopup, "CourseName", course_label);

        Pane::About::Icon.visible = false;
        Pane::About::TextFace.text = self.data.license_title;

        self.data.cp.beginSetting();
        reflect(context);
        self.data.cp.endSetting();

        LicenseDetailPopup.setFocus(Pane::Footer::OK);

        onInitializeAnimation(context);

        setCursor(context, "default");

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        var space = Pane::Setting::Body::ScrollClip::space;
        space.DrivingLine::OptionMenu.finalize(context);
        space.Transmission::OptionMenu.finalize(context);
        space.TCSASM::OptionMenuASM.finalize(context);
        space.ActiveSteering::OptionMenu.finalize(context);

        return EVENTRESULT_FILTER;
    }


    method onKeyPress(context, event)
    {
        var status = EVENTRESULT_CONTINUE;
        return status;
    }

    method reflect(context)
    {
        var space = Pane::Setting::Body::ScrollClip::space;

        if (self.data.cp.isATOnly())
        {
            space.Transmission::OptionMenu.setIndex(context, 0);
            space.Transmission::OptionMenu.insensitive = true;
        }
        else
        {
            space.Transmission::OptionMenu.setIndex(context, self.data.dp.manual ? 1 : 0);
            space.Transmission::OptionMenu.insensitive = false;
        }

        space.DrivingLine::OptionMenu.setIndex(context, self.data.driving_line ? 1 : 0);

        space.TCSASM::slider.range = [0, 10];
        space.TCSASM::slider.index = self.data.cp.quicktune_tcs;
        space.TCSASM::slider.setup(context, 1, context.translate(LicenseDetailPopup, "TrialSetting", "OFF"));

        space.TCSASM::OptionMenuASM.setIndex(context, self.data.dp.assist_asm ? 1 : 0);

        space.ActiveSteering::OptionMenu.setIndex(context, self.data.dp.active_steering);

        var constraint = self.data.constraint;
        if (constraint != nil)
        {
            if (constraint.driving_line != nil)
            {
                space.DrivingLine::OptionMenu.insensitive = true;
                space.DrivingLine::OptionMenu.setIndex(context, constraint.driving_line ? 1 : 0);
            }

            if (constraint.asm != nil)
            {
                space.TCSASM::OptionMenuASM.insensitive = true;
                space.TCSASM::OptionMenuASM.setIndex(context, constraint.asm ? 1 : 0);
            }

            if (constraint.tcs != nil)
            {
                space.TCSASM::slider.insensitive = true;
                space.TCSASM::slider.index = constraint.tcs;
                space.TCSASM::slider.setup(context, 1, context.translate(LicenseDetailPopup, "TrialSetting", "OFF"));
            }
        }
    }

    method apply(context)
    {
        var space = Pane::Setting::Body::ScrollClip::space;

        if (!space.DrivingLine::OptionMenu.insensitive)
            self.data.driving_line = space.DrivingLine::OptionMenu.index != 0;

        self.data.dp.manual = space.Transmission::OptionMenu.index != 0;

        self.data.dp.assist_tcs = space.TCSASM::slider.index > 0;
        self.data.cp.quicktune_tcs = space.TCSASM::slider.index;

        self.data.dp.assist_asm = space.TCSASM::OptionMenuASM.index != 0;

        self.data.dp.active_steering = space.ActiveSteering::OptionMenu.index;
    }

    attribute popup = nil;
    attribute closing = nil;
    attribute result = nil;

    method onCancel(context)
    {
        main::sound.play("cancel");
        LicenseDetailPopup.setFocus(Pane::Footer::Cancel);
        return EVENTRESULT_FILTER;
    }

    method close(context)
    {
        if (self.popup != nil)
        {
            self.popup.close();
            self.popup = nil;
        }
    }

    method onInitializeAnimation(context)
    {
        context.event_mask &= ~1;
        context.filterKeyEvent();

        ScalarInterpolator.reverse = false;
        ScalarInterpolatorX.reverse = false;
        ScalarInterpolatorY.reverse = false;

        ScalarInterpolatorX.on_effect_end = function (context)
        {
            main::menu::MFocusEnterEvent(context, LicenseDetailPopup.focus_widget).dispatchEvent();
            BalloonTip.visible = true;
            ScalarInterpolatorX.on_effect_end = nil;
            context.event_mask |= 1;

            if (LicenseDetailPopup.caller_root != nil)
                LicenseDetailPopup.caller_root.visible = false;
        }

        ScalarInterpolator.restart();
        ScalarInterpolatorX.restart();
        ScalarInterpolatorY.restart();
    }

    method onCancelAnimation(context)
    {
        context.event_mask &= ~1;
        context.filterKeyEvent();

        ScalarInterpolator.reverse = true;
        ScalarInterpolatorX.reverse = true;
        ScalarInterpolatorY.reverse = true;

        ScalarInterpolatorX.on_effect_end = function (context)
        {
            LicenseDetailPopup.close(context);
            ScalarInterpolatorX.on_effect_end = nil;
            context.event_mask |= 1;
        }

        if (LicenseDetailPopup.caller_root != nil)
        {
            LicenseDetailPopup.caller_root.visible = true;
            LicenseDetailPopup.caller_root = nil;
        }

        ScalarInterpolator.restart();
        ScalarInterpolatorX.restart();
        ScalarInterpolatorY.restart();
    }

    module Pane::Footer
    {
        method onFocusEnter(context, event)
        {
            var w = event.widget;
            BalloonTip.set_value(context, w, w.balloon.text, 3.5);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Footer::Cancel
    {
        method onActivate(context)
        {
            if (!LicenseDetailPopup.closing)
            {
                main::sound.play("cancel");
                LicenseDetailPopup.closing = true;
                LicenseDetailPopup.onCancelAnimation(context);
            }
            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Footer::OK
    {
        method onActivate(context)
        {
            if (LicenseDetailPopup.closing)
            {
                return EVENTRESULT_FILTER;
            }

            main::sound.play("ok");
            LicenseDetailPopup.closing = true;
            LicenseDetailPopup.result = true;
            LicenseDetailPopup.apply(context);
            Blink.ScalarInterpolator.on_effect_end = function (context)
            {
                LicenseDetailPopup.close(context);
            }

            if (LicenseDetailPopup.caller_root != nil)
            {
                LicenseDetailPopup.caller_root.visible = true;
                LicenseDetailPopup.caller_root = nil;
            }
            
            Blink.ScalarInterpolator.restart();
            return EVENTRESULT_FILTER;
        }
    }
}