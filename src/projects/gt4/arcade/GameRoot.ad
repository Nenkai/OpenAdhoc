module PROJECT::ROOT
{
    static current_game = nil;
    static forward = true;

    function setFadeActor(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        widget.actor = actor;
        widget.actor.period = 0.25;
        widget.actor.out = true;
        widget.actor.warp();
    }

    function setFadeActor2(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        widget.actor = actor;
    }

    function setMoveActor(widget, x, y)
    {
        var actor = main::menu::MMoveActor(widget, widget.x + x, widget.y + y);
        widget.actor = actor;
        widget.actor.ratio = 0.2;
        widget.actor.out = true;
        widget.actor.warp();
    }

    setFadeActor(grid);
    setMoveActor(SingleRaceBG, -300.0, -300.0);
    setMoveActor(PhotoModeBG, 300.0, -300.0);
    setMoveActor(LANBattleBG, 300.0, 300.0);
    setMoveActor(TimeTrialBG, -300.0, 300.0);

    setFadeActor(SingleRace::bg);
    setFadeActor2(SingleRace::bgf);
    setFadeActor(SingleRace::label);
    setFadeActor(PhotoMode::bg);
    setFadeActor2(PhotoMode::bgf);
    setFadeActor(PhotoMode::label);
    setFadeActor(SplitBattle::bg);
    setFadeActor2(SplitBattle::bgf);
    setFadeActor(SplitBattle::label);
    setFadeActor(LANBattle::bg);
    setFadeActor2(LANBattle::bgf);
    setFadeActor(LANBattle::label);
    setFadeActor(TimeTrial::bg);
    setFadeActor2(TimeTrial::bgf);
    setFadeActor(TimeTrial::label);

    function reset_actor(widget)
    {
        widget.actor.out = true;
        widget.actor.warp();
        widget.actor.repeat = true;
        widget.actor.period = 0.25;
    }

    function in_frame(context)
    {
        grid.actor.out = false;
        SingleRace::bg.actor.out = false;
        SingleRace::label.actor.out = false;
        PhotoMode::bg.actor.out = false;
        PhotoMode::label.actor.out = false;
        SplitBattle::bg.actor.out = false;
        SplitBattle::label.actor.out = false;
        LANBattle::bg.actor.out = false;
        LANBattle::label.actor.out = false;
        TimeTrial::bg.actor.out = false;
        TimeTrial::label.actor.out = false;

        SingleRaceBG.actor.out = false;
        PhotoModeBG.actor.out = false;
        LANBattleBG.actor.out = false;
        TimeTrialBG.actor.out = false;
    }

    function out_frame(context)
    {
        grid.actor.out = true;
        SingleRace::bg.actor.repeat = false;
        SingleRace::bg.actor.out = true;
        SingleRace::bgf.actor.repeat = false;
        SingleRace::bgf.actor.out = true;
        SingleRace::label.actor.out = true;
        PhotoMode::bg.actor.out = true;
        PhotoMode::bgf.actor.repeat = false;
        PhotoMode::bgf.actor.out = true;
        PhotoMode::label.actor.out = true;
        SplitBattle::bg.actor.out = true;
        SplitBattle::bgf.actor.repeat = false;
        SplitBattle::bgf.actor.out = true;
        SplitBattle::label.actor.out = true;
        LANBattle::bg.actor.out = true;
        LANBattle::bgf.actor.repeat = false;
        LANBattle::bgf.actor.out = true;
        LANBattle::label.actor.out = true;
        TimeTrial::bg.actor.out = true;
        TimeTrial::bgf.actor.repeat = false;
        TimeTrial::bgf.actor.out = true;
        TimeTrial::label.actor.out = true;

        SingleRaceBG.actor.out = true;
        PhotoModeBG.actor.out = true;
        LANBattleBG.actor.out = true;
        TimeTrialBG.actor.out = true;

        context.sync(0.5);
    }

    function onInitialize(context)
    {
        ROOT.resetToolTip();
        var disable_lanbattle = main.defined("DEMO_DISABLE_LANBATTLE") || main::game.option.special_arcade_tuner != "";

        PhotoMode.visible = false;
        SplitBattle.visible = true;
        LANBattle.insensitive = disable_lanbattle;
        LANBattle.visible = !disable_lanbattle;
        LANBattleBG.visible = !disable_lanbattle;
        SplitBattle.visible = !disable_lanbattle;
        TimeTrialBG.visible = !disable_lanbattle;

        if (forward)
            in_frame(context);

        reset_actor(SingleRace::bgf);
        reset_actor(PhotoMode::bgf);
        reset_actor(SplitBattle::bgf);
        reset_actor(LANBattle::bgf);
        reset_actor(TimeTrial::bgf);

        context.cursor_visible = true;
        TopRoot::leave(context);

        context.event_mask &= ~2;
        main::sound.keepMusic("ARCADE");

        if (main.defined("DEMO_DISABLE_SINGLERACE"))
            ROOT.setFocus(ROOT::TimeTrial);
    }

    function onFinalize(context) { }

    function onCancel(context, event, item)
    {
        main::sound.fadeOutMusic(1.0);
        main::sound.play("cancel");

        context.cursor_visible = false;
        out_frame(context);

        forward = true;
        context.closePage(ROOT);
        TopRoot::enter(context);

        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        return EVENTRESULT_CONTINUE;
    }

    function isSkipMethod()
    {
        if (main::game.option.limit_favorite_car_only)
            return true;

        switch (current_game)
        {
            case "PhotoMode":
            case "LANBattle":
                return true;
        }

        return false;
    }

    module CourseTypeIndex 
    {
        static dry = 0;
        static wet = 1;
        static dirt = 2;
        static snow = 3;
    }

    function filter_open_model(car_list)
    {
        var list = [];

        for (var i = 0; i < car_list.size; i++)
        {
            var car = car_list[i];
            
            if (main::menu::MCarData::GetOpenModelType(car) != 2)
                list.push(car);
            
        }
        
        return list;
    }

    function set_enemy_cars(crs)
    {
        import main::game;

        do
        {
            if (game.option.limit_enemies_to_favorite_car_only)
            {
                var favorite_list = main::game.favorite_car.buildLabelList();
                favorite_list = filter_open_model(favorite_list);

                if (favorite_list.size <= 0)
		    		break;
                else 
                    ;

                game.race_code = "sample_entry_6";
                game.overwrite_enemy_num = game.max_entry - 1;

                for (var i = 0; i < game.overwrite_enemy_num; i++)
                {
                    var idx = main::menu::MRandom::GetValue(0, favorite_list.size);
                    var car = favorite_list[idx];
                    var cg = main::menu::MCarGarage(car);
                    var col = main::menu::MRandom::GetValue(0, cg.getColorNum());
                    game.setEntryCarCode(i + 1, car, col);
                }
                return;
            }
            else
                ;

        } while (false); // ? Very weird, but accurate.

        do
        {
            if (game.option.special_arcade_tuner != "")
            {
                var limited_list = MethodRoot::getCurrentCarList();
                limited_list = filter_open_model(limited_list);

                if (limited_list.size <= 0)
                    break;
		    	else
                    ;

		    	game.race_code = "sample_entry_6";
		    	game.overwrite_enemy_num = game.max_entry - 1;
            
		    	for (var i = 0; i < game.overwrite_enemy_num; i++)
		    	{
		    		var idx = main::menu::MRandom::GetValue(0, limited_list.size);
		    		var car = limited_list[idx];
		    		var cg = main::menu::MCarGarage(car);
		    		var col = main::menu::MRandom::GetValue(0, cg.getColorNum());
		    		game.setEntryCarCode(i + 1, car, col);
		    	}

                return;
            }
            else
                ;

        } while (false); // ? Very weird, but accurate.

        var ctype = main::menu::MCourseData::GetType(crs);
        var race_code = main::menu::MCarData::GetRaceCode(CarRoot::getCurrentCar(), CourseTypeIndex[ctype], main::game.difficulty);

        if (race_code != nil)
        {
            game.race_code = race_code;
            return;
        }

        game.race_code = "sample_entry_6";
        var offset = (main::game.enemy_level.toFloat() - 2.5) * 0.01;
        var range = 0.005;

        var cg = main::menu::MCarGarage(game.car_code, game.car_color);

        if (CourseRoot::isDirt())
        {
            var train = cg.getDTrainType();

            if (train != "4WD")
                offset -= 0.04;
        }

        var attr = main::menu::MCourseData::GetAttrString(crs);
        var isRollingStart = attr.at(0) == 49;

        if (isRollingStart)
        {
            var laps = main::game.option.race_laps;
            var distance = 0.0;

            if (CourseData::isForwardCourse(crs))
            {
                var crsinfo = CourseData::getCourseInfo(crs);
                distance = crsinfo.length * laps;
            }
            else 
            {
                var crsinfo = CourseData::getCourseInfo(crs.substr(2));
                distance = crsinfo.length * laps;
            }

            if (distance < 3000.0)
                offset -= 0.02;
            else if (distance < 5000.0)
                offset -= 0.01;
        }

        var list = main::menu::MCarData::PickUpEnemyCars(cg, CourseRoot::isDirt() ? EnemyData::dirt_enemy_carlist : EnemyData::enemy_carlist, offset, range, game.max_entry - 1, CourseRoot::isDirt());

        for (var i = 0; i < list.size; i++)
        {
            game.setEntryCarCode(i + 1, list[i][0], list[i][1]);
        }

        game.overwrite_enemy_num = list.size;
        return;
    }

    function doGame(context)
    {
        import main::game;
        import main::network;

        var crs = CourseRoot::getCurrentCourse();
        game.course_code = crs;

        if (current_game != "SplitBattle")
        {
            game.car_code = CarRoot::getCurrentCar();
            game.car_color = CarRoot::getCurrentColor();
        }
        
        game.overwrite_enemy_num = 0;

        switch (current_game)
        {
            case "SingleRace":
                game.major_menu_project = "arcade";
                game.next_sequence = "single_race";
                game.next_menu_project = "arcade";
                var max_entry = main::menu::MCourseData::GetMaxCarNum(crs);
                var open_model = main::menu::MCarData::GetOpenModelType(CarRoot::getCurrentCar());
                if (open_model == 1)
                {
                    if (SettingPopup::Pane::Open::OptionMenu.index == 1)
                        if (max_entry > 2)
                            max_entry = 2;
                }
                else if (open_model == 2)
                {
                    if (max_entry > 2)
                        max_entry = 2;
                }
                game.max_entry = max_entry;
                set_enemy_cars(crs);
                break;

            case "PhotoMode":
                game.major_menu_project = "arcade";
                context.transition.panOut(context);
                context.transition.syncOut(context);
                game.race_code = "sample_entry_1";
                game.next_sequence = "photo_shoot";
                game.next_menu_project = "photo_shoot";
                break;

            case "LANBattle":
                game.major_menu_project = "arcade";
                if (game.option.LAN_style == "play")
                    game.major_menu_page = "CourseRoot";
                else 
                    game.major_menu_page = "MonitorRoot";
                context.transition.panOut(context);
                context.transition.syncOut(context);
                network.raceMenuNotifySequence(8);
                game.next_sequence = "lan_race";
                game.next_menu_project = "arcade";
                game.race_code = "sample_entry_1";
                network.raceMenuNotifyCar(game.car_code, game.car_color);
                break;

            case "TimeTrial":
                game.major_menu_project = "arcade";
                game.next_sequence = "time_trial";
                game.next_menu_project = "arcade";
                game.race_code = "sample_entry_1";
                game.max_entry = 1;
                break;

            case "SplitBattle":
                game.major_menu_project = "arcade";
                game.next_sequence = "split_battle";
                game.next_menu_project = "arcade";
                game.race_code = "sample_entry_1";
                break;
        }

        for (var i = 0; i < game.overwrite_enemy_num + 1; i++)
        {
            var [car, color] = game.getEntryCarCode(i);
            var car2 = main::menu::MCarData::ShiftCarCode(car, game.course_code);
            game.setEntryCarCode(i, car2, color);
        }

        context.finish();
    }

    function initialize_race_setting()
    {
        main::game.car_code = "";
        main::game.car_color = 0;
        main::game.assist_asm = 0;
        main::game.assist_tcs = 0;
        main::game.manual = 0;
        main::game.car_code_2p = "";
        main::game.car_color_2p = 0;
        main::game.assist_asm_2p = 0;
        main::game.assist_tcs_2p = 0;
        main::game.manual_2p = 0;
    }
}

module PROJECT::ROOT::SingleRace
{
    function onActivate(context, event, item)
    {
        if (main.defined("DEMO_DISABLE_SINGLERACE"))
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_ERROR, "Single Race is not available.");
            return EVENTRESULT_FILTER;
        }

        current_game = "SingleRace";
        main::game.menuPush(current_game);

        forward = false;
        main::sound.play("ok");

        if (main::game.option.limit_favorite_course_only)
        {
            main::game.major_menu_page = CourseRoot.name;
            start_page(context, CourseRoot);
        }
        else 
        {
            main::game.major_menu_page = CategoryRoot.name;
            start_page(context, CategoryRoot);
        }

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::SplitBattle
{
    function onActivate(context, event, item)
    {
        initialize_race_setting();
        current_game = "SplitBattle";
        main::game.menuPush(current_game);
        
        forward = false;
        main::sound.play("ok");
        main::game.car_garage = nil;
        main::game.car_garage_2p = nil;

        if (main::game.option.limit_favorite_course_only)
        {
            main::game.major_menu_page = CourseRoot.name;
            start_page(context, CourseRoot);
        }
        else
        {
            main::game.major_menu_page = CategoryRoot.name;
            start_page(context, CategoryRoot);
        }

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::PhotoMode
{
    function onActivate(context, event, item)
    {
        current_game = "PhotoMode";
        main::game.menuPush(current_game);

        forward = false;
        main::sound.play("ok");
        main::game.major_menu_page = "";
        start_page(context, CourseRoot);

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::LANBattle
{
    function onActivate(context, event, item)
    {
        if (main::game.option.limit_favorite_course_only)
        {
            main::sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        if (!main::network.isNetworkAdaptorAvailable())
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "You_need_NetworkAdaptor"));
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");
        current_game = "LANBattle";
        main::game.menuPush(current_game);
        main::game.major_menu_project = "arcade";
        main::game.major_menu_page = MatchingRoot.name;
        main::network.initCommunicator();
        main::network.network_enable = true;

        if (main::network.isRTIMEInitialized())
        {
            start_page(context, PROJECT[main::game.major_menu_page]);
        }
        else
        {
            main::game.next_menu_project = "network";
            main::game.next_menu_arg = "LAN";
            start_page(context, nil);
        }

        forward = false;
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::TimeTrial
{
    function onActivate(context, event, item)
    {
        current_game = "TimeTrial";
        main::game.menuPush(current_game);

        forward = false;
        main::sound.play("ok");

        if (main::game.option.limit_favorite_course_only)
        {
            main::game.major_menu_page = CourseRoot.name;
            start_page(context, CourseRoot);
        }
        else 
        {
            main::game.major_menu_page = CategoryRoot.name;
            start_page(context, CategoryRoot);
        }

        return EVENTRESULT_FILTER;
    }
}