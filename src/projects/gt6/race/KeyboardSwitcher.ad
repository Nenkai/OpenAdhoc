










module KeyboardSwitcher
{
    function changeTarget(context, rank)
    {
        var game_mode = gSequenceCondition.game_mode;
        if (game_mode == gtengine::GameMode::ARCADE_STYLE_RACE)
            return;
            
        var order_list = ORG.getRace().getRankList();
        if (order_list.size < rank)
            return;

        var slot_id = order_list[rank - 1];
        if (slot_id < 0)
            return;

        ORG.setCameraTarget(0, slot_id);
    }

    function changeInfo(context, mode)
    {
        var racedisplay = OnboardMeterRoot::RaceDisplayFace;
        var course_map = OnboardMeterRoot::GT6::Common::MapClip::CourseMapFace;
        var option = GAME_STATUS.user_profile.option;
        var no_mirror = false;

        if (mode == "nothing")
        {
            racedisplay.dispmode = true;
            course_map.mapmode = 0;
            no_mirror = true;
        }
        else if (mode == "time_lap")
        {
            racedisplay.dispmode = false;
            racedisplay.time_disp = true;
            racedisplay.carmeter_disp = false;
            racedisplay.racername_disp = true;

            course_map.mapmode = option.race_map_view_mode;
        }
        else if (mode == "meter")
        {
            racedisplay.dispmode = false;
            racedisplay.time_disp = false;
            racedisplay.carmeter_disp = true;
            racedisplay.racername_disp = false;

            course_map.mapmode = 0;
        }
        else if (mode == "all")
        {
            racedisplay.dispmode = false;
            racedisplay.time_disp = true;
            racedisplay.carmeter_disp = true;
            racedisplay.racername_disp = true;

            course_map.mapmode = option.race_map_view_mode;
        }

        ORG.noDispBackMirror(no_mirror);
    }

    function changeCamera(context, camera_type, mount)
    {
        if (LiveTimingRoot.isActive(context))
            return;

        if (camera_type == gtengine::CameraType::ONBOARD &&
            !ORG.checkMountNum(ORG.getCameraTarget(0), mount))
            return;

        ORG.changeSpectatorCamera(camera_type, mount);
    }

    function onKeyPress(context, event)
    {
        if (!GAME_STATUS.user_profile.option.lounge_keyboard_switcher)
            return false;

        var is_replay = gSequenceCondition.is_buffer_replay_mode;
        var is_bspec = gSequenceCondition.enable_director_command && !is_replay;
        if (is_bspec)
            return false;

        switch (event.keysym)
        {
            // Entry change (1-16) 
            case 0x31: // 1
            case 0x32: // 2
            case 0x33: // 3
            case 0x34: // 4
            case 0x35: // 5
            case 0x36: // 6
            case 0x37: // 7
            case 0x38: // 8
            case 0x39: // 9
            case 0x30: // 0
            case 0x71: // q
            case 0x77: // w
            case 0x65: // e
            case 0x72: // r
            case 0x74: // t
            case 0x79: // y
                var map = [
                    0x31 : 1,
                    0x32 : 2,
                    0x33 : 3,
                    0x34 : 4,
                    0x35 : 5,
                    0x36 : 6,
                    0x37 : 7,
                    0x38 : 8,
                    0x39 : 9,
                    0x30 : 10,
                    0x71 : 11,
                    0x77 : 12,
                    0x65 : 13,
                    0x72 : 14,
                    0x74 : 15,
                    0x79 : 16,
                ];

                changeTarget(context, map[event.keysym]);
                break;

            // Replay Camera
            case 0x68: // h
                changeCamera(context, gtengine::CameraType::DESIGNER, 0);
                break;

            // Normal Camera
            case 0x6A: // j
                changeCamera(context, gtengine::CameraType::ONBOARD, gtengine::CameraOnboardMount::DRIVER);
                break;

            // Hood Camera
            case 0x6B: // k
                changeCamera(context, gtengine::CameraType::ONBOARD, gtengine::CameraOnboardMount::BONNET);
                break;

            // Chase Camera
            case 0x6C: // l
                changeCamera(context, gtengine::CameraType::ONBOARD, gtengine::CameraOnboardMount::CHASE);
                break;

            case 0xFFBE: // F1 - Display no information.
            case 0xFFBF: // F2 - Display all information.
            case 0xFFC0: // F3 - Display the time and the lap number only.
            case 0xFFC1: // F4 - Display instruments only.
                var map = [
                    0xFFBE : "nothing",
                    0xFFBF : "all",
                    0xFFC0 : "time_lap",
                    0xFFC1 : "meter",
                    0xFFC2 : "meter",
                ];

                changeInfo(context, map[event.keysym]);
                break;
                
            default:
                break;
        }

        return true;
    }
}