module PROJECT::ROOT
{
    static sCourseList = [];
    sCourseList.push(["fisco", "Fisco"]);
    sCourseList.push(["grandcanyon", "Grand Canyon"]);
    sCourseList.push(["hongkong", "Hong Kong"]);
    sCourseList.push(["newyork", "New York"]);
    sCourseList.push(["nurburgring", "Nurburgring"]);
    sCourseList.push(["tsukuba", "Tsukuba"]);

    function SetMoveActor(widget, x, y)
    {
        var actor = main::menu::MMoveActor(widget, widget.x + x, widget.y + y);
        widget.actor = actor;
        widget.actor.ratio = 0.05;
        widget.actor.out = true;
        widget.actor.warp();
    }

    function OnTick(context)
    {
        var cnt = Ranking::Board.countChild();
        
        for (var i = 0; i < cnt; i++)
        {
            var item = Ranking::Board.getChild(i);
            item["name"].actor.doFlip();
        }
    }

    function UpdateRanking(context)
    {
        var id = Location::OptionMenu.getItem()["id"];
        id = main::menu::MCourseData::GetID(id);

        var start = Start::input::InputNumberFace.value - 1;

        var list = svo::GetLocationRanking(id.toString(), start);
        gHttp.close();

        if (list == nil)
        {
            openConfirmDialog(context, DIALOG_OK, "failed to get records");
            return;
        }

        if (!list.size)
        {
            openConfirmDialog(context, DIALOG_OK, "There is no ranking data");
            return;
        }

        Ranking::Board.clearChildren(context);

        MyRecord::rank.text = "";
        MyRecord::car.text  = "";
        MyRecord::time.text = "";

        var y = 0;
        
        for (var i = 0; i < list.size; i++)
        {
            |var rank, var name, var car, var time| = list[i];

            car = main::menu::MCarData::GetCarNameByNumericCode(car);
            if (car == "")
                car = "----";

            time = main::menu::MUtility::GetTimeString(time.toInt());

            if (name == nil)
            {
                MyRecord::rank.text = rank;
                MyRecord::car.text  = car;
                MyRecord::time.text = time;
            }
            else
            {
                var item = hidden::rank.doCopy();
                item.y = y;
                y += 32;

                item["rank"].text        = rank;
                item["name"]["user"].text = name;
                item["name"]["car"].text  = car;
                item["time"].text         = time;

                SetMoveActor(item["name"], 0.0, -36.0);
                Ranking::Board.appendChild(item);
            }
        }

        CreateWatcher(context, OnTick, 180);
    }

    function OnInitialize(context)
    {
        UpdateRanking(context);
    }

    function onInitialize(context)
    {
        enterPage(context, RankingRoot, "Ranking");

        Start::input::InputNumberFace.value = 1;

        main::network.getSvoCookie(gHttp.GetMHttp());

        RankingRoot.setFocus(Location::OptionMenu);

        
        for (var i = 0; i < sCourseList.size; i++)
        {
            var location = hidden::location.doCopy();

            location.defineStatic("id", sCourseList[i][0]);
            location["label"].text = sCourseList[i][1];

            Location::OptionMenu::popup::vbox.appendChild(context, location);
        }

        Location::OptionMenu.applyAppend(context);

        var event = main::menu::MScriptEvent(context, RankingRoot, "OnInitialize");
        context.pushEvent(event);
    }

    function onFinalize(context)
    {
        DeleteWatcher();

        Location::OptionMenu::popup::vbox.clearWindow(context);
        Ranking::Board.clearChildren(context);

        main::network.setSvoCookie(gHttp.GetMHttp());

        leavePage(context, RankingRoot);
    }

    function onCancel(context, event, item)
    {
        main::sound.play("cancel");
        start_page(context, TopRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Location::OptionMenu
{
    function onValueChanged(context, index)
    {
        main::sound.play("ok");
        Start::input::InputNumberFace.value = 1;
        RankingRoot::UpdateRanking(context);
    }
}

module PROJECT::ROOT::Start::input::InputNumberFace
{
    function onModeToggled(context, active)
    {
        main::sound.play("cursor");
        if (!active)
        {
            RankingRoot::UpdateRanking(context);
        }
    }
}