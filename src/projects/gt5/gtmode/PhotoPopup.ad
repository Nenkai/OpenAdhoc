module PhotoPopup
{
    attribute open_on_init = true;

    module Function
    {
        #include "PhotoFunction.ad"
    }

    module Mode
    {
        static FINDER = 1;
        static PROFILE = 2;    
    }

    attribute user_id;
    attribute popup;
    attribute closed = false;
    attribute exporter;
    attribute strategy;

    attribute genre;
    attribute order;
    attribute by;
    attribute ignore_update;

    attribute title_index;
    attribute title_list;
    attribute mode;
    attribute button_help;
    attribute button_help_l1;

    hidden.visible = false;

    function onFunctionCallback(context, data)
    {
        |var func_name, var photo, var args, var callback, var item_w| = data;

        Function[func_name](context, photo, args, callback, item_w);
    }

    class Strategy
    {
        attribute photo_list;
        
        method __init__()
        {
        
        }

        method canDelete()
        {
            return true;
        }

        method isFriend()
        {
            return false;
        }

        method getHeaderText(context, count)
        {
            return ["", "", true];
        }

        method setupFinder(context, finder, photo_list)
        {
            self.photo_list = photo_list;
        
            Popup::Pane::Header.setText(context, getHeaderText(context, self.photo_list.size));
        
            Popup::Pane::Body::List::ImageFaceD.visible = self.photo_list.size == 0;
            Popup::Pane::Body::List::TextFaceD.visible = self.photo_list.size == 0;
        
            var candidates = UIKitProject::FinderRoot.makeCandidates(self.photo_list);
        
            finder.replaceCurrentFolderCandidates(context, candidates, 0);
        }

        method canPublish(photo)
        {
            return LoginUtil::isOnline() && !photo.is_3d;
        }
    }

    class LibraryStrategy : Strategy
    {

        method __init__()
        {

        }

        method initializeFinder(context, finder, genre, title, order, by)
        {
            var photo_list = PhotoFileUtil::getList(genre, title, order, by);
            __super__::setupFinder(context, finder, photo_list);
        }

        method createMenuList(context, photo, favorite_cascade, online_cascade, callback, item_w)
        {
            var data_list = [
                UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "FAVORITE"), true, nil, nil, favorite_cascade),
                UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "PUBLISH_TO_FRIEND_PHOTO"), __super__::canPublish(photo), nil, nil, online_cascade),
                UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "SETASPROFILE"), true, onFunctionCallback, ["updateProfile", photo, nil, callback, item_w]),
                nil, // Separator
                UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "PHOTOEDIT"), true, onFunctionCallback, ["edit", photo, nil, callback, item_w])
            ];

            return data_list;
        }

        method getLocalizeKey(name)
        {
            switch (name)
            {
                case "SearchSort":
                    return "SEARCH_SORT";

                case "SlideShow":
                    return "SLIDESHOW";

                case "Close":
                    return "CLOSE";    
            }
        }

        method getHeaderText(context, count)
        {
            var text = "";
            if (PhotoPopup.genre != nil)
                text = context.translate(PhotoPopup, "MyHome", (PhotoPopup.genre == 1) ? "PHOTO_RACE" : "PHOTO_TRAVEL");
            else
                text = context.translate(PhotoPopup, "MyHome", "ALL");
            return [text, count, true];
        }
    }

    class FavoritePhotoStrategy : Strategy
    {
        method __init__()
        {

        }   

        method initializeFinder(context, finder, genre, title, order, by)
        {
            var photo_list = PhotoFileUtil::getFavoriteList(order, by);
            __super__::setupFinder(context, finder, photo_list);
        }

        method createMenuList(context, photo, favorite_cascade, online_cascade, callback, item_w)
        {
            var data_list = [
                UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "FAVORITE"), true, nil, nil, favorite_cascade),
                UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "PUBLISH_TO_FRIEND_PHOTO"), __super__::canPublish(photo), nil, nil, online_cascade),
                UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "SETASPROFILE"),true, onFunctionCallback, ["updateProfile", photo, nil, callback, item_w]),
                nil, // Separator
                UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "PHOTOEDIT"), true, onFunctionCallback, ["edit", photo, nil, callback, item_w])
            ];

            return data_list;
        }

        method getLocalizeKey(name)
        {
            switch (name)
            {
                case "SearchSort":
                    return "SORT";

                case "SlideShow":
                    return "SLIDESHOW";

                case "Close":
                    return "CLOSE";    
            }

        }

        method getHeaderText(context, count)
        {
            var count_text = "%d / %d".format(count, PhotoFileUtil::getFavoriteMax());
            return [context.translate(PhotoPopup, "MyHome", "FAVORITE"), count_text, true];
        }
    }

    class OnlinePhotoStrategy : Strategy
    {
        method __init__()
        {

        }

        method initializeFinder(context, finder, genre, title, order, by)
        {
            var photo_list = PhotoFileUtil::getOnlineList(nil, nil);
            __super__::setupFinder(context, finder, photo_list);
        }

        method createMenuList(context, photo, favorite_cascade, online_cascade, callback, item_w)
        {
            var data_list = [
                UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "FAVORITE"), true, nil, nil, favorite_cascade),
                UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "PUBLISH_TO_FRIEND_PHOTO"), __super__::canPublish(photo), nil, nil, online_cascade),
                nil, // Separator
                UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "PHOTOEDIT"), true, onFunctionCallback, ["edit", photo, nil, callback, item_w])
            ];

            return data_list;
        }

        method getLocalizeKey(name)
        {
            switch (name)
            {
                case "SearchSort":
                    return nil;

                case "Close":
                    return "CLOSE";    
            }

        }

        method canDelete()
        {
            return false;
        }

        method getHeaderText(context, count)
        {
            var count_text = "%d / %d".format(count, PhotoFileUtil::getOnlineMax());
            return [
                context.translate(PhotoPopup, "MyHome", "ONLINE"), count_text, true
            ];
        }
    }

    class FriendPhotoStrategy : Strategy
    {
        method __init__()
        {

        }  

        method initializeFinder(context, finder, genre, title, order, by)
        {
            var user_id = PhotoPopup.user_id;
            var request = Photo.requestList(user_id, function (args) {});

            if (Grim2Util::__deprecated__join__(context, request))
            {
                var photo_list = Photo.decodePhotoList(request);
                __super__::setupFinder(context, finder, photo_list);
            }

        }

        method getLocalizeKey(name)
        {
            switch (name)
            {
                case "SearchSort":
                    return nil;

                case "Close":
                    return "CLOSE";    
            }

        }

        method canDelete()
        {
            return false;
        }

        method getHeaderText(context, count)
        {
            return [PhotoPopup.user_id, count.toString(), false];
        }

        method isFriend()
        {
            return true;
        }
    }

    function isFriend()
    {
        return PhotoPopup.strategy.isFriend();
    }

    method open(context, user_id, mode)
    {
        self.mode = mode;
        self.user_id = user_id;
        self.closed = false;

        self.popup = main::SequenceUtil::ModalPage(context, PhotoPopup);
        self.popup.open();

        return true;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;

        ContextMain.event_mask = 0x05;
        ContextMain.disableInput();

        Popup::FadeActor.on_effect_end = function (context)
        {
            if (PhotoPopup.popup != nil)
            {
                PhotoPopup.popup.close();
                PhotoPopup.popup = nil;
            }

            ContextMain.enableInput();
        }

        Popup::FadeActor.out = true;
    }

    method onInitialize(context)
    {
        initializeCommon(context);

        self.genre = nil;
        self.order = "datetime";
        self.by = "ASC";

        if (self.user_id == pdistd::getPlayerName())
        {
            if (self.mode == Mode::FINDER)
                synchronizeServer(context);

            self.strategy = LibraryStrategy();

            Popup::Pane::Tab::HBox::Library.visible = true;
            Popup::Pane::Tab::HBox::Favorite.visible = true;
            Popup::Pane::Tab::HBox::Online.visible = LoginUtil::isOnline();

            Popup::Pane::Tab.setActive(true, false, false, false);
            initializeTitleList(context);
        }
        else
        {
            self.strategy = FriendPhotoStrategy();

            Popup::Pane::Tab::HBox::Library.visible = false;
            Popup::Pane::Tab::HBox::Favorite.visible = false;
            Popup::Pane::Tab::HBox::Online.visible = false;

            Popup::Pane::Tab.setActive(false, false, false, true);
        }

        Popup::Pane::Body::List::ImageFaceD.visible = false;
        Popup::Pane::Body::List::TextFaceD.visible = false;

        Function::load(context);

        warpActors(Popup::Pane::Body::bg, self.open_on_init);
        context.pushEvent(main::menu::MFunctionEvent(initialize, context));

        return EVENTRESULT_FILTER;
    }

    method initializeCommon(context)
    {
        if (self.user_id != pdistd::getPlayerName())
        {
            self.button_help = [
                [ButtonHelpGT5.getEnterButtonName(), context.translate(PhotoPopup, "MyHome", "BUTTON_HELP_SHOW")],
                ["Triangle", context.translate(PhotoPopup, "MyHome", "BUTTON_HELP_MENU")],
                ["Square", context.translate(PhotoPopup, "MyHome", "BUTTON_HELP_CHANGE_VIEW")]
            ];
        }
        else
        {
            self.button_help = [
                [ButtonHelpGT5.getEnterButtonName(), context.translate(PhotoPopup, "MyHome", "BUTTON_HELP_SHOW")],
                ["Triangle", context.translate(PhotoPopup, "MyHome", "BUTTON_HELP_MENU")],
                ["Square", context.translate(PhotoPopup, "MyHome", "BUTTON_HELP_CHANGE_VIEW")],
                ["L1", context.translate(PhotoPopup, "MyHome", "BUTTON_HELP_MULTI_SELECT")]
            ];

            self.button_help_l1 = [
                [ButtonHelpGT5.getEnterButtonName(), context.translate(PhotoPopup, "MyHome", "BUTTON_HELP_SELECT")],
                ["Triangle", context.translate(PhotoPopup, "MyHome", "BUTTON_HELP_MENU")],
                ["Square", context.translate(PhotoPopup, "MyHome", "BUTTON_HELP_SELECT_UNSELECT_ALL")]
            ];
        }

        if (self.mode == Mode::FINDER)
            ButtonHelpGT5.set(context, self.button_help);
        else
        {
            ButtonHelpGT5.set(context, [
                [ButtonHelpGT5.getEnterButtonName(), context.translate(PhotoPopup, "MyHome", "BUTTON_HELP_SELECT")],
                ["Square", context.translate(PhotoPopup, "MyHome", "BUTTON_HELP_CHANGE_VIEW")]
            ]);
        }

        ButtonHelpGT5.hide();

        var radiobox_list = [
            Popup::Pane::Body::Filter::VBox::Search::RadioBox,
            Popup::Pane::Body::Filter::VBox::Order::RadioBox,
            Popup::Pane::Body::Filter::VBox::By::RadioBox
        ];

        foreach (var radiobox in radiobox_list)
        {
            var radiobutton_list = [];
            for (var it = radiobox.VBox.first; it != nil; it = it.next)
                radiobutton_list.push([it.RadioButton, 0]);

            radiobox.setup(radiobutton_list, 0);
        }

        Popup::Pane::Title::HBox::SearchSort.active = self.open_on_init;
        warpActors(Popup::Pane::Body::Filter, self.open_on_init);

        Popup::Pane::Body::Filter.insensitive = !self.open_on_init;

        PhotoPopup.setFocus(Popup::Pane::Title::HBox::Close);
    }

    method initialize(context)
    {
        Popup::Pane::Body::List.finalizeFinder(context);
        Popup::Pane::Body::List.initializeFinder(context);
    }

    method synchronizeServer(context)
    {
        if (!LoginUtil::isOnline())
            return;

        var request = Photo.requestList(self.user_id, function (args) {});
        if (Grim2Util::__deprecated__join__(context, request))
        {
            var online_photo_list = Photo.decodePhotoList(request);
            var local_photo_list = PhotoFileUtil::getOnlineList();

            var target_local_photo;
            foreach (var local_photo in local_photo_list)
            {
                var find = false;
                foreach (var online_photo in online_photo_list)
                {
                    if (local_photo.grim_photo_id == online_photo["photo_id"])
                    {
                        find = true;
                        break;
                    }
                }

                if (!find)
                    PhotoFileUtil::setOnline(local_photo.id, false);
            }

            foreach (var online_photo in online_photo_list)
            {
                var find = false;
                var target_local_photo = nil;
                foreach (var local_photo in local_photo_list)
                {
                    if (local_photo.grim_photo_id == online_photo["photo_id"])
                    {
                        find = true;
                        target_local_photo = local_photo;
                        break;
                    }
                }

                if (!find)
                    Photo.requestDeleteImage(online_photo["photo_id"], function (args) {});
                else
                    PhotoFileUtil::updateComment(target_local_photo.id, online_photo["comment"]);
            }
        }

    }

    method initializeTitleList(context)
    {
        self.ignore_update = true;
        self.title_index = 0;

        var genre_list = [context.translate(PhotoPopup, "MyHome", "ALL")];
        var list = PhotoFileUtil::getTitleList(self.genre);

        self.title_list = [nil];

        foreach (|var genre, var title| in list)
        {
            if (PhotoFileUtil::GENRE::PHOTO_RACE == genre)
                genre_list.push(context.translate(PhotoPopup, "CourseName", title));
            else if (genre == PhotoFileUtil::GENRE::PHOTO_TRAVEL)
                genre_list.push(context.translate(PhotoPopup, "PhotoMode", title));
            else
                genre_list.push(context.translate(PhotoPopup, "PhotoMode", "PROFILE_PHOTO_TITLE"));

            self.title_list.push(title);
        }

        OptionMenuUtil::finalize(context, Popup::Pane::Body::Filter::VBox::Search::OptionMenu);

        OptionMenuUtil::initialize(context, PhotoPopup,
        Popup::Pane::Body::Filter::VBox::Search::OptionMenu, hidden::OptionMenuItem, genre_list);

        Popup::Pane::Body::Filter::VBox::Search::OptionMenu.setIndex(context, self.title_index);

        self.ignore_update = false;
    }

    method onFinalize(context)
    {
        Function::unload(context);
        self.button_help = nil;
        self.button_help_l1 = nil;

        Popup::Pane::Body::List.finalizeFinder(context);
        OptionMenuUtil::finalize(context, Popup::Pane::Body::Filter::VBox::Search::OptionMenu);

    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        var result = ButtonHelpGT5.hideIf();

        if (result)
        {
            if (!isFriend())
            {
                Popup::Pane::Body::List.multi_select = false;
                Popup::Pane::Body::List::updateStatusAll(context);
            }
        }

        PhotoPopup.setFocus(Popup::Pane::Title::HBox::Close);

        return EVENTRESULT_FILTER;
    }

    module Popup::Pane
    {
        module Tab
        {
            method setActive(library, favorite, online)
            {
                var list = [
                    ["Library", library],
                    ["Favorite", favorite],
                    ["Online", online]
                ];

                foreach (|var name, var flag| in list)
                {
                    HBox[name].active = flag;
                    HBox[name].bg.visible = !flag;
                    HBox[name].bgA.visible = flag;
                }

                var search_sort = PhotoPopup.strategy.getLocalizeKey("SearchSort");
                if (search_sort != nil)
                {
                    Popup::Pane::Title::HBox::SearchSort.visible = true;
                    Popup::Pane::Title::HBox::SlideShow.visible = true;

                    var mode_search_sort = search_sort == "SEARCH_SORT";

                    startActors(Popup::Pane::Body::Filter::VBox::Search, mode_search_sort);

                    Popup::Pane::Body::Filter::VBox::Search.insensitive = !mode_search_sort;
                }

                else
                {
                    Popup::Pane::Title::HBox::SearchSort.visible = false;
                    Popup::Pane::Title::HBox::SlideShow.visible = false;

                    startActors(Popup::Pane::Body::Filter, true);
                    startActors(Popup::Pane::Body::bg, true);

                    Popup::Pane::Body::Filter.insensitive = true;

                    Popup::Pane::Title::HBox::SearchSort.flag = false;
                    Popup::Pane::Title::HBox::SearchSort.active = false;
                }

            }

            module HBox
            {
                module Library
                {
                    method onActivate(context)
                    {
                        if (!self.active)
                        {
                            main::sound.play("tab_switch");
                            PhotoPopup.strategy = LibraryStrategy();
                        
                            setActive(true, false, false);
                        
                            PhotoPopup.initialize(context);
                        }
                    
                        return EVENTRESULT_FILTER;
                    }
                }

                module Favorite
                {
                    method onActivate(context)
                    {
                        if (!self.active)
                        {
                            main::sound.play("tab_switch");
                            PhotoPopup.strategy = FavoritePhotoStrategy();
                        
                            setActive(false, true, false);
                        
                            PhotoPopup.initialize(context);
                        }
                    
                        return EVENTRESULT_FILTER;
                    }    
                }

                module Online
                {
                    method onActivate(context)
                    {
                        if (!self.active)
                        {
                            main::sound.play("tab_switch");
                            PhotoPopup.strategy = OnlinePhotoStrategy();
                        
                            setActive(false, false, true);
                        
                            PhotoPopup.initialize(context);
                        }
                    
                        return EVENTRESULT_FILTER;
                    }    
                }
            }
        }

        module Title::HBox
        {
            method onFocusEnter(context, event)
            {
                var w = event.widget;
                var localized_text = context.translate(PhotoPopup, "MyHome", PhotoPopup.strategy.getLocalizeKey(w.name));
                BalloonTip.set_value(context, w, localized_text, 0);

                return EVENTRESULT_FILTER;
            }

            method onFocusLeave(context)
            {
                BalloonTip.reset_value();

                return EVENTRESULT_FILTER;
            }

            module Close
            {
                method onActivate(context)
                {
                    main::sound.play("ok");
                    PhotoPopup.close(context);
                
                    return EVENTRESULT_FILTER;
                }
            
                method onCancel(context)
                {
                    main::sound.play("cancel");
                    PhotoPopup.close(context);
                
                    return EVENTRESULT_FILTER;
                }
            }

            module SearchSort
            {
                attribute flag = true;
                
                method onActivate(context)
                {
                    main::sound.play("ok");
                
                    startActors(Popup::Pane::Body::Filter, self.flag);
                    startActors(Popup::Pane::Body::bg, self.flag);
                
                    Popup::Pane::Body::Filter.insensitive = self.flag;
                    self.flag = !self.flag;
                
                    self.active = self.flag;
                
                    return EVENTRESULT_FILTER;
                }
            }

            module SlideShow
            {
                method onActivate(context)
                {
                    main::sound.play("ok");
                    var params = SettingSlideShowDialog.open(context);

                    if (params != nil)
                    {
                        SlideShowPopup.open(context, PhotoPopup.strategy.photo_list, params);
                    }

                    return EVENTRESULT_FILTER;
                }    
            }
        }

        module Body
        {
            module Filter::VBox
            {
                module Search
                {
                    module RadioBox
                    {
                        static TABLE = [
                            "All" : nil,
                            "Race" : PhotoFileUtil::GENRE::PHOTO_RACE,
                            "Travel" : PhotoFileUtil::GENRE::PHOTO_TRAVEL,
                            "Profile" : PhotoFileUtil::GENRE::PHOTO_PROFILE
                        ];
                    
                        method onActivate(context, event)
                        {
                            var genre = TABLE[event.widget.parent.name];
                        
                            if (PhotoPopup.genre != genre)
                            {
                                PhotoPopup.genre = genre;
                                PhotoPopup.initializeTitleList(context);
                                PhotoPopup.initialize(context);
                            }
                        
                            return EVENTRESULT_FILTER;
                        }    
                    }

                    module OptionMenu
                    {
                        method onValueChanged(context)
                        {
                            self.pulldownValueChanged(context);
                        
                            if (PhotoPopup.title_index != self.index)
                            {
                                PhotoPopup.title_index = self.index;
                            
                                if (!PhotoPopup.ignore_update)
                                    PhotoPopup.initialize(context);
                            }
                        
                            return EVENTRESULT_FILTER;
                        }    
                    }
                }

                module Order::RadioBox
                {
                    static TABLE = [
                        "ShootingDate" : "datetime",
                        "ShootingPlace" : "title",
                        "FileSize" : "filesize"
                    ];
                
                    method onActivate(context, event)
                    {
                        var name = event.widget.parent.name;
                        var order = TABLE[name];
                    
                        if (PhotoPopup.order != nil)
                        {
                            PhotoPopup.order = order;
                            PhotoPopup.initialize(context);
                        }
                    
                        return EVENTRESULT_FILTER;
                    }    
                }

                module By::RadioBox
                {
                    method onActivate(context, event)
                    {
                        var by = event.widget.parent.name.upcase();
                    
                        if (PhotoPopup.by != by)
                        {
                            PhotoPopup.by = by;
                            PhotoPopup.initialize(context);
                        }
                    
                        return EVENTRESULT_FILTER
                    }    
                }
            }

            module List
            {
                attribute finder;
                attribute view_mode = 1;
                attribute multi_select = false;
                attribute select_map;
                attribute select_all;

                function updateStatus(context, photo, item_w)
                {
                    var exist = PhotoFileUtil::isExist(photo.id);

                    if (!exist)
                    {
                        item_w.invalid = true;
                        item_w.ImageFaceD.visible = true;

                        foreach (var label in ["header", "body", "bodyR", "keyword1", "ImageFace", "online", "favorite", "check"])
                        {
                            if (item_w[label] != nil)
                                item_w[label].visible = false;
                        }

                        if (item_w["title"] != nil)
                            item_w.title.text = context.translate(PhotoPopup, "MyHome", "NO_DATA");
                    }
                    else
                    {
                        if (item_w["title"] != nil)
                            item_w.title.text = Function::getTitle(context, photo);

                        if (item_w["header"] != nil)
                        {
                            var list = photo.filename.split("/");
                            item_w.header.text = list[list.size - 1];
                        }

                        if (item_w["body"] != nil)
                            item_w.body.text = getDateTime(context, PhotoPopup, photo.datetime);

                        if (item_w["bodyR"] != nil)
                            item_w.bodyR.text = UnitUtil::getDiskSizeString(context, photo.filesize);

                        if (item_w["keyword1"] != nil)
                        {
                            var keyword = "";

                            switch (PhotoPopup.order)
                            {
                                case "datetime":
                                    keyword = getDateTime(context, PhotoPopup, photo.datetime);
                                    break;

                                case "title":
                                    keyword = Function::getTitle(context, photo);
                                    break;

                                case "filesize":
                                    keyword = UnitUtil::getDiskSizeString(context, photo.filesize);
                                    break;    
                            }

                            if (keyword != "")
                            {
                                item_w.keyword1.visible = true;
                                item_w.keyword1.TextFace.text = keyword;
                            }
                        }

                        item_w.ImageFace.image_path = photo.filename_t;

                        var online = photo.online == 1;
                        var favorite = !online && photo.favorite == 1;

                        item_w.online.visible = online;
                        item_w.favorite.visible = favorite;

                        item_w.check.visible = List.multi_select && List.select_map[photo.id] != nil;
                    }
                }

                function onInitItem(context, candidate_data, item_w, arg)
                {
                    var photo = candidate_data.value_;
                    item_w.invalid = false;

                    updateStatus(context, photo, item_w);
                }

                function onInitItemFriend(context, candidate_data, item_w, arg)
                {
                    var photo = candidate_data.value_;

                    if (item_w["title"] != nil)
                        item_w.title.text = Function::getPlace(context, photo);

                    if (item_w["header"] != nil)
                        item_w.header.text = photo["car_name"];

                    if (item_w["body"] != nil)
                        item_w.body.text = getDateTime2(context, PhotoPopup, photo["create_time"]);

                    var photo_id = photo["photo_id"];
                    var image_path = Photo.getThumbnailPath(photo_id);
                    if (pdistd::Exist(image_path))
                        item_w.ImageFace.image_path = image_path;
                    else
                    {
                        Photo.requestThumbnail(photo_id, function (args) 
                        {
                            |var context, var request| = args;

                            if (request.isDone())
                                item_w.ImageFace.image_path = image_path;
                        });
                    }
                }

                function updateStatusAll2(context)
                {
                    if (List.multi_select)
                    {
                        List.multi_select = false;
                        ButtonHelpGT5.set(context, PhotoPopup.button_help);
                    }

                    updateStatusAll(context);
                }

                function updateStatusAll2If(context)
                {
                    var state = context.getUpdateContext().getPadButtonState(0);
                    if ((state & 0x100) != 0x100)
                        updateStatusAll2(context);
                }

                function updateStatusAll(context)
                {
                    var count = List.finder.getItemCount(context);
                    for (var i = 0; i < count; ++i)
                    {
                        var item_w = List.finder.getItemWidget(i);
                        if (item_w == nil)
                            continue;
                        
                        var candidate_data = List.finder.getItemData(context, i);
                        if (candidate_data == nil)
                            continue;

                        var photo = candidate_data.value_;
                        updateStatus(context, photo, item_w);
                    }
                }

                function onActivateItem(context, folder_data, func_close, arg)
                {
                    if (PhotoPopup.closed)
                        return;

                    var candidate_data = folder_data.getItemData();
                    var photo = candidate_data.value_;

                    var focus_index = List.finder.getFocusIndex(context);
                    var item_w = List.finder.getItemWidget(focus_index);

                    if (item_w == nil)
                        return;

                    if (PhotoPopup.mode == Mode::FINDER)
                    {
                        if (List.multi_select)
                        {
                            if (List.select_map[photo.id] == nil)
                                List.select_map[photo.id] = photo;
                            else
                                List.select_map[photo.id] = nil;

                            List::updateStatus(context, photo, item_w);
                        }
                        else
                        {
                            var res = Function::showDetail(context, photo, [
                                PhotoPopup.strategy.photo_list, 
                                candidate_data.item_index_, 
                                PhotoPopup.strategy.canDelete(), 
                                isFriend()
                            ], List::updateStatus, item_w);

                            if (res)
                                List::updateStatusAll(context);
                        }
                    }

                    else if (PhotoPopup.mode == Mode::PROFILE)
                    {
                        var res = Function::updateProfile(context, photo);
                        if (res)
                            PhotoPopup.close(context);
                    }
                }

                function updateStatusAllIf(context)
                {
                    var state = context.getUpdateContext().getPadButtonState(0);
                    if ((state & 0x100) != 0x100)
                    {
                        ButtonHelpGT5.set(context, PhotoPopup.button_help);
                        return;
                    }

                    ButtonHelpGT5.set(context, PhotoPopup.button_help_l1);
                    List.multi_select = true;
                    
                    var selected = false;
                    foreach (|var key, var value| in List.select_map)
                    {
                        if (value != nil)
                        {
                            selected = true;
                            break;
                        }
                    }

                    if (!selected)
                        return;

                    updateStatusAll(context);
                }

                function on_focus_enter(context, candidate_data, item_w, arg)
                {
                    var result = ButtonHelpGT5.appearIf();

                    if (result)
                    {
                        if (!isFriend() && PhotoPopup.mode == Mode::FINDER)
                            updateStatusAllIf(context);
                    }

                    if (List.view_mode == 2)
                    {
                        var photo = candidate_data.value_;

                        if (isFriend())
                        {
                            var text = Function::getPlace(context, photo);
                            BalloonTip.set_value(context, item_w, text, 16);
                        }
                        else
                        {
                            var text = (item_w.invalid) ? context.translate(PhotoPopup, "MyHome", "NO_DATA") : Function::getTitle(context, photo);
                            BalloonTip.set_value(context, item_w, text, 16);
                        }
                    }

                }

                function on_focus_leave(context, candidate_data, item_w, arg)
                {
                    BalloonTip.reset_value();
                }

                method initializeFinder(context)
                {
                    self.multi_select = false;
                    self.select_map = Map();
                    self.select_all = false;

                    var initial_data = makeInitialData(context);
                    self.finder = UIKitProject::FinderRoot.setCopy(context, self, initial_data, false);

                    var title = nil;

                    if (PhotoPopup.title_list != nil)
                        title = PhotoPopup.title_list[PhotoPopup.title_index];

                    PhotoPopup.strategy.initializeFinder(context, self.finder, PhotoPopup.genre, title, PhotoPopup.order, PhotoPopup.by);
                }

                method makeInitialData(context)
                {
                    var Finder = UIKitProject::FinderRoot;
                    var candidates = Finder.makeCandidates(Array(0));

                    var initial_data = Finder.InitialData(candidates);

                    initial_data.view_type_ = Finder.ViewType::SCROLL_V;

                    initial_data.cb_init_item_ = (isFriend()) ? onInitItemFriend : onInitItem;

                    initial_data.cb_on_activate_ = onActivateItem;
                    initial_data.v_scrollbar_ = Scrollbar::VScrollbar;
                    initial_data.item_cache_ = false;

                    if (self.view_mode == 1)
                    {
                        initial_data.extended_item_ = hidden::ItemList;
                        initial_data.h_item_count_ = 2;
                    }
                    else
                    {
                        initial_data.extended_item_ = hidden::ItemIcon;
                        initial_data.h_item_count_ = 4;
                    }

                    initial_data.cb_focus_enter_ = on_focus_enter;
                    initial_data.cb_focus_leave_ = on_focus_leave;
                    initial_data.import_iconbox_parameter_ = hidden::IconBox;

                    return initial_data;
                }

                method finalizeFinder(context)
                {
                    if (self.finder != nil)
                    {
                        self.removeChild(context, self.finder);
                        self.finder = nil;
                    }

                    BalloonTip.reset_value();

                }

                method changeViewMode(context, _view_mode)
                {
                    if (_view_mode == self.view_mode)
                        return;

                    finalizeFinder(context);
                    self.view_mode = _view_mode;
                    initializeFinder(context);

                    self.finder.onFocus(context);
                }

                method onNullCallback(context, data)
                {

                }

                method showContextMenu(context)
                {
                    var focus_index = self.finder.getFocusIndex(context);
                    var item_w = self.finder.getItemWidget(focus_index);

                    if (item_w == nil || item_w.invalid)
                        return;

                    var candidate_data = self.finder.getItemData(context, focus_index);
                    var photo = candidate_data.value_;

                    var delete_mode = PhotoPopup.strategy.canDelete();

                    var on = context.translate(PhotoPopup, "MyHome", "ON");
                    var off = context.translate(PhotoPopup, "MyHome", "OFF");

                    var favorite_cascade = [
                        UIKitProject::ContextMenuPopup::Data(on, true, (photo.favorite) ? onNullCallback : onFunctionCallback, ["setFavorite", photo, true, List::updateStatus, item_w]),
                        UIKitProject::ContextMenuPopup::Data(off, true, (photo.favorite) ? onFunctionCallback : onNullCallback, ["setFavorite", photo, false, List::updateStatus, item_w])
                    ];
                    favorite_cascade[0].on = photo.favorite == 1;
                    favorite_cascade[1].on = photo.favorite == 0;

                    var online_cascade = [
                        UIKitProject::ContextMenuPopup::Data(on, true, (photo.online) ? onNullCallback : onFunctionCallback, ["setOnline", photo, true, List::updateStatus, item_w]),
                        UIKitProject::ContextMenuPopup::Data(off, true, (photo.online) ? onFunctionCallback : onNullCallback, ["setOnline", photo, false, List::updateStatus, item_w])
                    ];
                    online_cascade[0].on = photo.online == 1;
                    online_cascade[1].on = photo.online == 0;

                    var data_list = [
                        UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "BUTTON_HELP_SHOW"), true, onFunctionCallback, ["showDetail", photo, [PhotoPopup.strategy.photo_list, focus_index, delete_mode, false], List::updateStatusAll]),
                        nil // Separator
                    ];

                    var menu_list = PhotoPopup.strategy.createMenuList(context, 
                        photo, 
                        favorite_cascade, 
                        online_cascade, 
                        List::updateStatus, item_w);

                    data_list += menu_list;

                    var can_export = true;
                    var export_photo_list = Array();
                    var delete_photo_list = Array();

                    var count = self.finder.getItemCount(context);

                    for (var i = 0; i < count; ++i)
                    {
                        var candidate_data = self.finder.getItemData(context, i);
                        if (candidate_data != nil)
                        {
                            var photo = candidate_data.value_;
                            export_photo_list.push(photo);
                            delete_photo_list.push(photo);
                        }
                    }

                    data_list += [
                        UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "PHOTOEXPORT"), can_export, onFunctionCallback, ["export", photo, nil, List::updateStatus, item_w]),
                        UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "DELETE"), delete_mode, onFunctionCallback, ["delete", photo, nil, List::updateStatus, item_w]), 
                        nil, // Separator
                        UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "PHOTOEXPORT_ALL"), export_photo_list.size > 0, onFunctionCallback, ["exportAll", export_photo_list, nil, List::updateStatusAll, item_w]),
                        UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "DELETEALL"), delete_photo_list.size > 0, onFunctionCallback, ["deleteAll", delete_photo_list, nil, List::updateStatusAll]),
                        nil, // Separator
                        UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "CANCEL"), true, onNullCallback, nil)
                    ];

                    var title = nil;
                    var x = item_w.sx + (item_w.w * item_w.cursor_align_x);
                    var y = item_w.sy + (item_w.h * item_w.cursor_align_y);

                    UIKitProject::ContextMenuPopup.open(context, x, y, title, data_list);
                }

                method showContextMenuMultiSelect(context)
                {
                    var focus_index = self.finder.getFocusIndex(context);
                    var item_w = self.finder.getItemWidget(focus_index);

                    if (item_w == nil || item_w.invalid)
                        return;

                    if (self.select_map == nil || self.select_map.size == 0)
                        return;

                    var export_photo_list = Array();
                    var delete_photo_list = Array();

                    foreach (|var key, var photo| in self.select_map)
                    {
                        if (photo == nil)
                            continue;
                        
                        export_photo_list.push(photo);
                        delete_photo_list.push(photo);
                    }

                    var data_list = [
                        UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "PHOTOEXPORT_SELECTED"), export_photo_list.size > 0, onFunctionCallback, ["exportAll", export_photo_list, nil, List::updateStatusAll2If]),
                        UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "DELETE_SELECTED"), delete_photo_list.size > 0, onFunctionCallback, ["deleteAll", delete_photo_list, nil, List::updateStatusAll2If]),
                        nil, // Separator
                        UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "CANCEL"), true, List::updateStatusAll2If, nil)
                    ];

                    var title = nil;
                    var x = item_w.sx + (item_w.w * item_w.cursor_align_x);
                    var y = item_w.sy + (item_w.h * item_w.cursor_align_y);
                    var result = UIKitProject::ContextMenuPopup.open(context, x, y, title, data_list);

                    if (!result)
                        List::updateStatusAll2If(context);
                }

                method showContextMenuFriend(context)
                {
                    var focus_index = self.finder.getFocusIndex(context);
                    var widget = self.finder.getItemWidget(focus_index);

                    if (widget == nil)
                        return;

                    var candidate_data = self.finder.getItemData(context, focus_index);
                    var photo = candidate_data.value_;

                    var data_list = [
                        UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "BUTTON_HELP_SHOW"), true, onFunctionCallback, ["showDetail", photo,  [PhotoPopup.strategy.photo_list, focus_index, false, true]]), nil,
                        UIKitProject::ContextMenuPopup::Data(context.translate(PhotoPopup, "MyHome", "CANCEL"), true, onNullCallback, nil)
                    ];

                    var title = nil;
                    var x = widget.sx + (widget.w * widget.cursor_align_x);
                    var y = widget.sy + (widget.h * widget.cursor_align_y);

                    UIKitProject::ContextMenuPopup.open(context, x, y, title, data_list);
                }

                method toggleSelect(context)
                {
                    if (self.select_all)
                        self.select_map = Map();
                    else
                    {
                        var count = self.finder.getItemCount(context);
                        for (var i = 0; i < count; ++i)
                        {
                            var candidate_data = self.finder.getItemData(context, i);
                            if (candidate_data == nil)
                                continue;
                            
                            var photo = candidate_data.value_;
                            self.select_map[photo.id] = photo;
                        }
                    }

                    self.select_all = !self.select_all;
                    updateStatusAll(context);
                }

                method onKeyPress(context, event)
                {
                    if (PhotoPopup.closed)
                        return EVENTRESULT_CONTINUE;
                    else
                    {
                        if (event.keysym == CELL_PAD_CTRL_L1)
                        {
                            if (!isFriend() && PhotoPopup.mode == Mode::FINDER)
                            {
                                self.multi_select = true;
                                ButtonHelpGT5.set(context, PhotoPopup.button_help_l1);
                                updateStatusAll(context);
                            }
                        }
                        else if (event.keysym == CELL_PAD_CTRL_L3_LEFT)
                        {
                            BalloonTip.reset_value();
                            ButtonHelpGT5.hide();

                            if (!isFriend())
                            {
                                self.multi_select = false;
                                updateStatusAll(context);
                            }

                            return EVENTRESULT_CONTINUE;
                        }
                        else if (event.keysym == CELL_PAD_CTRL_TRIANGLE)
                        {
                            if (PhotoPopup.mode == Mode::FINDER)
                            {
                                main::sound.play("context_menu_op");

                                if (isFriend())
                                    showContextMenuFriend(context);
                                else if (self.multi_select)
                                    showContextMenuMultiSelect(context);
                                else
                                    showContextMenu(context);
                            }

                            return EVENTRESULT_FILTER;
                        }
                        else if (event.keysym == CELL_PAD_CTRL_SQUARE)
                        {
                            if (self.multi_select)
                                toggleSelect(context);
                            else if (self.view_mode == 1)
                                changeViewMode(context, 2);
                            else
                                changeViewMode(context, 1);

                            return EVENTRESULT_FILTER;
                        }
                    }

                    return EVENTRESULT_CONTINUE;
                }

                method onKeyRelease(context, event)
                {
                    if (event.keysym == CELL_PAD_CTRL_L1)
                    {
                        if (!isFriend())
                            updateStatusAll2(context);
                    }

                    return EVENTRESULT_CONTINUE;
                }
            } //List
        } //Body
    } //Popup::Pane
}