

//---------------------------------------------------------------------------------------
// GameItemUtil.ad
//
// Utility module for managing paints.
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module GameItemUtil
{
    class GameItemRecord
    {
        attribute itembox_id;
        attribute gameitem_id;
        attribute create_date;
        attribute gameday;
        attribute status;
        attribute type_id;
        attribute category_id;
        attribute exp_threshold;
        attribute item_code;
        attribute item_name;
        attribute item_name_id;
        attribute item_description;
        attribute item_description_id;
        attribute argument1;
        attribute argument2;
        attribute argument3;
        attribute argument4;
        attribute code;
        attribute blob;
        attribute price;
        attribute present_flag;
        attribute sender;
        attribute comment;
        attribute presentbox_itembox_id;
        attribute count;
        attribute defines_type;
        attribute value;

        method __init__()
        {
            self.itembox_id = 0;
            self.gameitem_id = 0;
            self.create_date = "";
            self.gameday = 0;
            self.status = 0;
            self.type_id = 0;
            self.category_id = 0;
            self.exp_threshold = 0;
            self.item_code = "";
            self.item_name = "";
            self.item_name_id = 0;
            self.item_description = "";
            self.item_description_id = 0;
            self.argument1 = 0;
            self.argument2 = 0;
            self.argument3 = 0;
            self.argument4 = 0;
            self.code = "";
            self.blob = "";
            self.price = 0;
            self.present_flag = 1;
            self.sender = "";
            self.comment = "";
            self.presentbox_itembox_id = 0;
            self.count = 0;
            self.defines_type = "";
            self.value = "";
        }

        // Overload [];
        method __get_elem__(i)
        {
            return self.getObjectAttribute(i);
        }

        method __set_elem__(i, val)
        {
            if (val == nil)
                return;

            self.setObjectAttribute(i, val);
        }

        function GetAttributeNames()
        {
            var attr_names = [];
            foreach (|var a, var v| in GameItemRecord)
            {
                if (v.is_attribute)
                    attr_names.push(a.toString());
            }

            return attr_names;
        }

        method setParam(columns, params)
        {
            for (var i = 0; i < columns.size; i++)
            {
                var column = columns[i];
                self.setObjectAttribute(column, params[i]);
            }
        }
    }

    static horn_format_no;
    static item_image_path = "/piece/itemcategory/info_item.img";
    static museum_item_image_path = "/piece/itemcategory/info_museum_card.img";
    static ticket_image_path = "/piece/itemcategory/info_ticket.img";
    static color_paint_item_image_path = "/piece/itemcategory/info_color_paint.img";
    static racing_helmet_item_image_path = "/piece/itemcategory/info_racing_helmet.img";
    static racing_suit_item_image_path = "/piece/itemcategory/info_racing_suit.img";
    static special_wear_set_item_image_path = "/piece/itemcategory/info_special_wear_set.img";
    static admission_item_image_path = "/piece/itemcategory/info_admission.img";
    static body_chassis_item_image_path = "/piece/itemcategory/info_body_chassis.img";
    static booster_item_image_path = "/piece/itemcategory/info_booster.img";
    static brake_item_image_path = "/piece/itemcategory/info_brake.img";
    static drivetrain_item_image_path = "/piece/itemcategory/info_drivetrain.img";
    static emission_item_image_path = "/piece/itemcategory/info_emission.img";
    static engine_item_image_path = "/piece/itemcategory/info_engine.img";
    static horn_item_image_path = "/piece/itemcategory/info_horn.img";
    static others_item_image_path = "/piece/itemcategory/info_others.img";
    static suspension_item_image_path = "/piece/itemcategory/info_suspension.img";
    static transmission_item_image_path = "/piece/itemcategory/info_transmission.img";
    static conforttire_item_image_path = "/piece/itemcategory/info_conforttire.img";
    static sporttire_item_image_path = "/piece/itemcategory/info_sporttire.img";
    static racingtire_item_image_path = "/piece/itemcategory/info_racingtire.img";
    static specialtire_item_image_path = "/piece/itemcategory/info_specialtire.img";
    static coupon_item_image_path = "/piece/itemcategory/info_coupon.img";

    function pack(gameitem)
    {
        var buf = gameitem.serialize();
        var blob = main::pdistd::MBlob(buf);
        var packed_blob = pdistd::Deflate(blob);
        return packed_blob;
    }

    function createBlobFromGameItem(gameitem)
    {
        var gi = main::gtengine::MGameItem();
        gi.itemtype = gameitem.type_id;
        gi.itemcategory = gameitem.category_id;
        gi.argument1 = gameitem.argument1;
        gi.argument2 = gameitem.argument2;
        gi.argument3 = gameitem.argument3;
        gi.argument4 =  (gameitem.present_flag != nil && gameitem.present_flag == 0) ? gameitem.gameitem_id * -1 : gameitem.gameitem_id;
        gi.f_name = gameitem.code;

        if (gameitem.type_id == main::gtengine::GameItemType::CAR)
            gi.blob = gameitem.blob;
        else
        {
            var entity = ItemBox::getItemEntity(gameitem.itembox_id);
            var zero_blob = pdistd::MBlob("0");
            if (entity == nil || entity == "" || entity == zero_blob)
                entity = "0";

            gi.blob = main::pdistd::MBlob(entity);
        }

        return pack(gi);
    }

    function createBlobFromCarParameter(cp)
    {
        var gi = main::gtengine::MGameItem();
        gi.itemtype = main::gtengine::GameItemType::SPECIAL;
        gi.itemcategory = main::gtengine::GameItemCategory::PRESENTCAR_TICKET;
        gi.argument1 = 0;
        gi.argument2 = 0;
        gi.argument3 = 0;
        gi.argument4 = 266;
        gi.f_name = cp.getCarLabel();
        
        var buf = cp.serialize();
        gi.blob = main::pdistd::MBlob(buf);
        return pack(gi);
    }

    function createBlobFromMuseum(museum)
    {
        var gi = main::gtengine::MGameItem();
        gi.itemtype = gtengine::GameItemType::MUSEUMCARD;
        gi.itemcategory = gtengine::GameItemCategory::MUSEUMCARD;
        gi.argument1 = 0;
        gi.argument2 = 0;
        gi.argument3 = 0;
        gi.argument4 = 0;
        gi.f_name = museum["museum_id"];
        
        gi.blob = main::pdistd::MBlob(museum["museum_id"]);
        return pack(gi);
    }

    function getTuneShopGoods(category_id)
    {
        var id_list = GAME_STATUS.user_profile.itembox_tune_shop.getItemIDList(category_id);
        if (id_list == nil || id_list.size == 0)
            return nil;

        return GameItemData::getGameItemListFromIdList(id_list.join(","));
    }

    function getTuneShopMap(category_list)
    {
        var id_list = GAME_STATUS.user_profile.itembox_tune_shop.getItemIDListFromCategorys(category_list);
        if (id_list == nil || id_list.size == 0)
            return nil;

        var item_list = GameItemData::getGameItemListFromIdList(id_list.join(","));
        var item_map = [:];
        foreach (var item in item_list)
        {
            item_map.insert([item.item_code : item]);
        }

        return item_map;
    }

    function getTunePartsCategoryList()
    {
        return GameItemData::getCategoryList(gtengine::GameItemType::TUNEPARTS);
    }

    function getPartsList()
    {
        var list = GAME_STATUS.user_profile.itembox_tune_shop.getItemBoxList3(gtengine::GameItemType::TUNEPARTS);
        list = (list == nil || list.size == 0) ? Array() : GameItemData::getGameItemListFromItemBox(list);
        return list;
    } 
    
    function getAvatorItemList()
    {
        var list = GameItemData::getAvatorItemList();
        list = (list == nil || list.size == 0) ? Array() : GameItemData::getGameItemListFromItemBox(list);
        return list;
    }

    function putPaintItem(color, context, root)
    {
        if (color <= 0)
            return;

        if (GAME_STATUS.user_profile.itembox.getNum() + 1 >= GAME_STATUS.user_profile.itembox.max_itembox)
            return;

        var color_name = gtengine::MSpecDB::getPaintColorName_A(color);
        if (color_name == nil || color_name.trim() == "")
            return;

        var item = getItemByCode("paint_01");
        item.argument1 = color;
        item.argument2 = gtengine::MSpecDB::getPaintColorType(color);
        item.argument3 = gtengine::MSpecDB::getPaintColorRGB(color, 0).normalize * 10000;
        item.item_name = color_name;
        item.code = gtengine::MSpecDB::getPaintColorTunerString(color);
        
        var res = ItemBox::insertItemList([item]);
        if (res)
        {
            if (context != nil && root != nil)
            {
                DialogUtil::openInformationDialog(context, 
                    context.translate(root, "MyHome", "QUERY_GET_PAINT_ITEM").build(color_name), nil, getItemImagePath(item.type_id, item.gameitem_id, item));
            }
        }

        return res;
    }

    function getCarRefreshTicket()
    {
        return onNotPresentFlag(getItemByCode("car_refresh_ticket"))
    }

    function getBodyRefreshTicket()
    {
        return onNotPresentFlag(getItemByCode("body_refresh_ticket"))
    }

    function getOilChangeTicket()
    {
        return onNotPresentFlag(getItemByCode("oil_change_ticket"))
    }

    function getCarWashTicket()
    {
        return onNotPresentFlag(getItemByCode("car_wash_ticket"))
    }

    function getOverHaulicket()
    {
        return onNotPresentFlag(getItemByCode("overhaul_ticket"))
    }

    function isCarRefreshTicket(item)
    {
        return item.item_code == "car_refresh_ticket";
    }

    function isBodyRefreshTicket(item)
    {
        return item.item_code == "body_refresh_ticket";
    }

    function isOilChangeTicket(item)
    {
        return item.item_code == "oil_change_ticket";
    }

    function isCarWashTicket(item)
    {
        return item.item_code == "car_wash_ticket";
    }

    function isOverHaulicket(item)
    {
        return item.item_code == "overhaul_ticket";
    }

    function isCanUseSpecialTicket(gameitem_id)
    {
        return gameitem_id == 396;
    }

    function onNotPresentFlag(item)
    {
        item.present_flag = 0;
        return item;
    }

    function getItemByCode(item_code)
    {
        var item_map = GameItemData::getItemByCode([item_code]);
        foreach (|var k, var v| in item_map)
            return v;

        return nil;
    }

    function getItemByID(gameitem_id)
    {
        var item_map = GameItemData::getItemByID([gameitem_id]);
        foreach (|var k, var v| in item_map)
            return v;

        return nil;
    }

    function getCategoryName(category)
    {
        return GameItemData::getCategoryName(category);
    }

    function getItemText(gameitem)
    {
        return GameItemData::getItemText(gameitem);
    }

    function getOriginItemName(gameitem)
    {
        return GameItemData::getOriginItemName(gameitem);
    }

    function getAllItem(type_id)
    {
        return nil;
    }

    function getAllItemIDNAME()
    {
        return nil;
    }

    function getPresentCarList(gameitem_id)
    {
        return GameItemData::getPresentCarList(gameitem_id);
    }

    function isCarTicket(item)
    {
        return item.item_code == "presentcar_ticket_00";
    }

    function isCarTicketByPresent(item)
    {
        return item.gameitem_id == 266;
    }

    function isAvatorItem(item)
    {
        return item.type_id == 3;
    }

    function isPaintItem(present)
    {
        return present.category_id == gtengine::GameItemCategory::PAINT_ITEM;
    }

    function isSpecialPaintItem(present)
    {
        return present.category_id == gtengine::GameItemCategory::SPECIAL_PAINT_ITEM;
    }

    function getPaintItem()
    {
        return getItemByID(101);
    }

    function getSpecialPaintItem()
    {
        return getItemByID(103);
    }

    function isHornItem(present)
    {
        return present.gameitem_id == 100;
    }

    function getHornItem()
    {
        return getItemByID(100);
    }

    function getHornSound()
    {
        return pdistd::MRandom::GetValue(1, 280);
    }

    function getHornName(horn_id)
    {
        var horn_format = "No.";
        if (horn_format_no == nil || horn_format_no == "")
            horn_format += "%03d".format(horn_id);
        else
            horn_format = horn_format_no.build("%03d".format(horn_id));

        return getCategoryName(gtengine::GameItemCategory::HORN) + " " + horn_format;
    }

    function makeAvatorItemName(item_name, color_id, avator_item_id)
    {
        if (!isHaveColorVariation(avator_item_id))
            return item_name;

        var item_name_ = item_name;
        item_name_ += "-%02d".format(color_id);
        return color_id == -1 ? item_name : item_name_;
    }

    function getItemImagePathPresentPopup(type_id, category_id)
    {
        var image_path = item_image_path;
        switch (type_id)
        {
            case gtengine::GameItemType::DRIVER_ITEM:
                if (category_id == gtengine::GameItemCategory::DRIVER_HEAD)
                   image_path = racing_helmet_item_image_path;
                else if (catgory_id == gtengine::GameItemCategory::DRIVER_BODY)
                    image_path = racing_suit_item_image_path;
                else if (category_id == gtengine::GameItemCategory::DRIVER_SET)
                    image_path = special_wear_set_item_image_path;
                break;

            case gtengine::GameItemType::MUSEUMCARD:
                image_path = museum_item_image_path;
                break;

            case gtengine::GameItemType::OTHERPARTS:
                image_path = color_paint_item_image_path;
                break;

            case gtengine::GameItemType::TUNEPARTS:
                image_path = getTunePartsImagePath(category_id);
                break;

            case gtengine::GameItemType::SPECIAL:
                if (category_id == gtengine::GameItemCategory::PRESENTCAR_TICKET)
                    image_path = ticket_image_path;
                else
                    image_path = coupon_item_image_path;
                break;

            default:
                break;
        }

        return image_path;
    }

    function getItemImagePath(type_id, gameitem_id, item, present_list_category_id)
    {
        var image_path = item_image_path;

        switch (type_id)
        {
            case gtengine::GameItemType::DRIVER_ITEM:
                if (item == nil && present_list_category_id == nil)
                    break;

                var category_id = present_list_category_id != nil ? present_list_category_id : item.category_id;
                if (category_id == gtengine::GameItemCategory::DRIVER_HEAD)
                {
                    if (gameitem_id == 0 || item.argument1 == -1)
                        image_path = racing_helmet_item_image_path;
                    else
                    {
                        var head_code = item.value;
                        var head_color_code = item.argument1;

                        image_path = ThumbnailUtil::Avatar::getImagePath(ThumbnailUtil::Avatar::Genre::SIMPLE, ThumbnailUtil::Avatar::Type::MET, "M",
                            head_code, head_color_code, 0, 0);
                    }
                }
                else if (category_id == gtengine::GameItemCategory::DRIVER_BODY)
                {
                    if (gameitem_id == 0 || item.argument1 == -1)
                        image_path = racing_suit_item_image_path;
                    else
                    {
                        var body_code = item.value;
                        var body_color_code = item.argument1;

                        image_path = ThumbnailUtil::Avatar::getImagePath(ThumbnailUtil::Avatar::Genre::SIMPLE, ThumbnailUtil::Avatar::Type::SUITS, "M",
                            0, 0, body_code, body_color_code);
                    }
                }
                else if (category_id == gtengine::GameItemCategory::DRIVER_SET && item != nil)
                {
                    var head_code = item.value;
                    var head_color_code = item.argument1;
                    var body_code = item.value;
                    var body_color_code = item.argument1;

                    image_path = ThumbnailUtil::Avatar::getImagePath(ThumbnailUtil::Avatar::Genre::SETUP, ThumbnailUtil::Avatar::Type::MET_SUITS, "M",
                        head_code, head_color_code, body_code, body_color_code);
                }
                break;

            case gtengine::GameItemType::MUSEUMCARD:
                image_path = museum_item_image_path;
                break;

            case gtengine::GameItemType::OTHERPARTS:
                image_path = color_paint_item_image_path;
                break;

            case gtengine::GameItemType::TUNEPARTS:
                image_path = getTunePartsImagePath(item.category_id);
                break;

            case gtengine::GameItemType::SPECIAL:
                if (item.category_id == gtengine::GameItemCategory::PRESENTCAR_TICKET)
                    image_path = ticket_image_path;
                else
                    image_path = coupon_item_image_path;
                break;

            default:
                break;
        }

        return image_path;
    }

    function getTunePartsImagePath(category_id)
    {
        var image_path = item_image_path;
        switch (category_id)
        {
            case gtengine::GameItemCategory::BODY_CHASSIS:
                image_path = body_chassis_item_image_path; break;
                
            case gtengine::GameItemCategory::ENGINE:
                image_path = engine_item_image_path; break;

            case gtengine::GameItemCategory::ADMISSION:
                image_path = admission_item_image_path; break;

            case gtengine::GameItemCategory::EMISSION:
                image_path = emission_item_image_path; break;

            case gtengine::GameItemCategory::BOOSTER:
                image_path = booster_item_image_path; break;

            case gtengine::GameItemCategory::TRANSMISSION:
                image_path = transmission_item_image_path; break;

            case gtengine::GameItemCategory::DRIVETRAIN:
                image_path = drivetrain_item_image_path; break;

            case gtengine::GameItemCategory::SUSPENSION:
                image_path = suspension_item_image_path; break;

            case gtengine::GameItemCategory::BTIRE:
                image_path = conforttire_item_image_path; break;

            case gtengine::GameItemCategory::CTIRE:
                image_path = sporttire_item_image_path; break;

            case gtengine::GameItemCategory::VTIRE:
                image_path = racingtire_item_image_path; break;

            case gtengine::GameItemCategory::STIRE:
                image_path = specialtire_item_image_path; break;

            case gtengine::GameItemCategory::HORN:
                image_path = horn_item_image_path; break;

            default:
                break;
        }

        return image_path;
    }

    function setParts(context, root, cp, item_code, itembox_flag = true)
    {
        if (cp == nil)
            return false;

        var gameitem = GameItemData::getGameItemFromItemCode(item_code);
        var car_name = gtengine::MSpecDB::getCarShortName(cp.getCarLabel());
        var res = false;
        var type = gtengine::CarPartsType[gameitem.defines_type];
        var category = getCategory(gameitem);

        var result = SettingUtil::validate(cp, type, category);
        var table = ["", "THIS_CAR_CANNOT_ATTACH", "THIS_PARTS_NEED_ORDERED", "THIS_PARTS_ALREADY_ATTACH", "THIS_PARTS_PREV_ORDERED", "THIS_ALERT_UNSET"];

        if (result != SettingUtil::RESULT::ERROR_SUCCESS && result != SettingUtil::RESULT::ALERT_UNSET)
        {
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, context.translate(root, "MyHome", table[result]).build(gameitem.item_name));
            return false;
        }

        cp.beginPartsInfo();
        cp.ownParts(type, category);

        if (isTireItem(gameitem))
        {
            var type_rear = gtengine::CarPartsType["REAR_TIRE"];
            cp.ownParts(type_rear, category);
        }

        cp.endPartsInfo();

        if (type == gtengine::CarPartsType::LIGHT_WEIGHT || 
            type == gtengine::CarPartsType::LIGHT_WEIGHT_WINDOW ||
            type == gtengine::CarPartsType::STIFFNESS ||
            type == gtengine::CarPartsType::BONNET || 
            type == gtengine::CarPartsType::NATUNE)
            itembox_flag = false;

        var set_flag = true;

        if (itembox_flag)
        {
            if (result == SettingUtil::RESULT::ALERT_UNSET)
            {
                var set_off_parts_name = "";
                if (type == gtengine::CarPartsType::SUPERCHARGER)
                    set_off_parts_name = context.translate(root, "GameItemCategory", "BOOSTER_CATEGORY_HEAD");
                else if (type == gtengine::CarPartsType::TURBINEKIT)
                    set_off_parts_name = context.translate(root, "GameItemCategory", "SUPERCHARGER");

                set_flag = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(root, "MyHome", "THIS_ALERT_UNSET_AND_SET").build(set_off_parts_name));
            }
            else
            {             
                set_flag = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(root,  "MyHome", "ATTACH_SUCCESS_AND_SET").build(car_name, gameitem.item_name));
            }
        }

        if (set_flag)
        {
            var res = SettingUtil::setParts(cp, type, category);
            if (res)
                cp.updateScratch();
            else
                return false;
        }

        GAME_STATUS.user_profile.garage.updateCar(cp, GAME_STATUS.user_profile.garage.riding_id);
        if (!set_flag)
        {
            var place_text_2 = context.translate(root, "MyHome", "TUNING");
            if (isTireItem(gameitem))
                place_text_2 = context.translate(root, "MyHome", "DRIVING_OPTION");

            DialogUtil::openConfirmDialog(context, DialogUtil::OK, context.translate(root, "MyHome", "OWN_SUCCESS").build(car_name, gameitem.item_name, place_text_2));
        }
        else
        {
            DialogUtil::openConfirmDialogAutoClose(context, DialogUtil::OK, context.translate(root, "MyHome", "SET_SUCCESS").build(gameitem.item_name));
        }

        return true;
    }

    function isTireItem(gameitem)
    {
        return gameitem.defines_type == "FRONT_TIRE";
    }

    function isBonnetItem(gameitem)
    {
        return gameitem.gameitem_id == 7 || gameitem.gameitem_id == 8;
    }

    function getCategory(item)
    {
        if (isTireItem(item))
        {
            return gtengine["PARTS_TIRE"][item.value];
        }
        else
        {
            return gtengine["PARTS_" + item.defines_type][item.value];
        }
    }

    function isExistsParts(cp, item)
    {
        if (cp == nil)
            return false;

        var ret = false;
        var gameitem = GameItemData::getGameItemFromItemCode(item.item_code);
        var type = gtengine::CarPartsType[gameitem.defines_type];
        var category = getCategory(gameitem);

        cp.beginPartsInfo();

        if (SettingUtil::checkExist(cp, type, category))
            ret = true;

        cp.endPartsInfo();
        return ret;
    }

    function isHavingBonnet(cp)
    {
        if (cp == nil)
            return false;

        var item = getItemByID(7);
        var item2 = getItemByID(8);
        return isHavingParts(cp, item) && isHavingParts(cp, item2);
    }

    function isHavingParts(cp, item)
    {
        if (cp == nil)
            return false;

        var ret = false;
        var gameitem = GameItemData::getGameItemFromItemCode(item.item_code);
        var type = gtengine::CarPartsType[gameitem.defines_type];
        var category = getCategory(gameitem);

        cp.beginPartsInfo();

        if (SettingUtil::checkHaving(cp, type, category))
            ret = true;

        cp.endPartsInfo();
        return ret;
    }    

    //////////////////////////////
    // # Avatars (Head/Body/Sets)
    //////////////////////////////
    function isHaveColorVariation(avator_ite_id)
    {
        return (avator_ite_id >= 14 && avator_ite_id <= 36) || (avator_ite_id >= 51 && avator_ite_id <= 57 && avator_ite_id != 55);
    }

    function isSpecialWearSet(avator_item_id)
    {
        return avator_item_id == 9 ||
               avator_item_id == 10 ||
               avator_item_id == 11 ||
               avator_item_id == 39 ||
               avator_item_id == 40 ||
               avator_item_id == 41 ||
               avator_item_id == 42 ||
               avator_item_id == 43 ||
               avator_item_id == 44 ||
               avator_item_id == 45 ||
               avator_item_id == 46 ||
               avator_item_id == 47 ||
               avator_item_id == 55;
    }

    function getRandomColorVariationAvatorHead()
    {
        var list = [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36];
        return list[pdistd::MRandom::GetValue(0, list.size)];
    }

    function getRandomColorVariationAvatorBody()
    {
        var list = [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35];
        return list[pdistd::MRandom::GetValue(0, list.size)];
    }

    function getRandomColorVariationAvatorHead110()
    {
        var list = [14, 15, 16, 17];
        return list[pdistd::MRandom::GetValue(0, list.size)];
    }

    function getRandomColorVariationAvatorBody110()
    {
        var list = [14, 15, 16, 17];
        return list[pdistd::MRandom::GetValue(0, list.size)];
    }

    function getRandomAvatorItemColor()
    {
        return pdistd::MRandom::GetValue(1, 34 + 1);
    }

    function getRandomAvatorHead()
    {
        var list = ItemBox::getList(gtengine::GameItemType::DRIVER_ITEM, gtengine::GameItemCategory::DRIVER_HEAD, nil, nil, nil, nil, nil, true, 1);
        return (list == nil || list.size == 0) ? nil : list[0];
    }

    function getRandomAvatorBody()
    {
        var list = ItemBox::getList(gtengine::GameItemType::DRIVER_ITEM, gtengine::GameItemCategory::DRIVER_BODY, nil, nil, nil, nil, nil, true, 1);
        return (list == nil || list.size == 0) ? nil : list[0];
    }

    function getAvatorHeadItem(avator_item_id)
    {
        var gameitem_id = GameItemData::getGameItemIDFromAvatorInfo(gtengine::GameItemCategory::DRIVER_HEAD, avator_item_id, -1);
        return getItemByID(gameitem_id);
    }

    function getAvatorBodyItem(avator_item_id)
    {
        var gameitem_id = GameItemData::getGameItemIDFromAvatorInfo(gtengine::GameItemCategory::DRIVER_BODY, avator_item_id, -1);
        return getItemByID(gameitem_id);
    }

    function takeOnAvatorItem(category, avator_item_id, color)
    {
        return ItemBox::takeOnAvatorItem(category, avator_item_id, color);
    }

    function takeOffAvatorItem(category, avator_item_id, color)
    {
        return ItemBox::takeOffAvatorItem(category, avator_item_id, color);
    }

    function getAvatorItemName(category, avator_item_id)
    {
        var gameitem_id = GameItemData::getGameItemIDFromAvatorInfo(category, avator_item_id, -1);
        var gameitem = GameItemUtil::GameItemRecord();
        gameitem.gameitem_id = gameitem_id;

        var text = getItemText(gameitem);
        return (text != nil && text[0] != nil && text[0] != "") ? text[0] : nil;
    }

    function getAvatorHeadName(id)
    {
        if (isSpecialWearSet(id))
            return getAvatorItemName(gtengine::GameItemCategory::DRIVER_SET, id);
        else
            return getAvatorItemName(gtengine::GameItemCategory::DRIVER_HEAD, id);
    }

    function getAvatorBodyName(id)
    {
        if (isSpecialWearSet(id))
            return getAvatorItemName(gtengine::GameItemCategory::DRIVER_SET, id);
        else
            return getAvatorItemName(gtengine::GameItemCategory::DRIVER_BODY, id);
    }

    //////////////////////////////
    // # Tickets
    //////////////////////////////

    static INSERT_ERROR = -1;
    static INSERT_SUCCESS = 0;

    function getCAR001(carcode_list, context)
    {
        return insertCarTicketByCarCodeList(carcode_list, context);
    }

    function insertCarTicketByCarCodeList(carcode_list, context)
    {
        var item_list = Array();
        foreach (var carcode in carcode_list)
        {
            var ticket = getItemByID(266);
            ticket.code = carcode;

            var color = gtengine::MSpecDB::getCarVariationFlag(carcode, 1);
            ticket.argument1 = color;
            ticket.present_flag = 0;
            item_list.push(ticket);
        }

        if (!ItemBox::insertItemList(item_list))
        {
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(context.getCursorProject(), "Component", "MAX_ITEMBOX"));
            return INSERT_ERROR;
        }
        
        return INSERT_SUCCESS;
    }

    function getWEAR001(wear_id_list, context)
    {
        var item_list = Array();
        foreach (var wear_data in wear_id_list)
        {
            var ticket = getItemByID(wear_data[0]);
            ticket.argument1 = wear_data[1];

            if (isDLCOnlyWearItem(wear_data[0]))
                ticket.present_flag = 0;
            item_list.push(ticket);
        }

        if (!ItemBox::insertItemList(item_list))
        {
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(context.getCursorProject(), "Component", "MAX_ITEMBOX"));
            return INSERT_ERROR;
        }

        return INSERT_SUCCESS;
    }

    function getPAINT001(paint_info_list, context)
    {
        var item_list = Array();
        foreach (var paint_info in paint_info_list)
        {
            var ticket = getItemByID(paint_info[0]);

            var color_name = gtengine::MSpecDB::getPaintColorName_A(paint_info[1]);
            ticket.argument1 = paint_info[1];
            ticket.argument2 = gtengine::MSpecDB::getPaintColorType(paint_info[1]);
            ticket.argument3 = gtengine::MSpecDB::getPaintColorRGB(paint_info[1], 0).normalize * 10000;
            ticket.item_name = color_name;
            ticket.code = gtengine::MSpecDB::getPaintColorTunerString(ticket.argument1);
            ticket.present_flag = 0;
            item_list.push(ticket);
        }

        if (!ItemBox::insertItemList(item_list))
        {
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(context.getCursorProject(), "Component", "MAX_ITEMBOX"));
            return INSERT_ERROR;
        }
        
        return INSERT_SUCCESS;
    }

    function isDLCOnlyWearItem(gameitem_id)
    {
        return gameitem_id == 368 || gameitem_id == 369 || gameitem_id == 370 ||
               gameitem_id == 371 || gameitem_id == 372 || gameitem_id == 373 ||
               gameitem_id == 374 || gameitem_id == 375 || gameitem_id == 392 ||
               gameitem_id == 393 || gameitem_id == 394 || gameitem_id == 395 ||
               gameitem_id == 382 || gameitem_id == 385 || gameitem_id == 380 ||
               gameitem_id == 379 || gameitem_id == 381 || gameitem_id == 388 ||
               gameitem_id == 389 || gameitem_id == 390 || gameitem_id == 367 ||
               gameitem_id == 378 || gameitem_id == 376 || gameitem_id == 366 ||
               gameitem_id == 386 || gameitem_id == 391;
    }

    module ItemBox
    {
        module GameItem
        {
            function getTypeList(status)
            {
                return GAME_STATUS.user_profile.itembox.getTypeList([
                    gtengine::GameItemType::DRIVER,
                    gtengine::GameItemType::DRIVER_ITEM,
                    gtengine::GameItemType::MUSEUMCARD,
                    gtengine::GameItemType::MOVIE,
                    gtengine::GameItemType::SPECIAL,
                    gtengine::GameItemType::CAR,
                    gtengine::GameItemType::TUNEPARTS,
                    gtengine::GameItemType::OTHERPARTS,
                ]);
            }

            function getCategoryList(status, type_id)
            {
                if (type_id == nil)
                {
                    return GAME_STATUS.user_profile.itembox.getCategoryList([
                        gtengine::GameItemType::DRIVER,
                        gtengine::GameItemType::DRIVER_ITEM,
                        gtengine::GameItemType::MUSEUMCARD,
                        gtengine::GameItemType::MOVIE,
                        gtengine::GameItemType::SPECIAL,
                        gtengine::GameItemType::CAR,
                        gtengine::GameItemType::TUNEPARTS,
                        gtengine::GameItemType::OTHERPARTS,
                    ]);
                }
                else
                {
                    return GAME_STATUS.user_profile.itembox.getCategoryList([type_id]);
                }
            }

            function getList(status, type, category, order, by, group_by, where, random, random_limit)
            {
                return ItemBox::getList(type, category, order, by, group_by, status, where, random, random_limit);
            }

        }

        function getNum()
        {
            return GAME_STATUS.user_profile.itembox.getNum();
        }

        function getNumByCategory(category_id)
        {
            return GAME_STATUS.user_profile.itembox.getNumByCategory(category_id);
        }

        function getDistinctCategoryNum(category_id)
        {
            return GAME_STATUS.user_profile.itembox.getDistinctCategoryNum(category_id);
        }

        function getNumByCode(item_code)
        {
            var item_map = GameItemData::getItemByCode([item_code]);
            var gameitem_id = 0;

            foreach (|var k, var v| in item_map)
            {
                gameitem_id = v.gameitem_id;
                break;
            }

            return GAME_STATUS.user_profile.itembox.getNumByID(gameitem_id);
        }

        function getItemEntity(itembox_id)
        {
            return GAME_STATUS.user_profile.itembox.getItemEntity(itembox_id);
        }

        function getList(type, category, order, by, group_flag = true, status_flag, where, random, random_limit)
        {
            if (category == gtengine::GameItemCategory::PRESENTCAR_TICKET)
            {
                group_flag = false;
                if (order == "count")
                    order = nil;
            }

            var list = GAME_STATUS.user_profile.itembox.getItemBoxList3(type, category, order, by, group_flag, status_flag, where, random, random_limit);
            list = (list == nil || list.size == 0) ? Array() : GameItemData::getGameItemListFromItemBox(list);

            if ((order == "item_name" && by == nil) || by == "ASC" )
                list.sort(compareToItemNameASC);
            else if ((order == "item_name" && by != nil) && by == "DESC")
                list.sort(compareToItemNameDESC);
            
            return list;
        }

        function getPresentBoxList(sort_key = "itembox_id DESC")
        {
            return GAME_STATUS.user_profile.itembox.getPresentBoxList(sort_key);
        }

        function getPresentBoxListCount()
        {
            return GAME_STATUS.user_profile.itembox.getNum(GameItemBox::ITEMSTATUS::PRESENTBOX_CACHE);
        }

        function insertItemList(gameitem_list)
        {
            return GAME_STATUS.user_profile.itembox.insertItemList(gameitem_list);
        }

        function insertGamePresent(gi)
        {
            var gameitem_id = gi.argument4 == nil ? 0 : gi.argument4;

            var gameitem = GameItemUtil::GameItemRecord();
            gameitem.gameitem_id = gameitem_id;
            gameitem.type_id = gi.itemtype;
            gameitem.category_id = gi.itemcategory;
            gameitem.argument1 = gi.argument1;
            gameitem.argument2 = gi.argument2;
            gameitem.argument3 = gi.argument3;
            gameitem.argument4 = gi.argument4;
            gameitem.code = gi.f_name;
            gameitem.blob = gi.blob;

            return GAME_STATUS.user_profile.itembox.insertItemList([gameitem]);
        }

        function deleteByItemboxId(itembox_id)
        {
            return GAME_STATUS.user_profile.itembox.deleteByItemboxId(itembox_id);
        }

        function delete2(gameitem)
        {
            return GAME_STATUS.user_profile.itembox.delete2(gameitem);
        }

        function deleteByList(gameitem_list)
        {
            return GAME_STATUS.user_profile.itembox.deleteByList(gameitem_list);
        }

        function deleteAll()
        {
            return GAME_STATUS.user_profile.itembox.deleteAll();
        }

        function isExist2(gameitem)
        {
            return GAME_STATUS.user_profile.itembox.isExist2(gameitem);
        }

        function getMaxItemBoxId()
        {
            return GAME_STATUS.user_profile.itembox.presentbox_itembox_id;
        }

        function getColorTunerList()
        {
            return GAME_STATUS.user_profile.itembox.getColorTunerList();
        }

        function checkIdList(itembox_id_list)
        {
            var cache_list = GAME_STATUS.user_profile.itembox.getPresentBoxList();
            foreach (var item in cache_list)
            {
                var flag = false;
                var cache_itembox_id = item.presentbox_itembox_id.toInt();
                foreach (var id in itembox_id_list)
                {
                    if (cache_itembox_id == id)
                    {
                        flag = true;
                        break;
                    }
                }

                if (!flag)
                    return false;
            }

            return true;
        }

        function insertGrimData(item_list)
        {
            return GAME_STATUS.user_profile.itembox.insertPresentBoxList(item_list);
        }

        function getPresent(context, presentbox_itembox_id)
        {
            var gameitem = GAME_STATUS.user_profile.itembox.getItemFromPresentboxItemboxId(presentbox_itembox_id);
            if (gameitem == nil)
                return false;

            var res = false;

            switch (gameitem.type_id)
            {
                case gtengine::GameItemType::DRIVER_ITEM:
                case gtengine::GameItemType::TUNEPARTS:
                case gtengine::GameItemType::OTHERPARTS:
                case gtengine::GameItemType::SPECIAL:
                    res = GAME_STATUS.user_profile.itembox.getPresent(presentbox_itembox_id);
                    break;

                case gtengine::GameItemType::MUSEUMCARD:
                    res = getMuseumCard(gameitem);
                    break;

                case gtengine::GameItemType::CAR:
                    break;
            }

            return res;
        }

        function checkMaxItemBox(item_list)
        {
            var res = false;
            var itemcounter = 0;

            foreach (var item in item_list)
            {
                if (item.type_id == gtengine::GameItemType::MUSEUMCARD)
                    continue;

                itemcounter++;
            }

            var item_box_count = GAME_STATUS.user_profile.itembox.getNum(1);
            if (item_box_count + itemcounter >= GAME_STATUS.user_profile.itembox.max_itembox)
                res = true;

            return res;
        }

        function getNos()
        {
            var gameitem_map = GameItemData::getItemByCode([
                "nos_01",
                "nos_02",
                "nos_03",
                "nos_04",
                "nos_05",
                "nos_06",
                "nos_07",
            ]);

            return GAME_STATUS.user_profile.itembox.getItemCount(gameitem_map);
        }

        function getSpecialGas()
        {
            var gameitem_map = GameItemData::getItemByCode([
                "special_gasoline_01",
                "special_gasoline_02",
                "special_gasoline_03",
            ]);

            return GAME_STATUS.user_profile.itembox.getItemCount(gameitem_map);
        }

        function getPresentCarTicket(order, by)
        {
            return getList(gtengine::GameItemType::SPECIAL, gtengine::GameItemCategory::PRESENTCAR_TICKET, order, by, false, true);
        }

        function getPaintItem(order, by, where)
        {
            return getList(gtengine::GameItemType::OTHERPARTS, gtengine::GameItemCategory::PAINT_ITEM, order, by, true, false, where);
        }

        function getSpecialGasCandidates()
        {
            var map = [:];
            map["gameitem_id"] = nil;
            map["item_code"] = "not_use";
            map["count"] = -1;

            var item_list = getSpecialGas();
            var list = [map];
            
            foreach (var item in item_list)
            {
                if (item["count"] > 0)
                list.push(item);
            }

            return list;
        }

        function getNOSCandidates()
        {
            var map = [:];
            map["gameitem_id"] = nil;
            map["item_code"] = "not_use";
            map["count"] = -1;

            var item_list = GameItemUtil::ItemBox::getNos();
            var list = [map];
            foreach (var item in item_list)
            {
                if (item["count"] > 0)
                list.push(item);
            }

            return list;
        }

        function getKeys(item_list)
        {
            var list = Array(item_list.size);
            for (var i = 0; i < item_list.size; ++i)
                list[i] = item_list[i].item_code;

            return list;
        }

        function initialize108(category_list)
        {
            return GAME_STATUS.user_profile.itembox.initialize108(category_list);
        }

        function initialize200()
        {
            return GAME_STATUS.user_profile.itembox.initialize200();
        }

        function takeOnAvatorItem(category, avator_item_id, color)
        {
            var gameitem_id = GameItemData::getGameItemIDFromAvatorInfo(category, avator_item_id, color);
            return GAME_STATUS.user_profile.itembox.takeOnAvatorItem(category, gameitem_id, color);
        }

        function takeOffAvatorItem(category, avator_item_id, color)
        {
            var gameitem_id = GameItemData::getGameItemIDFromAvatorInfo(category, avator_item_id, color);
            return GAME_STATUS.user_profile.itembox.takeOffAvatorItem(category, gameitem_id, color);
        }

        function compareToItemNameASC(a_record, b_record)
        {
            return a_record.item_name < b_record.item_name;
        }

        function compareToItemNameDESC(a_record, b_record)
        {
            return a_record.item_name > b_record.item_name;
        }

        function getMuseumCard(gameitem)
        {
            var museum_id = gameitem.code.toInt();
            if (museum_id == 0)
                return false;

            var res = MuseumFileUtil::increment(museum_id);
            if (res)
                res = delete2(gameitem);

            return res;
        }
    }
}
