module PROJECT::ROOT
{
	static sWatcher = nil;
	static sWatcherCount = 0;
	static sFrame = 0;
	static sRankArray = [];
	
	function SetBlinkActor(widget)
	{
		widget.actor = main::menu::MBlinkActor(widget);
		widget.actor.period = 0.25;
	}

	function SetMoveActor(widget, x, y)
	{
		var actor = main::menu::MMoveActor(widget, widget.x + x, widget.y + y);
	
		widget.actor = actor;
		widget.actor.ratio = 0.05;
		widget.actor.out = true;
		widget.actor.warp();
	}


	function UpdatePage(context, page, frame)
	{
		var data = gLocation.GetRankingData();
		svo::GetTrialRanking(gLocation.GetId(), data, 0, gNumOfData - 1);
		gHttp.close();
		gLocation.SetRankingData(data);
	
		for (var i = 0; i < gNumOfData; i++)
		{
			var rank = sRankArray[frame][i];
			var car = "";
	
			if (data[i].mCar != "")
			{
				car = main::menu::MCarData::GetCarNameByNumericCode(data[i].mCar);
			}
			else
			{
				car = "--------------------";
			}
	
			var time = main::menu::MUtility::GetTimeString(data[i].mTime.toInt());
	
			rank.active = 0;
			rank["name"]["user"].text = data[i].mUserName;
			rank["name"]["userActive"].text = data[i].mUserName;
			rank["name"]["car"].text = car;
			rank["name"]["carActive"].text = car;
			rank["time"].text = time;
			rank["timeActive"].text = time;
	
			if (!gIsRankingMachine && data[i].mUserName == EntryRoot::Keyboard::input.value && data[i].mCar == gCarId && data[i].mTime == gTime)
			{
				rank.active = true;
				rank["name"].active = true;
			}
		}

		page["Title"]["bg"].image_path = gLocation.GetTextureString();
		page["Title"]["bg"].doInitialize(context);
	}


	function TransPage(context)
	{
		gLocation.Increase();
	
		if (!sFrame)
		{
			UpdatePage(context, Page1, sFrame ^ 1);
	
			while (!Page0.interpolateX(-PS2_SCREEN_W_F, 0.1))
			{
				Page1.interpolateX(0.0, 0.1);
				context.sync();
			}

			Page0.x = PS2_SCREEN_W_F;
		}
		else
		{
			UpdatePage(context, Page0, sFrame ^ 1);
	
			while (!Page0.interpolateX(0.0, 0.1))
			{
				Page1.interpolateX(-PS2_SCREEN_W_F, 0.1);
				context.sync();
			}

			Page1.x = PS2_SCREEN_W_F;
		}
	
		sFrame ^= 1;
		sWatcherCount = 0;
	}


	function onTick(context)
	{
		sWatcherCount++;
	
		if (!(sWatcherCount % 120))
		{
			for (var i = 0; i < gNumOfData; i++)
			{
				sRankArray[sFrame][i]["name"].actor.flip();
			}
		}
	
		if (gIsRankingMachine)
		{
			if (sWatcherCount > 300)
			{
				TransPage(context);
			}
		}
	}


	function FreeWatcher()
	{
		if (sWatcher != nil)
		{
			sWatcher.remove();
			sWatcher = nil;
			sWatcherCount = 0;
		}
	}
	
	function Exit(context)
	{
		context.transition.panOut(context);
		context.transition.syncOut(context);
		main::game.next_sequence = "menu";
		main::game.next_menu_project = "arcade";
		context.finish();
	}


	function onCancel(context, event, item)
	{
		if (gIsRankingMachine)
		{
			main::sound.play("cancel");
	
			var result = ConfirmDialog::open(context, 1, "Do you quit?");

			// NOTE: There's no NOPs for this block, strangely enough
			// Exit and return are on the same line without curly brackets?
			if (result)
			{
				Exit(context); 
				return EVENTRESULT_FILTER;
			}
		}

		return EVENTRESULT_CONTINUE;
	}

	function InitPage(page)
	{
		var ranks = [];
		var y = 26;
		for (var i = 0; i < gNumOfData; i++)
		{
			var rank = StoreHouse::rank.doCopy();
	
			rank["rank"].text = i + 1;
			rank["rankActive"].text = i + 1;
			rank.y = y;
			y += 32;
	
			SetBlinkActor(rank["rankActive"]);
			SetBlinkActor(rank["name"]["userActive"]);
			SetBlinkActor(rank["name"]["carActive"]);
			SetBlinkActor(rank["timeActive"]);
	
			SetMoveActor(rank["name"], 0.0, -36.0);
	
			ranks.push(rank);
			page["CompositeRanks"].appendChild(rank);
		}
	
		sRankArray.push(ranks);
	
		if (gIsRankingMachine)
		{
			page["ok"].visible = false;
			page["ok"].visible = false; // ??
		}
		else
		{
			page["tooltip"]["text"].text = "You placed %s out of %s.".format(gPosition[0], gPosition[1]);
		}
	}


	function onInitialize(context)
	{
		if (gIsRankingMachine)
		{
			context.cursor_visible = false;
		}
	
		gLocation.InitRankingData();
	
		InitPage(Page0);
		InitPage(Page1);
	
		UpdatePage(context, Page0, 0);
	
		FreeWatcher();
	
		sWatcher = main::menu::MScriptWatcher(context, ROOT, "onTick");
		sWatcher.interval = true;
		sWatcher.append();
	}


	function onFinalize(context)
	{
		Page0["CompositeRanks"].clearChildren(context);
		Page1["CompositeRanks"].clearChildren(context);
		var sRankArray = [];
		FreeWatcher();
	}
}

module PROJECT::ROOT::Page0::ok
{
	function onActivate(context, event, item)
	{
		main::sound.play("ok");
		Exit(context);
		return EVENTRESULT_FILTER;
	}
}