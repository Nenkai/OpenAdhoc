//---------------------------------------------------------------------------------------
// RaceDetailPopupImpl.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module RaceDetailPopup
{
    attribute data = nil;
    attribute caller_root = nil;

    class Data
    {
        attribute mode = nil;
        attribute arcade_laps = nil;
        attribute arcade_laps_min = nil;
        attribute arcade_laps_max = nil;
        attribute disable_collision = nil;
        attribute boost_level = nil;
        attribute with_ai = nil;
        attribute physics_pro = nil;
        attribute shuffle_base = nil;
        attribute packet_interval = nil;
        attribute course_length = nil;
        attribute one_make = nil;
        attribute can_change_one_make = nil;

        method __init__()
        {
            self.arcade_laps_min = 1;
            self.arcade_laps_max = 99;
            self.disable_collision = false;
            self.boost_level = 0;
            self.with_ai = true;
            self.physics_pro = false;
            self.shuffle_base = 250;
            self.packet_interval = 100;
            self.one_make = false;
            self.can_change_one_make = true;
        }
    }

    method getCurrentModeName()
    {
        switch (self.data.mode) {
            case main::gtengine::GameMode::SINGLE_RACE:
                return "singlerace";
                break;
            case main::gtengine::GameMode::ADHOC_BATTLE_PRO:
                return "professional";
                break;
            case main::gtengine::GameMode::ADHOC_BATTLE_AMA:
                return "amateur";
                break;
            case main::gtengine::GameMode::ADHOC_BATTLE_SHUFFLE:
                return "shuffle";
                break;
        }

        return "";
    }

    method open(context, data)
    {
        self.caller_root = context.getRootWindow();
        self.data = data;
        self.closing = false;
        self.result = false;
        self.popup = main::SequenceUtil::ModalPage(context, RaceDetailPopup);
        self.popup.open();

        return [ "result" : self.result,
                 "arcade_laps" : self.data.arcade_laps,
                 "disable_collision" :self.data.disable_collision,
                 "boost_level" : self.data.boost_level,
                 "with_ai" : self.data.with_ai,
                 "physics_pro" : self.data.physics_pro,
                 "shuffle_base" : self.data.shuffle_base,
                 "packet_interval" : self.data.packet_interval,
                 "one_make" : self.data.one_make ];
    }


    method onInitialize(context)
    {
        setCursor(context, "wait");

        BalloonTip.visible = false;
        BalloonTip.initialize(context);
        Pane.initialize(context, context.translate(RaceDetailPopup, "Balloon", "RaceDetail"));

        var space = Pane::Setting::Body::ScrollClip::space;
        space.y = 0;
        if (main::gtengine::GameMode::SINGLE_RACE == self.data.mode)
        {
            space.OneMake::OptionMenu.initialize(context, RaceDetailPopup, Template::OptionMenuItem1,
                                                 ["ONEMAKE_YES", "ONEMAKE_NO"])
            space.OneMake.visible = true;
            space.OneMake.OptionMenu.insensitive = !self.data.can_change_one_make;

            space.Boost.visible = false;
            space.Collision.visible = false;
            space.WithAI.visible = false;
            space.CarPhysics.visible = false;
            space.ShuffleBase.visible = false;
            space.PacketInterval.visible = false;
        }
        else
        {
            space.OneMake.visible = false;
            space.Boost::OptionMenu.initialize(context, RaceDetailPopup, Template::OptionMenuItem1,
                                               ["BOOST_OFF", "BOOST_WEAK", "BOOST_STRONG"],
                                               "TrialSetting");
            space.Boost.visible = true;
            space.Collision::OptionMenu.initialize(context, RaceDetailPopup, Template::OptionMenuItem1,
                                                   ["COLLISION_DISABLE", "COLLISION_ENABLE"])
            space.Collision.visible = true;
            space.WithAI::OptionMenu.initialize(context, RaceDetailPopup, Template::OptionMenuItem1,
                                                ["WITH_AI_YES", "WITH_AI_NO"])
            space.WithAI.visible = true;
            space.CarPhysics::OptionMenu.initialize(context, RaceDetailPopup, Template::OptionMenuItem1, ["PhysicsNormal", "PhysicsPro"], "TrialSetting");
            space.CarPhysics.visible = main::gtengine::GameMode::ADHOC_BATTLE_SHUFFLE == self.data.mode;
            space.ShuffleBase.visible = main::gtengine::GameMode::ADHOC_BATTLE_SHUFFLE == self.data.mode;

            space.PacketInterval.visible = false;
        }


        Pane::About::Icon.visible = false;
        var modeName = getCurrentModeName();
        Contents::Title::TextFace.text = context.translate(RaceDetailPopup, "Arcade", modeName);
        var course = main::GlobalStatus::game_context.course;
        if (course != nil && course != main::gtengine::MSpecDB::NO_CODE64)
        {
            var course_label = main::gtengine::MSpecDB::getCourseLabel(course);
            if (course_label.beginWith("r_"))
                course_label = course_label.substr(2);

            Pane::About::TextFace.text = context.translate(RaceDetailPopup, "CourseName", course_label);
        }
        else
        {
            Pane::About::TextFace.text = context.translate(RaceDetailPopup, "Arcade", "COURSE_NOT_SELECTED");
        }

        reflect(context);

        RaceDetailPopup.setFocus(Pane::Footer::OK);

        onInitializeAnimation(context);

        setCursor(context, "default");

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        var space = Pane::Setting::Body::ScrollClip::space;
        if (self.data.mode == main::gtengine::GameMode::SINGLE_RACE)
        {
            space.OneMake::OptionMenu.finalize(context);
        }
        else
        {
            space.Boost::OptionMenu.finalize(context);
            space.Collision::OptionMenu.finalize(context);
            space.WithAI::OptionMenu.finalize(context);
            space.CarPhysics::OptionMenu.finalize(context);
        }


        return EVENTRESULT_FILTER;
    }

    method reflect(context)
    {
        var space = Pane::Setting::Body::ScrollClip::space;

        space.Laps::slider.range = [self.data.arcade_laps_min, self.data.arcade_laps_max];
        space.Laps::slider.index = self.data.arcade_laps;
        space.Laps::slider.setup(context, 1, context.translate(RaceDetailPopup, "TrialSetting", "Infinite"),
                                 context.translate(RaceDetailPopup, "TrialSetting", "Syuu"));
        space.Laps::slider.insensitive = self.data.arcade_laps_min == self.data.arcade_laps_max;

        if (self.data.mode == main::gtengine::GameMode::SINGLE_RACE)
        {
            space.OneMake.OptionMenu.setIndex(context, self.data.one_make ? 0 : 1);
        }
        else
        {
            space.Collision::OptionMenu.setIndex(context, self.data.disable_collision ? 0 : 1);
            space.Boost::OptionMenu.setIndex(context, self.data.boost_level);
            space.WithAI::OptionMenu.setIndex(context, self.data.with_ai ? 0 : 1);
            space.CarPhysics::OptionMenu.setIndex(context, self.data.physics_pro ? 1 : 0);
            space.ShuffleBase::slider.index = self.data.shuffle_base;
            space.ShuffleBase::slider.setup(context, 1, nil, nil, true, 20);
        }
    }


    method apply(context)
    {
        var space = Pane::Setting::Body::ScrollClip::space;
        self.data.arcade_laps = space.Laps::slider.index;

        if (self.data.mode == main::gtengine::GameMode::SINGLE_RACE)
            self.data.one_make = space.OneMake::OptionMenu.index == 0;
        else
        {
            self.data.disable_collision = space.Collision::OptionMenu.index == 0;
            self.data.boost_level = space.Boost::OptionMenu.index;
            self.data.with_ai = space.WithAI::OptionMenu.index == 0;
            self.data.physics_pro = space.CarPhysics::OptionMenu.index;
            self.data.shuffle_base = space.ShuffleBase::slider.index;
        }
    }

    method updateReward(context)
    {
        var course = main::GlobalStatus::game_context.course;
        if (course != nil && course != main::gtengine::MSpecDB::NO_CODE64)
        {
            var space = Pane::Setting::Body::ScrollClip::space;

            var is_singlerace = self.data.mode == main::gtengine::GameMode::SINGLE_RACE;

            var difficulty = is_singlerace ? main::GlobalStatus::game_context.race_difficulty : 4;
            var laps = space.Laps::slider.index;
            var penalty_level = 0;

            var rewards = RewardUtil::calculate(self.data.course_length, laps, difficulty, penalty_level);
            Contents::PrizeGold::TextFace.text = main::pdiext::MMisc::GetMoneyString(rewards[0]);
            Contents::PrizeSilver::TextFace.text = main::pdiext::MMisc::GetMoneyString(rewards[1]);
            Contents::PrizeBronze::TextFace.text = main::pdiext::MMisc::GetMoneyString(rewards[2]);
        }
        else
        {
            var credit_none = context.translate(RaceDetailPopup, "CREDIT_NONE");
            Contents::PrizeGold::TextFace.text = credit_none;
            Contents::PrizeSilver::TextFace.text = credit_none;
            Contents::PrizeBronze::TextFace.text = credit_none;
        }
    }

    module Pane::Setting::Body::ScrollClip::space::Laps::slider
    {
    }

    attribute popup = nil;
    attribute closing = nil;
    attribute result = nil;

    method onCancel(context)
    {
        main::sound.play("cancel");
        RaceDetailPopup.setFocus(Pane::Footer::Cancel);
        return EVENTRESULT_FILTER;
    }

    method close(context)
    {
        if (self.popup != nil)
        {
            self.popup.close();
            self.popup = nil;
        }
    }

    method onInitializeAnimation(context)
    {
        context.event_mask &= ~1;
        context.filterKeyEvent();

        ScalarInterpolator.reverse = false;
        ScalarInterpolatorX.reverse = false;
        ScalarInterpolatorY.reverse = false;

        ScalarInterpolatorX.on_effect_end = function (context)
        {
            main::menu::MFocusEnterEvent(context, RaceDetailPopup.focus_widget).dispatchEvent();
            BalloonTip.visible = true;
            ScalarInterpolatorX.on_effect_end = nil;
            context.event_mask |= 1;

            if (RaceDetailPopup.caller_root != nil)
                RaceDetailPopup.caller_root.visible = false;
        }

        ScalarInterpolator.restart();
        ScalarInterpolatorX.restart();
        ScalarInterpolatorY.restart();
    }

    method onCancelAnimation(context)
    {
        context.event_mask &= ~1;
        context.filterKeyEvent();

        ScalarInterpolator.reverse = true;
        ScalarInterpolatorX.reverse = true;
        ScalarInterpolatorY.reverse = true;

        ScalarInterpolatorX.on_effect_end = function (context)
        {
            RaceDetailPopup.close(context);
            ScalarInterpolatorX.on_effect_end = nil;
            context.event_mask |= 1;
        }

        if (RaceDetailPopup.caller_root != nil)
        {
            RaceDetailPopup.caller_root.visible = true;
            RaceDetailPopup.caller_root = nil;
        }

        ScalarInterpolator.restart();
        ScalarInterpolatorX.restart();
        ScalarInterpolatorY.restart();
    }

    module Pane::Footer
    {
        method onFocusEnter(context, event)
        {
            var w = event.widget;
            BalloonTip.set_value(context, w, w.balloon.text, 3.5);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Footer::Cancel
    {
        method onActivate(context)
        {
            if (!RaceDetailPopup.closing)
            {
                main::sound.play("cancel");
                RaceDetailPopup.closing = true;
                RaceDetailPopup.onCancelAnimation(context);
            }
            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Footer::OK
    {
        method onActivate(context)
        {
            if (RaceDetailPopup.closing)
                return EVENTRESULT_FILTER;

            main::sound.play("ok");
            RaceDetailPopup.closing = true;
            RaceDetailPopup.result = true;
            RaceDetailPopup.apply(context);
            Blink.ScalarInterpolator.on_effect_end = function (context)
            {
                RaceDetailPopup.close(context);
            }

            if (RaceDetailPopup.caller_root != nil)
            {
                RaceDetailPopup.caller_root.visible = true;
                RaceDetailPopup.caller_root = nil;
            }
            
            Blink.ScalarInterpolator.restart();
            return EVENTRESULT_FILTER;
        }
    }
}