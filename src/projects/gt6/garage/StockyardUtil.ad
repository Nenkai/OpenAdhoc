













module StockyardUtil
{
    static sStockyardGarage;

    function prepareForSave(garage)
    {
        var buf = garage.serialize();
        pdistd::WriteFile(UserProfile::GARAGE_PAD_STOCKYARD_PATH, buf, buf.getByteDataCount());
    }

    function create()
    {
        var garage = gtengine::MGarage();
        garage.create(UserProfile::GARAGE_STOCKYARD_PATH, UserProfile::GARAGE_STOCKYARD_MAX);
        prepareForSave(garage);
        return garage;
    }

    function load(context)
    {
        |var success, var result| = SaveDataUtilGT6::loadStockyardData(context);
        var st = nil;
        var new_data = false;

        if (success)
        {
            var initial_content = UserProfile::GARAGE_STOCKYARD_INITIAL_CONTENT;
            st = pdistd::ReadFile(UserProfile::GARAGE_PAD_STOCKYARD_PATH);

            if (st["buffer"].size == initial_content.size && initial_content == st["buffer"].toString())
                new_data = true;
        }
        else
        {
            new_data = true;
        }

        if (!new_data && st != nil)
        {
            var garage = gtengine::MGarage();
            garage.deserialize(st["buffer"]);
            garage.load(UserProfile::GARAGE_STOCKYARD_PATH);
            return garage;
        }
        else
        {
            return create();
        }
    }

    function getGarage(context)
    {
        if (sStockyardGarage != nil)
            return sStockyardGarage;

        var load_stockyard_garage = function (context, mgarage_ref)
        {
            var mgarage = load(context);
            if (!GAME_STATUS.user_profile.garage.isConformed(mgarage))
                mgarage = create();

            mgarage.copyDLCCondition(GAME_STATUS.user_profile.garage);

            *mgarage_ref = mgarage;

            GAME_STATUS.user_profile.garage_stockyard_carcount = mgarage.getCarCount();
            return true;
        };

        var mgarage;
        DialogUtil::openConfirmExecDialog(context, nil, 
            manager.translate("CommonGTMode", "Message_LoadStockyard"),
            nil, nil,
            load_stockyard_garage, &mgarage);

        sStockyardGarage = mgarage;
        return mgarage;
    }

    function applyGarage(context)
    {
        var mgarage = sStockyardGarage;
        if (mgarage != nil)
        {
            var save_stockyard_garage = function(context, mtgarage)
            {
                GAME_STATUS.user_profile.garage_stockyard_carcount = mgarage.getCarCount();
                GAME_STATUS.user_profile.garage.conform(mgarage);

                prepareForSave(mgarage);

                return SaveDataUtilGT6::saveStockyardData(context);
            };

            DialogUtil::openConfirmExecDialog(context, nil, 
                manager.translate("CommonGTMode", "Message_SaveStockyard"),
                nil, nil,
                save_stockyard_garage, mgarage);

            sStockyardGarage = nil;
        }
    }

    function transferToStockyard(context, mgarage_car)
    {
        var mgarage = GAME_STATUS.user_profile.garage;
        var stockyard_mgarage = getGarage(context);

        if (stockyard_mgarage.isFull())
            return false;

        var garage_id = mgarage_car.garage_id;
        var stockyard_garage_id = stockyard_mgarage.transfer(mgarage, garage_id);

        GarageUtil::Thumbnail::copy(GarageUtil::Thumbnail::Type::Garage, garage_id,
            GarageUtil::Thumbnail::Type::Stockyard, stockyard_garage_id);

        GAME_STATUS.user_profile.garage_stockyard_carcount = stockyard_mgarage.getCarCount();

        return true;
    }

    function transferToGarage(context, mgarage_car)
    {
        var stockyard_mgarage = getGarage(context);
        var mgarage = GAME_STATUS.user_profile.garage;

        if (mgarage.isFull())
            return false;

        var stockyard_garage_id = mgarage_car.garage_id;
        var garage_id = mgarage.transfer(stockyard_mgarage, stockyard_garage_id);

        GarageUtil::Thumbnail::copy(GarageUtil::Thumbnail::Type::Stockyard, stockyard_garage_id,
            GarageUtil::Thumbnail::Type::Garage, garage_id);

        GAME_STATUS.user_profile.garage_stockyard_carcount = stockyard_mgarage.getCarCount();
        return true;
    }
}