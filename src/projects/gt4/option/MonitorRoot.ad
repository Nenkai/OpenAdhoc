













module PROJECT::ROOT
{
    function open(context)
    {
        start_page(context, ROOT);
    }

    function close(context)
    {
        start_page(context, OptionRoot);
    }

    function LightnessStep100(slider)
    {
        var x = slider.value - slider.repeat_start;
        if (x < 0.0)
            x = -x;

        x /= slider.max - slider.min;
        return 1.0 + (x * 10.0);
    }

    function LightnessStep001(slider)
    {
        var x = slider.value - slider.repeat_start;
        if (x < 0.0)
            x = -x;

        x /= slider.max - slider.min;
        return 0.01 + x;
    }

    function InitSlider(slider, value, min, max, stepfunc)
    {
        slider.min = min;
        slider.max = max;
        slider.value = value;
        slider.step = stepfunc(slider);
    }

    function setupSliderInt(context, slider)
    {
        slider["label"].text = slider.value.toInt();

        var popup = slider["popup"];
        popup["min"].text = slider.min.toInt();
        popup["max"].text = slider.max.toInt();
        popup["pinch"]["value"].text = slider.value.toInt();
    }

    function setupSliderFloat(context, slider, formatString)
    {
        slider["label"].text = formatString.format(slider.value);

        var popup = slider["popup"];
        popup["min"].text = formatString.format(slider.min);
        popup["max"].text = formatString.format(slider.max);
        popup["pinch"]["value"].text = formatString.format(slider.value);
    }

    function reflect(context)
    {
        var option = main::game.option;
        var border = [];
        |var flag, var zoom, var distance, var width, var height, var aspect, var scale, var border| = option.physical_monitor_size;
        Pane::Flag::OptionMenu.setIndex(context, flag);
        InitSlider(Pane::Zoom::slider, zoom, 0.0, 3.0, LightnessStep001);
        InitSlider(Pane::Distance::slider, distance, 200.0, 1200.0, LightnessStep100);
        InitSlider(Pane::Width::slider, width, 200.0, 600.0, LightnessStep100);
        InitSlider(Pane::Height::slider, height, 200.0, 400.0, LightnessStep100);
        InitSlider(Pane::Aspect::slider, aspect, 0.0, 2.0, LightnessStep001);
        InitSlider(Pane::Scale::slider, scale, 0.0, 2.0, LightnessStep001);
        InitSlider(Pane::BorderLeft::slider, border[0], 0.0, 300.0, LightnessStep100);
        InitSlider(Pane::BorderRight::slider, border[1], 0.0, 300.0, LightnessStep100);
        InitSlider(Pane::BorderTop::slider, border[2], 0.0, 300.0, LightnessStep100);
        InitSlider(Pane::BorderBottom::slider, border[3], 0.0, 300.0, LightnessStep100);
    }

    function apply()
    {
        main::game.setNeedSave();
        var option = main::game.option;

        var flag = Pane::Flag::OptionMenu.index;
        var zoom = Pane::Zoom::slider.value;
        var distance = Pane::Distance::slider.value;
        var width = Pane::Width::slider.value;
        var height = Pane::Height::slider.value;
        var aspect = Pane::Aspect::slider.value;
        var scale = Pane::Scale::slider.value;
        var b = [];
        b[0] = Pane::BorderLeft::slider.value;
        b[1] = Pane::BorderRight::slider.value;
        b[2] = Pane::BorderTop::slider.value;
        b[3] = Pane::BorderBottom::slider.value;

        option.physical_monitor_size = [flag, zoom, distance, width, height, aspect, scale, b[0], b[1], b[2], b[3]];
    }

    function onInitialize(context)
    {
        Pane::Flag::OptionMenu::popup::vbox::FLAG_ROTXY::label.adjustScale();
        reflect(context);

        setupSliderFloat(context, Pane::Zoom::slider, "%.2f");
        setupSliderInt(context, Pane::Distance::slider);
        setupSliderInt(context, Pane::Width::slider);
        setupSliderInt(context, Pane::Height::slider);
        setupSliderFloat(context, Pane::Aspect::slider, "%.2f");
        setupSliderFloat(context, Pane::Scale::slider, "%.2f");
        setupSliderInt(context, Pane::BorderLeft::slider);
        setupSliderInt(context, Pane::BorderRight::slider);
        setupSliderInt(context, Pane::BorderTop::slider);
        setupSliderInt(context, Pane::BorderBottom::slider);

    }

    function onFinalize(context)
    {

    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Zoom::slider
{
    function onValueChanged(context)
    {
        setupSliderFloat(context, slider, "%.2f");
    }

    function onStepChanged(context)
    {
        slider.step = LightnessStep001(slider);
    }
}

module PROJECT::ROOT::Pane::Distance::slider
{
    function onValueChanged(context)
    {
        setupSliderInt(context, slider);
    }

    function onStepChanged(context)
    {
        slider.step = LightnessStep100(slider);
    }
}

module PROJECT::ROOT::Pane::Width::slider
{
    function onValueChanged(context)
    {
        setupSliderInt(context, slider);
    }

    function onStepChanged(context)
    {
        slider.step = LightnessStep100(slider);
    }
}

module PROJECT::ROOT::Pane::Height::slider
{
    function onValueChanged(context)
    {
        setupSliderInt(context, slider);
    }

    function onStepChanged(context)
    {
        slider.step = LightnessStep100(slider);
    }
}

module PROJECT::ROOT::Pane::Aspect::slider
{
    function onValueChanged(context)
    {
        setupSliderFloat(context, slider, "%.2f");
    }

    function onStepChanged(context)
    {
        slider.step = LightnessStep001(slider);
    }
}

module PROJECT::ROOT::Pane::Scale::slider
{
    function onValueChanged(context)
    {
        setupSliderFloat(context, slider, "%.2f");
    }

    function onStepChanged(context)
    {
        slider.step = LightnessStep001(slider);
    }
}

module PROJECT::ROOT::Pane::BorderLeft::slider
{
    function onValueChanged(context)
    {
        setupSliderInt(context, slider);
    }

    function onStepChanged(context)
    {
        slider.step = LightnessStep100(slider);
    }
}

module PROJECT::ROOT::Pane::BorderRight::slider
{
    function onValueChanged(context)
    {
        setupSliderInt(context, slider);
    }

    function onStepChanged(context)
    {
        slider.step = LightnessStep100(slider);
    }
}

module PROJECT::ROOT::Pane::BorderTop::slider
{
    function onValueChanged(context)
    {
        setupSliderInt(context, slider);
    }

    function onStepChanged(context)
    {
        slider.step = LightnessStep100(slider);
    }
}

module PROJECT::ROOT::Pane::BorderBottom::slider
{
    function onValueChanged(context)
    {
        setupSliderInt(context, slider);
    }

    function onStepChanged(context)
    {
        slider.step = LightnessStep100(slider);
    }
}

module PROJECT::ROOT::Pane::Buttons::Cancel
{
    function onActivate(context)
    {
        main::sound.play("ok");
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Buttons::OK
{
    function onActivate(context)
    {
        main::sound.play("ok");
        apply();
        close(context);
        return EVENTRESULT_FILTER;
    }
}