//---------------------------------------------------------------------------------------
// CarSpecPopupImpl.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

#include "../share/MenuCarUtil.ad"

module CarSpecPopup
{
    attribute cp = nil;
    attribute popup = nil;
    attribute opening = nil;
    attribute closing = nil;
    attribute car_loaded = nil;
    attribute sWatcher = nil;
    attribute caller_root = nil;
    attribute load_tex_result = nil;

    method open(context, cp)
    {
        self.caller_root = context.getRootWindow();
        self.cp = cp;
        self.opening = true;
        self.closing = false;
        self.car_loaded = false;
        self.popup = main::SequenceUtil::ModalPage(context, CarSpecPopup);
        self.popup.open();
    }

    method onInitialize(context)
    {
        setCursor(context, "wait");

        BalloonTip.initialize(context);
        SceneFace.visible = false;
        Buttons.active = false;
        Exit.active = false;
        NowLoading.visible = true;

        CarSpecPopup::ScalarInterpolator.on_effect_end = function (context)
        {
            if (CarSpecPopup.caller_root != nil)
                CarSpecPopup.caller_root.visible = false;
        }

        ActorUtil::ResetInterpolators(self, false);
        ActorUtil::ResetInterpolators(Veil, false);
        ActorUtil::ResetInterpolators(CarSpecPopup::CarFade, false);

        wCarFadeScalarInterpolator.setInterpolationPeriod(0, 1.2);
        wCarFadeScalarInterpolator.pause = true;

        var car_label = self.cp.getCarLabel();

        var tuner = main::gtengine::MSpecDB::getTunerCode(car_label);
        tuner = tuner.substr(6);

        Manufacture.image_path = "piece_gt5m/tunner_logo_S/" + tuner + ".img";
        Manufacture.doInitialize(context);

        var car_code = self.cp.getCarCode();

        var share_str;
        var trade_str;
        if (!main::gtengine::MSpecDB::checkGenericFlag("copy_disable", car_code) &&
            !main::gtengine::MSpecDB::checkGenericFlag("trade_disable", car_code))
        {
            share_str = context.translate(CarSpecPopup, "Arcade", "ENABLE_SHARE");
            trade_str = context.translate(CarSpecPopup, "Arcade", "DISABLE_TRADE");
        }
        else if (main::gtengine::MSpecDB::checkGenericFlag("copy_disable", car_code) &&
                 !main::gtengine::MSpecDB::checkGenericFlag("trade_disable", car_code))
        {


            share_str = context.translate(CarSpecPopup, "Arcade", "DISABLE_SHARE");
            trade_str = context.translate(CarSpecPopup, "Arcade", "ENABLE_TRADE");
        }
        else if (main::gtengine::MSpecDB::checkGenericFlag("copy_disable", car_code) &&
                 main::gtengine::MSpecDB::checkGenericFlag("trade_disable", car_code))
        {
            share_str = context.translate(CarSpecPopup, "Arcade", "DISABLE_SHARE");
            trade_str = context.translate(CarSpecPopup, "Arcade", "DISABLE_TRADE");
        }

        CarInfo.text = share_str + " / " + trade_str;

        ToolTip::tip.action_type = 1;
        ToolTip::tip.remove();
        ToolTip::tip.value = main::gtengine::MSpecDB::getCarName(car_code);

        CarSpecPopup.setFocus(Exit);

        if (self.sWatcher == nil)
            self.sWatcher = WatcherUtil:: Create(context, onTick);

        ColorBar.set_one_color(context, self.cp.getCarCode(), self.cp.color);

        context.pushEvent(main::menu::MFunctionEvent(initSceneFace, context));

        setCursor(context, "default");

        return EVENTRESULT_FILTER;
    }

    method initSceneFace(context)
    {
        context.sync(0.6);

        SceneFace.visible = true;
        MenuCarUtil::initializeSceneFace(self.cp, SceneFace);
        {
            var buf = CarSpecPopup.getGpbBinary("image/gt5m/env/env2.txs");

            self.load_tex_result = main::pdiext::LoadTextureSetFromMemory(buf);
            SceneFace.setExternalEnvTextureSet(self.load_tex_result["memory"]);
        }   
    }

    method onFinalize(context)
    {
        MenuCarUtil::finalizeSceneFace();

        if (self.sWatcher != nil) 
        {
            WatcherUtil::Delete(self.sWatcher);
            self.sWatcher = nil;
        }

        if (self.load_tex_result != nil) 
        {
            main::pdiext::DeleteTextureSet(self.load_tex_result);
            self.load_tex_result = nil;
        }

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        if (!self.opening && !self.closing)
        {
            main::sound.play("cancel");
            self.closing = true;
            onExit(context);
        }
        return EVENTRESULT_FILTER;
    }

    method close(context)
    {
        if (self.popup != nil)
        {
            self.popup.close();
            self.popup = nil;
        }
    }

    method onExit(context)
    {
        if (self.opening)
            return;

        self.closing = true;

        wCarFadeScalarInterpolator.on_effect_end = function (context)
        {
            SceneFace.visible = false;

            CarSpecPopup.ScalarInterpolator.on_effect_end =  function (context)
            {
                CarSpecPopup.close(context);
                CarSpecPopup.ScalarInterpolator.on_effect_end = nil;
            }

            if (CarSpecPopup.caller_root != nil)
            {
                CarSpecPopup.caller_root.visible = true;
                CarSpecPopup.caller_root = nil;
            }
            ActorUtil::ResetInterpolators(CarSpecPopup, true);

            wCarFadeScalarInterpolator.on_effect_end = nil;
        }

        wCarFadeScalarInterpolator.setInterpolationPeriod(0, 0.6);
        ActorUtil::ResetInterpolators(CarSpecPopup::CarFade, true);
    }

    method onTick(context)
    {
        if (!SceneFace.isEntityRenderable("CAR", "car")) 
            return;

        if (CarSpecPopup.opening && !CarSpecPopup.car_loaded) 
        {
            CarSpecPopup.car_loaded = true;
            if (MenuCarUtil::checkDebugCommand(context))
                SceneFace.setEntityRotateY("CAR", "car", MenuCarUtil::develop_car_angle);
            else
                SceneFace.setEntityRotateVelocityY("CAR", "car", 0.5 * 30);

            wCarFadeScalarInterpolator.pause = false;

            CarSpecPopup.opening = false;
            NowLoading.visible = false;
            Buttons.active = true;
            Exit.active = true;

            main::menu::MFocusEnterEvent(context, CarSpecPopup.focus_widget).dispatchEvent();
        }
    }

    module Buttons
    {
        method onFocusEnter(context, event)
        {
            if (Buttons.active)
            {
                var w = event.widget;
                BalloonTip.set_value(context, w, w.balloon.text, 12);
            }

            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module Buttons::Catalog
    {
        method onActivate(context)
        {
            if (!Buttons.active)
            {
                main::sound.play("cancel");
                return EVENTRESULT_FILTER;
            }

            if (CarSpecPopup.closing)
                return EVENTRESULT_FILTER;

            main::sound.play("ok");

            CarDescriptionPopup.open(context, CarSpecPopup.cp);

            return EVENTRESULT_FILTER;
        }
    }

    module Exit
    {
        attribute balloon_text = nil;

        method onInitialize(context)
        {
            self.balloon_text = context.translate(CarSpecPopup, "Arcade", "close");
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            if (self.active && nil != self.balloon_text)
                BalloonTip.set_value(context, self, self.balloon_text, self.h * 0.5);

            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }

        method onActivate(context)
        {
            if (!self.active)
            {
                main::sound.play("cancel");
                return EVENTRESULT_FILTER;
            }

            main::sound.play("ok");
            self.closing = true;
            CarSpecPopup.onExit(context);
            return EVENTRESULT_FILTER;
        }
    }

    module ColorBar
    {
        hidden.visible = false;

        method set_one_color(context, carcode, focus_color)
        {
            ListBox.setItemTemplate(context, hidden::Item);
            ListBox.setItemCount(1);

            var w = ListBox.getItemWidget(0, context);
            w.base.setColor(main::gtengine::MSpecDB::getCarColorRGB(carcode, focus_color));
            ListBox.focus_index = 0;

            set_color_name(carcode, focus_color);
            ColorName::arrow::Effect.reverse = false;
            ColorName::arrow::Effect.reset();
        }

        method set_color_name(carcode, color)
        {
            var color_name = main::gtengine::MSpecDB::getCarColorName(carcode, color);
            color_name = color_name.trim();
            if (color_name == "")
                color_name = "--";

            ColorName::TextFace.text = color_name;
        }
    }
}