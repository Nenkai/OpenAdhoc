function sortList(list)
{
	if (list == nil)
		return nil;
	
	return list.sort(compare_firstColumnIsTarget);
}

function compare_firstColumnIsTarget(a, b)
{
	var a_ = a[0].toInt();
	var b_ = b[0].toInt();
	compareInt(a_, b_);
	return;
}

function compareInt(a, b)
{
	if (a < b)
		return true;
	return false;
}

function id_bsearch(list, key, getFunc)
{
	if (list == nil || list.size <= 0 || key == nil || key == "")
		return -1;

	var left = 0;
	var right = list.size - 1;
	var mid = 0;

	while (left <= right)
	{
		mid = (left + right) / 2;

		if (key == getFunc(list, mid))
			return mid;

		if (key < getFunc(list, mid))
			right = mid - 1;
		else
			left = mid + 1;
	}
	return -1;
}

function getFirstColumnFromList(list, pos)
{
	return list[pos][0];
}

static sToolTip = nil;
static sPrevToolTip = nil;

function setToolTip(tooltip)
{
	sPrevToolTip = sToolTip;
	sToolTip = tooltip;
	sToolTip.lock = false;

	if (sPrevToolTip == nil)
		;
}


function revertToolTip()
{
	if (sPrevToolTip == nil)
		;

	if (sPrevToolTip == nil)
		disposeToolTip();
	else
	{
		sToolTip = sPrevToolTip;
		sPrevToolTip = nil;
		sToolTip.lock = false;
	}
}

function disposeToolTip()
{
	sPrevToolTip = nil;
	sToolTip = nil;
}

function clearToolTipValue()
{
	if (sToolTip != nil)
	{
		sToolTip.remove();
		sToolTip.value = "";
	}
}

function setToolTipOnValueImpl(translatedText)
{
	if (sToolTip != nil)
	{
		sToolTip.remove();
		sToolTip.value = translatedText;
	}
}

function setToolTipOnValue(do_lock, translated_text)
{
	if (do_lock == nil)
		do_lock = false;

	if (translated_text == nil)
		translated_text = "";

	if (sToolTip != nil)
	{
		if (do_lock)
		{
			setToolTipOnValueImpl(translated_text);
			sToolTip.lock = do_lock;
		}
		else
		{
			sToolTip.lock = do_lock;
			setToolTipOnValueImpl(translated_text);
		}
	}
}


function attachToolTip()
{
	if (sToolTip != nil)
		sToolTip.attach();
}

function buddyAdd(context, name)
{
	var list = main::network.getBuddyList();

	if (list == nil)
	{
		openOnlineErrorDialog(context);
		return false;
	}

	if (list.size >= 100)
	{
		main::sound.play("disable");

		var text = context.translate(PrivateRaceCommon, "ERROR|YOU_CANNOT_ADD_IT_MORE_THAN_THIS");
		openConfirmDialog(context, DIALOG_ERROR, text);

		return false;
	}

	var id = accountName2AccountIDWrapper(context, name);
	if (id <= 0)
	{
		return false;
	}

	for (var i = 0; i < list.size; i++)
	{
		if (list[i][0] == id && list[i][1] == name)
		{
			var text = context.translate(PrivateRaceCommon, "ERROR|ALREADY_ON_YOUR_BUDDY_LIST");
			openConfirmDialog(context, DIALOG_ERROR, text);
			return false;
		}
	}

	if (!main::network.buddyAdd(id))
	{
		openOnlineErrorDialog(context);
		return false;
	}

	return true;
}

function ignoreAdd(context, name)
{
	var list = main::network.getIgnoreList();

	if (list == nil)
	{
		openOnlineErrorDialog(context);
		return false;
	}

	if (list.size >= 32)
	{
		main::sound.play("disable");

		var text = context.translate(PrivateRaceCommon, "ERROR|YOU_CANNOT_ADD_IT_MORE_THAN_THIS");
		openConfirmDialog(context, DIALOG_ERROR, text);

		return false;
	}

	var id = accountName2AccountIDWrapper(context, name);
	if (id <= 0)
	{
		return false;
	}

	if (!main::network.ignoreAdd(id))
	{
		openOnlineErrorDialog(context);
		return false;
	}

	return true;
}

function buddyDelete(context, args)
{
	|var id, var name| = args;

	if (id == nil)
	{
		id = accountName2AccountIDWrapper(context, name);
		if (id <= 0)
			return false;
	}

	if (!main::network.buddyDelete(id))
	{
		openOnlineErrorDialog(context);
		return false;
	}

	return true;
}

function ignoreDelete(context, args)
{
	|var id, var name| = args;
	if (id == nil)
	{
		id = accountName2AccountIDWrapper(context, name);
		if (id <= 0)
			return false;
	}
	if (!main::network.ignoreDelete(id))
	{
		openOnlineErrorDialog(context);
		return false;
	}
	return true;
}

function accountName2AccountIDWrapper(context, name)
{
	if (name == nil)
		return -1;

	var id = main::network.accountIsOnline(name);
	if (id <= 0)
	{
		var error_code = main::network.getLastErrorCode();
		if (error_code == "0:1:0:0:0")
		{
			var text = context.translate(PrivateRaceCommon, "ERROR|THERE_IS_NO_PLAYER_NAMED_OR_NOT_ONLINE").build(name);
			openConfirmDialog(context, DIALOG_ERROR, text);
		}
		else
			openOnlineErrorDialog(context);
		return id;
	}
	return id;
}

function textFilter(context, message)
{
	if (message == nil)
		return false;

	if (message == "")
		return true;

	if (main::network.textFilter(message, 0) == "")
	{
		var error_code = main::network.getLastErrorCode();
		if (error_code == "0:966:0:0:0")
		{
			var text = context.translate(PrivateRaceCommon, "OnlineMessage", "error:0:967:0:0:0");
			openConfirmDialog(context, DIALOG_ERROR, text);
		}
		else
			openOnlineErrorDialog(context);
		return false;
	}
	return true;
}

static sCourseCategoryList = [
	["all",   0],
	["real",  1],
	["city",  2],
	["dirt",  3],
	["road",  4],
	["other", 5]
];

function getCourseList(course_category_code, max_player_num, is_course_code_only)
{
	if (!isExistCourseCategoryCode(course_category_code))
		return nil;

	if (max_player_num == nil)
		max_player_num = 0;

	if (is_course_code_only == nil)
		is_course_code_only = false;

	var list = [];
	var course_list = CourseData[course_category_code + "_crslist"];

	for (var i = 0; i < course_list.size; i++)
	{
		var course = course_list[i];
		var course_code = course.code;

		if (course_category_code != "other")
		{
			if (!course.can_arcade)
				continue;
		}

		var max_car_num = main::menu::MCourseData::GetMaxCarNum(course_code);
		if (max_player_num > max_car_num)
			continue;

		if (course_category_code == "all")
		{
			var type = main::menu::MCourseData::GetType(course_code);
			if (type == "dirt" || type == "snow")
				continue;
		}
		if (is_course_code_only)
			list.push(course_code);
		else
			list.push([course_code, max_car_num]);
	}
	return list;
}

function getMaxCarNum(course_category_code)
{
	var course_list = getCourseList(course_category_code, nil, 0);

	if (course_list == nil || course_list.size == 0)
		return false;

	var current_max_num = 0;

	for (var i = 0; i < course_list.size; i++)
	{
		if (course_list[i][1] > current_max_num)
			current_max_num = course_list[i][1];
	}

	return current_max_num;
}

function getCourseCategoryListSize()
{
	return sCourseCategoryList.size;
}

function getCourseCategoryListText(context, index)
{
	if (!isExistCourseCategoryIndex(index))
		return "--";

	return context.translate(
		PrivateRaceCommon,
		"OnlineMessage",
		sCourseCategoryList[index][0].upcase()
	);
}

function getCourseCategoryCodeFromIndex(index)
{
	if (!isExistCourseCategoryIndex(index))
		return "";

	return sCourseCategoryList[index][0];
}

function getCourseCategoryIndexFromCode(code)
{
	if (code == nil || code == "")
		return -1;

	var cnt = sCourseCategoryList.size;
	var index = -1;
	for (var i = 0; i < cnt; i++)
	{
		if (code == sCourseCategoryList[i][0])
		{
			index = sCourseCategoryList[i][1];
		}
	}
	return index;
}

function isExistCourseCategoryCode(code)
{
	if (code == nil || code == "")
		return false;

	var cnt = sCourseCategoryList.size;
	for (var i = 0; i < cnt; i++)
	{
		if (code == sCourseCategoryList[i][0])
			return true;
	}
	return false;
}

function isExistCourseCategoryIndex(index)
{
	if (index == nil)
		return false;

	return (0 <= index && index <= 5);
}

function isHavingOrEquipedLimitedTire(context, course_category_index, course_code)
{
	if (!isExistCourseCategoryIndex(course_category_index) || course_code == nil || course_code.size == 0)
		return false;

	if (course_category_index == 3)
	{
		var success = false;
		var having_dirt = false;
		var having_snow = false;
		var is_equiped = false;
		var tire_text = "";

		var riding_car = main::game.garage.riding_car;

		var dirt_tire_key = "REGURATION_TIRE_%02d".format(11);
		var snow_tire_key = "REGURATION_TIRE_%02d".format(12);

		var dirt_tire_text = context.translate(PrivateRaceCommon, "OnlineMessage", dirt_tire_key);
		var snow_tire_text = context.translate(PrivateRaceCommon, "OnlineMessage", snow_tire_key);

		if (course_code == "all")
		{
			having_dirt = isHavingDirtTire(riding_car);
			having_snow = isHavingSnowTire(riding_car);

			if (having_dirt && having_snow)
				success = true;

			if (success)
			{
				tire_text = context.translate(PrivateRaceCommon, "OnlineMessage", "DIRT_TIRES_OR_SNOW_TIRES")
					.build(dirt_tire_text, snow_tire_text);
			}
			else if (!having_dirt && !having_snow)
			{
				tire_text = context.translate(PrivateRaceCommon, "OnlineMessage", "DIRT_TIRES_AND_SNOW_TIRES")
					.build(dirt_tire_text, snow_tire_text);
			}
			else if (!having_dirt)
			{
				tire_text = dirt_tire_text;
			}
			else
			{
				tire_text = snow_tire_text;
			}
		}
		else
		{
			var type = main::menu::MCourseData::GetType(course_code);

			if (type == "dirt")
			{
				having_dirt = isHavingDirtTire(riding_car);
				if (having_dirt)
				{
					is_equiped = isEquipedTireType("DIRT", riding_car);
				}
				tire_text = dirt_tire_text;
			}
			else if (type == "snow")
			{
				having_snow = isHavingSnowTire(riding_car);
				if (having_snow)
				{
					is_equiped = isEquipedTireType("SNOW", riding_car);
				}
				tire_text = snow_tire_text;
			}

			if (having_dirt || having_snow)
			{
				success = true;
			}
		}

		if (success)
		{
			if (!is_equiped)
			{
				main::sound.play("ok");
				var text = context.translate(PrivateRaceCommon, "OnlineMessage", "YOU_CHANGE_AN_APPROPRIATE_TIRE").build(tire_text);
				penConfirmDialog(context, DIALOG_OK, text);
			}
			return true;
		}
		else
		{
			main::sound.play("disable");
			if (tire_text != nil)
			{
				var text = context.translate(PrivateRaceCommon, "OnlineMessage", "YOU_DO_NOT_HAVE_A_NECESSARY_TIRE").build(tire_text);
				openConfirmDialog(context, DIALOG_ERROR, text);
			}
		}
		return false;
	}
	return true;
}

function isHavingDirtTire(riding_car)
{
	return getHavingLimitedTire(11, riding_car) != nil;
}

function isHavingSnowTire(riding_car)
{
	return getHavingLimitedTire(12, riding_car) != nil;
}

function isWorldTypeVisible(world_name)
{
	var type = "V";
	world_name = world_name.toString();

	return (world_name.size >= 18 && world_name.substr(0, type.size) == type);
}

function isWorldTypeVisibleHoldingRoom(world_name)
{
	var type = "VH";
	world_name = world_name.toString();

	return (world_name.size >= 18 && world_name.substr(0, type.size) == type)
}

function getPrefixWorldName(type)
{
	|var id, var val| = 1;
	return type + "%08X%08X".format(id, val);
}

function getRemovedPrefixWorldName(world_name)
{
	if (world_name == nil || world_name == "" || world_name.size <= 18)
		return "";

	return world_name.substr(18, world_name.size - 18);
}

function getHoldingRoomIdFromWorldName(world_name)
{
	if (world_name == nil || world_name == "" || world_name.size < 18)
		return 0;

	return ("0X" + world_name.substr(2, 8)).toInt();
}

function getTextFromItemList(list, id)
{
	var pos = id_bsearch(list, id, getFirstColumnFromList);
	
	if (pos >= 0)
		return list[pos][1];

	return "";
}

function getChatChannelNameForPresentation(context, world_name)
{
	var name = "";
	if (isWorldTypeVisibleHoldingRoom(world_name))
	{
		var room_id = getHoldingRoomIdFromWorldName(world_name);

		if (LobbyRoot::sHoldingRoomList == nil || LobbyRoot::sHoldingRoomList.size <= 0)
		{
			LobbyRoot::fetchAndInitializeLobbyConfig(context);
		}

		name = getTextFromItemList(LobbyRoot::sHoldingRoomList, room_id);
		name += getRemovedPrefixWorldName(world_name);
	}
	else
		name = getRemovedPrefixWorldName(world_name);

	return name;
}