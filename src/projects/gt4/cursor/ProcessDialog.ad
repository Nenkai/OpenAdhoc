








module PROJECT::ROOT
{
    static last_error_code = "";

    function setBarActor(widget)
    {
        widget.x = -widget.w;

        var actor = main::menu::MMoveActor(widget, PS2_SCREEN_W_F, widget.y);
        widget.actor = actor;
        widget.actor.ratio = 0.01;
        widget.actor.repeat = true;
        widget.actor.flip = false;
        widget.actor.linear = true;
        widget.actor.out = false;
        widget.actor.warp();
        widget.actor.out = true;
    }

    function onLoad(context)
    {
        setMoveActor(Dialog);
        setFadeActorRoot(ROOT);
        setBarActor(bar);
    }
    
    function open_motion(context)
    {
        Dialog.pack_allocate_y = false;
        Dialog.actor.destinationY = PS2_SCREEN_H_F;
        Dialog.actor.out = true;
        Dialog.actor.warp();
        ROOT.actor.out = true;
        ROOT.actor.warp();
        context.pushPage(ROOT);
        Dialog.actor.out = false;
        ROOT.actor.out = false;
        context.sync(0.5);
        Dialog.pack_allocate_y = true;
    }

    function close_motion(context)
    {
        Dialog.pack_allocate_y = false;
        Dialog.actor.destinationY = -Dialog.h;
        Dialog.actor.out = true;
        ROOT.actor.out = true;
        context.sync(0.5);
        context.closePage(ROOT);
        Dialog.pack_allocate_y = true;
    }

    function open(context, message, func, args, abort)
    {
        Dialog::Title::title.text = context.translate(ROOT, "Wait");
        Dialog::Message::message.text = message;

        var tip_visible = abort != nil && abort;
        if (tip_visible)
        {
            ToolTip::tip.remove();
            ToolTip::tip.value = context.translate(ROOT, "you_can_abort");
            ToolTip::bg.visible = true;
            ToolTip::tip.visible = true;
        }
        else
        {
            ToolTip::bg.visible = false;
            ToolTip::tip.visible = false;
        }

        var prev_visible = context.cursor_visible;
        context.cursor_visible = false;
        open_motion(context);

        var res = func(context, args);
        last_error_code = main::network.getLastErrorCode();
        close_motion(context);
        context.cursor_visible = prev_visible;
        return res;
    }
}