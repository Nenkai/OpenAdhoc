//---------------------------------------------------------------------------------------
// RankingDetailPopupImpl.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module RankingDetailPopup
{
    attribute mode = nil;
    attribute caller_root = nil;
    attribute ranking_list = nil;

    function simulation_name(context, physics_pro)
    {
        return context.translate(RankingDetailPopup, "QuickMenu", physics_pro > 0 ? "SIMULATION_PRO" : "SIMULATION_STANDARD");
    }

    method open(context, mode, ranking_list)
    {
        self.caller_root = context.getRootWindow();
        self.mode = mode;
        self.ranking_list = ranking_list;
        self.closing = false;
        self.result = false;
        self.popup = main::SequenceUtil::ModalPage(context, RankingDetailPopup);
        self.popup.open();
        return [ "result" : self.result ];
    }

    method onInitialize(context)
    {

        setCursor(context, "wait");

        hidden.visible = false;

        BalloonTip.visible = false;
        BalloonTip.initialize(context);
        Contents.initialize(context);

        var mode_name = main::gtengine::GameMode::TIME_ATTACK == self.mode ? context.translate(RankingDetailPopup, "Arcade", "freerun") : context.translate(RankingDetailPopup, "Arcade", "drift");
        var course = main::GlobalStatus::game_context.course;
        if (course != nil && course != main::gtengine::MSpecDB::NO_CODE64)
        {
            var course_label = main::gtengine::MSpecDB::getCourseLabel(course);
            var layout;
            if (course_label.beginWith("r_"))
            {
                course_label = course_label.substr(2);
                layout = "LAYOUT_REVERSE";
            }
            else
                layout = "LAYOUT_NORMAL";

            if (main::gtengine::GameMode::TIME_ATTACK == self.mode)
            {
                Pane::About::TextFace.text = "%s / %s / %s".format(mode_name, context.translate(RankingDetailPopup, "CourseName", course_label),
                                                                   context.translate(RankingDetailPopup, "TrialSetting", layout))
            }
            else
            {

                var drift_type = context.translate(RankingDetailPopup, "TrialSetting", main::GlobalStatus::game_context.drift_type > 0 ? "FULL_LAP" : "SECTION");
                Pane::About::TextFace.text = "%s / %s / %s / %s".format(mode_name, context.translate(RankingDetailPopup, "CourseName", course_label),
                                                                        context.translate(RankingDetailPopup, "TrialSetting", layout),
                                                                        // Something commented out here?
                                                                        drift_type);
            }
        }
        else
        {
            Pane::About::TextFace.text = "%s / %s".format(mode_name, context.translate(RankingDetailPopup, "Arcade", "COURSE_NOT_SELECTED"));
        }

        RankingDetailPopup.setFocus(Pane::Footer::OK);

        onInitializeAnimation(context);

        setCursor(context, "default");

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PSP_PAD_CTRL_L3_UP:
                main::sound.play("cursor");
                var index = Contents::QuickBoard::Body.focus_index;
                if (index > 3)
                    Contents::QuickBoard::Body.decIndex(1);

                return EVENTRESULT_FILTER;

            case PSP_PAD_CTRL_L3_DOWN:
                main::sound.play("cursor");
                Contents::QuickBoard::Body.incIndex(1);
                return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }
    
    attribute popup = nil;
    attribute closing = nil;
    attribute result = nil;

    method onCancel(context)
    {
        main::sound.play("cancel");
        RankingDetailPopup.setFocus(Pane::Footer::Cancel);
        return EVENTRESULT_FILTER;
    }

    method close(context)
    {
        if (self.popup != nil)
        {
            self.popup.close();
            self.popup = nil;
        }
    }

    method onInitializeAnimation(context)
    {
        context.event_mask &= ~1;
        context.filterKeyEvent();

        ScalarInterpolator.reverse = false;
        ScalarInterpolatorX.reverse = false;
        ScalarInterpolatorY.reverse = false;

        ScalarInterpolator.restart();
        ScalarInterpolatorX.restart();
        ScalarInterpolatorY.restart();

        ScalarInterpolatorX.on_effect_end = function (context)
        {
            main::menu::MFocusEnterEvent(context, RankingDetailPopup.focus_widget).dispatchEvent();
            BalloonTip.visible = true;
            ScalarInterpolatorX.on_effect_end = nil;
            context.event_mask |= 1;

            if (RankingDetailPopup.caller_root != nil)
            {
                RankingDetailPopup.caller_root.visible = false;
            }
        }
    }

    method onCancelAnimation(context)
    {
        context.event_mask &= ~1;
        context.filterKeyEvent();

        ScalarInterpolator.reverse = true;
        ScalarInterpolatorX.reverse = true;
        ScalarInterpolatorY.reverse = true;

        ScalarInterpolatorX.on_effect_end = function (context)
        {
            RankingDetailPopup.close(context);
            ScalarInterpolatorX.on_effect_end = nil;
            context.event_mask |= 1;
        }

        if (RankingDetailPopup.caller_root != nil)
        {
            RankingDetailPopup.caller_root.visible = true;
            RankingDetailPopup.caller_root = nil;
        }

        ScalarInterpolator.restart();
        ScalarInterpolatorX.restart();
        ScalarInterpolatorY.restart();
    }

    module Contents
    {
        method initialize(context)
        {
            var listbox = QuickBoard.Body;
            listbox.adjustment = main::menu::MAdjustment();
            QuickBoard.VScrollbar.adjustment = listbox.adjustment;

            if (RankingDetailPopup.ranking_list != nil)
            {
                listbox.setItemCount(RankingDetailPopup.ranking_list.table.size);
                listbox.setItemTemplate(context, hidden::QuickBoardItem);
                if (main::gtengine::GameMode::TIME_ATTACK == RankingDetailPopup.mode)
                {
                    var best_time;
                    for (var i = 0; i < RankingDetailPopup.ranking_list.table.size; ++i)
                    {
                        var rank = RankingDetailPopup.ranking_list.table[i];
                        if (i == 0)
                            best_time = rank.time;

                        var item = listbox.getItemWidget(i, context);
                        item.initializeForTimeAttackRanking(context, i + 1, best_time, rank);
                    }
                }
                else
                {
                    var best_point;
                    var table = main::GlobalStatus::game_context.drift_type > 0 ? RankingDetailPopup.ranking_list.table_endless : RankingDetailPopup.ranking_list.table;
                    for (var i = 0; i < RankingDetailPopup.ranking_list.table.size; ++i) // BUG: Mistake in original, should be table.size
                    {
                        var rank = table[i];
                        if (i == 0)
                            best_point = rank.point;

                        var item = listbox.getItemWidget(i, context);
                        item.initializeForDriftAttackRanking(context, i + 1, best_point, rank);
                    }
                }
            }
            else
            {
                var size = 10;
                listbox.setItemCount(size);
                listbox.setItemTemplate(context, hidden::QuickBoardItem);
                if (RankingDetailPopup.mode == main::gtengine::GameMode::TIME_ATTACK)
                {
                    for (var i = 0; i < size; ++i)
                    {
                        var item = listbox.getItemWidget(i, context);
                        item.initializeForTimeAttackRanking0(context, i + 1);
                    }
                }
                else
                {
                    for (var i = 0; i < size; ++i)
                    {
                        var item = listbox.getItemWidget(i, context);
                        item.initializeForDriftAttackRanking0(context, i + 1);
                    }
                }
            }

            listbox.focus_index = 3;
        }
    }


    module hidden::QuickBoardItem
    {
        method initializeForTimeAttackRanking0(context, position)
        {
            self.Position.TextFace.text = position;
            var even = (position % 2) == 0;
            self.Car.ColorFace0.visible = even;
            self.Car.ColorFace1.visible = !even;
            self.Time.ColorFace0.visible = even;
            self.Time.ColorFace1.visible = !even;

            self.Car.VBox.TextFace1.text = context.translate(RankingDetailPopup, "QuickMenu", "NO_TARGET_CAR");
            self.Car.VBox.TextFace2.visible = false;
            self.Time.VBox.TextFace.text = context.translate(RankingDetailPopup, "QuickMenu", "NO_TARGET_TIME");
            self.Time.VBox.TextFaceDiff.visible = false;
        }

        method initializeForDriftAttackRanking0(context, position)
        {
            self.Position.TextFace.text = position;
            var even = (position % 2) == 0;
            self.Car.ColorFace0.visible = even;
            self.Car.ColorFace1.visible = !even;
            self.Time.ColorFace0.visible = even;
            self.Time.ColorFace1.visible = !even;

            self.Car.VBox.TextFace1.text = context.translate(RankingDetailPopup, "QuickMenu", "NO_TARGET_CAR");
            self.Car.VBox.TextFace2.visible = false;
            self.Time.VBox.TextFace.text = context.translate(RankingDetailPopup, "QuickMenu", "NO_TARGET_POINT");
            self.Time.VBox.TextFaceDiff.visible = false;
        }

        method initializeForTimeAttackRanking(context, position, best_time, ta_rank)
        {
            self.Position.TextFace.text = position;
            var even = (position % 2) == 0;
            self.Car.ColorFace0.visible = even;
            self.Car.ColorFace1.visible = !even;
            self.Time.ColorFace0.visible = even;
            self.Time.ColorFace1.visible = !even;

            if (main::gtengine::MSpecDB::NO_CODE64 == ta_rank.car)
            {
                self.Car.VBox.TextFace1.text = context.translate(RankingDetailPopup, "QuickMenu", "NO_TARGET_CAR");
                self.Car.VBox.TextFace2.visible = false;
                self.Time.VBox.TextFace.text = context.translate(RankingDetailPopup, "QuickMenu", "NO_TARGET_TIME");
                self.Time.VBox.TextFaceDiff.visible = false;
            }
            else
            {
                var car_code = ta_rank.car;
                var car_label = main::gtengine::MSpecDB::getCarLabel(car_code);

                self.Car.ImageFace.image_path = "car/thumbnail/%s.%02d".format(car_label, ta_rank.color);
                self.Car.ImageFace.doInitialize(context);
                self.Car.VBox.TextFace1.text = main::gtengine::MSpecDB::getCarShortName(car_code);
                var ranking_format = context.translate(RankingDetailPopup, "QuickMenu", "RANKING_FORMAT");
                |var tire_f_str, var tire_r_str| = TireUtil::getTireNames(context, RankingDetailPopup, ta_rank.tire_f, ta_rank.tire_r, main::GlobalStatus::game_context.course);
                self.Car.VBox.TextFace2.text = ranking_format.build(
                    main::pdiext::GetDateTimeStringShort(ta_rank.date),
                    tire_f_str, tire_r_str,
                    simulation_name(context, ta_rank.physics_pro),
                );
                self.Time.VBox.TextFace.text = main::pdiext::GetRaceTimeString(ta_rank.time);
                if (best_time == main::pdiext::MAX_LAPTIME1000 || position == 1)
                {
                    self.Time.VBox.TextFaceDiff.visible = false;
                }
                else
                {
                    self.Time.VBox.TextFaceDiff.text = "+ %s".format(main::pdiext::GetRaceTimeString(ta_rank.time - best_time))
                }
            }
        }

        method initializeForDriftAttackRanking(context, position, best_point, da_rank)
        {
            self.Position.TextFace.text = position;
            var even = (position % 2) == 0;
            self.Car.ColorFace0.visible = even;
            self.Car.ColorFace1.visible = !even;
            self.Time.ColorFace0.visible = even;
            self.Time.ColorFace1.visible = !even;

            if (main::gtengine::MSpecDB::NO_CODE64 == da_rank.car)
            {
                self.Car.VBox.TextFace1.text = context.translate(RankingDetailPopup, "QuickMenu", "NO_TARGET_CAR");
                self.Car.VBox.TextFace2.visible = false;
                self.Time.VBox.TextFace.text = context.translate(RankingDetailPopup, "QuickMenu", "NO_TARGET_POINT");
                self.Time.VBox.TextFaceDiff.visible = false;
            }
            else
            {
                var car_code = da_rank.car;
                var car_label = main::gtengine::MSpecDB::getCarLabel(car_code);

                self.Car.ImageFace.image_path = "car/thumbnail/%s.%02d".format(car_label, da_rank.color);
                self.Car.ImageFace.doInitialize(context);
                self.Car.VBox.TextFace1.text = main::gtengine::MSpecDB::getCarShortName(car_code);
                var ranking_format = context.translate(RankingDetailPopup, "QuickMenu", "RANKING_FORMAT");
                |var tire_f_str, var tire_r_str| = TireUtil::getTireNames(context, RankingDetailPopup, da_rank.tire_f, da_rank.tire_r, main::GlobalStatus::game_context.course);
                self.Car.VBox.TextFace2.text = ranking_format.build(
                    main::pdiext::GetDateTimeStringShort(da_rank.date),
                    tire_f_str, tire_r_str,
                    simulation_name(context, da_rank.physics_pro),
                );

                self.Time.VBox.TextFace.text = da_rank.point;

                if (best_point < 0 || position == 1)
                    self.Time.VBox.TextFaceDiff.visible = false;
                else
                    self.Time.VBox.TextFaceDiff.text = "- %d".format(best_point - da_rank.point)
            }
        }
    }

    module Pane::Footer
    {
        method onFocusEnter(context, event)
        {
            var w = event.widget;
            BalloonTip.set_value(context, w, w.balloon.text, 3.5);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }
    
    module Pane::Footer::Cancel
    {
        method onActivate(context)
        {
            if (!RankingDetailPopup.closing)
            {
                main::sound.play("cancel");
                RankingDetailPopup.closing = true;
                RankingDetailPopup.onCancelAnimation(context);
            }
            return EVENTRESULT_FILTER;
        }
    }
    
    module Pane::Footer::OK
    {
        method onActivate(context)
        {
            if (RankingDetailPopup.closing)
                return EVENTRESULT_FILTER;

            main::sound.play("ok");
            RankingDetailPopup.closing = true;
            RankingDetailPopup.result = true;
            Blink.ScalarInterpolator.on_effect_end = function (context)
            {
                RankingDetailPopup.close(context);
            }
            if (RankingDetailPopup.caller_root != nil)
            {
                RankingDetailPopup.caller_root.visible = true;
                RankingDetailPopup.caller_root = nil;
            }

            Blink.ScalarInterpolator.restart();
            return EVENTRESULT_FILTER;
        }
    }
}