













module PROJECT::ROOT
{
    function open(context)
    {
        start_page(context, ROOT);
    }

    function close(context)
    {
        start_page(context, OptionRoot);
    }

    function setupTuner(context, current_tuner)
    {
        var vbox = Pane::TunerLimit::OptionMenu::popup::vbox;
        vbox.clearWindow(context);

        var tuner_list = main::menu::MDatabase::getAllTunerList();
        var num = tuner_list.size;
        var item = OptionRoot::hidden::OptionItem.doCopy();
        item["label"].text = context.translate(ROOT, "none");
        item.defineStatic("tuner", "");
        vbox.appendChild(context, item);

        var current_index = 0;
        var j = 0;
        for (var i = 0; i < num; i++)
        {
            var tuner = tuner_list[i];
            if (enableTuner(tuner))
            {
                if (current_tuner == tuner)
                    current_index = j + 1;

                var item = OptionRoot::hidden::OptionItem.doCopy();
                item["label"].text = context.translate(ROOT, "TunerName", tuner);
                item["label"].adjustScale();
                item.defineStatic("tuner", tuner);
                vbox.appendChild(context, item);

                j++;
            }
        }

        Pane::TunerLimit::OptionMenu.applyAppend(context);
        Pane::TunerLimit::OptionMenu.setIndex(context, current_index);
    }

    function reflect(context)
    {
        var option = main::game.option;

        if (main::game.favorite_car.getSize() <= 0)
        {
            option.limit_favorite_car_only = false;
            Pane::CarLimit::OptionMenu.setIndex(context, 1 - option.limit_favorite_car_only);
            Pane::CarLimit::OptionMenu.insensitive = true;
        }
        else
        {
            Pane::CarLimit::OptionMenu.setIndex(context, 1 - option.limit_favorite_car_only);
            Pane::CarLimit::OptionMenu.insensitive = false;
        }

        Pane::CourseLimit::OptionMenu.setIndex(context, 1 - option.limit_favorite_course_only);
        Pane::EnemyCarLimit::OptionMenu.setIndex(context, 1 - option.limit_enemies_to_favorite_car_only);
        setupTuner(context, option.special_arcade_tuner);
    }
    
    function getOptionMenuTuner()
    {
        var item = Pane::TunerLimit::OptionMenu.getItem();
        if (item != nil)
            return item["tuner"];
        else
            return "";
    }

    function enableTuner(tuner)
    {
        var enable = false;
        if (CarData.defined(tuner + "_carlist"))
        {
            var list = CarData[tuner + "_carlist"];
            for (var i = 0; i < list.size; i++)
            {
                if (main::game.isCarAvailable(list[i]))
                {
                    enable = true;
                    break;
                }
            }
        }

        return enable;
    }

    function apply(context)
    {
        main::game.setNeedSave();
        var option = main::game.option;

        option.limit_favorite_car_only = 1 - Pane::CarLimit::OptionMenu.index;
        option.limit_favorite_course_only = 1 - Pane::CourseLimit::OptionMenu.index;
        option.limit_enemies_to_favorite_car_only = 1 - Pane::EnemyCarLimit::OptionMenu.index;

        var tuner_list = main::menu::MDatabase::getAllTunerList();
        var tuner_index = Pane::TunerLimit::OptionMenu.index - 1;
        option.special_arcade_tuner = getOptionMenuTuner();
    }

    function onInitialize(context)
    {
        if (main::game.favorite_car.getSize() > 0)
            ROOT.setFocus(Pane::CarLimit::OptionMenu);
        else
            ROOT.setFocus(Pane::CourseLimit::OptionMenu);

        reflect(context);
    }

    function onFinalize(context)
    {
        Pane::TunerLimit::OptionMenu::popup::vbox.clearWindow(context);
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::TunerLimit::OptionMenu
{
    function onPopupOpen(context)
    {

    }

    function onPopupClosed(context)
    {

    }   
    
    function onValueChanged(context)
    {

    }
}

module PROJECT::ROOT::Pane::Buttons::Cancel
{
    function onActivate(context)
    {
        main::sound.play("ok");
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Buttons::OK
{
    function onActivate(context)
    {
        var tuner = getOptionMenuTuner();
        if (tuner != "")
        {
            if (!enableTuner(tuner))
            {
                main::sound.play("disable");
                var tuner_name = context.translate(ROOT, "TunerName", tuner);
                openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "invalid maker").format(tuner_name));
                return EVENTRESULT_FILTER;
            }
        }

        main::sound.play("ok");
        apply(context);
        close(context);
        return EVENTRESULT_FILTER;
    }
}