module PROJECT::ROOT
{
    #include "../quick-share/icon.ad";

    var quick_work = main::menu::MQuickWork();
    for (var i = 1; i <= quick_work.numberOfEntries; i++)
    {
        var widget = ROOT["Grid" + i];
        setMoveActor(widget, PS2_SCREEN_W + (392 * 2 * i), 0, 0.15);
    }

    function onInitialize(context)
    {
#ifndef GT4O_US_BETA
        context.transition = main::menu::MColorTransition();
#endif

        var quick_work = main::menu::MQuickWork();

        for (var i = 0; i < quick_work.numberOfEntries; i++)
        {
            ROOT["Grid" + (i + 1)]["CarName"].text = quick_work.getGridCarName(i);
            ROOT["Grid" + (i + 1)]["CarName"].abbreviate();
            ROOT["Grid" + (i + 1)]["ColorChip"].setColor(quick_work.getColorChipInfo(i));
            ROOT["Grid" + (i + 1)]["Point"].text = quick_work.getWeight(i);
            ROOT["Grid" + (i + 1)]["Total"].text = quick_work.getPower(i);
        }

        for (var i = 1; i <= 6; i++)
        {
            var widget = ROOT["Grid" + i];
            widget.actor.out = true;
            widget.actor.warp();
            widget.actor.out = false;
        }

        for (var i = quick_work.numberOfEntries + 1; i <= 6; i++)
        {
            ROOT["Grid" + i].visible = false;
        }

        if (quick_work.playerGridNumber >= 0)
        {
            var gnum = quick_work.playerGridNumber + 1;
            ROOT["Grid" + gnum]["CarName"].color = ROOT::Hidden::MyGridColor.color;
            ROOT["Grid" + gnum]["GridNumber"].color = ROOT::Hidden::MyGridColor.color;
        }

        var race_code = main::menu::MQuickWork().raceLabel;

        var name = getEventNameByRaceCode(context, ROOT, race_code);
        var event_name = context.translate(ROOT, "EventName", name);

        if (quick_work.IsFinalSession)
        {
            Title.text = context.translate(ROOT, "final_title");
            var fmt_str = context.translate(ROOT, "session_final");
            GridTitle_text.text = fmt_str.format(event_name);
            Buttons::Next.visible = false;
            Buttons::Abandon.visible = false;
        }
        else 
        {
            var fmt_str = context.translate(ROOT, "session_number");
            GridTitle_text.text = fmt_str.build(event_name, quick_work.SessionNumber + 1);
        }

        GridTitle_text.adjustScale();

        main::sound.startStreamEx("pcm", "default_quick", -1, 1, main::game.option.menu_bgm_volume);
        setIconPosition(context);
        setDefaultIconFocus(context);
    }

    function set_next_start_project()
    {
        main::game.next_menu_project = main::game.major_menu_project;
    }

    static icon_name_tbl = [
        "Replay",
        "SaveReplay",
        "Next",
        "Abandon",
        "Option",
        "Exit"
    ];

    function setIconPosition(context)
    {
        var max = icon_name_tbl.size;
        var num = 0;

        for (var i = 0; i < max; i++)
        {
            if (ROOT::Buttons[icon_name_tbl[i]].visible == true)
            {
                num++;
            }
        }

        var screen_w = PS2_SCREEN_W;
        var icon_w = 72;
        var space = 4;

        var st = ((screen_w - ((num * icon_w))) - (space * (num - 1))) / 2;
        var c = 0;
        
        for (var i = 0; i < max; i++)
        {
            if (ROOT::Buttons[icon_name_tbl[i]].visible == true)
            {
                ROOT::Buttons[icon_name_tbl[i]].x = st + ((icon_w + space) * c);
                c++;
            }
        }
    }

    function onCancel(context, event, item)
    {
        main::sound.play("cancel");

        var quick_work = main::menu::MQuickWork();

        if (!quick_work.IsFinalSession)
        {
            if (!openConfirmDialog(context, DIALOG_QUERY, context.translate(ChampionshipRoot, "do you temporally exit this race?")))
                return EVENTRESULT_FILTER;
        }

        main::sound.stopStream();
        quick_work.selectedCommand = "COMMAND_EXIT";
        
        context.transition.panOut(context);
        context.transition.syncOut(context);

        set_next_start_project();
        context.finish();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Replay
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_REPLAY";
        quick_work.cursorPosition = getIconIndex(context, "Replay");

        context.transition.panOut(context);
        context.transition.syncOut(context);
        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::SaveReplay
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_SAVE_REPLAY";
        quick_work.cursorPosition = getIconIndex(context, "SaveReplay");

        context.transition.panOut(context);
        context.transition.syncOut(context);
        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Next
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_NEXT_RACE";
        quick_work.cursorPosition = 0;

        context.transition.panOut(context);
        context.transition.syncOut(context);
        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Abandon
{
    function onActivate(context)
    {
        main::sound.play("ok");

        if (!openConfirmDialog(context, DIALOG_QUERY, context.translate(ChampionshipRoot, "do you abandon this race?")))
            return EVENTRESULT_FILTER;

        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_RETIRE_CHAMPIONSHIP";

        context.transition.panOut(context);
        context.transition.syncOut(context);
        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Option
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_OPTION";
        quick_work.cursorPosition = getIconIndex(context, "Option");

        context.transition.panOut(context);
        context.transition.syncOut(context);
        set_next_start_project();
        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Exit
{
    function onActivate(context)
    {
        main::sound.play("ok");

        var quick_work = main::menu::MQuickWork();

        if (!quick_work.IsFinalSession)
        {
            if (!openConfirmDialog(context, DIALOG_QUERY, context.translate(ChampionshipRoot, "do you temporally exit this race?")))
                return EVENTRESULT_FILTER;
        }
        
        main::sound.stopStream();

        quick_work.selectedCommand = "COMMAND_EXIT";
        
        context.transition.panOut(context);
        context.transition.syncOut(context);

        set_next_start_project();
        context.finish();
        return EVENTRESULT_FILTER;
    }
}