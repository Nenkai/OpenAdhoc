//---------------------------------------------------------------------------------------
// LicenseCategoryRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ROOT
{
    hidden.visible = false;

    #include "projects/gt5m/arcade/LicenseCategoryData.ad";

    attribute sCategoryId = nil;
    attribute sDefaultFocusIndex = nil;
    attribute sEventInfo = nil;

    method open(context, pagein_effect, category = 0, default_focus_index = 0)
    {
        self.sCategoryId = category;
        self.sDefaultFocusIndex = default_focus_index;
        if (pagein_effect)
            StartPageIn_XEffect(context, context.getRootWindow(), ROOT);
        else
            StartPageOut_XEffect(context, context.getRootWindow(), ROOT);
    }

    method onInitialize(context)
    {
        var my_cash = gGameStatus.user_profile.cash;
        Header::Cash::TextFace.text = main::pdiext::MMisc::GetMoneyString(my_cash);

        var game_day = gGameStatus.user_profile.calendar.getGameDay();
        Header::Date::TextFace.text = context.translate(ROOT, "Arcade", "GAME_DAY").build(game_day + 1);

        self.sEventInfo = getEventInfo(context);

        ListBox.setItemTemplate(context, hidden::Item);
        ListBox.setItemCount(LicenseUtil::GetLicenseCountOfCategory(self.sCategoryId));

        ListBox.focus_index = self.sDefaultFocusIndex;
        self.sDefaultFocusIndex = nil;
        
        var w = ListBox.getItemWidget(ListBox.focus_index, context);
        w.set(context, ListBox.focus_index);

        HScrollbar.initialize(ListBox);

        var bg_index = LicenseUtil::getBGIndex(self.sCategoryId);
        bg::BG_0.visible = bg_index == 0;
        bg::BG_1.visible = bg_index == 1;
        bg::BG_2.visible = bg_index == 2;

        var image_list = ["mission_type_green", "mission_type_orange", "mission_type_blue"];
        Header::type.image_path = "image/gt5m/icon/%{image_list[bg_index]}.png";

        var category_str = LicenseUtil::GetCategoryString(ROOT.sCategoryId);
        Header::category.image_path = "image/gt5m/mission/box_%{category_str.downcase()}.png"

        Header::title.text = context.translate(ROOT, "LicenseGT5M", "CATEGORY_SUB_TITLE_" + self.sCategoryId);

        ToolTip::tip.action_type = 1;

        ROOT.setFocus(ListBox);

        if (SoundUtil::BGMIsPlaying())
            SoundUtil::BGMFadeout(0.5);
        else
        {
            var name_bgm = "event_%{self.sCategoryId}";
            SoundUtil::BGMPlayGroup('menu', name_bgm);
        }

    }

    method onPageInEnd(context)
    {
        BalloonTip.initialize(context);

        var focus_w = ROOT.getFocusWidget();
        if (focus_w != nil && focus_w['onFocusEnter'] != nil)
            focus_w.onFocusEnter(context);

        if (!SoundUtil::BGMIsPlaying())
        {
            var name_bgm = "event_%{self.sCategoryId}";

            SoundUtil::BGMPlayGroup('menu', name_bgm);
        }

        HScrollbar.stop_update = false;
        HScrollbar.update_arrow();
    }

    method onActivate(context)
    {
        main::sound.play("ok");

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");

        LicenseRoot.open(context, self.sCategoryId, false);

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        self.sCategoryId = nil;
        self.sDefaultFocusIndex = nil;
        self.sEventInfo = nil;
    }

    method GotoRace(context, lid, category_index)
    {
        main::sound.play("start");

        setCursor(context, "wait");
        var fst = main::pdistd::ReadFile("textdata/gt5m/license/license_User%03d.xml".format(lid));
        var buf = fst["buffer"];
        if (buf != nil)
        {
            main::GamePlan::begin();
            var gp = main::GamePlan();
            var success = gp.parseXML(buf);
            main::GamePlan::end();

            if (success)
            {
                var option = gGameStatus.user_profile.option;
                if (option.play_leave_limit > 0)
                    gp.events[0].play_style.leave_limit = option.play_leave_limit;
                game_context().license_id = lid;

                gp.execute(context, 0, nil, nil);

                SoundUtil::BGMFadeout(1.0);
                setCursor(context, "default");

                return true;
            }
        }

        setCursor(context, "default");
        main::sound.play("cancel");
        return false;
    }

    class EventInfo
    {
        attribute entry_car = nil;
        attribute course = nil;
        attribute prize_table = nil;
        attribute title = nil;
        attribute description = nil;
        attribute eval_condition_type = nil;
        attribute eval_condition_data = nil;

        method __init__(data)
        {
            var car_code32 = data[0];
            var car_code = main::gtengine::MSpecDB::CarCode32ToCarCode64(car_code32);
            self.entry_car = main::gtengine::MCarParameter(car_code);
            self.entry_car.color = data[1];
            var course_code32 = data[2];
            self.course = main::gtengine::MSpecDB::CourseCode32ToCourseCode64(course_code32);
            self.title = data[3];
            self.description = data[4];
            self.eval_condition_type = data[5];
            self.eval_condition_data = data[6];
        }
    }

    method getEventInfo(context)
    {
        var count = LicenseUtil::GetLicenseCountOfCategory(self.sCategoryId);
        var array = Array(count);
        for (var i = 0; i < count; i++)
        {
            var index = LicenseUtil::GetIndex(ROOT.sCategoryId, i);
            var lid = LicenseUtil::GetLicenseId(index);
            var meta_data = sMetaData["%03d".format(lid)];
            var event = EventInfo(meta_data);
            var reward = LicenseUtil::getReward(self.sCategoryId, i);
            event.prize_table = reward.prize_table;
            array[i] = event;
        }

        return array;
    }

    method onKeyPress(context, event)
    {
        return EVENTRESULT_CONTINUE;
    }

    module ListBox
    {
        method onVisibleNotify(context, indexes)
        {
            foreach (var i in indexes)
            {
                if (ListBox.getItemVisible(i))
                {
                    var w = ListBox.getItemWidget(i, context);
                    if (w != nil)
                        w.set(context, i);
                }
            }
        }

        method onFocusEnter(context)
        {
            var w = self.getItemWidget(self.focus_index, context);
            ROOT.setFocus(w);
            return EVENTRESULT_FILTER;
        }

        method onFocusNotify(context, new_index, old_index)
        {
            var new_w = self.getItemWidget(new_index, context);
            if (new_w != nil)
                ROOT.setFocus(new_w);

            return EVENTRESULT_FILTER;
        }
    }

    module hidden::Item
    {
        attribute lid = nil;
        attribute category_index = nil;

        method onActivate(context)
        {
            if (self.lid != nil)
                ROOT::GotoRace(context, self.lid, self.category_index);

            return EVENTRESULT_FILTER;
        }

        method reset(context, category_index)
        {
            self.lid = nil;
            self.category_index = nil;
            var parent = self.result;
            if (parent["copied_item"] != nil)
                parent.removeChild(context, parent["copied_item"]);
            set(context, category_index);
        }

        method set(context, category_index)
        {
            if (self.lid != nil)
                return false;

            var index = LicenseUtil::GetIndex(ROOT.sCategoryId, category_index);
            self.lid = LicenseUtil::GetLicenseId(index);
            self.category_index = category_index;
            var event = ROOT.sEventInfo[self.category_index];
            if (event != nil)
            {
                var car = event.entry_car;
                var car_label = main::gtengine::MSpecDB::getCarLabel(car.getCarCode());
                self.car_thumbnail.cache = true;
                self.car_thumbnail.from_disk = true;
                self.car_thumbnail.block = false;
                self.car_thumbnail.image_path = "car/thumbnail/%s.%02d".format(car_label, car.color);
                self.car_thumbnail.doInitialize(context);

                var course_code = event.course;
                var course_label = main::gtengine::MSpecDB::getCourseLabel(course_code);
                if (course_label.beginWith("r_"))
                {
                    course_label = course_label.substr(2);
                }
                var course_logo = GetTextDataCourseInfo(course_label, "logo", course_label);
                //self.course_logo.cache = true; // Inferred from similar code above
                //self.course_logo.from_disk = true;
                //self.course_logo.block = false;
                self.course_logo.image_path = "image/piece_gt5m/course_logo_SS/" + course_logo + ".png";
                self.course_logo.doInitialize(context);
            }

            {
                var record_index = LicenseUtil::GetIndexByLicenseId(self.lid);
                var license_result = game_record().licenses[record_index].result;
                var trophy_w;

                switch (license_result)
                {
                    case LicenseUtil::PRIZE::GOLD:
                        trophy_w = hidden::trophyGold;
                        break;
                    case LicenseUtil::PRIZE::SILVER:
                        trophy_w = hidden::trophySilver;
                        break;
                    case LicenseUtil::PRIZE::BRONZE:
                        trophy_w = hidden::trophyBronze;
                        break;
                }

                if (trophy_w != nil)
                {
                    var w = trophy_w.doCopy();
                    w.x = 0.0;
                    w.y = 0.0;
                    w.name = "copied_item";
                    self.result.appendChild(context, w);
                }
            }

            return true;
        }

        method setTimeAndPrize(context, event, prize, license_result)
        {
            var prize_w;
            switch (prize)
            {
                case LicenseUtil::PRIZE::GOLD:
                    prize_w = Prize::PrizeGold;
                    break;
                case LicenseUtil::PRIZE::SILVER:
                    prize_w = Prize::PrizeSilver;
                    break;
                case LicenseUtil::PRIZE::BRONZE:
                    prize_w = Prize::PrizeBronze;
                    break;
            }

            var best_none_text = context.translate(ROOT, "LicenseGT5M", "BEST_TIME_NONE");
            var credit_zero_text = context.translate(ROOT, "LicenseGT5M", "CREDIT_ZERO");
            var credit_format = context.translate(ROOT, "LicenseGT5M", "CREDIT_FORMAT");

            var opacity_default = 1.0;
            var opacity_opaque = 0.33;
            var opacity = opacity_default;

            var cr = 0;
            cr = event.prize_table[prize];

            var type = event.eval_condition_type;
            var data = event.eval_condition_data[prize];

            var money_text = "";
            var data_text = "";

            if (data <= 0)
            {
                opacity = opacity_opaque;
                money_text = credit_format.build(credit_zero_text);

                if (type == main::gtengine::EvalType::TIME)
                    data_text = best_none_text;
                else if (type == main::gtengine::EvalType::ORDER)
                    data_text = credit_zero_text;
            }
            else
            {
                money_text = credit_format.build(main::pdiext::MMisc::GetMoneyString(cr));

                if (type == main::gtengine::EvalType::TIME)
                    data_text = main::pdiext::GetRaceTimeString(data);
                else if (type == main::gtengine::EvalType::ORDER)
                    data_text = OrdinalUtil::getOrdinalNumber(context, ROOT, data.toInt());
            }

            prize_w.opacity = opacity;

            if (data <= 0 || license_result < 0 || license_result > prize)
            {
                prize_w.insensitive = false;
                prize_w.TextFaceCredit.text = money_text;
                prize_w.TextFaceTime.text = data_text;
            }
            else
            {
                prize_w.insensitive = true;
                prize_w.TextFaceCrediti.text = money_text;
                prize_w.TextFaceTimei.text = data_text;
            }
        }

        method onFocusEnter(context)
        {
            if (self.lid == nil)
                return EVENTRESULT_FILTER;

            var event = ROOT.sEventInfo[self.category_index];
            if (event == nil)
                return EVENTRESULT_FILTER;

            var record_index = LicenseUtil::GetIndexByLicenseId(self.lid);
            var license = game_record().licenses[record_index];
            var license_result = license.result;

            {
                setTimeAndPrize(context, event, LicenseUtil::PRIZE::GOLD, license_result);
                setTimeAndPrize(context, event, LicenseUtil::PRIZE::SILVER, license_result);
                setTimeAndPrize(context, event, LicenseUtil::PRIZE::BRONZE, license_result);
            }

            var best_label_text = "";
            var best_text = "";

            var type = event.eval_condition_type;

            if (type == main::gtengine::EvalType::TIME)
            {
                best_label_text = context.translate(ROOT, "LicenseGT5M", "BEST_TIME");
                if (main::pdiext::MAX_LAPTIME1000 == license.best_time)
                    best_text = context.translate(ROOT, "LicenseGT5M", "BEST_TIME_NONE");
                else
                    best_text = main::pdiext::GetRaceTimeString(license.best_time);
            }
            else if (type == main::gtengine::EvalType::ORDER)
            {
                best_label_text = context.translate(ROOT, "LicenseGT5M", "BEST");

                if (license.best_time < 0 || license.best_time == main::pdiext::MAX_LAPTIME1000)
                    best_text = context.translate(ROOT, "LicenseGT5M", "CREDIT_ZERO");
                else
                    best_text = OrdinalUtil::getOrdinalNumber(context, ROOT, license.best_time.toInt() + 1);
            }

            Prize::Best::TextFaceBest.text = best_label_text;
            Prize::Best::TextFace.text = best_text;

            var title_str = context.translate(ROOT, "LicenseGT5M", event.title);
            var title_format = context.translate(ROOT, "LicenseGT5M", "TITLE_FORMAT");
            var category_str = LicenseUtil::GetCategoryString(ROOT.sCategoryId);
            set_balloontip(context, title_format.build(category_str, ListBox.focus_index + 1, title_str));

            ToolTip::tip.value = context.translate(ROOT, "LicenseGT5M", event.description);

            HScrollbar.update_arrow();

            return EVENTRESULT_FILTER;
        }

        method set_balloontip(context, txt)
        {
            var index = ListBox.focus_index;
            var base_point = self;
            if ((index - 2) > -1 && (index + 2) < ListBox.getItemCount())
                base_point = ListBox::Center;

            BalloonTip.set_value(context, base_point, txt, 35);
        }
    }

    module Header::Close
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            LicenseRoot.open(context, ROOT.sCategoryId, false);
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            var balloon_text = context.translate(ROOT, "Arcade", "close");
            BalloonTip.set_value(context, self, balloon_text, 12);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module HScrollbar
    {
        attribute stop_update = nil;

        method initialize(list_box)
        {
            self.stop_update = true;

            list_box.h_adjustment = main::menu::MAdjustment();
            HScrollbar.adjustment = list_box.h_adjustment;
            inc_arrow_animation(true, true);
            dec_arrow_animation(true, true);
        }

        method inc_arrow_animation(reverse, warp = false)
        {
            var effect = HScrollbar::inc_arrow::Pane::Effect;
            if (!warp)
            {
                if (reverse != effect.reverse)
                {
                    effect.reverse = reverse;
                    effect.restart();
                }
            } 
            else 
            {
                effect.reverse = !reverse;
                effect.reset();
                effect.reverse = reverse;
            }
        }

        method dec_arrow_animation(reverse, warp = false)
        {
            var effect = HScrollbar::dec_arrow::Pane::Effect;
            if (!warp)
            {
                if (reverse != effect.reverse)
                {
                    effect.reverse = reverse;
                    effect.restart();
                }
            } 
            else 
            {
                effect.reverse = !reverse;
                effect.reset();
                effect.reverse = reverse;
            }
        }

        method update_arrow()
        {
            if (self.stop_update)
                return;

            inc_arrow_animation(!HScrollbar::inc_arrow.active);
            dec_arrow_animation(!HScrollbar::dec_arrow.active);
        }
    }
}