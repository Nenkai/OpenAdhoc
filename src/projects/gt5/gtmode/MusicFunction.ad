static player = nil;

class MusicPlayer
{
    static CALLBACK_BEGIN = "BEGIN";
    static CALLBACK_END = "END";
    static CALLBACK_FINISH = "FINISH";

    attribute watcher;
    attribute index;
    attribute play_list;
    attribute repeat;
    attribute event_listener;

    method __init__(context, play_list, repeat, event_listener)
    {
        self.index = 0;
        self.play_list = play_list;
        self.repeat = repeat;
        self.event_listener = event_listener;

        self.watcher = play_list.size > 0 ? WatcherUtil::Create(context, onTick) : nil;
    }

    method play(context)
    {
        SoundUtil::BGMStop();

        if (self.play_list.size > self.index)
        {
            var music = self.play_list[self.index];
            SoundUtil::BGMPlayDirect(SoundUtil::SCENE_MUSIC_PLAYER, music.code, false);

            fireEvent(context, music, CALLBACK_BEGIN);

            return true;
        }

        return false;
    }

    method stop(context)
    {
        SoundUtil::BGMStop();

        if (self.watcher != nil)
        {
            WatcherUtil::Delete(self.watcher);
            self.watcher = nil;
        }

        if (self.play_list.size > self.index)
            fireEvent(context, nil, CALLBACK_FINISH);
    }

    method onTick(context)
    {
        if (self.watcher == nil)
            return;

        if (!main::sound.default.isPlaying())
        {
            if (self.repeat)
            {
                fireEvent(context, nil, CALLBACK_END);

                self.index = (self.index + 1) % self.play_list.size;
                play(context);
            }
            else
            {
                if (self.index < self.play_list.size - 1)
                {
                    fireEvent(context, nil, CALLBACK_END);
                    ++self.index;
                    play(context);
                }
                else
                    stop(context);
            }
        }

    }

    method fireEvent(context, music, callback)
    {
        if (music == nil)
            music = self.play_list[self.index];

        self.event_listener.onPlayCallback(context, music, callback);
    }
}

function initialize(context)
{
    player = nil;
}

function finalize(context)
{
    if (player != nil)
    {
        player.stop(context);
        player = nil;
    }
}

function play1(context, music, args)
{
    var event_listener = args;
    stop(context);

    player = MusicPlayer(context, [music], false, event_listener);
    player.play(context);
}

function play(context, list, repeat, event_listener)
{
    stop(context);

    player = MusicPlayer(context, list, repeat, event_listener);

    return player.play(context);
}

function stop(context, music, args)
{
    if (player != nil)
    {
        player.stop(context);
        player = nil;
    }
}

function setRaceBgm(context, music, args, callback, item_w)
{
    var flag = args;
    MusicFileUtil::setRaceBgm(music.id, flag);

    music.race_bgm = flag ? 1 : 0;

    callbackIf(context, callback, music, item_w);
}

function setMenuBgm(context, music, args, callback, item_w)
{
    var flag = args;
    MusicFileUtil::setMenuBgm(music.id, flag);

    music.menu_bgm = flag ? 1 : 0;

    callbackIf(context, callback, music, item_w);
}

function setSlideShowBgm(context, music, args, callback, item_w)
{
    var flag = args;
    MusicFileUtil::setSlideShowBgm(music.id, flag);

    music.slideshow_bgm = flag ? 1 : 0;

    callbackIf(context, callback, music, item_w);
}

function setRaceBgmSelected(context, music_list, args, callback, item_w)
{
    var flag = args;
    var val = flag ? 1 : 0;

    var id_list = Array();

    foreach (var music in music_list)
    {
        id_list.push(music.id);
        music.race_bgm = val;
    }

    MusicFileUtil::setRaceBgmByList(id_list, flag);
    callbackIf(context, callback, music_list, item_w);
}

function setMenuBgmSelected(context, music_list, args, callback, item_w)
{
    var flag = args;
    var val = flag ? 1 : 0;

    var id_list = Array();

    foreach (var music in music_list)
    {
        id_list.push(music.id);
        music.menu_bgm = val;
    }

    MusicFileUtil::setMenuBgmByList(id_list, flag);
    callbackIf(context, callback, music_list, item_w);
}

function setSlideShowBgmSelected(context, music_list, args, callback, item_w)
{
    var flag = args;
    var val = flag ? 1 : 0;

    var id_list = Array();

    foreach (var music in music_list)
    {
        id_list.push(music.id);
        music.slideshow_bgm = val;
    }

    MusicFileUtil::setSlideShowBgmByList(id_list, flag);
    callbackIf(context, callback, music_list, item_w);
}

function callbackIf(context, callback, music, item_w)
{
    if (callback != nil)
        callback(context, music, item_w);
}

