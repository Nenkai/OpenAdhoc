//---------------------------------------------------------------------------------------
// BuyCarRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------


#include "projects/gt5m/share/MenuCarUtil.ad";

module ROOT
{
    attribute cp = nil;
    attribute popup = nil;
    attribute opening = nil;
    attribute closing = nil;
    attribute car_loaded = nil;
    attribute sWatcher = nil;
    attribute caller_root = nil;
    attribute load_tex_result = nil;
    attribute result = nil;
    attribute from_mviewer = nil;
    attribute copy_disable = nil;
    attribute trade_disable = nil;

    method open(context, cp, from_mviwer) // NOTE: Typo in original
    {
        self.caller_root = context.getRootWindow();
        self.cp = cp;
        self.opening = true;
        self.closing = false;
        self.result = false;
        self.car_loaded = false;
        if (from_mviwer != nil)
            self.from_mviewer = true;
        else
            self.from_mviewer = false;
        self.popup = main::SequenceUtil::ModalPage(context, ROOT);
        self.popup.open();
        return self.result;
    }

    method onInitialize(context)
    {
        SceneFace.visible = false;
        NowLoading.visible = false;

        ActorUtil::ResetInterpolators(self, false);
        ActorUtil::ResetInterpolators(Veil, false);

        ActorUtil::ResetInterpolators(ROOT::CarFade, false);
        wCarFadeScalarInterpolator.setInterpolationPeriod(0, 1.2);
        wCarFadeScalarInterpolator.pause = true;

        var car_code = self.cp.getCarCode();

        self.copy_disable = main::gtengine::MSpecDB::checkGenericFlag("copy_disable", car_code);
        self.trade_disable = main::gtengine::MSpecDB::checkGenericFlag("trade_disable", car_code);

        ColorBar.set(context, self.cp.getCarCode(), self.cp.color);

        var car_label = self.cp.getCarLabel();

        var tuner = main::gtengine::MSpecDB::getTunerCode(car_label);
        tuner = tuner.substr(6);

        Manufacture.image_path = "piece_gt5m/tunner_logo_S/" + tuner + ".img";
        Manufacture.doInitialize(context);

        if (!self.from_mviewer)
        {
            var my_cash = gGameStatus.user_profile.cash;
            Header::Cash::TextFace.text = main::pdiext::MMisc::GetMoneyString(my_cash);
            var game_day = gGameStatus.user_profile.calendar.getGameDay();
            Header::Date::TextFace.text = context.translate(ROOT, "Arcade", "GAME_DAY").build(game_day + 1);
        }

        var car_price = main::gtengine::MSpecDB::getCarPrice(car_code);
        Price::TextFace.text = main::pdiext::MMisc::GetMoneyString(car_price);

        ToolTip::tip.action_type = 1;
        ToolTip::tip.remove();

        ToolTip::tip.value = main::gtengine::MSpecDB::getCarName(car_code);
        ToolTip.visible = false;

        ROOT.setFocus(Buttons::OK);

        if (self.sWatcher == nil)
            self.sWatcher = WatcherUtil::Create(context, onTick);
        
        context.pushEvent(main::menu::MFunctionEvent(initSceneFace, context));

        onInitializeAnimation(context);

        return EVENTRESULT_FILTER;
    }

    method setCarInfo(context, carcode, color)
    {
        var count;
        if (self.from_mviewer)
            count = 0;
        else
            count = game_garage().getCarCount(carcode, color);

        var car_count_str = context.translate(ROOT, "Arcade", "HAVING_CAR_COUNT").build(count);

        var share_str = ""; var trade_str = "";
        if (!self.copy_disable && !self.trade_disable)
        {
            share_str = context.translate(ROOT, "Arcade", "ENABLE_SHARE");
            trade_str = context.translate(ROOT, "Arcade", "DISABLE_TRADE");
        }
        else if (self.copy_disable && !self.trade_disable)
        {
            share_str = context.translate(ROOT, "Arcade", "DISABLE_SHARE");
            trade_str = context.translate(ROOT, "Arcade", "ENABLE_TRADE");
        }
        else if (self.copy_disable && self.trade_disable)
        {
            share_str = context.translate(ROOT, "Arcade", "DISABLE_SHARE");
            trade_str = context.translate(ROOT, "Arcade", "DISABLE_TRADE");
        }

        CarInfo.text = car_count_str + " / " + share_str + " / " + trade_str;
    }

    method onPageInEnd(context)
    {
        BalloonTip.initialize(context);

        var tool_tip_text = ToolTip::tip.visible;
        ToolTip::tip.visible = tool_tip_text;
        ToolTip.visible = true;

        var focus_w = ROOT.getFocusWidget();
        if (focus_w != nil && focus_w['onFocusEnter'] != nil)
            main::menu::MFocusEnterEvent(context, focus_w).dispatchEvent();
    }

    method initSceneFace(context)
    {
        context.sync(0.6);

        SceneFace.visible = true;
        MenuCarUtil::initializeSceneFace(self.cp, SceneFace);

        {
            var buf = ROOT.getGpbBinary("image/gt5m/env/env2.txs");

            self.load_tex_result = main::pdiext::LoadTextureSetFromMemory(buf);
            SceneFace.setExternalEnvTextureSet(self.load_tex_result["memory"]);
        }
    }

    method onFinalize(context)
    {
        MenuCarUtil::finalizeSceneFace();

        if (self.sWatcher != nil) {
            WatcherUtil::Delete(self.sWatcher);
            self.sWatcher = nil;
        }

        if (self.load_tex_result != nil) {
            main::pdiext::DeleteTextureSet(self.load_tex_result);
            self.load_tex_result = nil;
        }

        self.from_mviewer = nil;
        self.copy_disable = nil;
        self.trade_disable = nil;


        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.setFocus(Buttons::Exit);

        return EVENTRESULT_FILTER;
    }

    method close(context)
    {
        if (self.popup != nil)
        {
            self.popup.close();
            self.popup = nil;
        }
    }

    method onExit(context)
    {
        if (self.opening)
            return;

        self.closing = true;

        wCarFadeScalarInterpolator.on_effect_end = function (context)
        {
            SceneFace.visible = false;

            ROOT.onCancelAnimation(context);

            wCarFadeScalarInterpolator.on_effect_end = nil;
        }

        wCarFadeScalarInterpolator.setInterpolationPeriod(0, 0.6);
        ActorUtil::ResetInterpolators(ROOT::CarFade, true);
    }

    method onTick(context)
    {
        if (!SceneFace.isEntityRenderable("CAR", "car")) 
            return;

        if (ROOT.opening && !ROOT.car_loaded) {
            ROOT.car_loaded = true;
            if (MenuCarUtil::checkDebugCommand(context))
                SceneFace.setEntityRotateY("CAR", "car", MenuCarUtil::develop_car_angle);
            else
                SceneFace.setEntityRotateVelocityY("CAR", "car", 0.5 * 30);

            ROOT.opening = false;
            NowLoading.visible = false;
            Buttons.active = true;

            wCarFadeScalarInterpolator.pause = false;

            main::menu::MFocusEnterEvent(context, ROOT.focus_widget).dispatchEvent();
        }
    }

    method onKeyPress(context, event)
    {
        if (event.keysym == PSP_PAD_CTRL_L3_UP)
        {
            var new_color = ColorBar.dec(context);
            self.cp.color = new_color;
            SceneFace.execCommand("setCarVariation %{new_color} car");
        }

        if (event.keysym == PSP_PAD_CTRL_L3_DOWN)
        {
            var new_color = ColorBar.inc(context);
            self.cp.color = new_color;
            SceneFace.execCommand("setCarVariation %{new_color} car");
        }

        return EVENTRESULT_CONTINUE;
    }

    method buyCar(context)
    {
        if (self.from_mviewer)
        {
            main::sound.play("cancel");
            return false;
        }

        var car_code = self.cp.getCarCode();
        var car_color = self.cp.color;

        var garage = game_garage();
        var count = garage.getCarCount(car_code, car_color);
        if (count == garage.getOneCarMax())
        {
            main::sound.play("cancel");

            var one_car_max = garage.getOneCarMax();
            var res = DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                                                    context.translate(ROOT, "this_car_garage_full").build(one_car_max + 1));
            return false;
        }

        var car_price = main::gtengine::MSpecDB::getCarPrice(car_code);
        var my_cash = gGameStatus.user_profile.cash;
        if (my_cash < car_price)
        {
            main::sound.play("cancel");

            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "not_enough_credits"));
            return false;
        }

        main::sound.play("ok");

        var dialog_result;
        if (count > 0)
        {
            if (!main::gtengine::MSpecDB::checkGenericFlag("dirt_disable", car_code))
                dialog_result = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "already_having_this_car"));
            else 
                dialog_result = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "already_having_this_car__disable_dirt"));
        } 
        else 
        {
            if (!main::gtengine::MSpecDB::checkGenericFlag("dirt_disable", car_code))
                dialog_result = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "do_you_buy_this?"));
            else 
                dialog_result = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "do_you_buy_this?_disable_dirt"));
        }

        if (dialog_result)
        {
            garage.addCar(self.cp);
            gGameStatus.user_profile.cash -= car_price;
            gGameStatus.user_profile.calendar.putGarageEvent("BUY_NEW", cp.getCarCode(), cp.color);

            var fv_car_count = game_garage().getCarCountFavorite();
            var fv_size = game_garage().getFavoriteSize();
            var empty_of_fv = fv_size - fv_car_count;

            if (!game_garage().hasFavorite(self.cp) && 0 < empty_of_fv)
            {
                var car_name = main::gtengine::MSpecDB::getCarShortName(self.cp.getCarCode());
                var color_name = main::gtengine::MSpecDB::getCarColorName(self.cp.getCarCode(), self.cp.color);
                var msg = context.translate(CarRoot, "do_you_set_favorite").build(empty_of_fv, car_name, color_name);

                dialog_result = DialogUtil::openConfirmDialog(context, DialogUtil::DEFAULT_NO, msg);
                if (dialog_result)
                    game_garage().pushFavorite(self.cp);
            }

            EventFlagsUtil::setMessageFlagON(gGameStatus, EventFlagsUtil::FLAGS::HAVE_NOT_GOT_CAR);
            EventFlagsUtil::setEventFlagON(gGameStatus, EventFlagsUtil::FLAGS::GET_FIRST_CAR);

            EventFlagsUtil::setEventFlagON(gGameStatus, EventFlagsUtil::FLAGS::UPDATE_CAR_COLLECTION);
            EventFlagsUtil::setMessageFlagOFF(gGameStatus, EventFlagsUtil::FLAGS::UPDATE_CAR_COLLECTION);
            game_context().need_save = true;
            return true;
        }

        return false;
    }

    method onInitializeAnimation(context)
    {
        context.event_mask &= ~1;
        context.filterKeyEvent();

        NowLoading.visible = true;
        Buttons.active = false;

        PopupEffect.reverse = false;
        PopupEffect.on_effect_end = function (context)
        {
            ROOT.onPageInEnd(context);

            BalloonTip.visible = true;
            context.event_mask |= 1;

            if (ROOT.caller_root != nil)
                ROOT.caller_root.visible = false;
            
            PopupEffect.on_effect_end = nil;
        }

        PopupEffect.restart();
    }

    method onCancelAnimation(context)
    {
        context.event_mask &= ~1;
        context.filterKeyEvent();

        if (ROOT.caller_root != nil)
        {
            ROOT.caller_root.visible = true;
            ROOT.caller_root = nil;
        }

        PopupEffect.reverse = true;
        PopupEffect.on_effect_end = function (context)
        {
            context.event_mask |= 1;
            PopupEffect.on_effect_end = nil;

            ROOT.close(context);
        }

        PopupEffect.restart();
    }

    module Buttons::OK
    {
        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context, event)
        {
            if (Buttons.active)
            {
                var w = event.widget;
                BalloonTip.set_value(context, w, w.balloon.text, 9.5);
            }

            return EVENTRESULT_FILTER;
        }

        method onActivate(context)
        {
            if (!Buttons.active)
            {
                main::sound.play("cancel");
                return EVENTRESULT_FILTER;
            }

            if (!ROOT.opening && !ROOT.closing)
            {
                var res = ROOT.buyCar(context);
                if (res)
                {
                    ROOT.result = true;
                    ROOT.onExit(context);
                }
            }
            return EVENTRESULT_FILTER;
        }
    }

    module Buttons::Exit
    {
        method onActivate(context)
        {
            if (!Buttons.active)
            {
                main::sound.play("cancel");
                return EVENTRESULT_FILTER;
            }

            if (!ROOT.opening && !ROOT.closing)
            {
                main::sound.play("ok");
                ROOT.onExit(context);
            }

            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            if (Buttons.active)
            {
                var balloon_text = context.translate(ROOT, "Arcade", "close");
                BalloonTip.set_value(context, self, balloon_text, 12);
            }

            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module Buttons::Catalog
    {
        method onActivate(context)
        {
            if (!Buttons.active)
            {
                main::sound.play("cancel");
                return EVENTRESULT_FILTER;
            }

            if (ROOT.from_mviewer)
            {
                main::sound.play("cancel");
                return EVENTRESULT_FILTER;
            }

            if (!ROOT.opening && !ROOT.closing)
            {
                main::sound.play("ok");

                DetailProject::CarDescriptionPopup.open(context, ROOT.cp);
            }

            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            if (Buttons.active)
            {
                var balloon_text = context.translate(ROOT, "Arcade", "catalog");
                BalloonTip.set_value(context, self, balloon_text, 12);
            }

            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module ColorBar
    {
        hidden.visible = false;
        hidden::Item::top_gradation.visible = false;
        hidden::Item::bottom_gradation.visible = false;

        attribute carcode = nil;

        module hidden::Item { attribute color = nil; }

        method set(context, carcode, focus_color)
        {
            self.carcode = carcode;

            ListBox.setItemTemplate(context, hidden::Item);

            ListBox.setItemCount(0);
            ListBox.postRedraw();

            var variation = main::gtengine::MSpecDB::getCarVariation(self.carcode);

            ListBox.setItemCount(variation);

            for (var i = 0; i < variation; i++)
            {
                var w = ListBox.getItemWidget(i, context);
                var color = variation - 1 - i;
                w.base.setColor(main::gtengine::MSpecDB::getCarColorRGB(self.carcode, color));
                w.color = color;

                if (color == focus_color)
                    ListBox.focus_index = i;

                if (i == 0)
                    w.top_gradation.visible = true;
                if (i == variation - 1)
                    w.bottom_gradation.visible = true;
            }

            if (variation == 1)
            {
                ColorName::arrow::Effect.reverse = false;
                ColorName::arrow::Effect.reset();
            }

            set_color_name(context, self.carcode, focus_color);
        }

        method inc(context)
        {
            if (ListBox.focus_index < ListBox.getItemCount() - 1)
            {
                main::sound.play("cursor");
                ListBox.focus_index++;
            }

            var w = ListBox.getItemWidget(ListBox.focus_index, context);
            var new_color = w.color;
            self.set_color_name(context, self.carcode, new_color);

            return new_color;
        }

        method dec(context)
        {
            if (ListBox.focus_index > 0)
            {
                main::sound.play("cursor");
                ListBox.focus_index--;
            }

            var w = ListBox.getItemWidget(ListBox.focus_index, context);
            var new_color = w.color;
            set_color_name(context, self.carcode, new_color);

            return new_color;
        }

        method set_color_name(context, carcode, color)
        {
            var color_name = main::gtengine::MSpecDB::getCarColorName(carcode, color);
            color_name = color_name.trim();
            if (color_name == "")
                color_name = "--";

            ColorName::TextFace.text = color_name;

            ColorName::arrow.visible = ListBox.focus_index > 0;
            ColorName::arrow0.visible = ListBox.focus_index < ListBox.getItemCount() - 1;

            ROOT.setCarInfo(context, carcode, color);
        }
    }
}