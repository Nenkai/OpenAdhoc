


//---------------------------------------------------------------------------------------
// MovieRoot.ad
//
// (ä¾‹)
// MovieRoot.ad
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// function
//---------------------------------------------------------------------------------------
module LangRoot
{
    hidden.visible = false;

    static extra_language_table = [
        pdistd::Language::SYSTEM,
        pdistd::Language::TR,
        pdistd::Language::EL
    ];

    attribute event_loop;

    method open(context, data)
    {
        SequenceUtil::startPage(context, ROOT);
        self.event_loop = menu::EventLoop(context);
        self.event_loop.enter();
    }

    method close(context)
    {
        if (self.event_loop != nil)
        {
            self.event_loop.leave();
            self.event_loop = nil;
            BootProjectUtil::DispatchNextSequence(context);
        }
    }

    method initialize_listbox(context)
    {
        var listbox = Pane::SBox::ListBox;
        listbox.setItemCount(3);
        listbox.setItemTemplate(context, hidden::Item);
        Pane::Buttons.visible = false;
        Pane::Footer.visible = true;
    }

    method onInitialize(context)
    {
        initialize_listbox(context);
        ROOT.setFocus(Pane::SBox::ListBox);
    }

    method onFinalize(context)
    {
        var listbox = Pane::SBox::ListBox;
        listbox.setItemCount(0);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        self.close(context, nil);
        return EVENTRESULT_FILTER;
    }

    module Pane::SBox::ListBox
    {
        method onVisibleNotify(context, indexes)
        {
            foreach (var i in indexes)
            {
                if (self.getItemVisible(i))
                {
                    var item = self.getItemWidget(i);
                    if (item == nil)
                    {
                        item = self.getItemWidget(i, context);
                        item.initialize(context, i);
                    }
                }
            }
        }

        method changeGrimLanguage(context)
        {
            if (!LoginUtil::isOnline())
                return;

            var request1 = main::Grim2.requestSetLanguage(main::pdiext::MProductInformation::GetGameRegionCode(), 
                                                          main::pdistd::MLocale::getLanguage(),
                                                          function(args) {});

            if (Grim2Util::__deprecated__join__(context, request1))
            {
                var language = main::Grim2.decodeResultString(request1);
                main::Grim2.setLanguage(language);
            }

            var serverlist2 = main::Grim2.getServerOption("gt5", "online.serverlist2.enable");
            if (serverlist2 != nil && serverlist2 != "" && serverlist2 != "0")
            {
                var request = main::Grim2.requestServerList2(function(args) {});
                if (Grim2Util::__deprecated__join__(context, request))
                    main::Grim2.addServerOption(request);
            }
        }

        method onActivate(context)
        {
            main::sound.play("ok");

            var option = GAME_STATUS.user_profile.option;
            var prev = option.extra_language;
            var fidx = self.focus_index;
            var extra_lang = extra_language_table[fidx];
            var res = false;

            if (extra_lang == pdistd::Language::TR)
            {
                var text0 = context.translate(ROOT, "DO_YOU_REALLY_WANT_TO_SET_TO_TURKISH_TURKISH");
                var text1 = context.translate(ROOT, "DO_YOU_REALLY_WANT_TO_SET_TO_TURKISH");
                res = DialogUtil::openConfirmDialog(context, DialogUtil::DEFAULT_NO, text0 + "\n\n" + text1);
            }
            else if (extra_lang == pdistd::Language::EL)
            {
                var text0 = context.translate(ROOT, "DO_YOU_REALLY_WANT_TO_SET_TO_GREEK_GREEK");
                var text1 = context.translate(ROOT, "DO_YOU_REALLY_WANT_TO_SET_TO_GREEK");
                res = DialogUtil::openConfirmDialog(context, DialogUtil::DEFAULT_NO, text0 + "\n\n" + text1);
            }
            else
            {
                res = true;
            }

            if (res)
            {
                option.extra_language = extra_lang;
                option.extra_language_done = true;

                if (prev != option.extra_language)
                {
                    option.apply();
                    LangUtil::apply(context);
                    PROJECT.reloadRtext();
                    
                    WelcomeRoot::Message::label.text = context.translate(WelcomeRoot, WelcomeRoot::Message::label.key);
                    WelcomeRoot::Message::labelAcademy.text = context.translate(WelcomeRoot, WelcomeRoot::Message::labelAcademy.key);
                    changeGrimLanguage(context);
                }

                LangRoot.close(context);
            }

            return EVENTRESULT_FILTER;
        }
    }

    module hidden::Item
    {
        method initialize(context, index)
        {
            var text = "";
            if (index == 0)
            {
                var lang = pdiext::GetStaticLanguage();
                var langname = "";
                var res = pdistd::Language.find_static(function(pair){ return pair[1] == lang; });
                if (res.size > 0)
                    langname = res[0][0];

                text = context.translate(ROOT, "Language", "SYSTEM").build(context.translate(ROOT, "Language", langname));
            }
            else if (index == 1)
            {
                text = context.translate(ROOT, "Language", "TR");
            }
            else if (index == 2)
            {
                text = context.translate(ROOT, "Language", "EL");
            }

            self.label.text = text;
        }
    }
}