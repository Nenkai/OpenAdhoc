//---------------------------------------------------------------------------------------
// ResultRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ROOT
{
    attribute sTimeoutTicks = 0;
    attribute disable_close = nil;
    attribute watcher = nil;
    attribute count = nil;
    attribute running_text = nil;

    method open(context, disable_close)
    {
        main::ORG.pauseAvailable = false;

        RaceRoot.visible = false;

        self.disable_close = disable_close != nil ? disable_close : false;

        if (self.disable_close)
            sTimeoutTicks = 100;
        else
            sTimeoutTicks = 300;


        DialogUtil::cancelConfirmDialog(context);

        context.pushPage(ROOT);
    }

    method close(context)
    {
        self.disable_close = true;
        RaceRoot.quit(context);
    }

    method onInitialize(context)
    {
        self.running_text = context.translate(ROOT, "RUNNING");

        gSequenceCondition.result_entry_list = getCurrentEntryList();

        showQuickBoard(context);

        if (self.watcher == nil)
        {
            self.count = 0;
            self.watcher = WatcherUtil::Create(context, onTick);
        }

        if (false) // NOTE: Presumably removed functionality
        {
            Info::RemainTime.visible = true;
        }
        else
        {
            Info::RemainTime.visible = false;
        }

        Info::RemainTime::TextFace.text = "";
        ActorUtil::ResetInterpolators(ROOT, false);
    }

    method onFinalize(context)
    {
        MainFrame.clearChildren(context);

        WatcherUtil::Delete(self.watcher);
        self.watcher = nil;
        self.count = nil;
        self.disable_close = nil;
        self.running_text = nil;

        main::ORG.pauseAvailable = true;

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        if (!self.disable_close)
        {
            main::sound.play("cancel");
            close(context);
        }

        return EVENTRESULT_FILTER;
    }

    method onActivate(context)
    {
        if (!self.disable_close)
        {
            main::sound.play("ok");
            close(context);
        }

        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        if (event.keysym == PSP_PAD_CTRL_START)
        {
            if (!self.disable_close)
            {
                main::sound.play("ok");
                context.wait();
                close(context);
            }

            return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }

    method onTick(context)
    {
        {
            ++self.count;
            if (sTimeoutTicks > 0 &&
                self.count > sTimeoutTicks)
            {
                close(context);
            }
        }
    }

    method showQuickBoard(context)
    {
        var board = Template::QuickBoard.doCopy(context);
        board.visible = false;
        MainFrame.appendChild(context, board);

        var items = [];
        var position = 1;
        {
            var listbox = board.Body;
            board.Body2.visible = false;

            var drift_attack = main::gtengine::GameMode::DRIFT_ATTACK == gSequenceCondition.game_mode;
            board.title.text = context.translate(ROOT, drift_attack ? "DriftResult" : "RaceResult");
            var entry_list = gSequenceCondition.result_entry_list;
            if (entry_list != nil)
            {
                listbox.setItemCount(entry_list.size);
                listbox.setItemTemplate(context, Template::QuickBoardItem);

                for (var i = 0; i < entry_list.size; ++i)
                {
                    var entry = entry_list[i];
                    var item = listbox.getItemWidget(i, context);
                    if (i == 0 && entry_list.size < 4)
                        listbox.h = item.h * entry_list.size;

                    if (drift_attack)
                    {
                        var state = main::ORG.getRaceDisplayState(0);
                        item.initializeForScoreResult(context, i + 1, entry.cp, state.drift_total_score);
                    }
                    else
                    {
                        var total_time = entry.total_time;
                        if (total_time == "")
                            total_time = self.running_text;

                        item.initializeForTimeResult(context, i + 1, entry.cp, total_time, entry.total_time_diff);
                    }
                }
            }
        }

        board.visible = true;
    }

    method updateBoard(context)
    {
        self.count = 0;

        gSequenceCondition.result_entry_list = getCurrentEntryList();

        if (MainFrame.countChild() > 0)
        {
            var listbox = MainFrame.getChild(0).Body;
            var entry_list = gSequenceCondition.result_entry_list;
            for (var i = 0; i < entry_list.size; ++i)
            {
                var entry = entry_list[i];
                var item = listbox.getItemWidget(i, context);
                if (main::gtengine::GameMode::DRIFT_ATTACK == gSequenceCondition.game_mode)
                {

                }
                else
                {
                    var total_time = entry.total_time;
                    if (total_time == "")
                        total_time = self.running_text;

                    item.updateForTimeResult(context, i + 1, entry.cp, total_time, entry.total_time_diff);
                }
            }
        }
    }
}