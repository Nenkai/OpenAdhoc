module EyetoyProject
{

	function openConfirmDialog(context, type, message, title, yes, no)
	{
		var page = context.getCommonPage("ConfirmDialog");
	
		if (page == nil)
			;
	
		return page["open"](context, type, message, title, nil, yes, no);
	}


	function cancelConfirmDialog(context)
	{
		var page = context.getCommonPage("ConfirmDialog");
	
		if (page == nil)
			;

		return page["forceCancel"](context);
	}


	function openProcessDialog(context, message, func, args)
	{
		var page = context.getCommonPage("ProcessDialog");
	
		if (page == nil)
			;

		return page["open"](context, message, func, args);
	}


	function lastProcessError(context)
	{
		var page = context.getCommonPage("ProcessDialog");
	
		if (page == nil)
			;

		page["last_error_code"];
	}


	function openProgressDialog(context, message, func)
	{
		var page = context.getCommonPage("ProgressDialog");
	
		if (page == nil)
			;
			
		page["open"](context, message, func);
	}


	function closeProgressDialog(context)
	{
		var page = context.getCommonPage("ProgressDialog");
	
		if (page == nil)
			;

		page["close"](context);
	}


	function setProgress(context, p)
	{
		var page = context.getCommonPage("ProgressDialog");
	
		if (page == nil)
			;
			
		page["setProgress"](p);
	}


	function setProgressDialogVisible(context, f)
	{
		var page = context.getCommonPage("ProgressDialog");
	
		if (page == nil)
			;

		page["setVisible"](f);
	}


	function onKeyPress(context, event)
	{
		switch (event.keysym)
		{
			case PS2_PAD_CTRL_L2:
				if (__project__.defined("MessageProject"))
				{
					MessageProject::openIM(context);
					return EVENTRESULT_FILTER;
				}
				break;
		}
	
		return EVENTRESULT_CONTINUE;
	}


	function _start_page(context, next_page)
	{
		if (next_page != nil)
		{
			if (context != nil)
			{
				if (context.transition != nil)
					context.transition.panOutIn(context);
				
				context.startPage(next_page);
			}
		}
		else
		{
			if (context != nil)
			{
				if (context.transition != nil)
				{
					context.transition.panOut(context);
					context.transition.syncOut(context);
				}
				context.finish();
			}
		}
	
		context.flushKeyEvent();
	}


	function start_page(context, next_page)
	{
		context.pushEvent(main::menu::MFunctionEvent(_start_page, context, next_page));
	}


	function start_project(context, next_project, arg)
	{
		main::game.next_menu_project = next_project;
	
		if (arg != nil)
			main::game.next_menu_arg = arg;
	
		start_page(context, nil);
	}


	function start_sequence(context, next_sequence)
	{
		main::game.next_sequence = next_sequence;
		start_page(context, nil);
	}


	function set_last_focus(name)
	{
		last_focus = name;
	}


	function focus_last(root, parent)
	{
		var focused_widget = nil;
	
		if (last_focus != nil)
		{
			if (parent.defined(last_focus))
			{
				focused_widget = parent[last_focus];
				root.setFocus(focused_widget);
			}
			
			last_focus = nil;
		}
	
		return focused_widget;
	}


	function onLoad(context)
	{
		main::sound.load();
	
		context.createRenderContext(1);
	
		var render_context = context.getRenderContext(0);
		render_context.transition = main::menu::MColorTransition();
		render_context.transition.panIn(render_context);
	
		var start_page = EyetoyRoot;
		render_context.startPage(start_page);
	}


	function onUnload(context)
	{
		main::sound.unload();
	}
}
