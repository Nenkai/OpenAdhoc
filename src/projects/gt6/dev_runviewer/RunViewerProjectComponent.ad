
module RunViewerProjectComponent::DialogParts::Pulldown
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module RunViewerProjectComponent::DialogParts::Pulldown::OptionMenu
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    attribute decide_callback;

    method onRealize(manager)
    {
        self.copy_selected_item = false;
        self.popup.visible = true;
        self.decide_callback = nil;
    }

    method pulldownValueChanged(context)
    {
        var w = self.getItem(self.index);
        if (w != nil)
        {
            var w2 = self;
            w2.label.text = w.label.text;
            w2.label.abbreviate = true;
            if (w2.label_i != nil)
            {
                w2.label_i.text = w.label.text;
                w2.label_i.abbreviate = true;
            }
        }
    }

    method onInitialize(context)
    {
        self.pulldownValueChanged(context);
    }

    method onFinalize(context)
    {
        self.decide_callback = nil;
    }

    method onValueChanged(context)
    {
        self.pulldownValueChanged(context);
        if (self.decide_callback != nil)
            decide_callback(context, self.index, self);
    }
}

module RunViewerProjectComponent::DialogParts::PulldownItem
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module RunViewerProjectComponent::ButtonHelp::ButtonHelpGT6
{
    module hidden::ButtonSet
    {
        SCALE_WIDGET_SDTV(Circle::label, 2.4);
        SCALE_WIDGET_SDTV(Circle::labeli, 2.4);
        SCALE_WIDGET_SDTV(Square::label, 2.4);
        SCALE_WIDGET_SDTV(Square::labeli, 2.4);
        SCALE_WIDGET_SDTV(Triangle::label, 2.4);
        SCALE_WIDGET_SDTV(Triangle::labeli, 2.4);
        SCALE_WIDGET_SDTV(Cross::label, 2.4);
        SCALE_WIDGET_SDTV(Cross::labeli, 2.4);
        SCALE_WIDGET_SDTV(R1::label, 2.4);
        SCALE_WIDGET_SDTV(R1::labeli, 2.4);
        SCALE_WIDGET_SDTV(L1::label, 2.4);
        SCALE_WIDGET_SDTV(L1::labeli, 2.4);
        SCALE_WIDGET_SDTV(R2::label, 2.4);
        SCALE_WIDGET_SDTV(R2::labeli, 2.4);
        SCALE_WIDGET_SDTV(L2::label, 2.4);
        SCALE_WIDGET_SDTV(L2::labeli, 2.4);
    }

    method clear()
    {
        if (self.current_button_set != nil)
        {
            Pane.removeChild(self.current_button_set);
            self.current_button_set = nil;
        }

        if (self.prev_button_set != nil)
        {
            Pane.removeChild(self.prev_button_set);
            self.prev_button_set = nil;
        }

        current_button_set = nil;
        prev_button_set = nil;
        button_sets = Map();
    }

    method onRealize(manager)
    {
        hidden.visible = false;
    }

    method onFinalize(context)
    {
        clear();
    }

    function getEnterButtonName()
    {
        var assign = main::pdiext::MSystemConfiguration::GetEnterButtonAssign();
        if (assign == "circle")
            return "Circle"
        else
            return "Cross";
    }

    function getCancelButtonName()
    {
        var assign = main::pdiext::MSystemConfiguration::GetEnterButtonAssign();
        if (assign == "circle")
            return "Cross"
        else
            return "Circle";
    }

    attribute is_appear = false;
    attribute current_button_set = nil;
    attribute prev_button_set = nil;
    attribute button_sets = Map();
    attribute current_set = "";

    method set(context, set_list)
    {
        var button_set = hidden::ButtonSet.doCopy();
        if (pdiext::MSystemConfiguration::isSDTV())
        {
            if (set_list.size > 0 && set_list[set_list.size - 1][0] != "R2")
                set_list.push(["R2", manager.translate("Component", "Label_Zoom")]);
                
            
            var pad_left = set_list.size >= 6 ? -28 : 0;
            var w = button_set.first;

            while (w != nil)
            {
                w.pack_pad_left = pad_left;
                w = w.next;
            }
        }

        button_set.visible = false;

        var it = button_set.first;
        while (it != nil)
        {
            it.visible = false;
            it = it.next_widget;
        }

        var order_list = [];
        foreach (var set in set_list)
        {
            |var button_name, var text| = set;
            if (button_name == "Enter")
            {
                if (text == nil)
                    text = manager.translate("Component", "Label_" + button_name);
                var button_name = getEnterButtonName();
            }

            if (button_name == "Back" || button_name == "Cancel" || button_name == "Close")
            {
                if (text == nil)
                    text = manager.translate("Component", "Label_" + button_name);
                var button_name = getCancelButtonName();
            }

            if (text == nil)
                text = "";

            var button_w = button_set[button_name];
            order_list.push(button_w);
            button_w["label"].text = text;
            button_w["label"].visible = true;
            button_w["label_i"].text = text;
            button_w["label_i"].visible = false;
            button_w.visible = true;
        }

        button_set.reorderChild(order_list);
        self.prev_button_set = current_button_set;
        self.current_button_set = button_set;
        if (prev_button_set != nil)
        {
            Pane.removeChild(self.prev_button_set);
            self.prev_button_set = nil;
        }

        Pane.appendChild(context, button_set);
        button_set.InAnimation.restart();
        button_set.visible = true;
    }

    method addButtonSet(context, set_name, set_list)
    {
        self.button_sets[set_name] = set_list;
    }
    
    method setButtonSet(context, set_name)
    {
        if (self.current_set == set_name)
            return;
        var set_list = self.button_sets[set_name];
        self.set(context, set_list);
        self.current_set = set_name;
    }

    method getCurrentButtonSetName()
    {
        return self.current_set;
    }

    method setLabel(context, button_name, text)
    {
        var button_w = Pane::Buttons[button_name];
        button_w["label"].text = text;
        button_w["label_i"].text = text;
    }

    method setInsensitive(button_name, insensitive)
    {
        var button_w = Pane::Buttons[button_name];
        if (button_w != nil)
        {
            button_w["label"].visible = !insensitive;
            button_w["label_i"].visible = insensitive;
        }
    }

    method appear()
    {
        self.FadeEffect.reverse = false;
        self.FadeEffect.start();
        self.is_appear = true;
    }

    method hide()
    {
        self.FadeEffect.reverse = true;
        self.FadeEffect.start();
        self.is_appear = false;
    }

    method appearIf()
    {
        if (!self.is_appear)
        {
            appear();
            return true;
        }

        return false;
    }

    method hideIf()
    {
        if (self.is_appear)
        {
            hide();
            return true;
        }

        return false;
    }
}

module RunViewerProjectComponent::Tooltip::HDToolTip
{
    SCALE_WIDGET_SDTV(tip, 2.4);
}

module RunViewerProjectComponent::HDSlider::slider
{
    function default_format_function(value, scale, range, format, zero_text)
    {
        var v = scale * value;
        if (v == 0 && zero_text != nil)
            return zero_text;
        return format.format(v);
    }

    attribute arg = nil;
    attribute bias = nil;
    attribute zero_text = nil;
    attribute unit_text = nil;
    attribute decide_cb = nil;
    attribute initialized = nil;
    attribute step_thr = nil;
    attribute format_function = nil;
    attribute format_string = nil;

    method onRealize(manager)
    {
        if (pdiext::MSystemConfiguration::isSDTV())
        {
            var pup = self["popup"];
            label.scale_x = 2.4;
            label.scale_y = 2.4;
            labeli.scale_x = 2.4;
            labeli.scale_y = 2.4;
            pup.min.scale_x = 2.4;
            pup.min.scale_y = 2.4;
            pup.max.scale_x = 2.4;
            pup.max.scale_y = 2.4;
            pup.Value.label.scale_x = 2.4;
            pup.Value.label.scale_y = 2.4;
            pup.Value.label.adjust_scale = false;
            pup.base.pack_fill_x = false;
            pup.min.adjust_scale = false;
            pup.max.adjust_scale = false;
        }
    }

    method onInitialize(context)
    {
        if (!self.defined("initialized"))
            return;

        self.bias = 1;
        self.zero_text = nil;
        self.unit_text = nil;
        self.decide_cb = nil;
        self.step_thr = nil;
        self.format_function = nil;
        self.format_string = nil;
        self.initialized = true;
    }

    method onFinalize(context)
    {
        if (!self.defined("initialized"))
            return;

        self.initialized = nil;
        self.bias = nil;
        self.zero_text = nil;
        self.unit_text = nil;
        self.decide_cb = nil;
        self.step_thr = nil;
        self.format_function = nil;
        self.format_string = nil;
    }

    method onPopupOpen(context)
    {
        if (self.initialized != nil)
        {
            self.sliderPopupOpen(context);
        }
    }

    method onPopupClosed(context)
    {
        if (self.initialized != nil)
        {
            self.sliderPopupClosed(context);
        }
    }

    method onValueChanged(context)
    {
        if (self.initialized != nil)
        {
            self.sliderValueChanged(context);
        }
    }

    method onStepChanged(context)
    {
        if (self.step_thr != nil)
        {
            self.on_step_changed();
        }
    }

    method on_step_changed()
    {
        var x = self.value - self.repeat_start;
        x /= 4.0;
        if (x < 0.0)
            x = -x;
        if (x < 1.0)
            x = 1.0;
        if (x > self.step_thr)
            x = self.step_thr;
        self.step = x;
    }

    method callFormatFunction(value)
    {
        // ?. support maybe?
        return self.format_function == nil ? "" : self.format_function(value, self.bias, [self.min, self.max], self.format_string, self.zero_text);
    }

    method setup(context, bias = 1, zero_text, unit_text, bar_on = true, step_thr)
    {
        self.bias = nil;
        self.bias = bias;
        self.zero_text = zero_text;
        self.unit_text = unit_text;
        self.step_thr = step_thr;
        if (self.format_function == nil)
            self.format_function = default_format_function;
        if (self.format_string == nil)
            self.format_string = "%d";
        var pup = self["popup"];
        var min_w = pup.base.w;
        pup.base.w = min_w;
        pup.base.bar.bar.visible = bar_on;
        pup.min.text = callFormatFunction(self.min);
        pup.max.text = callFormatFunction(self.max);
        self.reflect(context);
    }

    method reflect(context)
    {
        if (self.zero_text != nil && self.index == 0)
            self.label.text = self.zero_text;
        else
        {
            self.label.text = callFormatFunction(self.index);
            if (self.unit_text != nil)
                self.label.text += self.unit_text;
        }

        if (self.defined("labeli"))
            self.labeli.text = self.label.text;
    }

    method sliderValueChanged(context)
    {
        var pup = self["popup"];
        var ratio = 0.0;
        var range = self.display_max - self.display_min;
        var bar_w = self.index - self.display_min;
        if (bar_w != 0 && range != 0)
            ratio = bar_w.toFloat() / range.toFloat();
        pup.base.bar.bar.w = pup.base.bar.w * ratio;
        pup.Value.label.text = callFormatFunction(self.index);
        self.doInitialize(context);
    }

    method sliderPopupOpen(context)
    {
        self.sliderValueChanged(context);
        var pup = self["popup"];
        pup.base.bar.pinch.x = pup.base.bar.bar.w;
    }

    method sliderPopupClosed(context)
    {
        if (!self.cancel)
        {
            self.reflect(context);
            if (self.decide_cb != nil)
            {
                self.decide_cb(context, self.index, self);
            }
        }
    }
}
