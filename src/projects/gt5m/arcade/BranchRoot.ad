//---------------------------------------------------------------------------------------
// BranchRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ROOT
{
    hidden.visible = false;

    function getOpeningPath()
    {
        return "theater_opening_us";
    }

    module MODE
    {
        static ADHOC = 0;
        static STATUS = 1;
        static THEATER = 2;
        static THEATER_ENDING = 3;
        static TRADE_AND_SHARE = 4;
    }

    static sOpenMode;
    static sFocusMode;

    static sAdhocModeList = [
        ["adhoc_battle", "adhoc_battle"],
        ["trade_and_share", "adhoc_share_trade"]
    ];

    static sTradeAndShareModeList = [
        ["take", "adhoc_take"],
        ["trade", "adhoc_trade"],
        ["give", "adhoc_give"]
    ];

    static sStatusOpenModeList = [
        ["record", ""],
        ["logs", ""],
        ["car_collection", ""]
    ];

    static sTheaterModeList = [
        ["play_movie_opening", getOpeningPath],
        ["replay", "theater_replay_arcade"],
        ["license_replay", "theater_replay_mission"]
    ];

    static sTheaterEndingModeList = [
        ["play_movie_opening", getOpeningPath],
        ["play_movie_ending", "theater_ending"],
        ["replay", "theater_replay_arcade"],
        ["license_replay", "theater_replay_mission"]
    ];

    static sBGMMap = [
        MODE::ADHOC : "online",
        MODE::TRADE_AND_SHARE : "online",
        MODE::STATUS : "menu",
        MODE::THEATER : "theater",
        MODE::THEATER_ENDING : "theater"
    ];

    method setOpenMode(flg)
    {
        sOpenMode = flg;
    }

    method getOpenMode()
    {
        return sOpenMode;
    }

    method setFocusItem(mode_name)
    {
        sFocusMode = mode_name;
    }

    method get_mode(i)
    {
        var mode_list = [];
        switch (sOpenMode)
        {
            case MODE::ADHOC:
                mode_list = sAdhocModeList;
                break;
            case MODE::TRADE_AND_SHARE:
                mode_list = sTradeAndShareModeList;
                break;
            case MODE::STATUS:
                mode_list = sStatusOpenModeList;
                break;
            case MODE::THEATER:
                mode_list = sTheaterModeList;
                break;
            case MODE::THEATER_ENDING:
                mode_list = sTheaterEndingModeList;
                break;
        }

        if (i >= mode_list.size)
            i %= mode_list.size;

        return mode_list[i];
    }

    method get_mode_num()
    {
        var mode_list = [];
        switch (sOpenMode)
        {
            case MODE::ADHOC:
                mode_list = sAdhocModeList;
                break;
            case MODE::TRADE_AND_SHARE:
                mode_list = sTradeAndShareModeList;
                break;
            case MODE::STATUS:
                mode_list = sStatusOpenModeList;
                break;
            case MODE::THEATER:
                mode_list = sTheaterModeList;
                break;
            case MODE::THEATER_ENDING:
                mode_list = sTheaterEndingModeList;
                break;
        }

        return mode_list.size;
    }

    method onInitialize(context)
    {
        BG::branch_adhoc.visible = false;
        BG::branch_theater.visible = false;
        BG::branch_status.visible = false;
        BG::branch_trade_and_share.visible = false;

        switch (sOpenMode)
        {
            case MODE::ADHOC:
                Header::TextFace.text = context.translate(ROOT, "Arcade", "ADHOC");
                Header::ImageFace.image_path = "image/gt5m/panel/branch_adhoc.png";
                BG::branch_adhoc.visible = true;
                ListBox.keep_scroll_point = false;
                break;
            case MODE::TRADE_AND_SHARE:
                Header::TextFace.text = context.translate(ROOT, "Arcade", "TRADE_AND_SHARE");
                Header::ImageFace.image_path = "image/gt5m/panel/branch_adhoc.png";
                BG::branch_trade_and_share.visible = true;
                ListBox.keep_scroll_point = true;
                break;
            case MODE::STATUS:
                Header::TextFace.text = context.translate(ROOT, "Arcade", "STATUS");
                Header::ImageFace.image_path = "image/gt5m/panel/branch_status.png";
                BG::branch_status.visible = true;
                ListBox.keep_scroll_point = true;
                break;
            case MODE::THEATER:
                Header::TextFace.text = context.translate(ROOT, "Arcade", "THEATER");
                Header::ImageFace.image_path = "image/gt5m/panel/branch_theater.png";
                BG::branch_theater.visible = true;
                ListBox.keep_scroll_point = true;
                break;
            case MODE::THEATER_ENDING:
                Header::TextFace.text = context.translate(ROOT, "Arcade", "THEATER");
                Header::ImageFace.image_path = "image/gt5m/panel/branch_theater.png";
                BG::branch_theater.visible = true;
                ListBox.keep_scroll_point = true;
                break;
        }

        Exit.visible = sOpenMode != MODE::TRADE_AND_SHARE;
        Close.visible = sOpenMode == MODE::TRADE_AND_SHARE;

        var item_count = get_mode_num();

        ListBox.setItemTemplate(context, hidden::Item);
        ListBox.setItemCount(item_count);
        ListBox.focus_index = 0;
        for (var i = 0; i < item_count; i++)
        {
            var mode = get_mode(i);
            var mode_label = mode[0];
            var w = ListBox.getItemWidget(i, context);
            var image_path = "";

            if (mode[1].isInstanceOf(System::String))
                image_path = mode[1];
            else
                image_path = mode[1](mode_label);

            if (image_path == "")
                image_path = "test";

            w.ImageFace.image_path = "image/gt5m/flyer/" + image_path + ".png";

            if (!w.defined("on_active_func"))
                w.defineAttribute('on_active_func');

            w.on_active_func = GTTopRoot["on_%{mode_label}"];

            if (mode_label == sFocusMode)
            {
                ListBox.focus_index = i;
                sFocusMode = nil;
            }
        }
        
        HScrollbar.initialize(ListBox);
        HScrollbar::pinch::ColorFace.visible = ListBox.getItemCount() >= 3;
        ToolTip::tip.action_type = 1;

        ToolTip::tip.visible = false;
        ROOT.setFocus(ListBox);
    }

    method onPageInEnd(context)
    {
        BalloonTip.initialize(context);

        ToolTip::tip.visible = true;
        ToolTip::tip.value = "";

        var focus_w = ROOT.getFocusWidget();
        context.pushEvent(main::menu::MFocusEnterEvent(context, focus_w));

        var code = sBGMMap[sOpenMode];
        if (code != nil)
            SoundUtil::BGMPlayGroup('menu', code);

        HScrollbar.stop_update = false;
        HScrollbar.update_arrow();
    }

    method onFinalize(context)
    {
        ListBox.setItemCount(0);
    }

    method onActivate(context)
    {
        var index = ListBox.focus_index;
        var on_active_func = ListBox.getItemWidget(index).on_active_func;
        if (on_active_func != nil)
            on_active_func(context);

        return EVENTRESULT_FILTER;
    }

    method onExit(context)
    {
        if (sOpenMode != MODE::TRADE_AND_SHARE)
        {
            StartPageOut_XEffect(context, ROOT, GTTopRoot);
        } 
        else 
        {
            ROOT.setOpenMode(ROOT::MODE::ADHOC);
            ROOT.setFocusItem("trade_and_share");
            StartPageOut_XEffect(context, ROOT, ROOT);
        }
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        if (Exit.visible)
            ROOT.setFocus(Exit);
        else
            onExit(context);

        return EVENTRESULT_FILTER;
    }

    module Exit
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.onExit(context);
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            var balloon_text = context.translate(ROOT, "Arcade", "close");
            BalloonTip.set_value(context, self, balloon_text, 12);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module Close
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.onExit(context);
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            var balloon_text = context.translate(ROOT, "Arcade", "close");
            BalloonTip.set_value(context, self, balloon_text, 12);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module ListBox
    {
        method onFocusEnter(context)
        {
            var w = self.getItemWidget(self.focus_index, context);
            ROOT.setFocus(w);
            return EVENTRESULT_FILTER;
        }
        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }

        method onFocusNotify(context, new_index, old_index)
        {
            var new_w = self.getItemWidget(new_index, context);
            if (new_w != nil)
                ROOT.setFocus(new_w);

            return EVENTRESULT_FILTER;
        }
    }

    module hidden::Item
    {
        method onFocusEnter(context)
        {
            var index = ListBox.real_focus_index;
            var mode_name = get_mode(index)[0];
            var name = mode_name.upcase();
            var txt = context.translate(ROOT, "Arcade", name);

            BalloonTip.set_value(context, self, txt, 77);

            ToolTip::tip.value = context.translate(ROOT, "TOOLTIP|" + mode_name.upcase());

            context.sync(0.3);
            HScrollbar.update_arrow();

            return EVENTRESULT_FILTER;
        }
    }

    module HScrollbar
    {
        attribute stop_update = false;

        method initialize(list_box)
        {
            self.stop_update = true;

            list_box.h_adjustment = main::menu::MAdjustment();
            HScrollbar.adjustment = list_box.h_adjustment;
            inc_arrow_animation(true, true);
            dec_arrow_animation(true, true);
        }

        method inc_arrow_animation(reverse, warp = false)
        {
            var effect = HScrollbar::inc_arrow::Pane::Effect;
            if (!warp)
            {
                if (effect.reverse != reverse)
                {
                    effect.reverse = reverse;
                    effect.restart();
                }
            } 
            else 
            {
                effect.reverse = !reverse;
                effect.reset();
                effect.reverse = reverse;
            }
        }

        method dec_arrow_animation(reverse, warp = false)
        {
            var effect = HScrollbar::dec_arrow::Pane::Effect;
            if (!warp)
            {
                if (effect.reverse != reverse)
                {
                    effect.reverse = reverse;
                    effect.restart();
                }
            } 
            else 
            {
                effect.reverse = !reverse;
                effect.reset();
                effect.reverse = reverse;
            }
        }

        method update_arrow()
        {
            if (self.stop_update)
                return;

            inc_arrow_animation(!HScrollbar::inc_arrow.active);
            dec_arrow_animation(!HScrollbar::dec_arrow.active);
        }
    }
}