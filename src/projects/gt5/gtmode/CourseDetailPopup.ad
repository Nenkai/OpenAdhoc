module ROOT
{
    module Function
    {
        #include "CourseFunction.ad"
    }

    attribute popup;
    attribute closed = false;
    attribute course;
    attribute delete_mode;

    attribute is_friend;
    attribute need_update;
    attribute strategy;

    class Strategy
    {

        attribute course;
        
        method __init__(course)
        {
            self.course = course;
        }
    
        method getMetaDataImpl(context, straight, elevation, corner)
        {
            var author = self.getAuthor();
            var online_race = self.getOnlineRace();
            var weather_value0 = self.getWeatherValue0();
            var initial_retention = self.getInitialRetention();
        
            var weather_accel = self.getWeatherAccel();
            var time_progress_speed = self.getTimeProgressSpeed();
        
            var format = context.translate(ROOT, "MyHome", "FORMAT_VALUE");
            var page = "RaceCourseEditProject::CourseMakerRoot";
        
            var list = [];
        
            if (author != "")
                list.push(format.build(context.translate(ROOT, "MyHome", "ONLINE_ID"), author));
        
            list += [
                format.build(context.translate(ROOT, page, "LONGEST_STRAIGHT"), pdiext::MUnit::GetCourseLengthString(straight, true)),
                format.build(context.translate(ROOT, page, "HEIGHT_DIFF"), pdiext::MUnit::GetCourseHeightString(elevation, true)),
                format.build(context.translate(ROOT, page, "CORNER_NUM"), corner),
                format.build(context.translate(ROOT, page, "WEATHER_VALUE0"), Function::CourseMaker::getWeatherValue0DisplayString(context, ROOT, weather_value0)),
                format.build(context.translate(ROOT, page, "INITIAL_RETENTION"), Function::CourseMaker::getInitialRetentionDisplayString(context, ROOT, initial_retention)),
                format.build(context.translate(ROOT, page, "WEATHER_ACCEL"), Function::CourseMaker::getWeatherAccelDisplayValue(weather_accel)),
                format.build(context.translate(ROOT, page, "TIME_PROGRESS_SPEED"), time_progress_speed)
            ];
        
            var course_type = [];
            if (online_race == 0)
            {
                course_type += [
                    "",
                    context.translate(ROOT, "MyHome", "THIS_COURSE_IS_OLD_TYPE")
                ];
            }
        
            list += course_type;
        
            return list.join("\n");
        }
    
        method getThumbnailPath()
        {
            return "piece/replay_thumb/%s.img".format(getGenre());
        }
    
        method getIconImagePath()
        {
            return Function::CourseMaker::getWeatherIconImagePath(
                getGenre(), 
                getStartDatetime(), 
                getWeatherValue0(), 
                getWeatherAccel());
        }
    
        method getIcon2ImagePath()
        {
            return Function::CourseMaker::getTimeIconImagePath(getGenre());
        }
    
        method getKeyword1()
        {
            var start_datetime = pdistd::MTime();
            start_datetime.setBySecond(getStartDatetime());
        
            return "%.02d:%02d".format(start_datetime.hour, start_datetime.minute);
        }
    
        method isDaytime()
        {
            var start_datetime = pdistd::MTime();
            start_datetime.setBySecond(getStartDatetime());
        
            return start_datetime.hour >= 6 && start_datetime.hour < 18;
        }
    
        method getGenre()
        {
        
        }
    
        method getWeather()
        {
        
        }
    
        method getStartDatetime()
        {
        
        }
    
        method getAuthor()
        {
        
        }
    
        method getOnlineRace()
        {
        
        }
    
        method getWeatherValue0()
        {
        
        }
    
        method getInitialRetention()
        {
        
        }
    
        method getWeatherAccel()
        {
        
        }
    
        method getTimeProgressSpeed()
        {
        
        }
    }

    class LocalStrategy : Strategy
    {

        method getId()
        {
            return self.course.id;
        }

        method getGenre()
        {
            return self.course.genre;
        }

        method getTitle()
        {
            return self.course.title;
        }

        method getLength()
        {
            return self.course.length;
        }

        method getCreateTime()
        {
            return self.course.datetime;
        }

        method getComment(context)
        {
            return self.course.comment;
        }

        method getMetaData(context)
        {
            return __super__::getMetaDataImpl(context, self.course.straight, self.course.elevation, self.course.corner);
        }

        method getCoursePathway(context)
        {
            var filename = self.course.filename;
            var st = pdistd::ReadFile(filename);

            var buf = st["buffer"];

            var course_pathway = gtengine::MCoursePathway();
            course_pathway.deserialize(buf);

            return course_pathway;
        }

        method getImagePath()
        {
            return self.course.thumbnail_filename;
        }

        method getWeather()
        {
            return self.course.weather;
        }

        method getStartDatetime()
        {
            return self.course.start_datetime;
        }

        method getAuthor()
        {
            return self.course.author;
        }

        method getOnlineRace()
        {
            return self.course.online_race;
        }

        method getWeatherValue0()
        {
            return self.course.weather_value0;
        }

        method getInitialRetention()
        {
            return self.course.initial_retention;
        }

        method getWeatherAccel()
        {
            return self.course.weather_accel;
        }

        method getTimeProgressSpeed()
        {
            return self.course.time_progress_speed;
        }
    }

    class OnlineStrategy : Strategy
    {
        method getId()
        {
            return self.course["course_id"];
        }

        method getGenre()
        {
            return self.course["genre"];
        }

        method getTitle()
        {
            return self.course["title"];
        }

        method getLength()
        {
            return self.course["length"];
        }

        method getCreateTime()
        {
            return self.course["datetime"];
        }

        method getComment(context)
        {
            return self.course["comment"];
        }

        method getMetaData(context)
        {
            return __super__::getMetaDataImpl(context, self.course["straight"], self.course["elevation"], self.course["corner"]);
        }

        method getCoursePathway(context)
        {
            var request = Course.requestCourse(self.course["course_id"], function (args) {});

            if (Grim2Util::__deprecated__join__(context, request))
            {
                if (request.isDone())
                {
                    var path = Course.getCoursePath(self.course["course_id"]);

                    var st = pdistd::ReadFile(path);
                    var buf = st["buffer"];
                    var packed_blob = pdistd::MBlob(buf);
                    var blob = pdistd::Inflate(packed_blob);

                    var course_pathway = gtengine::MCoursePathway();

                    course_pathway.deserialize(buf);
                    return course_pathway;
                }
            }

            return nil;
        }

        method getImagePath()
        {
            var photo_id = self.course["thumbnail_photo_id"];

            return Photo.getPngImagePath(photo_id);
        }

        method getWeather()
        {
            return self.course["weather"];
        }

        method getStartDatetime()
        {
            return self.course["start_datetime"];
        }

        method getAuthor()
        {
            return self.course["author"];
        }

        method getOnlineRace()
        {
            return self.course["online_race"];
        }

        method getWeatherValue0()
        {
            return self.course["weather_value0"];
        }

        method getInitialRetention()
        {
            return self.course["initial_retention"];
        }

        method getWeatherAccel()
        {
            return self.course["weather_accel"];
        }

        method getTimeProgressSpeed()
        {
            return self.course["time_progress_speed"];
        }
    }

    method open(context, course, delete_mode, is_friend)
    {
        self.need_update = false;
        self.course = course;
        self.delete_mode = delete_mode;
        self.is_friend = is_friend;
        self.closed = false;
        self.popup = main::SequenceUtil::ModalPage(context, ROOT);

        self.popup.open();
        return self.need_update;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;
        ContextMain.event_mask = 0x05;
        ContextMain.disableInput();

        DetailPopup2::FadeActor.on_effect_end = function(context)
        {
            if (ROOT.popup != nil)
            {
                ROOT.popup.close();
                ROOT.popup = nil;
            }

            ContextMain.enableInput();
        }

        DetailPopup2::FadeActor.out = true;
    }

    method onInitialize(context)
    {
        if (self.is_friend)
        {
            self.strategy = OnlineStrategy(self.course);

            DetailPopup2::Pane::Footer::CommandB::Favorite.visible = false;
            DetailPopup2::Pane::Footer::CommandB::Online.visible = false;
            DetailPopup2::Pane::Footer::CommandB::CourseEdit.visible = false;
            DetailPopup2::Pane::Footer::CommandB::Download.visible = true;
            DetailPopup2::Pane::Footer::CommandB::SingleRace.visible = false;
            DetailPopup2::Pane::Footer::CommandB::TimeTrial.visible = false;
            DetailPopup2::Pane::Footer::CommandB::DriftTrial.visible = false;
        }
        else
        {
            self.strategy = LocalStrategy(self.course);

            DetailPopup2::Pane::Footer::CommandB::Favorite.visible = true;

            DetailPopup2::Pane::Footer::CommandB::Online.visible = LoginUtil::isOnline();
            DetailPopup2::Pane::Footer::CommandB::Favorite::CheckBox.active = self.course.favorite != 0;
            DetailPopup2::Pane::Footer::CommandB::Online::CheckBox.active = self.course.online != 0;

            DetailPopup2::Pane::Footer::CommandB::CourseEdit.visible = true;
            DetailPopup2::Pane::Footer::CommandB::Download.visible = false;
            DetailPopup2::Pane::Footer::CommandB::SingleRace.visible = true;
            DetailPopup2::Pane::Footer::CommandB::TimeTrial.visible = true;
            DetailPopup2::Pane::Footer::CommandB::DriftTrial.visible = true;
        }

        DetailPopup2::Pane::Footer::CommandB::Delete.visible = self.delete_mode;

        var space = DetailPopup2::Pane::Body::ScrolledWindow::clip::space;

        space.Title::TextFace.text = context.translate(ROOT, "CourseName", self.strategy.getGenre());

        space.Header::ImageFace.visible = self.strategy.getAuthor() != "";
        space.Header::TextFace.text = self.strategy.getTitle();

        space.Body::TextFaceL.text = "%s : %s".format(context.translate(ROOT, "MyHome", "COURSE_LENGTH"),
        pdiext::MUnit::GetCourseLengthString(self.strategy.getLength(), true));

        var _create_time = self.strategy.getCreateTime();
        var create_time = pdistd::MTime();

        create_time.setBySecond(_create_time);
        var create_time = create_time.toLocal();

        space.Body::TextFaceR.text = context.translate(ROOT, "DateTime", "FORMAT_DATE_TIME").build(
                create_time.year, 
                "%02d".format(create_time.month), 
                "%02d".format(create_time.day),
                "%02d".format(create_time.hour), 
                "%02d".format(create_time.minute));

        space.TextFaceComment.text = self.strategy.getComment(context);
        space.TextFaceMetaData.text = self.strategy.getMetaData(context);

        DetailPopup2::Pane::Body::ImageFaceThumbnail.image_path = self.strategy.getThumbnailPath();
        
        DetailPopup2::Pane::Body::Map::ImageFace.image_path = self.strategy.getImagePath();

        DetailPopup2::Pane::Body::Map::icon.image_path = self.strategy.getIconImagePath();
        DetailPopup2::Pane::Body::Map::icon2.image_path = self.strategy.getIcon2ImagePath();
        DetailPopup2::Pane::Body::Map::keyword1.TextFace.text = self.strategy.getKeyword1();

        DetailPopup2::Pane::Footer::CommandB::Delete.insensitive = !self.delete_mode;
        ROOT.setFocus(DetailPopup2::Pane::Footer::CommandB::Close);

        DetailPopup2::Pane::Body::ScrolledWindow::clip.scroll_mode = 2;
        var adj = main::menu::MAdjustment();

        DetailPopup2::Pane::Body::ScrolledWindow::clip.v_adjustment = adj;
        DetailPopup2::Pane::Body::Scrollbar::VScrollbar.adjustment = adj;

        DetailPopup2::Pane::Body::ScrolledWindow::clip.space.y = 0.0;
        DetailPopup2::Pane::Body::ScrolledWindow::clip.manual_target_y = 0.0;

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {

    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        close(context);

        return EVENTRESULT_FILTER;
    }

    module DetailPopup2::Pane
    {
        module Footer
        {
            module CommandB
            {
                method onFocusEnter(context, event)
                {
                    var w = event.widget;
                    var text = w.name.upcase();

                    if (text != "CHECKBOX" && text != "DOWNLOAD")
                    {
                        var localized_text = context.translate(ROOT, "MyHome", text);

                        BalloonTip.set_value(context, w, localized_text, 0);
                    }

                    return EVENTRESULT_FILTER;
                }

                method onFocusLeave(context)
                {
                    BalloonTip.reset_value();
                    return EVENTRESULT_FILTER;
                }

                method onKeyPress(context, event)
                {
                    var scrollclip = DetailPopup2::Pane::Body::ScrolledWindow::clip;

                    var space = scrollclip.space;
                    var textface = space.TextFaceComment;
                    var line_height = textface.line_height;

                    var status = EVENTRESULT_CONTINUE;
                    if (event.keysym == CELL_PAD_CTRL_L3_UP)
                    {
                        if (scrollclip.manualTargetIncY(line_height))
                            status = EVENTRESULT_STOP;
                    }

                    if (event.keysym == CELL_PAD_CTRL_L3_DOWN)
                    {
                        if (scrollclip.manualTargetIncY(-line_height))
                            status = EVENTRESULT_STOP;
                    }

                    return status;
                }

                function executeGamePlan(context, gp, title)
                {
                    context.cursor_visible = false;
                    var rp = gp.event.race_parameter;

                    var start_datetime = pdistd::MTime();

                    start_datetime.setBySecond(ROOT.strategy.getStartDatetime());

                    Function::CourseMaker::setupWeatherAndTimeChange(rp, 
                        ROOT.strategy.getWeatherValue0(), 
                        ROOT.strategy.getInitialRetention(), 
                        ROOT.strategy.getWeatherAccel(),
                        start_datetime, 
                        ROOT.strategy.getTimeProgressSpeed());

                    rp.accumulation = true;

                    main::GAME_STATUS.user_profile.option.edit_course_data_id = ROOT.strategy.getId();

                    var difficulty = pdiapp::XmlUtil::load_map_and_array("/textdata/gt5/arcade_difficulty.xml", "DifficultyData", "difficulty", "name");

                    var difficulty_setting = difficulty.map;
                    var difficulty_normal = 0;
                    var difficulty_name = "normal";

                    GAME_STATUS.user_profile.context.arcade_difficulty = difficulty_normal;

                    var map = difficulty_setting[difficulty_name];
                    var entry_set = gp.event.entry_set;

                    entry_set.entry_generate.ai_skill = map["ai_skill"];

                    rp.setBoostParams(
                        map["boost_f"], map["boost_r"], map["boost_fmax"], 
                        map["boost_rmax"], map["boost_fmin"], map["boost_rmin"]);

                    rp.replace_at_courseout = map["replace_at_courseout"];

                    var data = CursorProject::LoadingRoot::EditCourseData(gp, title);
                    CursorProject::LoadingRoot.setData(data);

                    var result = GameParameterUtil::executeEvent(context, gp, GAME_STATUS, openDrivingOption);
                    if (!result)
                        CursorProject::LoadingRoot.setData(nil);
                }

                function openDrivingOption(context, gp, cp, dp, player_no)
                {
                    var rp = gp.event.race_parameter;

                    var data = SettingProject::DrivingOptionRoot::Data(cp, dp, rp);
                    data.visible_low_mu_type = true;
                    data.visible_behavior_damage_type = true;

                    switch (gp.event.game_mode)
                    {
                        case gtengine::GameMode::SINGLE_RACE:
                            data.visible_laps = true;
                            data.visible_consumption = true;
                            break;

                        case gtengine::GameMode::DRIFT_ATTACK:
                            data.visible_drift_type = false;
                            break;

                        default:
                            break;
                    }

                    data.course_code = gp.event.track.course_code;
                    data.activate_sound = "next";

                    return SettingProject::DrivingOptionRoot.OpenDialog(context, data);
                }

                function canEnterRidingCar()
                {
                    var cp = main::GAME_STATUS.user_profile.garage.getRidingCar();

                    if (cp == nil)
                        return "ERROR_HAVE_NOT_RIDDEN_CAR";

                    var course_code = gtengine::MSpecDB::getCourseCode(ROOT.strategy.getGenre());
                    var course_cond = gtengine::MSpecDB::getCourseCondition(course_code);
                    var is_racing_kart = gtengine::MSpecDB::checkGenericFlag("is_racing_kart", cp.getCarCode());

                    if (is_racing_kart)
                    {
                        if (course_cond == gtengine::CourseCondition::DIRT || 
                            course_cond == gtengine::CourseCondition::SNOW || 
                            ROOT.strategy.getWeatherValue0() != 1.0 || 
                            ROOT.strategy.getWeatherAccel() != 0)
                        {
                            return "ERROR_RIDING_CAR_CANNOT_RUN_THIS_COURSE";
                        }
                    }

                    var list = cp.getHavingTireList(course_cond);

                    if (list.size == 0)
                    {
                        var err_msg;
                        switch (course_cond)
                        {
                            case gtengine::CourseCondition::DIRT:
                                err_msg = "ERROR_RIDING_CAR_HAVE_NOT_DIRT_TIRE";
                                break;

                            case gtengine::CourseCondition::SNOW:
                            default:
                                err_msg = "ERROR_RIDING_CAR_HAVE_NOT_SNOW_TIRE";
                                break;    
                        }

                        return err_msg;
                    }

                    return "OK";
                }

                module Favorite::CheckBox
                {
                    method onCallback(context, course, item_w)
                    {
                        CheckBox.active = !CheckBox.active;
                        ROOT.need_update = true;
                    }

                    method onActivate(context)
                    {
                        main::sound.play("cursor");

                        Function::setFavorite(context, ROOT.course, !self.active, onCallback);

                        return EVENTRESULT_FILTER;
                    }
                }

                module Online::CheckBox
                {
                    method onCallback(context, course, item_w)
                    {
                        CheckBox.active = !CheckBox.active;
                        ROOT.need_update = true;
                    }

                    method onActivate(context)
                    {
                        main::sound.play("cursor");

                        Function::setOnline(context, ROOT.course, !ROOT.course.online, onCallback);

                        return EVENTRESULT_FILTER;
                    }    
                }

                module SingleRace
                {
                    method onActivate(context)
                    {
                        var res = canEnterRidingCar();

                        if (res != "OK")
                        {
                            main::sound.play("disable");
                            ERROR(context, ROOT, res);
                            return EVENTRESULT_FILTER;
                        }

                        main::sound.play("ok");

                        var course_pathway = ROOT.strategy.getCoursePathway(context);
                        if (course_pathway == nil)
                        {
                            ERROR(context, ROOT, "ERROR_GET_DATA");
                            return EVENTRESULT_FILTER;
                        }

                        var course_code = course_pathway.TemplateCourseCode;
                        var entry_max = CourseData::getEntryMax(course_code);
                        var online_race = ROOT.strategy.getOnlineRace();

                        var old_course_entry_max = 12;
                        if (online_race == 0 && entry_max > old_course_entry_max)
                            entry_max = old_course_entry_max;

                        var laps = GAME_STATUS.user_profile.option.arcade_laps;
                        var cp = main::GAME_STATUS.user_profile.garage.getRidingCar();

                        var is_racing_kart = gtengine::MSpecDB::checkGenericFlag("is_racing_kart", cp.getCarCode());

                        var gp = GameParameterUtil::createSingleRaceWithCustomCourse(course_code, course_pathway, 
                        entry_max, laps, nil, nil, nil, nil, nil, is_racing_kart);

                        var entry_generate = gp.event.entry_set.entry_generate;
                        entry_generate.player_pos = entry_generate.entry_num - 1;

                        gp.event.race_parameter.start_type = gtengine::StartType::GRID;
                        executeGamePlan(context, gp, course_pathway.title);

                        return EVENTRESULT_FILTER;
                    }    
                }

                module TimeTrial
                {
                    method onActivate(context)
                    {
                        var res = canEnterRidingCar();

                        if (res != "OK")
                        {
                            main::sound.play("disable");
                            ERROR(context, ROOT, res);
                            return EVENTRESULT_FILTER;
                        }

                        main::sound.play("ok");

                        var course_pathway = ROOT.strategy.getCoursePathway(context);
                        if (course_pathway == nil)
                        {
                            ERROR(context, ROOT, "ERROR_GET_DATA");
                            return EVENTRESULT_FILTER;
                        }

                        var course_code = course_pathway.TemplateCourseCode;

                        var gp = GameParameterUtil::createTimeAttack(course_code);
                        gp.event.track.course_pathway = course_pathway.serialize();
                        executeGamePlan(context, gp, course_pathway.title);

                        return EVENTRESULT_FILTER;
                    }    
                }

                module DriftTrial
                {
                    method onActivate(context)
                    {
                        var res = canEnterRidingCar();

                        if (res != "OK")
                        {
                            main::sound.play("disable");
                            ERROR(context, ROOT, res);
                            return EVENTRESULT_FILTER;
                        }

                        main::sound.play("ok");

                        var course_pathway = ROOT.strategy.getCoursePathway(context);
                        if (course_pathway == nil)
                        {
                            ERROR(context, ROOT, "ERROR_GET_DATA");
                            return EVENTRESULT_FILTER;
                        }

                        var course_code = course_pathway.TemplateCourseCode;
                        var gp = GameParameterUtil::createDriftAttack(course_code, 0, 0);
                        gp.event.track.course_pathway = course_pathway.serialize();
                        gp.event.race_parameter.endless = true;
                        executeGamePlan(context, gp, course_pathway.title);

                        return EVENTRESULT_FILTER;
                    }    
                }

                module CourseEdit
                {
                    method onCallback(context, course, item_w)
                    {
                        var space = DetailPopup2::Pane::Body::ScrolledWindow::clip::space;
                        space.Header::TextFace.text = course.title;

                        space.TextFaceComment.text = course.comment;

                        ROOT.need_update = true;
                    }

                    method onActivate(context)
                    {
                        main::sound.play("ok");

                        Function::edit(context, ROOT.course, nil, onCallback);

                        return EVENTRESULT_FILTER;
                    }
                }

                module Delete
                {
                    method onCallback(context, course, item_w)
                    {
                        ROOT.need_update = true;
                        ROOT.close(context);
                    }

                    method onActivate(context)
                    {
                        main::sound.play("ok");

                        Function::delete(context, ROOT.course, nil, onCallback);

                        return EVENTRESULT_FILTER;
                    }
                }

                module Download
                {
                    method saveImpl(context)
                    {
                        var pathway = ROOT.strategy.getCoursePathway(context);

                        if (pathway == nil)
                            return -EVENTRESULT_STOP;

                        var size = pdistd::GetDiskFreeSize("/APP_DATA");

                        var size = size.toLong() - ((0x20 * 0x400) * 0x400);

                        if (size < 0)
                            return -2;

                        CourseEditorFace.setRenderData(ORG, pathway);
                        CourseEditorFace.EnablePreviewRender = true;
                        CourseEditorFace.requireAutoFitCamera();

                        var thumbnailL_img = CourseEditorFace.getThumbnailImageLarge();
                        var course_data = CourseFileUtil::Data();

                        course_data.title = ROOT.strategy.getTitle();
                        course_data.comment = ROOT.strategy.getComment();

                        course_data.genre = gtengine::MSpecDB::getCourseLabel(pathway.TemplateCourseCode);
                        course_data.length = pathway.Length;
                        course_data.elevation = pathway.heightDiff;
                        course_data.straight = pathway.longestStraight;
                        course_data.corner = pathway.cornerNum;

                        course_data.weather = ROOT.strategy.getWeather();
                        course_data.start_datetime = ROOT.strategy.getStartDatetime();
                        course_data.datetime = ROOT.strategy.getCreateTime();
                        course_data.author = pathway.author;

                        course_data.online_race = ROOT.strategy.getOnlineRace();
                        course_data.weather_value0 = ROOT.strategy.getWeatherValue0();
                        course_data.initial_retention = ROOT.strategy.getInitialRetention();
                        course_data.weather_accel = ROOT.strategy.getWeatherAccel();
                        course_data.time_progress_speed = ROOT.strategy.getTimeProgressSpeed();

                        var thumbnailM_path = ROOT.strategy.getImagePath();
                        var res = CourseFileUtil::downloadSave(context, course_data, pathway, thumbnailM_path, thumbnailL_img);

                        if (res == nil)
                            return -1;
                        else
                            return 0;
                    } 

                    method onActivate(context)
                    {
                        main::sound.play("ok");
                        if (QUERY(context, ROOT, "QUERY_DOWNLOAD"))
                        {
                            var res = saveImpl(context);
                            if (res == 0)
                                OK(context, ROOT, "MSG_DONE");
                            else if (res == -1)
                                ERROR(context, ROOT, "MSG_FAILED");
                            else if (res == -2)
                                ERROR(context, ROOT, "MSG_DOWNLOAD_FAILED_NOSPACE");
                        }

                        return EVENTRESULT_FILTER;
                    }
                }

                module Close
                {
                    method onActivate(context)
                    {
                        main::sound.play("ok");
                        ROOT.close(context);

                        return EVENTRESULT_FILTER;
                    }    
                }
            }
        }
    }
}