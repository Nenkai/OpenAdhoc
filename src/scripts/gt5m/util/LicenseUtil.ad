//---------------------------------------------------------------------------------------
// LicenseUtil.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module LicenseUtil 
{
    module CATEGORY
    {
        static A = 0;
        static B = 1;
        static C = 2;
        static D = 3;
        static E = 4;
        static F = 5;
        static G = 6;
        static H = 7;
        static I = 8;
        static J = 9;
        static K = 10;
        static L = 11;
        static M = 12;
        static N = 13;
        static O = 14;
        static P = 15;
        static Q = 16;
        static MAX = 17;
    }

    static CategoryString = [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
    ];

    static EntryCondition = [
        nil,
        CATEGORY::A,
        CATEGORY::A,
        [CATEGORY::B, CATEGORY::C],
        CATEGORY::D,
        CATEGORY::D,
        [CATEGORY::E, CATEGORY::F],
        CATEGORY::G,
        CATEGORY::G,
        [CATEGORY::I, CATEGORY::H],
        CATEGORY::J,
        CATEGORY::J,
        [CATEGORY::K, CATEGORY::L],
        CATEGORY::M,
        CATEGORY::M,
        CATEGORY::M,
        CATEGORY::P
    ];

    module LICENSE_COUNT
    {
        function total(category_id) {
            var t = 0;
            for (var i = 0; i <= category_id; i++)
            {
                if (i >= CATEGORY::MAX)
                    break;
                
                var category_str = CategoryString[i];
                t += LICENSE_COUNT[category_str];
            }
            return t;
        }

        static A = 6;
        static B = 6;
        static C = 6;
        static D = 6;
        static E = 6;
        static F = 6;
        static G = 6;
        static H = 6;
        static I = 6;
        static J = 6;
        static K = 6;
        static L = 6;
        static M = 6;
        static N = 6;
        static O = 6;
        static P = 6;
        static Q = 6;
        static TOTAL = total(CATEGORY::MAX);
    }

    module PRIZE
    {
        static NONE = -1;
        static GOLD = 0;
        static SILVER = 1;
        static BRONZE = 2;
    }

    static LicenseId = [
        27,
        0,
        28,
        29,
        31,
        32,

        7,
        1,
        12,
        14,
        44,
        23,

        11,
        26,
        50,
        36,
        52,
        33,

        10,
        13,
        61,
        9,
        40,
        6,

        24,
        59,
        77,
        17,
        19,
        18,

        15,
        46,
        25,
        21,
        2,
        22,

        37,
        38,
        39,
        62,
        16,
        20,

        201,
        202,
        203,
        204,
        205,
        206,

        213,
        214,
        215,
        216,
        217,
        218,

        49,
        5,
        45,
        35,
        48,
        76,

        41,
        34,
        42,
        3,
        60,
        4,

        53,
        54,
        56,
        55,
        57,
        58,

        43,
        47,
        64,
        63,
        51,
        65,

        207,
        208,
        209,
        210,
        211,
        212,

        219,
        220,
        221,
        222,
        223,
        224,

        66,
        67,
        68,
        69,
        78,
        70,

        71,
        72,
        73,
        79,
        74,
        75
    ];

    function GetCategoryIdAndCategoryIndex(index)
    {
        if (index >= LICENSE_COUNT::TOTAL)
            return [0, 0];

        var id = index;

        var category_id = CATEGORY::A;
        var count = GetLicenseCountOfCategory(category_id);
        while (index <= count)
        {
            index -= count;
            category_id++;

            count = GetLicenseCountOfCategory(category_id);

            if (category_id == CATEGORY::MAX - 1)
                break;
        }
        return [category_id, index];
    }

    function GetCategory(index)
    {
        |var category_id, var category_index| = GetCategoryIdAndCategoryIndex(index);
        return category_id;
    }

    function GetCategoryIndex(index)
    {
        |var category_id, var category_index| = GetCategoryIdAndCategoryIndex(index);
        return category_index;
    }

    function GetLicenseCountOfCategory(category_id)
    {
        if (category_id > CATEGORY::MAX)
            return 0;

        var category_str = CategoryString[category_id];
        var l_count = LICENSE_COUNT[category_str];
        if (l_count == nil)
            return 0;

        return l_count;
    }

    function GetIndex(category_id, category_index)
    {
        if (category_id >= CATEGORY::MAX)
            return nil;
        
        var count = GetLicenseCountOfCategory(category_id);

        if (category_index >= count)
            return nil;
        
        var total_count = LICENSE_COUNT::total(category_id - 1);
        return total_count + category_index;
    }

    function GetIndexByLicenseId(lid)
    {
        var index = LicenseId.indexOf(lid);
        if (index == nil)
            index = 0;

        return index;
    }

    function GetLicenseId(index)
    {
        if (index >= LICENSE_COUNT::TOTAL)
            return 0;
        
        return LicenseId[index];
    }

    function GetCategoryString(category_id)
    {
        return CategoryString[category_id];
    }

    function canEntry(category_id, game_status)
    {
        var game_record = game_status.user_profile.record;

        var result = false;
        var condition = EntryCondition[category_id];

        if (condition == nil)
            return true;
        
        var array = [];
        if (condition.isInstanceOf(System::Int))
        {
            array.push(condition);
        }
        else if (condition.isInstanceOf(System::Array))
        {
            array += condition;
        }
        
        foreach (var c_id in array)
        {
            var count = LicenseUtil::GetLicenseCountOfCategory(c_id);
            for (var i = 0; i < count; i++)
            {
                var index = LicenseUtil::GetIndex(c_id, i);

                var license_result = game_record.licenses[index].result;
                if (license_result == PRIZE::NONE)
                    break;
                
                if (i == count - 1)
                    result = true;
            }
        }

        return result;
    }

    function isAllClear(category_id, all_gold = false, game_status)
    {
        var game_record = game_status.user_profile.record;

        if (category_id != nil)
        {
            var count = LicenseUtil::GetLicenseCountOfCategory(category_id);
            for (var i = 0; i < count; i++)
            {
                var index = LicenseUtil::GetIndex(category_id, i);

                var license_result = game_record.licenses[index].result;
                if (license_result == PRIZE::NONE)
                    return false;

                if (all_gold && license_result != PRIZE::GOLD)
                    return false;
            }
        }
        else
        {
            for (var i = 0; i < CATEGORY::MAX; i++)
            {
                var count = LicenseUtil::GetLicenseCountOfCategory(i);
                for (var ii = 0; ii < count; ii++)
                {
                    var index = LicenseUtil::GetIndex(i, ii);

                    var license_result = game_record.licenses[index].result;
                    if (license_result == PRIZE::NONE)
                        return false;

                    if (all_gold && license_result != PRIZE::GOLD)
                        return false;
                }
            }
        }
        return true;
    }

    module STAGE
    {
        static FIRST = 0;
        static SECOND = 1;
    }

    function isFirstStage(category_id)
    {
        return category_id < CATEGORY::J;
    }

    function isFirstStageClear(game_status)
    {
        return canEntry(CATEGORY::J, game_status);
    }

    function getCategoryStartEnd(stage)
    {
        switch (stage)
        {
            case STAGE::FIRST:
                return [CATEGORY::A, CATEGORY::I];
                break;

            case STAGE::SECOND:
                return [CATEGORY::J, CATEGORY::Q];
                break;
     
            default:
                return [-1, -1];
                break;
            }
    }

    static BGIndex = [
        0,
        0,
        0,
        1,
        1,
        2,
        1,
        2,
        2,
        0,
        1,
        1,
        0,
        2,
        2,
        0,
        0
    ];

    function getBGIndex(category_id)
    {
        return BGIndex[category_id];
    }

    static LineIndex = [
        0,
        0,
        3,
        1,
        1,
        3,
        1,
        2,
        3,
        0,
        1,
        3,
        0,
        2,
        2,
        3,
        3
    ];

    function getLineIndex(category_id)
    {
        return LineIndex[category_id];
    }

    static rewardList = [
        6000,
        7000,
        10000,
        8000,
        9000,
        12000,
        10000,
        13000,
        16000,
        14000,
        15000,
        18000,
        16000,
        17000,
        23000,
        19000,
        20000
    ];

    function getReward(category, index)
    {
        var reward = main::GamePlan::Reward();
        var base = rewardList[category];
        var prize = base + ((base / 10) * index);
        reward.prize_table = [prize * 4, prize * 2, prize, 0];
        return reward;
    }
}