//---------------------------------------------------------------------------------------
// race.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module RaceProject
{
    import main::SequenceUtil;
    import main::ActorUtil;
    import main::WatcherUtil;
    import main::DialogUtil;
    import main::RaceMenuUtil;
    import main::SoundUtil;
    import main::LeaveDetectUtil;
    import main::TireUtil;

    #include "projects/gt5m/race/LoadingUtil.ad";
    #include "projects/gt5m/race/BoardUtil.ad";

    module PluginModule
    {
    }

    static gSequenceCondition;

    class SequenceCondition
    {
        attribute game_plan = nil;
        attribute event_idx = nil;

        attribute game_mode = nil;
        attribute event = nil;

        attribute is_buffer_replay_mode = nil;
        attribute is_instant_replay_mode = nil;
        attribute is_spectator_mode = nil;
        attribute enable_restart = nil;
        attribute disable_end_session = nil;
        attribute result_entry_list = nil;
        attribute jackpot_race_info = nil;

        attribute disable_pause_menu = nil;
        attribute finish_result = nil;
        attribute enable_driver_change = nil;

        attribute quick_root = nil;
        attribute additional_projects = Map();

        attribute stage_no = nil;
        attribute is_fatal_error_happened = nil;
        attribute is_riding_car = nil;

        attribute game_status = nil;

        attribute course_id = nil;
        attribute course_logo = nil;
        attribute course_category = nil;
        attribute course_length = nil;
        attribute course_elevation = nil;
        attribute course_has_reverse = nil;

        attribute new_record = nil;

        attribute endless_total_score = nil;

        attribute last_endless = nil;

        attribute current_weight = nil;
        attribute current_power = nil;

        method startSession()
        {
            if (!is_buffer_replay_mode)
                self.finish_result = main::gtengine::FinishResult::NONE;

            self.disable_pause_menu = false;
            if (is_buffer_replay_mode || is_spectator_mode || main::GameSequence::getCurrentSequence() == main::GameSequence::LEAVE_DEMO)
            {
                self.disable_pause_menu = true;
            }

            if (isPlay())
                self.result_entry_list = nil;

            self.jackpot_race_info = nil;


            var time_limit = 0;
            var leave_limit = 0;
            if (self.event != nil)
            {
                var play_style = self.event.play_style;
                if (play_style != nil)
                {
                    if (play_style.time_limit != nil)
                        time_limit = play_style.time_limit;

                    if (play_style.leave_limit != nil)
                        leave_limit = play_style.leave_limit;
                }
            }

            main::ORG.setApplicationEndSessionSecond(time_limit);
            main::ORG.setNoInputLimitSecond(leave_limit);
        }

        method isPlay()
        {
            return !is_buffer_replay_mode && !is_spectator_mode;
        }

        method loadProject(context, project_name)
        {
            var p = additional_projects.find(project_name);
            if (p == nil)
            {
                setCursor(context, "wait");
                var project = main::manager.loadProject("/%{main::PROJECT_ROOT_DIR}/%{project_name}/%{project_name}");

                additional_projects[project_name] = project;
                setCursor(context, "default");
            }
        }

        method unloadAllProjects()
        {
            foreach (|var project_name, var project| in additional_projects)
            {
                if (nil != project)
                    main::manager.unloadProject(project);
            }

            additional_projects = Map();
        }

        method setup()
        {
            var is_replay_camera = false;

            if (main::GameSequence::getCurrentMode() == main::GameSequence::REPLAY_THEATER)
            {
                is_replay_camera = true;
            }
            else if (self.event != nil)
            {
                var play_style = self.event.play_style;
                if (play_style != nil)
                {
                    if (play_style.play_type != main::GamePlan::PlayType::RACE)
                        is_replay_camera = true;
                }
            }

            if (is_replay_camera)
            {
                self.is_spectator_mode = true;
                self.enable_restart = false;
                self.disable_pause_menu = true;
            }

            enable_driver_change = false;
        }
    }

    module InitializeModule
    {
        function initSequenceCondition(context, sc, gp, event_idx, game_mode)
        {
            if (gp != nil)
            {
                sc.game_plan = gp;
                sc.event_idx = event_idx;
                if (gp.events != nil && gp.events.size > event_idx)
                {
                    sc.event = gp.events[event_idx];
                    if (sc.event.track != nil)
                    {
                        main::GlobalStatus::game_context.course = sc.event.track.course_code;
                    }
                }
            }

            sc.game_mode = game_mode;
            sc.is_buffer_replay_mode = false;
            sc.is_instant_replay_mode = false;
            sc.is_spectator_mode = false;
            sc.enable_restart = true;
            sc.enable_driver_change = false;
            sc.disable_end_session = false;
            sc.disable_pause_menu = false;
            sc.additional_projects = Map();
            sc.stage_no = 0;
            sc.is_riding_car = false;
            sc.is_fatal_error_happened = false;

            if (main::RaceOperator.isTheater())
            {

                sc.is_buffer_replay_mode = true;
                sc.is_spectator_mode = true;
            }

            sc.game_status = main::GlobalStatus::checkout();

            var course_data = main::pdiapp::XmlUtil::loadCourseMap("/textdata/gt5m/courselist.xml", "CourseData", "course", "code");
            var course_code = main::GlobalStatus::game_context.course;
            var course_label = main::gtengine::MSpecDB::getCourseLabel(course_code);
            if (course_label.beginWith("r_"))
                course_code = main::gtengine::MSpecDB::getCourseCode(course_label.substr(2));

            sc.course_id = GetTextDataCourseInfo(course_data, course_code, "id", "0");
            sc.course_logo = GetTextDataCourseInfo(course_data, course_code, "logo", "");
            sc.course_category = GetTextDataCourseInfo(course_data, course_code, "category", "");
            sc.course_length = GetTextDataCourseInfo(course_data, course_code, "length", "0");
            sc.course_elevation = GetTextDataCourseInfo(course_data, course_code, "elevation", "0");
            sc.course_has_reverse = GetTextDataCourseInfo(course_data, course_code, "has_reverse", "false");

            sc.new_record = false;
            sc.endless_total_score = 0;
            sc.last_endless = false;

            sc.current_power = nil;
            sc.current_weight = nil;

            if (!main::RaceOperator.isTheater())
            {
                if (sc.game_status != nil &&
                    (game_mode == main::gtengine::GameMode::SINGLE_RACE ||
                    game_mode == main::gtengine::GameMode::TIME_ATTACK))
                {
                    var cp = getPlayerCar();
                    if (sc.game_status.user_profile.garage.hasFavorite(cp.getCarCode(), cp.color))
                    {
                        if (cp.powerModifyRatio != 0)
                        {
                            sc.current_power = cp.powerModifyRatio;
                            cp.powerModifyRatio = 0;
                        }

                        if (cp.weightModifyRatio != 100)
                        {
                            sc.current_weight = cp.weightModifyRatio;
                            cp.weightModifyRatio = 100;
                        }

                        if (sc.current_power != nil || sc.current_weight != nil)
                        {
                            setPlayerCar(cp);
                        }
                    }
                }
            }
        }

        function GetTextDataCourseInfo(course_data, course_code, column, not_found_txt)
        {
            var course_code = main::gtengine::MSpecDB::getCourseCode(course_code);
            if (course_code == main::gtengine::MSpecDB::NO_CODE64)
                return not_found_txt;

            var carelem = course_data.map[course_code];
            if (carelem == nil)
                return not_found_txt;

            var text = carelem[column];
            if (text == nil)
                return not_found_txt;

            return text;
        }

        function onLoad(update_context)
        {
            var event_idx = 0;

            var gp = nil;
            var game_mode = nil;
            switch (main::GameSequence::getCurrentMode())
            {
                case main::GameSequence::RACE:
                    gp = main::GameSequence::getGamePlan();
                    var event = gp.events[event_idx];
                    game_mode = event.game_mode;
                    break;

                case main::GameSequence::REPLAY_THEATER:
                    break;
            }

            var render_context = update_context.getRenderContext();

            gSequenceCondition = SequenceCondition();
            initSequenceCondition(render_context, gSequenceCondition, gp, event_idx, game_mode);

            if (game_mode != nil)
            {
                var plugin_table = [
                    main::gtengine::GameMode::SINGLE_RACE          : "ModuleArcade",
                    main::gtengine::GameMode::TIME_ATTACK          : "ModuleTimeAttack",
                    main::gtengine::GameMode::LICENSE              : "ModuleLicense",
                    main::gtengine::GameMode::ADHOC_BATTLE_PRO     : "ModuleAdhocBattle",
                    main::gtengine::GameMode::ADHOC_BATTLE_AMA     : "ModuleAdhocBattle",
                    main::gtengine::GameMode::ADHOC_BATTLE_SHUFFLE : "ModuleAdhocBattle",
                    main::gtengine::GameMode::DRIFT_ATTACK         : "ModuleDriftAttack"
                ];
                var module_name = plugin_table[game_mode];

                if (module_name != nil)
                    PluginModule.load("%{main::PROJECT_ROOT_DIR}/race/%{module_name}");
            }

            gSequenceCondition.setup();


            SequenceUtil::setPageTransition([
                "*,LoadingRoot" : CursorProject::GTLogoTransition,
                "*,*"           : CursorProject::ColorTransition
            ]);

            update_context.loadGpb("%{main::PROJECT_ROOT_DIR}/race", "Template");

            OnboardMeterRoot::RaceDisplayFace.setup(main::ORG);

            main::ORG.disableRenderingRace();
            main::ORG.disableSoundingRace();
            main::ORG.setBackRaceParameter(main::RaceOperator.race_parameter);

            if (PluginModule.defined("onLoad"))
                PluginModule::onLoad(update_context);
            else
            {
                switch (main::GameSequence::getCurrentMode())
                {
                    case main::GameSequence::REPLAY_THEATER:

                        gSequenceCondition.is_buffer_replay_mode = true;
                        break;
                }

                LoadingRoot.open(render_context);
            }
        }
    }

    function onLoad(update_context)
    {
        InitializeModule::onLoad(update_context);
        InitializeModule.clearStatic();
    }

    function onUnload(update_context)
    {
        update_context.unloadGpb("%{main::PROJECT_ROOT_DIR}/race", "Template");

        gSequenceCondition.unloadAllProjects();

        main::ORG.setApplicationEndSessionSecond(0);
        main::ORG.setNoInputLimitSecond(0);

        updateFavoriteCarIf(update_context);


        if (PluginModule.defined("onUnload"))
            PluginModule::onUnload(update_context);

        if (gSequenceCondition.game_status != nil)
        {
            main::GlobalStatus::checkin(gSequenceCondition.game_status);
            gSequenceCondition.game_status = nil;
        }
    }

    function updateFavoriteCarIf(context)
    {
        var power = gSequenceCondition.current_power;
        var weight = gSequenceCondition.current_weight;
        if (power == nil && weight == nil)
            return;

        var dirty = false;
        var cp = getPlayerCar();

        if (power != nil && power != cp.powerModifyRatio)
        {
            dirty = true;
            cp.powerModifyRatio = power;
        }

        if (weight != nil && weight != cp.weightModifyRatio)
        {
            dirty = true;
            cp.weightModifyRatio = weight;
        }

        if (!dirty)
        {
            return;
        }

        gSequenceCondition.game_status.user_profile.garage.updateParamForFavorite(cp);
    }

    function goToMenuSequence(context)
    {

        SequenceUtil::startSequence(context, main::GameSequence::MENU);
    }

    function doStartRace(context, remain_time)
    {
        if (!main::ORG.canEnterCourse())
        {
            main::sound.play("cancel");
            return false;
        }

        main::sound.play("start");

        main::ORG.setChangeableCarParameterAtBeginningOfSession(getPlayerSlot(), getPlayerCar());
        main::ORG.setChangeableDriverParameterAtBeginningOfSession(getPlayerSlot(), 0, getPlayerDriver());

        var line_flag = main::GlobalStatus::game_context.driving_line;
        var event = gSequenceCondition.event;
        var cons = event.constraint;
        if (cons != nil)
        {
            if (cons.driving_line != nil)
                line_flag = cons.driving_line;
        }

        main::ORG.setDrivingLineDispFlag(0, line_flag);

        gSequenceCondition.is_buffer_replay_mode = false;
        gSequenceCondition.finish_result = main::gtengine::FinishResult::NONE;
        gSequenceCondition.result_entry_list = nil;
        gSequenceCondition.jackpot_race_info = nil;
        gSequenceCondition.new_record = false;
        gSequenceCondition.endless_total_score = 0;
        gSequenceCondition.last_endless = main::RaceOperator.race_parameter.endless;

        var target = getPlayerSlot();

        main::ORG.setCameraTarget(0, target);
        main::ORG.setRaceDisplayTarget(0, target);
        SequenceUtil::startPage(context, OnboardMeterRoot, RaceRoot);

        SoundUtil::BGMFadeout(1.0);
        main::ORG.getRaceSound().start = false;

        return true;
    }

    function getCurrentCourse()
    {
        var rp = main::ORG.getCurrentRaceParameter();
        return rp.course_code;
    }

    function getPlayerSlot(player_no)
    {
        if (player_no == nil)
            player_no = 0;

        if (main::RaceOperator.isOnline())
            return main::RaceOperator.getAccountSlotID(player_no);

        return main::RaceOperator.getTargetSlot(player_no);
    }

    function getPlayerCar(player_no)
    {
        if (player_no == nil)
            player_no = 0;

        return main::RaceOperator.getTargetCarParameter(player_no);
    }

    function getPlayerDriver(player_no)
    {
        if (player_no == nil)
            player_no = 0;

        return main::RaceOperator.getTargetDriverParameter(player_no, 0);
    }

    function setPlayerCar(cp, player_no)
    {
        if (player_no == nil)
            player_no = 0;

        return main::RaceOperator.setTargetCarParameter(player_no, cp);
    }

    function setPlayerDriver(dp, player_no)
    {
        if (player_no == nil)
            player_no = 0;

        return main::RaceOperator.setTargetDriverParameter(player_no, 0, dp);
    }

    function getTireString2(context, root, cp, course_code)
    {
        |var tire_f, var tire_r| = cp.getTireCategories();
        var tire_names = TireUtil::getTireNames(context, root, tire_f, tire_r, course_code);
        return "%s / %s".format(tire_names[0], tire_names[1]);
    }

    function getCurrentEntryList()
    {
        var entry_list = [];

        main::ORG.fetchRaceDisplay();

        var rp = main::ORG.getCurrentRaceParameter();
        var entry_max = rp.entry_max;
        var report = main::ORG.getRaceDisplayReport(true, entry_max, 0);
        var order_list = main::ORG.getCarOrderList();

        foreach (var slot_id in order_list)
        {
            var cp = main::ORG.getEntriedCarParameter(slot_id);
            var dp = main::ORG.getEntriedDriverParameter(slot_id);
            var info = BoardUtil::EntryInfo(slot_id, cp, dp,
                                            report.total_time[slot_id],
                                            report.total_time_diff[slot_id],
                                            report.fastest_lap_time[slot_id],
                                            report.fastest_lap_diff[slot_id]);

            entry_list.push(info);
        }

        return entry_list;
    }

    function getEnsuredOrder(target)
    {
        main::ORG.fetchRaceDisplay();

        var order_list = main::ORG.getCarOrderList();

        var result = -1;
        for (var order = 0; order < order_list.size; order++)
        {
            if (order_list[order] == target)
            {
                result = order;
                break;
            }
        }

        return result;
    }

    function setCursor(context, state)
    {
        var page = context.getCommonPage("CursorRoot");
        if (page != nil)
        {
            page["setCursor"](context, state);
        }
    }
}