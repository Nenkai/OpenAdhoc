













module ROOT
{
    hidden.visible = false;

    attribute modal_page;
    attribute closed;
    attribute cursor_visible;
    attribute total_trophy_count;
    attribute total_star_count;
    attribute total_license_trophy_count;

    method open(context)
    {
        self.cursor_visible = context.cursor_visible;
        context.cursor_visible = true;
        self.closed = true;

        self.modal_page = main::SequenceUtil::ModalPage(context, ROOT);
        self.modal_page.open();
        return true;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;

        PageUtil::visibleUnderPages(context, self);

        context.cursor_visible = self.cursor_visible;

        self.cursor_visible = nil;

        ROOT.setFocus(nil);

        var actor = self.CloseActor;
        actor.forward();
        actor.restart();

        if (self.modal_page != nil)
        {
            var delay_time = actor.Fade.total_time;
            self.modal_page.close(delay_time);
            self.modal_page = nil;
        }
    }

    function displayTotalDistance(running_km)
    {
        var km_mile;
        if (GAME_STATUS.user_profile.option.unit_velocity)
            km_mile = running_km / 1.6;
        else
            km_mile = running_km;

        if (km_mile > 999999.9)
            km_mile = 999999.94;

        return pdiext::GetNumberString(10 * km_mile, 1);
    }

    function checkRussian(value)
    {
        var language = pdistd::MLocale::getLanguage();
        if (language == "RU" || language == "PL")
            return [value, ""];
        else
            return ["", value];
    }

    module GameStatusImpl
    {
        module License
        {
            function init(context, item)
            {
                item.setIcon("license_%s".format(GAME_STATUS.user_profile.career_mode_license.downcase()));
                item.setLicenseValue(manager.translate("CommonGTMode", "CareerCategory_%s".format(GAME_STATUS.user_profile.career_mode_license.upcase())));
            }
        }

        module GameProgress
        {
            function init(context, item)
            {
                var current = GAME_STATUS.user_profile.record.event_record.getOfflineTrophyCount();
                var total = ROOT.total_trophy_count != nil ? ROOT.total_trophy_count : "--";
                var percent_f = (current.toFloat() / total.toFloat()) * 100;
                if (percent_f > 0 && percent_f < 1)
                    percent_f = 1;

                var language = pdistd::MLocale::getLanguage();
                var percent = manager.translate("Unit", "PERCENT").build("");
                var percent_l = language == "TR" ? percent : "";
                var percent_r = language != "TR" ? percent : "";
                var percent_i = percent_f.toInt();

                item.setValue(percent_l, percent_f.toInt(), percent_r);
                item.PieChart.visible = true;
                item.PieChart::PieSeries.value = percent_i;
            }
        }

        module LicenseTrophies
        {
            function init(context, item)
            {
                var current = GAME_STATUS.user_profile.record.event_record.getLicenseTrophyCount();
                var total = ROOT.total_license_trophy_count != nil ? ROOT.total_license_trophy_count : "--";
                item.setValue("", current, "/%{total}");
            }   
        }

        module Stars
        {
            function init(context, item)
            {
                var current = GAME_STATUS.user_profile.record.event_record.getStars();
                var total = ROOT.total_star_count != nil ? ROOT.total_star_count : "--";
                item.setValue("", current, "/%{total}");
            }   
        }

        module OwnedCars
        {
            function init(context, item)
            {
                var garage_cars = GAME_STATUS.user_profile.garage.getCarCount();
                var stockyard_cars = GAME_STATUS.user_profile.garage_stockyard_carcount;

                |var value_l, var value_r| = checkRussian(manager.translate("Unit", "CARS").build(""));
                item.setValue(value_l, garage_cars + stockyard_cars, value_r);
            }   
        }

        module TotalRaces
        {
            function init(context, item)
            {
                var races = GAME_STATUS.user_profile.total_aspec_race_complete + GAME_STATUS.user_profile.total_bspec_race_complete;

                |var value_l, var value_r| = checkRussian(manager.translate("Unit", "RACES").build(""));
                item.setValue(value_l, races, value_r);
            }   
        }

        module Wins
        {
            function init(context, item)
            {
                var wins = GAME_STATUS.user_profile.total_aspec_win + GAME_STATUS.user_profile.total_bspec_win;

                |var value_l, var value_r| = checkRussian(manager.translate("Unit", "WINS").build(""));
                item.setValue(value_l, wins, value_r);
            }   
        }

        module CurrentCredits
        {
            function init(context, item)
            {
                var credits = GAME_STATUS.user_profile.cash;
                var credits_txt = credits > 0 ? main::pdiext::MMisc::GetMoneyString(credits) : "0";

                item.setCreditValue(credits_txt);
            }   
        }

        module TotalPrizeMoney
        {
            function init(context, item)
            {
                var total_prize = GAME_STATUS.user_profile.total_prize;
                var total_prize_txt = total_prize > 0 ? main::pdiext::MMisc::GetMoneyString(total_prize) : "0";

                item.setCreditValue(total_prize_txt);
            }   
        }

        module TotalTuningCost
        {
            function init(context, item)
            {
                var pay_credits = GAME_STATUS.user_profile.total_tuning_cost;
                var pay_credits_txt = pay_credits > 0 ? main::pdiext::MMisc::GetMoneyString(pay_credits) : "0";

                item.setCreditValue(pay_credits_txt);
            }   
        }

        module TotalDistance
        {
            function init(context, item)
            {
                var km = GAME_STATUS.user_profile.total_aspec_running_km + GAME_STATUS.user_profile.total_bspec_running_km;

                item.setValue("", displayTotalDistance(km), pdiext::MUnit::GetUnitOfDistance());
            }   
        }

        module TotalDrivingTime
        {
            function init(context, item)
            {
                var total_time_sec = GAME_STATUS.user_profile.total_aspec_time + GAME_STATUS.user_profile.total_bspec_time;
                var hour10 = total_time_sec / 360;

                item.setValue("", pdiext::GetNumberString(hour10, 1), manager.translate("Unit", "HOUR").build(""));
            }   
        }

        module TotalPhotos
        {
            function init(context, item)
            {
                var photos = GAME_STATUS.user_profile.total_photo_count;

                |var value_l, var value_r| = checkRussian(manager.translate("Unit", "PHOTOS").build(""));
                item.setValue(value_l, photos, value_r);
            }   
        }

        module PaintItems
        {
            function init(context, item)
            {
                var colors = GAME_STATUS.user_profile.item.paint.getCount();

                |var value_l, var value_r| = checkRussian(manager.translate("Unit", "COLORS").build(""));
                item.setValue(value_l, colors, value_r);
            }   
        }

        module RacingGears
        {
            function init(context, item)
            {
                var racing_gears = GAME_STATUS.user_profile.item.racing_gear.getItemVarietyCount();

                |var value_l, var value_r| = checkRussian(manager.translate("Unit", "ITEMS").build(""));
                item.setValue(value_l, racing_gears, value_r);
            }   
        }

        module LongestDistance
        {
            function init(context, item)
            {
                item.setCarIcon("distance");
                var car = GAME_STATUS.user_profile.max_distance_car;

                item.setValue("", displayTotalDistance(car.record * 0.001), pdiext::MUnit::GetUnitOfDistance());
                item.setValue2(car.code == gtengine::MSpecDB::NO_CODE ? "---" : gtengine::MSpecDB::getCarName(car.code));
            }   
        }

        module Winningest
        {
            function init(context, item)
            {
                item.setCarIcon("win");
                var car = GAME_STATUS.user_profile.max_win_car;

                |var value_l, var value_r| = checkRussian(manager.translate("Unit", "WINS").build(""));
                item.setValue(value_l, car.record, value_r);
                item.setValue2(car.code == gtengine::MSpecDB::NO_CODE ? "---" : gtengine::MSpecDB::getCarName(car.code));

            }   
        }

        module Fastest
        {
            function init(context, item)
            {
                item.setCarIcon("speed");
                var car = GAME_STATUS.user_profile.max_speed_car;

                item.setValue("", pdiext::MUnit::GetVelocityForDisplay(car.record), pdiext::MUnit::GetUnitOfVelocity());
                item.setValue2(car.code == gtengine::MSpecDB::NO_CODE ? "---" : gtengine::MSpecDB::getCarName(car.code));
            }   
        }

        module FavoriteDealer
        {
            function init(context, item)
            {
                var tuner_label = "";
                var max_count = 0;
                var list = KeyValueUtil::getList("favorite_tuner");

                foreach (|var key, var value| in list)
                {
                    var count = value.toInt();
                    if (max_count < count)
                    {
                        tuner_label = key;
                        max_count = count;
                    }
                }

                |var value_l, var value_r| = checkRussian(manager.translate("Unit", "CARS").build(""));
                item.setValue(value_l, max_count, value_r);

                if (tuner_label != "")
                {
                    item.setIcon("piece/gt6/tunner_logo_L/%s.img".format(tuner_label));
                    item.setValue2(manager.translate("TunerName", tuner_label));
                }
                else
                {
                    item.setValue2("---");
                }
            }   
        }

        module HomeCourse
        {
            function init(context, item)
            {
                var course_code = gtengine::MSpecDB::NO_CODE;
                var max_mileage = 0;
                var list = KeyValueUtil::getList("course_mileage");

                foreach (|var key, var value| in list)
                {
                    var mileage = value.toFloat();
                    if (max_mileage < mileage)
                    {
                        course_code = key.toInt();
                        max_mileage = mileage;
                    }
                }

                var course_info = SPECDB.query1("SELECT Logo FROM COURSE WHERE ID = ?", [course_code]);
                if (course_info != nil)
                {
                    item.setIcon("piece/gt6/course_logo_L/%s.img".format(course_info.Logo));
                    item.setValue("", displayTotalDistance(max_mileage), pdiext::MUnit::GetUnitOfDistance());
                    item.setValue2(SpecDatabaseUtil::getCourseFullName(context, course_code));
                }
                else
                {
                    item.setValue("", "---", "");
                    item.setValue2("---");
                }
            }   
        }
    }

    class GameStatusEntry
    {
        attribute size;
        attribute label;
        attribute image;
        attribute impl;

        method __init__(size, label, image, impl)
        {
            self.size = size;
            self.label = label;
            self.image = image;
            self.impl = impl;
        }
    }

    static sGameStatusEntryList = [
        GameStatusEntry("S", "Label_License", "license_a", GameStatusImpl::License),
        GameStatusEntry("S", "Label_GameProgress", "game_progress", GameStatusImpl::GameProgress),
        GameStatusEntry("S", "Label_LicenseTrophies", "license_trophy", GameStatusImpl::LicenseTrophies),
        GameStatusEntry("S", "Label_Stars", "star", GameStatusImpl::Stars),
        GameStatusEntry("S", "Label_OwnedCars", "car", GameStatusImpl::OwnedCars),
        GameStatusEntry("S", "Label_TotalRaces", "race", GameStatusImpl::TotalRaces),
        GameStatusEntry("S", "Label_Wins", "race_win", GameStatusImpl::Wins),
        GameStatusEntry("S", "Label_CurrentCredits", "credit", GameStatusImpl::CurrentCredits),
        GameStatusEntry("S", "Label_TotalPrizeMoney", "credit_win", GameStatusImpl::TotalPrizeMoney),
        GameStatusEntry("S", "Label_TotalTuningCost", "credit_tune", GameStatusImpl::TotalTuningCost),
        GameStatusEntry("S", "Label_TotalDistance", "total_length", GameStatusImpl::TotalDistance),
        GameStatusEntry("S", "Label_TotalDrivingTime", "total_time", GameStatusImpl::TotalDrivingTime),
        GameStatusEntry("S", "Label_TotalPhotos", "photo", GameStatusImpl::TotalPhotos),
        GameStatusEntry("S", "Label_PaintItems", "paint_color", GameStatusImpl::PaintItems),
        GameStatusEntry("S", "Label_RacingGears", "racing_gear", GameStatusImpl::RacingGears),
        GameStatusEntry("L", "Label_LongestDistance", "", GameStatusImpl::LongestDistance),
        GameStatusEntry("L", "Label_Winningest", "", GameStatusImpl::Winningest),
        GameStatusEntry("L", "Label_Fastest", "", GameStatusImpl::Fastest),
        GameStatusEntry("L", "Label_FavoriteDealer", "", GameStatusImpl::FavoriteDealer),
        GameStatusEntry("L", "Label_HomeCourse", "", GameStatusImpl::HomeCourse),
    ];

    module ScrolledWindow::clip::space::Header
    {
        method onInitialize(context)
        {
            var residence = GAME_STATUS.user_profile.residence;
            self.VBox2::HBox::TextFace.text = residence.getPlayerFirstName() + " " + residence.getPlayerLastName();
            self.VBox2::TextFace.text= NP.getOnlineId();

            var region = "unknown";
            var region0 = PDINetwork.getRegionName();
            if (region0 != "")
                region = region0;

            var image_path = "/piece/flag_ranking/%s.img".format(region.downcase());
            self.VBox2::HBox::ImageFace.image_path = image_path;

            var dp = GAME_STATUS.user_profile.residence.getPlayer(0);

            self.ImageFaceCombo::Head.image_path = ThumbnailUtil::Avatar::getImagePathGT6(
                ThumbnailUtil::Avatar::Genre::COMBO,
                ThumbnailUtil::Avatar::Type::MET,
                dp.head_code, dp.head_color_code,
                nil, nil
            );

            self.ImageFaceCombo::Body.image_path = ThumbnailUtil::Avatar::getImagePathGT6(
                ThumbnailUtil::Avatar::Genre::COMBO,
                ThumbnailUtil::Avatar::Type::SUITS,
                nil, nil,
                dp.body_code, dp.body_color_code,
            );
        }
    }

    module ScrolledWindow::clip::space::GameStatus
    {
        method onInitialize(context)
        {
            var st = main::pdistd::ReadFile("/game_parameter/gt6/event/event_information.xml");
            var buf = st["buffer"]
            if (buf != nil)
            {
                var xml = main::pdistd::MXml();
                xml.parse(buf);
                var dom = xml.result;
                var dom_nodes = dom["event_information"][0];

                ROOT.total_trophy_count = dom_nodes["total_trophy_count"][0].value;
                ROOT.total_star_count = dom_nodes["total_star_count"][0].value;
                ROOT.total_license_trophy_count = dom_nodes["total_license_trophy_count"][0].value;
            }

            self.MBox.clearChildren(context);

            foreach (var entry in sGameStatusEntryList)
            {
                var w = hidden["Item%{entry.size}"].doCopy();
                w.setTitle(entry.label);
                w.setIcon(entry.image);

                var impl = entry.impl
                if (impl != nil && impl.defined("init"))
                {
                    impl["init"](context, w);
                }

                self.MBox.appendChild(context, w);
            }
        }
    }

    method onInitialize(context)
    {
        ContextMain.disableInput();

        var actor = self.OpenActor;
        actor.forward();
        actor.restart();

        actor.on_effect_end = function(context)
        {
            actor.on_effect_end = nil;

            PageUtil::invisibleUnderPages(context, self);

            ContextMain.enableInput();

            ROOT.closed = false;
        };

        self.CloseActor.stop();

        var adj = menu::MAdjustment();
        self.ScrolledWindow::VScrollArrow.adjustment = adj;
        self.ScrolledWindow::clip.v_adjustment = adj;
        self.ScrolledWindow::clip.scroll_mode = 2;
        self.ScrolledWindow::clip::space.y = 0.0;
        self.ScrolledWindow::clip.manual_target_y = 0.0;

        ButtonHelpGT6.set(context, [
            ["Close"],
        ]);

        Grim2Util::PUTLOG::CURRENT::status("status");
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        self.close(context);

        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        var scrollclip = self.ScrolledWindow::clip;
        var space = scrollclip.space;
        var line_height = hidden::ItemS.h;
        var status = 0;

        if (event.keysym == CELL_PAD_CTRL_L3_UP)
        {
            if (scrollclip.manualTargetIncY(line_height))
                status = 1;
        }

        if (event.keysym == CELL_PAD_CTRL_L3_DOWN)
        {
            if (scrollclip.manualTargetIncY(-line_height))
                status = 1;
        }

        return status;
    }

    module hidden
    {
        module ItemS
        {
            method onRealize(context)
            {
                self.HBox::TextFaceL.text = "";
                self.HBox::TextFaceC.text = "";
                self.HBox::TextFaceR.text = "";
                self.HBox::TextFaceCS.text = "";
                self.HBox::TextFaceCM.text = "";
            }

            method setTitle(label)
            {
                self.TextFace.text = manager.translate("GTModeProject::StatusRoot", label);
            }

            method setValue(label_l, label_c, label_r)
            {
                self.HBox::TextFaceL.text = label_l;
                self.HBox::TextFaceC.text = label_c;
                self.HBox::TextFaceR.text = label_r;
            }

            method setCreditValue(label_cm)
            {
                self.HBox::TextFaceL.text = manager.translate("Unit", "CREDIT");
                self.HBox::TextFaceCM.text = label_cm;
            }

            method setLicenseValue(label_cs)
            {
                self.HBox::TextFaceCS.text = label_cs;
            }

            method setIcon(image)
            {
                self.ImageFace.image_path = "/image/gt6/status/%s.dds".format(image);
            }
        }

        module ItemL
        {
            method onRealize(context)
            {
                self.HBox::TextFaceL.text = "";
                self.HBox::TextFaceC.text = "";
                self.HBox::TextFaceR.text = "";
            }

            method setTitle(label)
            {
                self.TextFace.text = manager.translate("GTModeProject::StatusRoot", label);
            }

            method setValue(label_l, label_c, label_r)
            {
                self.HBox::TextFaceL.text = label_l;
                self.HBox::TextFaceC.text = label_c;
                self.HBox::TextFaceR.text = label_r;
            }

            method setCarIcon(type)
            {
                self.ImageFace.image_path = GarageUtil::Thumbnail::getPathForStatus(type);
            }

            method setIcon(image_path)
            {
                self.ImageFace2.image_path = image_path;
            }

            method setValue2(label)
            {
                self.TextFace2.text = label;
            }
        }
    }

}