













module DLCPopup
{
    class DataProxy
    {
        method __init__(_type, _entitlement_id, _remaining_count, _can_install)
        {
            self.type = _type;
            self.entitlement_id = _entitlement_id;
            self.remaining_count = _remaining_count;
            self.can_install = _can_install;
        }


        attribute type;
        attribute entitlement_id;
        attribute remaining_count;
        attribute can_install;
    }

    hidden.visible = false;

    attribute popup;
    attribute closed;
    attribute invisible_pages;
    attribute data_list;
    attribute installed_map;
    attribute remaining_count_map;
    
    method open(context)
    {
        self.closed = false;
        self.popup = main::SequenceUtil::ModalPage(context, ROOT);
        self.popup.open();
        return true;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;
        putlogIf(context);

        if (self.invisible_pages != nil)
        {
            foreach (var page in self.invisible_pages)
            {
                page.visible = true;
            }

            self.invisible_pages = nil;
        }

        FadeActor.on_effect_end = function(context)
        {
            if (ROOT.popup != nil)
            {
                ROOT.popup.close();
                ROOT.popup = nil;
            }
        };
        FadeActor.out = true;
    }

    method putlogIf(context)
    {
        var target_list = [
            DLCUtil::TYPE::CAR_001,
            DLCUtil::TYPE::WEAR_001,
            DLCUtil::TYPE::PAINT_001,
            DLCUtil::TYPE::COURSE_001,

            DLCUtil::TYPE::CAR_002,

            DLCUtil::TYPE::CAR_003,
            DLCUtil::TYPE::COURSE_002,

            DLCUtil::TYPE::CAR_004,
            DLCUtil::TYPE::COURSE_003,

            DLCUtil::TYPE::CAR_005,
            DLCUtil::TYPE::CAR_006,
            DLCUtil::TYPE::CAR_007,

            DLCUtil::TYPE::CAR_008,
            
            DLCUtil::TYPE::CAR_009
        ];

        var need_putlog = false;

        foreach (|var key, var value| in self.installed_map)
        {
            if (value > 0)
            {
                need_putlog = true;
                break;
            }
        }

        if (need_putlog)
        {
            var data = Map();
            foreach (var type in [
                DLCUtil::TYPE::CAR_001,
                DLCUtil::TYPE::WEAR_001,
                DLCUtil::TYPE::PAINT_001,
                DLCUtil::TYPE::COURSE_001,

                DLCUtil::TYPE::CAR_002,

                DLCUtil::TYPE::CAR_003,
                DLCUtil::TYPE::COURSE_002,

                DLCUtil::TYPE::CAR_004,
                DLCUtil::TYPE::COURSE_003,

                DLCUtil::TYPE::CAR_005,
                DLCUtil::TYPE::CAR_006,
                DLCUtil::TYPE::CAR_007,

                DLCUtil::TYPE::CAR_008,
                
                DLCUtil::TYPE::CAR_009
            ])
            {
                data[type] = [self.remaining_count_map[type], self.installed_map[type]];
            }

            Grim2Util::PUTLOG::DLC::install(data[DLCUtil::TYPE::CAR_001],
                data[DLCUtil::TYPE::WEAR_001],
                data[DLCUtil::TYPE::PAINT_001],
                data[DLCUtil::TYPE::COURSE_001],
                data[DLCUtil::TYPE::CAR_002],
                data[DLCUtil::TYPE::CAR_003],
                data[DLCUtil::TYPE::COURSE_002],
                data[DLCUtil::TYPE::CAR_004],
                data[DLCUtil::TYPE::COURSE_003],
                data[DLCUtil::TYPE::CAR_005],
                data[DLCUtil::TYPE::CAR_006],
                data[DLCUtil::TYPE::CAR_007],
                data[DLCUtil::TYPE::CAR_008],
                data[DLCUtil::TYPE::CAR_009],
            );

            SaveDataUtilGT5::saveEveryWhere(context);
        }
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        ROOT.setFocus(Pane::Footer::Buttons::OK);
        return EVENTRESULT_FILTER;
    }

    method onInitialize(context)
    {
        self.invisible_pages = [];
        var page_list = context.getPageList();
        foreach (var page in page_list)
        {
            if (self != page && page.visible)
            {
                page.visible = false;
                self.invisible_pages.push(page);
            }
        }

        self.installed_map = [
            DLCUtil::TYPE::CAR_001 : 0,
            DLCUtil::TYPE::WEAR_001 : 0,
            DLCUtil::TYPE::PAINT_001 : 0,
            DLCUtil::TYPE::COURSE_001 : 0,
            DLCUtil::TYPE::CAR_002 : 0,
            DLCUtil::TYPE::CAR_003 : 0,
            DLCUtil::TYPE::COURSE_002 : 0,
            DLCUtil::TYPE::CAR_004 : 0,
            DLCUtil::TYPE::COURSE_003 : 0,
            DLCUtil::TYPE::CAR_005 : 0,
            DLCUtil::TYPE::CAR_006 : 0,
            DLCUtil::TYPE::CAR_007 : 0,
            DLCUtil::TYPE::CAR_008 : 0,
            DLCUtil::TYPE::CAR_009 : 0,
        ];

        self.remaining_count_map = [
            DLCUtil::TYPE::CAR_001 : 0,
            DLCUtil::TYPE::WEAR_001 : 0,
            DLCUtil::TYPE::PAINT_001 : 0,
            DLCUtil::TYPE::COURSE_001 : 0,
            DLCUtil::TYPE::CAR_002 : 0,
            DLCUtil::TYPE::CAR_003 : 0,
            DLCUtil::TYPE::COURSE_002 : 0,
            DLCUtil::TYPE::CAR_004 : 0,
            DLCUtil::TYPE::COURSE_003 : 0,
            DLCUtil::TYPE::CAR_005 : 0,
            DLCUtil::TYPE::CAR_006 : 0,
            DLCUtil::TYPE::CAR_007 : 0,
            DLCUtil::TYPE::CAR_008 : 0,
            DLCUtil::TYPE::CAR_009 : 0,
        ];

        Pane::Body::ScrollBar.adjustment = Pane::Body::ScrollBox.adjustment;
        updateStatus(context);

        ROOT.setFocus(Pane::Footer::Buttons::OK);
        return EVENTRESULT_FILTER;
    }

    method welcome(context)
    {
        DialogUtil::openInformationDialog(context, context.translate(ROOT, "DLC", "DLC_WELCOME"), nil, "piece/itemcategory/info_dlc.img");
        Pane.visible = true;
        updateStatus(context);
        GAME_STATUS.user_profile.game_flags.setFlag("INTRODUCTION", "DLC", true);
    }

    method onFinalize(context)
    {
        self.data_list = nil;
        self.installed_map = nil;
        self.remaining_count_map = nil;
        return EVENTRESULT_FILTER;
    }

    method createDataList(entitlement, count, can_install)
    {
        var list = [];

        for (var i = 0; i < count; ++i)
        {
            var can_install0 = can_install ? true : false;
            var data = DataProxy(entitlement.type, entitlement.entitlement_id, entitlement.remaining_count, can_install0);
            list.push(data);
        }

        return list;
    }

    method createData(type, entitlement_id)
    {
        return DataProxy(type, entitlement_id, 1, !DLCUtil::isInstalled(type));
    }

    method updateStatusByEntitlementAndAdditionalMulti(context, type)
    {
        var entitlement = DLCUtil::getEntitlement(type);
        var remaining_count = entitlement.remaining_count;
        if (remaining_count > 0)
        {
            var installed_count = entitlement.remaining_count - entitlement.consumed_count;
            var list0 = createDataList(entitlement, installed_count, true);
            self.data_list.append(list0);
            var list1 = createDataList(entitlement, entitlement.consumed_count, false);
            self.data_list.append(list1);
        }
        else if (DLCUtil::hasAdditional(type))
        {
            var data = createData(type, entitlement.entitlement_id);
            self.data_list.push(data);
            remaining_count = 1;
        }
        else
            ;

        self.remaining_count_map[type] = remaining_count;
    }

    method updateStatusByEntitlementAndAdditional1(context, type)
    {
        var entitlement_id = "%s-%s".format(pdiext::MProductInformation::GetServiceID(), type);
        if (DLCUtil::hasEntitlement(type))
        {
            var data = DataProxy(type, entitlement_id, 1, !DLCUtil::isInstalled(type));
            self.data_list.push(data);
            self.remaining_count_map[type] = 1;
        }
        else if (DLCUtil::hasAdditional(type))
        {
            var data = createData(type, entitlement_id);
            self.data_list.push(data);
            self.remaining_count_map[type] = 1;
        }
        else
        {

        }
    }

    method updateStatusByEntitlement(context, type)
    {
        var entitlement = DLCUtil::getEntitlement(type);
        var installed_count = entitlement.remaining_count - entitlement.consumed_count;

        var list0 = createDataList(entitlement, installed_count, true);
        self.data_list.append(list0);

        var list1 = createDataList(entitlement, entitlement.consumed_count, false);
        self.data_list.append(list1);

        self.remaining_count_map[type] = entitlement.remaining_count;
    }

    method updateStatusByAdditional(context, type)
    {
        var entitlement_id = "%s-%s".format(pdiext::MProductInformation::GetServiceID(), type);
        if (DLCUtil::hasAdditional(type))
        {
            var data = createData(type, entitlement_id);
            self.data_list.push(data);
            self.remaining_count_map[type] = 1;
        }
        else
            ;
    }

    method updateStatus(context)
    {
        self.data_list = [];

        updateStatusByAdditional(context, DLCUtil::TYPE::CAR_009);
        updateStatusByAdditional(context, DLCUtil::TYPE::CAR_008);
        updateStatusByAdditional(context, DLCUtil::TYPE::CAR_005);
        updateStatusByAdditional(context, DLCUtil::TYPE::CAR_006);
        updateStatusByAdditional(context, DLCUtil::TYPE::CAR_007);
        updateStatusByAdditional(context, DLCUtil::TYPE::CAR_004);
        updateStatusByAdditional(context, DLCUtil::TYPE::COURSE_003);
        updateStatusByAdditional(context, DLCUtil::TYPE::CAR_003);
        updateStatusByAdditional(context, DLCUtil::TYPE::COURSE_002);
        updateStatusByAdditional(context, DLCUtil::TYPE::CAR_002);
        updateStatusByEntitlementAndAdditionalMulti(context, DLCUtil::TYPE::CAR_001);
        updateStatusByEntitlement(context, DLCUtil::TYPE::WEAR_001);
        updateStatusByEntitlement(context, DLCUtil::TYPE::PAINT_001);
        updateStatusByEntitlementAndAdditional1(context, DLCUtil::TYPE::COURSE_001);

        Pane::TextFace.visible = self.data_list.size == 0;
        
        var listbox = Pane::Body::ScrollBox::ListBox;
        listbox.visible = self.data_list.size != 0;
        listbox.setItemTemplate(context, hidden::Item);
        listbox.setItemCount(self.data_list.size);

        for (var i = 0; i < self.data_list.size; ++i)
        {
            var item = listbox.getItemWidget(i, context);
            item.initialize(context, self.data_list[i]);
        }
    }

    module Pane
    {
        module Body::ScrollBox::ListBox
        {
            attribute skip;

            method onInitialize(context)
            {
                self.skip = true;
            }

            method onFocusNotify(context, new_index, old_index)
            {
                if (self.skip)
                {
                    self.skip = false;
                    return EVENTRESULT_FILTER;
                }

                var new_item = self.getItemWidget(new_index, context);
                if (new_item != nil)
                {
                    ROOT.setFocus(new_item);
                    new_item.Download.active = true;
                    new_item.Download::ImageFaceF::FaceColorInterpolator.restart();
                }

                var old_item = self.getItemWidget(old_index, context);
                if (old_item != nil)
                {
                    old_item.Download.active = false;
                    old_item.Download::ImageFaceF::FaceColorInterpolator.reset();
                }

                return EVENTRESULT_FILTER;
            }

            method onFocusEnter(context, event)
            {
                var item = self.getItemWidget(self.focus_index, context);
                if (item != nil)
                {
                    ROOT.setFocus(item);
                    item.Download.active = true;
                    item.Download::ImageFaceF::FaceColorInterpolator.restart();
                }

                return EVENTRESULT_FILTER;
            }

            method installCar(context, data)
            {
                var car_list = DLCUtil::getContents(data.type);
                var res = GameItemUtil::getCAR001(car_list, context);
                if (res == GameItemUtil::INSERT_SUCCESS)
                    DLCUtil::install(data.type);

                return res == GameItemUtil::INSERT_SUCCESS;
            }

            method installWear(context, data)
            {
                var wear_list = DLCUtil::getContents(data.type);
                var res = GameItemUtil::getWEAR001(wear_list, context);
                if (res == GameItemUtil::INSERT_SUCCESS)
                    DLCUtil::install(data.type);

                return res == GameItemUtil::INSERT_SUCCESS;
            }

            method installPaint(context, data)
            {
                var paint_list = DLCUtil::getContents(data.type);
                var res = GameItemUtil::getPAINT001(paint_list, context);
                if (res == GameItemUtil::INSERT_SUCCESS)
                    DLCUtil::install(data.type);

                return res == GameItemUtil::INSERT_SUCCESS;
            }

            method installCourse(context, data)
            {
                DLCUtil::install(data.type);
                return true;
            }

            method onActivate(context)
            {
                BalloonTip.reset_value();
                
                var item = self.getItemWidget(self.focus_index, context);
                if (!item.data.can_install)
                {
                    main::sound.play("disable");
                    return EVENTRESULT_FILTER;
                }

                main::sound.play("ok");

                var text = context.translate(ROOT, "DLC", "DO_YOU_INSTALL").build(
                    context.translate(ROOT, "DLC", "ENTITLEMENT_TITLE_%{item.data.type}")
                );

                if (!DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, text))
                    return EVENTRESULT_FILTER;

                if (!Grim2.isOutOfService())
                {
                    if (!LoginUtil::isOnline())
                    {
                        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "Network", "ERROR_ONLINE_FUNCTION"));
                        return EVENTRESULT_FILTER;
                    }
                
                    var mac_address = pdistd::MNetworkInterface::getMacAddress();
                    var can_install = false;
                    var request = Grim2.requestCheckEntitlement(mac_address, item.data.entitlement_id, item.data.remaining_count, function(context) {});
                    if (Grim2Util::__deprecated__join__(context, request))
                    {
                        var res = Grim2.decodeResult(request);
                        var can_install = res != 0;
                        if (!can_install)
                        {
                            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "DLC", "INSTALL_TOO_MUCH"));
                            return EVENTRESULT_FILTER;
                        }
                    } 
                    else
                    {
                        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "Network", "ERROR_ONLINE_FUNCTION"));
                        return EVENTRESULT_FILTER;
                    }
                }

                var result = false;
                var icon_path = "";
                switch (item.data.type)
                {
                    case DLCUtil::TYPE::CAR_001:
                    case DLCUtil::TYPE::CAR_002:
                    case DLCUtil::TYPE::CAR_003:
                    case DLCUtil::TYPE::CAR_004:
                    case DLCUtil::TYPE::CAR_005:
                    case DLCUtil::TYPE::CAR_006:
                    case DLCUtil::TYPE::CAR_007:
                    case DLCUtil::TYPE::CAR_008:
                    case DLCUtil::TYPE::CAR_009:
                        result = installCar(context, item.data);
                        icon_path = "piece/itemcategory/info_ticket.img";
                        break;

                    case DLCUtil::TYPE::WEAR_001:
                        result = installWear(context, item.data);
                        icon_path = "piece/itemcategory/info_special_wear_set.img";
                        break;

                    case DLCUtil::TYPE::PAINT_001:
                        result = installPaint(context, item.data);
                        icon_path = "piece/itemcategory/info_color_paint.img";
                        break;

                    case DLCUtil::TYPE::COURSE_001:
                    case DLCUtil::TYPE::COURSE_002:
                    case DLCUtil::TYPE::COURSE_003:
                        result = installCourse(context, item.data);
                        icon_path = "piece/itemcategory/info_event.img";
                        break;

                    default:
                        break;
                }

                if (result)
                {
                    var key = "MSG_SUCCESS_%{item.data.type}";
                    var text = "\n" + context.translate(ROOT, "DLC", key);
                    DialogUtil::openInformationDialog(context, text, nil, icon_path);
                    ++ROOT.installed_map[item.data.type];
                    item.data.can_install = false;
                    item.updateStatus(context, item.data.can_install);
                }
                else
                    ;

                return EVENTRESULT_FILTER;
            }
        }

        module Footer::Buttons::OK
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                ROOT.close(context);
                return EVENTRESULT_FILTER;
            }

            method onCancel(context)
            {
                main::sound.play("cancel");
                ROOT.close(context);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module Manual
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ManualProject::ManualPopup.open(context, "DownloadContents");
            return EVENTRESULT_FILTER;
        }
    }

    module hidden::Item
    {
        attribute data;
        
        method onInitialize(context)
        {
            Info::TextFaceTitle.text = "";
        }

        method updateStatus(context, can_install)
        {
            Info::Status::TextFaceInstalled.visible = !can_install;
            Info::Status::TextFaceNotInstalled.visible = can_install;
            self.Download::ImageFace.visible = can_install;
            self.Download::ImageFaceI.visible = !can_install;
        }

        method initialize(context, data)
        {
            self.data = data;

            var title = "ENTITLEMENT_TITLE_%{data.type}";
            Info::TextFaceTitle.text = context.translate(ROOT, "DLC", title);
            updateStatus(context, data.can_install);

            var path = "";

            switch (data.type)
            {
                case DLCUtil::TYPE::CAR_001:
                    path = "car_pack";
                    break;

                case DLCUtil::TYPE::WEAR_001:
                    path = "famous_gear_pack";
                    break;

                case DLCUtil::TYPE::PAINT_001:
                    path = "paint_pack";
                    break;

                case DLCUtil::TYPE::COURSE_001:
                    path = "course_pack";
                    break;
                    
                case DLCUtil::TYPE::CAR_002:
                    path = "car_pack2";
                    break;

                case DLCUtil::TYPE::CAR_003:
                    path = "car_pack3";
                    break;

                case DLCUtil::TYPE::COURSE_002:
                    path = "speed_test_pack";
                    break;

                case DLCUtil::TYPE::CAR_004:
                    path = "car_fr-s";
                    break;

                case DLCUtil::TYPE::COURSE_003:
                    path = "course_motegi";
                    break;

                case DLCUtil::TYPE::CAR_005:
                    path = "car_gt-r_n24";
                    break;

                case DLCUtil::TYPE::CAR_006:
                    path = "car_brz";
                    break;

                case DLCUtil::TYPE::CAR_007:
                    path = "car_hsv-010";
                    break;

                case DLCUtil::TYPE::CAR_008:
                    path = "car_c7_test";
                    break;

                case DLCUtil::TYPE::CAR_009:
                    path = "car_c7_proto";
                    break;

                default:
                    break;
            }

            self.Image::ImageFace.image_path = "piece/dlc/%{path}.img";
        }

        method onFocusEnter(context, event)
        {
            if (self.data.can_install)
                BalloonTip.set_value(context, Download, context.translate(ROOT, "DLC", "DOWNLOAD"), -10);

            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            if (self.data.can_install)
                BalloonTip.reset_value();

            return EVENTRESULT_FILTER;
        }
    }
}