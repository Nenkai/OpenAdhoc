module MessageProject::ImRoot
{
	static sId = -1;
	static sIsOpenNow = nil;
	
	

	function onLoad(context)
	{
		setDialogMoveActorV(SetupWindow);
	}

	function open(context, id, name)
	{
		sIsOpenNow = true;
	
		if (name == nil)
		{
			name = "";
		}
	
		sId = -1;
	
		var tbox = SetupWindow::vertical::tbox;
		tbox.clear();
	
		var pipe = main::network.imOpen();
		tbox.pipe = pipe;
	
		if (main::network.imHaveMessage())
		{
			|sId, name| = main::network.imGetUser();
		}
		else if (id != nil)
		{
			sId = id;
		}
	
		main::sound.play("ok");
		context.pushPage(ImRoot);
	
		if (sId < 0)
		{
			SetupWindow::Title::input.insensitive = false;
			ImRoot.setFocus(SetupWindow::Title::input);
		}
		else
		{
			SetupWindow::Title::input.value = name;
			SetupWindow::Title::input.insensitive = true;
			ImRoot.setFocus(SetupWindow::Input::input);
		}
	
		SetupWindow.actor.out = false;
		context.sync(0.25);
	
		var update_context = context.getUpdateContext();
		update_context.enterEventLoop();
	}

	function close(context)
	{
		main::sound.play("cancel");
	
		var name = SetupWindow::Title::input.value;
	
		if (name != "" && sId >= 0)
		{
			var endmes = context.translate(ImRoot, "OPPONENT_CLOSE").build(main::network.my_name);
			main::network.imSend(endmes, name, sId, "IM_LEFT");
		}
	
		main::network.imClose();
		sIsOpenNow = false;
	
		SetupWindow.actor.out = true;
		context.sync(0.25);
		context.closePage(ImRoot);
	
		var update_context = context.getUpdateContext();
		update_context.leaveEventLoop();
	}

	function isOpenNow()
	{
		return sIsOpenNow != nil && sIsOpenNow;
	}

	function forcedClose(context)
	{
		if (isOpenNow())
		{
			var event = main::menu::MScriptEvent(context, ImRoot, "onCancel");
			context.pushEvent(event);
		}
	}

	function onInitialize(context)
	{
	}
	
	function onFinalize(context)
	{
		sIsOpenNow = nil;
	}
	
	function onCancel(context)
	{
		close(context);
		return EVENTRESULT_FILTER;
	}

	function onKeyPress(context, event)
	{
		var keysym = event.keysym;
		switch (keysym)
		{
			case 65481:
			{
				close(context);
				return EVENTRESULT_FILTER;
			}
			case 65464:
			{
				var res = SetupWindow::vertical::tbox.scroll(-3);
				main::sound.play(res ? "cursor" : "disable");
				return EVENTRESULT_FILTER;
			}
			case 65458:
			{
				var res = SetupWindow::vertical::tbox.scroll(3);
				main::sound.play(res ? "cursor" : "disable");
				return EVENTRESULT_FILTER;
			}
		}
		return false;
	}
}

module MessageProject::ImRoot::SetupWindow::Input::input
{
	function onConfirmed(context, str)
	{
		var name = SetupWindow::Title::input.value;
	
		if (name == "")
		{
			openConfirmDialog(context, 0, context.translate(ImRoot, "INPUT_NAME_FIRST"));
			ImRoot.setFocus(SetupWindow::Title::input);
			return;
		}
	
		if (sId < 0)
		{
			var id = main::network.accountName2AccountID(name);
			var id2 = main::network.accountIsOnline(name);
	
			if (id < 0 || id2 < 0)
			{
				var s_name = SetupWindow::Title::input.sanitized_value;
				openConfirmDialog(context, 2, context.translate(ImRoot, "NO_SUCH_USER").build(s_name));
				ImRoot.setFocus(SetupWindow::Title::input);
				return;
			}
	
			sId = id;
		}
	
		var ret = main::network.imSend(str, name, sId);
	
		if (!ret)
		{
			openConfirmDialog(context, 0, context.translate(ImRoot, "FAILED_TO_SEND_MESSAGE"));
		}
	
		SetupWindow::Title::input.insensitive = true;
	}
}