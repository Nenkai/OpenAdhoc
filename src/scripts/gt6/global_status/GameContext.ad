

//---------------------------------------------------------------------------------------
// GameContext.ad
//
// Creates the save profile entity
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module GameContext
{
    function clearInitializer()
    {
        undef CreateStructure;
        undef Initialize;
        undef DefineMethod;
        undef clearInitializer;
    }

    function CreateStructure()
    {
        var st = STStructure("Impl");
        GameContext.defineModule(st);
        st.define("_car", STObject(gtengine::MCarParameter));
        st.define("course", STString(32));
        st.define("game_mode", STByte());
        st.define("_arcade_car", STArray(STObject(gtengine::MCarParameter), 2));
        st.define("arcade_course", STString(32));
        st.define("arcade_game_mode", STByte());
        st.define("arcade_consumption", STByte());
        st.define("arcade_difficulty", STByte());
        st.define("arcade_low_mu_type", STByte());
        st.define("arcade_behavior_damage_type", STByte());
        st.define("saved_driving_option", STArray(SavedDrivingOption::CreateStructure(), 2));
        st.define("special_save", STByte());
        st.define("latest_news_id", STInt());
        st.define("latest_tv_id", STInt());
        st.define("museum_index", STInt());
        st.define("exp_factor", STFloat());
        st.define("player_name_filtered", STByte());
        st.define("last_login", STULong());
        st.define("last_birthday_bonus", STULong());
        st.define("eula_currver", STInt());
        st.define("chat_restricted_eula", STByte());
        st.define("playing_event_id", STInt());
        st.define("playing_gp", STObject(gtengine::MGameParameter));
        st.define("playing_point_list", STArray(STArray(STShort(), 16), 32));
        
        var st_auto_message = STStructure();
        st_auto_message.define("entry", STString(100));
        st_auto_message.define("win", STString(100));
        st_auto_message.define("exit", STString(100));
        st.define("auto_message", st_auto_message);

        st.define("garage_new_mark", STULong());
        st.define("leavedemo_course_index", STInt());
        st.define("license_id", STShort());
        st.define("event_name", STString(32));
        st.define("career_mode_type", STByte());
        st.define("academy_eula_scea", STByte());
        st.define("academy_eula_scee", STByte());
        st.define("academy_eula_sceh", STByte());
        
        var st_community = STStructure();
        st_community.define("timeline_me", STByte());
        st_community.define("timeline_friend", STByte());
        st_community.define("timeline_club", STByte());
        st_community.define("timeline_news", STByte());
        st.define("community", st_community);

        var st_academy = STStructure();
        st_academy.define("eula_scea", STByte());
        st_academy.define("eula_scee", STByte());
        st_academy.define("eula_scej", STByte());
        st_academy.define("eula_sceh", STByte());
        st.define("academy2015", st_academy);

        st.define("coursemaker_course_id", STULong());
        st.define("coursemaker_user_id", STString(32));

        DefineMethod();

        return st;
    }

    function Initialize(instance)
    {
        instance._car = gtengine::MCarParameter();
        instance.course = "suzuka";

        for (var i = 0; i < 2; i++)
            instance._arcade_car[i] = gtengine::MCarParameter();
        
        instance.arcade_course = "";
        instance.arcade_game_mode = -1;
        instance.arcade_consumption = false;
        instance.arcade_difficulty = 0;
        instance.arcade_low_mu_type = gtengine::LowMuType::MODERATE;
        instance.arcade_behavior_damage_type = gtengine::BehaviorDamageType::WEAK;

        for (var i = 0; i < 2; i++)
            SavedDrivingOption::Initialize(instance.saved_driving_option[i]);

        instance.special_save = false;
        instance.latest_news_id = 0;
        instance.latest_tv_id = 0;
        instance.museum_index = -1;
        instance.eula_currver = 0;
        instance.chat_restricted_eula = false;
        instance.exp_factor = 1.0;
        instance.last_login = 0;
        instance.last_birthday_bonus = 0;
        instance.player_name_filtered = false;
        instance.playing_event_id = 0;
        instance.playing_gp = nil;
        
        for (var i = 0; i < instance.playing_point_list.size; ++i)
        {
            for (var j = 0; j < instance.playing_point_list[i].size; ++j)
            {
                instance.playing_point_list[i][j] = -1;
            }
        }

        instance.auto_message.entry = main::manager.translateAtCursorProject("AutoMessage", "ENTRY");
        instance.auto_message.win = main::manager.translateAtCursorProject("AutoMessage", "WIN");
        instance.auto_message.exit = main::manager.translateAtCursorProject("AutoMessage", "EXIT");

        instance.garage_new_mark = 0;
        instance.leavedemo_course_index = 0;
        instance.license_id = -1;
        instance.event_name = "";
        instance.career_mode_type = -1;
        instance.academy_eula_scea = 1;
        instance.academy_eula_scee = 1;
        instance.academy_eula_sceh = 1;
        instance.community.timeline_me = 1;
        instance.community.timeline_friend = 1;
        instance.community.timeline_club = 1;
        instance.community.timeline_news = 1;
        instance.academy2015.eula_scea = 1;
        instance.academy2015.eula_scee = 1;
        instance.academy2015.eula_scej = 1;
        instance.academy2015.eula_sceh = 1;
        instance.coursemaker_course_id = 0;
        instance.coursemaker_user_id = 0;
    }

    function DefineMethod()
    {
        module Impl
        {
            import __toplevel__::main;

            method setCar(cp)
            {
                self._car.deepCopy(cp);
            }

            method getCar()
            {
                return self._car;
            }

            method setArcadeCar(cp, player_no)
            {
                if (player_no == nil)
                    player_no = 0;

                self._arcade_car[player_no].deepCopy(cp);
                if (cp.rentacar && cp.getCarCode() != gtengine::MSpecDB::NO_CODE)
                    self._arcade_car[player_no].ownArcadePartsAll();
            }

            method getArcadeCar(player_no)
            {
                if (player_no == nil)
                    player_no = 0;
                
                return self._arcade_car[player_no];
            }

            method startChampionShip(event_id, gp)
            {
                self.playing_event_id = event_id;
                self.playing_gp = gp;

                for (var i = 0; i < self.playing_point_list.size; ++i)
                {
                    for (var j = 0; j < self.playing_point_list[i].size; ++j)
                        self.playing_point_list[i][j] = 0;
                }
            }

            method endChampionShip()
            {
                self.playing_event_id = -1;
                self.playing_gp = nil;

                for (var i = 0; i < self.playing_point_list.size; ++i)
                {
                    for (var j = 0; j < self.playing_point_list[i].size; ++j)
                        self.playing_point_list[i][j] = -1;
                }
            }

            method getBonusRatio()
            {
                var bonus_ratio = nil;
                if (LoginUtil::isOnline())
                {
                    if (self.exp_factor == nil || self.exp_factor < 1.0)
                        ;
                    else 
                    {
                        if (self.exp_factor > 2.0)
                        {
                            Grim2Util::PUTLOG::LOGINBONUS::outlier(self.exp_factor);
                            self.exp_factor = 1.0;
                        }
                        else
                            bonus_ratio = self.exp_factor;
                    }
                }

                return bonus_ratio;
            }

            method apply()
            {

            }
        }
    }
}
