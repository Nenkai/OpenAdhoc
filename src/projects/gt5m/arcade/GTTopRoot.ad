//---------------------------------------------------------------------------------------
// GTTopRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ROOT
{
    OpenActionA.visible = false;
    OpenActionB.visible = false;
    CloseActionA.visible = false;

    attribute cancel_opening_animation = false;

    module ICON
    {
        static UPPER = 16;
        static LOWER = 32;
    }

    method onInitialize(context)
    {
        self.cancel_opening_animation = false;
        ROOT.wellcome_message.visible = false; // Typo in original

        ActorUtil::ResetInterpolators(Veil, true, true);

        var my_cash = gGameStatus.user_profile.cash;
        Header::Cash::TextFace.text = main::pdiext::MMisc::GetMoneyString(my_cash);
        var game_day = gGameStatus.user_profile.calendar.getGameDay();
        Header::Date::TextFace.text = context.translate(ROOT, "Arcade", "GAME_DAY").build(game_day + 1);

        IconBox.initialize(context);
        IconBox.set_focus_index(game_context().gametop_focus_index);

        bg.visible = true;
        bg_b::Effect.reverse = false;
        bg_b::Effect.reset();

        credit::Effect.reverse = false;
        credit::Effect.reset();

        Header::Effect.reverse = false;
        Header::Effect.reset();

        Save::Effect.reverse = false;
        Save::Effect.reset();

        var not_first_play = EventFlagsUtil::isEventFlagON(gGameStatus, EventFlagsUtil::FLAGS::IS_NOT_FIRST_PLAY);
        var msg_already_displayed = EventFlagsUtil::isMessageFlagON(gGameStatus, EventFlagsUtil::FLAGS::IS_NOT_FIRST_PLAY);
        if (!not_first_play && !msg_already_displayed)
        {
            self.cancel_opening_animation = true;
            context.pushEvent(main::menu::MFunctionEvent(onWellcomeMessage, context));

            EventFlagsUtil::setEventFlagON(gGameStatus,
                                            EventFlagsUtil::FLAGS::HAVE_NOT_GOT_CAR);
        } 
        else 
        {
            if (game_option().auto_save && game_context().need_save)
            {
                self.cancel_opening_animation = true;
                context.pushEvent(main::menu::MFunctionEvent(do_auto_save, context));
            }
        }

        MessageBox.initialize(context);

        MessageBox.close(context, true);
        start_close_animation(context, true);

        if (SoundUtil::BGMIsPlaying())
            SoundUtil::BGMFadeout(1.0);
        else
            SoundUtil::BGMPlayGroup('menu', "title");

            ROOT.setFocus(ROOT::IconBox.get_focus_widget());
    }

    method onWellcomeMessage(context)
    {
        if (!ROOT.defined("watcher"))
        {
            MessageBox.close(context, true);
            start_close_animation(context, true);

            do_auto_save(context, true);

            context.cursor_visible = false;
            ROOT.wellcome_message.visible = true;
            ROOT.defineAttribute('watcher');
            ROOT.watcher = WatcherUtil::Create(context, onWellcomeMessage, 60 * 5);
            PlayNarration("g00", 1.0);
            context.event_mask &= ~1;
            return;
        }

        if (ROOT.watcher != nil)
        {
            WatcherUtil::Delete(ROOT.watcher);
            ROOT.removeStatic('watcher');
        }

        EventFlagsUtil::setMessageFlagON(gGameStatus, EventFlagsUtil::FLAGS::IS_NOT_FIRST_PLAY);

        self.wellcome_message.visible = false;
        self.cancel_opening_animation = false;

        start_open_animation(context);
        MessageBox.open(context);

        var focus_w = ROOT.getFocusWidget();
        context.pushEvent(main::menu::MFocusEnterEvent(context, focus_w));

        context.cursor_visible = true;
    }

    method onFinalize(context)
    {
        StopStream(0.0);
        SoundUtil::BGMFadeout(0.5);
    }

    method onPageInStart(context)
    {
        if (self.cancel_opening_animation)
            return;

        start_open_animation(context);
    }

    method onPageInEnd(context)
    {
        BalloonTip.initialize(context);

        if (!SoundUtil::BGMIsPlaying())
            SoundUtil::BGMPlayGroup('menu', "title");

        if (self.cancel_opening_animation)
            return;

        MessageBox.open(context);
    }

    method onCancel(context)
    {
        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        var state = context.getUpdateContext().getPadButtonState(0);
        if ((state & 0x800) != 0 && // R
            (state & 0x8000) != 0)  // START + SELECT
        {
            if (sPattern != P2)
            {
                sPattern = P2;
                sPCount = 0;
            }


            if (check_pattern(context, event))
            {
                set_p2(context);
                main::SequenceUtil::startProject(context, "arcade", "boot");
                return EVENTRESULT_FILTER;
            }
        }
        else if ((state & 0x100) != 0 && // L
                 (state & 0x8000) != 0)  // START + SELECT
        {
            if (ROOT.sPattern != P3)
            {
                sPattern = P3;
                sPCount = 0;
            }

            if (check_pattern(context, event))
            {
                set_p3(context);
                main::SequenceUtil::startProject(context, "arcade", "boot");
                return EVENTRESULT_FILTER;
            }
        }
        else
        {
            sPattern = nil;
            sPCount = 0;
        }

        return EVENTRESULT_CONTINUE;
    }

    method start_open_animation(context, warp = false)
    {
        BalloonTip.reset_value();

        IconBox.start_open_animation(context, warp);
        IconBox.insensitive = false;

        credit::Effect.reverse = false;
        credit::Effect.restart();
        if (warp)
            credit::Effect.warp();

        Header::Effect.reverse = false;
        Header::Effect.restart();
        if (warp)
            Header::Effect.warp();

        Save::Effect.reverse = false;
        Save::Effect.restart();
        if (warp)
            Save::Effect.warp();
        Save.insensitive = false;

        bg_b::Effect.reverse = false;
        bg_b::Effect.restart();
        if (warp)
            bg_b::Effect.warp();
    }

    method start_close_animation(context, warp = false)
    {
        BalloonTip.reset_value();

        IconBox.start_close_animation(context, warp);
        IconBox.insensitive = true;

        credit::Effect.reverse = true;
        credit::Effect.restart();
        if (warp)
            credit::Effect.warp();

        Header::Effect.reverse = true;
        Header::Effect.restart();
        if (warp)
            Header::Effect.warp();

        Save::Effect.reverse = true;
        Save::Effect.restart();
        if (warp)
            Save::Effect.warp();
        Save.insensitive = true;

        bg_b::Effect.reverse = true;
        bg_b::Effect.restart();
        if (warp)
            bg_b::Effect.warp();
    }

    method widget_center(w)
    {
        var center_x = w.sx + (w.w * 0.5);
        var center_y = w.sy + (w.h * 0.5);
        return [center_x , center_y];
    }

    method saveImpl(context)
    {
        main::GlobalStatus::checkin(gGameStatus);

        var data = main::GlobalStatus::getToBeSavedData();


        gGameStatus = main::GlobalStatus::checkout();

        var savedata = SaveDataUtilPSP::GameDataForSaveSilent();
        savedata.title = context.translate(ROOT, "SaveDataPSP", "GAME_TITLE_WITHIN_128BYTES");
        savedata.description = context.translate(ROOT, "SaveDataGT5M", "GAME_SUBTITLE_WITHIN_128BYTES");
        savedata.savedataTitle = context.translate(ROOT, "SaveDataGT5M", "GAME_DESCRIPTION_WITHIN_1024BYTES");
        savedata.buf = data;

        var res = SaveDataUtilPSP::save(context, savedata, ROOT);
        return res;
    }

    method do_save(context)
    {
        setCursor(context, "wait");

        DialogUtil::openConfirmExecDialog(context,
                                          nil,
                                          context.translate(ArcadeProject, "SaveDataPSP", "NOW_SAVING"),
                                          context.translate(ArcadeProject, "SaveDataPSP", "SAVE_DONE"),
                                          context.translate(ArcadeProject, "SaveDataPSP", "SAVE_NOT_DONE"),
                                          saveImpl,
                                          nil,
                                          2);

        setCursor(context, "default");
    }

    method do_auto_save(context, no_animation = false)
    {
        if (!game_option().auto_save)
            return;

        if (!game_context().need_save)
            return;

        if (!no_animation)
        {
            MessageBox.close(context, true);
            ROOT.start_close_animation(context, true);
        }

        game_context().need_save = false;
        do_save(context);

        if (!no_animation)
        {
            ROOT.start_open_animation(context);
            MessageBox.open(context);
        }
    }

    method on_arcade_check(context)
    {
        if (gGameStatus.config.limited_mode & IconBox::DISABLE_FLAG::arcade)
        {
            main::sound.play("cancel");
            BalloonTip.reset_value();
            var txt = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, txt);
            return false;
        }

        var num = game_garage().getMyAllCarCount();
        if (num <= 0)
        {
            main::sound.play("cancel");

            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                                          context.translate(ROOT, "YOU_DONOT_HAVE_CARS"));
            return false;
        }

        main::sound.play("start");
        return true;
    }
    method on_arcade(context)
    {
        TopRoot.sOpeningAnimation = true;
        StartPageIn_XEffect(context, ROOT, TopRoot);
    }

    method on_adhoc_check(context)
    {
        if (gGameStatus.config.limited_mode & IconBox::DISABLE_FLAG::adhoc)
        {
            main::sound.play("cancel");
            BalloonTip.reset_value();
            var txt = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, txt);
            return false;
        }

        main::sound.play("start");
        return true;
    }

    method on_adhoc(context)
    {
        BranchRoot.setOpenMode(BranchRoot::MODE::ADHOC);
        StartPageIn_XEffect(context, ROOT, BranchRoot);
    }

    method on_trade_and_share(context)
    {
        main::sound.play("ok");
        BranchRoot.setOpenMode(BranchRoot::MODE::TRADE_AND_SHARE);
        BranchRoot.setFocusItem("trade");
        StartPageIn_XEffect(context, ROOT, BranchRoot);
    }

    method on_adhoc_battle(context)
    {
        var num = game_garage().getMyAllCarCount();
        if (num <= 0)
        {
            main::sound.play("cancel");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "YOU_DONOT_HAVE_CARS"));
            return;
        }

        main::sound.play("ok");
        SelectRoomRoot.setMode(SelectRoomRoot::MODE_BATTLE);
        StartPageIn_XEffect(context, ROOT, SelectRoomRoot);
    }

    method on_trade(context)
    {
        var garage = gGameStatus.user_profile.garage;
        var num = garage.getListupCount(true);
        if (num <= 0)
        {
            main::sound.play("cancel");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "YOU_DONOT_HAVE_TRADE_CARS"));
            return;
        }

        main::sound.play("ok");
        SelectRoomRoot.setMode(SelectRoomRoot::MODE_TRADE);
        StartPageIn_XEffect(context, ROOT, SelectRoomRoot);
    }

    method on_give(context)
    {
        var garage = gGameStatus.user_profile.garage;

        var num = garage.getListupCount(false, true);
        if (num <= 0)
        {
            main::sound.play("cancel");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "YOU_DONOT_HAVE_COPYABLE_CARS"));
            return;
        }

        main::sound.play("ok");
        SelectRoomRoot.setMode(SelectRoomRoot::MODE_GIVE);
        StartPageIn_XEffect(context, ROOT, SelectRoomRoot);
    }

    method on_take(context)
    {
        main::sound.play("ok");
        SelectRoomRoot.setMode(SelectRoomRoot::MODE_TAKE);
        StartPageIn_XEffect(context, ROOT, SelectRoomRoot);
    }

    method on_dealer_check(context)
    {
        if (gGameStatus.config.limited_mode & IconBox::DISABLE_FLAG::dealer)
        {
            main::sound.play("cancel");
            BalloonTip.reset_value();
            var txt = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, txt);
            return false;
        }

        main::sound.play("start");
        return true;
    }

    method on_dealer(context)
    {
        StartPageIn_XEffect(context, ROOT, DealerRoot);
    }

    method on_license_check(context)
    {
        if (gGameStatus.config.limited_mode & IconBox::DISABLE_FLAG::license)
        {
            main::sound.play("cancel");
            BalloonTip.reset_value();
            var txt = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, txt);
            return false;
        }

        main::sound.play("start");
        return true;
    }

    method on_license(context)
    {
        LicenseMapRoot.open(context, LicenseUtil::CATEGORY::A, true);
    }

    method on_save(context, no_animation = false)
    {
        if (!no_animation)
        {
            MessageBox.close(context);
            ROOT.start_close_animation(context);
        }

        do_save(context);

        if (!no_animation)
        {
            ROOT.start_open_animation(context);
            MessageBox.open(context);
        }
    }

    method on_load(context)
    {
        main::sound.play("ok");
        var data = SaveDataUtilPSP::GameDataForLoad();
        var load_result = SaveDataUtilPSP::load(context, data);
        if (load_result != nil)
        {
            var buf = load_result[0];
            if (buf != nil)
            {
                main::GlobalStatus::checkin(gGameStatus);
                main::GlobalStatus::setLoadedData(buf);
                gGameStatus = main::GlobalStatus::checkout();

                SequenceUtil::startProject(context, "arcade");
            }
        }
    }

    method on_theater_check(context)
    {
        if (gGameStatus.config.limited_mode & IconBox::DISABLE_FLAG::theater)
        {
            main::sound.play("cancel");
            BalloonTip.reset_value();
            var txt = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, txt);
            return false;
        }

        main::sound.play("start");
        return true;
    }

    method on_theater(context)
    {
        if (gGameStatus.user_profile.have_seen_ed_movie)
            BranchRoot.setOpenMode(BranchRoot::MODE::THEATER_ENDING);
        else
            BranchRoot.setOpenMode(BranchRoot::MODE::THEATER);

        BranchRoot.setFocusItem("replay");
        StartPageIn_XEffect(context, ROOT, BranchRoot);
    }

    method on_replay(context)
    {
        main::sound.play("ok");
        ReplayRoot.setMode(ReplayRoot::MODE::ARCADE);
        StartPageIn_XEffect(context, ROOT, ReplayRoot);
    }

    method on_license_replay(context)
    {
        main::sound.play("ok");
        ReplayRoot.setMode(ReplayRoot::MODE::LICENSE);
        StartPageIn_XEffect(context, ROOT, ReplayRoot);
    }

    method getOpeningMoviePath(context)
    {
        var region = main::pdiext::MProductInformation::GetGameRegionCode();
        var path = "gt5m/opening";
        switch (region)
        {
            case "jp":
                path = "gt5m/opening";
                break;
            case "us":
                path = "gt5m/opening_us";
                break;
            case "uk":
                path = "gt5m/opening_us";
                break;
            case "tw":
                path = "gt5m/opening";
                break;
        }
        return path;
    }

    method on_play_movie_opening(context)
    {
        main::sound.play("ok");
        StartPageIn_XEffect(context, ROOT, nil);
        main::GameSequence::setPrevPage(context.getRootWindow().name, "%{BranchRoot.getOpenMode()}:play_movie_opening");
        SequenceUtil::startProject(context, "play_movie", getOpeningMoviePath(context));
    }

    method on_play_movie_ending(context)
    {
        main::sound.play("ok");
        StartPageIn_XEffect(context, ROOT, nil);
        main::GameSequence::setPrevPage(context.getRootWindow().name, "%{BranchRoot.getOpenMode()}:play_movie_ending");
        SequenceUtil::startProject(context, "play_movie", getEndingMoviePath(context));
    }

    method on_play_movie_pv(context)
    {
        main::sound.play("ok");
        StartPageIn_XEffect(context, ROOT, nil);
        main::GameSequence::setPrevPage(context.getRootWindow().name, "%{BranchRoot.getOpenMode()}:play_movie_pv");
        SequenceUtil::startProject(context, "play_movie", "gt5m/pv");
    }

    method on_manual_check(context)
    {
        if (gGameStatus.config.limited_mode & IconBox::DISABLE_FLAG::manual)
        {
            main::sound.play("cancel");
            BalloonTip.reset_value();
            var txt = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, txt);
            return false;
        }

        main::sound.play("start");
        return true;
    }

    method on_manual(context)
    {
        StartPageIn_XEffect(context, ROOT, nil);
        SequenceUtil::startProject(context, "manual", "arcade");
    }

    method on_option_check(context)
    {
        if (gGameStatus.config.limited_mode & IconBox::DISABLE_FLAG::option)
        {
            main::sound.play("cancel");
            BalloonTip.reset_value();
            var txt = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, txt);
            return false;
        }

        main::sound.play("start");
        return true;
    }

    method on_option(context)
    {
        StartPageIn_XEffect(context, ROOT, nil);
        SequenceUtil::startProject(context, "option", "arcade");
    }

    method on_status_check(context)
    {
        if (gGameStatus.config.limited_mode & IconBox::DISABLE_FLAG::status)
        {
            main::sound.play("cancel");
            BalloonTip.reset_value();
            var txt = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, txt);
            return false;
        }

        main::sound.play("start");
        return true;
    }

    method on_status(context)
    {
        StartPageIn_XEffect(context, ROOT, StatusRoot);
    }

    method on_ranking(context)
    {
        StartPageIn_XEffect(context, ROOT, nil);
        SequenceUtil::startProject(context, "ranking", "arcade");
    }

    method on_gamedata_edit(context)
    {
        var insensitive_widgets = [
            IconBox,
            Save
        ];
        GameDataEditRoot.open(context, insensitive_widgets);
    }

    module IconBox
    {
        module DISABLE_FLAG
        {
            static arcade  = 1 << 0;
            static adhoc   = 1 << 1;
            static dealer  = 1 << 2;
            static license = 1 << 3;
            static status  = 1 << 4;
            static theater = 1 << 5;
            static option  = 1 << 6;
            static manual  = 1 << 7;
        }

        attribute current_focus = nil;

        method initialize(context)
        {
            for (var i = 0, it = IconBox.first; it != nil; i++, it = it.next_widget)
            {
                if (!it.defined("code"))
                    it.defineAttribute('code');

                var half_size = (IconBox.countChild() * 0.5).toInt();
                if (i < half_size)
                    it.code = ICON::UPPER | i;
                else
                    it.code = ICON::LOWER | (i - half_size);

                if (!it.defined("index"))
                    it.defineAttribute('index');

                if (!it.defined("on_active_func"))
                    it.defineAttribute('on_active_func');
                it.on_active_func = ROOT["on_%{it.name}"];

                if (!it.defined("on_active_check_func"))
                    it.defineAttribute('on_active_check_func');
                it.on_active_check_func = ROOT["on_%{it.name}_check"];

                it.index = i;
                it.Icon::Effect.start_value = [it.sx, it.sy];
                it.Icon::Effect.reverse = false;
                it.Icon::Effect.reset();
                it.Icon::Body::Effect.reverse = false;
                it.Icon::Body::Effect.reset();
                it.Icon::Body::board_i::Effect.reverse = true;
                it.Icon::Body::board_i::Effect.reset();
                it.Icon::Shadow::Effect.reverse = false;
                it.Icon::Shadow::Effect.reset();
                it.Icon::Shadow::board_shadow_i::Effect.reverse = true;
                it.Icon::Shadow::board_shadow_i::Effect.reset();

                it.Icon.visible = false;
            }

            self.current_focus = 0;
        }

        method finalise(context)
        {
            for (var i = 0, it = IconBox.first; it != nil; i++, it = it.next_widget)
            {
                it.index = nil;
                it.code = nil;
                it.on_active_func = nil;
            }
        }

        method onActivate(context)
        {
            var w = IconBox.get_focus_widget();

            var check_ok = true;
            if (w.on_active_check_func != nil)
                check_ok = w.on_active_check_func(context);

            if (check_ok)
            {
                MessageBox.close(context);
                ROOT.start_close_animation(context);

                if (w.on_active_func != nil)
                    w.on_active_func(context);

                game_context().gametop_focus_index = w.index;
            }

            return EVENTRESULT_FILTER;
        }

        method set_balloon_tip(context, focus_w)
        {
            var name = focus_w.name.upcase();
            var txt = context.translate(ROOT, "Arcade", name);
            BalloonTip.set_value(context, focus_w.Icon, txt, 18.5);
        }

        method onFocusEnter(context, event)
        {
            var w = event.widget;

            for (var i = 0, it = IconBox.first; it != nil; i++, it = it.next_widget)
            {
                if (w.defined("index") && w.index == it.index)
                {
                    self.current_focus = it.index;
                    break;
                }
            }


            if (context.event_mask & 1)
                set_balloon_tip(context, w);

            return EVENTRESULT_FILTER;
        }

        method set_focus_index(i)
        {
            if (i < 0)
                i = 0;

            self.current_focus = i;
        }

        method get_focus_widget()
        {
            for (var i = 0, it = IconBox.first; nil != it; i++, it = it.next_widget)
            {
                if (it.index == self.current_focus)
                    return it;
            }

            return nil;
        }

        method start_open_animation(context, warp = false)
        {
            context.event_mask &= ~1;
            context.filterKeyEvent();

            var base_w = get_focus_widget();

            var base_point = base_w.code & 0xF;
            var base_up_low = base_w.code & 0xF0;
            var composite;

            if (base_point == 0 || base_point == 3)
                composite = OpenActionA;
            else 
                composite = OpenActionB;

            var base_speed = AdjustValue::base_speed.getChild(0).name.toFloat();
            var up_low_difference = AdjustValue::up_low_difference.getChild(0).name.toFloat();

            |composite.cx| = widget_center(base_w);

            var base_distance;

            {
                |var dst_x, var dst_y| = widget_center(composite.U_C_0);
                |var src_x, var src_y| = widget_center(composite);

                var dx = Math::abs(dst_x - src_x);
                var dy = Math::abs(dst_y - src_y);
                base_distance = Math::sqrt((dx * dx) + (dy * dy));
            }

            var longest_time = 0;
            var longest_animation_widget;

            for (var it = IconBox.first; nil != it; it = it.next_widget)
            {
                var point = it.code & 0xF;
                var up_low = it.code & 0xF0;
                var widget_name = "";
                if (point == base_point)
                {
                    widget_name = "C_0";
                    it.Icon::Effect.total_time = base_speed;
                }
                else if (point < base_point)
                {
                    var set_point = base_point - point;
                    widget_name = "L_%{set_point}";
                }
                else if (base_point < point)
                {
                    var set_point = point - base_point;
                    widget_name = "R_%{set_point}";
                }

                if (up_low == ICON::UPPER)
                    widget_name = "U_" + widget_name;
                else
                    widget_name = "L_" + widget_name;

                |var dst_x, var dst_y| = widget_center(composite[widget_name]);
                |var src_x, var src_y| = widget_center(it);

                var dx = Math::abs(dst_x - src_x);
                var dy = Math::abs(dst_y - src_y);
                var distance = Math::sqrt((dx * dx) + (dy * dy));

                var base_time = up_low == base_up_low ? base_speed : base_speed + up_low_difference;
                var ratio = distance / base_distance;
                it.Icon::Effect.total_time = base_time * (ratio * ratio);
                it.Icon::Effect.end_value = [composite[widget_name].x, composite[widget_name].y];
                it.Icon::Effect.reverse = true;
                it.Icon::Effect.restart();
                it.Icon.visible = true;
                if (warp)
                    it.Icon::Effect.warp();

                if (longest_time < it.Icon::Effect.total_time)
                {
                    longest_time = it.Icon::Effect.total_time;
                    longest_animation_widget = it;
                }
            }

            if (longest_animation_widget != nil)
            {
                longest_animation_widget.Icon::Effect.on_effect_end = function (context)
                {
                    context.event_mask |= 1;

                    var focus_w = ROOT.getFocusWidget();
                    context.pushEvent(main::menu::MFocusEnterEvent(context, focus_w));

                    longest_animation_widget.Icon::Effect.on_effect_end = nil;
                }
            }
        }

        method start_close_animation(context, warp = false)
        {
            var composite = CloseActionA;

            var close_speed = AdjustValue::close_speed.getChild(0).name.toFloat();

            for (var it = IconBox.first; nil != it; it = it.next_widget)
            {
                var point = it.code & 0xF;
                var widget_name = "";
                
                if ((it.code & 0xF0) == ICON::UPPER)
                    widget_name = "U_" + point;
                else
                    widget_name = "L_" + point;

                it.Icon::Effect.total_time = close_speed;
                it.Icon::Effect.end_value = [composite[widget_name].x, composite[widget_name].y];
                it.Icon::Effect.reverse = false;
                it.Icon::Effect.restart();
                if (warp)
                    it.Icon::Effect.warp();
            }
        }
    }

    module MessageBox
    {
        attribute message_list = nil;
        attribute message_index = nil;
        attribute prev_icon = nil;
        attribute already_send_msg_lets_buy_car = nil;
        attribute already_send_msg_lets_play_arcade = nil;
        attribute already_send_msg_enable_ending = nil;

        function canDisplayMessage(game_status, flag)
        {
            var event_flag = EventFlagsUtil::isEventFlagON(gGameStatus, flag); // NOTE: Typo in original - game_status is not used
            var message_flag = EventFlagsUtil::isMessageFlagON(gGameStatus, flag);

            return event_flag && !message_flag;
        }

        method count_msg_lets_buy_car()
        {
            if (canDisplayMessage(gGameStatus, EventFlagsUtil::FLAGS::HAVE_NOT_GOT_CAR))
            {
                if (!already_send_msg_lets_buy_car &&
                    game_context().msg_count_lets_buy_car < 10)
                {
                    game_context().msg_count_lets_buy_car++;
                    already_send_msg_lets_buy_car = true;
                }
            }

        }

        method count_msg_lets_play_arcade()
        {
            if (canDisplayMessage(gGameStatus, EventFlagsUtil::FLAGS::GET_FIRST_CAR))
            {
                if (!already_send_msg_lets_play_arcade && game_context().msg_count_lets_play_arcade < 5)
                {
                    game_context().msg_count_lets_play_arcade++;
                    already_send_msg_lets_play_arcade = true;
                }
            }

        }

        method count_msg_enable_ending()
        {
            if (canDisplayMessage(gGameStatus, EventFlagsUtil::FLAGS::CAN_WATCH_THE_ED_MOVIE))
            {
                if (!already_send_msg_enable_ending && game_context().msg_count_enable_ending < 5)
                {
                    game_context().msg_count_enable_ending++;
                    already_send_msg_enable_ending = true;
                }
            }

        }

        method initialize(context)
        {
            Effect.reverse = false;
            Effect.reset();
            ToolTipFace.remove();
            ToolTipFace.action_type = 4;

            self.message_list = [];
            self.message_index = 0;
            self.prev_icon = "";

            self.already_send_msg_lets_buy_car = false;
            self.already_send_msg_lets_play_arcade = false;
            self.already_send_msg_enable_ending = false;

            {
                if (canDisplayMessage(gGameStatus, EventFlagsUtil::FLAGS::UPDATE_CAR_COLLECTION))
                {
                    var msg = context.translate(ROOT, "UPDATE_CAR_COLLECTION");
                    self.message_list.push(["status", msg, nil]);
                }
            }

            var game_day = gGameStatus.user_profile.calendar.getGameDay();
            |var carsets_name, var carsets_data| = DealerRoot.load_carsets(game_day, 2);

            var maker_list = [];
            foreach (var carset_data in carsets_data)
            {
                var code = carset_data["code"];
                if (maker_list.indexOf(code) < 0)
                {
                    maker_list.push(code);
                }
            }
            MakerUtil::changeNonDisplayMaker(maker_list);

            var tip_text = "";

            for (var i = 0; i < maker_list.size; i++)
            {
                if (i > 0)
                    tip_text += " / ";
                var maker_name = context.translate(ROOT, "TunerName", maker_list[i]);
                tip_text += "%{maker_name}";
            }

            {
                var msg = context.translate(ROOT, "DEALER_LINEUP").build(tip_text);
                self.message_list.push(["dealer", msg, nil]);
            }
            {
                if (canDisplayMessage(gGameStatus, EventFlagsUtil::FLAGS::HAVE_NOT_GOT_CAR))
                {
                    var cash_str = gGameStatus.user_profile.getCashString();
                    var msg = context.translate(ROOT, "LETS_BUY_CAR").build(cash_str);
                    self.message_list.push(["dealer", msg, count_msg_lets_buy_car]);
                }
            }
            {
                if (canDisplayMessage(gGameStatus, EventFlagsUtil::FLAGS::GET_FIRST_CAR))
                {
                    var msg = context.translate(ROOT, "GET_FIRST_CAR");
                    self.message_list.push(["arcade", msg, count_msg_lets_play_arcade]);
                }
            }
            {
                if (canDisplayMessage(gGameStatus, EventFlagsUtil::FLAGS::CAN_WATCH_THE_ED_MOVIE))
                {
                    var msg = context.translate(ROOT, "CAN_WATCH_THE_ED_MOVIE");
                    self.message_list.push(["theater", msg, count_msg_enable_ending]);
                }
            }
            {
                if (EventFlagsUtil::isEventFlagON(gGameStatus, EventFlagsUtil::FLAGS::CAN_CHALLENGE_SECOND_STAGE) &&
                    !LicenseUtil::isAllClear(LicenseUtil::CATEGORY::J, false, gGameStatus))
                {
                    var random_value = main::pdistd::MRandom::GetValue(0, 2);
                    if (random_value == 0)
                    {
                        var msg = context.translate(ROOT, "CAN_CHALLENGE_SECOND_STAGE");
                        self.message_list.push(["license", msg, nil]);
                    }
                }
            }
        }

        method onFinalize(context)
        {
            self.message_list = nil;
            self.message_index = nil;
            self.prev_icon = nil;
        }

        method send()
        {
            var active_icon = self.message_list[self.message_index][0];
            var w = IconBox[active_icon];
            var w2 = IconBox[self.prev_icon];
            if (self.prev_icon != active_icon)
            {
                if (w != nil)
                {
                    w.Icon::Body::Effect.loop_count = 0;
                    w.Icon::Body::Effect.restart();
                    w.Icon::Shadow::Effect.loop_count = 0;
                    w.Icon::Shadow::Effect.restart();
                }
                
                if (w2 != nil)
                {
                    w2.Icon.Body::Effect.loop_count = 1;
                    w2.Icon.Shadow::Effect.loop_count = 1;
                }

                self.prev_icon = active_icon;
            }

            ToolTipFace.value = self.message_list[self.message_index][1];

            var count_func = self.message_list[self.message_index][2];
            if (count_func != nil)
                count_func();
        }

        method send_next()
        {
            self.message_index++;
            if (self.message_index >= self.message_list.size)
                self.message_index = 0;

            send();
        }

        method open(context, warp = false)
        {
            if (self.message_list.size == 0)
            {
                close();
                return;
            }

            Effect.reverse = false;
            Effect.restart();
            Effect.on_effect_end = function (context)
            {
                MessageBox.send();
                Effect.on_effect_end = nil;
            };

            if (warp)
                Effect.warp();
        }

        method close(context, warp = false)
        {
            var w = IconBox[self.prev_icon];
            if (w != nil)
            {
                w.Icon.Body::Effect.loop_count = 1;
                w.Icon.Shadow::Effect.loop_count = 1;
            }

            Effect.reverse = true;
            Effect.restart();
            if (warp)
                Effect.warp();

            MessageBox::ToolTipFace.value = "";
        }

        module ToolTipFace
        {
            method onPhase12End(context)
            {
                if (self.value == "")
                    return;

                MessageBox.send_next();
            }
        }
    }

    module Save
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            setCursor(context, "wait");
            {
                on_save(context);
            }
            setCursor(context, "default");

            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            if (context.event_mask & 1)
                set_balloon_tip(context);

            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }

        method set_balloon_tip(context)
        {
            var balloon_text = context.translate(ROOT, "Arcade", "SAVE");
            BalloonTip.set_value(context, self, balloon_text, 12);
        }
    }

    static sPCount = 0;
    static P1 = [
        PSP_PAD_CTRL_L3_UP,
        PSP_PAD_CTRL_L3_DOWN,
        PSP_PAD_CTRL_L3_LEFT,
        PSP_PAD_CTRL_L3_RIGHT
    ];

    static P2 = [ // Adds all cars to garage
        PSP_PAD_CTRL_L3_UP,
        PSP_PAD_CTRL_L3_RIGHT,
        PSP_PAD_CTRL_L3_LEFT,
        PSP_PAD_CTRL_L3_LEFT,
        PSP_PAD_CTRL_SQUARE,
        PSP_PAD_CTRL_L3_UP,
        PSP_PAD_CTRL_L3_RIGHT,
        PSP_PAD_CTRL_L3_RIGHT,
        PSP_PAD_CTRL_L3_UP,
        PSP_PAD_CTRL_TRIANGLE,
        PSP_PAD_CTRL_L3_RIGHT,
        PSP_PAD_CTRL_L3_UP
    ];

    static P3 = [ // Sets money to 99,000,000 Cr
        PSP_PAD_CTRL_L3_DOWN,
        PSP_PAD_CTRL_SQUARE,
        PSP_PAD_CTRL_L3_DOWN,
        PSP_PAD_CTRL_L3_LEFT,
        PSP_PAD_CTRL_L3_RIGHT,
        PSP_PAD_CTRL_TRIANGLE,
        PSP_PAD_CTRL_L3_RIGHT,
        PSP_PAD_CTRL_SQUARE,
        PSP_PAD_CTRL_L3_UP,
        PSP_PAD_CTRL_L3_DOWN,
        PSP_PAD_CTRL_L3_UP,
        PSP_PAD_CTRL_L3_DOWN
    ];

    static sPattern;

    function check_pattern(context, event)
    {
        var success = false;

        if (sPCount < sPattern.size)
        {
            if (event.keysym == sPattern[sPCount])
                sPCount++;
            else
                sPCount = 0;

            if (sPattern.size <= sPCount)
            {
                main::sound.play("return");

                sPCount = 0;
                success = true;
            }
        }

        return success;
    }
}