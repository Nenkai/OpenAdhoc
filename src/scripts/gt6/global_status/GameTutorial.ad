

//---------------------------------------------------------------------------------------
// GameTutorial.ad
//
// Creates the save profile entity
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module GameTutorial
{
    function clearInitializer()
    {
        undef CreateStructure;
        undef Initialize;
        undef clearInitializer;
    }

    function CreateStructure()
    {
        var st = STStructure("Impl");
        GameTutorial.defineModule(st);
        var st_gttop = STStructure();
        st_gttop.define("complete", STByte());
        st_gttop.define("introduction", STByte());
        st_gttop.define("tutorial_at_pit", STByte());
        st_gttop.define("tutorial_goal0", STByte());
        st_gttop.define("tutorial_goal1", STByte());
        st_gttop.define("get_first_car", STByte());
        st_gttop.define("got_first_car", STByte());
        st_gttop.define("goto_novice", STByte());
        st_gttop.define("after_first_race_normal", STByte());
        st_gttop.define("start_menu", STByte());
        st_gttop.define("open_enjoycup", STByte());
        st_gttop.define("open_coffee_break", STByte());
        st_gttop.define("open_mission_race", STByte());
        st_gttop.define("open_onemake_race", STByte());
        st_gttop.define("open_b_license", STByte());
        st_gttop.define("open_goodwood_0", STByte());
        st_gttop.define("open_goodwood_1", STByte());
        st_gttop.define("open_goodwood_2", STByte());
        st_gttop.define("open_goodwood_3", STByte());
        st_gttop.define("open_goodwood_4", STByte());
        st_gttop.define("gtauto_open", STByte());
        st_gttop.define("gtauto_open_tune", STByte());
        st_gttop.define("gtauto_open_custom", STByte());
        st_gttop.define("gtauto_open_gear", STByte());
        st_gttop.define("gtauto_open_paint", STByte());
        st_gttop.define("gtauto_open_pit", STByte());
        st_gttop.define("goto_b", STByte());
        st_gttop.define("goto_a", STByte());
        st_gttop.define("goto_ib", STByte());
        st_gttop.define("goto_ia", STByte());
        st_gttop.define("goto_s", STByte());
        st_gttop.define("goto_only_x", STByte());
        st_gttop.define("complete_career_n", STByte());
        st_gttop.define("complete_career_b", STByte());
        st_gttop.define("complete_career_a", STByte());
        st_gttop.define("complete_career_ib", STByte());
        st_gttop.define("complete_career_ia", STByte());
        st_gttop.define("complete_career_s", STByte());
        st_gttop.define("pp_over", STByte());
        st_gttop.define("x2014_welcome", STByte());
        st_gttop.define("x2014_congrats", STByte());
        st_gttop.define("x2014_wait_update", STByte());
        st_gttop.define("x2014_kart", STByte());
        st_gttop.define("x2014_x_intro", STByte());
        st_gttop.define("x2014_x3", STByte());
        st_gttop.define("x2014_x2", STByte());
        st_gttop.define("x2014_x1", STByte());
        st_gttop.define("x2014_end_message", STByte());
        st_gttop.define("senna_tribute", STByte());
        st.define("gttop", st_gttop);

        var st_gtmode = STStructure();
        st_gtmode.define("test", STByte());
        st.define("gtmode", st_gtmode);

        var st_quest = STStructure();
        st_quest.define("active", STByte());
        st_quest.define("category", STString(16));
        st_quest.define("name", STString(32));
        st_quest.define("datetime", STULong());
        st.define("quest_list", STArray(st_quest, 16));

        var st_community = STStructure();
        st_community.define("mypage", STByte());
        st_community.define("timeline", STByte());
        st_community.define("club", STByte());
        st_community.define("friend", STByte());
        st_community.define("photostream", STByte());
        st_community.define("message", STByte());
        st_community.define("news", STByte());
        st.define("community", st_community);

        var st_bspec = STStructure();
        st_bspec.define("quick", STByte());
        st_bspec.define("race", STByte());
        st.define("bspec", st_bspec);

        DefineMethod();

        return st;
    }

    function Initialize(instance)
    {
        instance.gttop.complete = 0;
        instance.gttop.introduction = 1;
        instance.gtmode.test = 0;

        for (var i = 0; i < 16; ++i)
        {
            instance.quest_list[i].active = 0;
            instance.quest_list[i].category = "";
            instance.quest_list[i].name = "";
            instance.quest_list[i].datetime = 0xFFFFFFFF;
        }
    }

    function DefineMethod()
    {
        module Impl
        {
            method isBegin(category, name)
            {
                var value = self[category][name];
                return value == 1;
            }
        
            method isProgress(category, name)
            {
                var value = self[category][name];
                return value == 2;
            }
            
            method isDone(category, name)
            {
                var value = self[category][name];
                return value == 3;
            }

            method begin(category, name)
            {
                self[category][name] = 1;
            }

            method progress(category, name)
            {
                self[category][name] = 2;
                addQuest(category, name);
            }

            method done(category, name)
            {
                self[category][name] = 3;
                removeQuest(category, name);
            }

            method clear(category, name)
            {
                self[category][name] = 0;
            }

            method getQuestList()
            {
                var list = [];
                for (var i = 0; i < 16; ++i)
                {
                    var quest = self.quest_list[i];
                    if (!quest.active)
                        continue;

                    list.push([quest.category, quest.name, quest.datetime]);
                }

                list.sort(function(a, b) { return a.datetime < b.datetime; });
                return list;
            }

            method addQuest(category, name)
            {
                for (var i = 0; i < 16; ++i)
                {
                    var quest = self.quest_list[i];
                    if (quest.active)
                        continue;

                    quest.active = 1;
                    quest.category = category;
                    quest.name = name;
                    quest.datetime = pdiext::getBetterTime().getBySecond();
                    break;
                }
            }

            method removeQuest(category, name)
            {
                for (var i = 0; i < 16; ++i)
                {
                    var quest = self.quest_list[i];
                    if (quest.active && quest.category == category && quest.name == name)
                    {
                        quest.active = 0;
                        quest.category = "";
                        quest.name = "";
                        quest.datetime = 0xFFFFFFFF;
                    }
                }
            }
        }
    }
}