module PROJECT
{
	class http
	{
		static http = main::menu::MHttp();
		
		method __init__()
		{
			http.block = 0;
			http.timeout = 60 * 30;
			http.setProxyByNetConf(main::game.option.netconf);
		}
		
		
		method GetMHttp()
		{
			return http;
		}
		
		method GetXml(url)
		{
			return http.getXml(url);
		}
		
		method PostXml(url, arg)
		{
			return http.postXml(url, arg);
		}
		
		method PostSvoLogin(url, user, password, ip, arg)
		{
			if (!http.SVOLOGIN(url, user, password, ip, arg))
			{
				return nil;
			}
		
			if (!http.sync())
			{
				http.response();
				return nil;
			}
		
			var xml = main::menu::MXml();
			xml.parse(http.response());
			return xml.result;
		}
		
		method AsyncGet(url)
		{
			if (!http.GET(url))
			{
				return false;
			}
		
			return true;
		}
		
		method Response()
		{
			return http.response();
		}
		
		method IsDone()
		{
			return http.isTransactionDone();
		}
		
		method HasError()
		{
			if (http.isTransactionFailed())
			{
				return true;
			}
		
			return false;
		}
		
		
		method GetContentLength()
		{
			return http.contentLength;
		}
		
		method GetEntitySize()
		{
			return http.entitySize;
		}
		
		method Abort()
		{
			return http.abort();
		}
		
		method close()
		{
			http.close();
		}
		
		method ppr(str, level)
		{
			var p = "";
			for (var d = 0; d < level; d++)
				p += "  ";
		}
		
		method PrintXmlNodes(node, level)
		{
			if (node.value != "")
				ppr(node.value, level);
		
			var attrs = node.attrs;
			for (var a = 0; a < attrs.size; a++)
			{
				var p = "";
				for (var d = 0; d < level; d++)
					p += "  ";
				p += ":";
		
				var attrName = attrs[a];
				var attrValue = node.getAttribute(attrName);
			}
		
			var names = node.elems;
			for (var i = 0; i < names.size; i++)
			{
				var name = names[i];
				var nodeList = node[name];
		
				for (var j = 0; j < nodeList.size; j++)
				{
					ppr("[" + name + "]", level);
					PrintXmlNodes(nodeList[j], level + 1);
				}
			}
		}
	}
	static gHttp = http.new();
	module svo
	{
		static sLocation = nil;
		static sIpAddr = "";
		#define SELECT_XML_NODE_SAFE(out_name, expr, ret_value_if_nil) \
			var out_name; \
			if ((out_name = expr) == nil) \
				return ret_value_if_nil
		
		static sSvoGameId = "0";
		
		function SetLocation(code)
		{
			sLocation = code;
		}
		
		function GetUrl(urlName)
		{
			var svoRoot = main::network.svo_url;
			SELECT_XML_NODE_SAFE(node, gHttp.GetXml(svoRoot), nil);
		
			SELECT_XML_NODE_SAFE(node, node.getFirstNode("XML"), nil);
			SELECT_XML_NODE_SAFE(node, node.getFirstNode("URL_List"), nil);
		
			if (sIpAddr == "")
			{
				sIpAddr = node.getAttribute("IPAddress");
			}
		
			SELECT_XML_NODE_SAFE(node, node.getFirstNode(urlName), nil);
			return node.value;
		}
		
		function GetFirstNode(urlName, firstNodeName)
		{
			SELECT_XML_NODE_SAFE(url, GetUrl(urlName), nil);
			SELECT_XML_NODE_SAFE(node, gHttp.GetXml(url), nil);
			SELECT_XML_NODE_SAFE(node, node.getFirstNode("XML"), nil);
			SELECT_XML_NODE_SAFE(node, node.getFirstNode(firstNodeName), nil);
			return node;
		}
		
		function GetResultId(node, statusName)
		{
			if (node == nil)
				return nil;
		
			
			SELECT_XML_NODE_SAFE(node, node.getFirstNode("XML"), nil);
			SELECT_XML_NODE_SAFE(node, node.getFirstNode(statusName), nil);
			SELECT_XML_NODE_SAFE(node, node.getFirstNode("status"), nil);
			SELECT_XML_NODE_SAFE(nodeId, node.getFirstNode("id"), nil);
		
			var nodeMessage;
			if ((nodeMessage = node.getFirstNode("message")) != nil)
			{
			}
			return nodeId.value;
		}
		
		function GetResult(node, statusName, successId)
		{
			SELECT_XML_NODE_SAFE(id, GetResultId(node, statusName), 0);
			var success = (id == successId);
			if (!success)
			{
		
			}
		
			return success;
		}
		
		function PushRequest(array, node, attr, value)
		{
			var tmp = node.getFirstNode(attr);
			if (tmp == nil)
			{
			}
			else
			{
				var str = tmp.getAttribute("name");
				if (str != nil)
				{
					array.push(str);
					array.push(value);
				}
			}
		}
		
		function Login(accountId, user, password)
		{
			SELECT_XML_NODE_SAFE(node, GetFirstNode("loginURL", "Login"), false);
			var url = node.getAttribute("action");
			var array = [];
			PushRequest(array, node, "accountID", accountId);
			PushRequest(array, node, "userName", user);
			node = gHttp.PostSvoLogin(url, user, password, sIpAddr, array);
			return GetResult(node, "Login", "20600");
		}
		
		function CreateArcadeGame(mediusGameId, remotePlayers)
		{
			SELECT_XML_NODE_SAFE(node, GetFirstNode("gameArcadeCreateURL", "Create_Game"), false);
			var url = node.getAttribute("action");
		
			var array = [];
		
			PushRequest(array, node, "SCERTGameID", mediusGameId);
		
			var nodeGameMode;
			if ((nodeGameMode = node.getFirstNode("GameMode")) != nil)
			{
				PushRequest(array, node, "GameMode", nodeGameMode.value);
			}
		
			var gameName = main::network.my_name + main::menu::MSystem::GetGMTDateTimeString();
			PushRequest(array, node, "GameName", gameName);
			PushRequest(array, node, "HostPlayerList", main::network.my_id.toString());
			PushRequest(array, node, "RemotePlayerList", remotePlayers);
			PushRequest(array, node, "TimePerDivision", "5");
			PushRequest(array, node, "NumDivisions", "1");
			PushRequest(array, node, "locationID", main::menu::MCourseData::GetID(sLocation).toString());
		
			node = gHttp.PostXml(url, array);
		
			var result = GetResultId(node, "Create_Game");
			if (result == "20400")
			{
				SELECT_XML_NODE_SAFE(node, node["XML"][0]["Create_Game"][0]["gameID"], false);
		
				sSvoGameId = node[0].value;
				main::network.raceMasterNotifySvoGameId(sSvoGameId.toInt());
				return true;
			}
			else
			{
				return false;
			}
		}
		
		function FinishGame(totalTime, carId)
		{
			SELECT_XML_NODE_SAFE(node, GetFirstNode("gameFinishURL", "Finish_Game"), 0);
			var url = node.getAttribute("action");
			var array = [];
		
			PushRequest(array, node, "SVOGameID", sSvoGameId);
			PushRequest(array, node, "ReturnState", "1");
			PushRequest(array, node, "metersDriven", "0");
			PushRequest(array, node, "place", "1");
			PushRequest(array, node, "totalLapTime", totalTime);
			PushRequest(array, node, "fastestLapTime", "0");
			PushRequest(array, node, "collisions", "0");
			PushRequest(array, node, "car", carId);
		
			node = gHttp.PostXml(url, array);
			return GetResult(node, "Finish_Game", "20407");
		}
		
		static sLocationRankingUrl = nil;
		
		function GetLocationRankingSelection()
		{
			SELECT_XML_NODE_SAFE(node, GetFirstNode("statsLocationURL", "Location_Leaderboard"), nil);
		
			gHttp.PrintXmlNodes(node, 0);
		
			var url = node.getAttribute("action");
			SELECT_XML_NODE_SAFE(node, node.getFirstNode("locations"), nil);
			SELECT_XML_NODE_SAFE(type, node.getAttribute("type"), nil);
		
			if (type != "select")
				return nil;
		
			SELECT_XML_NODE_SAFE(name, node.getAttribute("name"), nil);
			sLocationRankingUrl = url + "?" + name + "=";
		
			SELECT_XML_NODE_SAFE(nodeList, node["location"], nil);
		
			var array = [];
			for (var i = 0; i < nodeList.size; i++)
			{
				if (nodeList[i] == nil)
					return nil;
		
				SELECT_XML_NODE_SAFE(id, nodeList[i].getAttribute("ID"), nil);
		
				var pair = [];
				pair.push(id);
				pair.push(nodeList[i].value);
				array.push(pair);
			}
		
			return array;
		}
		function GetLocationRanking(locationId, start)
		{
			if (sLocationRankingUrl == nil)
			{
				SELECT_XML_NODE_SAFE(node, GetFirstNode("statsLocationURL", "Location_Leaderboard"), nil);
		
				var url = node.getAttribute("action");
				SELECT_XML_NODE_SAFE(node, node.getFirstNode("locations"), nil);
				SELECT_XML_NODE_SAFE(name, node.getAttribute("name"), nil);
				sLocationRankingUrl = url + "?" + name + "=";
			}
			var url = sLocationRankingUrl + locationId + "&start=" + start.toString() + "&end=" + (start + 8).toString();
			SELECT_XML_NODE_SAFE(node, gHttp.GetXml(url), nil);
			gHttp.PrintXmlNodes(node, 0);
			SELECT_XML_NODE_SAFE(node, node.getFirstNode("XML"), nil);
			SELECT_XML_NODE_SAFE(node, node.getFirstNode("Location_Leaderboard"), nil);
			SELECT_XML_NODE_SAFE(node, node.getFirstNode("Stats"), nil);

			var nStats = (node.getAttribute("end").toInt() - node.getAttribute("start").toInt());
			var array = [];
		
			var my;
			if ((my = node.getFirstNode("my")) != nil)
			{
				SELECT_XML_NODE_SAFE(rank, my.getAttribute("rank"), nil);
				SELECT_XML_NODE_SAFE(car, my.getAttribute("CAR"), nil);
				SELECT_XML_NODE_SAFE(results, my.getAttribute("RESULTS"), nil);
				var data = [];
				data.push(rank);
				data.push(nil);
				data.push(car);
				data.push(results);
				array.push(data);
			}

			if (nStats > 0)
			{
				var nodeList;
				if ((nodeList = node["user"]) == nil)
					return nil;
				
				for (var i = 0; i < nodeList.size; i++)
				{
					if (nodeList[i] == nil)
						return nil;
		
					SELECT_XML_NODE_SAFE(rank, nodeList[i].getAttribute("rank"), nil);
					SELECT_XML_NODE_SAFE(name, nodeList[i].getAttribute("username"), nil);
					SELECT_XML_NODE_SAFE(car, nodeList[i].getAttribute("CAR"), nil);
					SELECT_XML_NODE_SAFE(results, nodeList[i].getAttribute("RESULTS"), nil);
		
					var data = [];
					data.push(rank);
					data.push(name);
					data.push(car);
					data.push(results);
					array.push(data);
				}
			}
			return array;
		}
	}
	module AutoTick
	{
		static tick_func = nil;
		static watcher = nil;
		static tick_period = nil;
		static current_count = nil;
		
		function begin(context, func)
		{
			tick_func = func;
			if (watcher != nil)
				watcher.remove();
		
			watcher = main::menu::MScriptWatcher(context, onTick);
			watcher.interval = 600;
			watcher.count = 0;
			watcher.append();
		
			tick_period = 3;
			current_count = 0;
		}
		
		function end()
		{
			if (watcher != nil)
			{
				watcher.remove();
				watcher = nil;
			}
		
			tick_func = nil;
			tick_period = nil;
			current_count = nil;
		}
		
		function onTick(context)
		{
			var tali = context.time_after_last_input;
		
			if (tali < 30.0)
				tick_period = 3;
			else if (tali < 60.0)
				tick_period = 6;
			else
				tick_period = 30;
		
			current_count--;
		
			if (current_count < 0)
			{
				current_count = tick_period;
				tick_func(context);
			}
		}
	}

	
	function openConfirmDialog(context, type, message, title, yes, no)
	{
		var page = context.getCommonPage("ConfirmDialog");
		if (page == nil)
			;
		
		return page["open"](context, type, message, title, nil, yes, no);
	}
	
	function cancelConfirmDialog(context)
	{
		var page = context.getCommonPage("ConfirmDialog");
		if (page == nil)
			;
		
		return page["forceCancel"](context);
	}
	
	function delayOpenConfirmDialog(context, message)
	{
		context.pushEvent(main::menu::MScriptEvent(context, PROJECT, "delay_open_cb", [message]));
	}
	
	function delay_open_cb(context, message)
	{
		main::sound.play("ok");
		openConfirmDialog(context, DIALOG_OK, message);
	}
	
	function openProcessDialog(context, message, func, args)
	{
		var page = context.getCommonPage("ProcessDialog");
		if (page == nil)
			;
		
		return page["open"](context, message, func, args);
	}
	
	function lastProcessError(context)
	{
		var page = context.getCommonPage("ProcessDialog");
		if (page == nil)
			;
		
		return page["last_error_code"];
	}
	
	function openProgressDialog(context, message, func)
	{
		var page = context.getCommonPage("ProgressDialog");
		if (page == nil)
			;
		
		return page["open"](context, message, func);
	}
	
	function closeProgressDialog(context)
	{
		var page = context.getCommonPage("ProgressDialog");
		if (page == nil)
			;
		
		return page["close"](context);
	}
	
	function setProgress(context, p)
	{
		var page = context.getCommonPage("ProgressDialog");
		if (page == nil)
			;
		
		return page["setProgress"](p);
	}
	
	function setProgressRawMode(context, mode)
	{
		var page = context.getCommonPage("ProgressDialog");
		if (page == nil)
			;
		
		return page["setRawMode"](mode);
	}
	
	function setProgressDialogVisible(context, f)
	{
		var page = context.getCommonPage("ProgressDialog");
		if (page == nil)
			;
		
		return page["setVisible"](f);
	}

	function onSystemMessage(context, message)
	{
		openConfirmDialog(context, DIALOG_OK, message);
	}
	
	function onDisconnectEvent(context)
	{
		openConfirmDialog(context, DIALOG_OK, context.translate(TopRoot, "DISCONNECTED"));
		restart(context);
	}
	
	function onReceiverNotLobbyEvent(context)
	{
		var pipe = main::network.im_pipe;
		pipe.put(context.translate(TopRoot, "RECEIVER_BUSY"));
	}
	
	function onBuddyAddRequest(context, id, name)
	{
		var mes = context.translate(TopRoot, "ON_BUDDY_ADD").format(name);
		openConfirmDialog(context, DIALOG_QUERY, mes);
		return;
	}
	
	function onBuddyAddResponseAccepted(context, id, name)
	{
		var mes = context.translate(TopRoot, "ON_BUDDY_ACCEPT").format(name);
		openConfirmDialog(context, DIALOG_OK, mes);
		return;
	}
	
	function onBuddyAddResponseDenied(context, id, name)
	{
		var mes = context.translate(TopRoot, "ON_BUDDY_DENIED").format(name);
		openConfirmDialog(context, DIALOG_OK, mes);
		return;
	}
	
	function onBuddyAddResponseFailed(context, id, name)
	{
		var mes = context.translate(TopRoot, "ON_BUDDY_FAILED").format(name);
		openConfirmDialog(context, DIALOG_OK, mes);
		return;
	}
	
	function onImBusy(context, msg)
	{
		context.translate(TopRoot, "ON_IM_BUSY");
		return;
	}
	
	static sWatcher = nil;
	
	function DeleteWatcher()
	{
		if (sWatcher != nil)
		{
			sWatcher.remove();
			sWatcher = nil;
		}
	}
	
	function CreateWatcher(context, func, interval)
	{
		DeleteWatcher();
		sWatcher = main::menu::MScriptWatcher(context, func);
		sWatcher.interval = interval;
		sWatcher.count = 0;
		sWatcher.append();
	}
	
	function GetWatcherCount()
	{
		sWatcher.count;
		return;
	}


	function _start_page(context, next_page)
	{
		if (next_page != nil)
		{
			if (context != nil)
			{
				if (context.transition != nil)
					context.transition.panOutIn(context);

				context.startPage(next_page);
			}
		}
		else
		{
			if (context != nil)
			{
				if (context.transition != nil)
				{
					context.transition.panOut(context);
					context.transition.syncOut(context);
				}
				context.finish();
			}
		}
		context.flushKeyEvent();
	}
	
	function start_page(context, next_page)
	{
		context.pushEvent(main::menu::MFunctionEvent(_start_page, context, next_page));
	}


	function start_project(context, next_project, arg)
	{
		main::game.next_menu_project = next_project;
		if (arg != nil)
			main::game.next_menu_arg = arg;

		start_page(context, nil);
	}
	
	function start_sequence(context, next_sequence)
	{
		main::game.next_sequence = next_sequence;
		start_page(context, nil);
	}
	
	function set_last_focus(name)
	{
		last_focus = name;
	}
	
	function focus_last(root, parent)
	{
		var focused_widget = nil;
	
		if (last_focus != nil)
		{
			if (parent.defined(last_focus))
			{
				focused_widget = parent[last_focus];
				root.setFocus(focused_widget);
			}
			last_focus = nil;
		}
		return focused_widget;
	}
	
	static message_project = nil;
	
	function onLoad(context)
	{
		if (!main::network.isInterfaceInitialized())
			main::network.initializeInterface();

	
		if (main::network.isRTIMEInitialized())
		{
			main::network.setCallbackModule(OnlineProject);
			main::network.inLobby(1);
		}
	
		main::sound.load();
	
		message_project = main::manager.loadProject("/projects/message/message");
	
		context.loadGpb("projects/online", "Template");
		context.createRenderContext(1);
	
		var render_context = context.getRenderContext(0);
	
		main::menu::MMovieFace::initialize(render_context);
	
		render_context.transition = main::menu::MCrossTransition();
		render_context.transition.panIn(render_context);
	
		SettingPopup::onLoadInitialize(render_context);
	
		var page = nil;
		if (main::game.major_menu_page == "")
			page = TopRoot;
		else
			page = OnlineProject[main::game.major_menu_page];
	
		render_context.startPage(page);
	}


	static restart_flg = false;

	function onUnload(context)
	{
		main::menu::MMovieFace::terminate();
	
		context.unloadGpb("Template");
	
		main::manager.unloadProject(message_project);
	
		main::sound.unload();
	
		main::network.inLobby(false);
		main::network.setCallbackModule(nil);
	
		if (restart_flg)
			downNetwork();

	}
	
	function enterPage(context, root, title)
	{
		root.appendChild(context, Template::Common.doCopy());
	
		var common = root["Common"];
		var header = common["Header"];
	
		if (title == nil)
			title = "";
		else
			title = context.translate(root, title);
	
		header["Title"]["label"].text = title;
	
		header["Indicator"].doInitialize(context);
		header["Indicator"].active = main::network.isRTIMEInitialized();
	
		setFadeActor(header["Indicator"]["bga"]);
		setFadeActor(header["IM"]["bga"]);
	
		MessageProject::beginIMCheck(context, header["IM"]);
	}
	
	function leavePage(context, root)
	{
		MessageProject::endIMCheck();
	
		var common = root["Common"];
		if (common != nil)
			root.removeChild(context, common);
	}
	
	function downNetwork()
	{
		main::network.terminateRTIME();
		main::network.terminateNetwork();
	}
	
	function setFadeActor(widget)
	{
		var actor = main::menu::MFadeActor(widget, 1.0);
		actor.repeat = true;
		actor.period = 0.25;
		widget.actor = actor;
	}
	
	function restart(context)
	{
		restart_flg = true;
		main::game.major_menu_page = "";
		start_page(context, nil);
	}


	function onRallyBot(context, message, time_data, stage_index, course_id)
	{
		RallyRoot::onRallyBot(context, message, time_data, stage_index, course_id);
	}
}