//---------------------------------------------------------------------------------------
// ModuleTimeAttack.ad (standalone script)
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

#ifndef PROJECT
    #define PROJECT RaceProject
#endif

__module__.load("/%{main::PROJECT_ROOT_DIR}/race/ModuleReplay");

function onLoad(update_context)
{
    main::RaceOperator.allocateResource();

    var render_context = update_context.getRenderContext();
    var no_quickmenu;
    {
        var play_style = gSequenceCondition.event.play_style;
        if (play_style != nil && play_style.no_quickmenu != nil)
            no_quickmenu = play_style.no_quickmenu;
        else
            no_quickmenu = false;
    }    

    if (no_quickmenu)
    {
        gSequenceCondition.quick_root = nil;
        LoadingRoot.open(render_context);
    }
    else
    {
        gSequenceCondition.loadProject(render_context, "detail");
        DetailProject.load("/%{main::PROJECT_ROOT_DIR}/detail/CarDetailPopupImpl");
        DetailProject.load("/%{main::PROJECT_ROOT_DIR}/detail/CourseDetailPopupImpl");
        DetailProject.load("/%{main::PROJECT_ROOT_DIR}/detail/QuickTunePopupImpl");

        PROJECT.load("/%{main::PROJECT_ROOT_DIR}/race/QuickTimeAttackRootImpl");

        gSequenceCondition.quick_root = QuickTimeAttackRoot;
        gSequenceCondition.quick_root.open(render_context);
    }
}

function onUnload(update_context)
{
    main::RaceOperator.checkOut();
    main::ORG.exitCourse();
    main::RaceOperator.destroyRace();
    main::RaceOperator.clearResource();
}

function createReplaySaveDataDescription(context)
{
    var root = context.getCurrentPage();

    var cp = getPlayerCar();
    var dp = getPlayerDriver();

    var carname = main::gtengine::MSpecDB::getCarShortName(cp.getCarCode());
    var course_code = getCurrentCourse();
    var course_label = main::gtengine::MSpecDB::getCourseLabel(course_code);

    var layout = "LAYOUT_NORMAL";
    if (course_label.beginWith("r_"))
    {
        course_label = course_label.substr(2);
        layout = "LAYOUT_REVERSE";
    }
    var coursename = "%s / %s".format(context.translate(root, "CourseName", course_label),
                                      context.translate(root, "TrialSetting", layout))

    var sim_str = context.translate(root, "TrialSetting", dp.physics_pro ? "PhysicsPro" : "PhysicsNormal");
    var tire_str = getTireString2(context, root, cp, course_code);

    var subtitle = context.translate(root, "SaveDataGT5M", "REPLAY_SUBTITLE_WITHIN_128BYTES")
                   + context.translate(root, "GameModeNameGT5P", "TIME_ATTACK");

    var description = context.translate(root, "SaveDataGT5M", "REPLAY_DESCRIPTION_WITHIN_1024BYTES");
    description = description.build(coursename, carname, sim_str, tire_str);

    return [subtitle, description];
}

function onGoToNextSequence(context)
{
    if (!gSequenceCondition.is_buffer_replay_mode)
        recordFastestLapTime(context);

    var quick_root = gSequenceCondition.quick_root;
    if (quick_root != nil)
        quick_root.open(context);
    else
        goToMenuSequence(context);
}

function recordFastestLapTime(context)
{
    var slot_id = getPlayerSlot();
    if (slot_id < 0)
        return;

    var time = main::ORG.getDisplayBestLapTime(slot_id);
    if (time == main::pdiext::MAX_LAPTIME1000)
        return;

    var course_code = getCurrentCourse();

    var board = gSequenceCondition.game_status.user_profile.record.getBoardTA(course_code);
    if (board == nil)
        return;

    var cp = main::ORG.getEntriedCarParameter(slot_id);
    var dp = main::ORG.getEntriedDriverParameter(slot_id);

    |var tire_f, var tire_r| = cp.getTireCategories();

    var physics_pro = dp.physics_pro;

    var color = cp.color;

    var mtime = main::pdistd::MTime::getCurrentTime();

    var result = board.insert(time, cp.getCarCode(), tire_f, tire_r, physics_pro, color, mtime.getBySecond());
    gSequenceCondition.new_record = -1 != result;

    if (gSequenceCondition.new_record)
    {
        gSequenceCondition.game_status.user_profile.calendar.putRunCourseEvent(
            cp.getCarCode(),
            color,
            course_code,
            "TIME_TRIAL",
            result,
            nil,
            time);

        main::GlobalStatus::game_context.need_save = true;
    }
}

function onPlayMusicWhenComplete(context, result)
{
    var finish_bgm_table = [
        main::gtengine::FinishResult::RANK_1 : "finish_1",
        main::gtengine::FinishResult::RANK_2 : "finish_2",
        main::gtengine::FinishResult::RANK_3 : "finish_3",
        main::gtengine::FinishResult::RANK_4 : "finish_4"
    ];

    var group = finish_bgm_table.find(result);
    if (group == nil)
        group = "finish_other";
    else
        group = group[1];

    SoundUtil::RaceBGMPlayGroup(group, !gSequenceCondition.isPlay(), false);
}

function onExit(context)
{
    if (!RaceMenuUtil::activated())
    {
        main::sound.play("cancel");
        return;
    }

    main::sound.play("ok");

    OnboardMeterRoot::RaceDisplayFace.toStop();

    RaceMenuUtil::closeAction(context);
    RaceRoot.quit(context);
}