module PROJECT::ROOT
{
	static sTimeout = nil;
	static sSkip = nil;

	function setBarActor(widget)
	{
		widget.x = -widget.w;
	
		var actor = main::menu::MMoveActor(widget, PS2_SCREEN_W_F, widget.y);
		widget.actor = actor;
	
		widget.actor.ratio = 0.01;
		widget.actor.repeat = true;
		widget.actor.flip = false;
		widget.actor.linear = true;
		widget.actor.out = false;
	
		widget.actor.warp();
		widget.actor.out = true;
	}

	setBarActor(bar);

	function OnInitializeFailed(context)
	{
		main::sound.play("disabled");
		openConfirmDialog(context, DIALOG_ERROR, context.translate(ConnectingRoot, "INIT_FAILED"));
		quit(context);
	}

	function OnFrame(context)
	{
		if (sSkip)
			return;
	
		if (main::network.isNetworkInitialized())
		{
			DeleteWatcher();
	
			var udp_port = main::game.option.udp_bind_port;
			if (main::game.option.udp_bind_port_setting == 0)
				udp_port = 6000;
	
			main::network.initializeRTIME(gNetMode, udp_port, main::game.option.use_upnp);
	
			context.sync(0.5);
			context.sync(0.5);
	
			var next_page = DnasRoot;
			
			if (false || isOnlineManager())
				next_page = EntryRoot;
	
			if (gNetMode == "WAN")
				start_page(context, next_page);
			else
			{
				main::game.setReturnToLastMenuProject();
				start_page(context, nil);
			}
		}
		else
		{
			if (sTimeout > 0)
				sTimeout--;
			else
			{
				DeleteWatcher();

				var event = main::menu::MScriptEvent(context, ConnectingRoot, "OnInitializeFailed");
				context.pushEvent(event);
				return;
			}
		}
	}

	function onInitialize(context)
	{
		context.cursor_visible = false;
	
		ToolTip::tip.value = context.translate(ConnectingRoot, "TOOLTIP|Cancel");
	
		var event = main::menu::MScriptEvent(context, ConnectingRoot, "onConnecting");
		context.pushEvent(event);
	}
	
	function onFinalize(context)
	{
		context.cursor_visible = true;
		sTimeout = nil;
		sSkip = nil;
	}

	function onConnecting(context)
	{
		if (!main::network.isNetworkInitialized())
		{
			var ret = gNetcnf.GetEnvAddress();
			ret = main::network.initializeNetwork(ret, 0);
	
			if (!ret)
			{
				var event = main::menu::MScriptEvent(context, ConnectingRoot, "OnInitializeFailed");
				context.pushEvent(event);
				return;
			}
	
			sTimeout = 30 * 60;
			sSkip = false;
			CreateWatcher(context, OnFrame, 2);
			return;
		}
	
		if (!main::network.isRTIMEInitialized())
		{
			main::network.inLobby(true);
			main::network.setCallbackModule(NetworkProject);
		}
	
		var next_page = DnasRoot;
	
		if (false || isOnlineManager())
		{
			next_page = EntryRoot;
		}
	
		if (gNetMode == "WAN")
		{
			start_page(context, next_page);
		}
		else
		{
			main::game.setReturnToLastMenuProject();
			start_page(context, nil);
		}
	}

	function onCancel(context)
	{
		main::sound.play("cancel");
	
		sSkip = true;
	
		var result = openConfirmDialog(context, DIALOG_QUERY, context.translate(ConnectRoot, "QUIT"));
	
		if (result != nil && result)
		{
			DeleteWatcher();
			quit(context);
		}
	
		sSkip = false;
		return EVENTRESULT_FILTER;
	}
}