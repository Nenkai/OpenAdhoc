

//---------------------------------------------------------------------------------------
// CourseMapFaceUtil.ad
//
// Utility module for setting up course map widgets
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module CourseMapFaceUtil
{
    function initialize(context, course_map_face, course_info, event)
    {
        var crsmap = course_info.ModelName;

        if (course_info.Scenery)
        {
            if (ORG.getDerivedMapData())
                course_map_face.begin(ORG, course_map_face.parent, nil);
            else
            {
                var ted = event.track.edit_data;
                if (ted != nil)
                {
                    var map_data = gtengine::convertTedToMapData(ted);
                    if (map_data != nil)
                    {
                        var mapclip = course_map_face.parent;
                        mapclip.map_data = map_data;
                        course_map_face.begin(ORG, mapclip, map_data);
                    }
                }
            }
        }
        else
        {
            course_map_face.map_data_path = "/crs/%{crsmap}.map";
        }

        var remove_list = [];
        for (var w = course_map_face.span.prev; w != nil; w = w.prev)
        {
            if (w.isInstanceOf(menu::MCourseMapSpan))
            {
                var a = w.name;
                remove_list.push(w);
            }
        }

        foreach (var w in remove_list)
            course_map_face.removeItem(context, w);
        
        course_map_face.span.move_visible = false;
        var move_visible = true;

        var by_section = event.race_parameter.complete_type == gtengine::CompleteType::BYSECTION
                        || event.race_parameter.complete_type == gtengine::CompleteType::BYSTOP;
        
        if (by_section)
        {
            var start_v = 0;
            if (event.entry_set.entries.size > 0)
                start_v = event.entry_set.entries[0].initial_position;

            var end_v = event.race_parameter.event_goal_v;
            course_map_face.span_v(start_v, end_v);
        }
        else 
        {
            var drift_sector_mode = false;
            
            if (event.game_mode == gtengine::GameMode::DRIFT_ATTACK ||
                event.game_mode == gtengine::GameMode::ONLINE_DRIFT_ATTACK)
            {
                drift_sector_mode = !event.race_parameter.endless;
                move_visible = !event.race_parameter.endless;
            }
            else if (event.game_mode == gtengine::GameMode::COFFEE_BREAK)
            {
                var license_condition = event.license_condition;
                if (!license_condition.isDefault() && license_condition.display_mode == gtengine::LicenseDisplayModeType::DRIFT_SCORE)
                    drift_sector_mode = true;
            }

            if (drift_sector_mode)
            {
                var cinf = MENUDB.queryList("SELECT Section, StartV, FinishV FROM t_cinf WHERE ModelName = ? ORDER BY Section", [course_info.ModelName]);
                if (cinf == nil)
                    course_map_face.span_v();
                else
                {
                    var target = course_map_face.span;
                    var list = [];

                    if (event.drift_condition.section.size > 0)
                    {
                        var last_finish_v = event.drift_condition.section[event.drift_condition.section.size - 1].finish_v;
                        list.push([0, event.drift_condition.launch_v, last_finish_v]);

                        for (var i = 0; i < event.drift_condition.section.size; ++i)
                        {
                            var section = event.drift_condition.section[i];
                            list.push([i + 1, section.start_v, section.finish_v]);
                        }
                    }
                    else
                    {
                        foreach (var data in cinf)
                            list.push([data.Section, data.StartV, data.FinishV]);
                    }

                    foreach (var data in list)
                    {
                        |var section, var start_v, var finish_v| = data;
                        if (start_v > finish_v)
                            start_v -= course_map_face.road_length;

                        if (section == 0)
                        {
                            move_visible = false;
                            course_map_face.span.span_v(start_v, finish_v);
                        }
                        else
                        {
                            var w = course_map_face.span.doCopy();
                            course_map_face.insertItem(context, w, target);
                            w.span_v(start_v, finish_v);
                            w.pointer_visible = false;
                            w.start_visible = false;
                            w.end_visible = false;
                            w.move_visible = true;

                            if (w.first_actor != nil)
                                w.first_actor.stop()

                            w.span_progress = 1.0;
                        }
                    }
                }
            }
            else
                course_map_face.span_v();
            
        }

        course_map_face.span.move_visible = move_visible;
    }
}
