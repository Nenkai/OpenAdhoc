import main::*;

function dumpModuleInfo(obj)
{
    var str = "";
    
    str += "Module Name: %{obj.name}<br>";
    str += "Module Path: %{obj.getModulePath()}<br>";
    str += "Statics for Module '%{obj.name}' (%{obj.getMapCount()} elements)<br><br>";
    return dumpMap(obj);
}

function dumpArray(arr)
{
    var str = "";
    for (var i = 0; i < arr.getArrayCount(); i++)
        str += "[%{i}] %{arr[i]}<br>";
    
    return str;
}

function dumpMap(map)
{
    var str = "
<table>
    <tr>
        <th>Symbol Name</th>
        <th>Type</th>
    </tr>
    <tr>"

    foreach (|var k, v| in map)
    {
        // v is not the actual variable and rather a symbol/internal value holder, do not use it
        try
        {
            if (map[k] != nil)
            {
                str += "<tr><td><button type=\"button\" onclick=\"location.href=location.pathname + '?path=%{_REQUEST["path"]}->%{k}';\">%{k}</button></td>";
            }
            else
            {
                
                str += "<tr><td>%{k}</td>";
            }
        }
        catch (e)
        {
            str += "<tr><td>%{k}</td>";
        }

        try
        {
            str += "<td>%{map[k]}</td></tr>";
        }
        catch (error)
        {
            
        }
    }
    str += "</table>";
    
    return str;
}

function dumpObject(obj)
{
    if (obj == nil)
        return "dumpObject: Object is nil";

    var str = "";

    str += "

<style>
    html * {
      color: #2020131;

    }
    table, td {
        border: 1px solid black;
        border-collapse: collapse;
    }
</style>"

    str += "<h1>Object Info</h1>";

    if (obj.__super__ != nil)
        str += "<b>Extends: %{obj.__super__.name}</b><br>";

    str += "rc_size: %{obj.rc_size}<br>";
    str += "rc_class: %{obj.rc_class}<br>";
    str += "rc_count: %{obj.rc_count}<br>";
    str += "weak_count: %{obj.weak_count}<br>";
    str += "class_id: %{obj.class_id}<br>";

    
    str += "hasPrimitiveInterface: %{obj.hasPrimitiveInterface()} <br>";
    str += "hasArrayInterface: %{obj.hasArrayInterface()} <br>";
    if (obj.hasArrayInterface()) 
        str += "getArrayCount: %{obj.getArrayCount()} <br>";

    str += "hasMapInterface: %{obj.hasMapInterface()} <br>";
    if (obj.hasMapInterface())
        str += "getMapCount: %{obj.getMapCount()} <br>";

    str += "hasGeneratorInterface: %{obj.hasGeneratorInterface()} <br>";
    if (obj.hasGeneratorInterface())
        str += "generator: %{obj.generator} <br>";

    str += "hasVariableInterface: %{obj.hasVariableInterface()} <br>";
    str += "hasFunctionInterface: %{obj.hasFunctionInterface()} <br>";
    str += "hasByteDataInterface: %{obj.hasByteDataInterface()} <br>";
    if (obj.hasByteDataInterface())
        str += "getByteDataCount: %{obj.getByteDataCount()} <br>";

    str += "hasObjectSelectorInterface: %{obj.hasObjectSelectorInterface()}<br><br>";

    str += "<b>Module Class Info of current Object</b><br>"
    if (obj.isInstanceOf(Module))
    {
        str += dumpModuleInfo(obj);
    }
    str += "<br>";

    str += "<b>Class Info for this object (class_id)</b><br>"
    str += dumpModuleInfo(obj.class_id);
    str += "<br>";

    if (obj.hasArrayInterface())
    {
        str += "<b>Array Info (%{obj.getArrayCount()} elements)</b><br>";
        str += dumpArray(obj);
    }

    if (obj.hasMapInterface() && !obj.isInstanceOf(Module)) // Avoid re-printing module attrs
    {
        str += "<b>Map Info (%{obj.getMapCount()} elements)</b><br>";
        str += dumpMap(obj);
    }

    if (obj.__super__.name != "Object")
    {
        str += "<b>Class Information for __super__ inheritance (%{obj.__super__.name})</b><br>";
        str += dumpModuleInfo(obj.__super__);
    }

    return str;
}

// setenv
// __super__


function getStatic(mod, name)
{
    return mod[name];
}

var queryParameters = _REQUEST;
if (queryParameters.size > 0)
{
    if (queryParameters["path"] != nil)
    {
        var paths = queryParameters["path"].split("->");

        var i = 1;
        var current;
        switch (paths[0])
        {
            case "self":
            case "__module__":
                current = __module__;
                break;

            case "ARGV": // Environment variables
                current = ARGV;
                break;

            case "System":
                current = System;
                break;

            case "projects":
                current = __projects__;
                break;

            case "prototypes":
                current = __prototypes__;
                break;

            case "main":
                current = main;
                break;

            case "LOAD_PATH":
                current = LOAD_PATH;
                break;

            case "System":
                current = System;
                break;

            default:
                current = __toplevel__;
                break;
        }

        for (; i < paths.size; i++)
        {
            var path = paths[i];
            var obj = getStatic(current, path);
            if (obj == nil)
            {
                return "ERR: %{path} was nil";
            }

            current = obj;
        }

        return dumpObject(current);
    }
}
