module PROJECT::ROOT
{
    static watcher = nil;
    static count = 10 * 30;

    static entry_names = [
        InfoWindow::slot0::on::name,
        InfoWindow::slot1::on::name,
        InfoWindow::slot2::on::name,
        InfoWindow::slot3::on::name,
        InfoWindow::slot4::on::name,
        InfoWindow::slot5::on::name
    ];

    static entry_ons = [
        InfoWindow::slot0::on,
        InfoWindow::slot1::on,
        InfoWindow::slot2::on,
        InfoWindow::slot3::on,
        InfoWindow::slot4::on,
        InfoWindow::slot5::on
    ];

    static entry_waits = [
        InfoWindow::slot0::base::waiting,
        InfoWindow::slot1::base::waiting,
        InfoWindow::slot2::base::waiting,
        InfoWindow::slot3::base::waiting,
        InfoWindow::slot4::base::waiting,
        InfoWindow::slot5::base::waiting
    ];

    function setBlinkActor(widget, period)
    {
        widget.actor = main::menu::MBlinkActor(widget);
        widget.actor.period = period;
    }

    function onInitialize(context)
    {
        ForceStart.visible = false;
        context.cursor_visible = false;

        var crs = CourseRoot::getCurrentCourse();
        if (crs.substr(0, 2) == "r_")
            crs = crs.substr(2);
        
        if (main::menu::MSystem::GetVersionBranch() == "vdim")
        {
            Mpeg.visible = false;
            BG.image_path = "image/arcade/crs/" + crs + ".png";
            BG.doInitialize(context);
        }
        else
            BG.visible = false;

        Logo.image_path = "piece/crs_logo/" + crs + ".img";
        Logo.doInitialize(context);
        Logo.adjustSize();

        var entries = InfoWindow;
        var entry = entries.first;

        while (entry != nil)
        {
            entry.visible = false;
            entry = entry.next;
        }

        main::network.raceMenuNotifySequence(7);

        watcher = main::menu::MScriptWatcher(context, onTick);
        watcher.interval = 10;
        watcher.append();

        CountDown.visible = false;
        Pregrid.active = false;
        Mpeg.movie_name = crs;
    }

    function onFinalize(context)
    {
        if (watcher != nil)
        {
            watcher.remove();
            watcher = nil;
        }
    }

    function onKeyPress(context, event) { return EVENTRESULT_CONTINUE; }

    function show_info()
    {
        import main::network;

        network.gatherMemberInfoLAN();

        var num = network.raceMenuGamePlayers();
        var entries = InfoWindow;
        var entry = entries.first;
        var my_index = network.raceMenuMyIndex();
        var slot_no = 0;

        for (var i = 0; i < num; i++)
        {
            if (entry == nil)
                break;

            var style = network.raceMenuPeekStyle(i);

            if (style == "play")
            {
                entry.visible = true;

                var res = network.raceMenuPeekAccountName(i);
                entry_names[slot_no].text = res;
                entry_ons[slot_no].visible = true;
                entry_waits[slot_no].visible = false;
                entry_ons[slot_no].active = i == my_index;

                slot_no++;
                entry = entry.next;
            }
        }
    }

    function end_menu()
    {
        main::network.raceMenuEnd();
        ForceStart.visible = false;
        CountDown.visible = true;
        ROOT.setFocus(nil);
        Pregrid.active = true;
    }

    function onTick(context)
    {
        import main::network;
        
        if (network.raceMenuChanged())
            show_info();

        if (!CountDown.visible)
        {
            if (network.raceMenuForceEnd())
                end_menu();
            
            var member_num = network.raceMenuGamePlayers();
            var member_complete = true;

            for (var i = 0; i < member_num; i++)
            {
                if (network.raceMenuPeekStyle(i) != "play")
                    continue;
                
                if (network.raceMenuPeekSequence(i) < 7)
                {
                    member_complete = false;
                    break;
                }
            }

            if (member_complete)
                end_menu();
        }
        else 
        {
            CountDown.text = count / 82;
            count -= 10;
            
            if (count < 0)
            {
                GameRoot::doGame(context);
                return;
            }
        }

        MatchingRoot::checkDisconnection(context);
    }

    function onCancel(context, event, item)
    {
        main::sound.play("disable");
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ForceStart
{
    function onActivate(context, event, item)
    {
        main::sound.play("next");
        end_menu();
        return EVENTRESULT_FILTER;
    }
}