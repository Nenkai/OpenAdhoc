static sBARESACount = 0;
static sBAREQCount = 0;
static sCurrentPipe = nil;

function setChatPipe(pipe)
{
    sCurrentPipe = pipe;
}

function onChatMemberEntered(context, name)
{
    if (sCurrentPipe != nil)
    {
        var mes = context.translate(PROJECT, "OnlineMessage", "ON_CHAT_MEMBER_ENTERED").build(name);
        sCurrentPipe.put("%C088" + mes + "");
    }
}

function onChatMemberLeft(context, name)
{
    if (sCurrentPipe != nil)
    {
        var mes = context.translate(PROJECT, "OnlineMessage", "ON_CHAT_MEMBER_LEFT").build(name);
        sCurrentPipe.put("%C088" + mes + "");
    }
}

function onChatMemberEnteredRace(context, name, race_name)
{
    if (sCurrentPipe != nil)
    {
        var mes = context.translate(PROJECT, "OnlineMessage", "ON_CHAT_MEMBER_ENTERED_RACE").build(name, race_name);
        sCurrentPipe.put("%C088" + mes + "");
    }
}

function onChatMemberLeftRace(context, name)
{
    if (sCurrentPipe != nil)
    {
        var mes = context.translate(PROJECT, "OnlineMessage", "ON_CHAT_MEMBER_LEFT_RACE").build(name);
        sCurrentPipe.put("%C088" + mes + "");
    }
}

function onSystemMessage(context, message)
{
    openEqualizedConfirmDialog(context, 0, message);
}

function onDisconnectEvent(context)
{
    terminateRTIME();
    openConfirmDialog(context, DIALOG_OK, context.translate(PROJECT, "OnlineMessage", "DISCONNECTED"));
    restart(context);
}

function onReceiverNotLobbyEvent(context)
{
    var pipe = main::network.im_pipe;
    pipe.put("%Cf88" + context.translate(PROJECT, "OnlineMessage", "RECEIVER_BUSY") + "");
}

function onSyncFailedEvent(context)
{
    openConfirmDialog(context, DIALOG_OK, context.translate(PROJECT, "OnlineMessage", "ON_SYNC_FAILED_EVENT"));
}

function openBuddyConfirmDialog(context, type, message, title, yes, no)
{
    MessageProject::BuddyConfirmDialog::open(context, type, message, title, nil, yes, no);
}

function onBuddyAddingAttempt(context, id)
{
    var mes = context.translate(PROJECT, "OnlineMessage", "ON_BUDDY_ADDING_ATTEMPT");
    openBuddyConfirmDialog(context, 0, mes);
	return;
}

function onBuddyAddRequest(context, id, name)
{
    var ret = 1;
    var list = main::network.getBuddyList();

    if (list != nil)
    {
        if (list.size >= 100)
        {
            var mes = context.translate(PROJECT, "OnlineMessage", "ON_BUDDY_ADD_BUT_CANNOT").build(name);
            openBuddyConfirmDialog(context, 0, mes);
            ret = 0;
        }
        else
        {
            var mes = context.translate(PROJECT, "OnlineMessage", "ON_BUDDY_ADD").build(name);
            ret = openBuddyConfirmDialog(context, 4, mes);
            if (ret)
            {
                sBAREQCount++;
            }
        }
    }
    else
    {
        main::sound.play("disable");
        openBuddyConfirmDialog(context, 2, getErrorMessage(context));
        ret = 0;
    }

    return ret;
}

function onBuddyAddResponseAccepted(context, id, name)
{
    var mes = context.translate(PROJECT, "OnlineMessage", "ON_BUDDY_ACCEPT").build(name);
    sBARESACount++;
    openBuddyConfirmDialog(context, 0, mes);
	return;
}

function onBuddyAddResponseDenied(context, id, name)
{
    if (id < 0)
    {
        main::sound.play("disable");
        openBuddyConfirmDialog(context, 2, getErrorMessage(context));
		return;
    }
    else
    {
        var mes = context.translate(PROJECT, "OnlineMessage", "ON_BUDDY_DENIED").build(name);
        openBuddyConfirmDialog(context, 0, mes);
        return;
    }
}

function onBuddyAddResponseFailed(context, id, name)
{
    var mes = context.translate(PROJECT, "OnlineMessage", "ON_BUDDY_FAILED").build(name);
    openBuddyConfirmDialog(context, 0, mes);
	return;
}

function onImBusy(context, msg)
{
    "%Cf88" + context.translate(PROJECT, "OnlineMessage", "ON_IM_BUSY") + "";
	return;
}

static on_game_pulse_cb = nil;

function setGamePulseCB(func)
{
    on_game_pulse_cb = func;
}

function onGamePulse(context, msg)
{
    if (on_game_pulse_cb != nil)
        on_game_pulse_cb(context, msg);
}