















#include "projects/gt6/option/KeyConfig.h"
#include "projects/gt6/option/PS3ControllerRoot.h"


module ROOT
{
    #include "projects/gt6/dev_runviewer/RunviewerUtil.ad"

    attribute sWatcher = nil;

    static runviewer_name = "";

    method onRealize(context)
    {
        Title::label.text = "総合プレビュー（GT6）";
        runviewer_name = Title::label.text;
    }

    method onLoad(context)
    {
        if (main::pdiext::MSystemConfiguration::isSDTV())
        {
            hidden::Item::label.original_scale_x = 2.8;
            hidden::Item::label.original_scale_y = 2.8;
            hidden::Item::value.original_scale_x = 2.8;
            hidden::Item::value.original_scale_y = 2.8;
        }
    }

    function onUnload(update_context)
    {

    }

    static black = main::menu::MColorObject(0.05, 0.05, 0.05);
    static red = main::menu::MColorObject(0.1, 0.05, 0.05);
    static blue = main::menu::MColorObject(0.05, 0.05, 0.1);
    static purple = main::menu::MColorObject(0.075, 0.05, 0.1);
    static purple2 = main::menu::MColorObject(0.0875, 0.05, 0.1);
    static green = main::menu::MColorObject(0.05, 0.1, 0.05);
    static yellow = main::menu::MColorObject(0.1, 0.1, 0.05);
    static cyan = main::menu::MColorObject(0.05, 0.1, 0.1);
    static gray = main::menu::MColorObject(0.1, 0.1, 0.1);
    static orange = main::menu::MColorObject(0.1, 0.075, 0.05);
    static light_blue = main::menu::MColorObject(0.075, 0.075, 0.1);
    static light_cyan = main::menu::MColorObject(0.075, 0.1, 0.1);
    static transparent = main::menu::MColorObject(0.0, 0.0, 0.0, 0.0);
    
    hidden.visible = false;
    hidden::Item::value.visible = false;
    hidden::Item::ChipF.visible = false;
    hidden::Item::slider.visible = false;
    hidden::Item::Input.visible = false;
    hidden::Item::cursor.visible = false;

    static sInsideInternalNetwork = true; 

    static exist_log_file = true;

    static noyes_list = [ 
        [0, "いいえ"], 
        [1, "はい"]
    ];

    static yesno_list = [ 
        [1, "はい"], 
        [0, "いいえ"]
    ];

    function generic_sort_function(a, b)
    {
        return a < b;
    }

    function game_data_apply_callback() 
    { 
        main::GAME_STATUS.apply(); 
    }

    function get_car_from_garage() { return main::GAME_STATUS.user_profile.garage.getRidingCar(); }

    function executeGameParameter(context, gp, is_autodemo)
    {

        main::ORG.setUseAutoInCarReplay(main::GAME_STATUS.branch.use_replay_incar_cut);

        main::ORG.setEnableFullSelectCamera(main::GAME_STATUS.branch.eneble_full_replay_camera_);

        if (is_autodemo != nil && is_autodemo == true) {
            GameParameterUtil::executeAutoDemo(context, gp, GAME_STATUS);
        } else {
            GameParameterUtil::executeEvent(context, gp, GAME_STATUS);
        }
    }

    function executeGameParameterXML(path, is_autodemo)
    {
        var context = main::ContextMain;
        if (!checkIsOnlineAvailable())
        {
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, "現在の設定ではネットワークが利用できません。\n実行引数に network_available を追加して再起動してください");
            return;
        }

        var fst = main::pdistd::ReadFile(path);
        var buf = fst["buffer"];
        if (buf != nil){
            var gp_list = GameParameterUtil::parseXML(buf);
            if (gp_list.size <= 0)
            {
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, "ファイル\n{0}\nの読み込みに失敗しました？".build(path));
            }
            else
            {
                GameParameterUtil::begin();
                executeGameParameter(context, gp_list[0], is_autodemo);
                GameParameterUtil::end();
            }
        }
        else
        {
            var error_str = "Can't open file!\n%s".format(path);
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, error_str);
        }
    }

    function putDevLog(button_name, button_index)
    {
        if (!sInsideInternalNetwork)
            return;

        if (!exist_log_file)
            return;

        var dir = "/app_home/preview/ps3/log/runviewer/";
        if (!pdistd::Exist(dir))
        {
            exist_log_file = false;
            return;
        }

        var file = main::pdistd::MNetworkInterface::getMacAddress().split(":").join("_") + ".log";
        var path = dir + file;

        var time = main::pdistd::MTime::getCurrentTime();
        var time_str = "%04d/%02d/%02d %02d:%02d:%02d".format(time.year, time.month, time.day, time.hour, time.minute, time.second);
        var vmk_version = main::pdiext::MProductInformation::GetProductInformationString("CompileVMKVersion");
        var build_date = main::pdiext::MProductInformation::GetProductInformationString("CompileDateTime");
        var svn_revision = main::pdiext::MProductInformation::GetSVNRevision();
        var fsroot = main::AppOpt["fsroot"] != nil ? main::AppOpt["fsroot"] : "none";
        var osd_name = main::pdiext::MSystemConfiguration::GetOSDUserName();
        var online_name = PDINetwork.getClientName();

        var tree_str;
        if (button_index != nil) 
        {
            tree_str = sStack.getTreeStr() + button_name;
        }
        else 
        {
            tree_str = button_name;
        }
        var buf = "%{time_str},%{button_name},%{vmk_version},%{build_date},%{svn_revision},%{fsroot},%{osd_name},%{online_name},%{tree_str}\n";

        var st = main::pdistd::GetFileStatus(path);
        if (st["result"] == 0)
        {
            main::pdistd::AppendFile(path, buf);
        }
        else 
        {
            main::pdistd::WriteFile(path, buf);
        }
    }

    static submenu_load_map = Map();
    
    function loadScript(context, name)
    {
        var has_load = submenu_load_map[name];
        if (has_load == nil)
        {
            PROJECT.load("/projects/gt6/dev_runviewer/%{name}");
            submenu_load_map[name] = true;
        }
    }

    function startProject(context, project)
    {
        SequenceUtil::startProject(context, project, "dev_runviewer");
    }

    function on_single_race(context, index, menuitem, item, arg)
    {
        loadScript(context, "RaceMenu");
        RaceMenu::doSingleRace(context, index, menuitem, item);
    }

    function on_autodemo(context, index, menuitem, item, arg)
    {
        loadScript(context, "RaceMenu");
        RaceMenu::doAutoDemo(context, index, menuitem, item);
    }

    function on_mov_single_race(context, index, menuitem, item, arg)
    {
        loadScript(context, "MovieRendererMenu");
        MovieRendererMenu::startMovieRendererSetting(context);
        on_single_race(context, index, menuitem, item, arg);
    }

    function on_mov_autodemo(context, index, menuitem, item, arg)
    {
        loadScript(context, "MovieRendererMenu");
        MovieRendererMenu::startMovieRendererSetting(context);
        on_autodemo(context, index, menuitem, item, arg);
    }

    function on_save_game(context, index, menuitem, item, arg)
    {
        main::BranchStatus::saveRunviewer(context);
    }

    function on_update_select_car(context, index, menuitem, item)
    {
        var cp = get_car_from_garage();
        if (cp != nil)
        {
            var car_label = cp.getCarLabel();

            item["value"].text = car_label + "  (" + gtengine::MSpecDB::getCarName(car_label) + ")";
        } 
        else {
            item["value"].text = "-";
        }
    }

    function on_select_car_selected(context, index, menuitem, item)
    {
        loadScript(context, "CarMenu");
        CarMenu::onStart(context, index, menuitem, item);
    }

    function on_update_car_config(context, index, menuitem, item)
    {
        var cp = get_car_from_garage();
        if (cp == nil)
        {
            item.ChipF.visible = false;
        }
        else 
        {
            var car_label = cp.getCarLabel();
            var car_color = cp.color;
            item["value"].text = gtengine::MSpecDB::getCarColorName(car_label, car_color);

            item.ChipF.ColorChipFace.setCarColor(car_label, car_color);
            item.ChipF.visible = true;
        }
    }

    function on_car_config_selected(context, index, menuitem, item)
    {
        loadScript(context, "CarConfigMenu");
        CarConfigMenu::onStart(context, index, menuitem, item);
    }

    function on_update_select_course(context, index, menuitem, item)
    {
        item["value"].text = main::GAME_STATUS.branch.current_course;
    }   

    function on_select_course_selected(context, index, menuitem, item)
    {
        loadScript(context, "CourseMenu");
        CourseMenu::onStart(context, index, menuitem, item);
    }


    function on_select_race_selected(context, index, menuitem, item)
    {
        loadScript(context, "RaceMenu");
        RaceMenu::onStart(context, index, menuitem, item);
    }

    function on_race_config_selected(context, index, menuitem, item)
    {
        loadScript(context, "RaceConfigMenu");
        RaceConfigMenu::onStart(context, index, menuitem, item);
    }

    function on_select_app_selected(context, index, menuitem, item)
    {
        loadScript(context, "AppMenu");
        AppMenu::onStart(context, index, menuitem, item);
    }

    function on_option_selected(context)
    {
        var project = main::manager.loadProject("%{main::PROJECT_ROOT_DIR}/option/option");
        finally { main::manager.unloadProject(project); }
        OptionProject::OptionRoot.open(context);
    }

    function on_design_work_selected(context)
    {
        startProject(context, "dev_design_work");
    }

    function on_course_maker(context, index, menuitem, item)
    {
        loadScript(context, "CourseMakerMenu");

        CourseMakerMenu::onStart(context, index, menuitem, item);
    }

    function checkIsOnlineAvailable() 
    {
        if (PDINetwork.isInitialized())
            return true
        else 
            return false;
    }

    function on_movie_renderer_selected(context, index, menuitem, item)
    {
        loadScript(context, "MovieRendererMenu");
        MovieRendererMenu::onStart(context, index, menuitem, item);
    }

    function on_sound_preview(context, index, menuitem, item, menu)
    {
        loadScript(context, "SoundMenu");
        SoundMenu::open(context);
    }


    function on_movie_view(context, index, menuitem, item, menu)
    {
        loadScript(context, "MovieMenu");
        MovieMenu::onStart(context, index, menuitem, item);
    }


    function on_thumbnail_capture(context, index, menuitem, item)
    {
        loadScript(context, "CaptureThumbnailMenu");
        CaptureThumbnailMenu::onStart(context, index, menuitem, item);
    }

    function on_start_gamemaker(context, index, menuitem, item, arg)
    {
        PROJECT.load("/projects/gt6/dev_runviewer/GameMaker");
        
        GameMaker::onStart(context, menuitem.label, index);
    }




    function on_replay_selected(context, index, menuitem, item, arg)
    {
        loadScript(context, "ReplayMenu");

        ReplayMenu::onStart(context, index, menuitem, item);
    }


    function on_exec_replayfile(context, index, menuitem, item, fexmenu)
    {
        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, 
            "{0} を\nリプレイとして再生しますか？".build(fexmenu.file));
        if (!res)
            return;

        var gp = GameParameterUtil::createReplayWithPath(fexmenu.file);
        if (gp == nil)
        {
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, "このリプレイファイルは再生できません。");
            return;
        }
        GameParameterUtil::execute(context, gp);
    }

    function on_copy_replayfile(context, index, menuitem, item, fexmenu)
    {
        var cols = fexmenu.file.split("/");
        var filename = cols[cols.size - 1];
        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, 
            "{0}\nをコピーしますか？".build(filename));
        if (!res)
            return;
        
        var mtime = pdiext::getBetterTime().toLocal();
        var dstfile = "%04d%02d%02d%02d%02d%02d".format(mtime.year, 
            mtime.month,
            mtime.day,
            mtime.hour,
            mtime.minute,
            mtime.second) + "-" + filename;
        var dstpath = "/app_home/preview/ps3/replay/00copied/" + dstfile;
        var res = pdistd::CopyFile(fexmenu.file, dstpath);
        if (res == 0) {
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, 
                "{0}\nにコピーしました。".build(dstpath));
        } else {
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, 
                "{0}\nにコピーできませんでした。".build(dstpath));
        }
    }

    function on_save_replay_with_latest(context)
    {
        var path = ORG.replay_work_path;
        if (!pdistd::Exist(path))
        {
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, "NO REPLAY SAVED.");
            return;
        }

        var res = UIKitProject::SaveReplayRoot.open(context, ReplayFileUtil::MODE_REPLAY);
    }


    function on_preview_selected(context, index, menuitem, item, menu)
    {
        loadScript(context, "PreviewMenu");

        PreviewMenu::onStart(context, index, menuitem, item);
    }

    static movie_renderer_menuitem = MenuItem(MenuItemTEXT, "ムービーレンダラ", "ムービーレンダラの設定をします。", nil, nil, on_movie_renderer_selected);

    static top_menu = [
        red,
        MenuItem(MenuItemTEXT, "レース開始（STARTボタンでも可）", "レースを開始します。", nil, nil, on_single_race),
        MenuItem(MenuItemTEXT, "オートデモ開始（SELECTボタンでも可）", "オートデモを開始します。", nil, nil, on_autodemo),
        MenuItem(MenuItemTEXT, "設定をセーブ（Ｌ１ボタンでも可）", "現在の設定をセーブデータにセーブします。", nil, nil, on_save_game),
        
        green,
        MenuItem(MenuItemTEXT, "クルマ選択", "クルマを選択します。", nil, on_update_select_car, on_select_car_selected),
        MenuItem(MenuItemTEXT, "コース選択", "コースを選択します。", nil, on_update_select_course, on_select_course_selected),
        MenuItem(MenuItemTEXT, "レース選択", "各種レース形式を選択できます。", nil, nil, on_select_race_selected),
        
        blue,
        MenuItem(MenuItemTEXT, "クルマ設定 >>", "クルマの細かい設定を変更します。色とかホイールとか", nil, on_update_car_config, on_car_config_selected),
        MenuItem(MenuItemTEXT, "レース設定 >>", "レースの細かい設定を変更します。出走台数、敵車、スタート形式など", nil, nil, on_race_config_selected),

        red,
        movie_renderer_menuitem,
        MenuItem(MenuItemTEXT, "ゲームメーカー", "ゲームメーカーで様々なゲームを作ることができます。が、できません。", nil, nil, on_start_gamemaker),
        MenuItem(MenuItemTEXT, "リプレイ、セーブファイル >>", "リプレイのロード、ディレクトリ設定、ファイル関連", nil, nil, on_replay_selected),
        MenuItem(MenuItemTEXT, "総合プレビュー、デバッグ >>", "ドライバーデバッグ、群衆、ミップマップなど", nil, nil, on_preview_selected),

        green,
        MenuItem(MenuItemTEXT, "各種アプリケーション起動 >>", "様々な機能を起動します。", nil, nil, on_select_app_selected),
        MenuItem(MenuItemTEXT, "オプション起動", "製品版と同等のオプション画面を開きます。総合プレビュー上でもたいていの設定は機能しますが、一部、反映されないことがあります。", nil, nil, on_option_selected),
        MenuItem(MenuItemTEXT, "design_work 起動", "メニューデザインのテスト用のプロジェクト（design_work）を起動します。「総合プレビューを起動する」を選択することで戻って来ることができます。", nil, nil, on_design_work_selected),
        MenuItem(MenuItemTEXT, "コースメーカー >>", "コースメーカー関連", nil, nil, on_course_maker),
        
        MenuItem(MenuItemTEXT, "サウンドプレビュー", "サウンド開発用の BGM、効果音プレビューアです。", nil, nil, on_sound_preview),
        MenuItem(MenuItemTEXT, "ムービー（PAMF）プレビュー", "PAMFムービーファイルをプレビューすることが出来ます。", nil, nil, on_movie_view),

        gray,
        MenuItem(MenuItemTEXT, "サムネイルキャプチャー", "サムネイルをキャプチャーします。", nil, nil, on_thumbnail_capture),
    ]

    /////////////////////////////////
    // METHODS
    /////////////////////////////////

    method onInitialize(context)
    {
        Menu::ScalarInterpolator.reverse = true;

        Info::BuildVersion::value.text = main::pdiext::MProductInformation::GetProductInformationString("CompileVMKVersion");
        Info::BuildDate::value.text = main::pdiext::MProductInformation::GetProductInformationString("CompileDateTime");
        Info::FSRoot::value.text = main::AppOpt["fsroot"] != nil ? main::AppOpt["fsroot"] : "none";

        main::GAME_STATUS.branch.directory_name = main::pdiext::MSystemConfiguration::GetOSDUserName();
        main::GAME_STATUS.branch.directory_name_devfs = "NONE";
        
        if (main::GAME_STATUS.branch.show_meters == 1)
        {
            main::pdiext::SetDrawPerfMeter(true);
        }
        else
        {
            main::pdiext::SetDrawPerfMeter(false);
        }


        var natInfo = main::pdistd::MNetworkInterface::getNatInfo();
        if (natInfo != nil && 
            !natInfo["address"].endsWith("210.164.8.252") && 
            !natInfo["address"].endsWith("210.251.244.69"))
        {
            
            sInsideInternalNetwork = false;
        }
        else
        {
            sInsideInternalNetwork = true;
        }

        SoundUtil::SetupSound(SoundUtil::SCENE_MENU);
        SoundUtil::SetSystemBGMEnable(context, true);


        context.pushEvent(main::menu::MScriptEvent(context, self, "on_initialize"));
    }

    method on_initialize(context)
    {
        var cp = get_car_from_garage();

        if (cp != nil)
            cp.ownArcadePartsAll();
        
        
        main::ORG.setMovieStatePrint(false);
        if (main::gtengine::MOrganizer.defined("setMovieEnable"))
        {
            main::ORG.setMovieEnable(false);
        }

        if (!close_menu(context))
        {
            open_menu(context, runviewer_name, top_menu, 0, 0);
        }

        if (main::GAME_STATUS.branch.movie_renderer_mode)
        {
            on_movie_renderer_selected(context, 0, movie_renderer_menuitem, nil);
        }

        context.time_after_last_input = 0;

        applySideBrake(context);
    }

    method onFinalize(context)
    {
        if (main::GAME_STATUS.branch.show_meters != 0)
            main::pdiext::SetDrawPerfMeter(true);
    }

    method applySideBrake(context)
    {
        var sPort = 0;
        var sConfig = main::GAME_STATUS.user_profile.option.key_config.getConfig(sPort);
        
        var play_config = sConfig[main::gtengine::InputMode::PLAY_NORMAL];
        
        var sConfig_SIXAXIS = play_config["SIXAXIS"];


        var info_ = sKey_CIRCLE;

        var port_channel = main::pdistd::SuperPortAnalogChannel[info_.analog_channel];
        var analog_config = sConfig_SIXAXIS["analog"];
        var key_config = analog_config[port_channel];

        if (key_config != 0)
            return;

        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, "サイドブレーキを○ボタンにアサインしますか？");
        
        if (!res)
            return;
        
        var focus_index = 6;
        var current_action = info_.key_action_list[focus_index];


        if (info_.analog_channel != nil)
        {
            port_channel = main::pdistd::SuperPortAnalogChannel[info_.analog_channel];
            analog_config = sConfig_SIXAXIS["analog"];


            if (current_action & 2048)
            {
                analog_config[port_channel] = current_action - 2048;
                var after = sAnalogCodeMap_forLocalizeKey[analog_config[port_channel]];
            }
            else
            {
                analog_config[port_channel] = main::gtengine::AnalogCode::INVALID;
            }
        }

        if (info_.button_channel != nil)
        {
            port_channel = main::pdistd::SuperPortButtonBit[info_.button_channel];
            var button_config = sConfig_SIXAXIS["button"];


            if (current_action & 1024)
            {
                button_config[port_channel] = current_action - 1024;
                var after = sButtonCodeMap_forLocalizeKey[button_config[port_channel]];
            }
            else
            {
                button_config[port_channel] = main::gtengine::ButtonCode::INVALID;
            }
        }

        main::GAME_STATUS.user_profile.option.key_config.setConfig(sConfig, sPort);
    }

    class StackUnit
    {
        attribute title = nil;
        attribute menuitem_list = nil;
        attribute prev_focus_index = nil;
        attribute cancel_cb = nil;
        attribute create_menulist_cb_arg = nil;
        attribute preback_cb = nil;
        attribute preback_cb_arg = nil;

        function applyAppearance(list)
        {
            var current_col = gray;
            var items = [];
            foreach (var item in list)
            {
                if (item.isInstanceOf(main::menu::MColorObject)) {
                    current_col = item;
                } 
                else {
                    if (item.base_color == nil)
                        item.base_color = current_col;
                    items.push(item);
                }
            }
            return items;
        }

        method __init__(title, menuitem_list, prev_focus_index, cancel_cb, create_menulist_cb_arg, preback_cb, preback_cb_arg)
        {
            self.title = title;
            
            if (menuitem_list != nil)
                self.menuitem_list = applyAppearance(menuitem_list);
            else
                self.menuitem_list = nil;
            
            self.prev_focus_index = prev_focus_index;
            self.cancel_cb = cancel_cb;
            self.create_menulist_cb_arg = create_menulist_cb_arg;
            self.preback_cb = preback_cb;
            self.preback_cb_arg = preback_cb_arg;
        }
    }

    class Stack
    {
        attribute index = nil;
        attribute stack_array = nil;

        method __init__()
        {
            self.stack_array = [];
            self.index = 0;
        }

        method isVacant() { return self.stack_array.size == 0; }

        method push(unit)
        {
            self.stack_array.push(unit);
            self.index++;
        }

        method pop() {
            if (self.index > 1)
            {
                self.index--;
                return self.stack_array.pop();
            }
            else
                return nil;
        }

        method getCurrent(){
            var idx = self.stack_array.size - 1;
            if (idx < 0 || self.stack_array.size <= idx)
                return nil;
            else 
                return self.stack_array[idx];
        }
        method getTreeStr() {
            var str = "";
            foreach (var unit in self.stack_array)
            {
                str += "%03d".format(unit.prev_focus_index) + "|";
            }
            return str;
        }
    }

    static sStack = Stack();

    function start_menu(context, stack_unit, focus_index)
    {
        ROOT::Title::label.text = stack_unit.title;

        if (stack_unit.create_menulist_cb_arg != nil)
        {
            |var cb, var arg| = stack_unit.create_menulist_cb_arg;
            var menuitem_list = cb(context, arg);
            stack_unit.menuitem_list = StackUnit::applyAppearance(menuitem_list);
        }

        var list = stack_unit.menuitem_list;

        var listbox = Menu.ListBox;

        listbox.setItemCount(0);

        listbox.setItemTemplate(context, hidden::Item);
        listbox.setItemCount(list.size);
        if (focus_index != nil)
            listbox.focus_index = focus_index;
    }

    function open_menu(context, title, list, prev_focus_index, focus_index, cancel_cb, create_menulist_cb_arg, preback_cb, preback_cb_arg)
    {
        var stack_unit = StackUnit(title, list, prev_focus_index, cancel_cb, create_menulist_cb_arg, preback_cb, preback_cb_arg);
        sStack.push(stack_unit);
        start_menu(context, stack_unit, focus_index);
    }

    function restart_menu(context)
    {
        var stack_unit = sStack.getCurrent();
        var listbox = Menu.ListBox;
        start_menu(context, stack_unit, listbox.focus_index);
    }

    function close_menu(context)
    {
        var prev_stack_unit = sStack.pop();
        if (prev_stack_unit == nil) 
            return false;
        else
        {
            if (prev_stack_unit.cancel_cb != nil)
                prev_stack_unit.cancel_cb(context);
            
            var stack_unit = sStack.getCurrent();
            start_menu(context, stack_unit, prev_stack_unit.prev_focus_index);
        }
        
        return true;
    }

    function push_menu_stack(context, prev_focus_index)
    {
        sStack.push(StackUnit("dummy", nil, prev_focus_index));
    }

    function onCancel(context)
    {
        main::sound.play("cancel");

        if (main::GAME_STATUS.branch.movie_renderer_mode)
        {

            if (sStack.index <= 2)
            {
                main::GAME_STATUS.branch.movie_renderer_mode = 0;
                main::ORG.setMovieStatePrint(false);
                if (main::gtengine::MOrganizer.defined("setMovieEnable"))
                    main::ORG.setMovieEnable(false);
            }
        }

        var back_ok = true;
        var unit = sStack.getCurrent();
        if (unit.preback_cb != nil)
            back_ok = unit.preback_cb(context, unit.preback_cb_arg);
        if (!back_ok)
            return EVENTRESULT_FILTER;

        var res = close_menu(context);
        if (!res)
        {
            if (DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, "キャンセルボタンが押されました。\nプロジェクトを再ロードしますか？\n(開発者用)"))
            {
                // Restart
                SequenceUtil::startProject(context, "dev_runviewer");
            }
        }
        return EVENTRESULT_FILTER;
    }

    module Menu::ListBox
    {
        method onVisibleNotify(context, indexes)
        {
            if (sStack.isVacant())
                return;

            var menu_items = sStack.getCurrent().menuitem_list;
            if (menu_items == nil)
                return;

            foreach (var i in indexes)
            {
                if (i >= menu_items.size)
                    continue;
                if (self.getItemVisible(i))
                {
                    var item = self.getItemWidget(i);
                    if (item == nil)
                        item = self.getItemWidget(i, context);

                    if (item != nil)
                    {
                        item.cursor.visible = true;
                        var menuitem = menu_items[i];
                        
                        var init_func = menuitem.on_init_func;
                        if (init_func != nil)
                            init_func(context, menuitem, item);
                        
                        item.value.visible = menuitem.type == MenuItemTEXT;
                        item.slider.visible = menuitem.type == MenuItemSLIDER;
                        item.Input.visible = menuitem.type == MenuItemINPUT;

                        item.num.text = "%d".format(i + 1);
                        item.label.text = menu_items[i].label;
                        var func = menuitem.on_update_func;
                        if (func != nil)
                        {
                            if (func.isInstanceOf(String))
                                item.value.text = func;
                            else
                                func(context, i, menuitem, item);
                        }
                        else
                        {
                            item.label.w = item.label.w + item.value.w;
                        }
                        item.base.setColor(menuitem.base_color);

                        if (menuitem.base_color == transparent)
                        {
                            item.base.bar.setColor(transparent);
                        }
                    }
                }
            }
        }

        method onFocusNotify(context, new_index, old_index)
        {
            if (sStack.isVacant())
                return;
            
            var menu_items = sStack.getCurrent().menuitem_list;

            var new_menuitem = menu_items[new_index];

            ROOT::Tooltip::tip.value = new_menuitem.tip;

            var item = self.getItemWidget(new_index, context);
            item.cursor.ScalarInterpolator.restart();

            switch (new_menuitem.type)
            {
                case MenuItemTEXT:
                    ROOT.setFocus(Menu.ListBox);
                    break;

                case MenuItemSLIDER:
                    var item = self.getItemWidget(new_index, context);
                    ROOT.setFocus(item.slider);
                    break;

                case MenuItemINPUT:
                    var wgt = self.getItemWidget(new_index, context);
                    if (new_menuitem.arg.is_number)
                        wgt.Input.input.mode = "ten_key";
                    else
                        wgt.Input.input.mode = "normal";
                    ROOT.setFocus(wgt.Input.input);

                    wgt.Input.input.tooltip = true;
                    wgt.Input.input.tooltip_key = "";
                    break;
            }

            if (new_menuitem.on_focus_func != nil)
                new_menuitem.on_focus_func(context, new_index, new_menuitem, self.getItemWidget(new_index, context));
        }

        method onActivate(context, event)
        {
            if (sStack.isVacant())
                return;
            
            var menu_items = sStack.getCurrent().menuitem_list;
            var index = self.focus_index;
            if (menu_items.size <= 0 || menu_items.size <= index)
            {
                main::sound.play("disable");
                return EVENTRESULT_STOP;
            }

            main::sound.play("ok");
            var menuitem = menu_items[index];
            putDevLog(menuitem.label, index);

            var func = menuitem.on_activate_func;
            if (func != nil)
            {
                var item = Menu.ListBox.getItemWidget(index, context);
                var arg = menuitem.arg;
                func(context, index, menuitem, item, arg);
            }
            return EVENTRESULT_STOP;
        }

        method onKeyPress(context, event)
        {
            if (sStack.isVacant())
                return EVENTRESULT_CONTINUE;

            var menu_items = sStack.getCurrent().menuitem_list;
            var list = menu_items;

            var index = self.focus_index;
            var menuitem = index >= 0 && index < menu_items.size ? menu_items[index] : nil;
            if (menuitem != nil)
            {
                var func = menuitem.on_keypress_func;
                if (func != nil)
                {
                    var item = Menu.ListBox.getItemWidget(index, context);
                    var arg = menuitem.arg;
                    var result = func(context, event, index, menuitem, item, arg);
                    if (result != 0)
                    {
                        return result;
                    }
                }
            }

            switch (event.keysym)
            {
                case CELL_PAD_CTRL_START:
                    main::sound.play("ok");
                    if (main::GAME_STATUS.branch.movie_renderer_mode)
                    {
                        putDevLog("[START]on_mov_race_start");
                        on_mov_single_race(context);
                    }
                    else
                    {
                        putDevLog("[START]on_race_start");
                        on_single_race(context);
                    }

                    return EVENTRESULT_FILTER;

                case CELL_PAD_CTRL_SELECT:
                    main::sound.play("ok");
                    if (main::GAME_STATUS.branch.movie_renderer_mode)
                    {
                        putDevLog("[SELECT]on_mov_autodemo");
                        on_mov_autodemo(context);
                    }
                    else
                    {
                        putDevLog("[SELECT]on_autodemo");
                        on_autodemo(context);
                    }
                    return EVENTRESULT_FILTER;
                
                case CELL_PAD_CTRL_L1:
                    main::sound.play("ok");
                    putDevLog("[L1]on_save_game");
                    on_save_game(context);
                    return EVENTRESULT_FILTER;
                


                case CELL_PAD_CTRL_L3_UP:
                    return EVENTRESULT_CONTINUE;
                
                case CELL_PAD_CTRL_L3_DOWN:
                    return EVENTRESULT_CONTINUE;

                case CELL_PAD_CTRL_L3_LEFT:
                    main::sound.play("cursor");
                    self.focus_index -= 10;
                    return EVENTRESULT_FILTER;
                
                case CELL_PAD_CTRL_L3_RIGHT:
                    main::sound.play("cursor");
                    self.focus_index += 10;
                    return EVENTRESULT_FILTER;

                case CELL_PAD_CTRL_L2:
                    main::sound.play("cursor");
                    self.focus_index = 0;
                    return EVENTRESULT_FILTER;

                case CELL_PAD_CTRL_R2:
                    main::sound.play("cursor");
                    self.focus_index = list.size;
                    return EVENTRESULT_FILTER;
            }
            return EVENTRESULT_CONTINUE;
        }
    }

    module hidden::Item::Input::input
    {
        attribute initialized = nil;
        attribute open_cb = nil;
        attribute close_cb = nil;
        attribute return_cb = nil;
        attribute arg = nil;

        method onInitialize(context)
        {
            if (!self.defined("initialized"))
                return;

            self.open_cb = nil;
            self.close_cb = nil;
            self.return_cb = nil;
            self.arg = nil;
            self.initialized = true;
        }

        method onFinalize(context)
        {
            if (!self.defined("initialized"))
                return;

            self.initialized = nil;
            self.open_cb = nil;
            self.close_cb = nil;
            self.return_cb = nil;
        }

        method onOpenOSK(context)
        {
            if (self.open_cb != nil)
                self.open_cb(context, self, self.arg);
        }


        method onCloseInputTextFace(context, text)
        {
            if (self.close_cb != nil)
                self.close_cb(context, text, self, self.arg);
        }

        method onTextInput(context, event)
        {
            if (self.close_cb != nil)
                self.close_cb(context, event.text, self, self.arg);

            return EVENTRESULT_CONTINUE;
        }

        method onConfirmed(context, text)
        {
            if (self.return_cb != nil)
                self.return_cb(context, text, self, self.arg);
        }
    }
}