////////////////////////////////////////////////
/// EventRewardUtil.ad /////////////////////////
/// This script handles rewarding items.
////////////////////////////////////////////////
















module EventRewardUtil
{
    // Check for a potential reward, adds it to the player's save, if possible. Saves afterward.
    // context: Window context.
    // gp: Game Parameter.
    // finish_result: Finish result for the player.
    // before_result: ?
    // lap_count: Laps completed.
    function checkEventReward(context, gp, finish_result, before_result, lap_count)
    {
        var prize_type = gp.event.reward.prize_type;
        if (prize_type > 0 && before_result != -1 && finish_result >= before_result) 
            return;
        
        
        var present_list_before = GAME_STATUS.user_profile.record.event_present.getPresentList();

        // Process money
        var prize_table = gp.event.reward.prize_table;
        if (finish_result != -1 && finish_result < prize_table.size)
        {

            var total_prize = 0;
            var gold = false;
            var silver = false;
            var bronze = false;

            if (prize_type == 1)
            {
                var before;
                if (before_result == nil || before_result < 0)
                    before = prize_table.size;
                else 
                    before = before_result;
                
                for (var i = finish_result; i < before; i++)
                {
                    total_prize += prize_table[i];
                    if (i == 0)
                        gold = true;
                    else if (i == 1)
                        silver = true;
                    else if (i == 2)
                        bronze = true;
                }

            } 
            else if (prize_table != nil && finish_result < prize_table.size) 
			{
                var total_prize = prize_table[finish_result];
                gold = finish_result == 0;
                silver = finish_result == 1;
                bronze = finish_result == 2;  
            }


            if (total_prize > 0)
            {
                var bonus_ratio = GAME_STATUS.user_profile.context.getBonusRatio();
                if (bonus_ratio != nil) {
                    var total_prize = (total_prize * bonus_ratio).toInt();
                    bonus_ratio = (bonus_ratio * 100).toInt();
                }

                enableInput(context);
                syncLoadingForStartingQuickMenu();


                var finish_order = nil;
                if (gp.event.eval_condition.type == gtengine::EvalType::NONE) 
                    finish_order = finish_result;

                DialogUtil::openPrizeDialog(context, total_prize, true, bonus_ratio, [gold, silver, bronze], finish_order);
                disableInput(context);
            }
        }

        // Process regular rewards
        var present = gp.event.reward.present;
        if (present != nil && present.size > 0)
        {
            var present_list = Array();
            if (gp.event.reward.present_type == gtengine::RewardPresentType::ORDER)
            {
                if (finish_result != -1 && present.size > finish_result)
                {
                    var name_text = "";
                    if (gp.event.reward.is_once)
                    {
                        var before;
                        if (before_result == nil || before_result < 0 || present.size < before_result)
                            before = present.size;
                        else
                            before = before_result;


                        for (var i = finish_result; i < before; i++)
                        {
                            var reward_item = present[i];

                            if (reward_item == nil || reward_item.itemtype == nil) 
                                continue;
                            
                            name_text = getPresent(context, reward_item, gp.event.event_id, i, gp);
                            if (name_text != "") 
                                present_list.push(name_text);

                        }
                    }
                    else
                    {
                        var name_text = getPresent(context, present[finish_result], gp.event.event_id, gp);
                        if (name_text != "")
                            present_list.push(name_text);
                    }
                }
            }

            if (present_list != nil && present_list.size > 0)
                showEventPresentGetDialog(context, present_list, gp.event, finish_result);
        }

        // Process entry rewards
        var entry_present = gp.event.reward.entry_present;

        if (entry_present != nil && entry_present.size > 0)
        {
            var entry_present_list = Array();
            if (gp.event.reward.entry_present_type == gtengine::RewardEntryPresentType::FINISH
                && finish_result >= 0)
            {
                var name_text = "";
                for (var i = 0; i < entry_present.size; i++)
                {
                    
                    var event_id = getEventIDForEntryPresent(gp.event.event_id);
                    if (GAME_STATUS.user_profile.record.event_present.checkEventPresent(event_id, i) == nil)
                    {
                        name_text = getPresent(context, entry_present[i], event_id, i, gp);
                        if (name_text != "")
                            entry_present_list.push(name_text);
                    }
                }

                if (entry_present_list != nil && entry_present_list.size > 0)
                    showEventPresentGetDialogCOMPLETE(context, entry_present_list, gp.event);

            } 
            else if (gp.event.reward.entry_present_type == gtengine::RewardEntryPresentType::LAP 
                && lap_count != nil && lap_count > 1)
            {
                var name_text = "";

                for (var i = 0; i < entry_present.size; i++)
                {
                    var event_id = getEventIDForEntryPresent(gp.event.event_id);
                    if (GAME_STATUS.user_profile.record.event_present.checkEventPresent(event_id, i) == nil)
                    {
                        name_text = getPresent(context, entry_present[i], event_id, i, gp);
                        if (name_text != "")
                            entry_present_list.push(name_text);
                    }
                }

                if (entry_present_list != nil && entry_present_list.size > 0)
                    showEventPresentGetDialogLAP(context, entry_present_list, gp.event);
            }
        }

        var present_list_after = GAME_STATUS.user_profile.record.event_present.getPresentList();
        if ((present_list_before == nil && present_list_after != nil && present_list_after.size > 0) ||
            (present_list_before != nil && present_list_after != nil && present_list_before.size < present_list_after.size)) 
        {
            // List changed, save
            SaveDataUtilGT6::saveEveryWhere(context);
        }
    }

    function getPresent(context, present, event_id, present_index, gp)
    {
        var item_name = "";

        if (present.itemcategory == 901)
        {
            var carcode = present.f_name;
            item_name = gtengine::MSpecDB::getCarName(carcode);
        }
        else if (present.itemcategory == 902 && gp != nil)
        {
            var carcode = present.f_name;
            item_name = gtengine::MSpecDB::getCarName(carcode) +
                        " " +
                        manager.translate("CommonGTMode", "INSTALL_PARTS_C");

            var entry_base = gp.event.reward.entry_base;
            if (entry_base.car.code == gtengine::MSpecDB::NO_CODE)
                return item_name;

            var cp = LaunchRaceUtil::makeCarParameterFromEntryBase(entry_base);
            if (cp == nil || cp.getCarCode() == gtengine::MSpecDB::NO_CODE)
                return item_name;

            cp.setNewCar();
            
            var buf = cp.serialize();
            var blob = pdistd::MBlob(buf);
            blob = pdistd::Deflate(blob);
            var encoded_cp = pdistd::EncodeBase64(blob);
            present.f_name = encoded_cp;
        }
        else if (present.itemcategory == 601)
        {
            var paint_name = "";
            var can_all_paint = false;
            var has_name = false;
            var paint_id = present.argument1;
            var paint_type_id = present.argument2;

            if (paint_id == nil)
                return item_name;

            var paintname_column = main::pdistd::MLocale::getLanguage() == "JP" ? "LabelJpn" : "LabelEng";
            if (paint_id == -1)
            {
                if (paint_type_id == -1)
                {
                    var info = SPECDB.query1("SELECT ID,%{paintname_column} FROM PAINT_COLOR_INFO WHERE Type<>99 AND isRandomPresent=1 ORDER BY RANDOM() LIMIT 1  ", []);
                    if (info != nil) 
                    {
                        item_name = info[paintname_column].trim();
                        paint_id = info.ID;
                        can_all_paint = true;
                    }
                }
                else
                {
                    var info = SPECDB.query1("SELECT ID,%{paintname_column} FROM PAINT_COLOR_INFO WHERE Type<>99 AND Type =? ORDER BY RANDOM() LIMIT 1  ", [paint_type_id]);
                    if (info != nil) 
                    {
                        item_name = info[paintname_column].trim();
                        paint_id = info.ID;
                        can_all_paint = true;
                    }
                }

                has_name = item_name != "";
            }
            else
            {
                var info = SPECDB.query1("SELECT Type, %{paintname_column} FROM PAINT_COLOR_INFO WHERE ID=?", [paint_id]);
                if (info != nil) 
                {
                    can_all_paint = info.Type != 99;
                    item_name = info[paintname_column].trim();
                    has_name = item_name != "";
                }
            }

            if (can_all_paint && has_name)
            {
                GAME_STATUS.user_profile.item.paint.addItem(paint_id);
                item_name = manager.translate("GTModeProject::StatusRoot", "Label_PaintItems") + " " + item_name;
            }
        }
        else if (present.itemcategory == 301 || 
            present.itemcategory == 302 || 
            present.itemcategory == 303)
        {

            var color_id = present.argument1;
            var code = present.argument4;

            if (code == nil || code == "")
                return item_name;
            
            if ((present.itemcategory == 301 || present.itemcategory == 302) 
                && color_id == -1)
            {   
                // Empty apparently
            }

            var type, name;
            if (present.itemcategory == 301)
            {
                type = "AVATAR_MET";
                name = manager.translate("RacingGear", "met_%02d".format(code))
            }
            else if (present.itemcategory == 302)
            {
                type = "AVATAR_SUIT";
                name = manager.translate("RacingGear", "suit_%02d".format(code))
            }
            else if (present.itemcategory == 303)
            {
                type = "AVATAR_SET";
                name = manager.translate("RacingGear", "met_%02d".format(code))
            }
            
            GAME_STATUS.user_profile.item.racing_gear.addItem2(type, code, color_id);

            item_name = manager.translate("GTAuto", "Type_%s".format(type)) + " " + name;
        }

        if (item_name == "") 
            return item_name;

        initializeEventPresent(event_id, present, present_index);

        return item_name;
    }

    function showEventPresentGetDialog(context, item_name_list, event, result)
    {
        var info_text = "";
        var name_text = "";
        var event_title = event.information.title.getText().replaceAll("&amp;", "&");

        var result_text = "";

        var gold = result == 0;
        var silver = result == 1;
        var bronze = result == 2;

        if (gold)
            result_text = manager.translate("RaceEvent", "THE_GOLD");
        else if (silver)
            result_text = manager.translate("RaceEvent", "THE_SILVER");
        else if (bronze) 
            result_text = manager.translate("RaceEvent", "THE_BRONZE");

        foreach (var name in item_name_list)
            name_text = name_text + name + "\n";

        enableInput(context);
        var head_text = manager.translate("CommonGTMode", "PRESENT");
        DialogUtil::openInformationDialog(context, manager.translate("CommonGTMode", "PRESENT_SEASONAL_EVENT_RACE").build("%{COLOR_RED}%s%{COLOR_DEFAULT}".format(event_title),
                result_text,
                "\x12%s\x10".format(head_text), // Red & default color
                name_text),
                head_text,
                "piece/gt6/information/present.img");
        disableInput(context);
    }

    function showEventPresentGetDialogCOMPLETE(context, item_name_list, event)
    {
        return showEventPresentGetDialogEntry(context, item_name_list, event, "PRESENT_SEASONAL_EVENT_COMPLETE");
    }

    function showEventPresentGetDialogLAP(context, item_name_list, event)
    {
        return showEventPresentGetDialogEntry(context, item_name_list, event, "PRESENT_SEASONAL_EVENT_LAP");
    }

    function showEventPresentGetDialogEntry(context, item_name_list, event, message_code)
    {
        var info_text = "";
        var name_text = "";
        var event_title = event.information.title.getText().replaceAll("&amp;", "&");

        foreach (var name in item_name_list)
            name_text = name_text + name + "\n";

        enableInput(context);
        var head_text = manager.translate("CommonGTMode", "PRESENT");
        DialogUtil::openInformationDialog(context, manager.translate("CommonGTMode", message_code).build("%{COLOR_RED}%s%{COLOR_DEFAULT}".format(event_title), 
                "\x12%s\x10".format(head_text), 
                name_text),
                head_text,
                "piece/gt6/information/present.img");
        disableInput(context);
    }

    function initializeEventPresent(event_id, present, present_index)
    {
        var status = 1;

        if (present.itemcategory == 901 
            || present.itemcategory == 902)
            status = 0;
        
        var res = GAME_STATUS.user_profile.record.event_present.initializeRecord(event_id, 
        present_index, 
        present.itemtype,
        present.itemcategory,
        present.argument1,
        present.argument2,
        present.argument3,
        present.argument4,
        present.f_name,
        status);

    }

    function getEventIDForEntryPresent(event_id)
    {
        return event_id + 90000000;
    }
}
