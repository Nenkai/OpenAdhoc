module PROJECT::ROOT
{
    function setMoveActor(widget)
    {
        var actor = main::menu::MMoveActor(widget, widget.x, PS2_SCREEN_H_F);
        widget.actor = actor;
        widget.actor.ratio = 0.2;
    }

    function setFadeActorRoot()
    {
        var actor = main::menu::MFadeActor(SettingPopup, 1.0);
        actor.repeat = 0;
        actor.period = 0.5;
        SettingPopup.actor = actor;
    }

    setMoveActor(Pane);
    setFadeActorRoot();
    static garage_car = nil;

    function openInGarage(context, gcar)
    {
        SettingPopup.setFocus(nil);
        Pane.actor.destinationY = PS2_SCREEN_H_F;
        Pane.actor.out = true;
        Pane.actor.warp();
        SettingPopup.actor.out = true;
        SettingPopup.actor.warp();
        garage_car = gcar;
        context.pushPage(SettingPopup);
        Pane.actor.out = false;
        SettingPopup.actor.out = false;
        SettingPopup.setFocus(Pane::Button::OK);
    }

    function open(context)
    {
        SettingPopup.setFocus(nil);
        Pane.actor.destinationY = PS2_SCREEN_H_F;
        Pane.actor.out = true;
        Pane.actor.warp();
        SettingPopup.actor.out = true;
        SettingPopup.actor.warp();
        garage_car = nil;
        context.pushPage(SettingPopup);
        Pane.actor.out = false;
        SettingPopup.actor.out = false;
        SettingPopup.setFocus(Pane::Button::OK);
    }

    function close(context)
    {
        SettingPopup.setFocus(nil);
        Pane.actor.destinationY = PS2_SCREEN_H_F;
        Pane.actor.out = true;
        SettingPopup.actor.out = true;
        context.sync(0.25);
        context.closePage(SettingPopup);
        CarRoot::ColScroll.actor.out = false;
    }

    function isDirt()
    {
        var ctype = main::menu::MCourseData::GetType(CarRoot::current_crs);
        return (ctype == "dirt" || ctype == "snow");
    }

    function setupSlider(slider)
    {
        slider["label"].text = slider.index;
        var popup = slider["popup"];
        popup["pinch"]["value"].text = slider.index;
        popup["min"].adjustScale();
        popup["max"].adjustScale();
    }

    static mission_options = ["AUTOMATIC", "MANUAL"];
    static assist_options  = ["None", "TCSOnly", "TCSAndASM"];
    static tire_normal_options = ["type_0", "type_1", "type_2", "type_3", "type_4", "type_5"];
    static tire_racing_options = ["type_6", "type_7", "type_8", "type_9", "type_10"];
    static tire_dirt_options   = ["type_11"];
    static tire_snow_options   = ["type_12"];
    static open_options = ["close", "open"];

    function initialize_optionmenu_onload(context, optionmenu, options)
    {
        var vbox = optionmenu["popup"]["vbox"];
        var num = options.size;
        
        for (var i = 0; i < num; i++)
        {
            var item = hidden::Item.doCopy();
            item["label"].text = context.translate(SettingPopup, options[i]);
            item.name = options[i];
            vbox.appendChild(item);
        }
        optionmenu.applyAppend(context);
    }

    function initialize_optionmenu(context, optionmenu, options, page)
    {
        var vbox = optionmenu["popup"]["vbox"];
        var num = options.size;
        
        for (var i = 0; i < num; i++)
        {
            var item = hidden::Item.doCopy();
            if (page == nil)
                item["label"].text = context.translate(SettingPopup, options[i]);
            else
                item["label"].text = context.translate(SettingPopup, page, options[i]);
			
            item["label"].adjustScale();

            item.name = options[i];
            vbox.appendChild(context, item);
        }
        optionmenu.applyAppend(context);
    }

    function onLoadInitialize(context)
    {
        initialize_optionmenu_onload(context, Pane::Mission::OptionMenu, mission_options);
        initialize_optionmenu_onload(context, Pane::Assist::OptionMenu, assist_options);
        initialize_optionmenu_onload(context, Pane::Open::OptionMenu, open_options);
    }

    function setFadeActor(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        widget.actor = actor;
        widget.actor.period = 1.0;
        widget.actor.out = true;
        widget.actor.warp();
    }

    setFadeActor(Veil::bg);
    setFadeActor(Veil::Course);
    setFadeActor(Veil::Car);

    function get_tire_index()
    {
        var tire_idx = 0;
        if (isDirt())
            tire_idx = 11;
        else
        {
            var offset = 0;
            if (!main::menu::MCarData::IsTireNormal(CarRoot::current_car))
                offset = 6;
	
            tire_idx = Pane::Tire::OptionMenu.index + offset;
        }
        return tire_idx;
    }

    static diff = ["EASY", "NORMAL", "HARD"];

    function apply_setting()
    {
        main::game.manual = (Pane::Mission::OptionMenu.index == 1);
        if (garage_car == nil)
        {
            main::game.assist_asm = (Pane::Assist::OptionMenu.index == 2);
            main::game.assist_tcs = (Pane::Assist::OptionMenu.index > 0);
            main::game.tire_idx = get_tire_index();
        }
        main::game.car_garage = garage_car;
        if (Pane::Difficulty::slider.range == [-1, 1])
            main::game.difficulty = diff[Pane::Difficulty::slider.index + 1];
        else
            main::game.enemy_level = Pane::Difficulty::slider.index;

        var option = main::game.option;
        option.automatic_gear = 1 - Pane::Mission::OptionMenu.index;
        if (!isDirt())
        {
            option.assist_asm = (Pane::Assist::OptionMenu.index == 2);
            option.assist_tcs = (Pane::Assist::OptionMenu.index > 0);
        }
    }

    function notify_setting()
    {
        apply_setting();
        if (main::game.option.LAN_host)
            main::network.raceMasterNotifyRaceSetting(main::game.getBattleSettingRace());
        else
            main::network.raceMenuNotifyEntrySetting(main::game.getBattleSettingEntry());
    }
	
	module CourseTypeIndex
	{
		static dry  = 0;
		static wet  = 1;
		static dirt = 2;
		static snow = 3;
	}

    function onInitialize(context)
    {
        hidden.visible = false;
        Pane.minimum_height = 0;
        var cg = garage_car;
        if (cg == nil)
            cg = CarRoot::CarFace.car_data;

        var mission_selectable = !cg.isAutomaticOnly();
        if (mission_selectable)
        {
            Pane::Mission::OptionMenu.setIndex(context, (1 - main::game.option.automatic_gear));
            Pane::Mission::OptionMenu.insensitive = false;
        }
        else
            Pane::Mission::OptionMenu.insensitive = true;

        if (garage_car != nil)
            Pane::Assist.visible = false;
        else
        {
            Pane::Assist.visible = true;
            var index = 0;
            if (!isDirt())
            {
                if (main::game.option.assist_tcs)
                {
                    index = 1;
                    if (main::game.option.assist_asm)
                        index = 2;
                }
                Pane::Assist::OptionMenu.insensitive = false;
            }
            else
                Pane::Assist::OptionMenu.insensitive = true;

            Pane::Assist::OptionMenu.setIndex(context, index);
			if (garage_car != nil)
			{
				Pane::Tire.visible = false;
			}
        }
        Pane::Tire.visible = false;
        if (isDirt())
        {
            if (main::menu::MCourseData::GetType(CarRoot::current_crs) == "dirt")
                initialize_optionmenu(context, Pane::Tire::OptionMenu, tire_dirt_options, "TireName");
            else
                initialize_optionmenu(context, Pane::Tire::OptionMenu, tire_snow_options, "TireName");

            Pane::Tire::OptionMenu.insensitive = true;
            Pane::Tire::OptionMenu.setIndex(context, 0);
        }
        else
        {
            Pane::Tire::OptionMenu.insensitive = false;
            var car = (garage_car == nil) ? CarRoot::current_car : garage_car.car_code;
            if (main::menu::MCarData::IsTireNormal(car))
            {
                initialize_optionmenu(context, Pane::Tire::OptionMenu, tire_normal_options, "TireName");
                Pane::Tire::OptionMenu.setIndex(context, 4);
            }
            else
            {
                initialize_optionmenu(context, Pane::Tire::OptionMenu, tire_racing_options, "TireName");
                Pane::Tire::OptionMenu.setIndex(context, 1);
            }
        }
        Pane::Difficulty.visible = false;
        Pane::Open.visible = false;
        if (mission_selectable)
            SettingPopup.setFocus(Pane::Mission::OptionMenu);
        else
            SettingPopup.setFocus(Pane::Assist::OptionMenu);

        Veil.visible = false;
        Veil::bg.actor.out = true;
        Veil::bg.actor.warp();
        Veil::Course.actor.out = true;
        Veil::Course.actor.warp();
        Veil::Car.actor.out = true;
        Veil::Car.actor.warp();
    }

    function onFinalize(context)
    {
        Pane::Tire::OptionMenu::popup::vbox.clearWindow(context);
        garage_car = nil;
    }

    function onCancel(context, event, item)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        return EVENTRESULT_CONTINUE;
    }
}

module PROJECT::ROOT::Pane::Difficulty::slider
{
	function onValueChanged(context)
	{
		setupSlider(slider);
	}
}

module PROJECT::ROOT::Pane::Button::OK
{
    function onActivate(context, event, item)
    {
        main::sound.fadeOutMusic(1.0);
        main::sound.play("next");
        apply_setting();
        main::menu::MSystem::SetLoadingMode("capture");
        context.cursor_visible = false;
        Veil::Course.text = context.translate(SettingPopup, "CourseName", CarRoot::current_crs);
        Veil::Car.text = CarRoot::CarFace.car_data.name;
        Veil::Car.adjustScale();
        Veil.visible = true;
        Veil::bg.actor.out = false;
        Veil::Course.actor.out = false;
        Veil::Car.actor.out = false;
        context.sync(1.0);
        CarRoot::CarFace.visible = false;
        CarRoot::doGame(context);
        return EVENTRESULT_FILTER;
    }
}