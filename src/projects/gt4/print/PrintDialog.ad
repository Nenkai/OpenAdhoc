module PROJECT::ROOT
{
	#include "PrintDialogEnums.h"

	static result = PRINT_DIALOG_RES_NO;
#ifdef GT4O_US_BETA
	static original_y = nil;
#else
	static original_y;
#endif

	static paper = 0;
	static media = (1 << 3);
	static margin = 1;
	static triming = false;
	static quality = 1;
	static copies = 1;

	function open(context, type)
	{
		import Dialog::Buttons::*;

		switch (type)
		{
			case PRINT_DIALOG_OK:
				Yes.visible = false;
				No.visible = false;
				OK.visible = true;
				Cleaning.visible = true;
				break;

			case PRINT_DIALOG_QUERY_CLEAN:
				Yes.visible = true;
				No.visible = true;
				OK.visible = false;
				Cleaning.visible = true;
				break;

			case PRINT_DIALOG_QUERY:
				Yes.visible = true;
				No.visible = true;
				OK.visible = false;
				Cleaning.visible = false;
		}
	
		original_y = Dialog.y;
		Dialog.y = PS2_SCREEN_H_F;
		context.pushPage(ROOT);
		Dialog::Contents::Margin::OptionMenu::popup::vbox::noTrim::label.adjustScale();
		Dialog::Contents::Paper::OptionMenu::Init(context);
		Dialog::Contents::Media::OptionMenu::Init(context);
		Dialog::Contents::Margin::OptionMenu::Init(context);
		Dialog::Contents::Quality::OptionMenu::Init(context);
		Dialog::Contents::Copy::SliderBar::Init(context);

		switch (type)
		{
			case PRINT_DIALOG_OK:
				ROOT.setFocus(OK);
				break;

			case PRINT_DIALOG_QUERY_CLEAN:
				ROOT.setFocus(Yes);
				break;
		}
	
		while (!Dialog.interpolateY(original_y, 0.4))
			context.sync();
	
		result = PRINT_DIALOG_RES_NO;

		var update_context = context.getUpdateContext();
		update_context.enterEventLoop();
		return result;
	}

	function close(context)
	{
		ROOT.setFocus(nil);
		var target_y;
		if (result != nil)
			target_y = -Dialog.h;
		else
			target_y = PS2_SCREEN_H_F;
	
		while (!Dialog.interpolateY(target_y, 0.4))
			context.sync();
	
		context.closePage(ROOT);
		var update_context = context.getUpdateContext();
		update_context.leaveEventLoop();
		Dialog.y = original_y;
	}
	
	function onCancel(context, event, item)
	{
		main::sound.play("cancel");

		result = nil;
		close(context);
		result = PRINT_DIALOG_RES_NO;

		return EVENTRESULT_FILTER;
	}

	function copyOptionItem(context, label, value)
	{
		var item = hidden::OptionItem.doCopy();
		var textf = item["label"];
		textf.text = context.translate(ROOT, label);
		var texw = textf.getTextSize()[0];
		var widw = textf.w;
	
		if (widw < texw)
			textf.adjustScale();
		
		return item;
	}
}

module PROJECT::ROOT::Dialog::Contents::Paper::OptionMenu
{
	static val = 0;
	static list = ["TrimL", "Postcard", "I4x6", "Trim2L", "Letter", "A4"];
#ifdef GT4O_US_BETA
	static idlist = nil;
#else
	static idlist;
#endif

	function Init(context)
	{
		val = paper;
		idlist = [];
	
		popup::vbox.clearWindow(context);
	
		var sup = PrintRoot::PR.getSupportPaper();
		var idx = 0;
		var found = -1;

		for (var i = 0; i < list.size; ++i)
		{
			var v = (1 << i);
			if (sup & v)
			{
				popup::vbox.appendChild(context, copyOptionItem(context, list[i]));
				idlist.push(v);
	
				if (v == val || found < 0)
					found = idx + 0;
	
				++idx;
			}
		}

		OptionMenu.applyAppend(context);
	
		if (found >= 0)
		{
			val = idlist[found];
			OptionMenu.setIndex(context, found);
		}
	}


	function Apply()
	{
		paper = val;
	}
	
	function onValueChanged(context, index)
	{
		main::sound.play("ok");
		val = idlist[index];
	}
}

module PROJECT::ROOT::Dialog::Contents::Media::OptionMenu
{
	static val = 0;
	static list = ["PlainPaper", "SuperFine", "Matt", "PhotoPaper"]
#ifdef GT4O_US_BETA
	static idlist = nil;
#else
	static idlist;
#endif

	function Init(context)
	{
		val = media;
		idlist = [];
		popup::vbox.clearWindow(context);
		var sup = PrintRoot::PR.getSupportMedia();
		var idx = 0;
		var found = -1;
		
		for (var i = 0; i < list.size; ++i)
		{
			var v = (1 << i);
	
			if (sup & v)
			{
				popup::vbox.appendChild(context,copyOptionItem(context, list[i]));
				idlist.push(v);
	
				if (v == val || found < 0)
				{
					print("val = %{val}, media = %{media}, idx = %{idx}\n");
					found = idx + 0;
				}
				++idx;
			}
		}

		OptionMenu.applyAppend(context);

		if (found >= 0)
		{
			val = idlist[found];
			OptionMenu.setIndex(context, found);
		}
	}


	function Apply()
	{
		media = val;
	}
	
	function onValueChanged(context, index)
	{
		main::sound.play("ok");
		val = idlist[index];
	}
}

module PROJECT::ROOT::Dialog::Contents::Margin::OptionMenu
{
	static val = 0;

	function Init(context)
	{
		val = margin ? (triming ? 1 : 0) : 2;
	
		if (!PrintRoot::PR.isFuchinashi())
		{
			val = 0;
			popup::vbox::MarginLess.can_focus = false;
		}
		else
			popup::vbox::MarginLess.can_focus = true;
	
		OptionMenu.setIndex(context, val);
	}
	
	function Apply()
	{
		margin = (val < 2);
		triming = (val != 0);
	}
	
	function onValueChanged(context, index)
	{
		main::sound.play("ok");
		val = index;
	}
}

module PROJECT::ROOT::Dialog::Contents::Quality::OptionMenu
{
	static val = 1;
	
	function Init(context)
	{
		val = quality;
		OptionMenu.setIndex(context, val ? 0 : 1);
	}
	
	function Apply()
	{
		quality = val;
	}
	
	function onValueChanged(context, index)
	{
		main::sound.play("ok");
		val = (index == 0) ? 1 : 0;
	}
}

module PROJECT::ROOT::Dialog::Contents::Copy::SliderBar
{
	static val = 0;

	function Init()
	{
		val = copies;
		SliderBar.display_min = 1;
		SliderBar.display_max = 10;
		SliderBar.min = 1;
		SliderBar.max = 10;
		popup::min.text = 1;
		popup::max.text = 10;
		SliderBar.index = val;
		label.text = val;
		popup::pinch::value.text = val;
	}
	
	function Apply()
	{
		copies = val;
	}
	
	function onValueChanged(context)
	{
		val = SliderBar.index;
		label.text = val;
		popup::pinch::value.text = val;
	}
}

module PROJECT::ROOT::Dialog::Buttons::No
{
	function onActivate(context, event, item)
	{
		main::sound.play("ok");
		result = PRINT_DIALOG_RES_NO;
		close(context);

		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Dialog::Buttons::Yes
{
	function onActivate(context, event, item)
	{
		Dialog::Contents::Paper::OptionMenu::Apply();
		Dialog::Contents::Media::OptionMenu::Apply();
		Dialog::Contents::Margin::OptionMenu::Apply();
		Dialog::Contents::Quality::OptionMenu::Apply();
		Dialog::Contents::Copy::SliderBar::Apply();
		main::sound.play("ok");
		result = PRINT_DIALOG_RES_YES;
		close(context);

		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Dialog::Buttons::OK
{
	function onActivate(context, event, item)
	{
		Dialog::Contents::Paper::OptionMenu::Apply();
		Dialog::Contents::Media::OptionMenu::Apply();
		Dialog::Contents::Margin::OptionMenu::Apply();
		Dialog::Contents::Quality::OptionMenu::Apply();
		Dialog::Contents::Copy::SliderBar::Apply();
		main::sound.play("ok");
		result = PRINT_DIALOG_RES_YES;
		close(context);

		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Dialog::Buttons::Cleaning
{
	function onActivate(context, event, item)
	{
		Dialog::Contents::Paper::OptionMenu::Apply();
		Dialog::Contents::Media::OptionMenu::Apply();
		Dialog::Contents::Margin::OptionMenu::Apply();
		Dialog::Contents::Quality::OptionMenu::Apply();
		Dialog::Contents::Copy::SliderBar::Apply();
		main::sound.play("ok");
		result = PRINT_DIALOG_RES_CLEANING;
		close(context);

		return EVENTRESULT_FILTER;
	}
}