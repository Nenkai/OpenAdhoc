//---------------------------------------------------------------------------------------
// ReplayRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ReplayRoot
{
    static sMetaData = [
        "000" : ["001t", "001d",  729,  3],
        "001" : ["011t", "011d",  204,  0],
        "002" : ["019t", "019d",   42,  0],
        "003" : ["035t", "035d",  677,  3],
        "004" : ["045t", "045d", 1491,  0],
        "005" : ["042t", "042d",  580,  0],
        "006" : ["006t", "006d",  773,  3],
        "007" : ["009t", "009d",  197,  0],
        "009" : ["017t", "017d",  469,  5],
        "010" : ["013t", "013d",  653,  4],
        "011" : ["012t", "012d",  207,  4],
        "012" : ["010t", "010d",  201,  1],
        "013" : ["014t", "014d",  679, 11],
        "014" : ["015t", "015d",  429,  5],
        "015" : ["016t", "016d",  399,  5],
        "016" : ["018t", "018d",   82,  3],
        "017" : ["027t", "027d",  844,  0],
        "018" : ["028t", "028d",  205,  1],
        "019" : ["029t", "029d",   60,  2],
        "020" : ["020t", "020d",  115,  0],
        "021" : ["021t", "021d",   54,  0],
        "022" : ["022t", "022d",  723,  0],
        "023" : ["023t", "023d",  334,  1],
        "024" : ["024t", "024d",  785,  3],
        "025" : ["025t", "025d",  830,  1],
        "026" : ["026t", "026d",  372,  5],
        "027" : ["000t", "000d",  382,  0],
        "028" : ["002t", "002d",  124,  0],
        "029" : ["003t", "003d",  449,  2],
        "031" : ["004t", "004d",  771,  2],
        "032" : ["005t", "005d",  414,  5],
        "033" : ["007t", "007d",  962,  0],
        "034" : ["041t", "041d",  956,  1],
        "035" : ["043t", "043d",  665,  0],
        "036" : ["044t", "044d",  337, 11],
        "037" : ["037t", "037d",  777,  0],
        "038" : ["038t", "038d",  696,  7],
        "039" : ["039t", "039d",  980,  0],
        "040" : ["040t", "040d",  298,  0],
        "041" : ["032t", "032d", 1484,  2],
        "042" : ["034t", "034d",  360,  0],
        "043" : ["008t", "008d",  574,  0],
        "044" : ["062t", "062d",  780,  0],
        "045" : ["066t", "066d",  829,  2],
        "046" : ["065t", "065d",  451,  0],
        "047" : ["063t", "063d",  460,  3],
        "048" : ["068t", "068d",   49,  0],
        "049" : ["064t", "064d",  761,  0],
        "050" : ["067t", "067d",  782,  0],
        "051" : ["069t", "069d",  950,  0],
        "052" : ["070t", "070d",   56,  0],
        "053" : ["071t", "071d",  652,  0],
        "054" : ["072t", "072d",  578,  0],
        "055" : ["073t", "073d",  397,  0],
        "056" : ["074t", "074d",  705,  0],
        "057" : ["075t", "075d",  781,  0],
        "058" : ["076t", "076d",  545,  0],
        "059" : ["030t", "030d",  299,  0],
        "060" : ["050t", "050d",  548,  0],
        "061" : ["036t", "036d",  826,  0],
        "062" : ["051t", "051d",  828,  2],
        "063" : ["052t", "052d",  547,  2],
        "064" : ["053t", "053d",   52,  0],
        "065" : ["054t", "054d",  350,  0],
        "066" : ["046t", "046d",  865,  0],
        "067" : ["047t", "047d",  865,  0],
        "068" : ["048t", "048d",  865,  0],
        "069" : ["055t", "055d",  865,  0],
        "070" : ["056t", "056d",  865,  0],
        "071" : ["057t", "057d",  865,  0],
        "072" : ["058t", "058d",  865,  0],
        "073" : ["059t", "059d",  865,  0],
        "074" : ["060t", "060d",  865,  0],
        "075" : ["061t", "061d",  865,  0],
        "076" : ["049t", "049d",  234,  0],
        "077" : ["077t", "077d",  484,  6],
        "078" : ["078t", "078d",  865,  0],
        "079" : ["079t", "079d",  865,  0],
        "201" : ["080t", "080d",  293,  0],
        "202" : ["081t", "081d",  293,  0],
        "203" : ["082t", "082d",   65,  0],
        "204" : ["083t", "083d",  857,  0],
        "205" : ["084t", "084d",  399,  0],
        "206" : ["085t", "085d",  326,  0],
        "207" : ["086t", "086d",  214,  0],
        "208" : ["087t", "087d",  184,  0],
        "209" : ["088t", "088d",  141,  0],
        "210" : ["089t", "089d",  215,  0],
        "211" : ["090t", "090d",  178,  0],
        "212" : ["091t", "091d",  361,  0],
        "213" : ["092t", "092d",  947,  9],
        "214" : ["093t", "093d",  725,  0],
        "215" : ["094t", "094d",  570,  0],
        "216" : ["095t", "095d",   87,  0],
        "217" : ["096t", "096d",   41,  5],
        "218" : ["097t", "097d", 1475,  0],
        "219" : ["098t", "098d",  744,  0],
        "220" : ["099t", "099d", 1481,  0],
        "221" : ["100t", "100d", 1040,  0],
        "222" : ["101t", "101d",   45,  0],
        "223" : ["102t", "102d", 1117,  0],
        "224" : ["103t", "103d",  361,  0]
    ];

    hidden.visible = false;

    module MODE
    {
        static ARCADE = 0;
        static LICENSE = 1;
    }

    attribute mode = nil;
    attribute layout_normal_text = nil;
    attribute layout_reverse_text = nil;

    method setMode(mode)
    {
        self.mode = mode;
    }

    class ReplayItem
    {
        attribute tooltip_text = nil;
        attribute balloon_text = nil;
    }

    class ArcadeReplayItem : ReplayItem
    {
        attribute course_code = nil;
        attribute map_image_path = nil;
        attribute layout_text = nil;
        attribute logo_image_path = nil;

        method __init__(context, course_code, normal_course_code)
        {
            self.course_code = course_code;
            var course_logo = GetTextDataCourseInfo(normal_course_code, "logo", "not found");
            self.logo_image_path = "image/piece_gt5m/course_logo_SS/" + course_logo + ".png";
            var course_id = GetTextDataCourseInfo(normal_course_code, "id", "not found");
            self.map_image_path = "image/piece_gt5m/course_map_menu_S/" + course_id + ".png";

            var courselabel = main::gtengine::MSpecDB::getCourseLabel(normal_course_code);
            self.balloon_text = context.translate(ROOT, "CourseName", courselabel);
            self.tooltip_text = GetTextDataCourseSpec(context, normal_course_code);

            self.layout_text = course_code == normal_course_code ? ROOT.layout_normal_text : ROOT.layout_reverse_text;
        }
    }

    class LicenseReplayItem : ReplayItem
    {
        attribute index = nil;
        attribute license_id = nil;
        attribute category_id = nil;
        attribute category_index = nil;
        attribute thumbnail_image_path = nil;
        attribute folder_image_path = nil;

        method __init__(context, index)
        {
            self.index = index;
            self.license_id = LicenseUtil::GetLicenseId(index);
            |self.category_id, self.category_index| = LicenseUtil::GetCategoryIdAndCategoryIndex(index);

            var meta = ROOT.sMetaData["%03d".format(self.license_id)];
            self.balloon_text = context.translate(ROOT, "LicenseGT5M", meta[0]);
            self.tooltip_text = context.translate(ROOT, "LicenseGT5M", meta[1]);

            var car_label = main::gtengine::MSpecDB::getCarLabel(meta[2]);
            self.thumbnail_image_path = "car/thumbnail/%s.%02d".format(car_label, meta[3]);

            var bg_index = LicenseUtil::getBGIndex(self.category_id);
            self.folder_image_path = "image/gt5m/panel/list_folder_%s.png".format(
                ["green", "yellow", "blue"][bg_index]
            );
        }
    }

    method onInitialize(context)
    {
        ActorUtil::ResetInterpolators(Veil, true, true);

        if (self.mode == MODE::ARCADE)
        {
            self.layout_normal_text = context.translate(ROOT, "TrialSetting", "LAYOUT_NORMAL");
            self.layout_reverse_text = context.translate(ROOT, "TrialSetting", "LAYOUT_REVERSE");
        }

        IconBox.initialize(context);
        HScrollbar.initialize(IconBox);

        filter::TextFace.text = context.translate(ROOT, "Arcade", self.mode == MODE::ARCADE ? "ARCADE" : "LICENSE");
        filter::Num.text = IconBox.item_list.size;

        ToolTip::tip.action_type = 1;
        ToolTip::tip.visible = false;

        ROOT.setFocus(IconBox);
    }

    method onPageInEnd(context)
    {
        BalloonTip.initialize(context);

        ToolTip::tip.visible = true;
        ToolTip::tip.value = "";

        var focus_w = ROOT.getFocusWidget();
        if (focus_w != nil && focus_w['onFocusEnter'] != nil)
            focus_w.onFocusEnter(context);

        HScrollbar.stop_update = false;
        HScrollbar.update_arrow();
    }

    method onFinalize(context)
    {
        IconBox.setItemCount(0, 0);
    }

    method onExit(context)
    {
        if (gGameStatus.user_profile.have_seen_ed_movie)
            BranchRoot.setOpenMode(BranchRoot::MODE::THEATER_ENDING);
        else
            BranchRoot.setOpenMode(BranchRoot::MODE::THEATER);

        if (mode == MODE::ARCADE)
            BranchRoot.setFocusItem("replay");
        else if (mode == MODE::LICENSE)
        {
            main::GlobalStatus::game_context.license_id = -1;
            BranchRoot.setFocusItem("license_replay");
        }

        StartPageOut_XEffect(context, ROOT, BranchRoot);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        onExit(context);

        return EVENTRESULT_FILTER;
    }
}

module ROOT::Exit
{
    method onActivate(context)
    {
        main::sound.play("ok");
        ROOT.onExit(context);
        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context)
    {
        var balloon_text = context.translate(ROOT, "Arcade", "close");
        BalloonTip.set_value(context, self, balloon_text, 12);
        return EVENTRESULT_FILTER;
    }

    method onFocusLeave(context)
    {
        BalloonTip.reset_value();
        return EVENTRESULT_FILTER;
    }
}

module ROOT::IconBox
{
    attribute item_list = nil;

    method initialize(context)
    {
        self.item_list = createItemList(context);

        self.setItemTemplate(context, ROOT.mode == MODE::ARCADE ? hidden::ItemArcade : hidden::ItemLicense);
        self.setItemCount(0, 0);
        self.postRedraw();

        var item_size = self.item_list.size;

        var h = 0; var v = 0;
        if (item_size < 5) 
        {
            v = 1;
            h = item_size;
            IconBox.h_scacing = 10;
        } 
        else 
        {
            v = 2;
            h = (item_size + 1) / v;
            IconBox.h_scacing = 2;
        }

        HScrollbar::pinch.visible = 5 < h;

        self.setItemCount(h, v);
    }

    method createItemList(context)
    {
        var item_list = Array();

        if (ROOT.mode == MODE::ARCADE)
        {
            foreach (var course_code in gCourseData.array)
            {
                item_list.push(ArcadeReplayItem(context, course_code, course_code));
                var course_label = main::gtengine::MSpecDB::getCourseLabel(course_code);
                if ("false" != gCourseData.map[course_code]["has_reverse"])
                {
                    var r_course_code = main::gtengine::MSpecDB::getCourseCode("r_" + course_label);
                    item_list.push(ArcadeReplayItem(context, r_course_code, course_code));
                }
            }
        }
        else
        {
            var index = 0;
            for (var category_id = LicenseUtil::CATEGORY::A; category_id < LicenseUtil::CATEGORY::MAX; ++category_id)
            {
                var count_of_category = LicenseUtil::GetLicenseCountOfCategory(category_id);
                if (LicenseUtil::canEntry(category_id, gGameStatus))
                {
                    for (var i = 0; i < count_of_category; ++i, ++index)
                        item_list.push(LicenseReplayItem(context, index));
                }
                else
                    index += count_of_category;
            }
        }


        return item_list;
    }

    method onVisibleNotify(context, indexes)
    {
        foreach (var i in indexes)
        {
            if (self.getItemVisible(i))
            {
                var w = self.getItemWidget(i, context);
                if (w != nil)
                    w.onVisibleNotify(context, i < self.item_list.size ? self.item_list[i] : nil);
            }
            else
                IconBox.setItemWidget(i, context, nil);
        }

        HScrollbar.update_arrow();
    }

    method onFocusEnter(context)
    {
        var w = self.getItemWidget(self.focus_index, context);
        ROOT.setFocus(w);
        return EVENTRESULT_FILTER;
    }

    method onFocusLeave(context)
    {
        BalloonTip.reset_value();

        return EVENTRESULT_FILTER;
    }

    method onFocusNotify(context, new_index, old_index)
    {
        self.v_magnify = 1.0;
        self.h_magnify = 1.0;

        var new_w = self.getItemWidget(new_index, context);
        if (new_w != nil)
        ROOT.setFocus(new_w);

        return EVENTRESULT_FILTER;
    }
}

module ROOT::hidden
{
    method set_balloontip(context, txt)
    {
        var index = IconBox.focus_index;
        var base_point = self;
        if ((index - 4) > -1 && (index + 4) < IconBox.item_list.size)
        {
            if (index & 1)
                base_point = IconBox::CenterBottom;
            else
                base_point = IconBox::CenterTop;
        }

        BalloonTip.set_value(context, base_point, txt, 35);
    }

    method loadReplay(context, data)
    {
        ActorUtil::ResetInterpolators(Veil, false);
        context.sync(0.3);
        var load_result = SaveDataUtilPSP::load(context, data);
        ActorUtil::ResetInterpolators(Veil, true);
        if (load_result != nil)
        {
            var buf = load_result[0];
            if (buf != nil)
            {
                var gp = main::GamePlan::createReplay(buf);
                if (gp != nil)
                {
                    game_context().is_theater = true;
                    gp.execute(context);
                }
            }
        }
    }
}

module ROOT::hidden::ItemArcade
{
    FrameImageFace.visible = false;
    ColorFace0.visible = false;

    attribute item = nil;

    method onActivate(context)
    {
        if (self.item == nil)
            return EVENTRESULT_FILTER;

        main::sound.play("ok");

        context.cursor_visible = false;
        var crc = main::gtengine::MSpecDB::getCodeHash(self.item.course_code);
        var suffix = "%08X".format(crc);

        var data = SaveDataUtilPSP::ReplayDataForLoad(suffix);
        loadReplay(context, data);
        context.cursor_visible = true;

        return EVENTRESULT_FILTER;
    }

    method onVisibleNotify(context, item)
    {
        if (item == nil)
            return;

        self.item = item;
        self.Logo.image_path = self.item.logo_image_path;
        self.Logo.doInitialize(context);

        self.Map.image_path = self.item.map_image_path;
        self.Map.doInitialize(context);

        self.Layout.text = self.item.layout_text;
    }

    method onFocusEnter(context)
    {
        if (self.item != nil)
        {
            FrameImageFace.visible = true;
            ColorFace0.visible = true;
            IconBox.v_magnify = 1.2;
            IconBox.h_magnify = 1.2;

            set_balloontip(context, self.item.balloon_text);
            ToolTip::tip.value = self.item.tooltip_text;
        }
        else
            BalloonTip.reset_value();

        return EVENTRESULT_FILTER;
    }

    method onFocusLeave(context)
    {
        ColorFace0.visible = false;

        IconBox.v_magnify = 1.0;
        IconBox.h_magnify = 1.0;

        return EVENTRESULT_FILTER;
    }
}


module ROOT::hidden::ItemLicense
{
    FrameImageFace.visible = false;
    ColorFace0.visible = false;

    attribute item = nil;

    method onActivate(context)
    {
        if (self.item == nil)
            return EVENTRESULT_FILTER;

        main::sound.play("ok");

        context.cursor_visible = false;
        var data = SaveDataUtilPSP::LicenseReplayDataForLoad(self.item.license_id);
        main::GlobalStatus::game_context.license_id = self.item.license_id;
        loadReplay(context, data);
        context.cursor_visible = true;

        return EVENTRESULT_FILTER;
    }

    method onVisibleNotify(context, item)
    {
        if (item == nil)
            return;

        self.item = item;

        self.thumbnail.image_path = self.item.thumbnail_image_path;
        self.thumbnail.doInitialize(context);

        self.CategoryIndex.text = "%s - %d".format(LicenseUtil::CategoryString[self.item.category_id],
                                                   self.item.category_index + 1);

        self.ColorFace.image_path = self.item.folder_image_path;
        self.ColorFace.doInitialize(context);
        self.ColorFace0.image_path = self.item.folder_image_path;
        self.ColorFace0.doInitialize(context);
    }

    method onFocusEnter(context)
    {
        if (self.item != nil)
        {
            FrameImageFace.visible = true;
            ColorFace0.visible = true;
            IconBox.v_magnify = 1.2;
            IconBox.h_magnify = 1.2;

            set_balloontip(context, self.item.balloon_text);
            ToolTip::tip.value = self.item.tooltip_text;
        }
        else
            BalloonTip.reset_value();

        return EVENTRESULT_FILTER;
    }

    method onFocusLeave(context)
    {
        ColorFace0.visible = false;

        IconBox.v_magnify = 1.0;
        IconBox.h_magnify = 1.0;

        return EVENTRESULT_FILTER;
    }
}

module ROOT::HScrollbar
{
    attribute stop_update = nil;

    method initialize(list_box)
    {
        self.stop_update = true;

        list_box.h_adjustment = main::menu::MAdjustment();
        HScrollbar.adjustment = list_box.h_adjustment;
        inc_arrow_animation(true, true);
        dec_arrow_animation(true, true);
    }

    method inc_arrow_animation(reverse, warp = false)
    {
        var effect = HScrollbar::inc_arrow::Pane::Effect;
        if (!warp)
        {
            if (reverse != effect.reverse)
            {
                effect.reverse = reverse;
                effect.restart();
            }
        } 
        else 
        {
            effect.reverse = !reverse;
            effect.reset();
            effect.reverse = reverse;
        }
    }

    method dec_arrow_animation(reverse, warp = false)
    {
        var effect = HScrollbar::dec_arrow::Pane::Effect;
        if (!warp)
        {
            if (reverse != effect.reverse)
            {
                effect.reverse = reverse;
                effect.restart();
            }
        } 
        else 
        {
            effect.reverse = !reverse;
            effect.reset();
            effect.reverse = reverse;
        }
    }

    method update_arrow()
    {
        if (self.stop_update)
            return;

        inc_arrow_animation(!HScrollbar::inc_arrow.active);
        dec_arrow_animation(!HScrollbar::dec_arrow.active);
    }
}