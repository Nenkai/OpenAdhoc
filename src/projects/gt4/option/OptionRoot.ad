













module PROJECT::ROOT 
{
    #include "../share/online_util.ad";

    static last_focused_number = 0;
    static sLastItemX = 0;
    static sLastItemY = 0;
    static sLastItemNum = 0;

    class OptionPage
    {
        attribute title;
        attribute root;
        attribute func;
        attribute path;

        method __init__(tt, rt, fc, pt)
        {
            title = tt;
            root = rt;
            func = fc;
            path = pt != nil ? pt : tt;
        }
    }

    function ds2_port_0(context, page)
    {
        page["peripheral"] = "DUALSHOCK 2";
        page["port"] = 0;
        page["key_module"] = page["DS2"];
    }

    function ds2_port_1(context, page)
    {
        page["peripheral"] = "DUALSHOCK 2";
        page["port"] = 1;
        page["key_module"] = page["DS2"];
    }

    function ctr_port_0(context, page)
    {
        page["peripheral"] = "CHEETAH";
        page["port"] = 0;
        page["key_module"] = page["CTH"];
    }

    function ctr_port_1(context, page)
    {
        page["peripheral"] = "CHEETAH";
        page["port"] = 1;
        page["key_module"] = page["CTH"];
    }

    function jgr_port_0(context, page)
    {
        page["peripheral"] = "JAGUAR";
        page["port"] = 0;
        page["key_module"] = page["JGR"];
    }

    function jgr_port_1(context, page)
    {
        page["peripheral"] = "JAGUAR";
        page["port"] = 1;
        page["key_module"] = page["JGR"];
    }

    function cgr_port_0(context, page)
    {
        page["peripheral"] = "COUGAR";
        page["port"] = 0;
        page["key_module"] = page["CGR"];
    }

    function cgr_port_1(context, page)
    {
        page["peripheral"] = "COUGAR";
        page["port"] = 1;
        page["key_module"] = page["CGR"];
    }

    static options = [
        OptionPage("Group", "GroupGeneral", nil, nil),
        OptionPage("Race", RaceRoot, nil),
        OptionPage("Replay", ReplayRoot, nil),
        OptionPage("Screen", ScreenRoot, nil),
        OptionPage("Color", ColorRoot, nil),
        OptionPage("Sound", SoundRoot, nil),

        OptionPage("Group", "GroupArcade", nil),
        OptionPage("Arcade", ArcadeRoot, nil),
        OptionPage("SplitBattle", SplitBattleRoot, nil),
        OptionPage("LAN", LANPopup, nil),
        OptionPage("Network", NetRoot, nil),
        OptionPage("Course", CourseRoot, nil),

        OptionPage("Group", "GroupPhotoMode", nil),
        OptionPage("Album", AlbumRoot, nil),
        OptionPage("Dummy", nil, nil),
        OptionPage("Dummy", nil, nil),
        OptionPage("Dummy", nil, nil),
        OptionPage("Dummy", nil, nil),

        OptionPage("Group", "GroupController", nil),
        OptionPage("Controller", ControllerRoot, nil, "JP/Controller"),
        OptionPage("DS2_port0", KeyconfigRoot, ds2_port_0, "JP/DS2_port0"),
        OptionPage("DS2_port1", KeyconfigRoot, ds2_port_1, "JP/DS2_port1"),
        OptionPage("Steering", SteeringRoot, nil),
        OptionPage("CTR_port0", KeyconfigRoot, ctr_port_0),
        OptionPage("CTR_port1", KeyconfigRoot, ctr_port_1),
        OptionPage("CGR_port0", KeyconfigRoot, cgr_port_0),
        OptionPage("CGR_port1", KeyconfigRoot, cgr_port_1),
        OptionPage("JGR_port0", KeyconfigRoot, jgr_port_0),
        OptionPage("JGR_port1", KeyconfigRoot, jgr_port_1),
        
        OptionPage("Group", "GroupMisc", nil),
        OptionPage("Misc", MiscRoot, nil),
        OptionPage("Unit", UnitRoot, nil),
        OptionPage("Language", LanguageRoot, nil)
    ];

    static options_for_demo = [
        OptionPage("Group", "GroupGeneral", nil, nil),
        OptionPage("Race", RaceRoot, nil),
        OptionPage("Replay", ReplayRoot, nil),
        OptionPage("Screen", ScreenRoot, nil),
        OptionPage("Color", ColorRoot, nil),
        OptionPage("Sound", SoundRoot, nil),

        OptionPage("Group", "GroupArcade", nil),
        OptionPage("Arcade", ArcadeRoot, nil),
        OptionPage("SplitBattle", SplitBattleRoot, nil),
        OptionPage("Dummy", nil, nil),
        OptionPage("Dummy", nil, nil),
        OptionPage("Dummy", nil, nil),

        OptionPage("Group", "GroupController", nil),
        OptionPage("Controller", ControllerRoot, nil, "JP/Controller"),
        OptionPage("DS2_port0", KeyconfigRoot, ds2_port_0, "JP/DS2_port0"),
        OptionPage("DS2_port1", KeyconfigRoot, ds2_port_1, "JP/DS2_port1"),
        OptionPage("Steering", SteeringRoot, nil),
        OptionPage("CTR_port0", KeyconfigRoot, ctr_port_0),
        OptionPage("CTR_port1", KeyconfigRoot, ctr_port_1),
        OptionPage("CGR_port0", KeyconfigRoot, cgr_port_0),
        OptionPage("CGR_port1", KeyconfigRoot, cgr_port_1),
        OptionPage("JGR_port0", KeyconfigRoot, jgr_port_0),
        OptionPage("JGR_port1", KeyconfigRoot, jgr_port_1),
        
        OptionPage("Group", "GroupMisc", nil),
        OptionPage("Misc", MiscRoot, nil),
        OptionPage("Unit", UnitRoot, nil),
        OptionPage("Language", LanguageRoot, nil)
    ];

    if (main::menu::MSystem::GetVersionBranch() == "mazda")
        options = options_for_demo;

    function AppendItem(context, option, number, x, y)
    {
        var item = hidden::Item.doCopy();
        ScrollWindow::clip::space.appendChild(context, item);

        item["label"].text = context.translate(ROOT, option.title);
        item["bg"].image_path = "image/option/" + option.path + ".png";
        item["bg"].doInitialize(context);
        item["label"].adjustScale();

        item.defineStatic("title", option.title);
        item.defineStatic("page", option.root);
        item.defineStatic("func", option.func);
        item.defineStatic("number", number);
        item.x = x;
        item.y = y;

        return item;
    }

    function onInitialize(context)
    {
        hidden.visible = false;
        
        var x = 0;
        var y = 0;
        
        var top_x = 0.0;
        var top_y = 0.0;

        var first_widget = nil;
        var last_focused_widget = nil;
        var item = nil;

        for (var i = 0; i < options.size; i++)
        {
            if (x >= 5)
            {
                x = 0;
                y += item.h + 4.0;
                item.navigate_box = [0, 0, item.w * 5, item.h];
            }
            
            if (options[i].title == "Group")
            {
                item = hidden::Group.doCopy();
                ScrollWindow::clip::space.appendChild(context, item);
                item["label"].text = context.translate(ROOT, options[i].root);
                item.x = top_x;
                item.y = top_y + y;
                y += item.h;
                continue;
            }

            if (options[i].title == "Dummy")
            {
                x++;
                continue;
            }

            if (options[i].title == "JGR_port0" || options[i].title == "JGR_port1")
            {
                if (main::menu::MSystem::GetRegionCode() != "us")
                {
                    x++;
                    continue;
                }
            }       

            if (options[i].title == "Language")
            {
                if (main::UsingLanguages.size <= 1)
                {
                    x++;
                    continue;
                }
            }

            item = AppendItem(context, options[i], i, top_x + (item.w + 2.0) * x, top_y + y);
            x++;
            
            if (first_widget == nil)
                first_widget = item;

            if (last_focused_number == i)
                last_focused_widget = item;

        }

        sLastItemX = top_x + (item.w + 2.0) * x;
        sLastItemY = top_y + y;
        item.navigate_box = [0, 0, item.w * 5, item.h];

        if (sSecretDone)
        {
            var lw = appendSecret(context);

            if (lw != nil)
                last_focused_widget = lw;
        }

        ScrollWindow.updateGeometry();
        ScrollWindow::clip::space.h = ScrollWindow::clip::space.h + 32.0;

        if (last_focused_widget != nil)
        {
            ROOT.setFocus(last_focused_widget);
            ScrollWindow.warp(last_focused_widget);
        }
        else 
            ROOT.setFocus(first_widget);
    }

    function onFinalize(context)
    {
        ScrollWindow::clip::space.clearWindow(context);
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        
        if (openConfirmDialog(context, DIALOG_QUERY, context.translate(ROOT, context.translate(ROOT, "Exit?"))))
        {
            var major = main::game.major_menu_project;

            if (major != "")
                main::game.next_menu_project = major;
            else
                main::game.setReturnToLastMenuProject();
            start_page(context, nil);
        }

        return EVENTRESULT_FILTER;
    }

    function onActivate(context, event)
    {
        main::sound.play("ok");
        last_focused_number = event.widget["number"];
        var func = event.widget["func"];
        var page = event.widget["page"];

        if (func != nil)
            func(context, page);
        
        page["open"](context);

        return EVENTRESULT_FILTER;
    }

    static sSecretCommand = [
        PS2_PAD_CTRL_L1,
        PS2_PAD_CTRL_L3_UP,
        PS2_PAD_CTRL_L2,
        PS2_PAD_CTRL_L3_DOWN,
        PS2_PAD_CTRL_R1,
        PS2_PAD_CTRL_L3_LEFT,
        PS2_PAD_CTRL_R2,
        PS2_PAD_CTRL_L3_RIGHT,
        PS2_PAD_CTRL_START,
        PS2_PAD_CTRL_START
    ];

    static sSecretIndex = 0;
    static sSecretDone = isOnlineManager();

    function onKeyPress(context, event)
    {
        if (event.port == 0)
            return EVENTRESULT_CONTINUE;

        switch (event.keysym)
        {
            case sSecretCommand[sSecretIndex]:
                sSecretIndex++;
                if (sSecretIndex >= sSecretCommand.size)
                {
                    main::sound.play("return");
                    appendSecret(context);
                    ScrollWindow.updateGeometry();
                    ScrollWindow::clip::space.h = ScrollWindow::clip::space.h + 32.0;
                    return EVENTRESULT_FILTER;
                }
                break;
                
            default:
                sSecretIndex = 0;
        }

        return EVENTRESULT_CONTINUE;
    }

    function appendSecret(context)
    {
        ROOT.visible = false;
        var i = sLastItemNum;
        var lw = nil;
        var w = hidden::Item.w + 2.0;
        var h = hidden::Item.h + 4.0;
        var x = 0;
        var y = sLastItemY + h;

        var option = OptionPage("Secret", SecretRoot, nil);
        var item = AppendItem(context, option, 0, sLastItemX, sLastItemY);

        if (i == last_focused_number)
            lw = item;

        i++;

        option = OptionPage("Monitor", MonitorRoot, nil);
        item = AppendItem(context, option, 0, sLastItemX + (item.w + 2.0), sLastItemY);

        if (i == last_focused_number)
            lw = item;

        i++; 
        sSecretIndex = 0;
        sSecretDone = 1;
        ROOT.visible = true;

        return lw;
    }
}

module PROJECT::ROOT::Exit
{
    function onActivate(context)
    {
        return onCancel(context);
    }
}

module PROJECT::ROOT::hidden::Item
{
    function onFocusEnter(context, event)
    {
        ROOT::ToolTip::tip.key = event.widget["title"];
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::LANPopup
{
    static original_y = Pane.y;
    
    function open(context)
    {
        common_open(context, LANPopup, original_y);
    }

    function close(context)
    {
        common_close(context, LANPopup);
    }

    static monpos_tbl = [
        [4, 3, 5],
        [1, 0, 2]
    ];

    function reflect(context)
    {
        var option = main::game.option;

        Pane::MachineName::Input::input.value = option.LAN_machine_name;
        Pane::Host::OptionMenu.setIndex(context, 1 - option.LAN_host);

        if (option.LAN_style == "play")
            Pane::Style::OptionMenu.setIndex(context, 0);
        else if (option.LAN_style == "live")
            Pane::Style::OptionMenu.setIndex(context, 1);
        else if (option.LAN_style == "monitor")
            Pane::Style::OptionMenu.setIndex(context, 2); 

        Pane::PlayerNum::slider.index = option.LAN_player_num;
        Pane::TargetName::Input::input.value = option.LAN_live_target;
        Pane::MonitorNum::slider.index = option.LAN_monitor_num;

        Pane::MonitorPos::OptionMenu.setIndex(context, monpos_tbl[option.LAN_monitor_position_y][option.LAN_monitor_position_x]);
        var midx = 0;

        if (option.monitor_size == "subaru")
            midx = 1;

        Pane::MonitorType::OptionMenu.setIndex(context, midx);
        Pane::NetworkLoad::OptionMenu.setIndex(context, option.LAN_heavy);

        sensitive(context);
    }

    static style_tbl = [
        "play", 
        "live", 
        "monitor"
    ];

    static monpos_tbl2 = [
        [1, 1],
        [0, 1],
        [2, 1],
        [1, 0],
        [0, 0],
        [2, 0]
    ];

    function EraseEndOfLineSpace(text)
    {
        while (text.at(text.size - 1) == 0x20) // " "
            text = text.substr(0, text.size - 1);

        return text;
    }

    function apply(context)
    {
        main::game.setNeedSave();
        var option = main::game.option;

        option.LAN_machine_name = EraseEndOfLineSpace(Pane::MachineName::Input::input.value);
        option.LAN_host = Pane::Host::OptionMenu.index == 0;
        option.LAN_style = style_tbl[Pane::Style::OptionMenu.index];
        option.LAN_player_num = Pane::PlayerNum::slider.index;
        option.LAN_live_target = EraseEndOfLineSpace(Pane::TargetName::Input::input.value);
        option.LAN_monitor_num = Pane::MonitorNum::slider.index;
        option.LAN_monitor_position_x = monpos_tbl2[Pane::MonitorPos::OptionMenu.index][0];
        option.LAN_monitor_position_y = monpos_tbl2[Pane::MonitorPos::OptionMenu.index][1];

        if (Pane::MonitorType::OptionMenu.index != 0)
            option.monitor_size = "subaru";
        else
            option.monitor_size = "normal";
            
        option.LAN_heavy = Pane::NetworkLoad::OptionMenu.index;
    }

    function sensitive(context)
    {
        var host = Pane::Host::OptionMenu.index == 0;

        if (host)
            Pane::Style::OptionMenu.setIndex(context, 0);

        Pane::Style::OptionMenu.insensitive = host;
        Pane::PlayerNum::slider.insensitive = !host;
        Pane::TargetName::Input::input.insensitive = Pane::Style::OptionMenu.index == 0;
        Pane::MonitorNum::slider.insensitive = !host;
        Pane::NetworkLoad::OptionMenu.insensitive = !host;
    }

    function onInitialize(context)
    {
        Pane::MonitorPos::OptionMenu::popup::vbox::X1Y0::label.adjustScale();
        Pane::MonitorPos::OptionMenu::popup::vbox::X0Y0::label.adjustScale();
        Pane::MonitorPos::OptionMenu::popup::vbox::X2Y0::label.adjustScale();
        reflect(context);
        setupSlider(Pane::MonitorNum::slider);
        setupSlider(Pane::PlayerNum::slider);
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::LANPopup::Pane::Host::OptionMenu
{
    function onValueChanged(context)
    {
        sensitive(context);
    }
}

module PROJECT::LANPopup::Pane::Style::OptionMenu
{
    function onValueChanged(context)
    {
        sensitive(context);
    }
}

module PROJECT::LANPopup::Pane::PlayerNum::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider);
    }
}

module PROJECT::LANPopup::Pane::MonitorNum::slider
{
    function onValueChanged(context)
    {
        sensitive(context);
        setupSlider(slider);
    }
}

module PROJECT::LANPopup::Pane::Buttons::Cancel
{
    function onActivate(context)
    {
        main::sound.play("ok");
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::LANPopup::Pane::Buttons::OK
{
    function onActivate(context)
    {
        main::sound.play("ok");
        apply(context);
        close(context);
        return EVENTRESULT_FILTER;
    }
}