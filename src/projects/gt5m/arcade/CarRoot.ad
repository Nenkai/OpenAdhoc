//---------------------------------------------------------------------------------------
// CarRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ROOT
{
    hidden.visible = false;

    module VIEW_MODE_ENUM
    {
        static VIEW_CAR = 16;

        static COLLECTION_VIEW = VIEW_CAR | 1;
        static HAVING_MAKER_CAR = VIEW_CAR | 2;
        static CAR_CLASS = VIEW_CAR | 3;
        static DRIVE_TRAIN = VIEW_CAR | 4;
        static AGE_TYPE = VIEW_CAR | 5;
        static NEWLY_GAINED = VIEW_CAR | 6;
        static RECENTLY_RODE = VIEW_CAR | 7;
        static CAR_XML = VIEW_CAR | 8;
        static CAR_DEBUG = VIEW_CAR | 9;
        static RARE_CAR = VIEW_CAR | 10;
        static FAVORITE_CAR = VIEW_CAR | 11;

        static VIEW_DIR = 32;

        static MAKER_DIR = VIEW_DIR | 1;
        static AGE_TYPE_DIR = VIEW_DIR | 2;
        static CLASS_DIR = VIEW_DIR | 3;
        static DRIVE_TRAIN_DIR = VIEW_DIR | 4;
        static HAVING_CAR_MAKER_DIR = VIEW_DIR | 5;
    }

    module SORT_TYPE_ENUM
    {
        static NONE = 0;
        static NAME = 1;
        static PP = 2;
        static PS = 3;
    }

    class Manager
    {
        attribute order_list = nil;
        attribute final_list = nil;
        attribute view_mode = nil;
        attribute sort_type = nil;
        attribute enable_sort = nil;
        attribute need_update_final_list = nil;

        method set_view_mode(view_mode, arg)
        {
            self.view_mode = view_mode;
            self.order_list = [];
            self.final_list = [];
            self.need_update_final_list = false;
            self.sort_type = SORT_TYPE_ENUM::NONE;
            self.enable_sort = false;

            if (view_mode & VIEW_MODE_ENUM::VIEW_CAR)
            {
                switch (view_mode)
                {
                    case VIEW_MODE_ENUM::HAVING_MAKER_CAR:
                        {
                            var maker = arg;
                            var array = [];
                            setMakerCarCodeList(maker, &array);
                            foreach (var carcode in array) {
                                if (gGameStatus.user_profile.garage.hasCar(carcode))
                                    order_list.push(carcode);
                            }
                            self.need_update_final_list = true;
                        }
                        break;

                    case VIEW_MODE_ENUM::COLLECTION_VIEW:
                        {
                            var maker = arg;
                            var array = [];
                            setMakerCarCodeList(maker, &array);
                            foreach (var carcode in array) {
                                if (!main::gtengine::MSpecDB::checkGenericFlag("trade_disable", carcode) ||
                                    !main::gtengine::MSpecDB::checkGenericFlag("copy_disable", carcode))
                                    order_list.push(carcode);
                            }
                            self.need_update_final_list = true;
                        }
                        break;

                    case VIEW_MODE_ENUM::RECENTLY_RODE:
                        {
                            var cars = gGameStatus.user_profile.garage.getRecentlyRodeCars();
                            self.final_list = cars;
                        }
                        break;

                    case VIEW_MODE_ENUM::NEWLY_GAINED:
                        {
                            var cars = gGameStatus.user_profile.garage.getNewlyGainedCars();
                            self.final_list = cars;
                        }
                        break;

                    case VIEW_MODE_ENUM::FAVORITE_CAR:
                        {
                            var cars = gGameStatus.user_profile.garage.listupFavorite();
                            self.final_list = cars;
                        }
                        break;

                    case VIEW_MODE_ENUM::CAR_XML:
                        {
                            var datalist = gCarData;
                            self.final_list = Array(datalist.size);

                            var gtr = main::gtengine::MSpecDB::getCarCode("gtr_specv_09");

                            for (var i = 0; i < self.final_list.size; i++)
                            {
                                var cp = main::gtengine::MCarThin();
                                if (gCarData[i] == gtr)
                                {
                                    cp.setCarCode(gtr);
                                    cp.color = 4;
                                    self.final_list[i] = cp;
                                } 
                                else 
                                {
                                    cp.setCarCode(gCarData[i]);
                                    cp.color = 0;
                                    self.final_list[i] = cp;
                                }
                            }
                        }
                        break;

                    case VIEW_MODE_ENUM::CAR_DEBUG:
                        {
                            var cars = [ "enzo_ferrari_02", "gtr_specv_09" ];

                            foreach (var car in cars)
                            {
                                var variation_cnt = main::gtengine::MSpecDB::getCarVariation(car);
                                for (var i = 0; i < variation_cnt; i++)
                                    self.final_list.push([main::gtengine::MSpecDB::getCarCode(car), i]); 
                            }
                        }
                        break;

                    case VIEW_MODE_ENUM::RARE_CAR:
                        {
                            self.final_list = gGameStatus.user_profile.garage.listup(true);
                        }
                        break;
                }
            }



            if (view_mode & VIEW_MODE_ENUM::VIEW_DIR)
            {
                switch (view_mode)
                {
                    case VIEW_MODE_ENUM::MAKER_DIR:
                        {
                            if (ROOT.sCarTypeCountEachMaker == nil)
                                ROOT.sCarTypeCountEachMaker = game_garage().getMyCarTypeCountEachMaker();

                            var maker_list = ROOT.sMakerList.array;
                            MakerUtil::excludeNonDisplayMaker(maker_list);

                            self.final_list = maker_list;
                        }
                        break;

                    case VIEW_MODE_ENUM::HAVING_CAR_MAKER_DIR:
                        {
                            if (ROOT.sCarCountEachMaker == nil)
                                ROOT.sCarCountEachMaker = game_garage().getMyCarCountEachMaker();

                            var maker_list = ROOT.sMakerList.array;
                            MakerUtil::excludeNonDisplayMaker(maker_list);

                            foreach (var maker in maker_list)
                            {
                                if (ROOT.sCarCountEachMaker[maker] != nil)
                                    self.final_list.push(maker);
                            }
                        }
                        break;
                }
            }
        }

        method set_sort_type(sort_type)
        {
            if (sort_type > SORT_TYPE_ENUM::NONE)
            {
                self.sort_type = sort_type;
                self.enable_sort = true;
                return true;
            }
            return false;
        }

        method apply_iconbox(context, default_focus)
        {
            if (self.enable_sort)
                sort(context);

            if (self.need_update_final_list)
                create_final_list();

            IconBox.set(context, default_focus);
        }

        method get(i)
        {
            if (i >= final_list.size)
                return nil;

            switch (view_mode)
            {
                case VIEW_MODE_ENUM::HAVING_CAR_MAKER_DIR:
                case VIEW_MODE_ENUM::MAKER_DIR:
                    return self.final_list[i];
                    break;
                
                default:
                    var carcode = self.final_list[i].getCarCode();
                    return carcode;
                    break;
            }

            return nil;
        }

        method get_number(car_code)
        {
            if (self.order_list == nil)
                return -1;

            if (self.view_mode == VIEW_MODE_ENUM::COLLECTION_VIEW)
                return self.order_list.indexOf(car_code);

            return -1;
        }

        method get_color(i)
        {
            if (self.order_list == nil)
                return -1;

            if (i >= final_list.size)
                return -1;

            if (!self.final_list[i].isInstanceOf(main::gtengine::MCarThin))
                return -1;

            var cp = self.final_list[i];
            return cp.color;
        }

        method size()
        {
            if (self.final_list == nil)
                return 0;

            return self.final_list.size;
        }

        method clear()
        {
            self.order_list = nil;
            self.final_list = nil;
            self.view_mode = nil;
            self.sort_type = nil;
        }

        method current_view_mode()
        {
            return self.view_mode;
        }

        method current_sort_type()
        {
            return self.sort_type;
        }

        method sort(context, sort_type)
        {
            if (self.order_list.size == 0)
                return;
            
            if (sort_type != nil)
                self.sort_type = sort_type;

            if (self.sort_type == nil)
                self.sort_type = SORT_TYPE_ENUM::NONE;

            switch (self.sort_type)
            {
                case SORT_TYPE_ENUM::PS:
                    {
                        var s0 = main::pdistd::GetSystemTimeMicroSecond();
                        main::gtengine::sortCarCodeListByPower(order_list, false);
                        var s1 = main::pdistd::GetSystemTimeMicroSecond();
                    }
                    break;

                case SORT_TYPE_ENUM::NAME:
                    {
                        var s0 = main::pdistd::GetSystemTimeMicroSecond();
                        main::gtengine::sortCarCodeListByName(order_list, true);
                        var s1 = main::pdistd::GetSystemTimeMicroSecond();
                    }
                    break;
            }
        }

        method create_final_list()
        {
            var s0 = main::pdistd::GetSystemTimeMicroSecond();
            
            self.final_list = gGameStatus.user_profile.garage.getCarsForMenu(self.order_list);

            var s1 = main::pdistd::GetSystemTimeMicroSecond();
        }
    }

    attribute sManager = nil;
    attribute sMakerList = nil;
    attribute sReturnPage = nil;
    attribute sCurrentViewModeArg = nil;

    method get_car_power(cp, no_update = false)
    {
        if (!no_update)
            cp.updateScratch();

        var power = cp.getPowerScratch();
        var result = main::pdiext::MUnit::GetPowerForDisplay(power.toFloat() * 0.1);
        return result;
    }
    
    attribute sPathText = nil;
    attribute sCurrentPathIndex = nil;
    method setPathText(arg, arg2)
    {
        if (arg == "init")
        {
            ROOT.sPathText = [""];
            ROOT.sCurrentPathIndex = 0;
        }
        else if (arg == "next")
        {
            ROOT.sPathText.push("");
            ROOT.sCurrentPathIndex = ROOT.sPathText.size - 1;
        }
        else if (arg == "prev")
        {
            if (ROOT.sPathText.size >= 2) 
            {
                ROOT.sPathText.pop();
                ROOT.sCurrentPathIndex = ROOT.sPathText.size - 1;
            } 
            else 
            {
                ROOT.sPathText[0] = "";
            }
        }
        else if (arg == "set")
        {
            var push_text = SearchTypes.label.text;
            if (arg2 != nil)
                push_text = arg2;

            ROOT.sPathText[ROOT.sCurrentPathIndex] = push_text;
        }
        else if (arg == "apply")
        {
            filter.TextFace.text = "";
            for (var i = 0; i < ROOT.sPathText.size; i++)
            {
                if (i != 0)
                    filter.TextFace.text += " > ";
                filter.TextFace.text += ROOT.sPathText[i];
            }
        }
    }

    attribute sCarCountEachMaker = nil;
    attribute sCarTypeCountEachMaker = nil;

    method getMyCarCount(maker)
    {
        if (ROOT.sCarCountEachMaker == nil)
            ROOT.sCarCountEachMaker = game_garage().getMyCarCountEachMaker();

        var count = sCarCountEachMaker[maker];
        if (count != nil)
            return count;
        else
            return 0;
    }

    method getMyCarTypeCount(maker)
    {
        if (ROOT.sCarTypeCountEachMaker == nil)
            ROOT.sCarTypeCountEachMaker = game_garage().getMyCarTypeCountEachMaker();

        var count = sCarTypeCountEachMaker[maker];
        if (count != nil)
            return count;
        else
            return 0;
    }

    method getTotalMakerCarTypeCount(maker)
    {
        var count = 0;
        var makers = [maker];
        var maker_pair = MakerUtil::hasDisplayPair(maker);
        if (maker_pair != nil)
            makers.push(maker_pair);

        foreach (var m in makers)
        {
            var tmp_map = ROOT.sMakerList.map[m];
            if (tmp_map == nil)
                ;
            else
            {
                count += tmp_map["car_count"].toInt();

                var sp_car = tmp_map["sp_car"];
                if (sp_car != nil)
                {
                    if (!game_garage().hasCar(main::gtengine::MSpecDB::getCarCode(sp_car), 0))
                        --count;
                }
            }
        }

        return count;
    }

    method getMakerCarCount(maker, by_car_type)
    {
        var count = 0;
        var makers = [maker];
        var maker_pair = MakerUtil::hasDisplayPair(maker);
        if (maker_pair != nil)
            makers.push(maker_pair);

        foreach (var m in makers)
        {
            if (by_car_type)
                count += getMyCarTypeCount(m);
            else
                count += getMyCarCount(m);
        }

        return count;
    }

    method setMakerCarCodeList(maker, list)
    {
        *list = Array();
        var makers = [maker];
        var maker_pair = MakerUtil::hasDisplayPair(maker);
        if (maker_pair != nil)
            makers.push(maker_pair);

        foreach (var m in makers)
        {
            var carcode_list = main::gtengine::MSpecDB::getTunerCarCodeList(m);
            foreach (var code in carcode_list)
                var carlabel = main::gtengine::MSpecDB::getCarLabel(code);

            *list += carcode_list;
        }
    }

    attribute sCarCodeRefForExt = nil;
    attribute sCarColorRefForExt = nil;

    method setExtMode(car_ref, col_ref)
    {
        self.sCarCodeRefForExt = car_ref;
        self.sCarColorRefForExt = col_ref;
    }

    method isExtMode()
    {
        return self.sCarColorRefForExt != nil;
    }

    method setExtCar(carcode, color)
    {
        *self.sCarCodeRefForExt = carcode;
        *self.sCarColorRefForExt = color;
    }

    module OPEN_MODE_ENUM
    {
        static ARCADE = 0;
        static ONLINE = 1;
        static RARE_CAR_ONLY = 2;
        static COLLECTION = 3;
        static TRADE = 4;
    }

    static sOpenMode = OPEN_MODE_ENUM::ARCADE;
    static sDirtCheck = true;

    method setOpenMode(mode, dirt_check = true)
    {
        ROOT.sOpenMode = mode;
        ROOT.sDirtCheck = dirt_check;
    }

    method onInitialize(context)
    {
        self.sManager = Manager();
        self.sMakerList = Array();
        self.sCurrentViewModeArg = nil;
        self.sPathText = Array();
        self.sCurrentPathIndex = 0;

        HScrollbar.initialize(IconBox);

        self.sMakerList = main::pdiapp::XmlUtil::load_map_and_array("/textdata/gt5m/makerlist.xml", "MakerData", "maker", "code");

        setPathText("init");

        if (ROOT.sOpenMode == OPEN_MODE_ENUM::ARCADE ||
            ROOT.sOpenMode == OPEN_MODE_ENUM::ONLINE)
        {
            Header::TextFace.text = context.translate(ROOT, "PageTitle");

            SearchTypes.setViewModeRef(&game_context().garage_view_mode);
            SearchTypes.create_items(context, "ItemSet_Arcade01",
                                     game_context().garage_view_mode,
                                     true);
        }
        else if (ROOT.sOpenMode == OPEN_MODE_ENUM::COLLECTION)
        {
            Header::TextFace.text = context.translate(ROOT, "PageTitleCarCollection");

            SearchTypes.setViewModeRef(&game_context().collection_view_mode);
            SearchTypes.create_items(context, "ItemSet_Collection01",
                                        game_context().collection_view_mode,
                                        true);

        }   
        else if (ROOT.sOpenMode == OPEN_MODE_ENUM::RARE_CAR_ONLY ||
                 ROOT.sOpenMode == OPEN_MODE_ENUM::TRADE)
        {
            Header::TextFace.text = context.translate(ROOT, "PageTitle");

            SearchTypes.setViewModeRef(&game_context().garage_view_mode);
            SearchTypes.create_items(context, "ItemSet_Rare",
                                        game_context().garage_view_mode,
                                        true);
        }

        SearchTypes.setStripe(context);
        SearchTypes.setIndex(context, 0);

        ToolTip::tip.remove();
        ToolTip::tip.action_type = 1;

        ToolTip::tip.visible = false;
        ROOT.setFocus(IconBox);
    }

    method onPageInEnd(context)
    {
        BalloonTip.initialize(context);

        ToolTip::tip.visible = true;
        ToolTip::tip.value = "";

        var focus_w = ROOT.getFocusWidget();
        context.pushEvent(main::menu::MFocusEnterEvent(context, focus_w));

        HScrollbar.stop_update = false;
        HScrollbar.update_arrow();
    }

    method onFinalize(context)
    {
        IconBox.setItemCount(0, 0);
        if (self.sManager != nil)
        {
            self.sManager.clear();
            self.sManager = nil;
        }

        self.sMakerList = nil;
        self.sCurrentViewModeArg = nil;
        self.sCarCountEachMaker = nil;
        self.sCarTypeCountEachMaker = nil;
        self.sPathText = nil;
        self.sCurrentPathIndex = nil;
    }

    method openTradeCarPopup(context)
    {
        var index = IconBox.focus_index;
        var w = IconBox.getItemWidget(index, context);
        if (w.is_dummy)
        {
            main::sound.play("cancel");
            return EVENTRESULT_FILTER;
        }

        var carcode = self.sManager.get(index);
        var color = self.sManager.get_color(index);
        if (!gGameStatus.user_profile.garage.hasCar(carcode, color))
        {
            main::sound.play("cancel");
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");

        var cp = main::gtengine::MCarParameter(carcode);
        cp.color = color;

        var result = TradeCarRoot.open(context, cp);
        if (result)
        {
            if (ROOT.isExtMode())
                ROOT.setExtCar(cp.getCarCode(), cp.color);
            else
                main::GlobalStatus::game_context.setCar(cp);

            onExit(context, true);
        }

        return EVENTRESULT_FILTER;
    }

    method openCarSpecPopup(context)
    {
        var index = IconBox.focus_index;
        var w = IconBox.getItemWidget(index, context);
        if (w.is_dummy)
        {
            main::sound.play("cancel");
            return EVENTRESULT_FILTER;
        }

        var carcode = self.sManager.get(index);
        var color = self.sManager.get_color(index);
        if (!gGameStatus.user_profile.garage.hasCar(carcode, color))
        {
            main::sound.play("cancel");
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");

        var cp = main::gtengine::MCarParameter(carcode);
        cp.color = color;

        DetailProject::CarSpecPopup.open(context, cp);
    }

    method openCarDetailPopup(context)
    {
        var index = IconBox.focus_index;
        var w = IconBox.getItemWidget(index, context);
        if (w.is_dummy)
        {
            main::sound.play("cancel");
            return EVENTRESULT_FILTER;
        }

        var carcode = self.sManager.get(index);
        var color = self.sManager.get_color(index);
        if (!gGameStatus.user_profile.garage.hasCar(carcode, color))
        {
            main::sound.play("cancel");
            return EVENTRESULT_FILTER;
        }
        main::sound.play("ok");
        var option = gGameStatus.user_profile.option;
        var is_favorite = w.Favorite.visible;

        var cp;
        if (is_favorite)
        {
            cp = gGameStatus.user_profile.garage.getFavorite(carcode, color);
        }
        else
        {
            cp = main::gtengine::MCarParameter(carcode);
            cp.color = color;
        }

        cp.quicktune_tcs = main::GlobalStatus::game_context.assist_tcs;

        var is_dirt = main::gtengine::MSpecDB::isDirt(main::GlobalStatus::game_context.course);

        var dp = main::gtengine::MCarDriverParameter();
        dp.manual = main::GlobalStatus::game_context.manual;
        dp.assist_asm = is_dirt ? 0 : main::GlobalStatus::game_context.assist_asm;
        dp.assist_tcs = main::GlobalStatus::game_context.assist_tcs;
        dp.physics_pro = main::GlobalStatus::game_context.physics_pro;
        dp.active_steering = option.active_steering;

        var data = DetailProject::CarDetailPopup::Data();
        data.cp = cp;
        data.dp = dp;
        data.show_info = true;
        data.is_favorite = is_favorite;
        data.can_change_asm = !is_dirt;

        var result = DetailProject::CarDetailPopup.open(context, data);

        if (result)
        {
            if (ROOT.isExtMode())
            {
                ROOT.setExtCar(cp.getCarCode(), cp.color);
            }
            else
            {
                gGameStatus.user_profile.garage.rideCar(cp);
                main::GlobalStatus::game_context.setCar(cp);
                main::GlobalStatus::game_context.manual = dp.manual;
                if (!is_dirt)
                    main::GlobalStatus::game_context.assist_asm = dp.assist_asm;

                main::GlobalStatus::game_context.assist_tcs = cp.quicktune_tcs;
                main::GlobalStatus::game_context.physics_pro = dp.physics_pro;
                option.active_steering = dp.active_steering;

                if (ROOT.sOpenMode == OPEN_MODE_ENUM::ARCADE)
                    main::GlobalStatus::game_context.setArcadeCar(cp);

                if (is_favorite)
                {
                    var res = gGameStatus.user_profile.garage.updateParamForFavorite(cp);
                }


                if (ROOT.sDirtCheck)
                {
                    if (!main::gtengine::MSpecDB::canRun(cp.getCarCode(), game_context().course))
                    {
                        game_context().course = main::gtengine::MSpecDB::NO_CODE64;

                        if (ROOT.sOpenMode == OPEN_MODE_ENUM::ARCADE)
                            game_context().arcade_course = main::gtengine::MSpecDB::NO_CODE64;
                    }
                }

                TopRoot.sLastFocused = nil;
            }
            onExit(context, true);
        }

        return EVENTRESULT_FILTER;
    }

    method setReturnPage(root)
    {
        ROOT.sReturnPage = root;
    }

    method onExit(context, force = false)
    {
        if (!force && SearchTypes.prev_layer_items(context))
        {
            setPathText("prev");
            setPathText("set");
            setPathText("apply");

            return EVENTRESULT_FILTER;
        }

        var return_page = ROOT.sReturnPage;
        if (return_page == nil)
            return_page = TopRoot;
        StartPageOut_XEffect(context, ROOT, return_page);
        ROOT.sReturnPage = nil;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        onExit(context);
        return EVENTRESULT_FILTER;
    }

    module ROOT::Exit
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.onExit(context);
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            var balloon_text = context.translate(ROOT, "Arcade", "close");
            BalloonTip.set_value(context, self, balloon_text, 12);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module IconBox
    {
        method set(context, default_focus)
        {
            self.v_magnify = 1.0;
            self.h_magnify = 1.0;

            self.setItemCount(0, 0);

            var view_mode = ROOT.sManager.current_view_mode();
            if (view_mode & VIEW_MODE_ENUM::VIEW_CAR)
                IconBox.setItemTemplate(context, hidden::Item);

            if (view_mode & VIEW_MODE_ENUM::VIEW_DIR)
                IconBox.setItemTemplate(context, hidden::ItemDir);

            self.postRedraw();

            var item_size = ROOT.sManager.size();

            filter::Num.text = item_size;

            ToolTip::tip.value = "";
            BalloonTip.reset_value();

            if (item_size == 0)
            {
                self.insensitive = true;

                HScrollbar.inc_arrow_animation(true);
                HScrollbar.dec_arrow_animation(true);
                HScrollbar::pinch.visible = false;

                return;
            }

            var h = 0; var v = 0;
            if (item_size < 5) 
            {
                v = 1;
                h = item_size;
                IconBox.h_scacing = 16;
            } 
            else 
            {
                v = 2;
                h = (item_size + 1) / v;
                IconBox.h_scacing = 2;
            }

            HScrollbar::pinch.visible = 5 < h;

            IconBox.setItemCount(h, v);
            if (default_focus != nil)
            {
                IconBox.focus_index = default_focus;
            } 
            else 
            {
                var riding_cp = gGameStatus.user_profile.garage.getRidingCar();
                if (riding_cp != nil)
                {
                    if (ROOT.sManager.current_view_mode() & VIEW_MODE_ENUM::VIEW_CAR)
                    {
                        if (gGameStatus.user_profile.garage.hasCar(riding_cp))
                        {
                            for (var i = 0; i < ROOT.sManager.size(); i++)
                            {
                                if (riding_cp.getCarCode() == ROOT.sManager.get(i) &&
                                    riding_cp.color == ROOT.sManager.get_color(i))
                                    IconBox.focus_index = i;
                            }
                        }
                    }
                    else if (ROOT.sManager.current_view_mode() == VIEW_MODE_ENUM::MAKER_DIR ||
                             ROOT.sManager.current_view_mode() == VIEW_MODE_ENUM::HAVING_CAR_MAKER_DIR)
                    {
                        var riding_car_maker = main::gtengine::MSpecDB::getTunerLabel(riding_cp.getCarCode());
                        for (var i = 0; i < ROOT.sManager.final_list.size; i++)
                        {
                            var maker_label = ROOT.sManager.final_list[i];
                            if (riding_car_maker == maker_label)
                                IconBox.focus_index = i;
                        }
                    }
                }
            }
            self.insensitive = false;
        }

        method onVisibleNotify(context, indexes)
        {
            foreach (var i in indexes)
            {
                if (IconBox.getItemVisible(i))
                {
                    var w = IconBox.getItemWidget(i, context);
                    if (w != nil)
                    {
                        w.set(context, ROOT.sManager.current_view_mode(), ROOT.sManager.get(i), ROOT.sManager.get_color(i));
                        if (IconBox.focus_index == i)
                            w.focus_enter(context);
                    }
                }
                else
                {
                    IconBox.setItemWidget(i, context, nil);
                }
            }
        }

        method onFocusEnter(context, event)
        {
            if (self.getItemCount() <= 0)
                return EVENTRESULT_FILTER;

            var index = IconBox.focus_index;
            var w = IconBox.getItemWidget(index, context);
            ROOT.setFocus(w);
            w.focus_enter(context);

            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context, event)
        {
            if (self.getItemCount() <= 0)
                return EVENTRESULT_FILTER;

            BalloonTip.reset_value();

            var index = IconBox.focus_index;
            var w = IconBox.getItemWidget(index, context);
            w.focus_leave(context);

            self.v_magnify = 1.0;
            self.h_magnify = 1.0;

            return EVENTRESULT_FILTER;
        }

        method onFocusNotify(context, new_index, old_index)
        {
            if (self.getItemCount() <= 0)
                return EVENTRESULT_FILTER;

            self.v_magnify = 1.0;
            self.h_magnify = 1.0;

            var new_w = self.getItemWidget(new_index, context);
            if (new_w != nil)
            {
                ROOT.setFocus(new_w);
                new_w.focus_enter(context);
            }

            var old_w = self.getItemWidget(old_index, context);
            if (old_w != nil)
            {
                old_w.focus_leave(context);
            }

            return EVENTRESULT_FILTER;
        }
    }

    module hidden::Item
    {
        Current.visible = false;
        Unselectable.visible = false;
        Favorite.visible = false;
        Value.visible = false;
        FrameImageFace.visible = false;
        ColorFace2.visible = false;
        ImageFace.visible = false;

        attribute is_dummy = true;
        attribute view_mode = nil;

        method set(context, view_mode, carcode, color)
        {
            self.view_mode = view_mode;

            Current.visible = false;
            Unselectable.visible = false;
            Favorite.visible = false;
            Value.visible = false;
            FrameImageFace.visible = false;
            ColorFace2.visible = false;
            
            if (carcode != nil && carcode != main::gtengine::MSpecDB::NO_CODE64)
            {
                self.is_dummy = false;
                var car_count = gGameStatus.user_profile.garage.getCarCount(carcode, color);

                if (car_count > 0)
                {

                    if (ROOT.sManager.current_sort_type() == SORT_TYPE_ENUM::PS)
                    {
                        var cp = main::gtengine::MCarParameter(carcode);
                        self.Value.text = get_car_power(cp);
                        self.Value.visible = true;
                    }

                    if (game_context().course != main::gtengine::MSpecDB::NO_CODE64)
                    {
                        if (main::gtengine::MSpecDB::isDirt(game_context().course))
                            Unselectable.visible = main::gtengine::MSpecDB::checkGenericFlag("dirt_disable", carcode);
                    }

                    if (car_count > 1)
                        self.CarCount.text = car_count;

                    self.Favorite.visible = game_garage().hasFavorite(carcode, color);
                    self.Favorite::Effect.reverse = true;
                    self.Favorite::Effect.reset();

                    self.Current.visible = false;
                    var riding_cp = gGameStatus.user_profile.garage.getRidingCar();
                    if (riding_cp != nil)
                    {
                        if (riding_cp.getCarCode() == carcode && riding_cp.color == color)
                            self.Current.visible = true;
                    }
                }
                else
                {
                    ImageFace.tex_func_name = "env_color";
                }

                if (ROOT.sManager.current_view_mode() == VIEW_MODE_ENUM::COLLECTION_VIEW)
                {
                    var number = ROOT.sManager.get_number(carcode) + 1;
                    if (number > -1)
                        self.Value.text = context.translate(ROOT, "CAR_NUMBER").build(number);
                    else
                        self.Value.text = "--";

                    self.Value.visible = true;
                }


                ImageFace.visible = true;
                ImageFace.cache = false;
                ImageFace.from_disk = true;
                ImageFace.block = false;

                var carlabel = main::gtengine::MSpecDB::getCarLabel(carcode);
                ImageFace.image_path = "car/thumbnail/%s.%02d".format(carlabel, color);
                ImageFace.doInitialize(context);
            }
            else
            {
                self.is_dummy = true;
                ImageFace.visible = false;
            }
        }

        method focus_enter(context)
        {
            if (!self.is_dummy)
            {
                var index = IconBox.focus_index;
                var carcode = ROOT.sManager.get(index);
                var color = ROOT.sManager.get_color(index);

                {
                    FrameImageFace.visible = true;
                    ColorFace2.visible = true;
                    IconBox.v_magnify = 1.2;
                    IconBox.h_magnify = 1.2;
                }

                if (gGameStatus.user_profile.garage.hasCar(carcode, color))
                {
                    var carname = main::gtengine::MSpecDB::getCarShortName(carcode);
                    set_balloontip(context, carname);

                    ToolTip::tip.value = context.translate(ROOT, "BUTTON_HELP_CAR_FAVORITE");
                } 
                else 
                {
                    ToolTip::tip.value = "";
                }
            }
            else
            {
                FrameImageFace.visible = false;
                ColorFace2.visible = false;
                BalloonTip.reset_value();
                ToolTip::tip.value = "";
            }

            HScrollbar.update_arrow();

            return EVENTRESULT_FILTER;
        }

        method focus_leave(context)
        {
            ColorFace2.visible = false;
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }

        method set_balloontip(context, txt)
        {
            var index = IconBox.focus_index;
            var base_point = self;
            if ((index - 4) > -1 && (index + 4) < ROOT.sManager.size())
            {
                if (index & 1)
                    base_point = IconBox::CenterBottom;
                else
                    base_point = IconBox::CenterTop;
            }

            BalloonTip.set_value(context, base_point, txt, 35);
        }

        method onActivate(context)
        {
            if (ROOT.sOpenMode == OPEN_MODE_ENUM::COLLECTION)
                ROOT.openCarSpecPopup(context);
            else if (ROOT.sOpenMode == OPEN_MODE_ENUM::TRADE)
                ROOT.openTradeCarPopup(context);
            else 
            {
                if (ROOT.sOpenMode == OPEN_MODE_ENUM::ONLINE)
                {
                    var index = IconBox.focus_index;
                    var carcode = ROOT.sManager.get(index);
                    if (main::gtengine::MSpecDB::isDirt(game_context().course) &&
                        main::gtengine::MSpecDB::checkGenericFlag("dirt_disable", carcode))
                    {
                        main::sound.play("cancel");
                        return EVENTRESULT_FILTER;
                    }
                }
                ROOT.openCarDetailPopup(context);
            }

            return EVENTRESULT_FILTER;
        }
        function onKeyPress(context, event)
        {
            if (event.keysym == PSP_PAD_CTRL_TRIANGLE)
            {
                var index = IconBox.focus_index;
                var w = IconBox.getItemWidget(index, context);
                if (w.is_dummy)
                {
                    main::sound.play("cancel");
                    return EVENTRESULT_FILTER;
                }

                var carcode = ROOT.sManager.get(index);
                var color = ROOT.sManager.get_color(index);

                if (!gGameStatus.user_profile.garage.hasCar(carcode, color))
                {
                    main::sound.play("cancel");
                    return EVENTRESULT_FILTER;
                }

                if (!gGameStatus.user_profile.garage.hasFavorite(carcode, color))
                {
                    var fv_car_count = game_garage().getCarCountFavorite();
                    var fv_size = game_garage().getFavoriteSize();
                    if (fv_car_count < fv_size)
                    {
                        main::sound.play("ok");

                        var empty_of_fv = fv_size - fv_car_count;
                        var car_name = main::gtengine::MSpecDB::getCarShortName(carcode);
                        var color_name = main::gtengine::MSpecDB::getCarColorName(carcode, color);
                        var msg = context.translate(ROOT, "do_you_set_favorite").build(empty_of_fv, car_name, color_name);
                        var result = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, msg);
                        if (result)
                        {
                            game_garage().pushFavorite(carcode, color);
                            w.Favorite.visible = game_garage().hasFavorite(carcode, color);
                            w.Favorite::Effect.reverse = false;
                            w.Favorite::Effect.restart();
                        }
                    } 
                    else 
                    {
                        main::sound.play("cancel");
                        DialogUtil::openConfirmDialog(context, DialogUtil::OK, context.translate(ROOT, "EMPTY_FAVORITE"));
                    }
                }
                else
                {
                    main::sound.play("ok");

                    var car_name = main::gtengine::MSpecDB::getCarShortName(carcode);
                    var color_name = main::gtengine::MSpecDB::getCarColorName(carcode, color);
                    var msg = context.translate(ROOT, "do_you_unset_favorite").build(car_name, color_name);
                    var result = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, msg);
                    if (result)
                    {
                        game_garage().removeFavorite(carcode, color);

                        if (ROOT.sManager.current_view_mode() == VIEW_MODE_ENUM::FAVORITE_CAR)
                        {
                            w.set(context, VIEW_MODE_ENUM::FAVORITE_CAR);
                            ROOT.sManager.final_list[index] = main::gtengine::MCarThin();
                            IconBox.v_magnify = 1.0;
                            IconBox.h_magnify = 1.0;
                            filter::Num.text = game_garage().getCarCountFavorite();
                            w.CarCount.text = "";
                        }
                        w.Favorite.visible = game_garage().hasFavorite(carcode, color);
                    }
                }
                return EVENTRESULT_FILTER;
            }

            return EVENTRESULT_CONTINUE;
        }
    }

    module hidden::ItemDir
    {
        Current.visible = false;
        FrameImageFace.visible = false;
        ImageFace.visible = false;

        attribute is_dummy = true;
        attribute view_mode = nil;

        import hidden::Item::set_balloontip;

        method set(context, view_mode, value)
        {
            self.view_mode = view_mode;

            FrameImageFace.visible = false;
            Current.visible = false;

            if (value != nil)
            {
                switch (self.view_mode)
                {
                    case VIEW_MODE_ENUM::HAVING_CAR_MAKER_DIR:
                    case VIEW_MODE_ENUM::MAKER_DIR:
                        {
                            var maker = value;
                            if (maker != "")
                            {
                                self.is_dummy = false;

                                Current.visible = false;
                                var riding_cp = gGameStatus.user_profile.garage.getRidingCar();
                                if (riding_cp != nil)
                                {
                                    var riding_car_maker = main::gtengine::MSpecDB::getTunerLabel(riding_cp.getCarCode());
                                    if (maker == riding_car_maker)
                                    {
                                        Current.visible = true;
                                    } 
                                    else
                                    {
                                        var maker_pair = MakerUtil::hasDisplayPair(riding_car_maker);
                                        if (maker_pair != nil && maker_pair == maker)
                                            Current.visible = true;
                                    }
                                }

                                ImageFace.visible = true;
                                ImageFace.cache = false;
                                ImageFace.from_disk = true;
                                ImageFace.block = false;
                                ImageFace.image_path = "piece_gt5m/tunner_logo_S/" + maker + ".img";
                                ImageFace.doInitialize(context);
                            }
                        }
                        break;
                }
            }
            else
            {
                self.is_dummy = true;
                ImageFace.visible = false;
            }
        }

        method focus_enter(context)
        {
            if (!self.is_dummy)
            {
                var index = IconBox.focus_index;
                {
                    FrameImageFace.visible = true;
                    IconBox.v_magnify = 1.2;
                    IconBox.h_magnify = 1.2;
                }

                switch (self.view_mode)
                {
                    case VIEW_MODE_ENUM::MAKER_DIR:
                        {
                            var maker = ROOT.sManager.get(index);
                            var maker_str = context.translate(ROOT, "TunerName", maker);

                            set_balloontip(context, maker_str);

                            var total_car_types = getTotalMakerCarTypeCount(maker);
                            var car_types = ROOT.getMakerCarCount(maker, true);
                            var car_count_str = context.translate(ROOT, "UNIT_CARS").build(car_types + " / " + total_car_types);

                            ToolTip::tip.value = maker_str + " : " + car_count_str;
                        }
                        break;

                    case VIEW_MODE_ENUM::HAVING_CAR_MAKER_DIR:
                        {
                            var maker = ROOT.sManager.get(index);
                            var maker_str = context.translate(ROOT, "TunerName", maker);

                            set_balloontip(context, maker_str);

                            var cars = ROOT.getMakerCarCount(maker, false);
                            var car_count_str = context.translate(ROOT, "UNIT_CARS_2").build(cars);

                            ToolTip::tip.value = maker_str + " : " + car_count_str;
                        }
                        break;
                }
            }
            else
            {
                FrameImageFace.visible = false;
                BalloonTip.reset_value();
                ToolTip::tip.value = "";
            }

            HScrollbar.update_arrow();

            return EVENTRESULT_FILTER;
        }

        method focus_leave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }

        method onActivate(context)
        {
            var focus_index = IconBox.focus_index;
            var view_mode_arg = ROOT.sManager.get(focus_index);
            if (view_mode_arg == nil)
                return EVENTRESULT_FILTER;

            main::sound.play("ok");

            switch (self.view_mode)
            {
                case VIEW_MODE_ENUM::MAKER_DIR:
                case VIEW_MODE_ENUM::HAVING_CAR_MAKER_DIR:

                    ROOT.sCurrentViewModeArg = nil;
                    ROOT.sCurrentViewModeArg = view_mode_arg;

                    SearchTypes.next_layer_items(context, nil, true);

                    setPathText("prev");
                    setPathText("set", context.translate(ROOT, "TunerName", view_mode_arg));
                    setPathText("next");
                    setPathText("set");
                    setPathText("apply");
                    break;
            }

            return EVENTRESULT_FILTER;
        }
    }

    module SearchTypes
    {
        class Item
        {
            attribute item_code_ = nil;
            attribute widget_ = nil;
            attribute view_mode_ = nil;
            attribute sort_type_ = nil;
            attribute focus_need_save_ = nil;
            attribute next_layer_ = nil;
            attribute focus_priority_ = nil;

            method __init__(item_code, widget, view_mode, sort_type, focus_need_save, next_layer, focus_priority)
            {
                self.item_code_ = item_code;
                self.widget_ = widget;
                self.view_mode_ = view_mode;
                self.sort_type_ = sort_type;
                self.focus_need_save_ = focus_need_save;
                self.next_layer_ = next_layer;
                self.focus_priority_ = focus_priority;
            }
        }

        static ItemSet_Arcade01 = [
            Item(1, hidden::SearchItems::recently_got,   VIEW_MODE_ENUM::NEWLY_GAINED,         SORT_TYPE_ENUM::NONE, true, nil, true),
            Item(2, hidden::SearchItems::recently_rided, VIEW_MODE_ENUM::RECENTLY_RODE,        SORT_TYPE_ENUM::NONE, true, nil, false),
            Item(3, hidden::SearchItems::favorite_car,   VIEW_MODE_ENUM::FAVORITE_CAR,         SORT_TYPE_ENUM::NONE, true, nil, false),
            Item(4, hidden::SearchItems::dir_maker,      VIEW_MODE_ENUM::HAVING_CAR_MAKER_DIR, SORT_TYPE_ENUM::NONE, true, "ItemSet_Arcade02", false)
        ];

        static ItemSet_Arcade02 = [
            Item(6, hidden::SortItems::ps,   VIEW_MODE_ENUM::HAVING_MAKER_CAR, SORT_TYPE_ENUM::PS,   false, nil, true),
            Item(5, hidden::SortItems::name, VIEW_MODE_ENUM::HAVING_MAKER_CAR, SORT_TYPE_ENUM::NAME, false, nil, false)
        ];

        static ItemSet_Collection01 = [
            Item(1, hidden::SearchItems::recently_got,   VIEW_MODE_ENUM::NEWLY_GAINED,  SORT_TYPE_ENUM::NONE, true, nil, true),
            Item(2, hidden::SearchItems::recently_rided, VIEW_MODE_ENUM::RECENTLY_RODE, SORT_TYPE_ENUM::NONE, true, nil, false),
            Item(3, hidden::SearchItems::favorite_car,   VIEW_MODE_ENUM::FAVORITE_CAR,  SORT_TYPE_ENUM::NONE, true, nil, false),
            Item(4, hidden::SearchItems::dir_maker,      VIEW_MODE_ENUM::MAKER_DIR,     SORT_TYPE_ENUM::NONE, true, "ItemSet_Collection02", false)
        ];

        static ItemSet_Collection02 = [
            Item(6, hidden::SortItems::ps,                VIEW_MODE_ENUM::HAVING_MAKER_CAR, SORT_TYPE_ENUM::PS,   false, nil, true),
            Item(5, hidden::SortItems::name,              VIEW_MODE_ENUM::HAVING_MAKER_CAR, SORT_TYPE_ENUM::NAME, false, nil, false),
            Item(7, hidden::SearchItems::view_collection, VIEW_MODE_ENUM::COLLECTION_VIEW,  SORT_TYPE_ENUM::NAME, false, nil, false)
        ];

        static ItemSet_Rare = [
            Item(8, hidden::SearchItems::rare_car, VIEW_MODE_ENUM::RARE_CAR, SORT_TYPE_ENUM::NONE, false, nil, false)
        ];

        attribute prev_index = nil;
        attribute popup_open = nil;
        attribute value_changed = nil;
        attribute item_set = nil;
        attribute item_set_name = nil;
        attribute prev_layer_info = nil;
        attribute view_mode_ref = nil;

        method onInitialize(context)
        {
            self.prev_index = nil;
            self.popup_open = false;
            self.value_changed = false;
            self.item_set = nil;
            self.item_set_name = "";
            self.prev_layer_info = [];
        }

        method onFinalize(context)
        {
            self.prev_index = nil;
            self.popup_open = nil;
            self.value_changed = nil;
            self.item_set = nil;
            self.item_set_name = nil;
            self.prev_layer_info = nil;
            self.view_mode_ref = nil;
        }

        method setViewModeRef(ref)
        {
            self.view_mode_ref = ref;
        }

        method create_items(context, item_set, focus_item_code, apply_iconbox = true)
        {
            self.value_changed = false;
            self.popup_open = false;
            self.item_set_name = item_set;
            self.item_set = self[item_set];

            self.popup.vbox.clearWindow(context);
            var focus_index = 0;

            for (var i = 0; i < self[item_set].size; i++)
            {
                var item = self[item_set][i];
                var item_w = item.widget_.doCopy();
                self.popup.vbox.appendChild(context, item_w);

                if (focus_item_code != nil && focus_item_code > -1)
                {
                    if (item.item_code_ == focus_item_code)
                        focus_index = i;
                }
                else if (item.focus_priority_)
                {
                    focus_index = i;
                }
            }

            self.applyAppend(context);
            self.setIndex(context, focus_index);
            if (apply_iconbox)
                call_apply_iconbox(context);

            context.pushEvent(main::menu::MFunctionEvent(self.setIndex, context, focus_index));

            if (self[item_set].size > 1)
                self.visible = true;
            else
                self.visible = false;
        }

        method next_layer_items(context, focus_item_code)
        {
            var item = self.item_set[self.index];
            if (item.next_layer_ == nil)
                return false;

            self.prev_layer_info.push([self.item_set_name, item.item_code_, ROOT.sCurrentViewModeArg, IconBox.focus_index]);

            SearchTypes.create_items(context, item.next_layer_, focus_item_code, true);

            return true;
        }

        method prev_layer_items(context)
        {
            if (self.prev_layer_info.size == 0)
                return false;

            |var item_set_name, var item_code, var view_mode_arg, var iconbox_focus| = self.prev_layer_info.pop();

            ROOT.sCurrentViewModeArg = nil;
            ROOT.sCurrentViewModeArg = view_mode_arg;
            SearchTypes.create_items(context, item_set_name, item_code, true);
            IconBox.focus_index = iconbox_focus;

            return true;
        }

        method call_apply_iconbox(context)
        {
            var item = self.item_set[self.index];

            ROOT.sManager.set_view_mode(item.view_mode_, ROOT.sCurrentViewModeArg);
            ROOT.sManager.set_sort_type(item.sort_type_);
            ROOT.sManager.apply_iconbox(context);

            if (ROOT.sManager.size())
                context.pushEvent(main::menu::MFunctionEvent(ROOT.setFocus, IconBox));
            else
                context.pushEvent(main::menu::MFunctionEvent(ROOT.setFocus, self));
            
            setPathText("set");
            setPathText("apply");
        }

        method onValueChanged(context)
        {
            self.pulldownValueChanged(context);

            var item = self.item_set[self.index];

            if (item.focus_need_save_)
                *self.view_mode_ref = item.item_code_;

            if (self.popup_open)
            {
                if (self.prev_index != self.index)
                {
                    self.value_changed = true;
                    self.prev_index = nil;
                }
            } 
            else 
            {
                self.value_changed = false;
            }

            return EVENTRESULT_FILTER;
        }

        method onPopupOpen(context)
        {
            self.prev_index = self.index;
            self.popup_open = true;
        }

        method onPopupClosed(context)
        {
            self.popup_open = false;

            if (!self.value_changed)
                return;

            call_apply_iconbox(context);

            self.value_changed = false;
        }

        method getViewMode()
        {
            var item = self.item_set[self.index];
            return item.view_mode_;
        }

        method getSortType()
        {
            var item = self.item_set[self.index];
            return item.sort_type_;
        }
    }

    module HScrollbar
    {
        attribute stop_update = nil;

        method initialize(list_box)
        {
            self.stop_update = true;

            list_box.h_adjustment = main::menu::MAdjustment();
            HScrollbar.adjustment = list_box.h_adjustment;
            inc_arrow_animation(true, true);
            dec_arrow_animation(true, true);
        }

        method inc_arrow_animation(reverse, warp = false)
        {
            var effect = HScrollbar::inc_arrow::Pane::Effect;
            if (!warp)
            {
                if (effect.reverse != reverse)
                {
                    effect.reverse = reverse;
                    effect.restart();
                }
            }
            else 
            {
                effect.reverse = !reverse;
                effect.reset();
                effect.reverse = reverse;
            }
        }

        method dec_arrow_animation(reverse, warp = false)
        {
            var effect = HScrollbar::dec_arrow::Pane::Effect;
            if (!warp)
            {
                if (effect.reverse != reverse)
                {
                    effect.reverse = reverse;
                    effect.restart();
                }
            } 
            else 
            {
                effect.reverse = !reverse;
                effect.reset();
                effect.reverse = reverse;
            }
        }

        method update_arrow()
        {
            if (self.stop_update)
                return;

            inc_arrow_animation(!HScrollbar::inc_arrow.active);
            dec_arrow_animation(!HScrollbar::dec_arrow.active);
        }
    }

    Debug_ColorSelect.visible = false;
    Debug_ColorSelect.insensitive = true;
}