













module ROOT
{
    module OPEN_MODE
    {   
        static CAR_DEALER = 0;
        static PRESENT = 1;
        static VISION_GT = 2;
    }

    attribute open_mode;
    attribute clear_message;
    attribute modal;
    attribute cp;
    attribute garage_id;
    attribute return_page;
    attribute return_page_args;
    attribute frame_interval;
    attribute enable_stereo_rendering;
    attribute priceless;
    attribute present_tuning_car;

    method open(context, open_mode, cp, return_page, return_page_args, 
        clear_message, priceless = false, present_tuning_car = false)
    {
        if (GAME_STATUS.user_profile.garage.isFull())
        {
            sound.play("disable");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, 
                manager.translate("GTModeProject::CarShowroomRoot", "Message_GarageFull"));
            return;
        }

        var cursor_visible = context.cursor_visible;
        context.cursor_visible = false;
        self.open_mode = open_mode;
        self.clear_message = clear_message;
        self.priceless = priceless;
        self.present_tuning_car = present_tuning_car;
        self.cp = cp;
        self.return_page = return_page;
        self.return_page_args = return_page_args;

        SequenceUtil::startPageSimple(context, self);
    }

    method close(context)
    {
        if (self.modal != nil)
        {
            if (self.enable_stereo_rendering != nil)
            {
                ORG.setEnableStereoRendering(self.enable_stereo_rendering);
                self.enable_stereo_rendering = nil;
            }

            PageUtil::visibleUnderPages(context, self);

            var actor = self.FadeActor;
            actor.backward();
            actor.start();

            self.modal.close(actor.total_time);
            self.modal = nil;
        }
        else if (self.return_page != nil)
        {
            if (self.return_page_args != nil && self.return_page_args.isInstanceOf(System::Array))
                self.return_page.open(context, self.return_page_args[0], self.return_page_args[1]);
            else
                self.return_page.open(context, self.return_page_args);
        }
        else
        {
            GTModeRoot.open(context);
        }

        SoundUtil::MenuBGMCrossfadeGroup("menu", 0.0, 3.0);
    }

    method openModal(context, open_mode, cp, clear_message, priceless = false, present_tuning_car = false)
    {
        if (GAME_STATUS.user_profile.garage.isFull())
        {
            sound.play("disable");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, 
                manager.translate("GTModeProject::CarShowroomRoot", "Message_GarageFull"));
            return false;
        }

        var cursor_visible = context.cursor_visible;
        context.cursor_visible = false;
        self.open_mode = open_mode;
        self.clear_message = clear_message;
        self.priceless = priceless;
        self.present_tuning_car = present_tuning_car;
        self.cp = cp;

        self.modal = SequenceUtil::ModalPage(context, self);
        self.modal.open();

        context.cursor_visible = cursor_visible;
        return true;
    }

    method onInitialize(context)
    {
        var car_code = self.cp.getCarCode();

        ContextMain.disableInput();

        var actor = self.FadeActor;
        actor.forward();
        actor.restart();

        actor.on_effect_end = function(context)
        {
            actor.on_effect_end = nil;

            PageUtil::invisibleUnderPages(context, self);
            self.enable_stereo_rendering = ORG.getEnableStereoRendering();

            ORG.setEnableStereoRendering(true);
            ContextMain.enableInput();
        };

        if (TutorialUtil::isProgress("gttop", "get_first_car"))
        {
            TutorialUtil::done("gttop", "get_first_car");
            TutorialUtil::begin("gttop", "got_first_car");
        }

        self.DisplayCarDealer.visible = false;
        self.DisplayPresent.visible = false;

        if (self.open_mode == OPEN_MODE::CAR_DEALER || self.open_mode == OPEN_MODE::VISION_GT)
        {
            var display = DisplayCarDealer;
            display.GetPaintMessage.visible = false;
            display.CarName.text = SpecDatabaseUtil::getAlphabetCarName(context, car_code);

            addToGarage(context);

            visibleCarColor(context, display);

            if (self.open_mode == OPEN_MODE::VISION_GT)
            {
                self.SceneFace.startSceneScript("deliverycar_VGT", self.cp, onSceneCommandEnd, ["buy_car"]);
            }
            else
            {
                var is_premium = gtengine::MSpecDB::checkFlag(self.cp.getCarCode(), gtengine::GenericFlag::USE_PREMIUM_MODEL);
                if (is_premium)
                    self.SceneFace.startSceneScript("deliverycar", self.cp, onSceneCommandEnd, ["buy_car"]);
                else
                    self.SceneFace.startSceneScript("deliverycar_std", self.cp, onSceneCommandEnd, ["buy_car"]);
            }
        }
        else if (self.open_mode == OPEN_MODE::PRESENT)
        {
            var display = DisplayPresent;
            display.GetPaintMessage.visible = false;
            display.GetCarMessage.visible = !self.present_tuning_car;
            display.GetTuningCarMessage.visible = self.present_tuning_car;
            display.VBox::TuningTag.visible = self.present_tuning_car;
            display.VBox::CarName.text = SpecDatabaseUtil::getAlphabetCarName(context, car_code);

            self.SceneFace.startSceneScript("present_Car", self.cp, onSceneCommandEnd, ["prize_car"]);
            if (self.clear_message != nil)
                DisplayPresent.Message.text = self.clear_message;
        }

        self.frame_interval = menu::FrameInterval;
        menu::FrameInterval = 2;

        SoundUtil::BGMFadeout(1.0);
        ROOT.setFocus(nil);
    }

    method startVisible(context)
    {
        var display = (self.open_mode == OPEN_MODE::CAR_DEALER || self.open_mode == OPEN_MODE::VISION_GT) ? DisplayCarDealer : DisplayPresent;
        display.visible = true;
        context.pushEvent(menu::MFunctionEvent(postInitialize, context));
    }

    method addToGarage(context)
    {
        self.garage_id = GAME_STATUS.user_profile.garage.addCar(self.cp, false, self.priceless);
        GAME_STATUS.user_profile.context.garage_new_mark = true;

        if (self.cp.getCarLabel() == "m3_gt2_11")
            KeyValueUtil::setCarUnlock("m3_gt2_11_color", true);
    }

    method visibleCarColor(context, display)
    {
        var paint_name = "";
        var can_all_paint = false;
        var has_name = false;
        var paint_id = self.cp.getPaintID();

        var paintname_column = main::pdistd::MLocale::getLanguage() == "JP" ? "LabelJpn" : "LabelEng";
        var info = SPECDB.query1("SELECT Type, %{paintname_column} FROM PAINT_COLOR_INFO WHERE ID=?", [paint_id]);
        if (info != nil)
        {
            can_all_paint = info.Type != 99;
            paint_name = info[paintname_column].trim();
            has_name = paint_name != "";
        }
        
        if (can_all_paint && has_name)
        {
            display.GetPaintMessage.text = manager.translate("CommonGTMode", "Message_GetPaintItem").build(paint_name);
            GAME_STATUS.user_profile.item.paint.addItem(paint_id);
        }
        else
            display.GetPaintMessage.text = "";

        display.GetPaintMessage.FadeActor.restart();
        display.GetPaintMessage.visible = true;
    }

    method postInitialize(context)
    {
        Thread::Sleep(5);

        if (self.open_mode == OPEN_MODE::PRESENT)
        {
            var v = gtengine::MSpecDB::getCarVariation(ROOT.cp.getCarCode());
            if (v > 1)
                ChangeColorDialog.open(context);

            addToGarage(context);
            visibleCarColor(context, DisplayPresent);
        }

        CaptureCarDialog.open(context);

        var ride_car = true;
        var mgarage = GAME_STATUS.user_profile.garage;
        if (mgarage.getRidingGarageId() != gtengine::MSpecDB::NO_CODE)
            ride_car = ChangeCarDialog.open(context);

        if (ride_car)
        {
            mgarage.rideCar(self.garage_id);
            SoundUtil::PlayCarStartSound(self.cp);
            CursorProject::StartMenuRoot::StartMenu.reflectCurrentStatus(context);
        }

        SaveDataUtilGT6::saveEveryWhere(context);
        ROOT.close(context);
    }

    method onFinalize(context)
    {
        self.cp = nil;
        self.clear_message = nil;
        self.garage_id = nil;
        self.return_page = nil;
        self.return_page_args = nil;
        
        if (self.frame_interval != nil)
        {
            menu::FrameInterval = self.frame_interval;
            self.frame_interval = nil;
        }

        if (self.enable_stereo_rendering != nil)
        {
            ORG.setEnableStereoRendering(self.enable_stereo_rendering);
            self.enable_stereo_rendering = nil;
        }
    }

    method onSceneCommandEnd(context, args)
    {
        SoundUtil::MenuBGMCrossfadeGroup(args[0], 0.0, 1.0, SoundUtil::REPEAT_OFF);
        startVisible(context);
    }

    method setCarColor(context, color, widget)
    {
        SceneFace.execCommand("setCarVariation %{color} car0");
        cp.color = color;
    }

    module CaptureCarDialog
    {
        method open(context)
        {
            var actor = self.MoveY;
            actor.forward();
            actor.start();

            GarageUtil::Thumbnail::capture(context, SceneFaceForCapture, ROOT.garage_id, ROOT.cp, GarageUtil::Thumbnail::Type::Garage);
            actor.backward();
            actor.start();
        }

        method onInitialize(context)
        {
            var actor = self.MoveY;
            actor.forward();
            actor.reset();
        }
    }

    module ChangeCarDialog
    {
        attribute event_loop;
        attribute result;

        method open(context)
        {
            var cursor_visible = context.cursor_visible;
            context.cursor_visible = true;

            var actor = self.MoveY;
            actor.forward();
            actor.start();

            ROOT.setFocus(HBox::Yes);
            self.insensitive = false;
            self.result = nil;

            self.event_loop = main::menu::EventLoop(context);
            self.event_loop.enter();

            self.insensitive = true;

            ROOT.setFocus(nil);

            context.cursor_visible = cursor_visible;
            var res = self.result;
            self.result = nil;
            return res;
        }

        method close(context)
        {
            if (self.event_loop != nil)
            {
                var actor = self.MoveY;
                actor.backward();
                actor.start();
                self.event_loop.leave();
            }
        }

        method onInitialize(context)
        {
            self.insensitive = true;
            var actor = self.MoveY;
            actor.forward();
            actor.reset();
        }

        method onActivate(context, event)
        {
            sound.play("ok");

            self.result = event.widget == HBox::Yes;
            self.close(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context, event)
        {
            sound.play("cancel");
            ROOT.setFocus(HBox::No);
            return EVENTRESULT_FILTER;
        }
    }

    module ChangeColorDialog
    {
        attribute event_loop;
        attribute result;

        method open(context)
        {
            var cursor_visible = context.cursor_visible;
            context.cursor_visible = true;

            var actor = self.MoveY;
            actor.forward();
            actor.start();

            ROOT.setFocus(self.ListBox);
            self.insensitive = false;
            self.result = nil;

            self.event_loop = main::menu::EventLoop(context);
            self.event_loop.enter();

            self.insensitive = true;

            ROOT.setFocus(nil);

            context.cursor_visible = cursor_visible;
            var res = self.result;
            self.result = nil;
            return res;
        }

        method close(context)
        {
            if (self.event_loop != nil)
            {
                var actor = self.MoveY;
                actor.backward();
                actor.start();
                self.event_loop.leave();
            }
        }

        method onInitialize(context)
        {
            self.insensitive = true;
            var actor = self.MoveY;
            actor.forward();
            actor.reset();

            var v = gtengine::MSpecDB::getCarVariation(ROOT.cp.getCarCode());
            var listbox = ListBox;
            listbox.setItemTemplate(context, hidden::Item);
            listbox.setItemCount(v);
            listbox.focus_index = ROOT.cp.color;

            var border_w = 48;
            var listbox_max_w = 1500;

            var w = (hidden::Item.w * v) + (self.ListBox.spacing * v) + (border_w * 2);
            listbox.w = w > listbox_max_w ? listbox_max_w : w;
            listbox.minimum_width = listbox.w;
        }

        method onActivate(context, event)
        {
            sound.play("ok");

            BalloonTip.reset_value();
            self.close(context);
            return EVENTRESULT_FILTER;
        }

        module ListBox
        {
            method onFocusNotify(context, new_color, old_color)
            {
                ROOT.setCarColor(context, new_color);

                var color_name = gtengine::MSpecDB::getCarColorName(ROOT.cp.getCarCode(), new_color).trim();
                if (color_name != "")
                    BalloonTip.set_value(context, self.getItemWidget(new_color), color_name);
                else
                    BalloonTip.reset_value();
            }
        
            method onVisibleNotify(context, indexes)
            {
                foreach (var i in indexes)
                {
                    var w = self.getItemWidget(i, context);
                    w.ColorChipFace.setCarColor(ROOT.cp.getCarCode(), i);
                }
            }
        }
    }

    module SceneFace
    {
        attribute command_end_func;
        attribute command_end_func_args;

        method startSceneScript(scene_script, cp, command_end_func, command_end_func_args)
        {
            self.command_end_func = command_end_func;
            self.command_end_func_args = command_end_func_args;

            SceneFaceUtil::loadScene(self, scene_script, cp);
            SceneFaceUtil::SetSignalHandler(self, SceneFaceUtil::HandleType::SCENE_START, self.on_signal);
        }

        method on_signal(context, enum, param)
        {
            if (enum == SceneFaceUtil::HandleType::SCENE_START)
            {
                if (self.command_end_func != nil)
                {
                    self.command_end_func(context, self.command_end_func_args);
                    self.command_end_func = nil;
                }

                self.command_end_func_args = nil;
            }
        }

        method onFinalize(context)
        {
            self.command_end_func = nil;
            self.command_end_func_args = nil;
        }
    }
}