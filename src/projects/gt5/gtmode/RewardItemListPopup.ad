module ROOT
{
    hidden.visible = false;

    static sModalPage;
    static sGP;
    static sAllCompleted;
    static sAllCompletedPresent;

    SCALE_WIDGET_SDTV(hidden::Item::name, 2.6);

    method open(context, gp, all_completed, all_completed_present)
    {
        sGP = gp;
        sAllCompleted = all_completed;
        sAllCompletedPresent = all_completed_present;

        sModalPage = SequenceUtil::ModalPage(context, ROOT);
        sModalPage.open();

        sModalPage = nil;
        sGP = nil;
    }

    method close(context)
    {
        if (sModalPage != nil)
            sModalPage.close();
    }

    method onInitialize(context)
    {
        Pane::ScrolledWindow::ScrollClip::space.initialize(context);
        Pane::ScrolledWindow::ScrollClip.updateGeometry();
    }

    method onFinalize(context)
    {
        Pane::ScrolledWindow::ScrollClip::space.finalize(context);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        close(context);

        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        var status = EVENTRESULT_CONTINUE;
        if (event.keysym == CELL_PAD_CTRL_L3_UP)
        {
            Pane::ScrolledWindow::ScrollClip.manualTargetIncY(96.0);
            status = EVENTRESULT_FILTER;
        }
        else if (event.keysym == CELL_PAD_CTRL_L3_DOWN)
        {
            Pane::ScrolledWindow::ScrollClip.manualTargetIncY(-96.0);
            status = EVENTRESULT_FILTER;
        }

        return status;
    }

    module Pane::ScrolledWindow::ScrollClip::space
    {
        method initialize(context)
        {
            var change_tex_col_if = function (src, res)
            {
                return (res) ? ("" + src) + ""  : src;
            }

            if (sAllCompletedPresent != nil)
            {
                var present = sAllCompletedPresent;
                var gameitem = nil;
                var item_name = "";

                var category_name = GameItemUtil::getCategoryName(present.itemcategory);

                if (present.argument4 != nil && present.argument4 > 0 && 
                    present.itemcategory != gtengine::GameItemCategory::PAINT_ITEM && 
                    present.argument4 != 100)
                {
                    gameitem = GameItemUtil::getItemByID(present.argument4);
                    gameitem["argument1"] = present.argument1;
                    gameitem["code"] = present.f_name;

                    item_name = GameItemUtil::getItemText(gameitem)[0];
                }
                else
                    item_name = context.translate(ROOT, "MyHome", "REWARD_RANDOM_PRESENT");

                var result_text = context.translate(ROOT, "ALL_GOLD");
                var item = hidden::Item3.doCopy();

                var change_tex_col = sAllCompleted;
                item.TextFace.text = change_tex_col_if(result_text, change_tex_col);

                item.VBox::TextFace.text = change_tex_col_if((category_name + "\n") + item_name, change_tex_col);

                item.VBox::TextFace2.text = context.translate(ROOT, "REWARD_GET_ONCE");
                item.Icon::ImageFace.image_path = GameItemUtil::getItemImagePathPresentPopup(present.itemtype, present.itemcategory);

                self.appendChild(context, item);
            }

            var present_list = ROOT::sGP.event.reward.present;
            if (present_list != nil && present_list.size != 0)
            {
                |var result| = GAME_STATUS.user_profile.record.seasonal_event.getResult(ROOT::sGP.event.event_id);

                var is_once = sGP.event.reward.is_once;
                var present_type = ROOT::sGP.event.reward.present_type;

                if (present_type == gtengine::RewardPresentType::ORDER)
                {
                    for (var i = 0; i < present_list.size; i++)
                    {
                        var present = present_list[i];
                        var gameitem = nil;
                        var item_name = "";

                        var category_name = GameItemUtil::getCategoryName(present.itemcategory);

                        if (present.argument4 != nil && present.argument4 > 0 && 
                            present.itemcategory != gtengine::GameItemCategory::PAINT_ITEM && 
                            present.argument4 != 100)
                        {
                            gameitem = GameItemUtil::getItemByID(present.argument4);
                            gameitem["argument1"] = present.argument1;

                            gameitem["code"] = present.f_name;

                            item_name = GameItemUtil::getItemText(gameitem)[0];
                        }
                        else
                            item_name = context.translate(ROOT, "MyHome", "REWARD_RANDOM_PRESENT");

                        var result_text = "";
                        if (ROOT::sGP.event.game_mode == gtengine::GameMode::DRIFT_ATTACK || 
                            ROOT::sGP.event.game_mode == gtengine::GameMode::TIME_ATTACK || 
                            ROOT::sGP.event.game_mode == gtengine::GameMode::ONLINE_TIME_ATTACK)
                        {
                            switch (i + 1)
                            {
                                case 1:
                                    result_text = context.translate(ROOT, "LicenseGT5", "THE_GOLD");
                                    break;
                                case 2:
                                    result_text = context.translate(ROOT, "LicenseGT5", "THE_SILVER");
                                    break;
                                case 3:
                                    result_text = context.translate(ROOT, "LicenseGT5", "THE_BRONZE");
                                    break;
                                default:
                                    result_text = context.translate(ROOT, "Number", "ordinal_th");
                                    break;    
                            }
                        }
                        else
                            result_text = OrdinalUtil::getOrdinalNumber(context, ROOT, i + 1);

                        var item = hidden::Item.doCopy();

                        var target_clear = result != -1 && result <= i;
                        var change_tex_col = is_once && target_clear;
                        item.TextFace.text = change_tex_col_if(result_text, change_tex_col);

                        item.VBox::TextFace.text = change_tex_col_if((category_name + "\n") + item_name, change_tex_col);
                        item.VBox::TextFace2.text = is_once ? context.translate(ROOT, "REWARD_GET_ONCE") : context.translate(ROOT, "REWARD_GET_EVERYTIME");

                        item.Icon::ImageFace.image_path = GameItemUtil::getItemImagePathPresentPopup(present.itemtype, present.itemcategory);

                        self.appendChild(context, item);
                    }
                }
                else
                {
                    var categories = [];
                    var present_group = [];

                    for (var i = 0; i < present_list.size; i++)
                    {
                        var present = present_list[i];

                        if (categories.bsearch(present.itemcategory) < 0)
                        {
                            present_group.push([present.itemcategory, present.itemtype]);
                            categories.push(present.itemcategory);
                        }
                    }

                    var item = hidden::Item2.doCopy();
                    var category_names = "";

                    foreach (|var category, var type| in present_group)
                    {
                        var icon = hidden::Item2Icon.doCopy();

                        category_names += GameItemUtil::getCategoryName(category) + "\n";

                        icon.ImageFace.image_path = GameItemUtil::getItemImagePathPresentPopup(type, category);
                        item.VBox.appendChild(context, icon);
                    }

                    var clear_target = 3;

                    var target_clear = result != -1 && result < clear_target;

                    var tex_reward_result_over = context.translate(ROOT, "MyHome", "REWARD_RESULT_OVER").build(OrdinalUtil::getOrdinalNumber(context, ROOT, clear_target));
                    var tex_reward_random_present = context.translate(ROOT, "MyHome", "REWARD_RANDOM_PRESENT");

                    var change_tex_col = is_once && target_clear;
                    item.TextFace.text = change_tex_col_if(tex_reward_result_over, change_tex_col);

                    item.VBox2::TextFace.text = change_tex_col_if(category_names, change_tex_col);
                    item.VBox2::TextFace2.text = change_tex_col_if(tex_reward_random_present, change_tex_col);
                    item.VBox2::TextFace3.text = is_once ? context.translate(ROOT, "REWARD_GET_ONCE") : context.translate(ROOT, "REWARD_GET_EVERYTIME");

                    self.appendChild(context, item);
                }
            }

        }

        method finalize(context)
        {
            self.clearWindow(context);
        }
    }

    module Pane::Button::Close
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.close(context);
        
            return EVENTRESULT_FILTER;
        }    
    }
}