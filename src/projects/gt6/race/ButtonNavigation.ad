










module ButtonNavigation
{
    #include "projects/gt6/option/KeyConfig.h"

    class ButtonNavigationData
    {
        method  __init__(image_path, button_port, analog_port)
        {
            self.image_path = "/image/gt6/race_display/help_%{image_path}.dds";

            if (button_port != nil)
                self.button_port = pdistd::SuperPortButtonBit[button_port];

            if (analog_port != nil)
                self.analog_port = pdistd::SuperPortAnalogChannel[analog_port]; 

            self.text = "";
        }

        method setText(keyword)
        {
            if (keyword == "ANALOG_STEER" || keyword == "BUTTON_LSTEER" || keyword == "BUTTON_RSTEER")
                return;

            self.text = main::manager.translate("Keyconfig", keyword);
        }

        attribute image_path;
        attribute button_port;
        attribute analog_port;
        attribute text;
    }

    static sNavigationMap = [
        CELL_PAD_CTRL_L3_UP :  [ButtonNavigationData("Dpad_up", "UP", "PRESS_UP"), ButtonNavigationData("Lstick_up", nil, "STICK_BY1F")],
        CELL_PAD_CTRL_L3_DOWN :  [ButtonNavigationData("Dpad_down", "DOWN", "PRESS_DOWN"), ButtonNavigationData("Lstick_down", nil, "STICK_BY1L")],
        CELL_PAD_CTRL_L3_LEFT :  [ButtonNavigationData("Dpad_left", "LEFT", "PRESS_LEFT"), ButtonNavigationData("Lstick_left", nil, "STICK_BX1F")],
        CELL_PAD_CTRL_L3_RIGHT :  [ButtonNavigationData("Dpad_right", "RIGHT", "PRESS_RIGHT"), ButtonNavigationData("Lstick_right", nil, "STICK_BX1L")],
        CELL_PAD_CTRL_R3_UP :  [ButtonNavigationData("Rstick_up", nil, "STICK_BY2F")],
        CELL_PAD_CTRL_R3_DOWN :  [ButtonNavigationData("Rstick_down", nil, "STICK_BY2L")],
        CELL_PAD_CTRL_R3_LEFT :  [ButtonNavigationData("Rstick_left", nil, "STICK_BX2F")],
        CELL_PAD_CTRL_R3_RIGHT :  [ButtonNavigationData("Rstick_right", nil, "STICK_BX2L")],
        CELL_PAD_CTRL_L1 :  [ButtonNavigationData("L1", "L1", "PRESS_L1")],
        CELL_PAD_CTRL_L2 :  [ButtonNavigationData("L2", "L2", "PRESS_L2")],
        CELL_PAD_CTRL_L3 :  [ButtonNavigationData("L3", "L3", nil)],
        CELL_PAD_CTRL_R1 :  [ButtonNavigationData("R1", "R1", "PRESS_R1")],
        CELL_PAD_CTRL_R2 :  [ButtonNavigationData("R2", "R2", "PRESS_R2")],
        CELL_PAD_CTRL_R3 :  [ButtonNavigationData("R3", "R3", nil)],

        CELL_PAD_CTRL_CROSS :  [pdiext::MSystemConfiguration::GetEnterButtonAssign() == "circle" ? 
            ButtonNavigationData("circle", "CIRCLE", "PRESS_CIRCLE") : 
            ButtonNavigationData("cross", "CROSS", "PRESS_CROSS")],
        CELL_PAD_CTRL_CIRCLE :  [pdiext::MSystemConfiguration::GetEnterButtonAssign() == "circle" ? 
            ButtonNavigationData("cross", "CROSS", "PRESS_CROSS") : 
            ButtonNavigationData("circle", "CIRCLE", "PRESS_CIRCLE")],
        CELL_PAD_CTRL_TRIANGLE :  [ButtonNavigationData("triangle", "TRIANGLE", "PRESS_TRIANGLE")],
        CELL_PAD_CTRL_SQUARE :  [ButtonNavigationData("square", "SQUARE", "PRESS_SQUARE")],

        CELL_PAD_CTRL_START :  [ButtonNavigationData("start", "START", nil)],
        CELL_PAD_CTRL_SELECT :  [ButtonNavigationData("select", "SELECT", nil)],
    ];

    static previous_keysym;
    static previous_input;
    static total_time_micro_second;

    function initialize(context, is_at)
    {
        var config = main::GAME_STATUS.user_profile.option.key_config.getConfig(0);
        var play_config = config[main::gtengine::InputMode::PLAY_NORMAL];
        var sixaxis = play_config["SIXAXIS"];
        var analog_config = sixaxis["analog"];
        var button_config = sixaxis["button"];

        foreach (|var keysym, var data_list| in sNavigationMap)
        {
            foreach (var data in data_list)
            {
                if (data.analog_port != nil)
                {
                    var key_config = analog_config[data.analog_port];
                    if (data.analog_port == pdistd::SuperPortAnalogChannel::STICK_BX1F ||
                        data.analog_port == pdistd::SuperPortAnalogChannel::STICK_BX1L)
                    {
                        var key_config_override = analog_config[pdistd::SuperPortAnalogChannel::STICK_BX1];
                        if (key_config_override != gtengine::AnalogCode::INVALID)
                            key_config = key_config_override;
                    }

                    if (data.analog_port == pdistd::SuperPortAnalogChannel::STICK_BX2F ||
                        data.analog_port == pdistd::SuperPortAnalogChannel::STICK_BX2L)
                    {
                        var key_config_override = analog_config[pdistd::SuperPortAnalogChannel::STICK_BX2];
                        if (key_config_override != gtengine::AnalogCode::INVALID)
                            key_config = key_config_override;
                    }

                    if (key_config != gtengine::AnalogCode::INVALID)
                    {
                        if (is_at && (key_config == gtengine::AnalogCode::SHIFT_UP || key_config == gtengine::AnalogCode::SHIFT_DOWN))
                            ;
                        else
                        {
                            var keyword = sAnalogCodeMap_forLocalizeKey[key_config];
                            data.setText(keyword);
                        }
                    }
                }

                if (data.button_port != nil)
                {
                    var key_config = button_config[data.button_port];
                    if (key_config != gtengine::ButtonCode::INVALID)
                    {
                        var keyword = sButtonCodeMap_forLocalizeKey[key_config];
                        data.setText(keyword);
                    }
                }
            }
        }

        previous_keysym = 0;
        previous_input = 0L;
        total_time_micro_second = nil;
    }

    function onKeyPress(context, event, widget)
    {
        if (total_time_micro_second == nil)
        {
            total_time_micro_second = widget.Opacity.total_time * 1000 * 1000;
        }

        var current_input = pdistd::GetSystemTimeMicroSecond();
        if (previous_keysym == event.keysym)
        {
            var diff = current_input - previous_input;
            if (diff < total_time_micro_second)
                return;
        }

        if (ORG.pauseRace)
        {
            if (event.keysym != CELL_PAD_CTRL_START)
                return;
        }

        var data_list = sNavigationMap[event.keysym];
        if (data_list == nil)
            return;

        var data;
        if (data_list.size > 1)
            data = event.state & 0x200 ? data_list[1] : data_list[0];
        else
            data = data_list[0];
        
        var image_path = "" == data.text ? "" : data.image_path;
        widget.Icon.image_path = image_path;
        widget.Icon.doInitialize(context);
        widget.Icon.adjustSize();
        widget.TextFace.text = data.text;
        widget.Opacity.restart();

        previous_keysym = event.keysym;
        previous_input = current_input;
    }

    function onKeyPressInstantReplay(context, event, widget)
    {
        var current_input = pdistd::GetSystemTimeMicroSecond();
        var diff = current_input - previous_input;
        var total_time_micro_second = widget.Opacity.total_time * 1000 * 1000;

        if (diff < total_time_micro_second)
            return;

        widget.Opacity.restart();
        previous_input = current_input;
    }

    function onKeyPressSimpleImpl(context, event, widget, widget_sub, map)
    {
        var current_input = pdistd::GetSystemTimeMicroSecond();
        if (previous_keysym == event.keysym)
        {
            var diff = current_input - previous_input;
            var total_time_micro_second = widget.Opacity.total_time * 1000 * 1000;

            if (diff < total_time_micro_second)
                return;
        }

        var data_list = map[event.keysym];
        if (data_list == nil)
            return;

        if (data_list.size > 1 && event.state & 0x200)
            return;

        if (GAME_STATUS.user_profile.option.lounge_keyboard_switcher)
        {
            if (event.keysym == CELL_PAD_CTRL_TRIANGLE || event.keysym == CELL_PAD_CTRL_SQUARE)
            {
                if ((event.port_state & 0x10) == 0)
                    return;
            }
        }

        if (event.keysym == CELL_PAD_CTRL_L1)
        {
            if (ORG.getCameraType() != gtengine::CameraType::ONBOARD)
                return;
        }

        |var image_path, var page, var keyword| = data_list[0];
        var w = event.keysym == CELL_PAD_CTRL_SQUARE ? widget_sub : widget;

        w.Icon.image_path = "/image/gt6/race_display/help_%{image_path}.dds";
        w.Icon.doInitialize(context);
        w.Icon.adjustSize();
        w.TextFace.text = manager.translate(page, keyword);
        w.Opacity.restart();

        previous_keysym = event.keysym;
        previous_input = current_input;
    }

    function onKeyPressReplay(context, event, widget, widget_sub)
    {
        var map = [
            CELL_PAD_CTRL_L3_UP : [
                ["Dpad_up", "Replay", "CHANGE_TARGET"],
                nil,
            ],

            CELL_PAD_CTRL_L3_DOWN : [
                ["Dpad_down", "Replay", "CHANGE_TARGET"],
                nil,
            ],

            CELL_PAD_CTRL_START : [
                ["start", "Movie", "PLAY_PAUSE"],
            ],

            CELL_PAD_CTRL_SELECT : [
                ["select", "Keyconfig", "BUTTON_PLAYVIEW"],
            ],

            CELL_PAD_CTRL_SQUARE : [
                ["square", "Replay", "CHANGE_FULL_LIVETIMING"],
            ],

            CELL_PAD_CTRL_L1 : [
                ["L1", "Keyconfig", "BUTTON_BACKVIEW"],
            ],

            CELL_PAD_CTRL_R1 : [
                ["R1", "Replay", "BALLOON_INFOONOFF"],
            ],

            CELL_PAD_CTRL_TRIANGLE : [
                ["triangle", "Replay", "CHANGE_DRIVER_LIST"],
            ],
        ];

        var game_mode = gSequenceCondition.game_mode;
        var time_rally = game_mode == gtengine::GameMode::ARCADE_STYLE_RACE;
        var drift = RaceRoot.isDriftMode();

        if (time_rally)
        {
            // Do not allow cycling through spawned cars in Arcade Style Mode
            map[CELL_PAD_CTRL_L3_UP] = nil;
            map[CELL_PAD_CTRL_L3_DOWN] = nil;
        }

        // Disable Live timing aswell in drift and  Arcade Style Mode
        if (time_rally || drift)
            map[CELL_PAD_CTRL_SQUARE] = nil;

        onKeyPressSimpleImpl(context, event, widget, widget_sub, map);
    }

    function onKeyPressBSpec(context, event, widget, widget_sub)
    {
        var map = [
            CELL_PAD_CTRL_SELECT : [
                ["select", "Keyconfig", "BUTTON_PLAYVIEW"],
            ],
            CELL_PAD_CTRL_L1 : [
                ["L1", "Keyconfig", "BUTTON_BACKVIEW"],
            ],
        ];

        onKeyPressSimpleImpl(context, event, widget, widget_sub, map);
    }

    function onKeyPressSpectator(context, event, widget, widget_sub)
    {
        var map = [
            CELL_PAD_CTRL_L3_UP : [
                ["Dpad_up", "Replay", "CHANGE_TARGET"],
                nil,
            ],

            CELL_PAD_CTRL_L3_DOWN : [
                ["Dpad_down", "Replay", "CHANGE_TARGET"],
                nil,
            ],

            CELL_PAD_CTRL_SELECT : [
                ["select", "Keyconfig", "BUTTON_PLAYVIEW"],
            ],

            CELL_PAD_CTRL_SQUARE : [
                ["square", "Replay", "CHANGE_FULL_LIVETIMING"],
            ],

            CELL_PAD_CTRL_L1 : [
                ["L1", "Keyconfig", "BUTTON_BACKVIEW"],
            ],

            CELL_PAD_CTRL_R1 : [
                ["R1", "Replay", "BALLOON_INFOONOFF"],
            ],

            CELL_PAD_CTRL_TRIANGLE : [
                ["triangle", "Replay", "CHANGE_DRIVER_LIST"],
            ],
        ];

        onKeyPressSimpleImpl(context, event, widget, widget_sub, map);
    }

    function onKeyPressLiveTiming(context, event, widget, widget_sub)
    {
        var map = [
            CELL_PAD_CTRL_L3_UP : [
                ["Dpad_up", "Replay", "CHANGE_TARGET"],
                nil,
            ],

            CELL_PAD_CTRL_L3_DOWN : [
                ["Dpad_down", "Replay", "CHANGE_TARGET"],
                nil,
            ],

            CELL_PAD_CTRL_START : [
                ["start", "Movie", "PLAY_PAUSE"],
            ],

            CELL_PAD_CTRL_SQUARE : [
                ["square", "Replay", "CHANGE_FULL_LIVETIMING"],
            ],

            CELL_PAD_CTRL_TRIANGLE : [
                ["triangle", "Replay", "CHANGE_DRIVER_LIST"],
            ],
        ];

        onKeyPressSimpleImpl(context, event, widget, widget_sub, map);
    }
}