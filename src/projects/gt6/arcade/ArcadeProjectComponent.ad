module ArcadeProjectComponent::DialogParts::SettingFrame
{
    SCALE_WIDGET_SDTV(ToolTip::tip, 2.6);

    attribute scrolled_body_h;

    method appear(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = false;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method hide(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = true;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method onFinalize(context)
    {
        self.actor = nil;
    }

    method adjust_scrolled_body(scrolled_body_max_h)
    {
        if (scrolled_body_max_h == nil)
            scrolled_body_max_h = self.scrolled_body_h;

        Pane::ScrolledBody::clip.minimum_height = self.scrolled_body_h;
        Pane::ScrolledBody::clip.h = self.scrolled_body_h;

        var clip = Pane::ScrolledBody::clip;
        var space = clip.space;
        clip.updateGeometry();

        var clip_h = space.inner_pad_top + space.inner_pad_bottom;
        var scrollable = false;

        for (var w = space.first; w != nil; w = w.next)
        {
            if (!w.visible || !w.is_enable)
                continue;

            if (clip_h + w.h > scrolled_body_max_h)
                break;

            clip_h += w.h;
        }

        space.x = 0.0;
        space.y = 0.0;

        space.w = clip.w;
        space.minimum_width = clip.w;
        
        space.h = clip_h;
        space.minimum_height = clip.h;

        clip.h = clip_h;
        clip.minimum_height = clip_h;
    }

    method onRealize(context)
    {
        self.scrolled_body_h = Pane::ScrolledBody::clip.h;
    }

    method onInitialize(context)
    {
        var adj = main::menu::MAdjustment();
        Pane::ScrolledBody::VScrollbar.adjustment = adj;
        Pane::ScrolledBody::clip.v_adjustment = adj;
    }
}

module ArcadeProjectComponent::DialogParts::SettingFrame::Pane::Head
{
    SCALE_WIDGET_SDTV(label, 2.4);

    method setText(text)
    {
        Close::Circle::label.text = text;
        Close::Circle_i::label.text = text;
        Close::Cross::label.text = text;
        Close::Cross_i::label.text = text;
    }

    method onInitialize(context)
    {
        if (pdiext::MSystemConfiguration::GetEnterButtonAssign() == "circle")
        {
            Close::Circle.visible = false;
            Close::Circle_i.visible = false;
            Close::Cross.visible = true;
            Close::Cross_i.visible = true;
        }
        else
        {
            Close::Circle.visible = true;
            Close::Circle_i.visible = true;
            Close::Cross.visible = false;
            Close::Cross_i.visible = false;
        }
    }
}

module ArcadeProjectComponent::DialogParts::OK
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module ArcadeProjectComponent::DialogParts::Cancel
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

}

module ArcadeProjectComponent::DialogParts::Pulldown
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module ArcadeProjectComponent::DialogParts::Pulldown::OptionMenu
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    attribute decide_callback;

    method onRealize(manager)
    {
        self.copy_selected_item = false;
        self.popup.visible = true;
        self.decide_callback = nil;
    }

    method pulldownValueChanged(context)
    {
        var w = self.getItem(self.index);
        if (w != nil)
        {
            var w2 = self;
            w2.label.text = w.label.text;
            w2.label.abbreviate = true;
            if (w2.label_i != nil)
            {
                w2.label_i.text = w.label.text;
                w2.label_i.abbreviate = true;
            }
        }
    }

    method onInitialize(context)
    {
        self.pulldownValueChanged(context);
    }

    method onFinalize(context)
    {
        self.decide_callback = nil;
    }

    method onValueChanged(context)
    {
        self.pulldownValueChanged(context);
        if (self.decide_callback != nil)
            decide_callback(context, self.index, self);
    }
}

module ArcadeProjectComponent::DialogParts::PulldownItem
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module ArcadeProjectComponent::DialogParts::Slider
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_unit, 2.4);
}

module ArcadeProjectComponent::DialogParts::Slider::slider
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
    SCALE_WIDGET_SDTV(popup::Max::value, 2.4);
    SCALE_WIDGET_SDTV(popup::Max::label, 2.4);
    SCALE_WIDGET_SDTV(popup::Min::value, 2.4);
    SCALE_WIDGET_SDTV(popup::Min::label, 2.4);

    attribute zero_text;
    attribute unit_text;
    attribute min_text;
    attribute max_text;
    attribute decide_callback;
    attribute format_callback;
    attribute is_zero_callback;
    attribute arg;
    attribute initialized;
    attribute format_string;
    attribute quantizer;
    attribute step_thr;

    method onRealize(manager)
    {
        self.initialized = true;
        self.zero_text = nil;
        self.unit_text = nil;
        self.min_text = nil;
        self.max_text = nil;
        self.decide_callback = nil;
        self.format_callback = nil;
        self.is_zero_callback = nil;
        self.format_string = nil;
        self.quantizer = 1.0;
        self.step_thr = nil;
        
        var pup = self['popup'];
        pup.visible = true;
        pup.minimum_width = self.w;
        pup.w = self.w;
        pup.x = 0.0;
    }

    method onInitialize(context)
    {
        self.setup(context);
        self.initialized = true;
    }

    method onFinalize(context)
    {
        self.initialized = false;
        self.zero_text = nil;
        self.unit_text = nil;
        self.min_text = nil;
        self.max_text = nil;
        self.decide_callback = nil;
        self.format_callback = nil;
        self.is_zero_callback = nil;
        self.format_string = nil;
        self.step_thr = nil;
    }

    method onStepChanged(context)
    {
        if (self.step_thr != nil)
            self.on_step_changed();
    }

    method on_step_changed()
    {
        var x = self.value - self.repeat_start;
        x /= 4.0;

        if (x < 0.0)
            x = -x;

        if (x < 1.0)
            x = 1.0;

        if (x > self.step_thr)
            x = self.step_thr;

        self.step = x;
    }

    method onPopupOpen(context)
    {
        self.sliderPopupOpen(context);
    }

    method onPopupClosed(context)
    {
        self.sliderPopupClosed(context);
    }

    method onValueChanged(context)
    {
        self.sliderValueChanged(context);
    }

    function default_value_format_function(context, value, slider)
    {
        if (slider.zero_text != nil && slider.is_zero_callback(value, slider))
            return slider.zero_text;

        var q = Math::round(value * slider.quantizer);
        return slider.format_string.format(q);
    }

    function default_is_zero_function(value, slider)
    {
        var q = Math::round(value * slider.quantizer);
        return q == 0.0;
    }

    method setup(context)
    {
        if (self.format_callback == nil)
            self.format_callback = default_value_format_function;

        if (self.is_zero_callback == nil)
            self.is_zero_callback = default_is_zero_function;

        var stepscale = Math::log10(self.step);
        var precision = stepscale >= 0.0 ? 0 : Math::ceil(-stepscale).toInt();
        self.quantizer = 10.0 ** precision;

        if (precision <= 0)
            self.format_string = "%d";
        else
            self.format_string = "%." + precision.toString() + "t";

        if (self.unit_text != nil)
            self.parent.label_unit.text = unit_text;

        var pup = self['popup'];
        pup.Min::value.text = call_format_func(context, self.min);
        pup.Max::value.text = call_format_func(context, self.max);

        if (self.min_text != nil)
            pup.Min::label.text = self.min_text;

        if (self.max_text != nil)
            pup.Max::label.text = self.max_text;

        self.reflect(context);
    }

    method reflect(context)
    {
        var text;
        if (self.zero_text != nil && self.is_zero_callback(value, self))
            text = self.zero_text;
        else
            text = call_format_func(context, self.value);

        self.label.text = text;
        if (self.defined('label_i'))
            self.label_i.text = text;
    }

    method call_format_func(context, value)
    {
        return self.format_callback(context, value, self);
    }

    method sliderPopupOpen(context)
    {
        self.sliderValueChanged(context);
    }

    method sliderPopupClosed(context)
    {
        if (!self.initialized)
            return;

        if (!self.cancel)
        {
            self.reflect(context);
            if (self.decide_callback != nil)
                self.decide_callback(context, self.value, self);
        }
    }

    method sliderValueChanged(context)
    {
        if (!self.initialized)
            return;

        var pup = self['popup'];
        var text = call_format_func(context, self.value);
        self.label.text = text;
        if (self.defined('label_i'))
            self.label_i.text = text;
    }
}

module ArcadeProjectComponent::DialogParts::GroupHeader
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module ArcadeProjectComponent::Tooltip::HDToolTip
{
    SCALE_WIDGET_SDTV(tip, 2.6);
}

module ArcadeProjectComponent::Scroller::HScrollPointer
{
    attribute pointer_reseted;

    method onLoad(context)
    {
        hidden.visible = false;
        self.space.clearChildren();
    }

    method onInitialize(context)
    {
        self.pointer.visible = false;
        self.space.clearChildren();
    }

    method getItemCount()
    {
        return self.space.countChild();
    }

    method setItemCount(context, count)
    {
        if (count > 1)
        {
            self.visible = true;
            self.space.clearChildren();

            for (var i = 0; i < count; i++)
            {
                var w = hidden::Dot.doCopy();
                self.space.appendChild(context, w);
            }
        }
        else
            self.visible = false;
    }

    method setPointer(index, warp)
    {
        var w = hidden::Dot.w;
        var target_x = self.space.x + (w * index);
        var actor = self.pointer::MoveX;

        actor.setStartValue(0, self.pointer.x);
        actor.setEndValue(0, target_x);
        actor.restart();

        var warp;
        if (self.pointer.visible == false)
        {
            self.pointer.visible = true;
            warp = true;
        }

        if (warp == true)
        {
            actor.warp();
        }
    }

    method warpPointer(index)
    {
        var w = hidden::Dot.w;
        var target_x = self.space.x + (w * index);
        var actor = w.pointer::MoveX;

        actor.stop();
        w.pointer.x = target_x;
    }
}

module ArcadeProjectComponent::Icon::WeatherS
{
    method onRealize(manager)
    {
        self.hidden.visible = false;
        self.icon.image_path = "";
    }
        
    method setIcon(info, hour)
    {
        var materials = [];
        if (info.ChangeWeather)
            materials.push("random");

        if (hour == nil)
        {
            var datetime = pdistd::MTime();
            datetime.setForCourse(info.StartDateTime);
            hour = datetime.hour;
        }

        var is_day = hour >= 6 && hour < 18;
        if (is_day)
            materials.push("day");
        else
            materials.push("night");

        switch (info.Condition)
        {
            case gtengine::CourseCondition::DRY:
                if (info.ChangeWeather)
                    materials.push("rain");
                break;

            case gtengine::CourseCondition::WET:
                materials.push("rain");
                break;

            case gtengine::CourseCondition::SNOW:
                materials.push("snow");
                break;
        }

        var icon_name = materials.join("_");
        self.icon.image_path = "/image/common/weather_s/%s.dds".format(icon_name);
    }
}

module ArcadeProjectComponent::Icon::ChangeTimeS
{
    method onRealize(manager)
    {
        self.icon.visible = false;
    }

    method setIcon(info)
    {
        self.icon.visible = info.ChangeTime;
    }
}