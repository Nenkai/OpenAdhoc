module PROJECT::ROOT
{
	static SelectBarDefY;
	static SelectBarTextDefY;
	static watcher;
	static watch_cnt;

	function attachFadeActor(widget)
	{
		widget.actor = main::menu::MFadeActor(widget, 1.0);
	}


	function attachBlinkActor(widget)
	{
		widget.actor = main::menu::MBlinkActor(widget);
	}
	
	attachBlinkActor(SelectBar::Start::Ring_act);
	attachBlinkActor(SelectBar::Guide::Ring_act);
	attachBlinkActor(SelectBar::Records::Ring_act);
	attachBlinkActor(SelectBar::Replay::Ring_act);
	attachBlinkActor(SelectBar::LoadReplay::Ring_act);
	attachBlinkActor(SelectBar::SaveReplay::Ring_act);
	attachBlinkActor(SelectBar::Exit::Ring_act);

	function onInitialize(context)
	{
		var quick_work = main::menu::MQuickWork();
		main::sound.startStream("pcm", "default_quick");
		var race_code = quick_work.raceLabel;
		
		context.getUpdateContext().loadGpb(QuickProject.getDir(),race_code);
		
		quick_work.licenseSubject = StoreHouse::Title["title_" + race_code].value;
		quick_work.OSDTitle = StoreHouse::OSD_title[race_code].value;
		
		Title::Subject.image_path = "image/quick/license/JP/subject/" + race_code + ".png";
		Title::Subject.doInitialize(context, LicenseRoot);
		Title::Icon.image_path = "image/quick/license/icon/" + race_code + ".png";
		Title::Icon.doInitialize(context, LicenseRoot);
		
		Guide::Map.image_path = "image/quick/license/map/" + race_code + ".png";
		Guide::Map.doInitialize(context, LicenseRoot);
		Guide::GuideText.text = StoreHouse::Guide["GuideText_" + race_code].value;
	
		Info::GoldTime.text   = quick_work.goldTime;
		Info::SilverTime.text = quick_work.silverTime;
		Info::BronzeTime.text = quick_work.bronzeTime;
	
		var Velocity = 1.0 / 60.0;
		var Depth = 1.0;
	
		attachFadeActor(Title::Subject);
		Title::Subject.actor.velocity = Velocity;
		Title::Subject.actor.out = true;
		Title::Subject.actor.over = Depth;
		Title::Subject.actor.warp();
		Title::Subject.actor.out = false;
	
		attachFadeActor(Title::Icon);
		Title::Icon.actor.velocity = Velocity;
		Title::Icon.actor.out = true;
		
		Title::Icon.actor.over = Depth;
		Title::Icon.actor.warp();
		Title::Icon.actor.out = false;

		attachFadeActor(Guide::GuideText);
		Guide::GuideText.actor.velocity = Velocity;
		Guide::GuideText.actor.out = true;
		Guide::GuideText.actor.over = Depth;
		Guide::GuideText.actor.warp();
		Guide::GuideText.actor.out = false;
	
		attachFadeActor(Info::cup0);
		Info::cup0.actor.velocity = Velocity;
		Info::cup0.actor.out = true;
		Info::cup0.actor.over = Depth;
		Info::cup0.actor.warp();
		Info::cup0.actor.out = false;
	
		attachFadeActor(Info::cup1);
		Info::cup1.actor.velocity = Velocity;
		Info::cup1.actor.out = true;
		Info::cup1.actor.over = Depth;
		Info::cup1.actor.warp();
		Info::cup1.actor.out = false;
	
		attachFadeActor(Info::cup2);
		Info::cup2.actor.velocity = Velocity;
		Info::cup2.actor.out = true;
		Info::cup2.actor.over = Depth;
		Info::cup2.actor.warp();
		Info::cup2.actor.out = false;
	
		attachFadeActor(Info::GoldTime);
		Info::GoldTime.actor.velocity = Velocity;
		Info::GoldTime.actor.out = true;
		Info::GoldTime.actor.over = Depth;
		Info::GoldTime.actor.warp();
		Info::GoldTime.actor.out = false;

		attachFadeActor(Info::SilverTime);
		Info::SilverTime.actor.velocity = Velocity;
		Info::SilverTime.actor.out = true;
		Info::SilverTime.actor.over = Depth;
		Info::SilverTime.actor.warp();
		Info::SilverTime.actor.out = false;
	
		attachFadeActor(Info::BronzeTime);
		Info::BronzeTime.actor.velocity = Velocity;
		Info::BronzeTime.actor.out = true;
		Info::BronzeTime.actor.over = Depth;
		Info::BronzeTime.actor.warp();
		Info::BronzeTime.actor.out = false;
	
		attachFadeActor(Info::Rank_1st);
		Info::Rank_1st.actor.velocity = Velocity;
		Info::Rank_1st.actor.out = true;
		Info::Rank_1st.actor.over = Depth;
		Info::Rank_1st.actor.warp();
		Info::Rank_1st.actor.out = false;
	
		attachFadeActor(Info::Rank_2nd);
		Info::Rank_2nd.actor.velocity = Velocity;
		Info::Rank_2nd.actor.out = true;
		Info::Rank_2nd.actor.over = Depth;
		Info::Rank_2nd.actor.warp();
		Info::Rank_2nd.actor.out = false;
	
		attachFadeActor(Info::Rank_3rd);
		Info::Rank_3rd.actor.velocity = Velocity;
		Info::Rank_3rd.actor.out = true;
		Info::Rank_3rd.actor.over = Depth;
		Info::Rank_3rd.actor.warp();
		Info::Rank_3rd.actor.out = false;
	
		if (quick_work.isRankQualify)
		{
			Info::Rank_1st.visible = true;
			Info::Rank_2nd.visible = true;
			Info::Rank_3rd.visible = true;
	
			Info::GoldTime.visible = false;
			Info::SilverTime.visible = false;
			Info::BronzeTime.visible = false;
		}
		else
		{
			Info::Rank_1st.visible = false;
			Info::Rank_2nd.visible = false;
			Info::Rank_3rd.visible = false;
	
			Info::GoldTime.visible = true;
			Info::SilverTime.visible = true;
			Info::BronzeTime.visible = true;
		}

		LicenseRoot::SelectBarDefY = SelectBar.y;
		LicenseRoot::SelectBarTextDefY = IconText.y;
		SelectBar.index = quick_work.cursorPosition;
		set_button_text(SelectBar.index);

		ColoredBG.y = 0.0;
		ColoredBG.actor = main::menu::MMoveActor(ColoredBG, ColoredBG.x, -360.0);
		ColoredBG.actor.out = true;
		ColoredBG.actor.warp();
	
		watcher = main::menu::MScriptWatcher(context, LicenseRoot, "onColoredBGCheck");
		watch_cnt = 0;
		watcher.interval = 60;
		watcher.append();
	
		context.transition = main::menu::MColorTransition();
	
		quick_work = main::menu::MQuickWork();
	
		if (quick_work.canReplay == false)
		{
			SelectBar::Replay.insensitive = true;
		}
		else
		{
			SelectBar::Replay.insensitive = false;
		}


		if (quick_work.canSaveGhost == false)
		{
			SelectBar::SaveReplay.insensitive = true;
		}
		else
		{
			SelectBar::SaveReplay.insensitive = false;
		}
	
		if (quick_work.canLoadGhost == false)
		{
			IconText::SaveReplay.text = IconText::SwapText.value;
			SelectBar::LoadReplay.insensitive = true;
		}
		else
		{
			SelectBar::LoadReplay.insensitive = false;
		}
	}
	
	function onFinalize(context)
	{
		var quick_work = main::menu::MQuickWork();
		var race_code = quick_work.raceLabel;
		context.getUpdateContext().unloadGpb(race_code);
	}
	
	
	function onColoredBGCheck(context)
	{
		watch_cnt++;
	
		if (watch_cnt <= 1)
			return;
	
		watcher.remove();
		ColoredBG.actor.out = false;
	}
	
	
	function vanishSelectBar(context)
	{
		main::sound.stopStream();
	
		while (SelectBar.interpolateY(PS2_SCREEN_H_F, 0.3) == 0)
		{
			IconText.interpolateY(PS2_SCREEN_H_F, 0.3);
			context.sync();
		}
	}
	
	
	function set_next_start_project()
	{
		main::game.next_menu_project = "prologue";
	}
	
	
	function set_button_text(index)
	{
		var i = 0;

		for (var bw = IconText.first; bw != nil; bw = bw.next)
		{
			if (bw != nil && i == index)
				bw.visible = true;
			else
				bw.visible = false;
				
			i++;
		}
	}
	
	
	function onCancel(context, event, item)
	{
		main::sound.play("cancel");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_EXIT";
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
		context.finish();
	
		set_next_start_project();
	
		return EVENTRESULT_FILTER;
	}
	
	
	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L2)
		{
			main::sound.play("return");
			Guide::GuideText.text = "cheat!!";
	
			var quick_work = main::menu::MQuickWork();
			var unit = main::game.license.getUnit(quick_work.raceLabel);
	
			unit.detail = "gold";
			unit.insertEntry(1000, "ZZZ", 123);
	
			return EVENTRESULT_FILTER;
		}
	
		return EVENTRESULT_CONTINUE;
	}

}
  
module PROJECT::ROOT::SelectBar
{

	function onValueChanged(context, index)
	{
		main::sound.play("cursor");
		set_button_text(index);
	}
	
	
	function onActivate(context, event, item)
	{
		var quick_work = main::menu::MQuickWork();
		quick_work.cursorPosition = SelectBar.index;
	
		var widget = SelectBar.getFocusedWidget();
		widget["execute"](context);
		return EVENTRESULT_FILTER;
	}

}
  
module PROJECT::ROOT::SelectBar::Start
{

	function execute(context)
	{
		if (SelectBar::Start.insensitive)
		{
			main::sound.play("disable");
			return;
		}
	
		main::sound.play("ok");
		LicenseRoot::vanishSelectBar(context);
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_START";
	
		context.finish();
	}
}

  
module PROJECT::ROOT::SelectBar::Replay
{

	function execute(context)
	{
		if (SelectBar::Replay.insensitive)
		{
			main::sound.play("disable");
			return;
		}
	
		main::sound.play("ok");
		LicenseRoot::vanishSelectBar(context);
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_REPLAY";
	
		context.finish();
	}
}


module PROJECT::ROOT::SelectBar::Guide
{

	function execute(context)
	{
		if (SelectBar::Guide.insensitive)
		{
			main::sound.play("disable");
			return;
		}
	
		main::sound.play("ok");
		LicenseRoot::vanishSelectBar(context);
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_DEMONSTRATION";
	
		context.finish();
	}
}

module PROJECT::ROOT::SelectBar::Records
{


	function execute(context)
	{
		if (SelectBar::Records.insensitive)
		{
			main::sound.play("disable");
			return;
		}
	
		main::sound.play("ok");
		LicenseRoot::vanishSelectBar(context);
	
		context.transition = main::menu::MColorTransition();
		context.transition.panOutIn(context);
		context.transition.syncOut(context);
	
		SelectBar.y = LicenseRoot::SelectBarDefY;
		IconText.y = LicenseRoot::SelectBarTextDefY;
	
		context.startPage(RecordsRoot);
	}
}

module PROJECT::ROOT::SelectBar::LoadReplay
{

	function execute(context)
	{
		if (SelectBar::LoadReplay.insensitive)
		{
			main::sound.play("disable");
			return;
		}
	
		main::sound.play("ok");
		LicenseRoot::vanishSelectBar(context);
	
		context.transition.panOutIn(context);
		context.transition.syncOut(context);
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_LOAD_GHOST";
	
		context.finish();
	}
}

module PROJECT::ROOT::SelectBar::SaveReplay
{

	function execute(context)
	{
		if (SelectBar::SaveReplay.insensitive)
		{
			main::sound.play("disable");
			return;
		}
	
		main::sound.play("ok");
		LicenseRoot::vanishSelectBar(context);
	
		context.transition.panOutIn(context);
		context.transition.syncOut(context);
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_SAVE_GHOST";
	
		context.finish();
	}
}

module QuickProject::LicenseRoot::SelectBar::Exit
{

	function execute(context)
	{
		if (SelectBar::Exit.insensitive)
		{
			main::sound.play("disable");
			return;
		}
	
		main::sound.play("ok");
		LicenseRoot::vanishSelectBar(context);
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_EXIT";
	
		set_next_start_project();
		context.finish();
	}
}