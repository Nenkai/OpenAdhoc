


//---------------------------------------------------------------------------------------
// Grim2Util.ad
//
// Utility module for various Grim operations (logging, handling requests)
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module Grim2Util
{
    import main::LoginUtil;
    
    function openHttpErrorDialog(context, root, info, http_error_code)
    {
        var http_error_id = main::Grim2.convertHttpResultToId(http_error_code);
        var detail = "";
        if (info != nil)
            detail += "%{info}:";

        detail += "%{http_error_id}";

        var msg = context.translate(root, "Network", "ERROR_FORMAT").build(
            context.translate(root, "Network", "CANNOT_CONNECT_SERVER"),
            "ID = %{detail}"
        );

        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
    }

    function __deprecated__join__(context, request)
    {
        var stime = pdistd::GetSystemTimeMicroSecond();
        if (request == nil)
            return false;

        if (!main::Grim2.isInitialize2())
            return false;

        while (!request.isDone() && !request.isError())
        {
            if (!NP.isOnline())
                break;

            context.sync(0.2);

            if (pdistd::GetSystemTimeMicroSecond() - stime > 55000000)
                break;
        }

        return request.isDone();
    }

    function getPatchVersion()
    {
        var res = main::Grim2.getPatchVersion("gt5p");
        return res.toLong();
    }

    function startUpdater() 
    { 

    }

    function stopUpdater() 
    { 

    }

    function permanentlyStopUpdater()
    {

    }

    function initialize(context, region)
    {
        stopUpdater();

        var join_server = main::Grim2.setRegion(region);

        var request1 = main::Grim2.requestDefaultServerList(function(args) {});
        if (!Grim2Util::__deprecated__join__(context, request1))
            return request1.getLastError();

        main::Grim2.addServerOption(request1);

        var request2 = main::Grim2.requestRegionServerList(function(args) {});
        if (!Grim2Util::__deprecated__join__(context, request2))
            return request2.getLastError();

        main::Grim2.addServerOption(request2);

        var base_url = main::Grim2.setBaseUrl();
        if (base_url != "" && base_url != main::pdiext::MProductInformation::GetGrimURL())
        {
            var request3 = main::Grim2.requestDefaultServerList(base_url, function(args) {});
            if (!Grim2Util::__deprecated__join__(context, request3))
                return request3.getLastError();
        
            main::Grim2.addServerOption(request3);

            var request4 = main::Grim2.requestRegionServerList(base_url, function(args) {});
            if (!Grim2Util::__deprecated__join__(context, request4))
                return request4.getLastError();
        
            main::Grim2.addServerOption(request4);
        }

        var serverlist2 = main::Grim2.getServerOption("gt5", "online.serverlist2.enable");
        if (serverlist2 != nil && serverlist2 != "" && serverlist2 != "0")
        {
            var request5 = main::Grim2.requestServerList2(function(args) {});
            if (!Grim2Util::__deprecated__join__(context, request5))
                return request5.getLastError();
        
            main::Grim2.addServerOption(request5);
        }

        if (main::Grim2.isMaintenance())
            return -1;

        var request6 = main::Grim2.requestServerTime(function(args) {});
        if (Grim2Util::__deprecated__join__(context, request6))
            main::Grim2.decodeServerTime(request6);
        else
            return request6.getLastError();

        main::Grim2.setInitialize(true);

        var request7 = main::Grim2.requestSetLanguage(main::pdiext::MProductInformation::GetGameRegionCode(),
            main::pdistd::MLocale::getLanguage(),
            function(args) {});

        if (Grim2Util::__deprecated__join__(context, request7))
        {
            var language = main::Grim2.decodeResultString(request7);
            main::Grim2.setLanguage(language);
        }
        else
        {
            return request7.getLastError();
        }

        if (!LoginUtil::isPatchExist())
            startUpdater();

        return 0;
    }

    function isWrongClientTime()
    {
        var server_time = Grim2.getServerTime();
        var client_time = Grim2.getClientTime();

        var s = server_time.getBySecond();
        var c = client_time.getBySecond();

        var diff = s > c ? (s - c) : (c - s);
        return diff > 60 * 5; // 5 minutes difference max
    }

    function getNextMaintenanceDatetime()
    {
        var now = main::pdiext::getBetterTime();
        if (now == nil)
            return nil;

        var dispdate = main::Grim2.getNextMaintenanceDisplayDateTime();
        if (dispdate == nil)
            return nil;

        if (dispdate.year == 0 || dispdate.month == 0 || dispdate.day == 0)
            return nil;

        if (now.getBySecond() > dispdate.getBySecond())
        {
            var date = main::Grim2.getNextMaintenanceDateTime();
            if (date != nil)
            {
                if (date.year == 0 || date.month == 0 || date.day == 0)
                    date = nil;
            }

            return date;
        }

        return nil;
    }

    module Photo
    {
        function getOnlineMax()
        {
            return Grim2.getServerOptionToInt("gt5", "online.photo.max", 8);
        }
    }

    module Course
    {
        function getOnlineMax()
        {
            return Grim2.getServerOptionToInt("gt5", "online.course.max", 1);
        }
    }

    module Museum
    {
        function isEnable()
        {
            var res = Grim2.getServerOptionToInt("gt5p", "online.museum.enable", 1);
            return res != 0;
        }
    }

    module News
    {
        function isEnable()
        {
            var res = Grim2.getServerOptionToInt("gt5p", "online.gtnews.enable", 1);
            return res != 0;
        }
    }

    module TV
    {
        function isEnable()
        {
            var res = Grim2.getServerOptionToInt("gt5p", "online.gttv.enable", 1);
            return res != 0;
        }
    }

    module Ranking
    {
        function isEnable() 
        {
            return true;
        }

        function isCountryVisible()
        {
            return true;
        }

        function CreateRankingStatsStructure()
        {
            var st = STStructure("RankingStats");
            st.define("car_code", STLong());
            st.define("color", STInt());
            st.define("painted", STByte());
            st.define("version", STByte());
            st.define("transmission", STByte());
            st.define("professional", STByte());
            st.define("asm", STByte());
            st.define("tcs", STByte());
            st.define("abs", STByte());
            st.define("active_steering", STByte());
            st.define("front_tire", STByte());
            st.define("rear_tire", STByte());
            st.define("country_code", STString(4));
            st.define("controller_type", STInt());
            st.define("special_guest", STByte());
            st.define("special_guest_name", STString(64));
            return st;
        }

        function CreateRankingStats()
        {
            var st = CreateRankingStatsStructure();
            var instance = st();
            instance.car_code = main::gtengine::MSpecDB::NO_CODE64;
            instance.color = 0;
            instance.painted = 0;
            instance.version = 2;
            instance.transmission = 0;
            instance.professional = 0;
            instance.asm = 0;
            instance.tcs = 0;
            instance.abs = 0;
            instance.active_steering = 0;
            instance.front_tire = 0;
            instance.rear_tire = 0;
            instance.country_code = "";
            instance.controller_type = 0;
            instance.special_guest = 0;
            instance.special_guest_name = "";
            return instance;
        }

        function PackRankingStats(stats)
        {
            var d = ByteData();
            if (stats.special_guest == 0)
                d.size = 24;
            else
                d.size = 24 + 64;
            
            d[0x00] = 2; // version
            d[0x01] = d.size;
            d[0x02] = stats.version;
            d[0x03] = stats.special_guest;
            d[0x04] = stats.transmission;
            d[0x05] = stats.professional;
            d[0x06] = (stats.active_steering << 4) | (stats.asm & 0b1111);
            d[0x07] = (stats.abs << 4) | (stats.tcs & 0b1111);
            d[0x08] = 0;
            d[0x09] = stats.front_tire;
            d[0x0A] = stats.rear_tire;
            var cc = stats.country_code.toString();
            d[0x0B] = cc.at(0);
            d[0x0C] = cc.at(1);
            
            d[0x0D] = (stats.painted ? 0b10000000 : 0) | (stats.color >> 8 & 0b1111111);
            d[0x0E] = stats.controller_type;
            d[0x0F] = stats.color & 0b11111111;

            cc = stats.car_code.toLong();
            d[0x10] = cc >> 56;
            d[0x11] = cc >> 48;
            d[0x12] = cc >> 40;
            d[0x13] = cc >> 32;
            d[0x14] = cc >> 24;
            d[0x15] = cc >> 16;
            d[0x16] = cc >> 8;
            d[0x17] = cc;
            
            var i;
            if (stats.special_guest != 0)
            {
                var name = stats.special_guest_name.toString();
                for (i = 0; i < 63 && i < name.size; i++)
                    d[0x18 + i] = name.at(i);
            }

            d[0x18 + i] = 0;
            return d;
        }

        function UnpackRankingStats(d)
        {
            var stats = CreateRankingStats();
            if (d[0] < 1 || d[0] > 2) // Version check
                return nil;

            stats.version = d[0x02];
            stats.special_guest = d[0x03];
            stats.transmission = d[0x04] & 1;
            stats.professional = d[0x05] & 1;
            stats.asm = d[0x06] & 0b1111;
            stats.tcs = d[0x07] & 0b1111;
            stats.active_steering = d[0x06] >> 4;
            stats.abs = d[0x07] >> 4;
            stats.front_tire = d[0x09];
            stats.rear_tire = d[0x0A];
            stats.country_code = "%c%c".format(d[0x0B], d[0x0C]);
            stats.controller_type = d[0x0E];
            stats.color = (d[0x0D] & 0b1111111) << 8 | d[0x0F];
            stats.painted = d[13] & 0b10000000 ? 1 : 0;

            var v = (d[0x10].toLong() & 0b11111111) << 56;
            v |=   (d[0x11].toLong() & 0b11111111) << 48;
            v |=   (d[0x12].toLong() & 0b11111111) << 40;
            v |=   (d[0x13].toLong() & 0b11111111) << 32;
            v |=   (d[0x14].toLong() & 0b11111111) << 24;
            v |=   (d[0x15].toLong() & 0b11111111) << 16;
            v |=   (d[0x16].toLong() & 0b11111111) << 8;
            v |=   (d[0x17].toLong() & 0b11111111);
            stats.car_code = v;

            var len = d[1];
            if (stats.special_guest)
            {
                if (len == 24 + 64)
                {
                    var str = d.getByteData(24).toString();
                    stats.special_guest_name = str;
                }
                else
                    stats.special_guest = 0;
            }

            return stats;
        }

        function CompareRankingStats(s1, s2) { }

        function SerializeRankingStats(stats)
        {
            if (stats == nil)
                return nil;

            var bytedata = PackRankingStats(stats);
            var blob = main::pdistd::MBlob(bytedata);
            var encrypted_blob = main::pdistd::MCipher::encrypt(blob);
            return encrypted_blob;
        }

        function DeserializeRankingStats(encrypted_blob)
        {
            if (encrypted_blob == nil)
                return nil;

            var blob = main::pdistd::MCipher::decrypt(encrypted_blob);
            if (blob == nil)
                return nil;

            var bytedata = blob.getByteData();
            var stats = UnpackRankingStats(bytedata);
            return stats;
        }
    }

    module OnlineRace
    {
        function isEnable()
        {
            return true;
        }
    }

    module EULA
    {
        function isEnable()
        {
            var res = main::Grim2.getServerOption("gt5", "online.eula.enable");
            return res != nil && res != "" && res != "0";
        }

        function getValue(server, key)
        {
            return main::Grim2.getServerOption(server, key);
        }

        function getValueInt(server, key)
        {
            return getValue(server, key).toInt();
        }

        function getSingle(server, key)
        {
            var result = Array();
            result.push(getValue(server, key));
            return result;
        }

        function getMulti(server, basekey)
        {
            var size = getValue(server, "%s.size".format(basekey)).toInt();
            var result = Array();

            for (var i = 0; i < size; ++i)
            {
                var key = "%s%d".format(basekey, i);
                var value = getValue(server, key);
                result.push(value);
            }

            return result;
        }

        function onBoot()
        {
            return getMulti("gt5p", "online.eula");
        }

        function onCheckOut()
        {
            return getSingle("gttv", "checkout.eula");
        }

        function getBootVersion()
        {
            return getValueInt("gt5p", "online.eula.version");
        }

        function getDlsVersion()
        {
            return getValueInt("dls", "download.eula.version");
        }

        function onDls()
        {
            return getMulti("dls", "download.eula");
        }

        function onAdvancedDownloadOption()
        {
            return getMulti("dls", "option.eula");
        }
    }

    //////////////////////////////////////////
    ////////////// Put Log section (Logging)
    //////////////////////////////////////////
    module PUTLOG
    {
        function user()
        {
            return main::PDINetwork.getClientName();
        }

        function putlog(log)
        {
            Grim2.requestPutLog(log);
        }
    }

    module PUTLOG::TV
    {
        static TVTOP = 1;
        static COMMERCETOP = 2;
        static MYLIST = 3;
        static CONTENTS = 4;
        static CHECKOUT = 5;
        static MOVIEPLAYER = 6;
        static CART = 7;

        function id_csv(bag_list)
        {
            var result = [];
            foreach (var bag in bag_list)
            {
                if (bag["type"] == "movie")
                {
                    result.push("m%d".format(bag["tv_id"]));
                }
                else if (bag["type"] == "set")
                {
                    result.push("s%d".format(bag["tv_id"]));
                }
            }

            return result.join(",");
        }

        function access(page, id)
        {
            var log = "TA=%s:TP=%s".format(user(), page);
            if (id != nil)
                log += ":TI=%s".format(id);

            putlog(log);
        }

        function access2(page, bag_list)
        {
            var log = "TA=%s:TP=%s:TI=%s".format(user(), page, id_csv(bag_list));
            putlog(log);
        }

        function buy(bag_list)
        {
            var log = "TB=%s:TI=%s".format(user(), id_csv(bag_list));
            putlog(log);
        }

        function delete(id)
        {
            var log = "TR=%s:TI=%s".format(user(), id);
            putlog(log);
        }

        function download(id)
        {
            var log = "TD=%s:TI=%s:TT=1".format(user(), id);
            putlog(log);
        }

        function dlsdownload(id)
        {
            var log = "TD=%s:TI=%s:TT=2".format(user(), id);
            putlog(log);
        }

        function abortdlsdownload(id)
        {
            var log = "TS=%s:TI=%s".format(user(), id);
            putlog(log);
        }

        function firstBoot(seconds)
        {
            var log = "TF=%s:TO=%s".format(user(), seconds);
            putlog(log);
        }
    }

    module PUTLOG::REMOTE_RACE
    {
        function begin(course_label, entry_count, game_id, lap, save_replay, plan_id)
        {
            var log = "ZC=%{course_label}:ZE=%{entry_count}:ZG=%{game_id}:ZL=%{lap}:ZR=%d:ZU=%s:ZW=%d".format(
                save_replay ? 1 : 0,
                user(),
                plan_id == nil ? 1 : 2);

            putlog(log);
        }
    }

    module PUTLOG::WEAR
    {
        function _change(type, dp)
        {
            if (dp == nil)
                return;

            var head_code = dp.head_code;
            var head_color = dp.head_color_code;
            var body_code = dp.body_code;
            var body_color = dp.body_color_code;
            var online_id = user();

            var log = "WU=%{online_id}:WT=%{type}:WH=%{head_code}:WI=%{head_color}:WB=%{body_code}:WC=%{body_color}";
            putlog(log);
        }

        function changeA(dp)
        {
            _change("A", dp);
        }

        function changeB(dp)
        {
            _change("B", dp);
        }
    }

    module PUTLOG::ITEM
    {
        function have()
        {
            var head_count = GameItemUtil::ItemBox::getNumByCategory(gtengine::GameItemCategory::DRIVER_HEAD);
            var body_count = GameItemUtil::ItemBox::getNumByCategory(gtengine::GameItemCategory::DRIVER_BODY);
            var set_count = GameItemUtil::ItemBox::getNumByCategory(gtengine::GameItemCategory::DRIVER_SET);

            var online_id = user();
            var log = "JU=%{online_id}:JH=%{head_count}:JB=%{body_count}:JS=%{set_count}";
            putlog(log);
        }
    }

    module PUTLOG::RACE_PRESENT
    {
        function get(type_id, category_id, argument1, argument4, f_name)
        {
            var online_id = user();
            var log = "IU=%{online_id}:IT=%{type_id}:IC=%{category_id}:I1=%{argument1}:IG=%{argument4}:IF=%{f_name}";
            putlog(log);
        }   
    }

    module PUTLOG::DLC
    {
        function install(car001, wear001, paint001, course001, car002, car003, course002, car_004, course_003, car_005, car_006, car_007, car_008, car_009)
        {
            var online_id = user();
            var a = car001.join(",");
            var b = wear001.join(",");
            var c = paint001.join(",");
            var d = course001.join(",");
            var e = car002.join(",");
            var f = car003.join(",");
            var g = course002.join(",");
            var h = car_004.join(",");
            var i = course_003.join(",");
            var j = car_005.join(",");
            var k = car_006.join(",");
            var l = car_007.join(",");
            var m = car_008.join(",");
            var n = car_009.join(",");

            var log = "YU=%{online_id}:YA=%{a}:YB=%{b}:YC=%{c}:YD=%{d}:YE=%{e}:YF=%{f}:YG=%{g}:YH=%{h}:YI=%{i}:YJ=%{j}:YK=%{k}:YL=%{l}:YM=%{m}:YN=%{n}";
            putlog(log);
        }

        function checkEntitlement(entitlement_id, result)
        {
            var online_id = user();
            var log = "XU=%{online_id}:XA=%{entitlement_id}:XB=%{result}";
            putlog(log);
        }
    }

    function makeRequestError(context, root, text, request)
    {
        if (request == nil)
            return text;
        else
            return context.translate(root, "MyHome", "FORMAT_NAME").build(text, 
                "ID = %d".format(request.getLastErrorById()));
    }
}