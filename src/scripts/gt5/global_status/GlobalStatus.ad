

//---------------------------------------------------------------------------------------
// GlobalStatus.ad
//
// Creates the save instance
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module GlobalStatus
{
    static VERSION = 249;
    static DB_PATH = "/APP_CACHE/game%03d.db".format(VERSION);

    function initialize()
    {
        if (pdistd::Exist(DB_PATH))
            pdistd::RemoveFile(DB_PATH);
    }

    static SQLITE_for_game = nil;

    function getSqlite()
    {
        return SQLITE_for_game;
    }

    function initializeSqlite()
    {
        if (pdistd::Exist(DB_PATH))
            pdistd::RemoveFile(DB_PATH);

        var sqlite = pdistd::MSqlite();
        var res = sqlite.open(DB_PATH);
        DB_ASSERT(res == SQLITE_OK, res);

        SQLITE_for_game = sqlite;
    }

    function finalizeSqlite()
    {
        var sqlite = SQLITE_for_game;
        if (sqlite != nil)
            sqlite.close();

        SQLITE_for_game = nil;
    }

    function setLoadedData(global_status_ref, loaded_data)
    {
        var success = GlobalStatus::unpack(global_status_ref, loaded_data);
        return success;
    }

    function createSaveDataBuffer(size_ref, global_status, use_tsm)
    {
        var db_closed = false;
        var estimated_need_size = (1024 + 512) * 1024;
        if (pdistd::Exist(DB_PATH))
        {
            SQLITE_for_game.close();
            db_closed = true;
            
            var db_file_size = pdistd::GetFileStatus(DB_PATH)["size"];
            estimated_need_size += db_file_size;

            if (estimated_need_size < 4 * 1024 * 1024)
                estimated_need_size = 4 * 1024 * 1024;
        }

        var buf = pdistd::MBlob();
        if (use_tsm == nil)
            use_tsm = false;

        if (estimated_need_size > 4 * 1024 * 1024)
            use_tsm = true;

        var success = buf.reserve(estimated_need_size, use_tsm);
        if (success)
            success = GlobalStatus::pack(buf, size_ref, global_status, use_tsm, db_closed);

        if (success)
            return buf;
        else
            return nil;
    }

    function create()
    {
        var st = CreateStructure();
        var instance = st();
        return instance;
    }

    function pack(buf, size_ref, data, use_tsm, db_closed)
    {
        if (use_tsm == nil)
            use_tsm = false;

        var db_buf = nil;
        if (pdistd::Exist(DB_PATH))
        {
            if (db_closed == nil || !db_closed)
                SQLITE_for_game.close();

            var st = pdistd::ReadFile(DB_PATH, use_tsm);
            db_buf = st["buffer"];
            SQLITE_for_game.open(DB_PATH);
        }

        var offset_buf = buf.referData(0x20);
        var serialized_size = data.serialize(offset_buf);
        var offset_buf2 = offset_buf.referData(serialized_size);
        var db_size = db_buf.serialize(offset_buf2);

        var crc32 = data.getTypeCRC();
        var header_buf = Binary::Pack("UI*8", [VERSION, crc32, serialized_size, db_size, 0, 0, 0, 0]);
        buf.setByteData(header_buf);

        *size_ref = 0x20 + serialized_size + db_size;

        if (buf.size < *size_ref)
            return false;
        else
            return true;
    }

    function unpack(global_status_ref, buf)
    {
        var global_status = *global_status_ref;
        if (buf == nil)
        {
            Initialize(global_status);
            return false;
        }

        |var version, var crc32, var serialized_size, var db_size| = Binary::Unpack("UI*8", buf);
        if (version != VERSION)
        {
            Initialize(global_status);
        }
        else
        {
            var current_crc32 = global_status.getTypeCRC();
            if (crc32 != current_crc32)
                Initialize(global_status);
        }

        var offset_buf = buf.referData(0x20);
        global_status.deserialize(offset_buf);

        var offset_buf2 = offset_buf.referData(serialized_size);
        var db_buf = pdistd::MBlob();
        var success = db_buf.deserialize(offset_buf2);
        if (!success)
        {
            var tmp_global_status = create();
            tmp_global_status.deserialize(offset_buf);
            SQLITE_for_game.close();

            if (pdistd::Exist(DB_PATH))
                pdistd::RemoveFile(DB_PATH);

            SQLITE_for_game.open(DB_PATH);

            *global_status_ref = create();
            global_status = *global_status_ref;
            Initialize(global_status);

            var backup_list = [
                "cash",
                "gameday",
                "no_entry_event_yet",
                "inputted_user_profile",
                "aspec_point",
                "bspec_point",
                "aspec_lv",
                "bspec_lv",
                "total_aspec_running_km",
                "total_bspec_running_km",
                "total_aspec_win",
                "total_bspec_win",
                "total_aspec_race_complete",
                "total_bspec_race_complete",
                "total_purchased_amount",
                "ranking_registration",
            ];

            foreach (var backup in backup_list)
                global_status.user_profile[backup] = tmp_global_status.user_profile[backup];

            buf = tmp_global_status.user_profile.option.serialize();
            global_status.user_profile.option.deserialize(buf);

            buf = tmp_global_status.user_profile.residence.serialize();
            global_status.user_profile.residence.deserialize(buf);
            global_status.user_profile.context.myhome_setting_level = tmp_global_status.user_profile.context.myhome_setting_level;

            var license = GLOBAL_STATUS.user_profile.record.license;
            for (var category_id = 0; category_id < LicenseUtil::CATEGORY::MAX; ++category_id)
            {
                var license_count = LicenseUtil::GetLicenseCountOfCategory(category_id);
                for (var i = 0; i < license_count - 1; ++i)
                {
                    var license_index = LicenseUtil::GetIndex(category_id, i);
                    var license_id = LicenseUtil::GetLicenseId(license_index);
                    license.updateResultOnly(license_id, LicenseUtil::PRIZE::BRONZE);
                }
            }

            global_status.user_profile.victim_of_savedata_corruption = true;
        }
        else
        {
            if (db_buf.size != db_size)
                SQLITE_for_game.close();
            
            var res = pdistd::WriteFile(DB_PATH, db_buf);
            DB_ASSERT_SIZE(res == pdistd::FileError::OK, res, db_buf.size);
            
            SQLITE_for_game.open(DB_PATH);
            ReinitializeDB(global_status);
        }

        return true;
    }

    function clearInitializer()
    {
        undef initialize;
        undef create;
        undef CreateStructure;
        undef Initialize;
        undef ReinitializeDB;
        undef DefineMethod;
        undef clearInitializer;
        undef addInitializer;

        UserProfile::clearInitializer();
        GameConfig::clearInitializer();

        if (main.defined("BranchStatus") && main::BranchStatus.defined("clearInitializer"))
            BranchStatus::clearInitializer();
    }

    function CreateStructure()
    {
        var st = STStructure("Impl");
        GlobalStatus.defineModule(st);
        initializeSqlite();
        st.define("user_profile", UserProfile::CreateStructure());
        st.define("config", GameConfig::CreateStructure());
        st.define("entitlement", STObject(gtengine::MEntitlement));

        if (main.defined("BranchStatus") && main::BranchStatus.defined("CreateStructure"))
            st.define("branch", BranchStatus::CreateStructure());

        DefineMethod();

        return st;
    }

    function Initialize(instance)
    {
        UserProfile::Initialize(instance.user_profile);
        GameConfig::Initialize(instance.config);
        instance.entitlement = gtengine::MEntitlement();

        if (main.defined("BranchStatus") && main::BranchStatus.defined("Initialize"))
            BranchStatus::Initialize(instance.branch);
    }

    function Finalize(instance)
    {
        finalizeSqlite();

        if (instance != nil)
            UserProfile::Finalize(instance.user_profile);
    }

    function addInitializer(instance)
    {
        UserProfile::addInitializer(instance.user_profile);
    }

    function ReinitializeDB(instance)
    {
        UserProfile::ReinitializeDB(instance.user_profile);
    }

    function Vacuum()
    {
        if (SQLITE_for_game != nil)
            SQLITE_for_game.execute0("VACUUM");
    }

    function Pragma(name)
    {
        if (SQLITE_for_game != nil)
            return SQLITE_for_game.executeQuery("PRAGMA %{name}");

        return nil;
    }

    function DefineMethod()
    {
        module Impl
        {
            method apply()
            {
                self.user_profile.apply();
                entitlement.setGlobal();
                self.config.apply();
                
                if (self.defined("branch"))
                    self.branch.apply();
            }
        }
    }
}
