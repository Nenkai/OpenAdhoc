













module DebugMenuPopup
{
    hidden.visible = false;

    static CASH_SLIDER_SCALE = 300_000;

    attribute popup;
    attribute aspec_lv;
    attribute aspec_current_point;
    attribute bspec_lv;
    attribute bspec_current_point;
    attribute bspec_driver_lv;
    attribute loginbonus_get_num;
    attribute lastlogin_slide_days;

    method open(context)
    {
        self.popup = main::SequenceUtil::ModalPage(context, ROOT);
        self.popup.open();
    }

    method close(context)
    {
        FadeEffect.on_effect_end = function(context)
        {
            if (ROOT.popup != nil)
            {
                ROOT.popup.close();
                ROOT.popup = nil;
            }
        }

        FadeEffect.reverse = true;
        FadeEffect.start();
    }

    method reflect(context)
    {
        var user_profile = main::GAME_STATUS.user_profile;
        var availables = ["JP", "US", "GB", "FR", "DE", "IT", "ES", "NL", "PT", "PL", "RU", "TR", "EL", "TW", "KR"];

        var use_lang = main::pdistd::MLocale::getLanguage();
        var focus_index = 0;

        for (var i = 0; i < availables.size; i++)
        {
            var item = hidden::Item.doCopy();
            item["label"].text = availables[i];
            item["label"].adjustScale();

            var vbox = Template::ScrolledWindow::clip::space::Language::OptionMenu::popup::vbox;
            vbox.appendChild(context, item);

            if (use_lang == availables[i])
                focus_index = i;
        }

        Template::ScrolledWindow::clip::space::Language::OptionMenu.applyAppend(context);
        Template::ScrolledWindow::clip::space::Language::OptionMenu.setIndex(context, focus_index);


        Template::ScrolledWindow::clip::space::RTextDebug::OptionMenu.setIndex(context, 1 - user_profile.option.rtext_debug);

        Template::ScrolledWindow::clip::space::Cash::slider.format_function = function(value, scale, range, format, zero_text) {
            if (value > 0)
                return main::pdiext::MMisc::GetMoneyString(value * scale);
            else
                return 0;
        };

        var bias = CASH_SLIDER_SCALE;
        Template::ScrolledWindow::clip::space::Cash::slider.index = user_profile.cash / bias;
        Template::ScrolledWindow::clip::space::Cash::slider.setup(context, bias);
        
        self.aspec_lv = user_profile.getAspecLevel();
        self.aspec_current_point = user_profile.getAspecCurrentPoint();
        Template::ScrolledWindow::clip::space::ASpecLevel::slider.initialize(context);
        Template::ScrolledWindow::clip::space::ASpecPoint::slider.initialize(context);

        self.bspec_lv = user_profile.getBspecLevel();
        self.bspec_current_point = user_profile.getBspecCurrentPoint();
        Template::ScrolledWindow::clip::space::BSpecLevel::slider.initialize(context);
        Template::ScrolledWindow::clip::space::BSpecPoint::slider.initialize(context);

        self.loginbonus_get_num = main::GAME_STATUS.user_profile.context.last_museum_getnum;
        self.lastlogin_slide_days = 0;
        Template::ScrolledWindow::clip::space::LoginBonusGetNum::slider.initialize(context);
        Template::ScrolledWindow::clip::space::LastLoginSlide::slider.initialize(context);

        ROOT::Template::ScrolledWindow::clip::space::SignatureVersion::Signature.active = GAME_STATUS.entitlement.has(gtengine::EntitlementType::EVENT, "signature");
        ROOT::Template::ScrolledWindow::clip::space::Magazine::Check.active = GAME_STATUS.entitlement.has(gtengine::EntitlementType::EVENT, "201102magazine");
        ROOT::Template::ScrolledWindow::clip::space::GTAcademyEdition::Check.active = GAME_STATUS.entitlement.has(gtengine::EntitlementType::EVENT, "gtacademy2012");
        ROOT::Template::ScrolledWindow::clip::space::RedBull5G::Check.active = GAME_STATUS.entitlement.has(gtengine::EntitlementType::EVENT, "redbull5g");
    }

    method apply(context)
    {
        var user_profile = main::GAME_STATUS.user_profile;
        user_profile.cash = Template::ScrolledWindow::clip::space::Cash::slider.index * Template::ScrolledWindow::clip::space::Cash::slider.bias;
        user_profile.option.rtext_debug = 1 - Template::ScrolledWindow::clip::space::RTextDebug::OptionMenu.index;

        if (self.aspec_current_point < 0)
            self.aspec_current_point = 0;
        user_profile.setAspecLevel(self.aspec_lv, self.aspec_current_point);

        if (self.bspec_current_point < 0)
            self.bspec_current_point = 0;
        user_profile.setBspecLevel(self.bspec_lv, self.bspec_current_point);

        user_profile.context.last_museum_getnum = self.loginbonus_get_num;

        if (self.lastlogin_slide_days > 0)
            user_profile.context.last_login += self.lastlogin_slide_days * 86400;
        else if (self.lastlogin_slide_days < 0)
            user_profile.context.last_login -= (self.lastlogin_slide_days * -1) * 86400;

        user_profile.option.apply();

        var focused_item = Template::ScrolledWindow::clip::space::Language::OptionMenu.getItem();
        var next_lang = focused_item.label.text;

        main::pdistd::SetLanguage(main::pdistd::Language[next_lang]);
        MuseumFileUtil::setLanguage(next_lang);
        Grim2.setLanguage(next_lang.downcase());
        LangUtil::apply(context);

        if (ROOT
            ::Template::ScrolledWindow::clip::space::SignatureVersion::Signature.active &&
                !GAME_STATUS.entitlement.has(gtengine::EntitlementType::EVENT, "signature"))
                GAME_STATUS.entitlement.add(gtengine::EntitlementType::EVENT, "signature");
        else
            GAME_STATUS.entitlement.remove(gtengine::EntitlementType::EVENT, "signature");

        if (ROOT
            ::Template::ScrolledWindow::clip::space::Magazine::Check.active &&
                !GAME_STATUS.entitlement.has(gtengine::EntitlementType::EVENT, "201102magazine"))
                GAME_STATUS.entitlement.add(gtengine::EntitlementType::EVENT, "201102magazine");
        else
            GAME_STATUS.entitlement.remove(gtengine::EntitlementType::EVENT, "201102magazine");

        if (ROOT
            ::Template::ScrolledWindow::clip::space::GTAcademyEdition::Check.active &&
                !GAME_STATUS.entitlement.has(gtengine::EntitlementType::EVENT, "gtacademy2012"))
                GAME_STATUS.entitlement.add(gtengine::EntitlementType::EVENT, "gtacademy2012");
        else
            GAME_STATUS.entitlement.remove(gtengine::EntitlementType::EVENT, "gtacademy2012");

        if (ROOT
            ::Template::ScrolledWindow::clip::space::RedBull5G::Check.active &&
                !GAME_STATUS.entitlement.has(gtengine::EntitlementType::EVENT, "redbull5g"))
                GAME_STATUS.entitlement.add(gtengine::EntitlementType::EVENT, "redbull5g");
        else
            GAME_STATUS.entitlement.remove(gtengine::EntitlementType::EVENT, "redbull5g");
    }

    method onInitialize(context)
    {
        reflect(context);
        
        Template.adjust_size();
        Template.set_focus(context, ROOT);

        FadeEffect.reverse = false;
        FadeEffect.start();

        veil::FadeEffect.reverse = true;
        veil::FadeEffect.warp();

        GarageDetail.visible = false;
        DLCDetail.visible = false;
        Patch206Detail.visible = false;
        Patch208Detail.visible = false;
        Patch209Detail.visible = false;
        Patch210Detail.visible = false;
        Patch211Detail.visible = false;
    }

    method onFinalize(context)
    {
        Template::ScrolledWindow::clip::space::Language::OptionMenu::popup::vbox.clearWindow(context);
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        ROOT.setFocus(Template::Buttons::CancelOK::OK);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::Buttons::CancelOK::OK
{
    method onActivate(context)
    {
        main::sound.play("ok");
        ROOT.apply(context);

        var event_present_map = EventPresentUtil::checkEventAndShowDialogDebug(context, ROOT);
        if (event_present_map.size != 0)
            EventPresentUtil::presentItem(context, ROOT, event_present_map);

        ROOT.close(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::Buttons::CancelOK::Cancel
{
    method onActivate(context)
    {
        main::sound.play("ok");
        ROOT.close(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::ASpecLevel::slider
{
    method initialize(context)
    {
        var user_profile = main::GAME_STATUS.user_profile;
        var level = ROOT.aspec_lv;
        var level_max = main::GAME_STATUS.user_profile.getLevelMax();

        Template::ScrolledWindow::clip::space::ASpecLevel::slider.format_function = function(value, scale, range, format, zero_text) {
            var lv = value;
            return "%d".format(lv);
        };
        Template::ScrolledWindow::clip::space::ASpecLevel::slider.range = [0, level_max];
        Template::ScrolledWindow::clip::space::ASpecLevel::slider.index = level;
        Template::ScrolledWindow::clip::space::ASpecLevel::slider.setup(context, 1);
    }

    method onPopupClosed(context)
    {
        var user_profile = main::GAME_STATUS.user_profile;
        if (self.initialized != nil)
        {
            if (ROOT.aspec_lv != self.index)
            {
                ROOT.aspec_lv = self.index;
                ROOT.aspec_current_point = 0;
                
                var level_max = user_profile.getLevelMax();
                Template::ScrolledWindow::clip::space::ASpecPoint::slider.initialize(context);
                Template::ScrolledWindow::clip::space::ASpecPoint::slider.insensitive = ROOT.aspec_lv >= level_max;
            }

            self.sliderPopupClosed(context);
        }
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::ASpecPoint::slider
{
    method initialize(context)
    {
        var user_profile = main::GAME_STATUS.user_profile;
        var level = ROOT.aspec_lv;
        var level_max = main::GAME_STATUS.user_profile.getLevelMax();

        var current_point = ROOT.aspec_current_point;
        var need_point = user_profile.getPointForNextLevel(level);
        var range_max = 50;
        var bias = 1;
        var index = 0;
        
        if (need_point > 0)
        {
            var bias = need_point.toFloat() / range_max;
            bias = (bias + 0.5).toInt();
            index = current_point / bias;
        }

        Template::ScrolledWindow::clip::space::ASpecPoint::slider.format_function = function(value, scale, range, format, zero_text) {
            var level = ROOT.aspec_lv;
            var level_max = main::GAME_STATUS.user_profile.getLevelMax();
            if (level == level_max)
                return "-- / --";

            var need_point = user_profile.getPointForNextLevel(level);
            var point = value * scale;
            var range_max = range[1];
            if (value == range_max)
                point = need_point - 1;
            return "%d / %d".format(point ,need_point);
        };

        Template::ScrolledWindow::clip::space::ASpecPoint::slider.range = [0, range_max - 1];
        Template::ScrolledWindow::clip::space::ASpecPoint::slider.index = index;
        Template::ScrolledWindow::clip::space::ASpecPoint::slider.setup(context, bias);
        Template::ScrolledWindow::clip::space::ASpecPoint::slider.insensitive = level_max <= level;
    }

    method onPopupClosed(context)
    {
        var user_profile = main::GAME_STATUS.user_profile;
        if (self.initialized != nil)
        {
            if (self.index == Template::ScrolledWindow::clip::space::ASpecPoint::slider.range[1])
            {
                var need_point = user_profile.getPointForNextLevel(ROOT.aspec_lv);
                ROOT.aspec_current_point = need_point - 1;
            }
            else
            {
                ROOT.aspec_current_point = self.index * self.bias;
            }

            self.sliderPopupClosed(context);
        }
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::BSpecLevel::slider
{
    method initialize(context)
    {
        var user_profile = main::GAME_STATUS.user_profile;
        var level = ROOT.bspec_lv;
        var level_max = main::GAME_STATUS.user_profile.getLevelMax();

        Template::ScrolledWindow::clip::space::BSpecLevel::slider.format_function = function(value, scale, range, format, zero_text) {
            var lv = value;
            return "%d".format(lv);
        };
        Template::ScrolledWindow::clip::space::BSpecLevel::slider.range = [0, level_max];
        Template::ScrolledWindow::clip::space::BSpecLevel::slider.index = level;
        Template::ScrolledWindow::clip::space::BSpecLevel::slider.setup(context, 1);
    }

    method onPopupClosed(context)
    {
        var user_profile = main::GAME_STATUS.user_profile;
        if (self.initialized != nil)
        {
            if (ROOT.bspec_lv != self.index)
            {
                ROOT.bspec_lv = self.index;
                ROOT.bspec_current_point = 0;
                
                var level_max = user_profile.getLevelMax();
                Template::ScrolledWindow::clip::space::BSpecPoint::slider.initialize(context);
                Template::ScrolledWindow::clip::space::BSpecPoint::slider.insensitive = ROOT.bspec_lv >= level_max;
            }

            self.sliderPopupClosed(context);
        }
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::BSpecPoint::slider
{
    method initialize(context)
    {
        var user_profile = main::GAME_STATUS.user_profile;
        var level = ROOT.bspec_lv;
        var level_max = main::GAME_STATUS.user_profile.getLevelMax();

        var current_point = ROOT.bspec_current_point;
        var need_point = user_profile.getPointForNextLevel(level);
        var range_max = 50;
        var bias = 1;
        var index = 0;
        
        if (need_point > 0)
        {
            var bias = need_point.toFloat() / range_max;
            bias = (bias + 0.5).toInt();
            index = current_point / bias;
        }

        Template::ScrolledWindow::clip::space::BSpecPoint::slider.format_function = function(value, scale, range, format, zero_text) {
            var level = ROOT.bspec_lv;
            var level_max = main::GAME_STATUS.user_profile.getLevelMax();
            if (level == level_max)
                return "-- / --";

            var need_point = user_profile.getPointForNextLevel(level);
            var point = value * scale;
            var range_max = range[1];
            if (value == range_max)
                point = need_point - 1;
            return "%d / %d".format(point ,need_point);
        };

        Template::ScrolledWindow::clip::space::BSpecPoint::slider.range = [0, range_max - 1];
        Template::ScrolledWindow::clip::space::BSpecPoint::slider.index = index;
        Template::ScrolledWindow::clip::space::BSpecPoint::slider.setup(context, bias);
        Template::ScrolledWindow::clip::space::BSpecPoint::slider.insensitive = level_max <= level;
    }

    method onPopupClosed(context)
    {
        var user_profile = main::GAME_STATUS.user_profile;
        if (self.initialized != nil)
        {
            if (self.index == Template::ScrolledWindow::clip::space::BSpecPoint::slider.range[1])
            {
                var need_point = user_profile.getPointForNextLevel(ROOT.bspec_lv);
                ROOT.bspec_current_point = need_point - 1;
            }
            else
            {
                ROOT.bspec_current_point = self.index * self.bias;
            }

            self.sliderPopupClosed(context);
        }
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::RemoveSaveData::Exec
{
    method onActivate(context)
    {
        main::sound.play("ok");

        veil::FadeEffect.reverse = false;
        veil::FadeEffect.start();

        context.cursor_visible = false;
        SaveDataUtil::listDelete(context);
        context.cursor_visible = true;

        veil::FadeEffect.reverse = true;
        veil::FadeEffect.start();

        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::InsertCarsIntoGarage::Exec
{
    class InsertProgress : UIKitProject::ProgressRoot::Data
    {
        attribute exec_func_;
        attribute args_;
        attribute thread_;

        method __init__(exec_func, args)
        {
            self.exec_func_ = exec_func;
            self.args_ = args;
        }

        method begin_message(context)
        {
            return context.translate(ROOT, "OptionProject::DebugOptionRoot", "Wait");
        }

        method begin(context)
        {
            if (self.exec_func_ == nil)
                return false;

            self.thread_ = Thread(self.exec_func_, self.args_, self.progress);
            self.thread_.start();
            return true;
        }

        method end(context)
        {
            if (self.isFinish())
            {
                if (self.thread_ != nil)
                {
                    self.thread_.terminate();
                    self.thread_ = nil;
                }

                self.exec_func_ = nil;
                self.args_ = nil;
                return true;
            }

            return false;
        }

        method isFinish(context)
        {
            return self.progress.value == 1.0;
        }

        method getProgress(context)
        {
            return self.progress.value;
        }

        method cancel(context)
        {

        }
    }

    function exec(args, progress)
    {
        |var insert_premium, var insert_standard, var insert_voucher, var insert_spec2| = args;
        GAME_STATUS.user_profile.garage.clear();

        var voucher_list = [
            "r10_tdi_06_cf",
            "epson_nsx_08_cf",
            "_787b_91_cf",
            "mclaren_f1_94_cf",
            "sls_amg_10_cf",
            "xanavi_nismo_gtr_08_cf",
            "nascar_camry_20_gamestop_10",
            "r8_v10_09_crl",
            "m3_coupe_07_crl",
            "xj13_66_crl",
            "murcielago_lp640_09_crl",
            "_300sl_coupe_54_crl",
            "cobra_67_crl",
            "camaro_ss_10_edge",
            "gtr_specv_09_ac_sp",
        ];

        var voucher_car_code_list = [];
        foreach (var v in voucher_list)
            voucher_car_code_list.push(gtengine::MSpecDB::getCarCode(v));

        var cars = [];
        if (insert_premium)
        {
            cars += main::gtengine::MSpecDB::getCarCodeListByGenericFlag("has_premium_model", true);
            foreach (var exclude_car in ["car_color_sample", "wheel_color_sample"])
            {
                var index = cars.indexOf(gtengine::MSpecDB::getCarCode(exclude_car));
                if (index > 0)
                    cars.erase(index);
            }

            foreach (var v in voucher_car_code_list)
            {
                var index = cars.indexOf(v);
                if (index > 0)
                    cars.erase(index);
            }
        }

        if (insert_standard)
            cars += main::gtengine::MSpecDB::getCarCodeListByGenericFlag("has_premium_model", false);

        if (insert_voucher)
            cars += voucher_car_code_list;

        if (insert_spec2)
        {
            var spec2_list = [
                "x2011_f_11",
                "challenger_srt8_08_rm",
                "cr_z_a_10_rm",
                "roadster_89_rm",
                "rx7_spiritr_a_02_rm",
                "lancer_evo10_gsr_premium_07_rm",
                "gtr_specv_09_rm",
                "r33_gtr_v_97_rm",
                "r32_gtr_v2_94_rm",
                "r34_gtr_v2_nur_02_rm",
                "impreza_sedan_wrx_sti_10_rm",
                "prius_g_09_rm",
                "pdi_racing_kart_50_xx",
                "racing_kart_100_xx",
                "pdi_racing_kart_125_xx",
                "x1_10",
                "x1_f_10",
                "x1_c_10",
                "gtr_n24_sms_11",
                "nascar_camry_11_11",
                "nascar_impala_14_11",
                "nascar_camry_18_11",
                "nascar_camry_20_11",
                "nascar_impala_24_11",
                "nascar_impala_42_11",
                "nascar_fusion_43_11",
                "nascar_impala_48_11",
                "nascar_camry_83_11",
                "nascar_impala_88_11",
                "nascar_fusion_99_11",
            ];

            cars += spec2_list;
        }

        var cars2 = [];
        var sqlite = GlobalStatus::getSqlite();
        sqlite.begin();

        for (var i = 0; i < cars.size; i++)
        {
            progress.value = i.toFloat() / cars.size;

            var car = cars[i];
            if (car == gtengine::MSpecDB::NO_CODE64)
                continue;

            var cp = gtengine::MCarParameter(car);
            cp.color = main::gtengine::MSpecDB::getCarVariationFlag(car, 1);
            GAME_STATUS.user_profile.garage.addCar(cp);
        }

        sqlite.commit();
        pdistd::RemoveDirectory("/APP_DATA/car/", true);
        progress.value = 1.0;
        return true;
    }

    method onInitialize(context)
    {
        self.InsertCarsIntoGarage::Premium.active = true;
        self.InsertCarsIntoGarage::Standard.active = true;
        self.InsertCarsIntoGarage::Voucher.active = false;
    }

    method onActivate(context)
    {
        main::sound.play("ok");
        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "OptionProject::DebugOptionRoot", "DO_YOU_INSERT_CARS_INTO_GARAGE"));
        if (!res)
            return EVENTRESULT_FILTER;

        var insert_premium = self.InsertCarsIntoGarage::Premium.active;
        var insert_standard = self.InsertCarsIntoGarage::Standard.active;
        var insert_voucher = self.InsertCarsIntoGarage::Voucher.active;
        var insert_spec2 = self.InsertCarsIntoGarage::Spec2.active;

        if (!insert_premium && !insert_standard && !insert_voucher && !insert_spec2)
            return EVENTRESULT_FILTER;

        var data = InsertProgress(exec, [insert_premium, insert_standard, insert_voucher, insert_spec2]);
        DialogUtil::setProgressOKButton(context);
        UIKitProject::ProgressRoot.open(context, [data]);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::InsertCarsIntoGarageDetail::Exec
{
    function exec(args, progress)
    {
        progress.value = 1.0;
        return true;
    }

    method onActivate(context)
    {
        main::sound.play("ok");
        GarageDetail.show(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::GarageDetail
{
    attribute category = "";
    attribute dealer = "";
    attribute car = "";
    attribute color = "";
    attribute paint_id = 0;

    attribute premium_car_map;
    attribute standard_car_map;
    attribute current_car_label_list;

    method show(context)
    {
        self.visible = true;

        ROOT::Template.insensitive = true;
        ROOT.setFocus(self.Buttons::CancelOK::Cancel);
    }

    method hide(context)
    {
        self.visible = false;

        ROOT.setFocus(ROOT::Template::ScrolledWindow::clip::space::InsertCarsIntoGarageDetail::Exec);
        ROOT::Template.insensitive = false;
    }

    method update(context, car_change)
    {
        CursorUtil::setCursor(ContextMain, "wait");

        var car_map = nil;

        if (self.category == "Premium")
        {
            if (self.premium_car_map == nil)
            {
                self.premium_car_map = Map();
                var car_label_list = main::gtengine::MSpecDB::getCarLabelListByGenericFlag("has_premium_model", true);
                foreach (var car_label in car_label_list)
                {
                    var tuner_label = main::gtengine::MSpecDB::getTunerLabel(car_label);
                    if (self.premium_car_map[tuner_label] == nil)
                        self.premium_car_map[tuner_label] = Array();

                    self.premium_car_map[tuner_label].push(car_label);
                }
            }

            car_map = self.premium_car_map;
        }
        else 
        {
            if (self.standard_car_map == nil)
            {
                self.standard_car_map = Map();
                var car_label_list = main::gtengine::MSpecDB::getCarLabelListByGenericFlag("has_premium_model", false);
                foreach (var car_label in car_label_list)
                {
                    var tuner_label = main::gtengine::MSpecDB::getTunerLabel(car_label);
                    if (self.standard_car_map[tuner_label] == nil)
                        self.standard_car_map[tuner_label] = Array();

                    self.standard_car_map[tuner_label].push(car_label);
                }
            }

            car_map = self.standard_car_map;
        }

        if (car_change)
        {
            self.current_car_label_list = [];
            if (self.dealer != "")
                self.current_car_label_list = car_map[self.dealer];
            else
            {
                foreach (|var d, var l| in car_map)
                    self.current_car_label_list.append(l);
            }

            var car_name_list = [];
            foreach (var car_label in self.current_car_label_list)
                car_name_list.push(gtengine::MSpecDB::getCarShortName(car_label));

            var omenu = VBox::Car::RadioBox::HBox::OptionMenu;
            OptionMenuUtil::finalize(context, omenu);
            OptionMenuUtil::initialize(context, ROOT, omenu, hidden::Item, car_name_list);
            omenu.setIndex(context, 0);
        }

        CursorUtil::setCursor(ContextMain, "cursor_chrome");
    }

    method onInitialize(context)
    {
        self.premium_car_map = nil;
        self.standard_car_map = nil;

        foreach (var label in ["Category", "Dealer", "Car", "Color"])
        {
            var radiobutton_list = [
                [VBox["%{label}"].RadioBox::HBox::RadioButtonA, 0],
                [VBox["%{label}"].RadioBox::HBox::RadioButtonB, 1],
            ];

            if (label == "Color")
                radiobutton_list.push([VBox["%{label}"].RadioBox::HBox2::RadioButtonC, 2]);

            VBox["%{label}"].RadioBox.setup(radiobutton_list, 0);
        }

        self.category = "Premium";
        self.dealer = "";

        var dealer_list = main::pdiapp::XmlUtil::load_array("/textdata/gt5/dealerlist.xml", "DealerData", "dealer", "code");
        var omenu = VBox::Dealer::RadioBox::HBox::OptionMenu;
        OptionMenuUtil::finalize(context, omenu);
        OptionMenuUtil::initialize(context, ROOT, omenu, hidden::Item, dealer_list, "TunerName");
        omenu.setIndex(context, 0);

        self.car = "";
        self.color = "All";
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        self.hide(context);
        return EVENTRESULT_FILTER;
    }

    module VBox
    {
        module Category::RadioBox
        {
            method onActivate(context)
            {
                var v = self.getSelectedButtonValue();
                var new_category = ["Premium", "Standard"][v];
                if (GarageDetail.category != new_category)
                {
                    GarageDetail.category = new_category;
                    GarageDetail.update(context, true);
                }

                return EVENTRESULT_FILTER;
            }
        }

        module Dealer
        {
            module RadioBox
            {
                method onActivate(context)
                {
                    var v = self.getSelectedButtonValue();
                    var new_dealer = "";

                    if (v == 1)
                    {
                        var index = HBox::OptionMenu.index;
                        var w = HBox::OptionMenu["popup"]["vbox"].getChild(index);
                        new_dealer = w.name;
                    }

                    if (GarageDetail.dealer != new_dealer)
                    {
                        GarageDetail.dealer = new_dealer;
                        GarageDetail.update(context, true);
                    }

                    return EVENTRESULT_FILTER;
                }

                module HBox::OptionMenu
                {
                    method onValueChanged(context)
                    {
                        self.pulldownValueChanged(context);
                        var w = self.popup::vbox.getChild(self.index);

                        if (GarageDetail.dealer != w.name)
                        {
                            GarageDetail.dealer = w.name;
                            GarageDetail.update(context, true);
                        }

                        return EVENTRESULT_FILTER;
                    }
                }
            }
        }

        module Car
        {
            module RadioBox
            {
                method onActivate(context)
                {
                    var v = self.getSelectedButtonValue();
                    var new_car = "";

                    if (v == 1)
                    {
                        var index = HBox::OptionMenu.index;
                        new_car = GarageDetail.current_car_label_list[index];
                    }

                    if (GarageDetail.car != new_car)
                    {
                        GarageDetail.car = new_car;
                        GarageDetail.update(context, false);
                    }

                    return EVENTRESULT_FILTER;
                }

                module HBox::OptionMenu
                {
                    method onValueChanged(context)
                    {
                        self.pulldownValueChanged(context);
                        var new_car = GarageDetail.current_car_label_list[self.index];

                        if (GarageDetail.car != new_car)
                        {
                            GarageDetail.car = new_car;
                            GarageDetail.update(context, false);
                        }

                        return EVENTRESULT_FILTER;
                    }
                }
            }
        }

        module Color
        {
            module RadioBox
            {
                method onActivate(context)
                {
                    var v = self.getSelectedButtonValue();
                    var new_color = ["All", "Representative", "PaintID"][v];
                    GarageDetail.color = new_color;

                    return EVENTRESULT_FILTER;
                }

                module HBox2
                {
                    module Input::input
                    {
                        method onInitialize(context)
                        {
                            input.value = 0;
                            var paint_id = input.value.toInt();
                            Name::label.text = main::gtengine::MSpecDB::getPaintColorName_A(paint_id);
                            GarageDetail.paint_id = paint_id;
                        }

                        method onTextClose(context)
                        {
                            var paint_id = input.value.toInt();
                            if (0 < paint_id <= main::gtengine::MSpecDB::getPaintColorCount())
                            {
                                Name::label.text = main::gtengine::MSpecDB::getPaintColorName_A(paint_id);
                                GarageDetail.paint_id = paint_id;
                            }
                            else
                            {
                                Name::label.text = "--";
                                GarageDetail.paint_id = 0;
                            }

                            return EVENTRESULT_FILTER;
                        }
                    }
                }
            }
        }
    }

    module Buttons::CancelOK
    {
        module Cancel
        {
            method onActivate(context)
            {
                main::sound.play("cancel");
                GarageDetail.hide(context);
                return EVENTRESULT_FILTER;
            }
        }

        module OK
        {
            function exec(args, progress)
            {
                |var car_label_list, var color, var paint_id| = args;

                var sqlite = GlobalStatus::getSqlite();
                sqlite.begin();

                for (var i = 0; i < car_label_list.size; ++i)
                {
                    progress.value = i.toFloat() / car_label_list.size;
                    var car_label = car_label_list[car_label_list.size - i - 1];
                    var car_code = main::gtengine::MSpecDB::getCarCode(car_label);

                    var color_list = [];
                    if (color == "All")
                    {
                        var variation = gtengine::MSpecDB::getCarVariation(car_code);

                        // BUG/FIXME: this should a new i, actual compiler behavior from their end
                        for (var j = 0; j < variation; ++j)
                            color_list.push(variation - j - 1);
                    }
                    else
                    {
                        color_list.push(gtengine::MSpecDB::getCarVariationFlag(car_code, 1));
                    }

                    var cp = gtengine::MCarParameter(car_code);
                    if (color == "PaintID")
                    {
                        cp.setPaintColor(0, paint_id);
                        GAME_STATUS.user_profile.garage.addCar(cp);
                    }
                    else
                    {
                        foreach (var color in color_list)
                        {
                            cp.color = color;
                            GAME_STATUS.user_profile.garage.addCar(cp);
                        }
                    }
                }

                sqlite.commit();
                progress.value = 1.0;
            }

            method onActivate(context)
            {
                main::sound.play("ok");
                
                var _category = GarageDetail.category;
                var _dealer = GarageDetail::VBox::Dealer::RadioBox.getSelectedButtonValue() == 0 ? "All" : GarageDetail.dealer;
                var _car = GarageDetail::VBox::Car::RadioBox.getSelectedButtonValue() == 0 ? "All" : GarageDetail.car;
                var _color = GarageDetail.color;
                var _paint_id = GarageDetail.paint_id;
                var color_label = "";

                switch (_color)
                {
                    case "All":
                        color_label = context.translate(ROOT, "ALL");
                        break;

                    case "Representative":
                        color_label = context.translate(ROOT, "REPRESENTATIVE_COLOR");
                        break;

                    case "PaintID":
                        color_label = gtengine::MSpecDB::getPaintColorName_A(_paint_id);
                        break;
                }

                var text = context.translate(ROOT, "DO_YOU_ADD_GARAGE");
                text += "\n\n\n%s : %s\n%s : %s\n%s : %s\n%s : %s\n".format(
                    context.translate(ROOT, "CATEGORY"),
                    context.translate(ROOT, _category.upcase()),
                    context.translate(ROOT, "DEALER"),
                    _dealer == "All" ? context.translate(ROOT, "ALL") : context.translate(ROOT, "TunerName", _dealer),
                    context.translate(ROOT, "CAR"),
                    _car == "All" ? context.translate(ROOT, "ALL") : gtengine::MSpecDB::getCarShortName(_car),
                    context.translate(ROOT, "COLOR"),
                    color_label
                );

                var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, text);
                if (!res)
                    return EVENTRESULT_FILTER;

                var car_map = _category == "Premium" ? GarageDetail.premium_car_map : GarageDetail.standard_car_map;
                var car_label_list = [];

                if (_car == "All")
                {
                    if (_dealer == "All")
                    {
                        foreach (|var d, var l| in car_map)
                            car_label_list.append(l);
                    }
                    else
                    {
                        car_label_list = car_map[_dealer];
                    }
                }
                else
                {
                    car_label_list.push(_car);
                }

                var data = DebugMenuPopup::Template::ScrolledWindow::clip::space::InsertCarsIntoGarage::Exec::InsertProgress(exec, [car_label_list, _color, _paint_id]);
                DialogUtil::setProgressOKButton(context);
                UIKitProject::ProgressRoot.open(context, [data]);
                return EVENTRESULT_FILTER;
            }
        }
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::ClearGarage
{
    method onActivate(context)
    {
        var text = context.translate(ROOT, "DO_YOU_CLEAR_GARAGE");
        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, text);
        if (res)
        {
            GAME_STATUS.user_profile.garage.clear();
            pdistd::RemoveDirectory("/APP_DATA/car/", true);
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE");
        }

        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::AllCourseAvailable
{
    method onActivate(context)
    {
        PleaseWait.begin(context);

        var flags = [
            "topgear",
            "nurburgring",
            "nurburgring_24h",
            "nurburgring_vln",
            "nurburgring_daynight",
            "nurburgring_24h_daynight",
            "spa",
            "spa_wet",
            "newindoorkart",
            "newindoorkart_short",
            "r_newindoorkart",
            "r_newindoorkart_short"
        ];

        foreach (var flag in flags)
            GAME_STATUS.user_profile.game_flags.setFlag("COURSE_AVAILABLE", flag, true);

        PleaseWait.end(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::AllTopSceneAvailable
{
    method onActivate(context)
    {
        PleaseWait.begin(context);

        var flags = [
            "top_redbullhangar7",
            "top_shirakawa",
            "top_GTR_engine",
            "photo_galgano",
            "top_ahrweiler01",
            "top_DarkHangar01",
            "top_new_nur",
            "top_DarkSmoke_01",
            "top_new_bonn",
            "top_kiritooshi_new",
            "top_whiteTown",
            "top_ahrweiler02",
            "top_ahrweiler03",
            "top_shorenin",
            "top_bern",
            "photo_luzern",
            "top_campo",
            "top_sangimi",
            "tourDeItalia_bern",
            "tourDeItalia_Luzern",
            "tourDeItalia_Siena",
            "tourDeItalia_Sangimi",
            "tourDeItalia_galgano",
            "X1challenge_intro",
            "NASCAR_school_intro",
            "loeb_Rally_Challenge",
            "Topgear_intro",
            "X1_delivery",
            "top_garage",
        ];

        foreach (var flag in flags)
            GAME_STATUS.user_profile.game_flags.setFlag("TOP_SCENES", flag, true);

        PleaseWait.end(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::AllPhotoLocationsAvailable
{
    method onActivate(context)
    {
        PleaseWait.begin(context);
        main::sound.play("next");

        var location_list = [
            "photo_hangar7",
            "photo_shirakawa",
            "photo_ahrweiler1",
            "photo_ahrweiler2",
            "photo_ahrweiler3",
            "photo_ahrweiler1_winter",
            "photo_galgano",
            "photo_campo01",
            "photo_luzern",
            "photo_sangimi",
            "photo_shorenin",
            "photo_bern",
        ];

        foreach (var location in location_list)
            GAME_STATUS.user_profile.game_flags.setFlag("PHOTO_STAGES", location, true);

        PleaseWait.end(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::AllSpecialEventsAvailable
{
    method onActivate(context)
    {
        PleaseWait.begin(context);

        var events = [
            "kart",
            "amg",
            "tour",
            "stig",
            "gordon",
            "loeb",
            "vettel",
            "rally",
        ];

        foreach (var event in events)
            GAME_STATUS.user_profile.game_flags.setFlag("SPECIAL_EVENT_AVAILABLE", event, true);

        PleaseWait.end(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::AddStrangeCars::Exec
{
    method onActivate(context)
    {
        PleaseWait.begin(context);
        main::sound.play("next");

        var cars = [
            "f10_10",
            "pdi_racing_kart_100_xx",
            "tank_car_03",
            "f2007_07",
            "cien_dmv_02",
            "a4_dtm_04",
            "art_morrison_corvette_60",
            "tt_coupe_32_07",
            "gtr_07",
            "slr_mclaren_19wheel_09",
            "camaro_ss_10",
            "camaro_ss_10_rm"
        ];

        var car_names = "";
        foreach (var car in cars)
        {
            var cp = gtengine::MCarParameter(gtengine::MSpecDB::getCarCode(car));
            GAME_STATUS.user_profile.garage.addCar(cp);
            car_names += gtengine::MSpecDB::getCarShortName(car);
            car_names += "\n";
        }

        PleaseWait.end(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::AllTunePartsAdd
{
    method onActivate(context)
    {
        PleaseWait.begin(context);

        var item = GameItemUtil::getPartsList();
        GameItemUtil::ItemBox::insertItemList(item);

        var color_item_list = Array();
        for (var i = 2050; i < 2193; i++)
        {
            if (gtengine::MSpecDB::getPaintColorType(i) >= 99)
                continue;

            var color_name = gtengine::MSpecDB::getPaintColorName_A(i);
            var color_item = GameItemUtil::GameItemRecord();

            if (i >= 2169 && i <= 2191)
                color_item = GameItemUtil::getItemByCode("paint_02");
            else
                color_item = GameItemUtil::getItemByCode("paint_01");

            color_item["argument1"] = i;
            color_item["item_name"] = color_name;
            color_item["argument2"] = gtengine::MSpecDB::getPaintColorType(i);
            color_item["argument3"] = gtengine::MSpecDB::getPaintColorRGB(i, 0).normalize * 10000;
            color_item["code"] = gtengine::MSpecDB::getPaintColorTunerString(i);
            color_item_list.push(color_item);
        }

        GameItemUtil::ItemBox::insertItemList(color_item_list);

        PleaseWait.end(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::AllColorItemAdd
{
    method onActivate(context)
    {
        PleaseWait.begin(context);

        var color_item_list = Array();
        for (var i = 1; i < 3303; i++)
        {
            if ((i >= 3130 && i <= 3192) || (i >= 3293 && i <= 3300))
                continue;

            var color_name = gtengine::MSpecDB::getPaintColorName_A(i);
            var color_item = GameItemUtil::GameItemRecord();

            if (i >= 2169 && i <= 2191)
                color_item = GameItemUtil::getItemByCode("paint_02");
            else
                color_item = GameItemUtil::getItemByCode("paint_01");

            color_item.argument1 = i;
            color_item.item_name = color_name;
            color_item.argument2 = gtengine::MSpecDB::getPaintColorType(i);
            color_item.argument3 = gtengine::MSpecDB::getPaintColorRGB(i, 0).normalize * 10000;
            color_item.code = gtengine::MSpecDB::getPaintColorTunerString(i);
            color_item_list.push(color_item);
        }

        GameItemUtil::ItemBox::insertItemList(color_item_list);

        PleaseWait.end(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::AllHornItemAdd
{
    method onActivate(context)
    {
        PleaseWait.begin(context);

        var horn_item_list = Array();
        for (var i = 1; i < 280; i++)
        {
            var horn_item = GameItemUtil::getItemByCode("horn_01");
            horn_item["argument1"] = i;
            horn_item_list.push(horn_item);
        }

        GameItemUtil::ItemBox::insertItemList(horn_item_list);

        PleaseWait.end(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::AllTicketItemAdd
{
    method onActivate(context)
    {
        PleaseWait.begin(context);

        var ticket_list = Array();
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_05"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_09"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_12"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_17"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_21"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_24"));

        ticket_list.push(GameItemUtil::getItemByCode("concept_presentcar_ticket_05"));
        ticket_list.push(GameItemUtil::getItemByCode("concept_presentcar_ticket_07"));
        ticket_list.push(GameItemUtil::getItemByCode("concept_presentcar_ticket_08"));
        ticket_list.push(GameItemUtil::getItemByCode("concept_presentcar_ticket_09"));
        ticket_list.push(GameItemUtil::getItemByCode("concept_presentcar_ticket_11"));
        ticket_list.push(GameItemUtil::getItemByCode("concept_presentcar_ticket_12"));
        ticket_list.push(GameItemUtil::getItemByCode("concept_presentcar_ticket_13"));

        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_01"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_02"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_04"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_07"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_08"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_11"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_13"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_14"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_16"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_19"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_22"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_23"));

        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_03"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_06"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_10"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_15"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_18"));
        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_20"));

        ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_lv0"));

        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_01"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_02"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_03"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_04"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_05"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_06"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_07"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_08"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_09"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_10"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_11"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_12"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_13"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_14"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_15"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_16"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_17"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_18"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_19"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_20"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_21"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_22"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_23"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_24"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_25"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_26"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_27"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_28"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_29"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_30"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_31"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_32"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_33"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_34"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_35"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_36"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_37"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_38"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_39"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_40"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_41"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_42"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_43"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_44"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_45"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_46"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_47"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_48"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_49"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_50"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_51"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_52"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_53"));
        ticket_list.push(GameItemUtil::getItemByCode("year_presentcar_ticket_54"));
        GameItemUtil::ItemBox::insertItemList(ticket_list);

        PleaseWait.end(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::PrizeDialogDebug
{
    method onActivate(context)
    {
        main::GAME_STATUS.user_profile.setAspecLevel(0, 0);
        main::GAME_STATUS.user_profile.setBspecLevel(0, 0);

        DialogUtil::openPrizeMoneyDialog(context, 100, true);
        DialogUtil::openPrizeAspecExpDialog(context, 100, true);
        DialogUtil::openPrizeBspecExpDialog(context, 100, true);
        DialogUtil::openPrizeMoneyDialog(context, 1000, true);
        DialogUtil::openPrizeAspecExpDialog(context, 1000, true);
        DialogUtil::openPrizeBspecExpDialog(context, 1000, true);
        DialogUtil::openPrizeMoneyDialog(context, 10000000, true);
        DialogUtil::openPrizeAspecExpDialog(context, 10000, true);
        DialogUtil::openPrizeBspecExpDialog(context, 10000, true);
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::Museum
{
    class Waiting : UIKitProject::ProgressRoot::ThreadData
    {
        method begin_message(context)
        {
            return context.translate(ROOT, "OptionProject::DebugOptionRoot", "Wait");
        }
    }

    method onActivate(context)
    {
        main::sound.play("ok");

        if (!DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "OptionProject::DebugOptionRoot", "DO_YOU_GET_MUSEUM_ALL")))
            return EVENTRESULT_FILTER;

        var updater = Waiting(function(args, progress)
        {
            var context = args;
            Museum2.requestMuseumIdListForce(1, function(args)
            {
                |var context, var request| = args;
                if (!request.isDone())
                    progress.value = 1.0;
                else
                {
                    var res;

                    var list = Museum2.decodeMuseumIdList(request);
                    if (request.isUpdated() || list.size != MuseumFileUtil::getMuseumIdListCount())
                        res = MuseumFileUtil::updateMuseumIdList(list);

                    var index = 1;
                    var museum_list = [];

                    foreach (var museum_id in list)
                    {
                        var id = museum_id["museum_id"];
                        request = Museum2.requestMuseumForce(id, function(args) {});

                        if (Grim2Util::__deprecated__join__(context, request))
                        {
                            var museum = Museum2.decodeMuseum(request);
                            museum_list.push(museum);
                        }

                        progress.value = index.toFloat() / list.size;
                        index++;
                    }

                    MuseumFileUtil::updateMuseum2(museum_list);
                    MuseumFileUtil::begin();

                    foreach (var museum in museum_list)
                        MuseumFileUtil::increment(museum["museum_id"]);

                    MuseumFileUtil::commit();
                }
            });
        }, context);

        DialogUtil::setProgressOKButton(context);
        UIKitProject::ProgressRoot.open(context, [updater]);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::SignatureVersion::Signature
{
    method onActivate(context)
    {
        main::sound.play("cursor");
        self.active = !self.active;
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::AvatorItemAdd
{
    method onActivate(context)
    {
        PleaseWait.begin(context);

        var item_list = GameItemUtil::getAvatorItemList();
        foreach (var item in item_list)
        {
            if (GameItemUtil::isHaveColorVariation(item["value"]))
                item["argument1"] = pdistd::MRandom::GetValue(1, 34 + 1);
            else
                item["argument1"] = 0;
        }

        GameItemUtil::ItemBox::insertItemList(item_list);

        PleaseWait.end(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::AllAvatorItemAdd
{
    method onActivate(context)
    {
        PleaseWait.begin(context);

        var item_list = GameItemUtil::getAvatorItemList();
        var insert_list = Array();

        foreach (var item in item_list)
        {
            if (GameItemUtil::isHaveColorVariation(item["value"]))
            {
                for (var i = 1; i < 35; i++)
                {
                    var _item = GameItemUtil::getItemByID(item["gameitem_id"]);
                    _item["argument1"] = i;
                    insert_list.push(_item);
                }
            }
            else
            {
                item["argument1"] = 0;
                insert_list.push(item);
            }
        }

        GameItemUtil::ItemBox::insertItemList(insert_list);

        PleaseWait.end(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::Magazine::Check
{
    method onActivate(context)
    {
        main::sound.play("cursor");
        self.active = !self.active;
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::GTAcademyEdition::Check
{
    method onActivate(context)
    {
        main::sound.play("cursor");
        self.active = !self.active;
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::TopSceneDebug
{
    method onActivate(context)
    {
        PleaseWait.begin(context);

        GAME_STATUS.user_profile.game_flags.top_scenes = 0;
        GAME_STATUS.user_profile.game_flags.setFlag("TOP_SCENES", "allavt_topdemo", true);

        PleaseWait.end(context);

        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::DLC::Exec
{
    method onActivate(context)
    {
        main::sound.play("ok");
        DLCDetail.show(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::DLCDetail
{
    method show(context)
    {
        self.visible = true;
        ROOT::Template.insensitive = true;
        ROOT.setFocus(self.Buttons::CancelOK::OK);
    }

    method hide(context)
    {
        self.visible = false;
        ROOT.setFocus(ROOT::Template::ScrolledWindow::clip::space::DLC::Exec);
        ROOT::Template.insensitive = false;
    }

    method onInitialize(context)
    {

    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        self.hide(context);
        return EVENTRESULT_FILTER;
    }

    module VBox
    {
        function installCar(context, type, additional_list)
        {
            var car_list = DLCUtil::getContents(type);
            if (additional_list != nil)
                car_list.append(additional_list);

            var car_list0 = [];
            foreach (var car_label in car_list)
                car_list0.push(gtengine::MSpecDB::getCarShortName(car_label));
            
            var message = context.translate(ROOT, "DO_YOU_ADD_DLC_CAR").build(car_list0.join("\n"));
            if (!DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, message))
                return;

            PleaseWait.begin(context);

            GameItemUtil::getCAR001(car_list, context);
            DLCUtil::install(type);
            GAME_STATUS.entitlement.add(gtengine::EntitlementType::DLC, type);

            PleaseWait.end(context);
        }

        function installCourse(context, type, exclude_list)
        {
            var course_list0 = DLCUtil::getContents(type);
            var course_list = [];

            foreach (var course in course_list0)
            {
                var found = false;
                foreach (var exclude in exclude_list)
                {
                    if (course == exclude)
                    {
                        found = true;
                        break;
                    }
                }

                if (!found) 
                    course_list.push(course);
            }

            if (course_list.size == 0)
                return;

            var message = context.translate(ROOT, "DO_YOU_ADD_DLC_COURSE").build(course_list.join("\n"));
            if (!DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, message))
                return;
    
            PleaseWait.begin(context);
    
            DLCUtil::install(type);
            foreach (var course in exclude_list)
                GAME_STATUS.user_profile.game_flags.setFlag("COURSE_AVAILABLE", course, false);
            
            PleaseWait.end(context);
        }

        module _200CarPack
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                installCar(context, DLCUtil::TYPE::CAR_001, []);
                return EVENTRESULT_FILTER;
            }
        }

        module _200CoursePack
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                var exclude_list = [];
                var message = context.translate(ROOT, "DO_YOU_EXCLUDE_KART_COURSE");

                var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, message);
                if (res)
                    exclude_list = ["newindoorkart", "newindoorkart_short", "r_newindoorkart", "r_newindoorkart_short"];

                installCourse(context, DLCUtil::TYPE::COURSE_001, exclude_list);
                return EVENTRESULT_FILTER;
            }
        }

        module _200RacingGearPack
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                var message = context.translate(ROOT, "DO_YOU_ADD_DLC_RACING_GEAR");
                if (!DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, message))
                    return EVENTRESULT_FILTER;

                PleaseWait.begin(context);

                var type = DLCUtil::TYPE::WEAR_001;
                var wear_list = DLCUtil::getContents(type);
                GameItemUtil::getWEAR001(wear_list, context);
                DLCUtil::install(type);

                PleaseWait.end(context);
                return EVENTRESULT_FILTER;
            }
        }

        module _200PaintPack
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                var message = context.translate(ROOT, "DO_YOU_ADD_DLC_PAINT");
                if (!DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, message))
                    return EVENTRESULT_FILTER;

                PleaseWait.begin(context);

                var type = DLCUtil::TYPE::PAINT_001;
                var paint_list = DLCUtil::getContents(type);
                var res = GameItemUtil::getPAINT001(paint_list, context);
                DLCUtil::install(type);

                PleaseWait.end(context);
                return EVENTRESULT_FILTER;
            }
        }

        module _202CarPack
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                var additional_list = [
                    "ft_86_2_concept_11",
                    "racing_kart_125_sp_xx"
                ];

                installCar(context, DLCUtil::TYPE::CAR_002, additional_list);
                return EVENTRESULT_FILTER;
            }
        }

        module _203CarPack
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                var additional_list = [

                ];

                installCar(context, DLCUtil::TYPE::CAR_003, additional_list);
                return EVENTRESULT_FILTER;
            }
        }

        module _203CoursePack
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                installCourse(context, DLCUtil::TYPE::COURSE_002, []);
                return EVENTRESULT_FILTER;
            }
        }

        module _206CarPack
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                var additional_list = [];
                installCar(context, DLCUtil::TYPE::CAR_004, additional_list);
                return EVENTRESULT_FILTER;
            }
        }

        module _206CoursePack
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                installCourse(context, DLCUtil::TYPE::COURSE_003, []);
                return EVENTRESULT_FILTER;
            }
        }

        module _208CarPack1
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                var additional_list = [

                ];

                installCar(context, DLCUtil::TYPE::CAR_005, additional_list);
                return EVENTRESULT_FILTER;
            }
        }

        module _208CarPack2
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                var additional_list = [

                ];

                installCar(context, DLCUtil::TYPE::CAR_006, additional_list);
                return EVENTRESULT_FILTER;
            }
        }

        module _208CarPack3
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                var additional_list = [

                ];

                installCar(context, DLCUtil::TYPE::CAR_007, additional_list);
                return EVENTRESULT_FILTER;
            }
        }

        module _209CarPack
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                var additional_list = [

                ];

                installCar(context, DLCUtil::TYPE::CAR_008, additional_list);
                return EVENTRESULT_FILTER;
            }
        }

        module _210CarPack
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                var additional_list = [

                ];

                installCar(context, DLCUtil::TYPE::CAR_009, additional_list);
                return EVENTRESULT_FILTER;
            }
        }

        module NotInvalidNext
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                PleaseWait.begin(context);
                DLCUtil::setAvailableAnyTime();
                PleaseWait.end(context);

                return EVENTRESULT_FILTER;
            }
        }

        module ClearAll
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                PleaseWait.begin(context);
                GAME_STATUS.user_profile.game_flags.setFlag("INTRODUCTION", "DLC", false);
                GLOBAL_STATUS.user_profile.entitlement.clear();

                var list = [
                    "spa",
                    "spa_wet",
                    "newindoorkart",
                    "newindoorkart_short",
                    "r_newindoorkart",
                    "r_newindoorkart_short",
                    "routex_oval",
                    "motegi",
                    "motegi_east",
                    "motegi_west",
                    "motegi_super_speedway",
                ];

                foreach (var course in list)
                    GAME_STATUS.user_profile.game_flags.setFlag("COURSE_AVAILABLE", course, false);

                KeyValueUtil::deleteByCategory("dlc");
                PleaseWait.end(context);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module Buttons::CancelOK::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            DLCDetail.hide(context);

            return EVENTRESULT_FILTER;
        }
    }
}

//////////////////////////////////
// PATCH 2.06 CAR HANDLING
//////////////////////////////////
module DebugMenuPopup::Template::ScrolledWindow::clip::space::Patch206::Exec
{
    method onActivate(context)
    {
        main::sound.play("ok");
        Patch206Detail.show(context);

        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Patch206Detail
{
    attribute new_car_list = [
        "leaf_g_11_ac",
        "s15_silvia_specr_aero_02_ac",
        "r32_gtr_v2_94_ac",
        "_370z_08_eu",
        "r34_gtr_v2_nur_02_ac",
        "gtr_black_12_ac",
        "_370z_08_t_eu_ac_12",
        "gtr_black_12_t_ac",
        "fr_s_12",
    ];

    attribute fixed_car_list = [
        "arta_garaiya_03",
        "clio_sport_race_00",
        "lancer_evo_gsr_92",
        "lancer_evo2_gsr_94",
        "lancer_evo3_gsr_95",
        "m3_gtr_alms_01",
        "dmc12_stage2_04",
        "gathers_civic_98",
        "xj220_gt_race_92",
        "xj220_gt_road_92",
        "impreza_lm_race_00",
        "levin_gt_apex_83",
        "trueno_gt_apex_83",
        "trueno_gt_apex_shigeno_00",
        "r31_skyline_gtsr_87",
        "_2000_gt_67",
        "life_step_van_72",
        "camaro_z28_coupe_97",
        "camaro_ss_00",
        "crossfire_04",
        "gt_by_citroen_road_xx",
        "aventador_lp700_4_11",
        "r32_gtr_v2_94_rm",
        "golf_r_10",
        "epson_nsx_08",
        "nascar_camry_18_10",
        "blitz_dunlop_er34_07",
        "toyota_86_12",
        "rx7_gtx_90",
        "amemiya_aspara_rx7_06",
        "ford_gt_06",
        "golf_gti_5dr_01",
        "_430_scuderia_07",
        "_370z_08_t_eu",
        "impreza_wrx_sti_c_ra_05",
        "amemiya_fd3s_rx7_xx",
        "prius_g_09",
        "s15_silvia_specr_aero_02",
    ];

    method show(context)
    {
        self.visible = true;
        ROOT::Template.insensitive = true;
        ROOT.setFocus(self.Buttons::CancelOK::OK);
    }

    method hide(context)
    {
        self.visible = false;
        ROOT.setFocus(ROOT::Template::ScrolledWindow::clip::space::Patch206::Exec);
        ROOT::Template.insensitive = false;
    }

    method onInitialize(context)
    {
        VBox::NewCar1::TextFace0.text = context.translate(ROOT, "FORMAT_ADD_NEW_CAR").build(self.new_car_list.size);
        VBox::FixedCar1::TextFace0.text = context.translate(ROOT, "FORMAT_ADD_FIXED_CAR").build(self.fixed_car_list.size);
        VBox::GTAcademyPresentCar::TextFace0.text = context.translate(ROOT, "FORMAT_ADD_GTA_PRESENTCAR_TICKET").build(self.new_car_list.size);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        self.hide(context);
        return EVENTRESULT_FILTER;
    }

    function exec(args, progress)
    {
        |var car_label_list, var color| = args;
        var sqlite = GlobalStatus::getSqlite();
        sqlite.begin();

        for (var i = 0; i < car_label_list.size; ++i)
        {
            progress.value = i.toFloat() / car_label_list.size;
            var car_label = car_label_list[car_label_list.size - i - 1];
            var car_code = main::gtengine::MSpecDB::getCarCode(car_label);
            var color_list = [];

            if (color == "All")
            {
                var variation = gtengine::MSpecDB::getCarVariation(car_code);
                for (var j = 0; j < variation; ++j)
                    color_list.push(variation - i - 1);
            }
            else
            {
                color_list.push(gtengine::MSpecDB::getCarVariationFlag(car_code, 1));
            }

            var cp = gtengine::MCarParameter(car_code);
            foreach (var color in color_list)
            {
                cp.color = color;
                GAME_STATUS.user_profile.garage.addCar(cp);
            }
        }

        sqlite.commit();
        progress.value = 1.0;
    }

    function addToGarage(context, car_label_list, all_color)
    {
        var car_list = [];
        foreach (var car_label in car_label_list)
            car_list.push(gtengine::MSpecDB::getCarShortName(car_label));

        var car_list_text = "";
        if (car_label_list.size <= 15)
            car_list_text = car_list.join("\n");
        else
        {
            var col = 3;
            for (var i = 0; i < (car_list.size + col - 1) / col; ++i)
            {
                for (var j = 0; j < col; ++j)
                {
                    var index = col * i + j;
                    if (index > car_list.size - 1)
                        break;

                    car_list_text += car_list[index];
                    car_list_text += ", ";
                }

                car_list_text += "\n";
            }
        }

        var text = context.translate(ROOT, "DO_YOU_ADD_GARAGE");
        text += "\n\n%s\n\n%s".format(context.translate(ROOT, all_color ? "ALL" : "REPRESENTATIVE_COLOR"), car_list_text);

        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, text);
        if (!res)
            return;

        var _color = all_color ? "All" : "Representative";

        var data = ROOT::Template::ScrolledWindow::clip::space::InsertCarsIntoGarage::Exec::InsertProgress(exec, [car_label_list, _color]);
        DialogUtil::setProgressOKButton(context);
        UIKitProject::ProgressRoot.open(context, [data]);
    }

    module VBox
    {
        module NewCar1
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch206Detail::new_car_list, false);
                return EVENTRESULT_FILTER;
            }
        }

        module NewCarAllColor
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch206Detail::new_car_list, true);
                return EVENTRESULT_FILTER;
            }
        }

        module FixedCar1
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch206Detail::fixed_car_list, false);
                return EVENTRESULT_FILTER;
            }
        }

        module FixedCarAllColor
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch206Detail::fixed_car_list, true);
                return EVENTRESULT_FILTER;
            }
        }

        module GTAcademyPresentCar
        {
            method onActivate(context)
            {
                PleaseWait.begin(context);

                var item_list = Array();
                foreach (var car_code in new_car_list)
                {
                    var car_ticket = GameItemUtil::getItemByID(266);
                    car_ticket.code = car_code;
                    car_ticket.argument1 = gtengine::MSpecDB::getCarVariationFlag(car_code, 1);

                    GameItemUtil::onNotPresentFlag(car_ticket);
                    item_list.push(car_ticket);
                }

                GameItemUtil::ItemBox::insertItemList(item_list);
                PleaseWait.end(context);
                return EVENTRESULT_FILTER;
            }
        }

        module GTAcademySpecialWear
        {
            method onActivate(context)
            {
                PleaseWait.begin(context);

                var item_list = Array();
                var special_wear = GameItemUtil::getItemByID(402);
                GameItemUtil::onNotPresentFlag(special_wear);
                item_list.push(special_wear);
                GameItemUtil::ItemBox::insertItemList(item_list);
            
                PleaseWait.end(context);
                return EVENTRESULT_FILTER;
            }
        }

        module ClassTicketLevel0
        {
            method onActivate(context)
            {
                PleaseWait.begin(context);

                var ticket_list = Array();
                ticket_list.push(GameItemUtil::getItemByCode("presentcar_ticket_lv0"));
                GameItemUtil::ItemBox::insertItemList(ticket_list);

                PleaseWait.end(context);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module Buttons::CancelOK::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            Patch206Detail.hide(context);
            return EVENTRESULT_FILTER;
        }
    }
}

//////////////////////////////////
// PATCH 2.08 CAR HANDLING
//////////////////////////////////
module DebugMenuPopup::Template::ScrolledWindow::clip::space::Patch208::Exec
{
    method onActivate(context)
    {
        main::sound.play("ok");
        Patch208Detail.show(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Patch208Detail
{
    attribute new_car_list = [
        "brz_s_12",
        "weider_hsv_010_11",
        "gtr_n24_gta_12",
        "x2010_5g_12",
    ];

    attribute fixed_car_list = [
        "r10_tdi_06",
        "r10_tdi_06_cf",
        "f430_f1_06",
        "mines_r34_n1_base_06",
        "mini_cooper_s_07",
        "megane_renaultsport_08",
        "_2cv_typea_54",
        "xantia_30i_v6_exclusive_00",
        "xsara_vtr_03",
        "accord_euror_00",
        "element_03",
        "today_g_85",
        "hcd6_concept_01",
        "xkr_coupe_99",
        "xkr_rperform_02",
        "amemiya_aspara_rx7_04",
        "murao_rx7_03",
        "axela_23s_at_03",
        "airtrek_turbo_02",
        "lancer_evo8_gsr_03",
        "lancer_evo8_rs_03",
        "r34_gtr_rtune_99",
        "r32_gtr_stune_00",
        "r32_skyline_gtr_89",
        "r32_skyline_gtr_91",
        "r32_skyline_gtr_n1_91",
        "r32_skyline_gtr_v_n1_93",
        "r32_skyline_gtr_v_93",
        "r32_gtr_v2_94_std",
        "altoworks_rsz_97",
        "_2000_gt_67",
        "celica_2000gt_four_86",
        "celica_2000gt_r_86",
        "epson_nsx_08_cf",
        "lupo_14_02",
        "skyline_2000gtb_67",
        "murao_rx7_03",
    ];

    method show(context)
    {
        self.visible = true;
        ROOT::Template.insensitive = true;
        ROOT.setFocus(self.Buttons::CancelOK::OK);
    }

    method hide(context)
    {
        self.visible = false;
        ROOT.setFocus(ROOT::Template::ScrolledWindow::clip::space::Patch208::Exec);
        ROOT::Template.insensitive = false;
    }

    method onInitialize(context)
    {
        VBox::NewCar1::TextFace0.text = context.translate(ROOT, "FORMAT_ADD_NEW_CAR").build(self.new_car_list.size);
        VBox::FixedCar1::TextFace0.text = context.translate(ROOT, "FORMAT_ADD_FIXED_CAR").build(self.fixed_car_list.size);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        self.hide(context);
        return EVENTRESULT_FILTER;
    }

    function exec(args, progress)
    {
        |var car_label_list, var color| = args;
        var sqlite = GlobalStatus::getSqlite();
        sqlite.begin();

        for (var i = 0; i < car_label_list.size; ++i)
        {
            progress.value = i.toFloat() / car_label_list.size;
            var car_label = car_label_list[car_label_list.size - i - 1];
            var car_code = main::gtengine::MSpecDB::getCarCode(car_label);
            var color_list = [];

            if (color == "All")
            {
                var variation = gtengine::MSpecDB::getCarVariation(car_code);
                for (var j = 0; j < variation; ++j)
                    color_list.push(variation - i - 1);
            }
            else
            {
                color_list.push(gtengine::MSpecDB::getCarVariationFlag(car_code, 1));
            }

            var cp = gtengine::MCarParameter(car_code);
            foreach (var color in color_list)
            {
                cp.color = color;
                GAME_STATUS.user_profile.garage.addCar(cp);
            }
        }

        sqlite.commit();
        progress.value = 1.0;
    }

    function addToGarage(context, car_label_list, all_color)
    {
        var car_list = [];
        foreach (var car_label in car_label_list)
            car_list.push(gtengine::MSpecDB::getCarShortName(car_label));

        var car_list_text = "";
        if (car_label_list.size <= 15)
            car_list_text = car_list.join("\n");
        else
        {
            var col = 3;
            for (var i = 0; i < (car_list.size + col - 1) / col; ++i)
            {
                for (var j = 0; j < col; ++j)
                {
                    var index = col * i + j;
                    if (index > car_list.size - 1)
                        break;
    
                    car_list_text += car_list[index];
                    car_list_text += ", ";
                }
    
                car_list_text += "\n";
            }
        }

        var text = context.translate(ROOT, "DO_YOU_ADD_GARAGE");
        text += "\n\n%s\n\n%s".format(context.translate(ROOT, all_color ? "ALL" : "REPRESENTATIVE_COLOR"), car_list_text);

        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, text);
        if (!res)
            return;

        var _color = all_color ? "All" : "Representative";

        var data = ROOT::Template::ScrolledWindow::clip::space::InsertCarsIntoGarage::Exec::InsertProgress(exec, [car_label_list, _color]);
        DialogUtil::setProgressOKButton(context);
        UIKitProject::ProgressRoot.open(context, [data]);
    }

    module VBox
    {
        module NewCar1
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch208Detail::new_car_list, false);
                return EVENTRESULT_FILTER;
            }
        }

        module NewCarAllColor
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch208Detail::new_car_list, true);
                return EVENTRESULT_FILTER;
            }
        }

        module FixedCar1
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch208Detail::fixed_car_list, false);
                return EVENTRESULT_FILTER;
            }
        }

        module FixedCarAllColor
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch208Detail::fixed_car_list, true);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module Buttons::CancelOK::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            Patch208Detail.hide(context);
            return EVENTRESULT_FILTER;
        }

    }
}

//////////////////////////////////
// PATCH 2.09 CAR HANDLING
//////////////////////////////////
module DebugMenuPopup::Template::ScrolledWindow::clip::space::Patch209::Exec
{
    method onActivate(context)
    {
        main::sound.play("ok");
        Patch209Detail.show(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Patch209Detail
{
    attribute new_car_list = [
        "corvette_c7_proto_13_bm_un",
        "corvette_c7_proto_13_bm",
        "x2010_5g_12_dl",
        "x2010_5g_12_fin",
    ];

    attribute fixed_car_list = [
        "s2000_eu_03",
        "zonda_r_09",
        "brz_s_12",
        "weider_hsv_010_11",
        "prius_g_09",
    ];

    method show(context)
    {
        self.visible = true;
        ROOT::Template.insensitive = true;
        ROOT.setFocus(self.Buttons::CancelOK::OK);
    }

    method hide(context)
    {
        self.visible = false;
        ROOT.setFocus(ROOT::Template::ScrolledWindow::clip::space::Patch209::Exec);
        ROOT::Template.insensitive = false;
    }

    method onInitialize(context)
    {
        VBox::NewCar1::TextFace0.text = context.translate(ROOT, "FORMAT_ADD_NEW_CAR").build(self.new_car_list.size);
        VBox::FixedCar1::TextFace0.text = context.translate(ROOT, "FORMAT_ADD_FIXED_CAR").build(self.fixed_car_list.size);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        self.hide(context);
        return EVENTRESULT_FILTER;
    }

    function exec(args, progress)
    {
        |var car_label_list, var color| = args;
        var sqlite = GlobalStatus::getSqlite();
        sqlite.begin();

        for (var i = 0; i < car_label_list.size; ++i)
        {
            progress.value = i.toFloat() / car_label_list.size;
            var car_label = car_label_list[car_label_list.size - i - 1];
            var car_code = main::gtengine::MSpecDB::getCarCode(car_label);
            var color_list = [];

            if (color == "All")
            {
                var variation = gtengine::MSpecDB::getCarVariation(car_code);
                for (var j = 0; j < variation; ++j)
                    color_list.push(variation - i - 1);
            }
            else
            {
                color_list.push(gtengine::MSpecDB::getCarVariationFlag(car_code, 1));
            }

            var cp = gtengine::MCarParameter(car_code);
            foreach (var color in color_list)
            {
                cp.color = color;
                GAME_STATUS.user_profile.garage.addCar(cp);
            }
        }

        sqlite.commit();
        progress.value = 1.0;
    }

    function addToGarage(context, car_label_list, all_color)
    {
        var car_list = [];
        foreach (var car_label in car_label_list)
            car_list.push(gtengine::MSpecDB::getCarShortName(car_label));

        var car_list_text = "";
        if (car_label_list.size <= 15)
            car_list_text = car_list.join("\n");
        else
        {
            var col = 3;
            for (var i = 0; i < (car_list.size + col - 1) / col; ++i)
            {
                for (var j = 0; j < col; ++j)
                {
                    var index = col * i + j;
                    if (index > car_list.size - 1)
                        break;
    
                    car_list_text += car_list[index];
                    car_list_text += ", ";
                }
    
                car_list_text += "\n";
            }
        }

        var text = context.translate(ROOT, "DO_YOU_ADD_GARAGE");
        text += "\n\n%s\n\n%s".format(context.translate(ROOT, all_color ? "ALL" : "REPRESENTATIVE_COLOR"), car_list_text);

        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, text);
        if (!res)
            return;

        var _color = all_color ? "All" : "Representative";

        var data = ROOT::Template::ScrolledWindow::clip::space::InsertCarsIntoGarage::Exec::InsertProgress(exec, [car_label_list, _color]);
        DialogUtil::setProgressOKButton(context);
        UIKitProject::ProgressRoot.open(context, [data]);
    }

    module VBox
    {
        module NewCar1
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch209Detail::new_car_list, false);
                return EVENTRESULT_FILTER;
            }
        }

        module NewCarAllColor
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch209Detail::new_car_list, true);
                return EVENTRESULT_FILTER;
            }
        }

        module FixedCar1
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch209Detail::fixed_car_list, false);
                return EVENTRESULT_FILTER;
            }
        }

        module FixedCarAllColor
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch209Detail::fixed_car_list, true);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module Buttons::CancelOK::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            Patch209Detail.hide(context);
            return EVENTRESULT_FILTER;
        }
        
    }
}

//////////////////////////////////
// PATCH 2.10 CAR HANDLING
//////////////////////////////////
module DebugMenuPopup::Template::ScrolledWindow::clip::space::Patch210::Exec
{
    method onActivate(context)
    {
        main::sound.play("ok");
        Patch210Detail.show(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Patch210Detail
{
    attribute new_car_list = [
        "corvette_c7_proto_13",
    ];

    attribute fixed_car_list = [
        "xkr_coupe_10",
        "megane_renaultsport_08",
    ];

    method show(context)
    {
        self.visible = true;
        ROOT::Template.insensitive = true;
        ROOT.setFocus(self.Buttons::CancelOK::OK);
    }

    method hide(context)
    {
        self.visible = false;
        ROOT.setFocus(ROOT::Template::ScrolledWindow::clip::space::Patch210::Exec);
        ROOT::Template.insensitive = false;
    }

    method onInitialize(context)
    {
        VBox::NewCar1::TextFace0.text = context.translate(ROOT, "FORMAT_ADD_NEW_CAR").build(self.new_car_list.size);
        VBox::FixedCar1::TextFace0.text = context.translate(ROOT, "FORMAT_ADD_FIXED_CAR").build(self.fixed_car_list.size);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        self.hide(context);
        return EVENTRESULT_FILTER;
    }

    function exec(args, progress)
    {
        |var car_label_list, var color| = args;
        var sqlite = GlobalStatus::getSqlite();
        sqlite.begin();

        for (var i = 0; i < car_label_list.size; ++i)
        {
            progress.value = i.toFloat() / car_label_list.size;
            var car_label = car_label_list[car_label_list.size - i - 1];
            var car_code = main::gtengine::MSpecDB::getCarCode(car_label);
            var color_list = [];

            if (color == "All")
            {
                var variation = gtengine::MSpecDB::getCarVariation(car_code);
                for (var j = 0; j < variation; ++j)
                    color_list.push(variation - i - 1);
            }
            else
            {
                color_list.push(gtengine::MSpecDB::getCarVariationFlag(car_code, 1));
            }

            var cp = gtengine::MCarParameter(car_code);
            foreach (var color in color_list)
            {
                cp.color = color;
                GAME_STATUS.user_profile.garage.addCar(cp);
            }
        }

        sqlite.commit();
        progress.value = 1.0;
    }

    function addToGarage(context, car_label_list, all_color)
    {
        var car_list = [];
        foreach (var car_label in car_label_list)
            car_list.push(gtengine::MSpecDB::getCarShortName(car_label));

        var car_list_text = "";
        if (car_label_list.size <= 15)
            car_list_text = car_list.join("\n");
        else
        {
            var col = 3;
            for (var i = 0; i < (car_list.size + col - 1) / col; ++i)
            {
                for (var j = 0; j < col; ++j)
                {
                    var index = col * i + j;
                    if (index > car_list.size - 1)
                        break;
    
                    car_list_text += car_list[index];
                    car_list_text += ", ";
                }
    
                car_list_text += "\n";
            }
        }

        var text = context.translate(ROOT, "DO_YOU_ADD_GARAGE");
        text += "\n\n%s\n\n%s".format(context.translate(ROOT, all_color ? "ALL" : "REPRESENTATIVE_COLOR"), car_list_text);

        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, text);
        if (!res)
            return;

        var _color = all_color ? "All" : "Representative";

        var data = ROOT::Template::ScrolledWindow::clip::space::InsertCarsIntoGarage::Exec::InsertProgress(exec, [car_label_list, _color]);
        DialogUtil::setProgressOKButton(context);
        UIKitProject::ProgressRoot.open(context, [data]);
    }

    module VBox
    {
        module NewCar1
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch210Detail::new_car_list, false);
                return EVENTRESULT_FILTER;
            }
        }

        module NewCarAllColor
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch210Detail::new_car_list, true);
                return EVENTRESULT_FILTER;
            }
        }

        module FixedCar1
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch210Detail::fixed_car_list, false);
                return EVENTRESULT_FILTER;
            }
        }

        module FixedCarAllColor
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch210Detail::fixed_car_list, true);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module Buttons::CancelOK::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            Patch210Detail.hide(context);
            return EVENTRESULT_FILTER;
        }
    }
}

//////////////////////////////////
// PATCH 2.11 CAR HANDLING
//////////////////////////////////
module DebugMenuPopup::Template::ScrolledWindow::clip::space::Patch211::Exec
{
    method onActivate(context)
    {
        main::sound.play("ok");
        Patch211Detail.show(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Patch211Detail
{
    attribute new_car_list = [];

    attribute fixed_car_list = [
        "yellowhat_yms_supra_05",
        "gtg_70_mustang_trans_cammer_xx",
    ];

    method show(context)
    {
        self.visible = true;
        ROOT::Template.insensitive = true;
        ROOT.setFocus(self.Buttons::CancelOK::OK);
    }

    method hide(context)
    {
        self.visible = false;
        ROOT.setFocus(ROOT::Template::ScrolledWindow::clip::space::Patch210::Exec);
        ROOT::Template.insensitive = false;
    }

    method onInitialize(context)
    {
        VBox::FixedCar1::TextFace0.text = context.translate(ROOT, "FORMAT_ADD_FIXED_CAR").build(self.fixed_car_list.size);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        self.hide(context);
        return EVENTRESULT_FILTER;
    }

    function exec(args, progress)
    {
        |var car_label_list, var color| = args;
        var sqlite = GlobalStatus::getSqlite();
        sqlite.begin();

        for (var i = 0; i < car_label_list.size; ++i)
        {
            progress.value = i.toFloat() / car_label_list.size;
            var car_label = car_label_list[car_label_list.size - i - 1];
            var car_code = main::gtengine::MSpecDB::getCarCode(car_label);
            var color_list = [];

            if (color == "All")
            {
                var variation = gtengine::MSpecDB::getCarVariation(car_code);
                for (var j = 0; j < variation; ++j)
                    color_list.push(variation - i - 1);
            }
            else
            {
                color_list.push(gtengine::MSpecDB::getCarVariationFlag(car_code, 1));
            }

            var cp = gtengine::MCarParameter(car_code);
            foreach (var color in color_list)
            {
                cp.color = color;
                GAME_STATUS.user_profile.garage.addCar(cp);
            }
        }

        sqlite.commit();
        progress.value = 1.0;
    }

    function addToGarage(context, car_label_list, all_color)
    {
        var car_list = [];
        foreach (var car_label in car_label_list)
            car_list.push(gtengine::MSpecDB::getCarShortName(car_label));

        var car_list_text = "";
        if (car_label_list.size <= 15)
            car_list_text = car_list.join("\n");
        else
        {
            var col = 3;
            for (var i = 0; i < (car_list.size + col - 1) / col; ++i)
            {
                for (var j = 0; j < col; ++j)
                {
                    var index = col * i + j;
                    if (index > car_list.size - 1)
                        break;
    
                    car_list_text += car_list[index];
                    car_list_text += ", ";
                }
    
                car_list_text += "\n";
            }
        }

        var text = context.translate(ROOT, "DO_YOU_ADD_GARAGE");
        text += "\n\n%s\n\n%s".format(context.translate(ROOT, all_color ? "ALL" : "REPRESENTATIVE_COLOR"), car_list_text);

        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, text);
        if (!res)
            return;

        var _color = all_color ? "All" : "Representative";

        var data = ROOT::Template::ScrolledWindow::clip::space::InsertCarsIntoGarage::Exec::InsertProgress(exec, [car_label_list, _color]);
        DialogUtil::setProgressOKButton(context);
        UIKitProject::ProgressRoot.open(context, [data]);
    }

    module VBox
    {
        module FixedCar1
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch211Detail::fixed_car_list, false);
                return EVENTRESULT_FILTER;
            }
        }

        module FixedCarAllColor
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                addToGarage(context, Patch211Detail::fixed_car_list, true);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module Buttons::CancelOK::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            Patch211Detail.hide(context);
            return EVENTRESULT_FILTER;
        }
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::LoginBonusGetNum::slider
{
    method initialize(context)
    {
        var user_profile = main::GAME_STATUS.user_profile;
        var loginbonus_get_num = ROOT.loginbonus_get_num;

        Template::ScrolledWindow::clip::space::LoginBonusGetNum::slider.format_function = function(value, scale, range, format, zero_text) {
            var num = value;
            return "%d".format(num);
        };

        Template::ScrolledWindow::clip::space::LoginBonusGetNum::slider.range = [5, 9];
        Template::ScrolledWindow::clip::space::LoginBonusGetNum::slider.index = loginbonus_get_num;
        Template::ScrolledWindow::clip::space::LoginBonusGetNum::slider.setup(context, 1);
    }

    method onPopupClosed(context)
    {
        if (self.initialized != nil)
        {
            ROOT.loginbonus_get_num = self.index;
            Template::ScrolledWindow::clip::space::LoginBonusGetNum::slider.initialize(context);
            self.sliderPopupClosed(context);
        }
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::LastLoginSlide::slider
{
    method initialize(context)
    {
        var lastlogin_slide_days = ROOT.lastlogin_slide_days;

        Template::ScrolledWindow::clip::space::LastLoginSlide::slider.format_function = function(value, scale, range, format, zero_text) {
            var num = value;
            return "%d".format(num);
        };

        Template::ScrolledWindow::clip::space::LastLoginSlide::slider.range = [-5, 1];
        Template::ScrolledWindow::clip::space::LastLoginSlide::slider.index = lastlogin_slide_days;
        Template::ScrolledWindow::clip::space::LastLoginSlide::slider.setup(context, 1);
    }

    method onPopupClosed(context)
    {
        if (self.initialized != nil)
        {
            ROOT.lastlogin_slide_days = self.index;
            Template::ScrolledWindow::clip::space::LastLoginSlide::slider.initialize(context);
            self.sliderPopupClosed(context);
        }
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::ItemAllDelete::Exec
{
    method onActivate(context)
    {
        PleaseWait.begin(context);

        GameItemUtil::ItemBox::deleteAll();

        PleaseWait.end(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::SpecialTicketAdd::Exec
{
    method onActivate(context)
    {
        var ticket_list = Array();

        PleaseWait.begin(context);
        
        ticket_list.push(GameItemUtil::getCarRefreshTicket());
        ticket_list.push(GameItemUtil::getBodyRefreshTicket());
        ticket_list.push(GameItemUtil::getOilChangeTicket());
        ticket_list.push(GameItemUtil::getCarWashTicket());
        ticket_list.push(GameItemUtil::getOverHaulicket());
        GameItemUtil::ItemBox::insertItemList(ticket_list);

        PleaseWait.end(context);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::Template::ScrolledWindow::clip::space::AsianChampionship::Exec
{
    function exec(args, progress)
    {
        |var context| = args;
        progress.value = 0.0;

        main::sound.play("next");

        var cars = [
            "_370z_08_eu",
            "s15_silvia_specr_aero_02_ac",
            "_370z_08_t_eu_ac_12",
            "gtr_specv_09_rm",
        ];

        var paintIDs = [
            1462,
            3326,
            1499,
            2893,
            2029,
            1610,
            871,
            811
        ];

        SceneFaceForCapture.visible = true;

        for (var i = 0; i < cars.size; i++)
        {
            progress.value = i.toFloat() / paintIDs.size;
            var car = cars[i];

            var cp = gtengine::MCarParameter(gtengine::MSpecDB::getCarCode(car));
            for (var ii = 0; ii < paintIDs.size; ii++)
            {
                var paintID = paintIDs[ii];
                cp.setPaintColor(0, paintID);
                var garage_id = GAME_STATUS.user_profile.garage.addCar(cp);
            }
        }

        SceneFaceForCapture.visible = false;
        progress.value = 1.0;
    }

    method onActivate(context)
    {
        var data = Template::ScrolledWindow::clip::space::InsertCarsIntoGarage::Exec::InsertProgress(exec, [context]);
        DialogUtil::setProgressOKButton(context);
        UIKitProject::ProgressRoot.open(context, [data]);
        return EVENTRESULT_FILTER;
    }
}

module DebugMenuPopup::PleaseWait
{
    attribute counter_thread;
    attribute counter;

    method onInitialize(context)
    {
        counter = 0;

        PleaseWait::FadeEffect.reverse = true;
        PleaseWait::FadeEffect.start();
        PleaseWait::FadeEffect.warp();
    }

    method begin(context)
    {
        main::sound.play("ok");

        TextFace.text = context.translate(ROOT, "OptionProject::DebugOptionRoot", "Wait");

        PleaseWait::FadeEffect.reverse = false;
        PleaseWait::FadeEffect.start();
        TextFace::ColorInterpolator.restart();

        counter_thread = Thread(tick);
        counter_thread.start();

        counter = 0;
    }

    method end(context)
    {
        while (counter < 15)
            yield;

        if (counter_thread != nil)
        {
            counter_thread.terminate();
            counter_thread = nil;
        }

        TextFace::ColorInterpolator.reset();
        TextFace.text = context.translate(ROOT, "DialogProject::ConfirmExecDialog", "Done");

        main::sound.play("next");

        context.sync(1.2);
        counter = 0;

        PleaseWait::FadeEffect.reverse = true;
        PleaseWait::FadeEffect.start();
    }

    method tick()
    {
        for (;;)
        {
            counter++;
            Thread::Sleep(0.1);
        }

    }
}