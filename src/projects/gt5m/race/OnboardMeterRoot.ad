//---------------------------------------------------------------------------------------
// OnboardMeterRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module OnboardMeterRoot
{
    static sMAP_Race_path = "piece_gt5/mcourse_map_race/";
    static sMAP_License_path = "piece_gt5m/license_course_map_menu/";

    if (main::GlobalStatus::game_context.is_theater)
    {
        PROJECT.load("/scripts/gt5m/util/LicenseUtil");
        PROJECT.load("/scripts/gt5m/util/OrdinalUtil");
    }

    static sColorList = [
        [255, 255, 255, 255],
        [0, 0, 0, 255],
        [255, 0, 0, 255],
        [70, 220, 220, 255],
        [170, 210, 225, 255],
        [40, 40, 40, 128],
        [255, 156, 0, 255],
        [100, 100, 100, 255]
    ];

    static sUVlist = [
        [192, 128, 48, -1],


        [0, 0, 25, 25],
        [26, 0, 25, 25],
        [52, 0, 25, 25],
        [78, 0, 25, 25],
        [104, 0, 25, 25],
        [0, 26, 25, 25],
        [26, 26, 25, 25],
        [52, 26, 25, 25],
        [78, 26, 25, 25],
        [104, 26, 25, 25],


        [128, 32, 49, -2],
        [0, 0, 26, 29],
        [26, 0, 26, 29],
        [52, 0, 26, 29],
        [78, 0, 26, 29],


        [160, 56, 39, -3],
        [154, 0, 4, 27],
        [130, 28, 7, 27],
        [138, 28, 7, 27],
        [120, 28, 8, 27],
        [66, 28, 16, 27],
        [114, 28, 5, 27],
        [84, 28, 10, 27],
        [108, 28, 5, 27],
        [146, 28, 12, 27],
        [0, 0, 20, 27],
        [22, 0, 20, 27],
        [44, 0, 20, 27],
        [66, 0, 20, 27],
        [88, 0, 20, 27],
        [110, 0, 20, 27],
        [132, 0, 20, 27],
        [0, 28, 20, 27],
        [22, 28, 20, 27],
        [44, 28, 20, 27],
        [96, 28, 4, 27],
        [102, 28, 4, 27],


        [192, 128, 48, -4],
        [0, 52, 13, 18],
        [14, 52, 13, 18],
        [28, 52, 13, 18],
        [42, 52, 13, 18],
        [56, 52, 13, 18],
        [70, 52, 13, 18],
        [84, 52, 13, 18],
        [98, 52, 13, 18],
        [112, 52, 13, 18],
        [0, 72, 13, 18],
        [14, 72, 13, 18],
        [28, 72, 13, 18],
        [42, 72, 13, 18],


        [192, 128, 33, -5],
        [0, 92, 5, 10],
        [6, 92, 5, 10],
        [12, 92, 5, 10],
        [18, 92, 5, 10],
        [24, 92, 5, 10],
        [30, 92, 5, 10],
        [36, 92, 5, 10],
        [42, 92, 5, 10],
        [48, 92, 5, 10],
        [54, 92, 5, 10],
        [60, 92, 5, 10],
        [66, 92, 5, 10],
        [72, 92, 5, 10],
        [78, 92, 5, 10],
        [84, 92, 5, 10],
        [90, 92, 5, 10],
        [96, 92, 5, 10],
        [102, 92, 5, 10],
        [108, 92, 5, 10],
        [114, 92, 5, 10],
        [120, 92, 5, 10],
        [126, 92, 5, 10],
        [132, 92, 5, 10],
        [138, 92, 5, 10],
        [144, 92, 5, 10],
        [0, 104, 5, 10],
        [6, 104, 5, 10],
        [12, 104, 5, 10],
        [18, 104, 5, 10],
        [24, 104, 5, 10],
        [30, 104, 5, 10],
        [36, 104, 5, 10],
        [42, 104, 5, 10],
        [48, 104, 5, 10],
        [54, 104, 5, 10],
        [60, 104, 5, 10],
        [66, 104, 5, 10],
        [72, 104, 5, 10],
        [78, 104, 5, 10],
        [84, 104, 5, 10],
        [90, 104, 5, 10],
        [96, 104, 5, 10],
        [102, 104, 5, 10],
        [108, 104, 5, 10],
        [114, 104, 5, 10],
        [120, 104, 5, 10],
        [126, 104, 5, 10],
        [132, 104, 5, 10],
        [138, 104, 5, 10],
        [144, 104, 5, 10],
        [0, 116, 5, 10],
        [6, 116, 5, 10],
        [12, 116, 5, 10],
        [18, 116, 5, 10],
        [24, 116, 5, 10],
        [30, 116, 5, 10],
        [36, 116, 5, 10],
        [42, 116, 5, 10],
        [48, 116, 5, 10],
        [54, 116, 5, 10],
        [60, 116, 5, 10],
        [66, 116, 5, 10],
        [72, 116, 5, 10],
        [78, 116, 5, 10],
        [84, 116, 5, 10],
        [90, 116, 5, 10],
        [96, 116, 5, 10],
        [102, 116, 5, 10],
        [108, 116, 5, 10],
        [114, 116, 5, 10],
        [120, 116, 5, 10],
        [126, 116, 5, 10],
        [132, 116, 5, 10],
        [138, 116, 5, 10],
        [144, 116, 5, 10],
        [150, 92, 5, 10],
        [156, 92, 5, 10],
        [162, 92, 5, 10],
        [168, 92, 5, 10],
        [174, 92, 5, 10],
        [180, 92, 5, 10],
        [186, 92, 5, 10],
        [150, 104, 5, 10],
        [156, 104, 5, 10],
        [162, 104, 5, 10],
        [168, 104, 5, 10],
        [174, 104, 5, 10],
        [180, 104, 5, 10],
        [186, 104, 5, 10],
        [150, 116, 5, 10],
        [156, 116, 5, 10],
        [162, 116, 5, 10],
        [168, 116, 5, 10],
        [174, 116, 5, 10],


        [192, 128, 39, -6],
        [140, 54, 5, 16],
        [146, 54, 6, 16],
        [154, 54, 6, 16],
        [172, 54, 16, 16],
        [132, 72, 9, 16],
        [180, 36, 4, 16],
        [142, 72, 9, 16],
        [186, 36, 4, 16],
        [162, 54, 8, 16],
        [132, 0, 11, 16],
        [144, 0, 11, 16],
        [156, 0, 11, 16],
        [168, 0, 11, 16],
        [180, 0, 11, 16],
        [132, 18, 11, 16],
        [144, 18, 11, 16],
        [156, 18, 11, 16],
        [168, 18, 11, 16],
        [180, 18, 11, 16],
        [174, 36, 4, 16],
        [168, 36, 4, 16],
        [132, 54, 7, 16],
        [0, 0, 0, 0],
        [132, 36, 11, 16],
        [144, 36, 11, 16],
        [156, 36, 11, 16]
    ];

    method onInitialize(context)
    {
        RenderControl.begin(main::ORG);

        disqualifyVisible(true);

        Footer::Prize.visible = false;

        if (gSequenceCondition.game_mode == main::gtengine::GameMode::TIME_ATTACK)
        {
            var A = MyRecord::Last;
            if (A["Last0"] == nil)
            {
                var B = A.Last.doCopy(); A.appendChild(context, B); B.y = 33;
                var C = A.Last.doCopy(); A.appendChild(context, C); C.y = 49;
                var D = A.Last.doCopy(); A.appendChild(context, D); D.y = 65;
            }

        }
        else if (gSequenceCondition.game_mode == main::gtengine::GameMode::DRIFT_ATTACK)
        {
            var A = ROOT.DriftFlag;
            if (A["ImageFace0"] == nil)
            {
                var B = A.ImageFace;
                var C = A.Flag;
                var bx = 0;
                for (var i = 0; i < 9; i++) 
                {
                    bx += 18;
                    var Y0 = B.doCopy(); A.appendChild(context, Y0); Y0.x = bx;
                    var Y1 = C.doCopy(); A.appendChild(context, Y1); Y1.x = bx;
                }
            }
        }
        else if (gSequenceCondition.game_mode == main::gtengine::GameMode::LICENSE) {}
        else
        {
            Footer::Prize.visible = true;
        }

        RaceDisplayFace.setCountdownOffset(100);

        var gc = main::ORG.getGameCondition();
        var eval_condition = gc.eval_condition;

        ClearTime::Gold::trophy.x = 22;
        ClearTime::Silver::trophy.x = 22;
        ClearTime::Bronze::trophy.x = 22;

        if (eval_condition != nil && eval_condition[0] == main::gtengine::EvalType::ORDER)
        {
            var data = eval_condition[1];
            var gold_data = data[0];
            var silver_data = data[1];
            var bronze_data = data[2];

            gold_data = OrdinalUtil::getOrdinalNumber(context, ROOT, gold_data.toInt());
            silver_data = OrdinalUtil::getOrdinalNumber(context, ROOT, silver_data.toInt());
            bronze_data = OrdinalUtil::getOrdinalNumber(context, ROOT, bronze_data.toInt());
            ClearTime::Gold::TextFace.text = gold_data;
            ClearTime::Silver::TextFace.text = silver_data;
            ClearTime::Bronze::TextFace.text = bronze_data;

            ClearTime::Gold::trophy.x = 22 + 44;
            ClearTime::Silver::trophy.x = 22 + 44;
            ClearTime::Bronze::trophy.x = 22 + 44;
        }

        if (eval_condition != nil && eval_condition[0] != main::gtengine::EvalType::NONE)
        {
            var index = LicenseUtil::GetIndexByLicenseId(main::GlobalStatus::game_context.license_id);
            var licenseresult = -1;
            if (index >= 0)
                licenseresult = gSequenceCondition.game_status.user_profile.record.licenses[index].result;

            if (licenseresult < 0)
            {
                ClearTime::Gold.insensitive = false;
                ClearTime::Silver.insensitive = false;
                ClearTime::Bronze.insensitive = false;
            }
            else
            {
                ClearTime::Gold.insensitive = licenseresult == LicenseUtil::PRIZE::GOLD ? true : false;
                ClearTime::Silver.insensitive = licenseresult <= LicenseUtil::PRIZE::SILVER ? true : false;
                ClearTime::Bronze.insensitive = licenseresult <= LicenseUtil::PRIZE::BRONZE ? true : false;
            }
        }

        var license_id = main::GlobalStatus::game_context.license_id;
        var load_path = "";

        if (license_id < 0)
        {
            var crs_code = getCurrentCourse();

            if (crs_code != main::gtengine::MSpecDB::NO_CODE64)
            {
                var course_label = main::gtengine::MSpecDB::getCourseLabel(crs_code);
                load_path = "piece_gt5m/course_map_race/" + course_label;
            }
        } 
        else 
        {
            var index = LicenseUtil::GetIndexByLicenseId(license_id);
            var category = LicenseUtil::GetCategory(index);

            load_path = "piece_gt5m/license_course_map_menu/" + "license_User%03d".format(license_id);
        }

        var CM = CourseMap::CourseMap;
        CM.image_path = load_path + ".img";
        CM.doInitialize(context);
        CM.adjustSize();

        var rewards = getQuickRaceRewards();
        RaceDisplayFace.beginN(ROOT, sUVlist, sColorList, load_path + ".bin", rewards);

        UserName.visible = false;
        UserName::JackCircle.visible = false;

        Footer::ScalarInterpolator.reverse = false;
        Footer::ScalarInterpolator.reset();
        Gear::ScalarInterpolator.reverse = false;
        Gear::ScalarInterpolator.reset();
    }

    method onFinalize(context)
    {
        RaceDisplayFace.end();

        RenderControl.end(main::ORG);
    }

    function onInitCourceMap(context, course_code)
    {
    }

    method getQuickRaceRewards()
    {
        var rewards = [0, 0, 0, 0];
        var reward = gSequenceCondition.event.reward;
        if (nil != reward && nil != reward.prize_table)
        {
            rewards = reward.prize_table;
        }

        return rewards;
    }

    method appearPanel(wait)
    {
        Footer.visible = Gear.visible = false;

        Footer::ScalarInterpolator.setEndDuration(0, wait);
        Footer::ScalarInterpolator.reverse = true;
        Footer::ScalarInterpolator.restart();

        Gear::ScalarInterpolator.setEndDuration(0, wait);
        Gear::ScalarInterpolator.reverse = true;
        Gear::ScalarInterpolator.restart();

        Footer.visible = Gear.visible = true;
    }

    method disappearPanel()
    {
        Footer::ScalarInterpolator.reverse = false;
        Gear::ScalarInterpolator.reverse = false;
        Footer::ScalarInterpolator.restart();
        Gear::ScalarInterpolator.restart();
    }

    method disqualify()
    {
        if (!gSequenceCondition.is_buffer_replay_mode)
        {
            RenderControl::VectorInterpolator.reverse = false;
            RenderControl::VectorInterpolator.restart();
            RenderControl::VectorInterpolator0.reverse = false;
            RenderControl::VectorInterpolator0.restart();
        }

        DisqualifyColorFace::ScalarInterpolator.reverse = false;
        DisqualifyColorFace::ScalarInterpolator.restart();

        main::ORG.setCameraWithMount(main::gtengine::CameraType::ONBOARD,
                                     main::gtengine::CameraOnboardMount::LOCAL_AUTO);

        disqualifyVisible(false);
    }

    function disqualifyVisible(flag)
    {
        DisqualifyColorFace.visible = !flag;
    }

    function onJackpotEvent(context, widget, event, arg)
    {
        RaceRoot::onJackpotDisplayEvent(context, widget, event, arg);
    }
}