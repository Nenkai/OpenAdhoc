module PROJECT::ROOT
{
    static carlist_A = [];
    carlist_A.push("pescarolo_c60_lmp1_04");
    carlist_A.push("pescarolo_c60_03");
    carlist_A.push("m3_gtr_alms_01");
    carlist_A.push("mclaren_f1_gtr_long_97");
    carlist_A.push("v12_lmr_99");
    carlist_A.push("r89c_89");
    carlist_A.push("r390_race_98");
    carlist_A.push("panoz_esperante_race_98");
    carlist_A.push("xanavi_nismo_gtr_03");

    static carlist_B = [];
    carlist_B.push("m5_gms_04");
    carlist_B.push("r_gt_00");
    carlist_B.push("elise_190_00");
    carlist_B.push("delta_hf_integrale_wrc_00");
    carlist_B.push("vanquish_00");
    carlist_B.push("_206_wrc_99");
    carlist_B.push("cuda_440_6_71");
    carlist_B.push("_3400s_00");
    carlist_B.push("pontiac_gto_389_348_64");
    carlist_B.push("lancer_evo5_gsr_98");

    static carlist_C = [];
    carlist_C.push("_300sl_coupe_54");
    carlist_C.push("city_turbo2_83");
    carlist_C.push("cosmo_sport_68");
    carlist_C.push("_120i_04");
    carlist_C.push("_117_coupe_68");
    carlist_C.push("a112_abarth_79");
    carlist_C.push("be1_87");
    carlist_C.push("_500_f_65");

    static carlist_D = [];
    carlist_D.push("lancer_evo5_gsr_98");
    carlist_D.push("nsx_r_02");
    carlist_D.push("rx8_types_03");
    carlist_D.push("r34_gtr_v2_nur_02");
    carlist_D.push("r32_gtr_v2_00");
    carlist_D.push("alpine_a110_16s_73");
    carlist_D.push("impreza_wrx_sti_02");

    static carlist = nil;

    static original_car_x   = CarScroll.x;
    static original_color_x = ColorScroll.x;

    static current_event = nil;

	function onLoad()
	{
		setFadeActor(Pane::Ready::bgf);
		setFadeActor(Pane::Car::bgf);
		setFadeActor(Pane::Color::bgf);
		setFadeActor(Pane::Setting::bgf);
		setFadeActor(Pane::Chat::bgf);
		setFadeActor(Pane::Force::bgf);
		setFadeActor(InputBox::bgf);
	}
	
	function set_car(context, car_code, car_color)
	{
		main::game.car_code = car_code;
		CarPane::CarFace.car_code = car_code;
		CarPane::CarFace.car_color = car_color;
	
		main::network.raceMenuNotifyCar(main::game.car_code, car_color);
	
		main::game.car_color = car_color;
	
		PlayerPane::refreshMyself(context);
	}
	
	function set_color(context, index)
	{
		CarPane::CarFace.car_color = index;
	
		main::network.raceMenuNotifyCar(main::game.car_code, index);
	
		main::game.car_color = index;
	
		PlayerPane::refreshMyself(context);
	}
	
	function getEventNode(context)
	{
		var info = main::network.getCurrentGameInfo();
		var current_id = info[7];
	
		var buf = main::network.fileGet("P2PEvent.xmlz");
		if (buf != nil)
		{
			var xml = main::menu::MXml();
			xml.parse(buf);
	
			var node = xml.result;
			node = node["Xml"][0];
	
			var nodelist = node["Event"];
			var size = nodelist.size;
	
			
			for (var i = 0; i < size; i++)
			{
				var event = nodelist[i];
				var id = event["ID"][0].value.toInt();
	
				if (id == current_id)
					return event;
			}
		}
	
		return nil;
	}

	function onInitialize(context)
	{
		enterPage(context, PregridRoot, "PRE GRID");
	
		main::network.raceMenuStart();
		main::network.unfixNetClient();
		main::network.setLobbyMessageEnable(0);
		main::network.raceMenuNotifyReadyToRace(0);
		main::network.raceMenuNotifySequence(1);
	
		hidden.visible = false;
		CarScroll.visible = false;
		ColorScroll.visible = false;
		InputBox.visible = false;
		CountDownPane.visible = false;
	
		Pane::Force.insensitive = !main::network.amIhost();
	
		var carface = CarPane::CarFace;
		carface.action_type = "normal";
		carface.debug_display = false;
		carface.car_model.motion = 1;
		carface.car_model.tx = 0.0;
		carface.car_model.tz = 0.0;
		carface.car_model.posInterpolateSpeed = 0.025;
	
		PlayerPane::refresh(context);
	
		LogBox::tbox.clear();
		LogBox::tbox.pipe = main::network.pipe;
	
		var event = main::menu::MScriptEvent(context, PregridRoot, "on_initialize");
		context.pushEvent(event);
	}


	function on_initialize(context)
	{
		current_event = getEventNode(context);
		if (current_event == nil)
		{
			var error_code = main::network.getLastErrorCode();
			openConfirmDialog(context, DIALOG_OK, error_code);
			restart(context);
			return;
		}
	
		if (main::network.amIhost())
		{
			var course = current_event["Course"][0].value;
			main::network.raceMasterNotifyCourse(course);
		}
	
		var car_class = current_event["CarClass"][0].value;
	
		carlist = PregridRoot["carlist_" + car_class];
	
		var car_code = main::game.car_code;
		if (car_code == "")
			car_code = carlist[0];
	
		set_car(context, car_code, main::game.car_color);
	
		CarScroll::SelectBox::refresh(context, car_code);
	
		PregridRoot.setFocus(Pane::Ready);
	
		CreateWatcher(context, onTick, 10);
	
		if (main::network.amIhost())
			main::network.setGameClosed(0);
	}
	
	function onFinalize(context)
	{
		current_event = nil;
	
		DeleteWatcher();
	
		CarScroll::SelectBox.clearChildren(context);
		ColorScroll::SelectBox.clearChildren(context);
	
		main::network.setLobbyMessageEnable(1);
	
		leavePage(context, PregridRoot);
	}

	function goRaceSignal(context)
	{
		main::network.setGameClosed(1);
	
		var id   = main::network.getCurrentGameWorldID();
		var list = main::network.getGamePlayers(id);
		if (list == nil)
		{
			return;
		}
	
		var remotePlayers = "";
		var cnt = list.size;
		
		for (var i = 0; i < cnt; i++)
		{
			var column = list[i];
			var pid = column[0];
	
			if (pid != main::network.my_id)
			{
				if (remotePlayers != "")
					remotePlayers += ",";
				
				remotePlayers += pid.toString();
			}
		}
	
		main::network.getSvoCookie(gHttp.GetMHttp());
	
		svo::SetLocation(current_event["Course"][0].value);
	
		var ret = svo::CreateArcadeGame(id.toString(), remotePlayers);
	
		gHttp.close();
	
		main::network.setSvoCookie(gHttp.GetMHttp());
	
		main::network.raceMenuNotifySequence(2);
	
		context.sync(0.1);
	
		startCoundDown(context);
	}
	
	static countdown = -1;

	function startCoundDown(context)
	{
		main::network.fixNetClient();
	
		countdown = 8000;
	
		CountDownPane.visible = 1;
	
		PregridRoot.setFocus(Pane::Chat);
	
		Pane::Ready.active = 1;
		Pane::Ready.insensitive = 1;
	
		Pane::Car.insensitive    = 1;
		Pane::Color.insensitive  = 1;
		Pane::Setting.insensitive = 1;
	}


	function onTick(context)
	{
		if (countdown < 0)
		{
			Pane::Force.insensitive = !main::network.amIhost();
	
			if (main::network.raceMenuChanged())
			{
				if (PlayerPane::refresh(context))
					goRaceSignal(context);
			}
	
			var players = main::network.raceMenuGamePlayers();
			
			for (var i = 0; i < players; i++)
			{
				if (main::network.raceMenuPeekSequence(i) == 2)
				{
					startCoundDown(context);
					break;
				}
			}
		}
		if (countdown >= 0)
		{
			Pane::Force.insensitive = true;
			countdown -= 200;
		
			if (countdown <= 0)
			{
				main::game.major_menu_project = "online";
				main::game.major_menu_page = PregridRoot;
				main::network.raceMenuNotifySequence(3);
				main::network.raceMenuNotifyReadyToRace(0);
				main::game.race_code = "preview_entry_6";
				main::game.max_entry = 6;
				main::network.raceMenuEnd();
				main::game.next_sequence = "online_p2p_race";
				start_page(context, nil);
			}
			else
			{
				var value = (countdown / 1000) - 1;
				if (value < 0) value = 0;
				CountDownPane::label.text = value;
			}
		}
	}


	function onKeyPress(context, event)
	{
		var keysym = event.keysym;
		if (keysym == PS2_PAD_CTRL_L3_LEFT || keysym == PS2_PAD_CTRL_L3_RIGHT)
		{
			return EVENTRESULT_FILTER;
		}
		return false;
	}

	function onCancel(context)
	{
		if (Pane::Ready.active)
		{
			main::sound.play("disabled");
			return EVENTRESULT_FILTER;
		}
	
		main::sound.play("cancel");
	
		var res = openConfirmDialog(context, DIALOG_QUERY, "Do you quit?");
		if (res)
		{
			res = main::network.leaveGame();
			if (!res)
			{
				var error_code = main::network.getLastErrorCode();
				openConfirmDialog(context, DIALOG_OK, error_code);
				restart(context);
			}
			else
			{
				start_page(context, P2PEventRoot);
			}
		}
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::PlayerPane
{
    static items = [Player0, Player1, Player2, Player3, Player4, Player5];

    function refreshMyself(context)
    {
        refresh(context, true);
    }

    function refresh(context, myself_only)
    {
        var num = items.size;
        var players = main::network.raceMenuGamePlayers();
        var me = main::network.raceMenuMyIndex();

        var all_ready = true;

        if (players <= 1)
            all_ready = false;

        myself_only = ((myself_only != nil) && myself_only);
        if (myself_only)
            all_ready = false;

        
        for (var i = 0; i < num; i++)
        {
            var item = items[i];

            if (i < players)
            {
                item.visible = true;

                if (i == me)
                {
                    item.active = true;

                    var name = main::network.my_name;
                    item["Name"].text = name;
                    item["Namea"].text = name;

                    var car_code = main::game.car_code;
                    var car_color = main::game.car_color;

                    var carname = main::menu::MCarData::GetShortCarName(car_code);
                    item["Car"].text = carname;
                    item["Car"].abbreviate();
                    item["Cara"].text = item["Car"].text;

                    var gcar = main::menu::MCarGarage(car_code);
                    item["chip"].setData(gcar, car_color);

                    item["Ready"].active = Pane::Ready.active;
                }
                else if (!myself_only)
                {
                    item.active = false;

                    var name = main::network.raceMenuPeekAccountName(i);
                    item["Name"].text = name;
                    item["Namea"].text = name;

                    var car_code = main::network.raceMenuPeekCar(i)[0];
                    var car_color = main::network.raceMenuPeekCar(i)[1];

                    if (car_code != "")
                    {
                        var carname = main::menu::MCarData::GetShortCarName(car_code);
                        item["Car"].text = carname;
                        item["Car"].abbreviate();
                        item["Cara"].text = item["Car"].text;

                        var gcar = main::menu::MCarGarage(car_code);
                        item["chip"].setData(gcar, car_color);
                    }
                    else
                    {
                        item["Car"].text = "";
                        item["Cara"].text = "";
                    }

                    item["Ready"].active = main::network.raceMenuPeekReadyToRace(i);
				}
                if (!item["Ready"].active)
                    all_ready = false;
            }
            else
                item.visible = false;
        }

        if (all_ready && main::network.amIhost())
            return true;
		else
			return false;
    }
}

module PROJECT::ROOT::Pane::Ready
{
    function onActivate(context)
    {
        main::sound.play("ok");
        Ready.active = !Ready.active;
        main::network.raceMenuNotifyReadyToRace(Ready.active);

        if (PlayerPane::refresh(context))
            goRaceSignal(context);

        if (Ready.active)
        {
            Pane::Car.insensitive = true;
            Pane::Color.insensitive = true;
            Pane::Setting.insensitive = true;
        }
        else
        {
            Pane::Car.insensitive = false;
            Pane::Color.insensitive = (CarPane::CarFace.car_data.getColorNum() <= 1);
            Pane::Setting.insensitive = false;
        }

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Car
{
    function onActivate(context)
    {
        main::sound.play("ok");
        CarScroll::open(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Color
{
    function onActivate(context)
    {
        main::sound.play("ok");
        ColorScroll::open(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Setting
{
    function onActivate(context)
    {
        main::sound.play("ok");
        SettingPopup::open(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Chat
{
    function onActivate(context)
    {
        main::sound.play("ok");
        InputBox::open(context);
        PregridRoot.setFocus(InputBox::input);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Force
{
    function onActivate(context)
    {
        main::sound.play("ok");
        goRaceSignal(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputBox
{
    static original_y = InputBox.y;

    function open(context)
    {
        InputBox.y = (original_y + 64.0);
        InputBox.visible = true;

        while (!InputBox.interpolateY(original_y, 0.3))
            context.sync();
    }

    function close(context)
    {
        while (!InputBox.interpolateY((original_y + 64.0), 0.3))
            context.sync();
		
        InputBox.visible = false;
    }
}

module PROJECT::ROOT::InputBox::input
{
    function onCancel(context)
    {
        main::sound.play("cancel");

        PregridRoot.setFocus(Pane::Chat);
        InputBox::close(context);

        return EVENTRESULT_FILTER;
    }

    function onConfirmed(context, str)
    {
        main::shell.putMessage(str);

        var res = main::network.sayGame(str);
        if (!res)
        {
            var error_code = main::network.getLastErrorCode();
            openConfirmDialog(context, DIALOG_OK, error_code);
            restart(context);
        }
    }
}

module PROJECT::ROOT::CarScroll
{
    function close(context)
    {
        SelectBox.outFocus(PregridRoot);

        while (!CarScroll.interpolateX(PS2_SCREEN_W_F, 0.3))
            context.sync();

        CarScroll.visible = false;

        Pane::Color.insensitive = (CarPane::CarFace.car_data.getColorNum() <= 1);
    }

    function open(context)
    {
        CarScroll.x = PS2_SCREEN_W_F;
        CarScroll.visible = true;

        while (!CarScroll.interpolateX(original_car_x, 0.3))
            context.sync();

        SelectBox.callFocus(PregridRoot);
    }

    function onCancel(context)
    {
        main::sound.play("cancel");

        close(context);
        PregridRoot.setFocus(Pane::Car);

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::CarScroll::SelectBox
{
    function onActivate(context, event)
    {
        main::sound.play("ok");

        close(context);
        PregridRoot.setFocus(Pane::Car);

        return EVENTRESULT_FILTER;
    }

    function onValueChanged(context, index)
    {
        main::sound.play("cursor");
        var widget = SelectBox.getFocusedWidget();
        set_car(context, widget["carcode"], 0);
    }

    function refresh(context, focused_car)
    {
        SelectBox.clearChildren(context);

        var num = carlist.size;
        var index = 0;
        
        for (var i = 0; i < num; i++)
        {
            var item = hidden::CarItem.doCopy();
            var carcode = carlist[i];
            item.defineStatic("carcode", carcode);
            item["label"].text = main::menu::MCarData::GetCarName(carcode);
            SelectBox.appendChild(context, item);
            if (carcode == focused_car)
                index = i;
        }

        SelectBox.index = index;
        SelectBox.outFocus(PregridRoot);
    }
}

module PROJECT::ROOT::ColorScroll
{
    function close(context)
    {
        SelectBox.outFocus(PregridRoot);
        while (!ColorScroll.interpolateX(PS2_SCREEN_W_F, 0.3))
            context.sync();

        ColorScroll.visible = false;
    }

    function open(context)
    {
        SelectBox::refresh(context);
        ColorScroll.x = PS2_SCREEN_W_F;
        ColorScroll.visible = true;
        while (!ColorScroll.interpolateX(original_color_x, 0.3))
            context.sync();

        SelectBox.callFocus(PregridRoot);
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        close(context);
        PregridRoot.setFocus(Pane::Color);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ColorScroll::SelectBox
{
    function onActivate(context, event)
    {
        main::sound.play("ok");

        close(context);
        PregridRoot.setFocus(Pane::Color);

        return EVENTRESULT_FILTER;
    }

    function onValueChanged(context, index)
    {
        main::sound.play("cursor");
        set_color(context, index);
    }

    function refresh(context)
    {
        SelectBox.clearChildren(context);

        var car_data = CarPane::CarFace.car_data;
        var num = car_data.getColorNum();

        
        for (var i = 0; i < num; i++)
        {
            var item = hidden::ColorItem.doCopy();
            item["label"].text = car_data.getColorName(i);
            item["chip"].setData(car_data, i);
            SelectBox.appendChild(context, item);
        }
        SelectBox.outFocus(PregridRoot);
        SelectBox.index = main::game.car_color;
    }
}