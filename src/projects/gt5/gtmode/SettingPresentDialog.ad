module ROOT
{
    module Function
    {
        #include "ItemFunction.ad"
    }

    attribute popup;
    attribute closed = false;
    attribute user_id;
    attribute item;
    attribute cp;
    attribute museum;
    attribute result;

    function setAvatar(context, item, imageFace)
    {
        if (item.category_id == gtengine::GameItemCategory::DRIVER_HEAD)
        {
            var head_code = item["value"];
            var head_color_code = item["argument1"];

            imageFace.image_path = ThumbnailUtil::Avatar::getImagePath(
                ThumbnailUtil::Avatar::Genre::SIMPLE, 
                ThumbnailUtil::Avatar::Type::MET, 
                "M", 
                head_code, head_color_code, 
                0, 0);
        }
        else if (item.category_id == gtengine::GameItemCAtegory::DRIVER_BODY)
        {
            var body_code = item["value"];
            var body_color_code = item["argument1"];

            imageFace.image_path = ThumbnailUtil::Avatar::getImagePath(
                ThumbnailUtil::Avatar::Genre::SIMPLE, 
                ThumbnailUtil::Avatar::Type::SUITS, 
                "M", 
                0, 0, 
                body_code, body_color_code);
        }
        else if (item.category_id == gtengine::GameItemCategory::DRIVER_SET)
        {
            var head_code = item["value"];
            var head_color_code = item["argument1"];

            var body_code = item["value"];
            var body_color_code = item["argument1"];

            imageFace.image_path = ThumbnailUtil::Avatar::getImagePath(
                ThumbnailUtil::Avatar::Genre::SETUP, 
                ThumbnailUtil::Avatar::Type::MET_SUITS, 
                "M", 
                head_code, head_color_code, 
                body_code, body_color_code);
        }
    }

    method open(context, user_id, item, cp, museum)
    {
        self.result = nil;
        self.user_id = user_id;
        self.item = item;
        self.cp = cp;
        self.museum = museum;

        self.closed = false;
        self.popup = main::SequenceUtil::ModalPage(context, ROOT);
        self.popup.open();

        return self.result;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;
        ContextMain.event_mask = 0x05;
        ContextMain.disableInput();

        FadeActor.on_effect_end = function (context)
        {
            if (ROOT.popup != nil)
            {
                ROOT.popup.close();
                ROOT.popup = nil;
            }

            ContextMain.enableInput();
        }

        FadeActor.out = true;
    }

    method onInitialize(context)
    {
        Popup::Pane::Body::Name::Header::TextFace.text = self.user_id;
        Popup::Pane::Body::Name::AnyUser.visible = pdiext::isQABuild();

        Popup::Pane::Body::Comment::TextFace.text = "%s %s".format (
            context.translate(ROOT, "MyHome", "COMMENT"),
            context.translate(ROOT, "MyHome", "WITHIN_N_LETTERS").build(40)
        );

        initializePhoto(context);

        Popup::Pane::Body::Category::ColorTip.visible = false;
        Popup::Pane::Body::Comment::InputText::InputTextFace.value = "";

        if (self.item != nil)
        {
            Popup::Pane::Body::Category::VBox::TextFace.text = Function::getCategoryName(self.item);
            Popup::Pane::Body::Category::VBox::TextFaceLarge.text = self.item.item_name;

            switch (self.item.type_id)
            {
                case gtengine::GameItemType::TUNEPARTS:
                    Popup::Pane::Body::Category::ImageFace.image_path = "piece/tuningitem_L/%{item.item_code}.img";
                    break;

                case gtengine::GameItemType::OTHERPARTS:
                    Popup::Pane::Body::Category::ImageFace.image_path = "piece/tuningitem_L/%{item.item_code}.img";
                    var color = self.item.argument1;
                    Popup::Pane::Body::Category::ColorTip.visible = true;

                    Popup::Pane::Body::Category::ColorTip::ColorFace.setPaintColor(color);
                    break;

                case gtengine::GameItemType::SPECIAL:
                    Popup::Pane::Body::Category::ImageFace.image_path = "piece/ticket/thumb_white.img";

                    if (self.item.item_code == "presentcar_ticket_00")
                    {
                        var color = self.item.argument1;
                        var car_label = self.item.code;
                        var car_code = gtengine::MSpecDB::getCarCode(car_label);

                        Popup::Pane::Body::Category::ColorTip.visible = true;

                        if (self.item.sender != "")
                        {
                            var blob = GameItemUtil::ItemBox::getItemEntity(self.item.itembox_id);
                            var zero_blob = pdistd::MBlob("0");

                            var cp_;
                            if (blob == zero_blob)
                            {
                                cp_ = gtengine::MCarParameter(car_label);
                                cp_.color = color;
                            }
                            else
                            {
                                var cp_ = main::gtengine::MCarParameter();
                                cp_.deserialize(blob);
                            }

                            Popup::Pane::Body::Category::ColorTip::ColorFace.setCarParameter(cp_);
                        }
                        else
                            Popup::Pane::Body::Category::ColorTip::ColorFace.setCarColor(car_code, color);
                    }

                    break;

                case gtengine::GameItemType::DRIVER_ITEM:
                    setAvatar(context, self.item, Popup::Pane::Body::Category::ImageFace);
                    break;    
            }
        }
        else if (self.cp != nil)
        {
            var car_code = self.cp.getCarCode();
            var car_label = main::gtengine::MSpecDB::getCarLabel(car_code);

            Popup::Pane::Body::Category::VBox::TextFace.text = main::gtengine::MSpecDB::getCarShortName(car_code);

            Popup::Pane::Body::Category::VBox::TextFaceLarge.text = context.translate(
                ROOT, "TunerName", main::gtengine::MSpecDB::getTunerLabel(car_code)
            );

            self.cp.beginInfo();
            var max_power = self.cp.getPowerString(true);
            self.cp.endInfo();

            var spec_format = context.translate(ROOT, "SpecFormat", "car_ps");
            var drivetrain = SpecDatabaseUtil::getCarDrivetrainText(context, car_code);
            var drivetrain_format = context.translate(ROOT, "SpecFormat", "car_drive_train");

            Popup::Pane::Body::Category::ImageFace.image_path = "piece/ticket/thumb_white.img";
            Popup::Pane::Body::Category::ColorTip.visible = true;

            Popup::Pane::Body::Category::ColorTip::ColorFace.setCarParameter(self.cp);
        }
        else if (self.museum != nil)
        {
            Popup::Pane::Body::Category::VBox::TextFace.text = context.translate(ROOT, "GameItemCategory", "MUSEUM CARD");

            Popup::Pane::Body::Category::VBox::TextFaceLarge.text = "%s %s".format(
                context.translate(ROOT, "TunerName", self.museum["dealer"]),
                context.translate(ROOT, "Number", "FORMAT_NO").build(self.museum["dealer_id"])
            );

            Popup::Pane::Body::Category::ImageFace.image_path = "piece/ticket/museum_card.img";
        }
        
        ROOT.setFocus(Popup::Pane::FootRow::CancelOK::OK);

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {

    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.setFocus(Popup::Pane::FootRow::CancelOK::Cancel);

        return EVENTRESULT_FILTER;
    }

    method initializePhoto(context)
    {
        UserProfile2.requestUserProfile(self.user_id, function (args)
        {
            |var context, var request| = args;
            if (request.isDone())
            {
                var u = UserProfile2.decodeUserProfile(request);

                |var r, var g, var b| = GAME_STATUS.user_profile.context.getMenuColor(u["menu_color"]);

                var color = menu::MColorObject(
                    r / 2550.0,  // BUG: 2550?
                    g / 255.0,
                    b / 255.0
                );

                Popup::Pane::Body::Name::UserProfile::bg.setColor(color);

                setPhotoImage(context, u["photo_id_avatar"], Popup::Pane::Body::Name::UserProfile::ImageFace);
            }
        });
    }

    module Popup::Pane
    {
        module Body::Name::AnyUser
        {
            method onFocusEnter(context, event)
            {
                var w = event.widget;
                var localized_text = context.translate(ROOT, "MyHome", w.name.upcase());
                BalloonTip.set_value(context, w, localized_text, 0);

                return EVENTRESULT_FILTER;
            }

            method onFocusLeave(context)
            {
                BalloonTip.reset_value();

                return EVENTRESULT_FILTER;
            }

            method onActivate(context)
            {
                main::sound.play("ok");

                var res = OSKUtil::open(context, "", self);
                if (res != nil)
                {
                    ROOT.user_id = res;
                    Popup::Pane::Body::Name::Header::TextFace.text = ROOT.user_id;
                }

                return EVENTRESULT_FILTER;
            }
        }

        module FootRow::CancelOK
        {
            module Cancel
            {
                method onActivate(context)
                {
                    main::sound.play("ok");
                    ROOT.close(context);

                    return EVENTRESULT_FILTER;
                }

                method onCancel(context)
                {
                    main::sound.play("cancel");
                    ROOT.close(context);

                    return EVENTRESULT_FILTER;
                }   
            }     
        

            module OK
            {
                method onActivate(context)
                {
                    main::sound.play("ok");
                    var comment = Popup::Pane::Body::Comment::InputText::InputTextFace.value;

                    VulgarityFilterUtil::begin();
                    |var res, var sanitized_text| = VulgarityFilterUtil::check(comment);
                    VulgarityFilterUtil::end();

                    if (res)
                    {
                        ROOT.result = [
                            "count" : 1,
                            "comment" : sanitized_text,
                            "user_id" : ROOT.user_id,
                        ];

                        ROOT.close(context);
                    }
                    else
                        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "Network", "ERROR_ONLINE_FUNCTION"));

                    return EVENTRESULT_FILTER;
                }    
            }
        }
    }
}