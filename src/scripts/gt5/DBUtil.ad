

//---------------------------------------------------------------------------------------
// DBUtil.ad
//
// Utility module for Some additional SQLite operations.
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module DBUtil
{
    function fatalErrorOnBoot(error_no)
    {
        if (!pdistd::Exist("/APP_DATA/db/system.db"))
        {
            DB_ASSERT(false, error_no);
        }
        else
        {
            var message = main::manager.translateAtCursorProject("SystemMessage", "DB_ERROR_YOU_CAN_DELETE");
            var res = pdistd::MSystemDialog::open("NYND", message.format(error_no));
            if (res != "YES")
            {
                message = main::manager.translateAtCursorProject("SystemMessage", "DB_ERROR_DO_RESET");
                pdistd::MSystemDialog::open("ENYD", message);
            }
            else
            {
                message = main::manager.translateAtCursorProject("SystemMessage", "DB_ERROR_YOU_REALLY_DELETE");
                res = pdistd::MSystemDialog::open("NYND", message);
                if (res != "YES")
                {
                    message = main::manager.translateAtCursorProject("SystemMessage", "DB_ERROR_DO_RESET");
                    pdistd::MSystemDialog::open("ENYD", message);
                }
                else
                {
                    pdistd::RemoveFile("/APP_DATA/db/system.db");
                    message = main::manager.translateAtCursorProject("SystemMessage", "DB_ERROR_DELETED_DO_RESET");
                    pdistd::MSystemDialog::open("ENYD", message);
                }
            }
        }
    }

    function initializeTableCommon(sqlite, table_name, current_version)
    {
        var table_version = get_table_version_common(sqlite, table_name);
        if (table_version == nil)
        {
            drop_table_common(sqlite, table_name);

            var sql = "CREATE TABLE IF NOT EXISTS " + table_name + "_version (version INTEGER)";
            var res = sqlite.execute0(sql);

            if (res != SQLITE_OK)
                fatalErrorOnBoot(res);

            sql = "INSERT INTO " + table_name + "_version (version) VALUES (?)";
            var params = [current_version];
            res = sqlite.execute(sql, params);

            if (res != SQLITE_DONE)
                fatalErrorOnBoot(res);

            return true;
        }
        else if (table_version != current_version)
        {
            drop_table_common(sqlite, table_name);
            var sql = "UPDATE " + table_name + "_version SET version=?";
            var params = [current_version];
            var res = sqlite.execute(sql, params);

            if (res != SQLITE_DONE)
                fatalErrorOnBoot(res);

            return true;
        }

        return false;
    }

    function initializeTable(table_name, current_version)
    {
        return initializeTableCommon(SQLITE, table_name, current_version);
    }

    function get_table_version_common(sqlite, table_name)
    {
        var sql = "SELECT version FROM " + table_name + "_version";
        var res = sqlite.executeQuery(sql);
        var table_version = res.size == 0 ? nil : res[0][0];
        return table_version;
    }

    function getTableVersion(table_name)
    {
        return get_table_version_common(SQLITE, table_name);
    }

    function getTableVersionCommon(sqlite, table_name)
    {
        return get_table_version_common(sqlite, table_name);
    }

    function update_table_version_common(sqlite, table_name, version)
    {
        var table_version = get_table_version_common(sqlite, table_name);
        if (table_version == nil)
        {
            var sql = "CREATE TABLE IF NOT EXISTS " + table_name + "_version (version INTEGER)";
            var res = sqlite.execute0(sql);
            if (res != SQLITE_OK)
                fatalErrorOnBoot(res);

            var sql = "INSERT INTO " + table_name + "_version (version) VALUES (?)";
            var params = [version];
            var res = sqlite.execute(sql, params);
            if (res != SQLITE_DONE)
                fatalErrorOnBoot(res);
        }
        else 
        {
            var sql = "UPDATE " + table_name + "_version SET version=?";
            var params = [version];
            var res = sqlite.execute(sql, params);
            if (res != SQLITE_DONE)
                fatalErrorOnBoot(res);
        }
    }

    function updateTableVersion(table_name, version)
    {
        update_table_version_common(SQLITE, table_name, version);
    }

    function updateTableVersionCommon(sqlite, table_name, version)
    {
        update_table_version_common(sqlite, table_name, version);
    }

    function drop_table_common(sqlite, table_name)
    {
        var sql = "DROP TABLE IF EXISTS " + table_name;
        var res = sqlite.execute0(sql);
        DB_ASSERT(res == SQLITE_OK, res);
        return;
    }

    function dropTable(table_name)
    {
        drop_table_common(SQLITE, table_name);
    }

    function set_attr_value_list(data, list)
    {
        var idx = 0;
        foreach (|var a, var v| in data.class_id)
        {
            if (!v.is_attribute)
                continue;

            data.*v = list[idx];
            idx++;
        }
    }

    function get_attr_value_list(data, with_id)
    {
        if (with_id == nil)
            with_id = false;

        var list = [];
        foreach (|var a, var v| in data.class_id)
        {
            if (!v.is_attribute)
                continue;

            if (a == "id" && !with_id)
                continue;

            list.push(data.*v);
        }

        return list;
    }

    function get_attr_list(class_id, with_id)
    {
        if (with_id == nil)
            with_id = false;

        var list = [];
        foreach (|var a, var v| in class_id)
        {
            if (!v.is_attribute)
                continue;

            if (a == "id" && !with_id)
                continue;

            list.push(a.toString());
        }
        return list;
    }

    function get_query_columns(class_id, with_id)
    {
        var list = get_attr_list(class_id, with_id);
        return list.join(",");
    }

    function insert_common(sqlite, table_name, data)
    {
        var list = [];
        foreach (|var a, var v| in data.class_id)
        {
            if (!v.is_attribute)
                continue;

            if (a == "id")
                continue;

            list.push("?");
        }

        var questions = list.join(",");

        var sql = "INSERT INTO " + table_name + " (" +
                  get_query_columns(data.class_id, false) +
                  ") "
                  "VALUES (" + questions + ")";

        var params = get_attr_value_list(data, false);
        var res = sqlite.execute(sql, params);

        DB_ASSERT(res == SQLITE_DONE, res);
        return;
    }

    function insert(table_name, data)
    {
        insert_common(SQLITE, table_name, data);
    }

    function getSelectQuery(table_name, class_id)
    {
        var select_query = "SELECT " +
                            get_query_columns(class_id, true) + 
                            " FROM " + table_name + " ";
        return select_query;
    }

    function getDataList(class_id, select_res)
    {
        var data_list = Array(select_res.size);
        for (var i = 0; i < select_res.size; i++)
        {
            var data = class_id();
            set_attr_value_list(data, select_res[i]);
            data_list[i] = data;
        }

        return data_list;
    }

    function get_max_id(sqlite, table_name)
    {
        var sql = "SELECT MAX(id) FROM " + table_name;
        var res = sqlite.executeQuery(sql);
        if (res.size == 0 || res[0][0] == nil)
            return 0;
        else
            return res[0][0];
    }

    function getUniqFileName(table_name, path_base, ext)
    {
        var id = get_max_id(SQLITE, table_name) + 1;
        var fname = path_base + "%04d".format(id);
        var extension = ".dat";

        if (ext != nil)
            extension = "." + ext;

        var path;
        while (true)
        {
            path = fname + extension;
            if (!pdistd::Exist(path))
                break;

            fname = fname + "D";
        }

        return path;
    }

    function delete_row(sqlite, table_name, data)
    {
        var sql = "DELETE FROM " + table_name + " WHERE id = %{data.id}";
        var res = sqlite.execute(sql);

        DB_ASSERT(res == SQLITE_DONE, res);
        return;
    }

    function deleteRow(table_name, data)
    {
        delete_row(SQLITE, table_name, data);
    }

    function delete_row_bylist(sqlite, table_name, data_list)
    {
        var sql = "DELETE FROM %{table_name} WHERE id = ?";
        var sql_list = Array();
        foreach (var data in data_list)
        {
            var params = [data.id];
            sql_list.push([sql, params]);
        }

        var res = sqlite.executeTransaction(sql_list);
        DB_ASSERT(res == SQLITE_DONE, res);
        return;
    }

    function deleteRowByList(table_name, data_list)
    {
        delete_row_bylist(SQLITE, table_name, data_list);
    }

    function delete_all(sqlite, table_name)
    {
        var sql = "DELETE FROM %{table_name}";
        var res = sqlite.execute(sql);

        DB_ASSERT(res == SQLITE_DONE, res);
        return;
    }

    function deleteAll(table_name)
    {
        delete_all(SQLITE, table_name);
    }
}