

//---------------------------------------------------------------------------------------
// ABspecUtil.ad
//
// Utility module for getting some category information & generating/getting bspec skills 
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module ABspecUtil
{
    module ASPEC_CATEGORY
    {
        static BEGINNER = 0;
        static AMATEUR = 1;
        static PROFESSIONAL = 2;
        static EXPERT = 3;
        static EXTREME = 4;
        static ENDURANCE = 5;
        static MAX = 6;
        static FIRST = BEGINNER;
        static LAST = ENDURANCE;
    }

    module BSPEC_CATEGORY
    {
        static BEGINNER = 0;
        static AMATEUR = 1;
        static PROFESSIONAL = 2;
        static EXPERT = 3;
        static EXTREME = 4;
        static ENDURANCE = 5;
        static MAX = 6;
        static FIRST = BEGINNER;
        static LAST = ENDURANCE;
    }

    static CategoryString = [
        "BEGINNER",
        "AMATEUR",
        "PROFESSIONAL",
        "EXPERT",
        "EXTREME",
        "ENDURANCE"
    ];

    static AspecGameCountList;
    static BspecGameCountList;
    static AspecGameIds;
    static BspecGameIds;
    static AspecGameDataMap;
    static BspecGameDataMap;

    module main::bootstrap_phase1_module
    {
        function loadGameListXml(bspec)
        {
            var file_path = "";
            var game_ids = Array();
            var game_data_map = Map();
            var game_count_list;

            if (!bspec)
            {
                file_path = "/textdata/gt5/aspec_race/gamelist.xml";
                game_count_list = Array(ABspecUtil::ASPEC_CATEGORY::MAX);
            }
            else
            {
                file_path = "/textdata/gt5/bspec_race/gamelist.xml";
                game_count_list = Array(ABspecUtil::BSPEC_CATEGORY::MAX);
            }

            for (var i = 0; i < game_count_list.size; i++)
                game_count_list[i] = 0;
            
            var fst = pdistd::ReadFile(file_path);
            var buf = fst["buffer"];
            var xml = pdistd::MXml();
            xml.parse(buf);
            var dom = xml.result;
            var xml_nodes = dom["GameData"];
            var xml_node = xml_nodes[0];
            var game_nodes = xml_node["game"];

            for (var i = 0; i < game_nodes.size; i++)
            {
                var game_node = game_nodes[i];
                var game_id = game_node.getAttribute("id").toInt();
                var level = game_node.getAttribute("level").toInt();
                var event_count = game_node.getAttribute("event_count").toInt();
                var is_championship = game_node.getAttribute("is_championship").toBool();
                var file_id = game_node.getAttribute("file_id").toInt();
                game_ids.push(game_id);

                game_data_map[game_id] = [
                    "level" : level,
                    "event_count" : event_count,
                    "is_championship" : is_championship,
                    "file_id" : file_id
                ];

                var category = (game_id / 100) - 1;
                game_count_list[category]++;
            }

            if (!bspec)
            {
                ABspecUtil::AspecGameIds = game_ids;
                ABspecUtil::AspecGameDataMap = game_data_map;
                ABspecUtil::AspecGameCountList = game_count_list;
            }
            else
            {
                ABspecUtil::BspecGameIds = game_ids;
                ABspecUtil::BspecGameDataMap = game_data_map;
                ABspecUtil::BspecGameCountList = game_count_list;
            }
        }

        function initABspec()
        {
            loadGameListXml(true);
            loadGameListXml(false);
        }
    }

    function getCategoryGameCount(category, bspec)
    {
        return !bspec ? AspecGameCountList[category] : BspecGameCountList[category];
    }

    function getGameDataMap(bspec)
    {
        return !bspec ? AspecGameDataMap : BspecGameDataMap;
    }

    function getCategoryString(category)
    {
        if (category < CategoryString.size)
            return CategoryString[category];
        else
            return "";
    }

    function getGameIds(bspec)
    {
        var game_ids = !bspec ? AspecGameIds : BspecGameIds;
        return game_ids;
    }

    function getCategoryGameIds(category, bspec)
    {
        var game_count = getCategoryGameCount(category, bspec);
        var game_id_list = Array(game_count);

        for (var i = 0; i < game_count; i++)
            game_id_list[i] = getGameId(category, i);
        
        return game_id_list;
    }

    function getFileId(game_id, bspec)
    {
        var game_data_map = getGameDataMap(bspec);
        var game_data = game_data_map[game_id];
        if (game_data == nil)
            return -1;

        return game_data["file_id"];
    }

    function getNeedLevel(game_id, bspec)
    {
        var game_data_map = getGameDataMap(bspec);
        var game_data = game_data_map[game_id];
        if (game_data == nil)
            return -1;

        return game_data["level"];
    }

    function getMinimumNeedLevel(category, bspec = false)
    {
        var min = 999;
        var game_count = getCategoryGameCount(category, bspec);
        var game_data_map = getGameDataMap(bspec);

        for (var i = 0; i < game_count; i++)
        {
            var game_id = getGameId(category, i);
            var game_data = game_data_map[game_id];
            if (game_data == nil)
                continue;

            if (min > game_data["level"])
                min = game_data["level"];
        }

        return min;
    }

    function clearedGranTurismoWorldChampionship()
    {
        var gt_world_championship_id = 309;
        var res_a = GAME_STATUS.user_profile.record.aspec_race.getGameResult(gt_world_championship_id);
        var res_b = GAME_STATUS.user_profile.record.bspec_race.getGameResult(gt_world_championship_id);

        return (0 <= res_a && res_a <= 2) || (0 <= res_b && res_b <= 2);
    }

    function clearedDreamCarChampionship()
    {
        var dream_car_championship_id = 509;
        var res_a = GAME_STATUS.user_profile.record.aspec_race.getGameResult(dream_car_championship_id);
        var res_b = GAME_STATUS.user_profile.record.bspec_race.getGameResult(dream_car_championship_id);

        return (0 <= res_a && res_a <= 2) || (0 <= res_b && res_b <= 2);
    }

    function getLineTraceRate(bspec_level)
    {
        var rate = 1.0;
        if (bspec_level < 10)
            rate = (bspec_level / 10.0) * 0.5;
        else
            rate = 0.5 + (((bspec_level - 10) / 30.0) * 0.5);

        if (rate > 1.0)
            rate = 1.0;

        if (rate < 0.0)
            rate = 0.0;

        return rate;
    }

    function getCornringSkill(bspec_level)
    {
        if (bspec_level <= 5)
        {
            var rate = bspec_level / 5.0;
            return 81 + (5.25 * rate).toInt();
        }
        else
        {
            var rate = (bspec_level - 5) / 35.0;
            if (rate > 1.0)
                rate = 1.0;

            return 86.25 + (8.75 * rate).toInt();
        }
    }

    function getBSpecEnemySkill(ai_driver, bspec_level)
    {
        var rate = bspec_level / 40.0;
        if (rate > 1.0)
            rate = 1.0;
        if (rate < 0.0)
            rate = 0.0;

        var stamina_rate = bspec_level / 99.0;
        if (rate > 1.0) // Pretty sure they meant stamina_rate
            rate = 1.0;
        if (rate < 0.0)
            rate = 0.0;

        ai_driver.growth_parameter.stamina = 600 + (((8700 + pdistd::MRandom::GetValue(0, 200)) * stamina_rate) * 1.1).toInt();
        ai_driver.growth_parameter.mentality = pdistd::MRandom::GetValue(0, 10);
        ai_driver.growth_parameter.condition = 0;
        ai_driver.growth_parameter.temper = pdistd::MRandom::GetValue(0, 100);
        ai_driver.growth_parameter.flexibility = 100;

        ai_driver.growth_parameter.skill_base_cornering = getCornringSkill(bspec_level);
        ai_driver.growth_parameter.skill_base_cornerout = 70 + (25 * rate).toInt(); // TIL
        ai_driver.growth_parameter.skill_base_breaking = 50 + (45 * rate).toInt();

        ai_driver.growth_parameter.skill_base_line_trace = 100 - (100 * getLineTraceRate(bspec_level)).toInt();

        rate = bspec_level / 10.0;
        if (rate > 1.0)
            rate = 1.0;
        if (rate < 0.0)
            rate = 0.0;

        ai_driver.growth_parameter.skill_base_stear_reaction = -20 + (20 * rate).toInt();
        ai_driver.growth_parameter.skill_base_shift_up = 90 + (10 * rate).toInt();
        ai_driver.growth_parameter.skill_heat_offset = 50 - (45 * rate).toInt();
    }

    function getParam(info, tag, rate)
    {
        var st_tag = "st_%s".format(tag);
        var ed_tag = "ed_%s".format(tag);

        return info[st_tag] + ((info[ed_tag] - info[st_tag]) * rate);
    }

    function getBSpecPlayerSkill(ai_driver, bspec_level, id)
    {
        if (id == nil || id < 0)
        {
            ai_driver.growth_parameter.spec_id = -1;
            var rate = bspec_level / 40.0;
            if (rate > 1.0)
                rate = 1.0;
            if (rate < 0.0)
                rate = 0.0;
    
            var stamina_rate = bspec_level / 99.0;
            if (rate > 1.0) // Pretty sure they meant stamina_rate
                rate = 1.0;
            if (rate < 0.0)
                rate = 0.0;
    
            ai_driver.growth_parameter.stamina = 600 + (((8700 + pdistd::MRandom::GetValue(0, 200)) * stamina_rate) * 1.1).toInt();
            ai_driver.growth_parameter.mentality = (100 * rate).toInt();
            ai_driver.growth_parameter.condition = 0;
            ai_driver.growth_parameter.temper = pdistd::MRandom::GetValue(0, 100);
            ai_driver.growth_parameter.flexibility = 100;
    
            ai_driver.growth_parameter.skill_base_breaking = 50 + (45 * rate).toInt();
            ai_driver.growth_parameter.skill_base_cornering = 85 + (10 * rate).toInt();
            ai_driver.growth_parameter.skill_base_cornerout = 70 + (25 * rate).toInt(); // TIL
            ai_driver.growth_parameter.skill_base_line_trace = 100 - (100 * rate).toInt();
    
            rate = bspec_level / 10.0;
            if (rate > 1.0)
                rate = 1.0;
            if (rate < 0.0)
                rate = 0.0;
    
            ai_driver.growth_parameter.skill_base_stear_reaction = -20 + (20 * rate).toInt();
            ai_driver.growth_parameter.skill_base_shift_up = 90 + (10 * rate).toInt();
            ai_driver.growth_parameter.skill_heat_offset = 50 - (45 * rate).toInt();
        }
        else
        {
            if (id > BSpecDriverData::getBSpecDriverInfoTableCount())
            {
                getBSpecPlayerSkill(ai_driver, bspec_level);
                return;
            }

            var info = BSpecDriverData::getBSpecDriverInfo(id);
            var max_lv = info["skill_max_lv"];
            var rate = bspec_level / max_lv.toFloat();
    
            var stamina_rate = bspec_level / 99.0;
            if (rate > 1.0) // Pretty sure they meant stamina_rate
                rate = 1.0;
            if (rate < 0.0)
                rate = 0.0;
    
            ai_driver.growth_parameter.spec_id = id;
            ai_driver.growth_parameter.stamina = getParam(info, "stamina", stamina_rate);
            ai_driver.growth_parameter.mentality = getParam(info, "mentality", rate);
            ai_driver.growth_parameter.flexibility = 100;
    
            ai_driver.growth_parameter.skill_base_breaking = getParam(info, "skill_base_breaking", rate);
            ai_driver.growth_parameter.skill_base_cornering = getParam(info, "skill_base_cornering", rate);
            ai_driver.growth_parameter.skill_base_cornerout = getParam(info, "skill_base_cornerout", rate);

            ai_driver.growth_parameter.skill_base_line_trace = getParam(info, "skill_base_line_trace", getLineTraceRate(bspec_level));
    
            var sub_max_lv = 10;
            rate = bspec_level / sub_max_lv.toFloat();
            if (rate > 1.0)
                rate = 1.0;
            if (rate < 0.0)
                rate = 0.0;
    
            ai_driver.growth_parameter.skill_base_shift_up = getParam(info, "skill_base_shift_up", rate);
            ai_driver.growth_parameter.skill_base_stear_reaction = getParam(info, "skill_base_stear_reaction", rate);
            ai_driver.growth_parameter.skill_heat_offset = getParam(info, "skill_heat_offset", rate);
        }
    }

    function getNewBSpecPlayerSkill(ai_driver, no_name)
    {
        var id = pdistd::MRandom::GetValue(0, BSpecDriverData::getBSpecDriverInfoTableCount() - 1);
        ai_driver.setGroveAIParameter("max_ai", 100);
        getBSpecPlayerSkill(ai_driver, 0, id);
        ai_driver.growth_parameter.lv = 0;
        var name_skill = DriverNameUtil::getWithSkill();

        if (no_name == nil)
            ai_driver.display_name = name_skill[0];

        ai_driver.region = name_skill[3];
        ai_driver.growth_parameter.temper = name_skill[1];
    }

    function getBSpecDisplayStatusData(ai_driver, include_dec)
    {
        var param = [];
        var vitality_base = ai_driver.growth_parameter.stamina;
        var breaking_base = ai_driver.growth_parameter.skill_base_breaking;
        var cornerout_base = ai_driver.growth_parameter.skill_base_cornerout;
        var cornering_base = ai_driver.growth_parameter.skill_base_cornering;
        var line_base = 100 - ai_driver.growth_parameter.skill_base_line_trace;
        var master_rate = 1.0;

        if (include_dec != nil)
            master_rate = 1.0 - (ai_driver.growth_parameter.dec_master_rate / 100.0);

        var speed_mix = breaking_base + cornering_base + cornerout_base + line_base;
        speed_mix -= 200;
        speed_mix /= 200.0;
        speed_mix *= master_rate;
        param.push(speed_mix);
        vitality_base *= master_rate;

        var vital;
        if (vitality_base < 3000.0)
            vital = (vitality_base / 3000.0) * 0.8;
        else
            vital = 0.8 + (0.2  * (vitality_base - 3000.0) / 2000.0);

        if (vital > 1.0)
            vital = 1.0;
        param.push(vital);
        param.push(ai_driver.growth_parameter.mentality / 100.0);

        var day = ai_driver.growth_parameter.days / 500.0;
        if (day > 1.0)
            day = 1.0;
        param.push(day);
        param.push(ai_driver.growth_parameter.temper / 100.0);

        var break_rate = (breaking_base - 45) / (100.0 - 45.0);
        break_rate *= master_rate;
        param.push(break_rate);

        var corner = cornering_base + cornerout_base;
        corner -= 153;
        var corner_rate = corner / (190.0 - 153.0);
        var corner_dec_rate = 1.0;

        if (include_dec != nil)
            corner_dec_rate = 1.0 - (ai_driver.growth_parameter.dec_master_rate / 2.0 / 100.0);
        
        corner_rate *= corner_dec_rate;
        if (corner_rate > 1.0)
            corner_rate = 1.0;
        param.push(corner_rate);

        var line = line_base / 100.0;
        line *= corner_dec_rate;
        param.push(line);
        return param;
    }

    function getDecStartDay(dp)
    {
        var id = dp.growth_parameter.spec_id;
        var dec_start_day = 350;

        if (id >= 0)
        {
            var info = BSpecDriverData::getBSpecDriverInfo(id);
            dec_start_day = info["dec_start_day"];
        }

        return dec_start_day;
    }

    function getDecLimitDay(dp)
    {
        var id = dp.growth_parameter.spec_id;
        var dec_limit_day = 450;

        if (id >= 0)
        {
            var info = BSpecDriverData::getBSpecDriverInfo(id);
            dec_limit_day = info["dec_limit_day"];
        }

        return dec_limit_day;
    }

    function calcCondition(dp)
    {
        var id = dp.growth_parameter.spec_id;
        var dec_start_day = 350;
        var dec_limit_day = 450;
        var loop = 20;

        if (id >= 0)
        {
            var info = BSpecDriverData::getBSpecDriverInfo(id);
            loop = info["condition_loop"];
            dec_start_day = info["dec_start_day"];
            dec_limit_day = info["dec_limit_day"];
        }

        if (loop > 0)
        {
            var now = dp.growth_parameter.days % loop;
            var rate = now.toFloat() / loop;
            rate *= 2.0 * System::Math::PI;
            var wave = System::Math::sin(rate);
            var width_rate = 25.0 * (dp.growth_parameter.lv / 20.0);
            var width = 5.0 + System::Math::clamp(width_rate, 0.0, 25.0);

            var offset = 0;
            if (dp.growth_parameter.days > dec_limit_day)
                offset = -20;
            else if (dp.growth_parameter.days > dec_start_day)
            {
                var day = dp.growth_parameter.days - dec_start_day;
                var day_width = dec_limit_day - dec_start_day;
                var day_rate = day.toFloat() / day_width;
                offset = -(day_rate * 20.0);
            }

            dp.growth_parameter.condition = ((width * wave) + offset).toInt();
            dp.growth_parameter.condition = __toplevel__::System::Math::clamp(dp.growth_parameter.condition, -30, 30);
        }
        else
        {
            dp.growth_parameter.condition = 0;
        }

        if (dp.growth_parameter.days > dec_limit_day)
            dp.growth_parameter.dec_master_rate = 20;
        else if (dp.growth_parameter.days > dec_start_day)
        {
            var day = dp.growth_parameter.days - dec_start_day;
            var day_width = dec_limit_day - dec_start_day;
            var day_rate = day.toFloat() / day_width;
            dp.growth_parameter.dec_master_rate = (20 * day_rate).toInt();
        }
    }
}
