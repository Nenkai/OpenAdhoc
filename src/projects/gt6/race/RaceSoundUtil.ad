













class RaceBGM
{
    attribute sBGMPlayFlags = 0;
    attribute sBGMCode;
    attribute sQuickBeforeCode = "quick_before";
    attribute sQuickAfterCode = "quick_after";
    attribute sStartCountCodes = ["count_s", "count_d", "count_d", "count_d"];
    attribute sTimeLimitCountCodes = [];

    static sBGMPlayTypeMap = [
        gtengine::StartType::GRID : 4,
        gtengine::StartType::ROLLING : 2,
        gtengine::StartType::PIT : 2 | 4,
        gtengine::StartType::ATTACK : 4,
        gtengine::StartType::DISPERSED : 2,
        gtengine::StartType::COURSEINFO : 2,
        gtengine::StartType::ROLLING2 : 2,
        gtengine::StartType::SAMEGRID : 2,
        gtengine::StartType::ROLLING3 : 2,
        gtengine::StartType::COURSEINFO_ROLLING : 2,
        gtengine::StartType::STANDING : 4,
        gtengine::StartType::ROLLING_NOLIMIT : 2,
        gtengine::StartType::FREE : 2,
        gtengine::StartType::STANDING_L : 4,
        gtengine::StartType::STANDING_R : 4,
        gtengine::StartType::PITWORK : 2,
        gtengine::StartType::ROLLING_DL : 4,
        gtengine::StartType::ROLLING_DR : 4,
        gtengine::StartType::GRID_FLYING : 4,
        gtengine::StartType::PITIN : 2,
        gtengine::StartType::RALLY : 4,
        gtengine::StartType::STANDING_CENTER : 4,
    ];

    method __init__()
    {
        self.sBGMPlayFlags = 0;
        self.sBGMCode = "racing";
    }

    method setBGMCode(code)
    {
        self.sBGMCode = code;
    }

    method setQuickBGMCode(before_code, after_code)
    {
        self.sQuickBeforeCode = before_code;
        self.sQuickAfterCode = after_code;
    }

    method setStartCoundDownCodes(array)
    {
        sStartCountCodes = array;
    }

    method setTimeLimitCountDownCodes(array)
    {
        sTimeLimitCountCodes = array;
    }

    method setup_bgm_condition(rp, is_demo, is_spectator_mode)
    {
        if (is_demo || is_spectator_mode)
            self.sBGMPlayFlags = 2;
        else
        {
            var flags = sBGMPlayTypeMap[rp.start_type];
            if (flags == nil)
                flags = 0;

            if (flags & 1)
            {
                if (rp.time_to_start < 12 * 1000)
                    flags &= ~1;
            }

            self.sBGMPlayFlags = flags;
        }
    }

    method onBeginRaceProject(race_operator)
    {
        if (race_operator.isTheater())
        {
            SoundUtil::BGMPlayGroup(SoundUtil::SCENE_REPLAY, self.sBGMCode, nil, 0.0, 3.0);
        }
    }

    method onRaceRootInitialize(is_demo, is_spectator_mode, is_online, enable_starting_grid)
    {
        if (is_online && enable_starting_grid)
            self.sBGMPlayFlags = 8;
        else
        {
            var rp = ORG.getCurrentRaceParameter();
            setup_bgm_condition(rp, is_demo, is_spectator_mode);
        }

        if (self.sBGMPlayFlags & 8)
        {
            SoundUtil::BGMPlayGroup(is_demo ? SoundUtil::SCENE_REPLAY : SoundUtil::SCENE_RACE,
                self.sBGMCode, nil, 0.0, 3.0);
        }
    }

    method onStartSession(is_demo, is_spectator_mode)
    {
        var rp = ORG.getCurrentRaceParameter();
        setup_bgm_condition(rp, is_demo, is_spectator_mode);
    }

    method onStartRaceRequest(is_demo, game_mode)
    {
        if (self.sBGMPlayFlags & 2)
        {
            SoundUtil::BGMPlayGroup(is_demo ? SoundUtil::SCENE_REPLAY : SoundUtil::SCENE_RACE,
                self.sBGMCode, nil, 0.0, 3.0);
        }
        else if (self.sBGMPlayFlags & 1)
        {
            var group = game_mode == gtengine::GameMode::LICENSE ? "license_start" : "start";
            SoundUtil::RaceBGMPlayGroup(group, is_demo, SoundUtil::REPEAT_OFF);
        }
    }

    method onStartVehicleDefault(is_demo)
    {
        if (self.sBGMPlayFlags & 4)
        {
            SoundUtil::BGMPlayGroup(is_demo ? SoundUtil::SCENE_REPLAY : SoundUtil::SCENE_RACE,
                self.sBGMCode, nil, 0.0, 3.0);
        }
    }

    method onQuickRootInitialize(is_before)
    {
        if (!SoundUtil::BGMIsPlaying())
            SoundUtil::MenuBGMCrossfadeGroup(true == is_before ? self.sQuickBeforeCode : self.sQuickAfterCode, 0.0, 3.0);
    }

    method onCompleteRaceDefault(result, is_demo)
    {
        if (is_demo == true)
            return;

        var pair = finish_bgm_table_default.find(result);
        var code = pair == nil ? "finish_other" : pair[1];
        playJingle(code, is_demo);
    }

    static finish_bgm_table_default = [
        gtengine::FinishResult::RANK_1 : "finish_1",
        gtengine::FinishResult::RANK_2 : "finish_2",
        gtengine::FinishResult::RANK_3 : "finish_3",
        gtengine::FinishResult::RANK_4 : "finish_4",
        gtengine::FinishResult::RANK_5 : "finish_5",
        gtengine::FinishResult::RANK_6 : "finish_6",
        gtengine::FinishResult::WIN : "finish_win",
        gtengine::FinishResult::LOSE : "finish_lose",
    ];

    method playJingle(code, is_demo)
    {
        SoundUtil::BGMPlayGroup(SoundUtil::SCENE_MENU, code, false);
    }

    method onStartCountDown(count)
    {
        if (count < sStartCountCodes.size)
            main::sound.play(sStartCountCodes[count]);
    }

    method onTimeLimitCountDown(count)
    {
        if (count < sTimeLimitCountCodes.size)
            main::sound.play(sTimeLimitCountCodes[count]);
    }
}