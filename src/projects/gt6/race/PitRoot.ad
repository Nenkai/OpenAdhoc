













module ROOT
{
    hidden.visible = false;

    static sAlreadyOpen = false;

    attribute sPitStrategy;
    class Data
    {
        attribute invisible_driver;
        attribute invisible_tire_f;
        attribute invisible_tire_r;
        attribute invisible_gas;
        attribute invisible_special_gas;
        attribute invisible_nos;
        attribute invisible_air_f;
        attribute invisible_air_r;
        attribute insensitive_driver;
        attribute insensitive_tire_f;
        attribute insensitive_tire_r;
        attribute insensitive_gas;
        attribute insensitive_special_gas;
        attribute insensitive_nos;
        attribute insensitive_air_f;
        attribute insensitive_air_r;
        attribute slot_id;
        attribute cp;
        attribute modal_page;
        attribute frontDF;
        attribute rearDF;

        method __init__()
        {
            self.invisible_driver = true;
            self.invisible_tire_f = false;
            self.invisible_tire_r = false;
            self.invisible_gas = false;
            self.invisible_special_gas = true;
            self.invisible_nos = true;
            self.invisible_air_f = false;
            self.invisible_air_r = false;
            self.insensitive_driver = false;
            self.insensitive_tire_f = false;
            self.insensitive_tire_r = false;
            self.insensitive_gas = false;
            self.insensitive_special_gas = false; // Twice, normal apparently
            self.insensitive_nos = false;
            self.insensitive_air_f = false;
            self.insensitive_air_r = false;
            self.frontDF = false;
            self.rearDF = false;
            self.cp = nil;
            self.modal_page = nil;
        }
    }

    attribute sData;

    method open(context, data, pit_strategy)
    {
        var cp = ORG.getEntriedCarParameter(data.slot_id);
        if (cp == nil)
            return;

        sAlreadyOpen = true;
        
        ORG.setSaveSequence(true);

        self.sPitStrategy = pit_strategy;
        data.cp = cp;

        if (!data.invisible_driver)
        {
            var drv_cnt = 1;
            var account_id = ORG.getAccountID(data.slot_id);

            for (var i = 1; i < 4; ++i)
            {
                if (RaceOperator.checkValidDriver(account_id, i))
                    drv_cnt += 1;
            }

            data.invisible_driver = drv_cnt <= 1;
        }

        self.sData = data;
        ROOT::FadeActor.out = true;
        ROOT::FadeActor.warp();

        ROOT.setFocus(SettingFrame::Pane::Foot::OK);
        
        context.cursor_visible = true;
        data.modal_page = SequenceUtil::ModalPage(context, ROOT);
        data.modal_page.open();
    }

    method close(context)
    {
        ROOT.setFocus(nil);
        ROOT::FadeActor.out = true;
        context.sync(0.25);
        
        if (self.sData.modal_page != nil)
        {
            self.sData.modal_page.close();
            self.sData.modal_page = nil;
        }

        if (gSequenceCondition.enable_director_command && !gSequenceCondition.is_buffer_replay_mode)
            context.cursor_visible = false;
        else
            context.cursor_visible = false;

        self.sData = nil;

        ORG.setSaveSequence(false);

        sAlreadyOpen = false;
    }

    method abort(context, apply)
    {
        if (ROOT.sData != nil)
        {
            if (apply)
            {
                SettingFrame::Pane::Foot::OK.onActivate(context);
            }
            else
            {
                ORG.startVehiclePitWork(ROOT.sData.slot_id, nil);
                ROOT.close(context);
                ROOT.sData = nil;
            }
        }
    }

    method get_course_condition(course_code, cp)
    {
        if (course_code != gtengine::MSpecDB::NO_CODE)
        {
            return gtengine::MSpecDB::getCourseCondition(course_code);
        }
        else if (cp != nil)
        {
            |var f_tire, var r_tire| = cp.getTireCategories();
            return gtengine::MSpecDB::getCourseConditionFromTire(f_tire);
        }
        else
            return gtengine::CourseCondition::DRY;
    }

    attribute sTireListFront;
    attribute sTireListRear;
    attribute sSpecialGasList;
    attribute sNosList;

    method get_tire_list(is_front)
    {
        var data = ROOT.sData;
        return data.cp.getAvailableTireListInRace(is_front);
    }

    method get_tire_key_list(tire_list)
    {
        var tire_key_list = [
            "TIRE_COMFORT_HARD",
            "TIRE_COMFORT_MEDIUM",
            "TIRE_COMFORT_SOFT",
            "TIRE_SPORTS_HARD",
            "TIRE_SPORTS_MEDIUM",
            "TIRE_SPORTS_SOFT",
            "",
            "TIRE_RACING_HARD",
            "TIRE_RACING_MEDIUM",
            "TIRE_RACING_SOFT",
            "",
            "TIRE_RAIN_INTERMEDIATE",
            "TIRE_RAIN_HEAVY_WET",
            "TIRE_DIRT",
            "TIRE_SNOW",
        ];

        var list = Array(tire_list.size);
        for (var i = 0; i < tire_list.size; ++i)
        {
            var index = tire_list[i];
            if (index != -1)
                list[i] = tire_key_list[index];
            else
                list[i] = "TIRE_NO_CHANGE";
        }

        return list;
    }

    method get_tire_index(is_front, tire)
    {
        var list = is_front ? ROOT.sTireListFront : ROOT.sTireListRear;
        for (var i = 0; i < list.size; ++i)
        {
            if (list[i] == tire)
                return i;
        }

        return EVENTRESULT_CONTINUE;
    }

    method onTick(context)
    {

    }

    method forceMenuClose(context)
    {
        if (sAlreadyOpen)
            SettingFrame::Pane::Foot::OK.onActivate(context); 
    }

    method onInitialize(context)
    {
        ROOT.navigate_insensitive = true;

        SettingFrame::Pane::ScrolledBody::clip::space.initialize(context, self.sData, self.sPitStrategy);

        SettingFrame::Pane::Foot::Cancel.visible = ORG.isEnabledSuspendRace() && ORG.isResumedRace() == false;

        if (gSequenceCondition.enable_director_command && !gSequenceCondition.is_buffer_replay_mode)
            SettingFrame::Pane::ScrolledBody::clip::space::BSpecAttention.visible = true;
        else
            SettingFrame::Pane::ScrolledBody::clip::space::BSpecAttention.visible = false;

        if (SettingFrame::Pane::ScrolledBody::clip::space.getVisibleItemCount() < 1)
        {
            var event = menu::MFunctionEvent(self.abort, context, false);
            context.rushEvent(event);
        }
    }

    method onFinalize(context)
    {
        SettingFrame::Pane::ScrolledBody::clip::space.finalize(context);
    }

    method onCancel(context)
    {
        main::sound.play("disable");
        return EVENTRESULT_FILTER;
    }

    method apply(context)
    {
        SettingFrame::Pane::ScrolledBody::clip::space.apply(context, self.sData);
    }

    module SettingFrame::Pane::ScrolledBody::clip::space
    {
        method initialize(context, data, ps)
        {
            Driver.visible = !data.invisible_driver;
            if (Driver.visible)
            {
                var account_id = ORG.getAccountID(data.slot_id);
                var name_list = [];

                for (var i = 0; i < 4; i++)
                {
                    if (RaceOperator.checkValidDriver(account_id, i))
                    {
                        var dp = RaceOperator.getAccountDriverParameter(account_id, i);
                        name_list += ["%{dp.display_name}"];
                    }
                }

                OptionMenuUtil::initialize(context, ROOT, Driver::OptionMenu, 
                    hidden::PulldownItem, name_list, nil);

                Driver::OptionMenu.setIndex(context, ps.driver_index);
                Driver::OptionMenu.insensitive = data.insensitive_driver;
            }

            TireF.visible = !data.invisible_tire_f;
            if (TireF.visible)
            {
                ROOT.sTireListFront = get_tire_list(true);
                OptionMenuUtil::initialize(context, ROOT, TireF::OptionMenu, 
                    hidden::PulldownItem, get_tire_key_list(ROOT.sTireListFront), "Setting");

                var index_f = get_tire_index(true, ps.front_tire);
                TireF::OptionMenu.setIndex(context, index_f);
                TireF::OptionMenu.insensitive = data.insensitive_tire_f;
                TireF.insensitive = data.insensitive_tire_f;
            }

            TireR.visible = !data.invisible_tire_r;
            if (TireR.visible)
            {
                ROOT.sTireListRear = get_tire_list(false);
                OptionMenuUtil::initialize(context, ROOT, TireR::OptionMenu, 
                    hidden::PulldownItem, get_tire_key_list(ROOT.sTireListRear), "Setting");

                var index_r = get_tire_index(false, ps.rear_tire);
                TireR::OptionMenu.setIndex(context, index_r);
                TireR::OptionMenu.insensitive = data.insensitive_tire_r;
                TireR.insensitive = data.insensitive_tire_r;
            }

            Gas.visible = !data.invisible_gas;
            if (Gas.visible)
                Gas.visible = ps.fuel_amount != 0 || ps.fuel_tank_size != 0;

            if (Gas.visible)
            {
                var max_fuel = (ps.fuel_tank_size - ps.fuel_amount) + 1;
                Gas::slider.range = [0, max_fuel];
                Gas::slider.display_min = 0;
                Gas::slider.display_max = max_fuel;
                Gas::slider.index = ps.amount_of_petrol;
                Gas::slider.unit_text = " " + context.translate(ROOT, "Unit", "LITER");
                Gas::slider.step_thr = 10;
                Gas::slider.setup(context);
                Gas::slider.insensitive = data.insensitive_gas;
            }

            if (!data.invisible_special_gas)
            {
                ROOT.sSpecialGasList = ["special_gasoline_01", "special_gasoline_02", "special_gasoline_03"];
                if (ROOT.sSpecialGasList.size > 1)
                {
                    OptionMenuUtil::initialize(context, ROOT, SpecialGAS::OptionMenu, 
                        hidden::PulldownItem, ROOT.sSpecialGasList, "GameItem");

                    SpecialGAS::OptionMenu.setIndex(context, 0);
                    SpecialGAS::OptionMenu.insensitive = data.insensitive_special_gas;
                    SpecialGAS.visible = true;
                }
                else
                    SpecialGAS.visible = false;
            }
            else
                SpecialGAS.visible = false;

            if (!data.invisible_nos)
            {
                ROOT.sNosList = ["nos_01", "nos_02", "nos_03", "nos_04", "nos_05", "nos_06", "nos_07"];
                if (ROOT.sNosList.size > 1)
                {
                    OptionMenuUtil::initialize(context, ROOT, NOS::OptionMenu, 
                        hidden::PulldownItem, ROOT.sNosList, "GameItem");
    
                    NOS::OptionMenu.setIndex(context, 0);
                    NOS::OptionMenu.insensitive = data.insensitive_nos;
                    NOS.visible = true;
                }
                else
                    NOS.visible = false;
            }
            else
                NOS.visible = false;
                
            DownForceF.visible = data.invisible_air_f;
            DownForceR.visible = data.invisible_air_r;

            if (DownForceF.visible || DownForceR.visible)
            {
                var cp = data.cp;
                cp.beginSetting();
                var racing_modify_info = cp.getSettingInfoRacingModify();
                if (DownForceF.visible)
                {
                    DownForceF::slider.range = [racing_modify_info.clMINF, racing_modify_info.clMAXF];
                    DownForceF::slider.index = cp.FrontCl;
                    self.frontDF = true;
                    DownForceF::slider.setup(context);
                    DownForceF::slider.insensitive = data.insensitive_air_f;
                }

                if (DownForceR.visible)
                {
                    DownForceR::slider.range = [racing_modify_info.clMINR, racing_modify_info.clMAXR];
                    DownForceR::slider.index = cp.RearCl;
                    self.rearDF = true;
                    DownForceR::slider.setup(context);
                    DownForceR::slider.insensitive = data.insensitive_air_r;
                }

                cp.endSetting();
            }
        }

        method finalize(context)
        {
            if (Driver.visible)
                OptionMenuUtil::finalize(context, Driver::OptionMenu);

            if (TireF.visible)
                OptionMenuUtil::finalize(context, TireF::OptionMenu);

            if (TireR.visible)
                OptionMenuUtil::finalize(context, TireR::OptionMenu);

            if (SpecialGAS.visible)
                OptionMenuUtil::finalize(context, SpecialGAS::OptionMenu);

            if (NOS.visible)
                OptionMenuUtil::finalize(context, NOS::OptionMenu);
        }

        method getVisibleItemCount()
        {
            var count = 0;

            var list = [
                Driver,
                TireF,
                TireR,
                Gas,
                SpecialGAS,
                NOS,
                DownForceF,
                DownForceR
            ];

            foreach (var item in list)
            {
                if (item.visible)
                    ++count;
            }

            return count;
        }

        method apply(context, data)
        {
            var driver_idx = Driver.visible ? Driver::OptionMenu.index : -1;
            var front_tire = TireF.visible ? ROOT.sTireListFront[TireF::OptionMenu.index] : -1;
            var rear_tire = TireR.visible ? ROOT.sTireListRear[TireR::OptionMenu.index] : -1;
            var gas = Gas::slider.index;
            var special_gas = SpecialGAS::OptionMenu.index;
            var nos = NOS::OptionMenu.index;
            var front_df = data.frontDF ? DownForceF::slider.index : -1;
            var rear_df = data.rearDF ? DownForceR::slider.index : -1;

            var ps = ROOT.sPitStrategy;
            if (ps.fuel_tank_size == 0)
                gas = 0;

            var pit_stop_time = 1000.0;
            ps.front_tire = front_tire;
            ps.rear_tire = rear_tire;
            ps.front_df = front_df;
            ps.rear_df = rear_df;
            ps.driver_index = driver_idx;
            ps.amount_of_petrol = gas;
            ps.charge_nos = nos;
            ps.fuel_type = special_gas;
            ps.target_time = pit_stop_time / 100;
            ps.next_mileage = -1;

            ORG.startVehiclePitWork(data.slot_id, ps);
        }
    }

    module SettingFrame::Pane::Foot
    {
        module OK
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                ROOT.apply(context);
                ROOT.close(context);
                return EVENTRESULT_STOP;
            }
        }

        module Cancel
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                ORG.pauseInSaveSequence(true);

                var res = DialogUtil::openConfirmDialog(context, DialogUtil::QUERY, 
                    manager.translate("QuickMenu", "SUSPEND_EXECUTE"));
                
                if (res)
                {
                    if (PluginModule.defined("onSuspendRace"))
                        PluginModule::onSuspendRace(context);
                }

                ORG.pauseInSaveSequence(false);
                return EVENTRESULT_FILTER;
            }
        }
    }
}