module PROJECT::ROOT
{
	function ShowArrow(widget, isActive)
	{
		if (isActive)
		{
			ROOT::top.sx  = widget.sx + 9;
			ROOT::top.sy  = widget.sy - 12;
			ROOT::down.sx = widget.sx + 9;
			ROOT::down.sy = widget.sy + 24;
	
			ROOT::top.visible  = true;
			ROOT::down.visible = true;
		}
		else
		{
			ROOT::top.visible  = false;
			ROOT::down.visible = false;
		}
	}
	
	function SetInputFocus(context, event, widget)
	{
		var last_focus = ROOT.getFocusedWidget();
		if (!last_focus.active)
			return EVENTRESULT_CONTINUE;
	
		if (event.keysym == PS2_PAD_CTRL_L3_RIGHT)
		{
			var next_focus = nil;
	
			if (last_focus == widget["ip0"])
				next_focus = widget["ip1"];
			else if (last_focus == widget["ip1"])
				next_focus = widget["ip2"];
			else if (last_focus == widget["ip2"])
				next_focus = widget["ip3"];
			else if (last_focus == widget["ip3"])
				next_focus = widget["ip0"];
	
			if (next_focus != nil)
			{
				last_focus.active = false;
				next_focus.active = true;
				ROOT.setFocus(next_focus);
			}

			return EVENTRESULT_FILTER;
		}
		else if (event.keysym == PS2_PAD_CTRL_L3_LEFT)
		{
			var next_focus = nil;
	
			if (last_focus == widget["ip0"])
				next_focus = widget["ip3"];
			else if (last_focus == widget["ip1"])
				next_focus = widget["ip0"];
			else if (last_focus == widget["ip2"])
				next_focus = widget["ip1"];
			else if (last_focus == widget["ip3"])
				next_focus = widget["ip2"];
	
			if (next_focus != nil)
			{
				last_focus.active = false;
				next_focus.active = true;
				ROOT.setFocus(next_focus);
			}

			return EVENTRESULT_FILTER;
		}
		else
		{
			return EVENTRESULT_CONTINUE;
		}
	}



	function GetAddress(widget)
	{
		var res = widget["ip0"].value.toString() + "." +
				widget["ip1"].value.toString() + "." +
				widget["ip2"].value.toString() + "." +
				widget["ip3"].value.toString();
		return res;
	}
	
	function SetAddress(widget, addr)
	{
		var array = addr.split(".");
		if (array.size == 4)
		{
			var ip0, ip1, ip2, ip3;
			[ip0, ip1, ip2, ip3] = array;
	
			widget["ip0"].value = ip0.toInt();
			widget["ip1"].value = ip1.toInt();
			widget["ip2"].value = ip2.toInt();
			widget["ip3"].value = ip3.toInt();
		}
	}



	function GetConfig(context, conf)
	{
		conf.use_auth     = 1 - Pane::Authentication::OptionMenu.index;
		conf.auth_username = Pane::Username::Input::input.value;
		conf.auth_password = Pane::Password::Input::input.value;
	
		conf.use_dhcp = 1 - Pane::DHCP::OptionMenu.index;
		conf.ip       = GetAddress(Pane::IpAddress::Input);
		conf.netmask  = GetAddress(Pane::Netmask::Input);
		conf.gateway  = GetAddress(Pane::Gateway::Input);
	
		conf.use_auto_dns = 1 - Pane::DNS::OptionMenu.index;
		conf.dns0         = GetAddress(Pane::DNS0::Input);
		conf.dns1         = GetAddress(Pane::DNS1::Input);
	
		conf.ModifyProperties();
	}
	
	function SetConfig(context, conf)
	{
		Pane::Authentication::OptionMenu.setIndex(context, 1 - conf.use_auth);
		Pane::Username::Input::input.value = conf.auth_username;
		Pane::Password::Input::input.value = conf.auth_password;
	
		Pane::DHCP::OptionMenu.setIndex(context, 1 - conf.use_dhcp);
		SetAddress(Pane::IpAddress::Input, conf.ip);
		SetAddress(Pane::Netmask::Input,  conf.netmask);
		SetAddress(Pane::Gateway::Input,  conf.gateway);
	
		Pane::DNS::OptionMenu.setIndex(context, 1 - conf.use_auto_dns);
		SetAddress(Pane::DNS0::Input, conf.dns0);
		SetAddress(Pane::DNS1::Input, conf.dns1);
	}
	
	function UpdateSensitive()
	{
		var pppoe = (1 - Pane::Authentication::OptionMenu.index);
	
		if (pppoe)
		{
			Pane::Username::Input.insensitive = false;
			Pane::Password::Input.insensitive = false;
	
			Pane::DHCP::OptionMenu.insensitive       = true;
			Pane::IpAddress::Input.insensitive       = true;
			Pane::Netmask::Input.insensitive         = true;
			Pane::Gateway::Input.insensitive         = true;
		}
		else
		{
			Pane::Username::Input.insensitive = true;
			Pane::Password::Input.insensitive = true;
	
			Pane::DHCP::OptionMenu.insensitive = false;
	
			var dhcp = (1 - Pane::DHCP::OptionMenu.index);
			Pane::IpAddress::Input.insensitive = dhcp;
			Pane::Netmask::Input.insensitive   = dhcp;
			Pane::Gateway::Input.insensitive   = dhcp;
		}

		var dns = (1 - Pane::DNS::OptionMenu.index);
		Pane::DNS0::Input.insensitive = dns;
		Pane::DNS1::Input.insensitive = dns;
	}

	function OnUpdate(context)
	{
		Storage::Open(context, ConnectRoot::gPath, ROOT, "OnUpdate", 2);
	
		if (!Storage::IsConnected())
		{
			start_page(context, ConnectRoot);
		}
	}
	
	function onInitialize(context)
	{
		Pane::Title::title.adjustScale();
		Pane::Authentication::label.adjustScale();
		Pane::DHCP::label.adjustScale();
		Pane::DNS::label.adjustScale();
		Pane::Netmask::label.adjustScale();
	
		ROOT.setFocus(Pane::Name::Input::input);
		Pane::Name::Input::input.value = ConnectRoot::gIfcName;

		for (var i = 0; i < ConnectRoot::gIfcName.size; i++)
			Pane::Name::Input::input.left();
	
		SetConfig(context, gNetcnf);
		UpdateSensitive();
	
		var event = main::menu::MScriptEvent(context, ROOT, "OnUpdate");
		context.pushEvent(event);
	}
	
	function onFinalize(context)
	{
		Storage::Close();
	}
	
	function onCancel(context, event, item)
	{
		main::sound.play("cancel");
		start_page(context, ConnectRoot);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Pane::Authentication::OptionMenu
{
    function onValueChanged(context, event, item)
    {
        main::sound.play("ok");
        UpdateSensitive();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::DHCP::OptionMenu
{
    function onValueChanged(context, event, item)
    {
        main::sound.play("ok");
        UpdateSensitive();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::IpAddress::Input
{
    function onKeyPress(context, event)
    {
        ROOT::SetInputFocus(context, event, Input);
		return;
    }
}

module PROJECT::ROOT::Pane::IpAddress::Input::ip0
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip0, isActive);
    }
}

module PROJECT::ROOT::Pane::IpAddress::Input::ip1
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip1, isActive);
    }
}

module PROJECT::ROOT::Pane::IpAddress::Input::ip2
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip2, isActive);
    }
}

module PROJECT::ROOT::Pane::IpAddress::Input::ip3
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip3, isActive);
    }
}

module PROJECT::ROOT::Pane::Netmask::Input
{
    function onKeyPress(context, event)
    {
        ROOT::SetInputFocus(context, event, Input);
		return;
    }
}

module PROJECT::ROOT::Pane::Netmask::Input::ip0
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip0, isActive);
    }
}

module PROJECT::ROOT::Pane::Netmask::Input::ip1
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip1, isActive);
    }
}

module PROJECT::ROOT::Pane::Netmask::Input::ip2
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip2, isActive);
    }
}

module PROJECT::ROOT::Pane::Netmask::Input::ip3
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip3, isActive);
    }
}

module PROJECT::ROOT::Pane::Gateway::Input
{
    function onKeyPress(context, event)
    {
        ROOT::SetInputFocus(context, event, Input);
		return;
    }
}

module PROJECT::ROOT::Pane::Gateway::Input::ip0
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip0, isActive);
    }
}

module PROJECT::ROOT::Pane::Gateway::Input::ip1
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip1, isActive);
    }
}

module PROJECT::ROOT::Pane::Gateway::Input::ip2
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip2, isActive);
    }
}

module PROJECT::ROOT::Pane::Gateway::Input::ip3
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip3, isActive);
    }
}

module PROJECT::ROOT::Pane::DNS::OptionMenu
{
    function onValueChanged(context, event, item)
    {
        main::sound.play("ok");
        UpdateSensitive();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::DNS0::Input
{
    function onKeyPress(context, event)
    {
        ROOT::SetInputFocus(context, event, Input);
		return;
    }
}

module PROJECT::ROOT::Pane::DNS0::Input::ip0
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip0, isActive);
    }
}

module PROJECT::ROOT::Pane::DNS0::Input::ip1
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip1, isActive);
    }
}

module PROJECT::ROOT::Pane::DNS0::Input::ip2
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip2, isActive);
    }
}

module PROJECT::ROOT::Pane::DNS0::Input::ip3
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip3, isActive);
    }
}

module PROJECT::ROOT::Pane::DNS1::Input
{
    function onKeyPress(context, event)
    {
        ROOT::SetInputFocus(context, event, Input);
		return;
    }
}

module PROJECT::ROOT::Pane::DNS1::Input::ip0
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip0, isActive);
    }
}

module PROJECT::ROOT::Pane::DNS1::Input::ip1
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip1, isActive);
    }
}

module PROJECT::ROOT::Pane::DNS1::Input::ip2
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip2, isActive);
    }
}

module PROJECT::ROOT::Pane::DNS1::Input::ip3
{
    function onModeToggled(context, isActive)
    {
        ROOT::ShowArrow(ip3, isActive);
    }
}

module PROJECT::ROOT::Pane::Buttons::Cancel
{
    function onActivate(context, event, item)
    {
        main::sound.play("cancel");
        start_page(context, ConnectRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Buttons::OK
{
    function save(context, args)
    {
        var netcnf, path, ifc;
        [netcnf, path, ifc] = args;

        var ret = 0;

        if (ConnectRoot::gCombination == "")
        {
            ret = netcnf.AddFiles(path, ifc, gVendor, gProduct);
        }
        else
        {
            ret = netcnf.EditFiles(path, ConnectRoot::gCombination, ifc);
        }
		return ret;
    }

    function onActivate(context, event, item)
    {
        main::sound.play("ok");

        var ifc = ROOT::Pane::Name::Input::input.value;
        if (ifc == "")
        {
            openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "NAME_CONFIG"));
            ROOT.setFocus(ROOT::Pane::Name::Input::input);
            return EVENTRESULT_FILTER;
        }

        var array = ifc.split(",");
        if (array.size != 1)
        {
            openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "COMMA_USED"));
            ROOT.setFocus(ROOT::Pane::Name::Input::input);
            return EVENTRESULT_FILTER;
        }

        GetConfig(context, gNetcnf);

        var ret = openProcessDialog(
            context,
            context.translate(ConnectRoot, "SAVING"),
            save,
            [gNetcnf, ConnectRoot::gPath, ifc]
        );

        ConnectRoot::CheckError(context, ret);

        start_page(context, ConnectRoot);
        return EVENTRESULT_FILTER;
    }
}