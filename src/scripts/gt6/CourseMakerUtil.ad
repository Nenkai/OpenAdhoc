

//---------------------------------------------------------------------------------------
// CourseMakerUtil.ad
//
// Utility module for getting teds, decrypting them
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module CourseMakerUtil
{
    function getSampleCourseList(context)
    {
        var course_list = [];
        var sample_list = MENUDB.query("SELECT * FROM t_coursemaker_sample ORDER BY CourseID");
        var dummy = pdistd::MTime();
        dummy.setForCourse(0);

        foreach (var sample in sample_list)
        {
            var ted = sample.Ted;
            course_list.push([
                "course_id" : sample.CourseID,
                "create_time" : dummy,
                "update_time" : dummy,
                "user_id" : "---",
                "status" : 0,
                "photo_id" : ted,
                "title" : manager.translate("CourseMaker", "SAMPLE_%{ted.upcase()}_TITLE"),
                "comment" : manager.translate("CourseMaker", "SAMPLE_%{ted.upcase()}_COMMENT"),
                "title_hidden" : 0,
                "comment_hidden" : 0,
                "photo_hidden" : 0,
                "theme" : "t_scenery_%{sample.Theme}",
                "length" : sample.Length,
                "corners" : sample.Corner,
                "one_way" : sample.OneWay,
                "source_user_id" : "---",
                "straight" : sample.Straight,
                "height" : sample.Elevation,
                "ted" : sample.Ted,
            ]);
        }

        return course_list;
    }

    function isSampleCourse(course_id)
    {
        return course_id < 1000000;
    }

    function getTedPath(context, course)
    {
        var course_id = course["course_id"];
        var ted_path = "";

        if (!isSampleCourse(course_id))
        {
            var request = main::Course.requestTed(course_id, function(args) {});
            if (Grim2Util::join(context, request))
                ted_path = main::Course.getTedPath(course_id);
        }
        else
            ted_path = "/ted/gt6/%s.ted".format(course["ted"]);

        return ted_path;
    }

    function isTed(ted)
    {
        var header = "GT6TED".getByteData();
        var is_ted = true;

        for (var i = 0; i < header.size; ++i)
        {
            if (ted[i] != header[i])
            {
                is_ted = false;
                break;
            }
        }

        return is_ted;
    }

    function decrypt(ted_raw)
    {
        var ted = ted_raw.getByteData();

        // Already decrypted?
        if (isTed(ted))
            return ted_raw;

        var key0 = "5PxTj5iAjgH6SWOeQlsD67BAH";
        var k = "E25geirEPHpc4WG2FnzacMqru";
        var key1 = "PWWPVhbAvCVP95S2v6PI1yG68";

        var src = ted;
        var key = k.getByteData();
        var dest = ByteData(16, src.size);
        
        var j = 0;
        for (var i = 0; i < src.size; ++i)
        {
            if (j < key.size)
                j++;
            else
                j = 1; // End of key reached, go back to beginning

            dest[i] = src[i] ^ key[j - 1];
        }

        var result = pdistd::Inflate(dest);
        return result;
    }
}
