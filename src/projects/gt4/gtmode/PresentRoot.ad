











module PROJECT::ROOT
{
    function makeColumn(i)
    {
        if (i >= PresentData::condition_carlist.size)
        {
            return;
        }

        return [ 
            PresentData::condition_carlist[i],
            PresentData::detail_carlist[i],
            PresentData::type_carlist[i],
            PresentData::content_carlist[i],
            PresentData::content2_carlist[i],
        ];
    }

    function makeTimeColumn(i)
    {
        if (i >= PresentTimeData::condition_carlist.size)
        {
            return;
        }

        return [ 
            PresentTimeData::condition_carlist[i],
            PresentTimeData::detail_carlist[i],
            PresentTimeData::type_carlist[i],
            PresentTimeData::content_carlist[i],
            PresentTimeData::content2_carlist[i],
        ];
    }

    function get_result_index(result)
    {
        var idx = result.toInt();
        if (idx < 1 || idx > 8)
            idx = 100;
        
        return idx;
    }

    function win(id, column)
    {
        var race = column[1];
        if (isChampionship(race))
        {
            var unit = main::game.race_record.getUnit(race);
            if (unit == nil)
            {
                return false;
            }

            var present_result = unit.present_result;
            unit.present_result = "NONE";
            return present_result == "1";
        }
        else
        {
            var list = extractSubRaceCode(race);
            if (list.size <= 0)
            {
                return false;
            }

            var can_get = true;
            var now_get = false;

            for (var i = 0; i < list.size; i++)
            {
                var race_code = list[i];
                var unit = main::game.race_record.getUnit(race_code);
                if (unit == nil)
                {
                    return false;
                }

                if (unit.present_result != "NONE")
                {
                    if (unit.spot_result != "1" && unit.present_result != "1")
                        can_get = false;

                    if (get_result_index(unit.spot_result) > get_result_index(unit.present_result))
                    {
                        unit.spot_result = unit.present_result;
                        now_get = true;
                    }

                    unit.present_result = "NONE";
                }
                else 
                {
                    if (unit.spot_result != "1")
                        can_get = false;
                }
            }

            return can_get && now_get;
        }
    }

    function license(id, column)
    {
        if (main::game.present.getByRace(id))
            return false;

        return main::game.race_record.isLicenseAllBronze(column[1]);
    }

    function all_silver(id, column)
    {
        if (main::game.present.getByRace(id))
            return false;

        var category = column[1];
        return main::game.race_record.isLicenseAllSilver(category);
    }

    function all_gold(id, column)
    {
        if (main::game.present.getByRace(id))
            return false;

        var category = column[1];
        return main::game.race_record.isLicensePerfect(category);
    }

    function mission_1st(id, column)
    {
        if (main::game.present.getByRace(id))
            return false;

        return main::game.race_record.isMissionClear(column[1], "1");
    }

    function mission_2nd(id, column)
    {
        if (main::game.present.getByRace(id))
            return false;

        return main::game.race_record.isMissionClear(column[1], "2");
    }

    function mission_3rd(id, column)
    {
        if (main::game.present.getByRace(id))
            return false;

        return main::game.race_record.isMissionClear(column[1], "3");
    }

    function achievement(id, column)
    {
        if (main::game.present.getByRace(id))
            return false;

        var [achievement, score] = getRaceEventRecordStatistics();
        return achievement >= column[1].toInt() * 10;
    }

    function weeks(id, column)
    {
        if (main::game.present.getByTime(id))
            return false;

        var week = column[1].toInt();
        return main::game.calendar.getElapsedWeek() >= week;
    }

    function makeEntitledPresentListByProject()
    {
        var list = [];
        if (!PresentData.defined("condition_carnum"))
            return list;

        var present_num = PresentData::condition_carlist.size;
        for (var i = 0; i < present_num; i++)
        {
            var column = makeColumn(i);
            var func = column[0];

            if (ROOT.defined(func))
            {
                if (ROOT[func](i, column))
                    list.push(i);
            }
            else
            {

            }
            
        }

        return list;
    }

    function makeEntitledPresentListByPage()
    {
        var list = [];
        if (!PresentTimeData.defined("condition_carnum"))
            return list;

        var present_num = PresentTimeData::condition_carlist.size;
        for (var i = 0; i < present_num; i++)
        {
            var column = makeTimeColumn(i);
            var func = ROOT[column[0]];

            if (func != nil)
            {
                if (func(i, column))
                    list.push(i);
            }
            else
            {

            }
        }

        return list;
    }

#ifdef GT4O_US_BETA
    static current_list;
    static current_idx;
    static from_page;
    static ending;
#else
    static current_list = nil;
    static current_idx = nil;
    static from_page = nil;
    static ending = nil;
#endif

    function setFadeActor(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        widget.actor = actor;
        widget.actor.period = 1.0;
        widget.actor.out = false;
        widget.actor.warp();
    }

    function setMoveActor(widget)
    {
        var actor = main::menu::MMoveActor(widget, PS2_SCREEN_W_F, widget.y);
        widget.actor = actor;
        widget.actor.ratio = 0.2;
        widget.actor.out = false;
        widget.actor.warp();
    }

    setFadeActor(Veil);
    setFadeActor(CarPane::Name);
    setMoveActor(PaperPane::Paper);

    function onInitialize(context)
    {
        ToolTip::tip.remove();
        PaperPane::Paper::label.adjustScale();
        PaperPane::Paper::label0.adjustScale();
        PaperPane::Paper::label1.adjustScale();
        PaperPane::Paper::label2.adjustScale();
        PaperPane::Paper::label3.adjustScale();
        PaperPane::Paper::label4.adjustScale();
        
        current_idx = 0;
        play(context);
    }

    function onFinalize(context)
    {
        current_list = nil;
        current_idx = nil;
        from_page = nil;
        ending = nil;
    }

    function play(context)
    {
        if (current_idx < current_list.size)
        {
            Veil.actor.out = false;
            Veil.actor.warp();

            var id = current_list[current_idx];
            main::game.present.setByRace(id);
            
            var column = makeColumn(id);
            current_idx++;

            var event = nil;

            switch (column[2])
            {
                case "car":
                    CarPane.visible = true;
                    PaperPane.visible = false;

                    event = main::menu::MScriptEvent(context, CarPane, "get_car", column);
                    break;

                case "paper":
                    CarPane.visible = false;
                    PaperPane.visible = true;

                    var category = column[1];

                    event = main::menu::MScriptEvent(context, PaperPane, "get_paper", [category]);
                    break;

                case "movie":
                    var movie = column[3];

                    event = main::menu::MScriptEvent(context, PresentRoot, "get_movie", [movie]);
                    break;

                default:
                    break;
            }

            if (event != nil)
                context.pushEvent(event);
        }
        else if (ending != nil)
        {
            CarPane::OK.visible = false;
            openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "you got ending movie"));
            var event = main::menu::MScriptEvent(context, ROOT, "get_movie", [ending]);
            context.pushEvent(event);
        }
        else
        {
            if (from_page != nil)
                start_page(context, from_page);
            else
            {
                if (main::game.major_menu_project == "gtmode" && main::game.major_menu_page != "")
                {
                        var page = PROJECT[main::game.major_menu_page];
                        main::game.major_menu_project == ""; // BUG: "==", possible bug
                        main::game.major_menu_page = "";
                        start_page(context, page);
                }
                else
                {
                    start_page(context, TopRoot);
                }
            }
        }
    }

    function get_movie(context, movie)
    {
        main::game.major_menu_project = "gtmode";
        main::game.next_menu_arg = movie;

        if (movie == "ending")
            main::game.option.can_watch_ending = true;

        start_project(context, "demo_movie");
    }
}

module PROJECT::ROOT::CarPane
{
    function get_car(context, func, race, type, car, col)
    {
        main::sound.startStreamEx("pcm", "get_car", -1, 1, main::game.option.menu_bgm_volume);
        
        CarFace.action_type = "normal";
        CarFace.visible = false;
        OK.visible = false;
        context.cursor_visible = false;
        Name.actor.out = true;
        Name.actor.warp();
        ToolTip::tip.value = "";
        Veil.actor.out = true;

        context.sync(4.0);
        Name.actor.out = false;
        Name::label.text = main::menu::MCarData::GetCarName(car);
        Name::label.adjustScale();

        context.sync(1.0);

        ending = nil;

        if (col == "ending")
        {
#ifdef GT4O_US_BETA
            if (main::menu::MSystem::GetVersionBranch() != "beta") // GT4 Online
                ending = "ending";
#else
            ending = "ending";
#endif
            col = "-";
        }

        var cg = main::menu::MCarGarage(car);
        if (col == "-")
        {
            var col_num = cg.getColorNum();
            col = main::menu::MRandom::GetValue(0, col_num);
        }
        else
            col = col.toInt() - 1;

        var no_get = "";

        if (!main::game.garage.isFull())
        {
            main::game.garage.addNewCar(car, col);
            main::game.calendar.putPresentCarEvent(car, col);
        }
        else
            var no_get = context.translate(ROOT, "since garage full you didnot get");

        main::game.setCarAvailable(car);
        main::game.incTotalPrizeCars(1);
        CarFace.visible = true;
        CarFace.car_code = car;
        CarFace.setColorIndex(col);
        CarFace::move_car(0, 1);

        switch (func)
        {
            case "gold":
                var license_category = context.translate(ROOT, "LicenseName", race.substr(0, 3) + "0000");
                var license_name = context.translate(ROOT, "LicenseName", race);
                var str = context.translate(ROOT, func);
                str = str.format(license_category + " " + license_name);
                str = str + no_get;
                ToolTip::tip.value = str;
                break;

            case "license":
            case "all_silver":
            case "all_gold":
                var license_category = context.translate(ROOT, "LicenseName", race.substr(0, 3) + "0000");
                str = context.translate(ROOT, func);
                str = str.format(license_category);
                str = str + no_get;
                ToolTip::tip.value = str;
                break;

            case "mission_1st":
            case "mission_2nd":
            case "mission_3rd":
                var str = context.translate(ROOT, func);
                var [s0, s1] = race.split(",");
                str = str.format(s0.toInt(), s1.toInt());
                str = str + no_get;
                ToolTip::tip.value = str;
                break;

            case "win":
                var event_name = getEventNameByRaceCode(context, ROOT, race);
                var str = context.translate(ROOT, func);
                str = str.format(event_name);
                str = str + no_get;
                ToolTip::tip.value = str;
                break;

            case "achievement":
                var str = context.translate(ROOT, func + "_" + race);
                ToolTip::tip.value = str;
                break;

            default:
                ToolTip::tip.value = "";
                break;
        }

        context.sync(3.0);
        OK.visible = true;
        context.cursor_visible = true;

        ROOT.setFocus(OK);
        context.flushKeyEvent();
    }
}

module PROJECT::ROOT::CarPane::CarFace
{
    function move_car(phase, warp)
    {
        if (CarFace.car_model != nil)
        {
            if (phase == false)
            {
                CarFace.car_model.motion = 1;
                if (warp == true)
                {
                    CarFace.car_model.tz = 8.5;
                    CarFace.car_model.ry = 180.0;
                    CarFace.car_model.warp();
                }

                CarFace.car_model.tx = 0.0;
                CarFace.car_model.tz = 0.0;
                CarFace.car_model.posInterpolateSpeed = 0.025;
            }
            else
            {
                CarFace.car_model.motion = 2;
                CarFace.car_model.tx = -0.9;
                CarFace.car_model.tz = 1.6;
                CarFace.car_model.ry = 185.5;
                CarFace.car_model.posInterpolateSpeed = 0.1;

                if (warp == true)
                    CarFace.car_model.warp();
            }
        }
    }
}

module PROJECT::ROOT::CarPane::OK
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();
        play(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::PaperPane
{
    function get_paper(context, category)
    {
        main::sound.startStream("pcm", "get_car");
        Paper.actor.out = true;
        Paper.actor.warp();
        
        Veil.actor.out = true;
        bg.image_path = "image/gtmode/license/" + category + ".png";
        bg.doInitialize(context);

        Paper::OK.visible = false;
        context.cursor_visible = false;
        
        Paper::Name.text = main::game.username;
        Paper::Name.adjustScale();

        Paper::License.text = context.translate(ROOT, "LicenseName", category + "0000");
        Paper::License.adjustScale();

        ToolTip::tip.value = "";

        Paper::bg.image_path = "image/gtmode/license/" + category + "_base.png";
        Paper::bg.doInitialize(context);

        context.sync(3.0);
        ToolTip::tip.value = context.translate(PresentRoot, "you got license");

        Paper.actor.out = false;
        context.sync(5.0);

        Paper::OK.visible = true;
        context.cursor_visible = true;

        ROOT.setFocus(Paper::OK);
        context.flushKeyEvent();
    }
}

module PROJECT::ROOT::PaperPane::Paper::OK
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();
        play(context);
        return EVENTRESULT_FILTER;
    }
}
