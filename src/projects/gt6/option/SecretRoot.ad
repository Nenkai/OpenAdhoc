













module ROOT
{
    method open(context)
    {
        SettingFrame.appear();
        SequenceUtil::pushPage(context, self);
    }

    method close(context)
    {
        var delay_time = SettingFrame.hide();
        SequenceUtil::popPage(context, self, delay_time);
    }

    method reflect(context)
    {
        var option = main::GAME_STATUS.user_profile.option;

        SettingFrame::Pane::ScrolledBody::clip::space::KioskMode::OptionMenu.setIndex(context, 1 - option.kiosk_mode);
        SettingFrame::Pane::ScrolledBody::clip::space::VisibleControl::PackingSpace.visible = option.kiosk_mode;

        var item_off = hidden::OFF.doCopy();
        item_off.defineStatic("tuner_code", gtengine::MSpecDB::NO_CODE);

        SettingFrame::Pane::ScrolledBody::clip::space::LimitTuner::OptionMenu::popup::vbox.appendChild(context, item_off);
        var focus_index = 0;

        var tuner_list = SPECDB.executeQuery1C("SELECT DISTINCT Tuner FROM GENERIC_CAR ORDER BY country");
        for (var i = 0; i < tuner_list.size; i++)
        {
            var tuner_code = tuner_list[i];
            var item = hidden::PulldownItem.doCopy();

            var tuner_label = SPECDB.executeQuery1R1C("SELECT TunerString FROM TUNER WHERE ID=?", [tuner_code]);
            var tuner_name = manager.translate("TunerName", tuner_label);
            item.label.text = tuner_name;
            item.defineStatic("tuner_code", tuner_code);

            SettingFrame::Pane::ScrolledBody::clip::space::LimitTuner::OptionMenu::popup::vbox.appendChild(context, item);

            if (tuner_code == option.kiosk_limit_tuner)
                focus_index = i + 1;
        }

        SettingFrame::Pane::ScrolledBody::clip::space::LimitTuner::OptionMenu.applyAppend(context);
        SettingFrame::Pane::ScrolledBody::clip::space::LimitTuner::OptionMenu.setIndex(context, focus_index);

        SettingFrame::Pane::ScrolledBody::clip::space::LimitCar::OptionMenu.setIndex(context, 1 - option.kiosk_limit_car);
        SettingFrame::Pane::ScrolledBody::clip::space::LimitEnemy::OptionMenu.setIndex(context, 1 - option.kiosk_limit_enemy);
        SettingFrame::Pane::ScrolledBody::clip::space::LimitDemoCar::OptionMenu.setIndex(context, 1 - option.kiosk_limit_democar);
        SettingFrame::Pane::ScrolledBody::clip::space::LimitCourse::OptionMenu.setIndex(context, 1 - option.kiosk_limit_course);
        SettingFrame::Pane::ScrolledBody::clip::space::Laps::slider.index = option.arcade_laps;
        SettingFrame::Pane::ScrolledBody::clip::space::TimeLimit::slider.index = option.arcade_time_limit;
        SettingFrame::Pane::ScrolledBody::clip::space::LeaveDetect::slider.index = option.timeout_count_to_topmenu;
        SettingFrame::Pane::ScrolledBody::clip::space::ResetSetting::OptionMenu.setIndex(context, 1 - main::GAME_STATUS.config.reset_setting_at_quick);
        SettingFrame::Pane::ScrolledBody::clip::space::ArcadeDemoMode::OptionMenu.setIndex(context, 1 - option.arcade_demo_mode);
        SettingFrame::Pane::ScrolledBody::clip::space::LoungeHiddenConfig::OptionMenu.setIndex(context, 1 - option.lounge_show_hidden_config);
        SettingFrame::Pane::ScrolledBody::clip::space::AISkillEasy::slider.index = option.arcade_ai_skill_easy;
        SettingFrame::Pane::ScrolledBody::clip::space::AISkillNormal::slider.index = option.arcade_ai_skill_normal;
        SettingFrame::Pane::ScrolledBody::clip::space::AISkillHard::slider.index = option.arcade_ai_skill_hard;
        SettingFrame::Pane::ScrolledBody::clip::space::EnableHMD::OptionMenu.setIndex(context, 1 - option.enableHMD);

        var check_box = SettingFrame::Pane::ScrolledBody::clip::space::VisibleControl::PackingSpace::vbox;
        check_box.SingleRace.active = option.visible_icon_singleplay;
        check_box.OpenLobby.active = option.visible_icon_open_lobby;
        check_box.GpsReplay.active = option.visible_icon_gps;
        check_box.Moon.active = !option.invalid_moon;

        var arcade_game_mode = [];
        if (GAME_STATUS.user_profile.option.visible_icon_singlerace)
            arcade_game_mode.push(gtengine::GameMode::SINGLE_RACE);

        if (GAME_STATUS.user_profile.option.visible_icon_timetrial)
            arcade_game_mode.push(gtengine::GameMode::TIME_ATTACK);

        if (GAME_STATUS.user_profile.option.visible_icon_drifttrial)
            arcade_game_mode.push(gtengine::GameMode::DRIFT_ATTACK);

        SettingFrame::Pane::ScrolledBody::clip::space::ModeSelect.setSelectItemValues(arcade_game_mode);
    }        


    method apply(context)
    {
        var option = main::GAME_STATUS.user_profile.option;

        option.kiosk_mode = 1 - SettingFrame::Pane::ScrolledBody::clip::space::KioskMode::OptionMenu.index;

        var selected_item = SettingFrame::Pane::ScrolledBody::clip::space::LimitTuner::OptionMenu.OptionMenu.getItem();
        option.kiosk_limit_tuner = selected_item.tuner_code;

        option.kiosk_limit_car = 1 - SettingFrame::Pane::ScrolledBody::clip::space::LimitCar::OptionMenu.index;
        option.kiosk_limit_enemy = 1 - SettingFrame::Pane::ScrolledBody::clip::space::LimitEnemy::OptionMenu.index;
        option.kiosk_limit_democar = 1 - SettingFrame::Pane::ScrolledBody::clip::space::LimitDemoCar::OptionMenu.index;
        option.kiosk_limit_course = 1 - SettingFrame::Pane::ScrolledBody::clip::space::LimitCourse::OptionMenu.index;
        option.arcade_laps = SettingFrame::Pane::ScrolledBody::clip::space::Laps::slider.index;
        option.arcade_time_limit = SettingFrame::Pane::ScrolledBody::clip::space::TimeLimit::slider.index;
        main::GAME_STATUS.config.reset_setting_at_quick = 1 - SettingFrame::Pane::ScrolledBody::clip::space::ResetSetting::OptionMenu.index;
        option.arcade_demo_mode = 1 - SettingFrame::Pane::ScrolledBody::clip::space::ArcadeDemoMode::OptionMenu.index;
        option.lounge_show_hidden_config = 1 - SettingFrame::Pane::ScrolledBody::clip::space::LoungeHiddenConfig::OptionMenu.index;
        option.arcade_ai_skill_easy = SettingFrame::Pane::ScrolledBody::clip::space::AISkillEasy::slider.index;
        option.arcade_ai_skill_normal = SettingFrame::Pane::ScrolledBody::clip::space::AISkillNormal::slider.index;
        option.arcade_ai_skill_hard = SettingFrame::Pane::ScrolledBody::clip::space::AISkillHard::slider.index;
        option.timeout_count_to_topmenu = SettingFrame::Pane::ScrolledBody::clip::space::LeaveDetect::slider.index;
        option.enableHMD = 1 - SettingFrame::Pane::ScrolledBody::clip::space::EnableHMD::OptionMenu.index;

        var check_box = SettingFrame::Pane::ScrolledBody::clip::space::VisibleControl::PackingSpace::vbox;
        option.visible_icon_singleplay = check_box.SingleRace.active;
        option.visible_icon_open_lobby = check_box.OpenLobby.active;
        option.visible_icon_gps = check_box.GpsReplay.active;
        option.invalid_moon = !check_box.Moon.active;

        var arcade_game_mode = SettingFrame::Pane::ScrolledBody::clip::space::ModeSelect.getSelectItemValues();
        
        GAME_STATUS.user_profile.option.visible_icon_singlerace = arcade_game_mode.indexOf(gtengine::GameMode::SINGLE_RACE) > -1;
        GAME_STATUS.user_profile.option.visible_icon_timetrial = arcade_game_mode.indexOf(gtengine::GameMode::TIME_ATTACK) > -1;
        GAME_STATUS.user_profile.option.visible_icon_drifttrial = arcade_game_mode.indexOf(gtengine::GameMode::DRIFT_ATTACK) > -1;
    }

    method onInitialize(context)
    {
        if (gDirectApplyMode)
            SettingFrame::Pane::Foot.visible = false;
        
        SettingFrame.adjust_scrolled_body();

        SettingFrame::Pane::ScrolledBody::clip::space::LeaveDetect::slider.zero_text = manager.translate("Component", "Label_OFF");
        SettingFrame::Pane::ScrolledBody::clip::space::LeaveDetect::slider.setup(context);

        SettingFrame::Pane::ScrolledBody::clip::space::ModeSelect.setup([
            manager.translate("CommonArcadeMode", "GameMode_SINGLE_RACE"),
            manager.translate("CommonArcadeMode", "GameMode_TIME_ATTACK"),
            manager.translate("CommonArcadeMode", "GameMode_DRIFT_ATTACK"),
        ], [
            gtengine::GameMode::SINGLE_RACE,
            gtengine::GameMode::TIME_ATTACK,
            gtengine::GameMode::DRIFT_ATTACK,
        ], nil, nil, nil, 1);

        reflect(context);

        ROOT.setFocus(SettingFrame::Pane::ScrolledBody::clip::space::KioskMode::OptionMenu);
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        if (gDirectApplyMode)
        {
            ROOT.apply();
            ROOT.close(context);
        }
        else
            ROOT.setFocus(SettingFrame::Pane::Foot::Cancel);

        return EVENTRESULT_FILTER;
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::KioskMode::OptionMenu
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);

            SettingFrame::Pane::ScrolledBody::clip::space::VisibleControl::PackingSpace.visible = 1 - self.index;
            return EVENTRESULT_STOP;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::GPSVersion
    {
        module vbox::Create
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                if (DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, 
                    manager.translate("OptionProject::OptionRoot", "QUESTION_CREATE_SPECIAL_SAVEDATA")))
                {
                    CursorUtil::setCursor(ContextMain, "wait");
                    foreach (|var key, var value| in TutorialUtil::key_map)
                    {
                        TutorialUtil::clear("gttop", key);
                    }
    
                    TutorialUtil::clear("gttop", "introduction");
                    TutorialUtil::begin("gttop", "introduction");
                    GAME_STATUS.user_profile.option.invalid_moon = true;
                    GAME_STATUS.user_profile.option.visible_icon_gps = true;
                    SaveDataUtilGT6::saveSpecialEveryWhere(context);
                    CursorUtil::setCursor(ContextMain, "cursor_chrome");
                    DialogUtil::openConfirmDialog(context, DialogUtil::OK, 
                        manager.translate("OptionProject::OptionRoot", "MESSAGE_FINISHED_CREATING_SPECIAL_SAVEDATA"));
                }
    
                return EVENTRESULT_FILTER;
            }
        }
    }

    module BUTTON::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.apply();
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module BUTTON::Cancel
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }
}