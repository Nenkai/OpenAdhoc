module PhotoShootProject::FilterDialog
{
	static result = false;
	static original_y = nil;

	function open(context, type)
	{
		original_y = Dialog.y;
		Dialog.y = 480.0;
	
		context.pushPage(FilterDialog);
		FilterDialog.setFocus(nil);
	
		if (main::game.option.photo_professional)
			Dialog::Contents::Brightness::label.text = context.translate(FilterDialog, "LabelBrightnessPro");
		else
			Dialog::Contents::Brightness::label.text = context.translate(FilterDialog, "LabelBrightness");
	
		Dialog::Contents::Filter::OptionMenu::Init(context);
		Dialog::Contents::Lightness::SliderBar::Init(context);
		Dialog::Contents::Brightness::slider::Init(context);
		Dialog::Contents::WhiteBalance::slider::Init(context);
	
		if (!Dialog.interpolateY(original_y, 0.4))
		{
			context.sync();
		}
		else
		{
			FilterDialog.setFocus(Dialog::Buttons::OK);
		}
	
		result = false;
	
		var update_context = context.getUpdateContext();
		update_context.enterEventLoop();
	
		return result;
	}

	function close(context)
	{
		FilterDialog.setFocus(nil);
	
		var target_y;
		if (result != nil)
		{
			target_y = -Dialog.h;
		}
		else
		{
			target_y = 480.0;
		}
	
		if (!Dialog.interpolateY(target_y, 0.4))
		{
			context.sync();
		}
		else
		{
			context.closePage(FilterDialog);
		}
	
		var update_context = context.getUpdateContext();
		update_context.leaveEventLoop();
	
		Dialog.y = original_y;
	}

	function onCancel(context, event, item)
	{
		main::sound.play("cancel");
		result = nil;
		close(context);
		result = false;
		return EVENTRESULT_FILTER;
	}

	import main::menu::MUtility::GetFormatString

	function format_int10(value)
	{
		GetFormatString("%.1t", (value * 10.0).toInt());
	}

	function lightness_step(slider)
	{
		var x = slider.value - slider.repeat_start;
	
		if (x < 0.0)
		{
			x = -x;
		}
	
		x /= (slider.max - slider.min);
		(1.0 + x * 10.0); // ????
	}


	function Apply()
	{
		Dialog::Contents::Filter::OptionMenu::Apply();
		Dialog::Contents::Lightness::SliderBar::Apply();
		Dialog::Contents::Brightness::slider::Apply();
		Dialog::Contents::WhiteBalance::slider::Apply();
	}


	function Cancel()
	{
		Dialog::Contents::Filter::OptionMenu::Cancel();
		Dialog::Contents::Lightness::SliderBar::Cancel();
		Dialog::Contents::Brightness::slider::Cancel();
		Dialog::Contents::WhiteBalance::slider::Cancel();
	}


	function Cleanup()
	{
		result = nil;
		original_y = nil;
	
		Dialog::Contents::Filter::OptionMenu::Cleanup();
		Dialog::Contents::Lightness::SliderBar::Cleanup();
		Dialog::Contents::Brightness::slider::Cleanup();
		Dialog::Contents::WhiteBalance::slider::Cleanup();
	}

	function setupSlider(context, slider, bias, none)
	{
		if (bias == nil)
			bias = 1;
	
		if (none == nil)
			none = false;
	
		if (none && slider.index == 0)
			slider["label"].text = context.translate(FilterDialog, "none");
		else
			slider["label"].text = bias * slider.index;
	
		var popup = slider["popup"];
		popup["min"].text = bias * slider.min;
		popup["max"].text = bias * slider.max;
		popup["pinch"]["value"].text = bias * slider.index;
	}

	function setupSliderFloat(context, slider, bias, none)
	{
		if (bias == nil)
			bias = 1.0;
	
		if (none == nil)
			none = false;
	
		if (none && slider.index == 0)
		{
			slider["label"].text = context.translate(FilterDialog, "none");
		}
		else
		{
			slider["label"].text = GetFormatString("%.2t", bias * slider.index);
		}
	
		var popup = slider["popup"];
	
		popup["min"].text = GetFormatString("%.2t", bias * slider.min);
		popup["min"].adjustScale();
	
		popup["max"].text = GetFormatString("%.2t", bias * slider.max);
	
		popup["pinch"]["value"].scale_x = 1.0;
		popup["pinch"]["value"].scale_y = 1.0;
	
		popup["pinch"]["value"].text = GetFormatString("%.2t", bias * slider.index);
		popup["pinch"]["value"].adjustScale();
	}
}

module PhotoShootProject::FilterDialog::Dialog::Contents::Lightness::SliderBar
{
	static lightness = nil;
	static save_lightness = nil;

	function Cleanup()
	{
		lightness = nil;
		save_lightness = nil;
		popup::min.text = nil;
		popup::max.text = nil;
		popup::pinch::value.text = nil;
		label.text = nil;
	}

	function Init(context)
	{
		save_lightness = lightness = ShootRoot::Map::PM.lightness;
	
		SliderBar.min = 0.0;
		SliderBar.max = 100.0;
		SliderBar.value = lightness;
		SliderBar.step = lightness_step(SliderBar);
		popup::min.text = SliderBar.min.toInt();
		popup::max.text = SliderBar.max.toInt();
		popup::pinch::value.text = lightness.toInt();
		label.text = lightness.toInt();
	}


	function Apply()
	{
		ShootRoot::Map::PM.lightness = lightness;
	}


	function Cancel()
	{
		ShootRoot::Map::PM.lightness = save_lightness;
	}

	function onValueChanged(context)
	{
		lightness = SliderBar.value;
		popup::pinch::value.text = lightness.toInt();
		label.text = lightness.toInt();
		ShootRoot::Map::PM.lightness = lightness;
	}

	function onStepChanged(context)
	{
		SliderBar.step = lightness_step(SliderBar);
	}
}

module PhotoShootProject::FilterDialog::Dialog::Contents::Filter::OptionMenu
{
	static color_filter = nil;
	static save_color_filter = nil;
	static list = ["none", "mature", "monochrome"]

	function Cleanup()
	{
		color_filter = nil;
		save_color_filter = nil;
	}

	function Init(context)
	{
		save_color_filter = color_filter = ShootRoot::Map::PM.color_filter;
	
		var i = 0;
		while (list.size)
		{
			if (color_filter == list[i])
			{
				OptionMenu.setIndex(context, i);
				break;
			}
	
			i++;
		}
	}


	function Apply()
	{
		ShootRoot::Map::PM.color_filter = color_filter;
	}


	function Cancel()
	{
		ShootRoot::Map::PM.color_filter = save_color_filter;
	}

	function onValueChanged(context, index)
	{
		color_filter = list[OptionMenu.index];
		ShootRoot::Map::PM.color_filter = color_filter;
	}
}

module PhotoShootProject::FilterDialog::Dialog::Contents::Brightness::slider
{
	static sBrightness = nil;

	function Cleanup()
	{
		sBrightness = nil;
	}

	function Init(context)
	{
		sBrightness = ShootRoot::Map::PM.brightness;
		slider.index = ShootRoot::Map::PM.brightness;
		setupSliderFloat(context, slider, 25);
	}


	function Apply()
	{
		ShootRoot::Map::PM.brightness = slider.index;
	}


	function Cancel()
	{
		ShootRoot::Map::PM.brightness = sBrightness;
	}

	function onValueChanged(context)
	{
		ShootRoot::Map::PM.brightness = slider.index;
		setupSliderFloat(context, slider, 25);
	}
}

module PhotoShootProject::FilterDialog::Dialog::Contents::WhiteBalance::slider
{
	static sWhiteBalance = nil;

	function Cleanup()
	{
		sWhiteBalance = nil;
	}
	
	function Init(context)
	{
		sWhiteBalance = ShootRoot::Map::PM.whiteBalance;
		slider.index = ShootRoot::Map::PM.whiteBalance;
		setupSlider(context, slider);
	}
	
	function Apply()
	{
		ShootRoot::Map::PM.whiteBalance = slider.index;
	}
	
	function Cancel()
	{
		ShootRoot::Map::PM.whiteBalance = sWhiteBalance;
	}
	
	function onValueChanged(context)
	{
		ShootRoot::Map::PM.whiteBalance = slider.index;
		setupSlider(context, slider);
	}
}

module PhotoShootProject::FilterDialog::Dialog::Buttons::Cancel
{
	function onActivate(context, event, item)
	{
		main::sound.play("ok");
		result = false;
		close(context);
		return EVENTRESULT_FILTER;
	}
}

module PhotoShootProject::FilterDialog::Dialog::Buttons::OK
{
	function onActivate(context, event, item)
	{
		main::sound.play("ok");
		result = true;
		close(context);
		return EVENTRESULT_FILTER;
	}
}