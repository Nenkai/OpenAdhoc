


//---------------------------------------------------------------------------------------
// init_sound.ad
//
// (ä¾‹)
// init_sound.ad
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// function
//---------------------------------------------------------------------------------------

module ::main 
{
    static sound_context;
    static race_sound;
    static drc_preset;
    static sound_runtime_parameter;
    
    module SpeakerBits
    {
        static L_R = (1 << 0) | (1 << 1);
        static C = (1 << 2);
        static LS_RS = (1 << 3) | (1 << 4);
        static LB_RB = (1 << 5) | (1 << 6);
        static CB = (1 << 7);
        static LFE = (1 << 8);
    }

    class DEQParameter
    {
        attribute output_gain;
        attribute comp_ratio;
        attribute comp_target_loudness_level;
        attribute comp_gain_max;
        attribute comp_attack_time;
        attribute comp_release_time;
        attribute agc_target_level;
        attribute agc_min_gain;
        attribute agc_max_gain;
        attribute agc_attack_time;
        attribute agc_release_time;
        attribute agc_hold_time;
        attribute agc_limiter_level;
        attribute playback_spl_gain;
        attribute loudness_det_lowcut_fc;

        method __init__(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o)
        {
            self.output_gain = a;
            self.comp_ratio = b;
            self.comp_target_loudness_level = c;
            self.comp_gain_max = d;
            self.comp_attack_time = e;
            self.comp_release_time = f;
            self.agc_target_level = g;
            self.agc_min_gain = h;
            self.agc_max_gain = i;
            self.agc_attack_time = j;
            self.agc_release_time = k;
            self.agc_hold_time = l;
            self.agc_limiter_level = m;
            self.playback_spl_gain = n;
            self.loudness_det_lowcut_fc = o;
        }
    }

    function applyDEQParameter(p)
    {
        var map = [
            "output_gain" : p.output_gain,
            "comp_ratio" : p.comp_ratio,
            "comp_target_loudness_level" : p.comp_target_loudness_level,
            "comp_gain_max" : p.comp_gain_max,
            "comp_attack_time" : p.comp_attack_time,
            "comp_release_time" : p.comp_release_time,
            "agc_target_level" : p.agc_target_level,
            "agc_min_gain" : p.agc_min_gain,
            "agc_max_gain" : p.agc_max_gain,
            "agc_attack_time" : p.agc_attack_time,
            "agc_release_time" : p.agc_release_time,
            "agc_hold_time" : p.agc_hold_time,
            "agc_limiter_level" : p.agc_limiter_level,
            "playback_spl_gain" : p.playback_spl_gain,
            "loudness_det_lowcut_fc" : p.loudness_det_lowcut_fc,
        ];
        var ctx = main::sound_context;
        ctx.setEffectorParameter("world_deq", map);
    }

    module CarSound
    {
        static sound_id_volume = 
        [
            [1.0, 1.0],
            [1.26, 1.26],
            [1.58, 1.58],
            [2.0, 2.0],
        ]


        class RoadAttributeSoundParameter
        {
            attribute effects;

            method __init__(_effects)
            {
                self.effects = _effects;
            }
        }

        class SoundEffectAppearance
        {
            attribute instrument;
            attribute category;

            method __init__(_instrument, _category)
            {
                self.instrument = _instrument;
                self.category = _category;
            }
        }


        class SoundEffect
        {
            attribute appearances;
            attribute controls;

            method __init__(_appearances, _ctrls)
            {
                self.appearances = _appearances;
                self.controls = _ctrls;
            }

            method set(s)
            {
                self.appearances = s.appearances;
                self.controls = s.controls;
            }
        }

        class SoundEffectInstrument
        {
            attribute type;
            attribute name;
            attribute pitch;
            attribute gain;
            attribute gain_hf;

            method __init__(_type, _name, _pitch, _gain, _gain_hf)
            {
                self.type = _type;
                self.name = _name;
                self.pitch = _pitch;
                self.gain = _gain;
                self.gain_hf = _gain_hf;
            }
        }


        class SoundEffectControl
        {
            attribute graph;
            attribute type;
            attribute extrapolate;
            attribute input;
            attribute output;

            method __init__(_graph, _type, _extrapolate, _input, _output)
            {
                self.graph = _graph;
                self.type = _type;
                self.extrapolate = _extrapolate;
                self.input = _input;
                self.output = _output;
            }
        }

        static road_attribute_sound_parameter = Array(16);
        static tarmac_tire_sound_parameter = Array(4);


        function InitializeRoadAttributeSoundParameter()
        {
            function set_string(refobj, name, str)
            {
                var n = refobj.getArraySize(name);
                var len = str.length;
                for (var i = 0; i < n; i++)
                {
                    var c = i < len ? str.at(i) : 0;
                    refobj.getMember(name, i).setValue(c);
                }
            }

            function setSoundEffectFromAdhoc(pseudo_obj, adhoc_obj)
            {
                var orasp = pseudo_obj;
                var irasp = adhoc_obj;

                for (var ch = 0; ch < orasp.getArraySize("effects_"); ch++)
                {
                    var oe = orasp.getMember("effects_", ch);
                    var ie = irasp.effects[ch];

                    for (var i = 0; i < oe.getArraySize("appearances_"); i++)
                    {
                        var oa = oe.getMember("appearances_", i);
                        var ia = ie.appearances[i];

                        var oi = oa.getMember("instrument_");
                        var ii = ia.instrument;

                        set_string(oi, "name_", ii.name);
                        oi.getMember("flag_").setValue(ii.type);
                        oi.getMember("pitch_").setValue(ii.pitch);
                        oi.getMember("gain_").setValue(ii.gain);
                        oi.getMember("gain_hf_").setValue(ii.gain_hf);

                        oa.getMember("category_").setValue(ia.category);
                    }

                    for (var cch = 0; cch < oe.getArraySize("controls_"); cch++)
                    {
                        var oc = oe.getMember("controls_", cch);
                        var ic = ie.controls[cch];

                        var og = oc.getMember("graph_");
                        var ig = ic.graph;

                        og.getMember("point_max_").setValue(ig.size - 1);
                        og.getMember("type_").setValue(ic.type);
                        og.getMember("extrapolate_type_").setValue(ic.extrapolate);



                        for (var i = 0; i < og.getArraySize("points_"); i++)
                        {
                            var point = og.getMember("points_", i);

                            point.getMember("x_").setValue(ig[i][0]);
                            point.getMember("y_").setValue(ig[i][1]);
                        }

                        oc.getMember("input_").setValue(ic.input);
                        oc.getMember("output_").setValue(ic.output);
                    }
                }
            }

            for (var attr_index = 0; attr_index < road_attribute_sound_parameter.size; attr_index++)
            {
                var rasp = road_attribute_sound_parameter[attr_index];

                for (var ch = 0; ch < rasp.effects.size; ch++)
                {
                    var e = rasp.effects[ch];
                    var app = e.appearances;
                    var ctrls = e.controls;


                    gtengine::MRaceSound::setRoadAttributeSoundParameter(attr_index, ch, app, ctrls);
                }
            }

            var csgp = gtengine::MRaceSound::getCarSoundGlobalParameter();
            for (var attr_index = 0; attr_index < tarmac_tire_sound_parameter.size; attr_index++)
            {
                var orasp = csgp.getMember("tarmac_tire_sound_parameter_", attr_index);
                if (orasp == nil)
                    continue;
                
                var irasp = tarmac_tire_sound_parameter[attr_index];

                setSoundEffectFromAdhoc(orasp, irasp);
            }
            
        }

        function ReflectRoadAttributeSoundParameter()
        {
            function to_string(refobj, name)
            {
                var n = refobj.getArraySize(name);
                var str = "";
                for (var i = 0; i < n; i++)
                {
                    var c = refobj.getMember(name, i).getValue().toByte();
                    if (c == 0)
                        break;
                    str += "%c".format(c);
                }
                return str;
            }

            function setSoundEffectToAdhoc(adhoc_obj, pseudo_obj)
            {
                var orasp = adhoc_obj;
                var irasp = pseudo_obj;

                for (var ch = 0; ch < orasp.effects.size; ch++)
                {
                    var ie = irasp.getMember("effects_", ch);
                    var oe = orasp.effects[ch];


                    for (var i = 0; i < oe.appearances.size; i++)
                    {
                        var ia = ie.getMember("appearances_", i);
                        var oa = oe.appearances[i];

                        var ii = ia.getMember("instrument_");
                        var oi = oa.instrument;
                        oi.name = to_string(ii, "name_");
                        oi.type = ii.getMember("flag_").getValue();
                        oi.pitch = ii.getMember("pitch_").getValue();
                        oi.gain = ii.getMember("gain_").getValue();
                        oi.gain_hf = ii.getMember("gain_hf_").getValue();

                        oa.category = ia.getMember("category_").getValue();
                    }

                    for (var cch = 0; cch < oe.controls.size; cch++)
                    {
                        var ic = ie.getMember("controls_", cch);
                        var oc = oe.controls[cch];

                        var ig = ic.getMember("graph_");
                        var og = oc.graph;

                        oc.type = ig.getMember("type_").getValue();
                        oc.extrapolate = ig.getMember("extrapolate_type_").getValue();

                        for (var i = 0; i < og.size; i++)
                        {
                            var point = ig.getMember("points_", i);

                            og[i][0] = point.getMember("x_").getValue();
                            og[i][1] = point.getMember("y_").getValue();
                        }

                        oc.input = ic.getMember("input_").getValue();
                        oc.output = ic.getMember("output_").getValue();
                    }
                }
            }
            var o = gtengine::MRaceSound::getCarSoundGlobalParameter();


            for (var attr_index = 0; attr_index < road_attribute_sound_parameter.size; attr_index++)
            {
                var irasp = o.getMember("road_attribute_sound_parameter_", attr_index);
                var orasp = road_attribute_sound_parameter[attr_index];

                setSoundEffectToAdhoc(orasp, irasp);
            }


            for (var attr_index = 0; attr_index < tarmac_tire_sound_parameter.size; attr_index++)
            {
                var irasp = o.getMember("tarmac_tire_sound_parameter_", attr_index);
                if (irasp == nil)
                    continue; 
                var orasp = tarmac_tire_sound_parameter[attr_index];

                setSoundEffectToAdhoc(orasp, irasp);
            }
        }

        // Code in module
        var tmp_graph = [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0]];
        var tmp_control = SoundEffectControl(tmp_graph, 0,2,0,0);
        var tmp_controls = Array(8);
        for (var i = 0; i < tmp_controls.size; i++)
            tmp_controls[i] = tmp_control.getDeepCopy();
        var tmp_appearance = SoundEffectAppearance(SoundEffectInstrument(0, "", 1.0, 1.0, 1.0), 0);
        var tmp_appearances = Array(2);
        for (var i = 0; i < tmp_appearances.size; i++)
            tmp_appearances[i] = tmp_appearance.getDeepCopy();
        var tmp_soundeffect = SoundEffect(tmp_appearances, tmp_controls);
        var tmp_soundeffect_list = [tmp_soundeffect.getDeepCopy(), tmp_soundeffect.getDeepCopy(), tmp_soundeffect.getDeepCopy()];

        var template = RoadAttributeSoundParameter(tmp_soundeffect_list);
        for (var i = 0; i < road_attribute_sound_parameter.size; i++)
            road_attribute_sound_parameter[i] = template.getDeepCopy();

        for (var i = 0; i < tarmac_tire_sound_parameter.size; i++)
            tarmac_tire_sound_parameter[i] = template.getDeepCopy();
    }
}

function dbtoa(db)
{
    return 10.0 ** (db.toFloat() / 20.0);
}

function init_bgm_context()
{
    var st = STStructure("Impl");
    st.define("playing_code", STString(32));
    st.define("next_play_code", STString(32));
    st.define("playing_title", STString(384 + 1));
    st.define("playing_artist", STString(384 + 1));
    st.define("repeat", STByte());
    st.define("paused", STByte());
    st.define("playing_scene", STByte());
    st.define("sysbgm_enable", STByte());
    st.define("playing_sysbgm", STByte());
    st.define("bgm_last_play_time", STLong());
    st.define("bgm_cue_counter", STInt());
    SoundUtil::context = st();
    SoundUtil::context.playing_code = "";
    SoundUtil::context.next_play_code = "";
    SoundUtil::context.repeat = main::SoundUtil::REPEAT_OFF;
    SoundUtil::context.paused = false;
    SoundUtil::context.playing_scene = -1;
    SoundUtil::context.sysbgm_enable = false;
    SoundUtil::context.playing_sysbgm = -1;
    SoundUtil::context.bgm_last_play_time = 0L;
    SoundUtil::context.bgm_cue_counter = 0;

    SoundUtil::bgm_group_info = Map();
    SoundUtil::mmusic = nil;
    SoundUtil::stream_mmusic = main::sound.stream;
    SoundUtil::sysbgm_mmusic = pdistd::MMusic();
    SoundUtil::sysbgm_mmusic.load("system");
    SoundUtil::stream_player = pdiext::MStreamPlayer();
    SoundUtil::bgm_callback = Array();
    var music = SoundUtil::stream_mmusic;
    music.load("pcm");
    music.volume = 1.0;
    music.number = -1;
    music.repeat = false;
    main::sound.default = music;
}

function initSound()
{
    init_bgm_context();
    main::sound_runtime_parameter = NewSoundRuntimeParameter();
    main::sound_context = pdiext::MSoundContext(1024, 128);

    main::drc_preset = 
    [
        [
            'bgm_master_volume' : dbtoa(-16.0),
            'menu_se_master_volume' : dbtoa(-10.0),
            'music_player_master_volume' : dbtoa(-12.0),
            'movie_master_volume' : dbtoa(0.0),
            'na_master_volume' : dbtoa(-8.0),

            'race_bgm_gain' : dbtoa(-0.5),
            'race_se_gain' : dbtoa(+0.5),
            'replay_bgm_gain' : dbtoa(+0.5),
            'replay_se_gain' : dbtoa(-0.5),

            'deq_race' : DEQParameter(
                0.0, 
                1.0, 
                95.0, 
                30.0, 
                0.05, 
                0.25, 
                -25.0, 
                0.0, 
                20.0, 
                1.0, 
                5.0, 
                1.0, 
                -15.0, 
                -20.0, 
                50.0
            ),
            'deq_replay' : DEQParameter(
                0.0,
                1.5,
                95.0,
                30.0,
                0.05,
                0.25,
                -19.0,
                0.0,
                20.0,
                1.0,
                2.5,
                1.0,
                -12.0,
                -20.0,
                50.0
            ),
            'deq_photo' : DEQParameter(
                12.0,
                8.0,
                95.0,
                30.0,
                0.05,
                0.25,
                -21.0,
                -10.0,
                10.0,
                1.0,
                2.5,
                1.0,
                -10.0,
                -20.0,
                50.0,
            ),
            
            'world_se_eq' : nil,
        ],
        [   
            'bgm_master_volume' : dbtoa(-19.0),
            'menu_se_master_volume' : dbtoa(-13.0),
            'music_player_master_volume' : dbtoa(-15.0),
            'movie_master_volume' : dbtoa(-3.0),
            'na_master_volume' : dbtoa(-11.0),

            'race_bgm_gain' : dbtoa(-1.0),
            'race_se_gain' : dbtoa(+1.0),
            'replay_bgm_gain' : dbtoa(+1.0),
            'replay_se_gain' : dbtoa(-1.0),

            'deq_race' : DEQParameter(
                5.0, 
                1.5, 
                95.0, 
                30.0, 
                0.05, 
                0.25, 
                -23.0, 
                -3.0, 
                3.0, 
                1.0, 
                5.0, 
                1.0, 
                -6.0, 
                -20.0, 
                0.0
            ),
            'deq_replay' : DEQParameter(
                5.0,
                1.5,
                95.0,
                30.0,
                0.05,
                0.25,
                -23.0,
                -3.0,
                3.0,
                1.0,
                2.5,
                1.0,
                -6.0,
                -20.0,
                0.0
            ),
            'deq_photo' : DEQParameter(
                9.0,
                4.0,
                95.0,
                30.0,
                0.05,
                0.25,
                -21.0,
                -3.0,
                3.0,
                1.0,
                2.5,
                1.0,
                -6.0,
                -20.0,
                0.0,
            ),

            'world_se_eq' : nil,
        ],
        [
            'bgm_master_volume' : dbtoa(-30.0),
            'menu_se_master_volume' : dbtoa(-24.0),
            'music_player_master_volume' : dbtoa(-26.0),
            'movie_master_volume' : dbtoa(-17.0),
            'na_master_volume' : dbtoa(-22.0),
            
            'race_bgm_gain' : dbtoa(+0.0),
            'race_se_gain' : dbtoa(+0.0),
            'replay_bgm_gain' : dbtoa(+0.0),
            'replay_se_gain' : dbtoa(+0.0),
 
            'deq_race' : DEQParameter(
               -6.0, 
               1.0, 
               95.0, 
               0.0, 
               0.0, 
               0.0, 
               0.0, 
               0.0, 
               0.0, 
               1.0, 
               5.0, 
               1.0, 
               -6.0, 
               0.0, 
               0.0
            ),
            'deq_replay' : DEQParameter(
               -6.0,
               1.0,
               95.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               1.0,
               5.0,
               1.0,
               -6.0,
               0.0,
               0.0
            ),
            'deq_photo' : DEQParameter(
                -6.0,
                1.0,
                95.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                5.0,
                1.0,
                -6.0,
                0.0,
                0.0,
            ),
            'world_se_eq' : nil,
        ]
    ];

    var ctx = main::sound_context;
    ctx.setReverb("system_reverb", [
            "type" : "SMALL_HALL-M",
            "depth" : dbtoa(-12.0),
            "dry" : 0.0
        ]);


    for (var i = 0; i < 1; i++)
    {
        var name = "world_aux%d".format(i);
        ctx.setDelay(name + "_delay1", [
            "time" : 0.12,
            "dry" : -99.0,
            "wet" : 0.0,
            "feedback" : 0.0,
            "cutoff" : 2500.0]);

        ctx.setDelay(name + "_delay2", [
            "time" : 0.2,
            "dry" : -99.0,
            "wet" : -5.0,
            "feedback" : 0.0,
            "cutoff" : 2000.0]);
        
        ctx.setReverb(name + "_reverb", [
            "type" : "CHURCH-M",
            "depth" : dbtoa(-20.0),
            "dry" : 1.0,
        ]);
    }
    
    ctx.setReverb("world_post1_reverb", [
        "type" : "STUDIO-M",
        "depth" : dbtoa(-10.0),
        "dry" : dbtoa(0.0)
    ]);


    ctx.setBusEqualizer("world_post1_eq", 0, ["lowshelf", 250, 0.75, dbtoa(+5.0)]);
    ctx.setBusEqualizer("world_post1_eq", 1, ["highshelf", 1000, 0.5, dbtoa(-5.0)]);
    ctx.setBusEqualizer("world_post1_eq", 2, ["none", 1000, 0.5, 1.0]);
    ctx.setBusEqualizer("world_post1_eq", 3, ["none", 1000, 0.5, 1.0]);
    ctx.reverb_master = 0.5;
    ctx.late_reverb_master = dbtoa(-12.0);

    ctx.interior_pan_distance = 2.5;
    ctx.sound_driver_volume_scale = 0.0125;
    ctx.reference_sound_level = -100.0;
    ctx.distance_filter_type = 12;

    ctx.setEffectorParameter("world_dist", [
        "dist_th1" : 110.0 - 120.0,
        "dist_th2" : 110.0 - 120.0,
        "dist_sym" : 0.7,
        "dist_ratio" : 0.0,
        "dist_knee" : 5.0,
        "dist_enable" : false
    ]);

    ctx.bgm_upmix_preset = "INST";

    ORG.setSoundContext(main::sound_context);


    main::race_sound = gtengine::MRaceSound();

    var rs = main::race_sound;
    rs.audience_volume = 0.89;
    rs.ambience_volume = 0.89;
    rs.audience_ref_distance = 40.0;
    rs.ambience_ref_distance = 80.0;

    main::ORG.setRaceSound(main::race_sound);

    var results = pdistd::ReadFile("sound_gt/etc/se_master.pmf");
    if (results["result"] == 0)
    {
        var master = gtengine::MRaceSound::getGlobalSoundEffectMasterParameter();
        var bytedata = results["buffer"];
        master.setPmfByteData(bytedata);
    }

    results = pdistd::ReadFile("sound_gt/etc/car_sound_gt5.pmf");
    if (results["result"] == 0)
    {
        var master = gtengine::MRaceSound::getCarSoundGlobalParameter();
        var bytedata = results["buffer"];
        master.setPmfByteData(bytedata);
    }
    CarSound::ReflectRoadAttributeSoundParameter();

    gtengine::MRaceSound::initializeGlobalParameter();

    main::CarSound.clearStatic();
    SoundUtil::SetSystemBGMEnable(nil, true);
    SoundUtil::SetMenuSEVolume(main::drc_preset[0]['menu_se_master_volume']);
}

function CreateSoundRuntimeParameterStructure()
{
    var st = STStructure("Impl");

    st.define("menu_bgm", STByte());
    st.define("menu_se", STByte());
    st.define("race_bgm", STByte());
    st.define("race_se", STByte());
    st.define("replay_bgm", STByte());
    st.define("replay_se", STByte());
    st.define("sound_dynamic_range", STByte());


    st.define("menu_bgm_volume", STUByte());
    st.define("menu_se_volume", STUByte());
    st.define("race_bgm_volume", STUByte());
    st.define("race_se_volume", STUByte());
    st.define("replay_bgm_volume", STUByte());
    st.define("replay_se_volume", STUByte());
    st.define("user_bgm_volume", STUByte());


    st.define("menu_bgm_gain", STFloat());
    st.define("menu_se_gain", STFloat());
    st.define("race_bgm_gain", STFloat());
    st.define("race_se_gain", STFloat());
    st.define("replay_bgm_gain", STFloat());
    st.define("replay_se_gain", STFloat());
    st.define("user_bgm_gain", STFloat());
    st.define("music_player_gain", STFloat());
    st.define("movie_gain", STFloat());
    st.define("na_gain", STFloat());


    st.define("scene", STByte());
    return st;
}

function InitializeSoundRuntimeParameter(p)
{
    p.menu_bgm = 1;
    p.menu_se = 1;
    p.race_bgm = 1;
    p.race_se = 1;
    p.replay_bgm = 1;
    p.replay_se = 1;
    p.sound_dynamic_range = 0;

    p.menu_bgm_volume = 100;
    p.menu_se_volume = 100;
    p.race_bgm_volume = 100;
    p.race_se_volume = 100;
    p.replay_bgm_volume = 100;
    p.replay_se_volume = 100;
    p.user_bgm_volume = 100;

    p.menu_bgm_gain = 1.0;
    p.menu_se_gain = 1.0;
    p.race_bgm_gain = 1.0;
    p.race_se_gain = 1.0;
    p.replay_bgm_gain = 1.0;
    p.replay_se_gain = 1.0;
    p.user_bgm_gain = 1.0;
    p.music_player_gain = 1.0;
    p.movie_gain = 1.0;
    p.na_gain = 1.0;

    p.scene = -1;
}

function NewSoundRuntimeParameter()
{
    var st = CreateSoundRuntimeParameterStructure();
    var instance = st();
    InitializeSoundRuntimeParameter(instance);
    return instance;
}