module PROJECT::ROOT
{
	static sActiveWidget = nil;
	static sResult = nil;
	static sIsOpenNow = nil;
	static sReturnValue = nil;
	
	function onLoad(context)
	{
		setDialogMoveActorV(InputPlayerPassword);
		setDialogMoveActorV(InputPlayer);
		setDialogMoveActorV(InputPassword);
		setFadeActor(ContextMenu, 0.1);
	}

	function onUnload(context)
	{
		sResult = nil;
		sReturnValue = nil;
		InputPrivateRace::unload(context);
		InputChatChannel::unload(context);
	}
	
	function onInitialize(context)
	{
	}
	
	function onFinalize(context)
	{
		finalizeCommon(context);
		InputPlayerPassword::finalize(context);
		InputPlayer::finalize(context);
		InputPassword::finalize(context);
		InputPrivateRace::finalize(context);
		InputChatChannel::finalize(context);
		ContextMenu::finalize(context);
	}

	function onCancel(context)
	{
		main::sound.play("cancel");
		sResult = 0;
		close(context);
		return EVENTRESULT_FILTER;
	}
	
	function initializeCommon(context)
	{
		sActiveWidget = nil;
		sResult = nil;
		sIsOpenNow = true;
	
		InputPlayerPassword.visible = false;
		InputPlayer.visible = false;
		InputPassword.visible = false;
		InputPrivateRace.visible = false;
		InputChatChannel.visible = false;
		ContextMenu.visible = false;
		PrivateRaceCommon::setToolTip(ToolTip::tip);
	}

	function finalizeCommon(context)
	{
		sActiveWidget = nil;
		sIsOpenNow = nil;
		PrivateRaceCommon::revertToolTip();
	}
	
	function setOriginalSX_SY(widget, original_sx, original_sy)
	{
		widget.sx = original_sx;
		widget.sy = original_sy;
	}
	
	function initializeDialogMoveActor(widget)
	{
		widget.actor.out = true;
		widget.actor.warp();
	}
	
	function setupDynamicHeightChangeWidet(widget)
	{
		widget.minimum_height = 0;
		setDialogMoveActorH(widget);
	}

	function activateWidgetCommon(context, widget)
	{
		widget.visible = true;
		widget.actor.out = false;
		context.sync(0.25);
		context.pushPage(InputDialog);
		sActiveWidget = widget;
	}
	
	function deactivateWidgetCommon(context)
	{
		sActiveWidget.actor.out = true;
		context.sync(0.25);
		sActiveWidget.visible = false;
		context.closePage(InputDialog);
		sActiveWidget = nil;
	}
	
	function close(context)
	{
		InputDialog.setFocus(nil);
		deactivateWidgetCommon(context);
		returnToModalDialog(context);
	}

	function setTitleText(context, widget, title)
	{
		if (widget == nil || title == nil)
			return;
	
		widget.Title.title.text = context.translate(InputDialog, title);
	}
	
	function gotoModalDialog(context)
	{
		sResult = nil;
		context.getUpdateContext().enterEventLoop();
	}
	
	function returnToModalDialog(context)
	{
		context.getUpdateContext().leaveEventLoop();
	}
	
	function isOpenNow()
	{
		return (sIsOpenNow != nil && sIsOpenNow)
	}
}

module PROJECT::ROOT::InputPlayer
{
	static sMode = nil;
	
	function open(context, args)
	{
		initializeCommon(context);
		preInitialize(context, args);
		setTitleText(context, InputPlayer, "TITLE|INPUT_PLAYER");
		activateWidget(context, nil);
		postInitialize(context);
		gotoModalDialog(context);
		return sResult;
	}
	
	function preInitialize(context, args)
	{
		sMode = args;
	}
	
	function activateWidget(context, item)
	{
		activateWidgetCommon(context, InputPlayer);
	}
	
	function postInitialize(context)
	{
		InputDialog.setFocus(Name.Input.input);
	}
	
	function finalize(context)
	{
		sMode = nil;
	}
}

module PROJECT::ROOT::InputPlayer::Buttons::CancelOK::Cancel
{
    function onActivate(context, event, item)
    {
        main::sound.play("cancel");
        sResult = 0;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputPlayer::Buttons::CancelOK::OK
{
    function onActivate(context, event, item)
    {
        var name = Name::Input::input.sanitized_value;
        var res = false;
        if (name == nil || name == "")
		{
            main::sound.play("disable");
            var text = context.translate(InputDialog, "ERROR|THERE_WAS_NOT_THE_INPUT_OF_A_NAME");
            openConfirmDialog(context, DIALOG_ERROR, text);
        }
		else if (name.downcase() == main::network.my_name.downcase())
		{
            main::sound.play("disable");
            var text = context.translate(InputDialog, "ERROR|YOU_CANNOT_ADD_YOU");
            openConfirmDialog(context, DIALOG_ERROR, text);
        }
		else
		{
            main::sound.play("ok");
            var text = context.translate(InputDialog, "NOW_ADDING").build(name);
            if (sMode == 0)
                res = openProcessDialog(context, text, PrivateRaceCommon::buddyAdd, name);
			else
                res = openProcessDialog(context, text, PrivateRaceCommon::ignoreAdd, name);
        }

		sResult = res;
        if (res)
            close(context);

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputPlayerPassword
{
    function open(context)
	{
        initializeCommon(context);
        preInitialize(context, nil);
        setTitleText(context, InputPlayerPassword, "TITLE|INPUT_PLAYER_PASSWORD");
        activateWidget(context, nil);
        postInitialize(context);
        gotoModalDialog(context);
        return sResult;
    }

    function preInitialize(context, args)
	{
        DoSave::OptionMenu::initialize(context);
    }

    function activateWidget(context, item)
	{
        activateWidgetCommon(context, InputPlayerPassword);
    }

    function postInitialize(context)
	{
        DoSave.OptionMenu.setIndex(context, 1);
        InputDialog.setFocus(OldPassword.Input.input);
    }

    function finalize(context)
	{
        DoSave::OptionMenu::finalize(context);
    }
}

module PROJECT::ROOT::InputPlayerPassword::OldPassword::Input::input
{
    function onFocusEnter(context, event)
    {
        var text = context.translate(InputDialog, "TOOLTIP|InputPlayerPassword::OldPassword::Input::input");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        PrivateRaceCommon::attachToolTip();
		return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputPlayerPassword::NewPassword::Input::input
{
    function onFocusEnter(context, event)
    {
        var sub_text = context.translate(InputDialog, "OnlineMessage", "TOOLTIP|PASSWORD_INPUT");
        var text = context.translate(InputDialog, "TOOLTIP|InputPlayerPassword::NewPassword::Input::input").build(sub_text);
        PrivateRaceCommon::setToolTipOnValue(0, text);
        PrivateRaceCommon::attachToolTip();
		return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputPlayerPassword::NewPasswordAgain::Input::input
{
    function onFocusEnter(context, event)
    {
        var sub_text = context.translate(InputDialog, "OnlineMessage", "TOOLTIP|PASSWORD_INPUT");
        var text = context.translate(InputDialog, "TOOLTIP|InputPlayerPassword::NewPassword::Input::input").build(sub_text);
        PrivateRaceCommon::setToolTipOnValue(0, text);
        PrivateRaceCommon::attachToolTip();
		return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputPlayerPassword::DoSave::OptionMenu
{
    static open;

    function initialize(context)
    {
        open = false;
    }

    function finalize(context)
    {
        open = nil;
    }

    function onFocusEnter(context, event)
    {
        if (!open)
        {
            var text = context.translate(InputDialog, "TOOLTIP|InputPlayerPassword::DoSave::OptionMenu");
            PrivateRaceCommon::setToolTipOnValue(0, text);
        }
        return EVENTRESULT_FILTER;
    }

    function onPopupOpen(context)
    {
        open = true;
        PrivateRaceCommon::clearToolTipValue();
        return EVENTRESULT_FILTER;
    }

    function onPopupClosed(context)
    {
        open = false;
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputPlayerPassword::Buttons::CancelOK::Cancel
{
    function onActivate(context, event, item)
    {
        main::sound.play("cancel");
        sResult = 0;
        close(context);
        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        var text = context.translate(InputDialog, "TOOLTIP|CANCEL");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputPlayerPassword::Buttons::CancelOK::OK
{
	function updatePassword(context, args)
	{
		|var oldpass, var newpass| = args;
		var res = main::network.accountUpdatePassword(oldpass, newpass);
		if (!res)
			openOnlineErrorDialog(context);
	
		return res;
	}
	
	function save_password(context)
	{
		var valid = main::menu::MMemoryCardManager::getExistValidGameData();
		if (!valid)
		{
			main::sound.play("disable");
			var text = context.translate(InputDialog, "OnlineMessage", "ALLOWED_OVERWIRTE_ONLY");
			openConfirmDialog(context, DIALOG_ERROR, text);
			return false;
		}
		else
		{
			clearAutoSaveDisabled();
			main::sound.play("ok");
			saveAuto(context, InputDialog, end_func);
		}

		return true;
	}

	function end_func(context)
	{
		main::sound.play("ok");
		openConfirmDialog(context, DIALOG_OK, context.translate(InputDialog, "MemoryCard", "save_done"));
	}

	function onActivate(context, event, item)
	{
		var oldp = OldPassword::Input::input.value;
		var newp = NewPassword::Input::input.value;
		var newpa = NewPasswordAgain::Input::input.value;
		var do_save;
		if (DoSave::OptionMenu.index == 0)
			do_save = true;
		else
			do_save = false;
		
		var res = false;
	
		if (oldp == "" || newp == "" || newpa == "")
		{
			main::sound.play("disable");
			var text = context.translate(InputDialog, "ERROR|THERE_WAS_NOT_THE_INPUT_OF_A_PASSWORD");
			openConfirmDialog(context, DIALOG_ERROR, text);
		}
		else if (oldp == newp)
		{
			main::sound.play("disable");
			var text = context.translate(InputDialog, "ERROR|YOU_CANNOT_MAKE_AN_OLD_PASSWORD_A_NEW_PASSWORD_SAME");
			openConfirmDialog(context, DIALOG_ERROR, text);
		}
		else if (newp != newpa)
		{
			main::sound.play("disable");
			var text = context.translate(InputDialog, "ERROR|TWO_PASSWORDS_DID_NOT_MATCH_EATHER");
			openConfirmDialog(context, DIALOG_ERROR, text);
		}
		else if (!main::menu::MUtility::IsOKPasswordString(newp))
		{
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, context.translate(InputDialog, "OnlineMessage", "ILLEGAL_PASSWORD"));
		}
		else
		{
			main::sound.play("ok");
			var text = context.translate(InputDialog, "OnlineMessage", "NOW_CHANGING");
			res = openProcessDialog(context, text, updatePassword, [oldp, newp]);
			
			if (res)
			{
				main::game.password = newp;
				if (!do_save)
					openConfirmDialog(context, DIALOG_OK, context.translate(InputDialog, "OnlineMessage", "CHANGE_WAS_SUCCESSFUL"));
				else
					save_password(context);
			}
		}

		sResult = res;
		if (res)
			close(context);
	
		return EVENTRESULT_FILTER;
	}

	function onFocusEnter(context, event)
	{
		var text = context.translate(InputDialog, "TOOLTIP|InputPlayerPassword::Buttons::CancelOK::OK");
		PrivateRaceCommon::setToolTipOnValue(0, text);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::InputPassword
{
    static sMode;
    static sId;
    static sUseVoiceChat;

    function open(context, args)
    {
        initializeCommon(context);
        preInitialize(context, args);
        var text = "";
        if (sMode == 1)
            text = context.translate(InputDialog, "TITLE|INPUT_RACE_PASSWORD");
		else
            text = context.translate(InputDialog, "TITLE|INPUT_LOBBY_PASSWORD");

        setTitleText(context, InputPassword, text);
        activateWidget(context, nil);
        postInitialize(context);
        gotoModalDialog(context);
        return sResult;
    }

    function preInitialize(context, args)
    {
        |sMode, sId, sUseVoiceChat| = args;
        var text = "";
        if (sMode == 1)
            text = context.translate(InputDialog, "LABEL|INPUT_RACE_PASSWORD");
		else
            text = context.translate(InputDialog, "LABEL|INPUT_LOBBY_PASSWORD");
		
        Message.label.text = text;
        Message.label.adjustScale();
    }

    function activateWidget(context, item)
    {
        activateWidgetCommon(context, InputPassword);
    }

    function postInitialize(context)
    {
        InputDialog.setFocus(Password.Input.input);
    }

    function finalize(context)
    {
        sMode = nil;
        sId = nil;
        sUseVoiceChat = nil;
    }
}

module PROJECT::ROOT::InputPassword::Password::Input::input
{
    function onFocusEnter(context, event)
    {
        var text = context.translate(InputDialog, "TOOLTIP|Password_input");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        PrivateRaceCommon::attachToolTip();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputPassword::Buttons::CancelOK::Cancel
{
    function onActivate(context, event, item)
    {
        main::sound.play("cancel");
        sResult = 0;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputPassword::Buttons::CancelOK::OK
{
    function onActivate(context, event, item)
    {
        var pass = Password::Input::input.value;
        var res = false;
        if (pass == nil || pass == "")
        {
            var text = context.translate(InputDialog, "ERROR|THERE_WAS_NOT_THE_INPUT_OF_A_PASSWORD");
            openConfirmDialog(context, DIALOG_ERROR, text);
        }
        else
        {
            main::sound.play("ok");
            if (sMode == 0)
                res = ChatRoot::joinChatChannel(context, 0, sId, pass);
            else
                res = ChatRoot::joinGameMGCL(context, sId, pass, sUseVoiceChat);
        }

		sResult = res;
        if (res)
            close(context);

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputChatChannel
{
	static sMode = nil;
	static sFilterICType = nil;
	static sFilterICCategory = nil;
	static sFilterICCategoryIndex = nil;
	static sFilterICPasswordRequired = nil;

    function open(context, args)
    {
        initializeCommon(context);
        preInitialize(context, args);
        var text = "";

        if (sMode == 0)
            text = context.translate(InputDialog, "TITLE|INPUT_CHAT_CHANNEL");
        else
            text = context.translate(InputDialog, "TITLE|FILTER");

        setTitleText(context, InputChatChannel, text);
        activateWidget(context, nil);
        postInitialize(context);
        gotoModalDialog(context);
        return sResult;
    }

    function preInitialize(context, args)
    {
        sMode = args;
        if (LobbyRoot::sCategoryList == nil || LobbyRoot::sCategoryList.size <= 0)
            LobbyRoot::fetchAndInitializeLobbyConfig(context);

        setVisible();
        InputChatChannel.doColorize();
        initializeWidgets(context);
    }

    function activateWidget(context, item)
    {
        setOriginalSX_SY(InputChatChannel, 98, InputChatChannel.sy);
        setupDynamicHeightChangeWidet(InputChatChannel);
        initializeDialogMoveActor(InputChatChannel);
        activateWidgetCommon(context, InputChatChannel);
    }

    function postInitialize(context)
    {
        setInitialValue(context);
        if (sMode == 0)
            InputDialog.setFocus(Name.Input.input);
		else
            InputDialog.setFocus(Filter.OptionMenu);
    }

    function finalize(context)
    {
        sMode = nil;
        Category::OptionMenu::popup::vbox.clearWindow(context);
        Filter::OptionMenu::finalize(context);
        Category::OptionMenu::finalize(context);
        PasswordRequired::OptionMenu::finalize(context);
    }

    function unload(context)
    {
        sFilterICType = nil;
        sFilterICCategory = nil;
        sFilterICCategoryIndex = nil;
        sFilterICPasswordRequired = nil;
    }


    function setVisible()
    {
        var isCreate = false;
        if (sMode == 0)
            isCreate = true;

        Filter.visible = !isCreate;
        Name.visible = isCreate;
        Password.visible = isCreate;
        PasswordAgain.visible = isCreate;
        PasswordRequired.visible = !isCreate;
    }

    function initializeWidgets(context)
    {
        Category.OptionMenu.initialize(context);
        if (sMode != 0)
            Filter.OptionMenu.initialize(context);

        PasswordRequired::OptionMenu::initialize(context);
    }

    function setInitialValue(context)
    {
        Category.OptionMenu.setInitialIndex(context);
        if (sMode == 0)
            Name::Input::input.value = "";
		else
		{
            Filter.OptionMenu.setInitialIndex(context);
            PasswordRequired.OptionMenu.setInitialIndex(context);
		}
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        sResult = nil;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputChatChannel::Filter::OptionMenu
{
	static open = nil;

    function initialize(context)
    {
        open = false;
        if (sFilterICType == nil)
            setFilterType(0);
		else
            setFilterType(sFilterICType);
    }

	function finalize(context)
	{
		open = nil;
	}
	
	function setFilterType(type)
	{
		if (type == 0)
		{
			Category.OptionMenu.insensitive = true;
			PasswordRequired.OptionMenu.insensitive = true;
		}
		else
		{
			Category.OptionMenu.insensitive = false;
			PasswordRequired.OptionMenu.insensitive = false;
		}
	}

	function setInitialIndex(context)
	{
		if (sFilterICType == nil)
			OptionMenu.setIndex(context, 0);
		else
			OptionMenu.setIndex(context, sFilterICType);
	}
	
	function onValueChanged(context, index)
	{
		main::sound.play("cursor");
		setFilterType(index);
	}
	
	function onFocusEnter(context, event)
	{
		if (!open)
		{
			var text = context.translate(InputDialog, "TOOLTIP|InputChatChannel::Filter::OptionMenu");
			PrivateRaceCommon::setToolTipOnValue(0, text);
		}
		return EVENTRESULT_FILTER;
	}

	function onPopupOpen(context)
	{
		open = true;
		PrivateRaceCommon::clearToolTipValue();
		return EVENTRESULT_FILTER;
	}
	
	function onPopupClosed(context)
	{
		open = false;
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::InputChatChannel::Name::Input::input
{
    function onFocusEnter(context, event)
    {
        var text = context.translate(InputDialog, "TOOLTIP|InputChatChannel::Name::Input::input");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        PrivateRaceCommon::attachToolTip();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputChatChannel::Category::OptionMenu
{
	static open = nil;

	function initialize(context)
	{
		open = false;
	
		if (sMode == 0)
			OptionMenu.insensitive = false;
	
		
		for (var i = 0; i < LobbyRoot::sCategoryList.size; i++)
		{
			if (sMode == 0 && LobbyRoot::sCategoryList[i][0] == 1)
				continue;
			
			makeAndAppendItem(
				LobbyRoot::sCategoryList[i][0],
				LobbyRoot::sCategoryList[i][1]
			);
		}

		OptionMenu.applyAppend(context);
	}

	function finalize(context)
	{
		open = nil;
	}
	
	function makeAndAppendItem(category, text)
	{
		Item.visible = false;
		var item = Item.doCopy();
		item.visible = true;
		item["label"].text = text;
		item["label"].adjustScale();
		item.defineStatic("sCategory", category);
		popup::vbox.appendChild(item);
	}

	function setInitialIndex(context)
	{
		if (sFilterICType == nil || sMode == 0 || sFilterICCategory == nil || sFilterICCategoryIndex == nil)
			OptionMenu.setIndex(context, 0);
		else
			OptionMenu.setIndex(context, sFilterICCategoryIndex);
	}
	
	function onFocusEnter(context, event)
	{
		if (!open)
		{
			var text = "";
			if (sMode == 0)
				text = context.translate(InputDialog, "TOOLTIP|InputChatChannel::Category::OptionMenu_CREATE_MODE");
			else
				text = context.translate(InputDialog, "TOOLTIP|InputChatChannel::Category::OptionMenu_FILTER_MODE");
			
			PrivateRaceCommon::setToolTipOnValue(0, text);
		}
		return EVENTRESULT_FILTER;
	}

	function onPopupOpen(context)
	{
		open = true;
		PrivateRaceCommon::clearToolTipValue();
		return EVENTRESULT_FILTER;
	}
	
	function onPopupClosed(context)
	{
		open = false;
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::InputChatChannel::Password::Input::input
{
    function onFocusEnter(context, event)
    {
        var text = context.translate(InputDialog, "TOOLTIP|InputChatChannel::Password::Input::input");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        PrivateRaceCommon::attachToolTip();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputChatChannel::PasswordAgain::Input::input
{
    function onFocusEnter(context, event)
    {
        var text = context.translate(InputDialog, "TOOLTIP|InputChatChannel::PasswordAgain::Input::input");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        PrivateRaceCommon::attachToolTip();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputChatChannel::PasswordRequired::OptionMenu
{
    static open = false;

    function initialize(context)
    {
        open = false;
    }

    function finalize(context)
    {
        open = nil;
    }

    function setInitialIndex(context)
    {
        if (sFilterICType == nil || sFilterICPasswordRequired == nil)
            OptionMenu.setIndex(context, 0);
        else if (sFilterICPasswordRequired)
            OptionMenu.setIndex(context, 1);
        else
            OptionMenu.setIndex(context, 0);
    }

    function onFocusEnter(context, event)
    {
        if (!open)
        {
            var text = context.translate(InputDialog, "TOOLTIP|InputChatChannel::PasswordRequired::OptionMenu");
            PrivateRaceCommon::setToolTipOnValue(0, text);
        }
        return EVENTRESULT_FILTER;
    }

    function onPopupOpen(context)
    {
        open = true;
        PrivateRaceCommon::clearToolTipValue();
        return EVENTRESULT_FILTER;
    }

    function onPopupClosed(context)
    {
        open = false;
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputChatChannel::Buttons::CancelOK::Cancel
{
    function onActivate(context)
    {
        main::sound.play("cancel");
        sResult = nil;
        close(context);
        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        var text = context.translate(InputDialog, "TOOLTIP|CANCEL");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputChatChannel::Buttons::CancelOK::OK
{
	function createChatChannel(context)
	{
		if (Name::Input::input.value == "")
		{
			var default_name = context.translate(InputDialog, "DEFAULT_CHAT_CHANNEL_NAME").build(main::network.my_name);
			var text = context.translate(InputDialog, "DO_YOU_WISH_CREATE_TO").build(default_name);
			var res = openConfirmDialog(context, DIALOG_QUERY, text);
			if (res)
				Name::Input::input.value = default_name;
			else
				return nil;
		}
		else if (!PrivateRaceCommon::textFilter(context, Name::Input::input.sanitized_value))
			return nil;
	
		if (Password::Input::input.value != PasswordAgain::Input::input.value)
		{
			main::sound.play("disable");
			var text = context.translate(InputDialog, "ERROR|TWO_PASSWORDS_DID_NOT_MATCH_EATHER");
			openConfirmDialog(context, DIALOG_ERROR, text);
			return nil;
		}
		var text = context.translate(InputDialog, "NOW_CREATING_CHAT_CHANNEL");
		return openProcessDialog(context, text, createChatChannelInternal);
	}

	function createChatChannelInternal(context)
	{
		var name = Name::Input::input.sanitized_value;
	
		var prefix = PrivateRaceCommon::getPrefixWorldName("VU");
		name = prefix + name;
	
		var password = Password::Input::input.value;
	
		var category = Category::OptionMenu.getItem()["sCategory"];
	
		var password_required = false;
		if (password != nil && password != "")
		{
			password_required = true;
		}
	
		var ff1 = buildFilterFieldValue(category);
		var ff2 = buildFilterFieldValue(password_required);
	
		var lobby_id = main::network.createChannel(
			name,
			password,
			LobbyRoot::sMaxMember,
			ff1,
			ff2,
			0,
			0,
			(1 << 6)
		);
	
		if (lobby_id <= 0)
		{
			openOnlineErrorDialog(context);
			return nil;
		}
	
		return [lobby_id, name, password];
	}

	function buildFilterFieldValue(value)
	{
		if (value < 0 || value > 31)
			return 0;
	
		return (1 << value);
	}

	function setChatChannelFilters(context, type)
	{
		if (type == 0)
		{
			LobbyRoot::clearLobbyWorldFilter(context);
			return;
		}
	
		var category = Category::OptionMenu.getItem()["sCategory"];
	
		sFilterICType = Filter::OptionMenu.index;
		sFilterICCategory = category;
		sFilterICCategoryIndex = Category::OptionMenu.index;
		sFilterICPasswordRequired = PasswordRequired::OptionMenu.index;
	
		var ff1 = buildFilterFieldValue(sFilterICCategory);
		var ff2 = buildFilterFieldValue(sFilterICPasswordRequired);
	
		if (!main::network.setLobbyWorldFilter(ff1, ff2, 0, 0, 1, (1 << 6)))
		{
			openOnlineErrorDialog(context);
			return false;
		}
	
		return true;
	}

	function onActivate(context)
	{
		main::sound.play("ok");
	
		var is_close = false;
		var res = nil;
	
		if (sMode == 0)
		{
			res = createChatChannel(context);
			if (res != nil)
				is_close = true;
		}
		else
		{
			res = setChatChannelFilters(context, Filter::OptionMenu.index);
			if (res)
				is_close = true;
		}
		sResult = res;
	
		if (is_close)
			close(context);
	
		return EVENTRESULT_FILTER;
	}

	function onFocusEnter(context, event)
	{
		var text = "";
		if (sMode == 0)
			text = context.translate(InputDialog, "TOOLTIP|InputChatChannel::Buttons::CancelOK::OK_CREATE_MODE");
		else
			text = context.translate(InputDialog, "TOOLTIP|InputChatChannel::Buttons::CancelOK::OK_FILTER_MODE");
	
		PrivateRaceCommon::setToolTipOnValue(0, text);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::ContextMenu
{
	static sMode = nil;
	
	static sContextMenuItem = [
		"Title",
		"SeeProfile",
		"SendMsg",
		"DelBuddy",
		"DelIgnore",
		"AddBuddy",
		"AddIgnore",
		"JoinChat",
		"JoinGame"
	];

	function open(context, item, args)
	{
		initializeCommon(context);
		preInitialize(context, args);
		ContextMenu::Title::title.text = context.translate(InputDialog, "TITLE|CONTEXT_MENU").build(args[1]);
		activateWidget(context, item);
		postInitialize(context);
		gotoModalDialog(context);
		return sResult;
	}
	
	function preInitialize(context, args)
	{
		sMode = args[0];
		setVisible();
		ContextMenu.doColorize();
	}

	function activateWidget(context, item)
	{
		var sy = 0;
		var contextmenu_h = 0;
		
		for (var i = 0; i < sContextMenuItem.size; i++)
		{
			contextmenu_h += ContextMenu[sContextMenuItem[i]].h;
			if (!ContextMenu[sContextMenuItem[i]].visible)
				contextmenu_h -= ContextMenu[sContextMenuItem[i]].h;
		}
		if ((item.sy + item.h + contextmenu_h) >= ToolTip.sy)
			sy = ToolTip.sy - contextmenu_h;
		else
			sy = item.sy + item.h;
	
		ContextMenu.sx = item.sx;
		ContextMenu.sy = sy;
		ContextMenu.minimum_height = 0;
		activateWidgetCommon(context, ContextMenu);
	}

	// why
	function postInitialize(context)
	{
		if (sMode == 0)
			InputDialog.setFocus(SeeProfile);
		else if (sMode == 1)
			InputDialog.setFocus(SeeProfile);
		else if (sMode == 2)
			InputDialog.setFocus(SeeProfile);
		else if (sMode == 3)
			InputDialog.setFocus(SeeProfile);
		else if (sMode == 4)
			InputDialog.setFocus(SeeProfile);
	}

	function finalize(context)
	{
		sMode = nil;
	}


	function setVisible()
	{
		if (sMode == 0)
		{
			SeeProfile.visible = true;
			SendMsg.visible = true;
			DelBuddy.visible = true;
			DelIgnore.visible = false;
			AddBuddy.visible = false;
			AddIgnore.visible = false;
			JoinChat.visible = true;
			JoinGame.visible = false;
		}
		else if (sMode == 1)
		{
			SeeProfile.visible = true;
			SendMsg.visible = false;
			DelBuddy.visible = false;
			DelIgnore.visible = true;
			AddBuddy.visible = false;
			AddIgnore.visible = false;
			JoinChat.visible = false;
			JoinGame.visible = false;
		}
		else if (sMode == 2)
		{
			SeeProfile.visible = true;
			SendMsg.visible = false;
			DelBuddy.visible = false;
			DelIgnore.visible = false;
			AddBuddy.visible = false;
			AddIgnore.visible = false;
			JoinChat.visible = false;
			JoinGame.visible = false;
		}
		else if (sMode == 3)
		{
			SeeProfile.visible = true;
			SendMsg.visible = true;
			DelBuddy.visible = false;
			DelIgnore.visible = false;
			AddBuddy.visible = true;
			AddIgnore.visible = true;
			JoinChat.visible = false;
			JoinGame.visible = true;
		}
		else if (sMode == 4)
		{
			SeeProfile.visible = true;
			SendMsg.visible = true;
			DelBuddy.visible = false;
			DelIgnore.visible = false;
			AddBuddy.visible = false;
			AddIgnore.visible = false;
			JoinChat.visible = false;
			JoinGame.visible = false;
		}
	}
}

module PROJECT::ROOT::ContextMenu::SeeProfile
{
    function onActivate(context)
    {
        sResult = 1;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ContextMenu::SendMsg
{
    function onActivate(context)
    {
        sResult = 2;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ContextMenu::DelBuddy
{
    function onActivate(context)
    {
        sResult = 3;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ContextMenu::DelIgnore
{
    function onActivate(context)
    {
        sResult = 4;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ContextMenu::AddBuddy
{
    function onActivate(context)
    {
        sResult = 5;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ContextMenu::AddIgnore
{
    function onActivate(context)
    {
        sResult = 6;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ContextMenu::JoinChat
{
    function onActivate(context)
    {
        sResult = 7;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ContextMenu::JoinGame
{
    function onActivate(context)
    {
        sResult = 8;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputPrivateRace
{
	static sLobbyId = nil;
	static sMode = nil;
	static sFilterIPRType = nil;
	static sFilterIPRCourse = nil;
	static sFilterIPRCourseListIndex = nil;
	static sFilterIPRCourseCategoryIndex = nil;
	static sFilterIPRCar = nil;
	static sFilterIPRPasswordRequired = nil;
	static sFilterIPRUseVoiceChat = nil;

	function open(context, args)
	{
		initializeCommon(context);
		preInitialize(context, args);
		var text = "";
		if (sMode == 0)
			text = context.translate(InputDialog, "TITLE|INPUT_PRIVATE_RACE");
		else
			text = context.translate(InputDialog, "TITLE|FILTER");
	
		setTitleText(context, InputPrivateRace, text);
		activateWidget(context, nil);
		postInitialize(context);
		gotoModalDialog(context);
		return sResult;
	}

	function preInitialize(context, args)
	{
		if (args == nil && args[0] == nil)
		{
			sMode = 0;
			sLobbyId = 0;
		}
		else
		{
			sMode = args[0];
			sLobbyId = (args[1] == nil) ? 0 : args[1];
		}
	
		setVisible();
		InputPrivateRace.doColorize();
		initializeWidgets(context);
	}

	function activateWidget(context, item)
	{
		var sy = 0;
		if (sMode == 0)
			sy = 60;
		else
			sy = 60 + 50;
	
		setOriginalSX_SY(InputPrivateRace, 88, sy);
		setupDynamicHeightChangeWidet(InputPrivateRace);
		initializeDialogMoveActor(InputPrivateRace);
		activateWidgetCommon(context, InputPrivateRace);
	}

	function postInitialize(context)
	{
		setInitialValue(context);
		if (sMode == 0)
			InputDialog.setFocus(Name.Input.input);
		else
			InputDialog.setFocus(Filter.OptionMenu);
	}

	function finalize(context)
	{
		sLobbyId = nil;
		sMode = nil;
		Filter::OptionMenu::finalize(context);
		Course::Category::OptionMenu::finalize(context);
		Course::OptionMenu::finalize(context);
		Car::OptionMenu::finalize(context);
		PasswordRequired::OptionMenu::finalize(context);
		VoiceChat::OptionMenu::finalize(context);
		Course::OptionMenu::popup::vbox.clearWindow(context);
	}
	
	function unload(context)
	{
		sFilterIPRType = nil;
		sFilterIPRCourse = nil;
		sFilterIPRCourseListIndex = nil;
		sFilterIPRCourseCategoryIndex = nil;
		sFilterIPRCar = nil;
		sFilterIPRPasswordRequired = nil;
		sFilterIPRUseVoiceChat = nil;
	}


	function setVisible()
	{
		var isCreate = false;
		if (sMode == 0)
			isCreate = true;
	
		Filter.visible = !isCreate;
		Name.visible = isCreate;
		MaxLaps.visible = isCreate;
		MaxMember.visible = isCreate;
		Car.visible = true;
		Password.visible = isCreate;
		PasswordAgain.visible = isCreate;
		PasswordRequired.visible = !isCreate;
		VoiceChat.visible = true;
	}

	function initializeWidgets(context)
	{
		Course.Category.OptionMenu.initialize(context);
		Course.OptionMenu.initialize(context);
		Car.OptionMenu.initialize(context);
		PasswordRequired.OptionMenu.initialize(context);
		VoiceChat.OptionMenu.initialize(context);
		if (sMode == 0)
		{
			MaxLaps.slider.initialize(context);
			MaxMember.slider.initialize(context);
		}
		else
			Filter.OptionMenu.initialize(context);
	}

	function setInitialValue(context)
	{
		Course.Category.OptionMenu.setInitialIndex(context);
		Course.OptionMenu.setInitialIndex(context);
		Car.OptionMenu.setInitialIndex(context);
		VoiceChat.OptionMenu.setInitialIndex(context);
		if (sMode == 0)
		{
			Name.Input.input.value = "";
		}
		else
		{
			Filter.OptionMenu.setInitialIndex(context);
			PasswordRequired.OptionMenu.setInitialIndex(context);
		}
	}
	
	function getRaceName()
	{
		return sReturnValue;
	}
}

module PROJECT::ROOT::InputPrivateRace::Filter::OptionMenu
{
	static open = nil;

	function initialize(context)
	{
		open = false;
		if (sFilterIPRType == nil)
			setFilterType(0);
		else
			setFilterType(sFilterIPRType);
	}
	
	function finalize(context)
	{
		open = nil;
	}

	function setFilterType(type)
	{
		if (type == 0)
		{
			Course.Category.OptionMenu.insensitive = true;
			Course.OptionMenu.insensitive = true;
			Car.OptionMenu.insensitive = true;
			PasswordRequired.OptionMenu.insensitive = true;
			VoiceChat.OptionMenu.insensitive = true;
		}
		else
		{
			Course.Category.OptionMenu.insensitive = false;
			Car.OptionMenu.insensitive = !main::game.garage.hasRidingCar();
			PasswordRequired.OptionMenu.insensitive = false;
			VoiceChat.OptionMenu.insensitive = false;
		}
	}

	function setInitialIndex(context)
	{
		if (sFilterIPRType == nil)
			OptionMenu.setIndex(context, 0);
		else
			OptionMenu.setIndex(context, sFilterIPRType);
	}
	
	function onValueChanged(context, index)
	{
		main::sound.play("cursor");
		setFilterType(index);
	}
	
	function onFocusEnter(context, event)
	{
		if (!open)
		{
			var text = context.translate(InputDialog, "TOOLTIP|InputPrivateRace::Filter::OptionMenu");
			PrivateRaceCommon::setToolTipOnValue(0, text);
		}
		return EVENTRESULT_FILTER;
	}

	function onPopupOpen(context)
	{
		open = true;
		PrivateRaceCommon::clearToolTipValue();
		return EVENTRESULT_FILTER;
	}
	
	function onPopupClosed(context)
	{
		open = false;
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::InputPrivateRace::Name::Input::input
{
    function onFocusEnter(context, event)
    {
        var text = context.translate(InputDialog, "TOOLTIP|InputPrivateRace::Name::Input::input");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        PrivateRaceCommon::attachToolTip();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::InputPrivateRace::Course::Category::OptionMenu
{
	static open = nil;

	function initialize(context)
	{
		open = false;
		Course.Category.OptionMenu.insensitive = false;
		OptionMenu::popup::vbox.clearWindow(context);
		var cnt = PrivateRaceCommon::getCourseCategoryListSize();
		for (var i = 0; i < cnt; i++)
		{
			var text = PrivateRaceCommon::getCourseCategoryListText(context, i);
			makeAndAppendItem(text);
		}

		OptionMenu.applyAppend(context);

		var course_list = PrivateRaceCommon::getCourseList("other", nil, 0);
		if (course_list.size == 0)
			OptionMenu.insensitive = true;
	}

	function finalize(context)
	{
		open = nil;
	}
	
	function makeAndAppendItem(text)
	{
		Item.visible = false;
		var item = Item.doCopy();
		item.visible = true;
		item["label"].text = text;
		item["label"].adjustScale();
		popup::vbox.appendChild(item);
	}

	function setInitialIndex(context)
	{
		if (sMode == 0)
			OptionMenu.setIndex(context, 0);
		else if (sFilterIPRType == nil || sFilterIPRCourse == nil || sFilterIPRCourseCategoryIndex == nil)
			OptionMenu.setIndex(context, 0);
		else
			OptionMenu.setIndex(context, sFilterIPRCourseCategoryIndex);
	}
	
	function onValueChanged(context, index)
	{
		main::sound.play("cursor");
		var code = PrivateRaceCommon::getCourseCategoryCodeFromIndex(index);
		Course::OptionMenu::refresh(context, code);
		Course::OptionMenu.setIndex(context, 0);
		Course::OptionMenu::applyMaxPlayer(context);
	}

	function onFocusEnter(context, event)
	{
		if (!open)
		{
			var text = "";
			if (sMode == 0)
				text = context.translate(InputDialog, "TOOLTIP|InputPrivateRace::Course::Category::OptionMenu_CREATE_MODE");
			else
				text = context.translate(InputDialog, "TOOLTIP|InputPrivateRace::Course::Category::OptionMenu_FILTER_MODE");
	
			PrivateRaceCommon::setToolTipOnValue(0, text);
		}
		return EVENTRESULT_FILTER;
	}
	
	function onPopupOpen(context)
	{
		open = true;
		PrivateRaceCommon::clearToolTipValue();
		return EVENTRESULT_FILTER;
	}
	
	function onPopupClosed(context)
	{
		open = false;
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::InputPrivateRace::Course::OptionMenu
{
	static open = nil;
	

	function initialize(context)
	{
		open = false;
		var code = "all";
		if (sFilterIPRType == nil || sFilterIPRCourse == nil || sFilterIPRCourseCategoryIndex == nil)
			code = PrivateRaceCommon::getCourseCategoryCodeFromIndex(0);
		else
			code = PrivateRaceCommon::getCourseCategoryCodeFromIndex(sFilterIPRCourseCategoryIndex);
	
		Course::OptionMenu::refresh(context, code);
	}
	
	function finalize(context)
	{
		open = nil;
	}

	function makeAndAppendItem(text, course_code, max_player)
	{
		Item.visible = false;
		var item = Item.doCopy();
		item.visible = true;
		item["label"].text = text;
		item["label"].adjustScale();
		item.defineStatic("sCourseCode", course_code);
		item.defineStatic("sMaxPlayer", max_player);
		popup::vbox.appendChild(item);
	}
	
	function makeAndAppendItem_course_all(context, course_category)
	{
		var text = PrivateRaceCommon::getCourseCategoryListText(context, 0);
		makeAndAppendItem(text, "all", PrivateRaceCommon::getMaxCarNum(course_category));
	}

	function refresh(context, course_category)
	{
		OptionMenu::popup::vbox.clearWindow(context);
	
		if (course_category == "all")
		{
			OptionMenu.insensitive = true;
			makeAndAppendItem_course_all(context, course_category);
		}
		else
		{
			OptionMenu.insensitive = false;
			makeAndAppendItem_course_all(context, course_category);
			var course_list = PrivateRaceCommon::getCourseList(course_category, nil, 0);
			if (course_list.size == 0)
			{
				OptionMenu.insensitive = true;
			}
			else
			{
				for (var i = 0; i < course_list.size; i++)
				{
					var text = context.translate(InputDialog, "CourseNameCaption", course_list[i][0]);
					makeAndAppendItem(text, course_list[i][0], course_list[i][1]);
				}
			}
		}
		OptionMenu.applyAppend(context);
	}

	function setInitialIndex(context)
	{
		if (sMode == 0)
		{
			OptionMenu.setIndex(context, 0);
			applyMaxPlayer(context);
		}
		else if(sFilterIPRType == nil || sFilterIPRCourse == nil || sFilterIPRCourseListIndex == nil)
			OptionMenu.setIndex(context, 0);
		else
			OptionMenu.setIndex(context, sFilterIPRCourseListIndex);
	}

	function applyMaxPlayer(context)
	{
		var max_player = OptionMenu.getItem()["sMaxPlayer"];
		if (max_player == nil)
			return;
	
		if (max_player == 2)
		{
			MaxMember::slider.insensitive = true;
			MaxMember::slider.index = max_player;
			MaxMember::slider::label.text = max_player;
		}
		else
		{
			MaxMember::slider.insensitive = false;
			MaxMember::slider.index = max_player;
			MaxMember::slider.max = max_player;
			MaxMember::slider::popup::max.text = max_player;
			var index = MaxMember::slider.index;
			MaxMember::slider::popup::pinch::value.text = index;
			MaxMember::slider::label.text = index;
		}
	}
	
	function onValueChanged(context, index)
	{
		main::sound.play("cursor");
		applyMaxPlayer(context);
	}

	function onFocusEnter(context, event)
	{
		if (!open)
		{
			var text = "";
			if (sMode == 0)
				text = context.translate(InputDialog, "TOOLTIP|InputPrivateRace::Course::OptionMenu_CREATE_MODE");
			else
				text = context.translate(InputDialog, "TOOLTIP|InputPrivateRace::Course::OptionMenu_FILTER_MODE");
	
			PrivateRaceCommon::setToolTipOnValue(0, text);
		}
		return EVENTRESULT_FILTER;
	}

	function onPopupOpen(context)
	{
		open = true;
		PrivateRaceCommon::clearToolTipValue();
		return EVENTRESULT_FILTER;
	}
	
	function onPopupClosed(context)
	{
		open = false;
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::InputPrivateRace::MaxLaps::slider
{
	function initialize(context)
	{
		slider.index = 5;
		slider::popup::min.text = slider.min.toInt();
		slider::popup::max.text = slider.max.toInt();
		var index = slider.index;
		slider::popup::pinch::value.text = index;
		slider::label.text = index;
	}
	
	function onValueChanged(context, slider)
	{
		main::sound.play("cursor");
		popup::pinch::value.text = slider.index;
		slider::label.text = slider.index;
	}
	
	function onFocusEnter(context, event)
	{
		var text = context.translate(InputDialog, "TOOLTIP|InputPrivateRace::MaxLaps::slider");
		PrivateRaceCommon::setToolTipOnValue(0, text);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::InputPrivateRace::MaxMember::slider
{
	function initialize(context)
	{
		slider.index = 6;
		slider::popup::min.text = slider.min.toInt();
		slider::popup::max.text = slider.max.toInt();
		var index = slider.index;
		slider::popup::pinch::value.text = index;
		slider::label.text = index;
	}
	
	function onValueChanged(context, slider)
	{
		main::sound.play("cursor");
		popup::pinch::value.text = slider.index;
		slider::label.text = slider.index;
	}

	function onFocusEnter(context, event)
	{
		var text = context.translate(InputDialog, "TOOLTIP|InputPrivateRace::MaxMember::slider");
		PrivateRaceCommon::setToolTipOnValue(0, text);
		return EVENTRESULT_FILTER;
	}

	module InputDialog::InputPrivateRace::Car::OptionMenu
	{
		static open = nil;

		function initialize(context)
		{
			open = false;
			Car.OptionMenu.insensitive = !main::game.garage.hasRidingCar();
		}
		
		function finalize(context)
		{
			open = nil;
		}
		
		function setInitialIndex(context)
		{
			if (sMode == 0 || sFilterIPRType == nil || sFilterIPRCar == nil)
				OptionMenu.setIndex(context, 0);
			else
				OptionMenu.setIndex(context, sFilterIPRCar);
		}

		function onFocusEnter(context, event)
		{
			if (!open) {
				var text = context.translate(InputDialog, "TOOLTIP|InputPrivateRace::Car::OptionMenu");
				PrivateRaceCommon::setToolTipOnValue(0, text);
			}
			return EVENTRESULT_FILTER;
		}
		
		function onPopupOpen(context)
		{
			open = true;
			PrivateRaceCommon::clearToolTipValue();
			return EVENTRESULT_FILTER;
		}
		
		function onPopupClosed(context)
		{
			open = false;
			return EVENTRESULT_FILTER;
		}

	}
	
	module InputDialog::InputPrivateRace::Password::Input::input
	{
		function onFocusEnter(context, event)
		{
			var text = context.translate(InputDialog, "TOOLTIP|InputPrivateRace::Password::Input::input");
			PrivateRaceCommon::setToolTipOnValue(0, text);
			PrivateRaceCommon::attachToolTip();
			return EVENTRESULT_FILTER;
		}
	}

	module InputDialog::InputPrivateRace::PasswordAgain::Input::input
	{
		function onFocusEnter(context, event)
		{
			var text = context.translate(InputDialog, "TOOLTIP|InputPrivateRace::PasswordAgain::Input::input");
			PrivateRaceCommon::setToolTipOnValue(0, text);
			PrivateRaceCommon::attachToolTip();
			return EVENTRESULT_FILTER;
		}
	}
}

module PROJECT::ROOT::InputPrivateRace::PasswordRequired::OptionMenu
{
	static open = nil;

	function initialize(context)
	{
		open = false;
	}

	function finalize(context)
	{
		open = nil;
	}
	
	function setInitialIndex(context)
	{
		if (sFilterIPRType == nil || sFilterIPRPasswordRequired == nil)
			OptionMenu.setIndex(context, 0);
		else if (sFilterIPRPasswordRequired)
			OptionMenu.setIndex(context, 1);
		else
			OptionMenu.setIndex(context, 0);
	}

	function onFocusEnter(context, event)
	{
		if (!open)
		{
			var text = context.translate(InputDialog, "TOOLTIP|InputPrivateRace::PasswordRequired::OptionMenu");
			PrivateRaceCommon::setToolTipOnValue(0, text);
		}
		return EVENTRESULT_FILTER;
	}
	
	function onPopupOpen(context)
	{
		open = true;
		PrivateRaceCommon::clearToolTipValue();
		return EVENTRESULT_FILTER;
	}
	
	function onPopupClosed(context)
	{
		open = false;
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::InputPrivateRace::VoiceChat::OptionMenu
{
	static open = nil;

	function initialize(context)
	{
		open = false;
		VoiceChat.OptionMenu.insensitive = false;
	}
	
	function finalize(context)
	{
		open = nil;
	}
	
	function setInitialIndex(context)
	{
		if (sMode == 0 || sFilterIPRType == nil || sFilterIPRUseVoiceChat == nil)
			OptionMenu.setIndex(context, 1);
		else if (sFilterIPRUseVoiceChat == 0)
			OptionMenu.setIndex(context, 0);
		else
			OptionMenu.setIndex(context, 1);
	}
	
	function onFocusEnter(context, event)
	{
		if (!open)
		{
			var text = context.translate(InputDialog, "TOOLTIP|InputPrivateRace::VoiceChat::OptionMenu");
			PrivateRaceCommon::setToolTipOnValue(0, text);
		}
		return EVENTRESULT_FILTER;
	}
	
	function onPopupOpen(context)
	{
		open = true;
		PrivateRaceCommon::clearToolTipValue();
		return EVENTRESULT_FILTER;
	}
	
	function onPopupClosed(context)
	{
		open = false;
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::InputPrivateRace::Buttons::CancelOK::Cancel
{
	function onActivate(context)
	{
		main::sound.play("cancel");
		sResult = 0;
		close(context);
		return EVENTRESULT_FILTER;
	}
	
	function onFocusEnter(context, event)
	{
		var text = context.translate(InputDialog, "TOOLTIP|CANCEL");
		PrivateRaceCommon::setToolTipOnValue(0, text);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::InputPrivateRace::Buttons::CancelOK::OK
{
	function createPrivateRace(context)
	{
		if (Name::Input::input.value == "")
		{
			var default_name = context.translate(InputDialog, "DEFAULT_RACE_NAME").build(main::network.my_name);
			var text = context.translate(InputDialog, "DO_YOU_WISH_CREATE_TO").build(default_name);
			var res = openConfirmDialog(context, DIALOG_QUERY, text);
			if (res)
				Name::Input::input.value = default_name;
			else
				return false;
		}
		else if (!PrivateRaceCommon::textFilter(context, Name::Input::input.sanitized_value))
			return false;
	
		if (Password::Input::input.value != PasswordAgain::Input::input.value)
		{
			main::sound.play("disable");
			var text = context.translate(InputDialog, "ERROR|TWO_PASSWORDS_DID_NOT_MATCH_EATHER");
			openConfirmDialog(context, DIALOG_ERROR, text);
			return false;
		}
	
		return createGameMGCL(context);
	}

	function createGameMGCL(context)
	{
		var input_name = Name::Input::input.sanitized_value;
		var prefix = PrivateRaceCommon::getPrefixWorldName("VR");
		var name = prefix + input_name;
		var password = Password::Input::input.value;
		var max_clients = MaxMember::slider.index;
		var course_code = Course::OptionMenu.getItem()["sCourseCode"];
		var stats = main::menu::MGameStats();
		stats.course = course_code;
		stats.laps = MaxLaps::slider.index;
		var stats_string = stats.pack();
		var course_id;
		if (course_code == "all")
			course_id = -1;
		else
			course_id = main::menu::MCourseData::GetID(course_code);
	
		var is_full_car_select = (Car::OptionMenu.index == 0);
		var use_voice_chat = (VoiceChat::OptionMenu.index == 0);
		var course_category_index = Course::Category::OptionMenu.index;
	
		if (!is_full_car_select && !PrivateRaceCommon::isHavingOrEquipedLimitedTire(context, course_category_index, course_code))
		{
			return false;
		}
	
		var password_required = (password != nil && password != "");
	
		var rule_set = makeCurrentRuleSet(
			nil, // private?
			1, // timetrial?
			0, // mycar?
			!is_full_car_select,
			use_voice_chat,
			nil, // skill?
			is_full_car_select,
			nil, // slowcarboost?
			course_category_index,
			password_required
		);
	
		main::network.setVoiceChatEnable(use_voice_chat);
	
		var res = main::network.createGameMGCL(
			name,
			password,
			stats_string,
			max_clients,
			2,
			0,
			0,
			rule_set,
			course_id,
			sLobbyId
		);
	
		if (!res)
		{
			openOnlineErrorDialog(context);
			return nil;
		}
	
		sReturnValue = input_name;
		return true;
	}

	function setGameListFilters(context, type) 
	{
		if (type == 0)
		{
			if (!ChatRoot::setGameListFilter_PrivateRaceAndCurrentLobby(context))
				return false;
			else
				return true;
		}

		var course_code = Course::OptionMenu.getItem()["sCourseCode"];
		var course_id;
		if (course_code == "all")
			course_id = -1;
		else
			course_id = main::menu::MCourseData::GetID(course_code);
	
		sFilterIPRType = Filter::OptionMenu.index;
		sFilterIPRCourse = course_id;
		sFilterIPRCourseListIndex = Course::OptionMenu.index;
		sFilterIPRCourseCategoryIndex = Course::Category::OptionMenu.index;
		sFilterIPRCar = Car::OptionMenu.index;
		sFilterIPRPasswordRequired = PasswordRequired::OptionMenu.index;
		sFilterIPRUseVoiceChat = VoiceChat::OptionMenu.index;
	
		var is_full_car_select = (sFilterIPRCar == 0);
		var use_voice_chat = (sFilterIPRUseVoiceChat == 0);
		var password_required = (sFilterIPRPasswordRequired != 0);
	
		var rule_set = makeCurrentRuleSet(
			nil, // private?
			true, // timetrial?
			false, // mycar?
			!is_full_car_select,
			use_voice_chat,
			nil, // skill?
			is_full_car_select,
			nil, // slowcarboost?
			sFilterIPRCourseCategoryIndex,
			password_required
		);
	
		if (!main::network.clearGameListFilter())
		{
			openOnlineErrorDialog(context);
			return false;
		}

		var filter = main::network.setGameListFilter("RULES_SET", "EQUAL_TO", rule_set);
		filter = main::network.setGameListFilter("GENERIC_FIELD_1", "EQUAL_TO", sFilterIPRCourse);
		filter = main::network.setGameListFilter("GENERIC_FIELD_2", "EQUAL_TO", sLobbyId);

		if (filter <= 0)
		{
			openOnlineErrorDialog(context);
			return false;
		}
	
		return true;
	}

	function onActivate(context) {
		main::sound.play("ok");
		var res = false;
		if (sMode == 0)
			res = createPrivateRace(context);
		else
			res = setGameListFilters(context, Filter::OptionMenu.index);
	
		sResult = res;
		if (res != nil && res)
			close(context);
	
		return EVENTRESULT_FILTER;
	}
	
	function onFocusEnter(context, event)
	{
		var text = "";
		if (sMode == 0)
			text = context.translate(InputDialog, "TOOLTIP|InputPrivateRace::Buttons::CancelOK::OK_CREATE_MODE");
		else
			text = context.translate(InputDialog, "TOOLTIP|InputPrivateRace::Buttons::CancelOK::OK_FILTER_MODE");
	
		PrivateRaceCommon::setToolTipOnValue(0, text);
		return EVENTRESULT_FILTER;
	}
}