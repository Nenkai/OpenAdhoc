//---------------------------------------------------------------------------------------
// LicenseDetailRoot.ad
//
// License Test selection root
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

#ifndef LICENSE_B
    #define LICENSE_CATEGORY_TEST_COUNT 16

    #define LICENSE_B "l0b"
    #define LICENSE_A "l0a"
    #define LICENSE_IB "lib"
    #define LICENSE_IA "lia"
    #define LICENSE_S "l0s"
#endif

#define LICENSE_COFFEE_BREAK "l0c"

#define COFFEE_BREAK_1 "l0c0001"
#define COFFEE_BREAK_2 "l0c0002"
#define COFFEE_BREAK_3 "l0c0003"
#define COFFEE_BREAK_4 "l0c0004"
#define COFFEE_BREAK_5 "l0c0005"

#define LICENSE_LAST_CODE "0016"


module PROJECT::ROOT
{
#ifdef GT4O_US_BETA
    static current_category;
#else
    static current_category = nil;
#endif

    for (var i = 0; i < LICENSE_CATEGORY_TEST_COUNT; i++)
    {
        var widget = Pane["l%04d".format(i + 1)];
        widget.defineStatic("license", nil);

        var corn = hidden::Corn.doCopy();
        corn["label"].text = (i + 1).toString();
        corn.actor = main::menu::MChaseActor(corn);
        widget.appendChild(corn);
    }

    Pane::coffee.defineStatic("license", nil);

    function setFadeActor(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        widget.actor = actor;
        widget.actor.period = 1.0;
        widget.actor.out = true;
        widget.actor.warp();
    }

    setFadeActor(Pane::Veil);

    function setFadeInActor(widget, idx)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        widget.actor = actor;
        widget.actor.period = 0.1;
        widget.actor.over = idx.toFloat() * 1.0;
        widget.actor.repeat = false;
        widget.actor.out = true;
        widget.actor.warp();
        widget.actor.out = false;
    }

    for (var i = 0; i < LICENSE_CATEGORY_TEST_COUNT; i++)
    {
        var widget = Pane["l%04d".format(i + 1)];
        setFadeInActor(widget, i);
    }

    function get_coffee_race_code()
    {
        var coffee_race_code = nil;

        switch (current_category)
        {
            case LICENSE_B:
                coffee_race_code = COFFEE_BREAK_1;
                break;

            case LICENSE_A:
                coffee_race_code = COFFEE_BREAK_2;
                break;

            case LICENSE_IB:
                coffee_race_code = COFFEE_BREAK_3;
                break;

            case LICENSE_IA:
                coffee_race_code = COFFEE_BREAK_4;
                break;

            case LICENSE_S:
                coffee_race_code = COFFEE_BREAK_5;
                break;

            default:
                break;
        }

        return coffee_race_code;
    }

    function onInitialize(context)
    {
        hidden.visible = false;
        Pane::Veil.visible = false;

        current_category = main::game.menuRef();

        if (current_category == nil)
        {
            var cat = main::game.race_code.substr(0, 3);
            if (cat == LICENSE_B || cat == LICENSE_A || cat == LICENSE_IB || cat == LICENSE_IA || cat == LICENSE_S)
                current_category = cat;
            else
                current_category = LICENSE_B;
        }

        enterPage(context, ROOT, context.translate(LicenseRoot, "LicenseTitle"), 1);
        Pane::CarFace.action_type = "normal";
        Pane::CarFace.quality_level = 1;
        Pane::CarName.text = "";

        bg.image_path = "image/gtmode/license/" + current_category + ".png";
        bg.doInitialize(context);

        for (var i = 0; i < LICENSE_CATEGORY_TEST_COUNT; i++)
        {
            var license_code = current_category + "%04d".format(i + 1);
            var widget = Pane["l%04d".format(i + 1)];
            widget["Corn"]["bg"].image_path = "image/gtmode/license/corn_" + current_category + ".png";
            widget["Corn"]["bg"].doInitialize(context);
            widget["license"] = license_code;

            var unit = main::game.race_record.getUnit(license_code);
            if (unit != nil)
            {
                var result = unit.result;
                if (result != "none")
                {
                    widget["cup"].image_path = "image/gtmode/license/" + result + ".png";
                    widget["cup"].doInitialize(context);
                }
            }
        }

        var widget = Pane::coffee;
        var race_code = get_coffee_race_code();
        widget["license"] = race_code;

        var unit = main::game.race_record.getUnit(race_code);
        if (unit != nil)
        {
            var result = unit.result;
            Pane::coffee::bg.image_path = "image/gtmode/license/coffee_" + result + ".png";
            Pane::coffee::bg.doInitialize(context);
        }

        for (var i = 0; i < LICENSE_CATEGORY_TEST_COUNT; i++)
        {
            Pane["l%04d".format(i + 1)].actor.out = true;
            Pane["l%04d".format(i + 1)].actor.warp();
            Pane["l%04d".format(i + 1)].actor.out = false;
        }

        if (main::game.major_menu_widget != "")
        {
            if (Pane.defined(main::game.major_menu_widget))
                ROOT.setFocus(Pane[main::game.major_menu_widget]);
            
            main::game.major_menu_widget = "";
        }

        if (main::game.isNeedSave() && main::game.option.auto_save)
        {
            var page = main::game.major_menu_page;
            main::game.major_menu_page = "";
            saveAuto(context, ROOT, nil, 0);
            main::game.major_menu_page = page;
        }
    }

    function onFinalize(context)
    {
        leavePage(context, ROOT);
        current_category = nil;
    }

    // Gold license code - Select, Select, R1, R2, L2, L2, Select, L1, R1, Select, R2, L1, Select
    static craft_command = [
        PS2_PAD_CTRL_SELECT,
        PS2_PAD_CTRL_SELECT,
        PS2_PAD_CTRL_R1,
        PS2_PAD_CTRL_R2,
        PS2_PAD_CTRL_L2,
        PS2_PAD_CTRL_L2,
        PS2_PAD_CTRL_SELECT,
        PS2_PAD_CTRL_L1,
        PS2_PAD_CTRL_R1,
        PS2_PAD_CTRL_SELECT,
        PS2_PAD_CTRL_R2,
        PS2_PAD_CTRL_L1,
        PS2_PAD_CTRL_SELECT,
    ];

    function doCraft(context)
    {
        var fwidget = ROOT.getFocusedWidget();
        if (fwidget == nil)
            return;

        if (!fwidget.defined("license"))
            return;

        var race_code = fwidget["license"];
        var unit = main::game.race_record.getUnit(race_code);
        unit.update("license", "gold");
#ifdef GT4O_US_BETA
        main::game.calendar.putRunLicenseEvent(main::menu::MSystem::GetRegionCode() + race_code, unit.result, "", 10000);
#else
        main::game.calendar.putRunLicenseEvent("jp" + race_code, unit.result, "", 10000);
#endif
    }

    function onKeyPress(context, event)
    {
        if (craft(context, event, craft_command, doCraft))
        {
            return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.setFocus(nil);
        main::game.menuPop();
        set_last_focus(current_category);
        start_page(context, LicenseRoot);
        return EVENTRESULT_FILTER;
    }

    function onActivate(context, event)
    {
        if (!sureNoGarageFull(context))
        {
            return EVENTRESULT_FILTER;
        }

        var race_code = event.widget["license"];
        if (race_code.substr(3) == LICENSE_LAST_CODE && !main::game.race_record.canTryLastLicense(current_category))
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "you have to pass 15 licenses before"));
            return EVENTRESULT_FILTER;
        }

        main::sound.play("license_ok");

        context.cursor_visible = false;
        Pane::Veil.visible = true;
        Pane::Veil.actor.out = false;
        context.sync(1.0);
        
        main::game.race_code = race_code;
        main::game.major_menu_project = "gtmode";
        main::game.major_menu_page = ROOT.name;
        main::game.major_menu_widget = event.widget.name;
        main::menu::MSystem::SetLoadingMode("capture");
        exit_menu(context, "license");
        return EVENTRESULT_FILTER;
    }

    function on_focus_enter(context, widget)
    {
        if (widget.defined("Corn"))
            widget["Corn"].actor.doStart();
        
        var race_code = widget["license"];
        if (race_code != nil)
        {
            var focused_category = race_code.substr(0, 3);
            if (focused_category != LICENSE_COFFEE_BREAK)
                Pane::Info::Category.text = context.translate(ROOT, "LicenseName", current_category + "0000");
            else
                Pane::Info::Category.text = context.translate(ROOT, "LicenseName", "l0c0000");

            Pane::Info::Category.adjustScale();
            Pane::Info::Title.text = context.translate(ROOT, "LicenseName", race_code);
            Pane::Info::Title.adjustScale();

            var focused_index = race_code.substr(3).toInt();
            if (LicenseCarData.defined(focused_category + "_carlist"))
            {
                var car_code = LicenseCarData[focused_category + "_carlist"][focused_index - 1];
                Pane::CarFace.car_code = car_code;
                Pane::CarFace.car_color = LicenseCarData[focused_category + "_col_carlist"][focused_index - 1].toInt();
                Pane::CarName.text = main::menu::MCarData::GetCarName(car_code);
                Pane::CarName.adjustScale();
            }
        }

        Pane::CarFace.car_model.motion = 1;
        Pane::CarFace.car_model.ry = 120.0;
        Pane::CarFace.car_model.warp();
        Pane::CarFace.visible = true;
    }

    function on_focus_leave(context, widget)
    {
        Pane::CarFace.visible =  false;
        if (widget.defined("Corn"))
            widget["Corn"].actor.doStop();
    }
}

module PROJECT::ROOT::Pane::l0001
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::l0002
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::l0003
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::l0004
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::l0005
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::l0006
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::l0007
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::l0008
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::coffee
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::l0009
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::l0010
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::l0011
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::l0012
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::l0016
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::l0015
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::l0014
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::l0013
{
    function onFocusEnter(context, event)
    {
        on_focus_enter(context, event.widget);
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        on_focus_leave(context, event.widget);
        return EVENTRESULT_FILTER;
    }
}