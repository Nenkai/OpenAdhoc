

//---------------------------------------------------------------------------------------
// BotUtil.ad
//
// Utility module for online race bots.
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module main::BotUtil
{
    static sThread = nil;
    static sPrevRootName = nil;
    static sPhase = 0;
    static sCounter = 0;
    static sQuickIndex = 0;
    static sOldQuick = false;

    module SetupModule
    {
        function setupAppOpt(context)
        {
            var option = GAME_STATUS.user_profile.option;
            if (AppOpt.defined("nobot"))
            {
                option.bot_on = false;
                return;
            }
            else if (AppOpt.defined("bot"))
            {
                option.bot_on = true;
                option.bot_name = AppOpt["bot"];
                AppOpt.removeStatic("bot");

                if (option.bot_name == NP.getOnlineId())
                {
                    if (AppOpt.defined("nobothost"))
                    {
                        option.bot_on = false;
                        return;
                    }

                    option.bot_host = true;
                    option.bot_name = "";
                }
                else
                    option.bot_host = false;

                if (AppOpt.defined("bottype"))
                {
                    option.bot_type = AppOpt["bottype"].toInt();
                    AppOpt.removeStatic("bottype");
                }
                else
                    option.bot_type = 0;

                if (AppOpt.defined("botgroup"))
                {
                    option.bot_group = AppOpt["botgroup"];
                    AppOpt.removeStatic("botgroup");
                }
                else
                    option.bot_group = "default";

                if (AppOpt.defined("botroom"))
                {
                    option.bot_room = AppOpt["botroom"];
                    AppOpt.removeStatic("botroom");
                }
                else
                    option.bot_room = "";

                if (AppOpt.defined("botcrs"))
                {
                    option.bot_course = gtengine::MSpecDB::getCourseCode(AppOpt["botcrs"]);
                    AppOpt.removeStatic("botcrs");
                }
                else
                    option.bot_course = gtengine::MSpecDB::NO_CODE;

                if (GetVersionBranch() == "gt6")
                {
                    AppOpt.defineStatic("skip_tutorial");
                    AppOpt.defineStatic("skip_op");
                    AppOpt.defineStatic("no_autodemo");
                    option.display_margin_hd = 0;
                    option.display_margin_hd_adjust_done = true;

                    foreach (|var key, var value| in TutorialUtil::key_map)
                        GAME_STATUS.user_profile.tutorial.done("gttop", key);

                    var Garage = GAME_STATUS.user_profile.garage;
                    if (Garage.getCount() < 1)
                    {
                        var car_count = 10;
                        var car_list = SPECDB.queryList("SELECT ID FROM GENERIC_CAR \n"
                                        "WHERE SpecifyFlags1 & ? AND CarLabel <> 'car_color_sample' AND CarLabel <> 'wheel_color_sample' \n"
                                        " AND InDealer = 1 \n"
                                        "ORDER BY RANDOM() LIMIT ?", [gtengine::GenericFlag::USE_PREMIUM_MODEL, car_count]);
                        
                        var garage_id;
                        foreach (var car in car_list)
                        {
                            var cp = gtengine::MCarParameter(car.ID);
                            garage_id = Garage.addCar(cp);
                        }

                        Garage.rideCar(garage_id);
                    }
                    else
                    {
                        var carList = Garage.getCarList();
                        var index = pdistd::MRandom::GetValue(0, carList.size);
                        Garage.rideCar(carList[index].garage_id);
                    }

                    if (AppOpt.defined("quick_match"))
                    {
                        if (AppOpt["quick_match"] != true)
                            sQuickIndex = AppOpt["quick_match"].toInt();
                    }

                    if (AppOpt.defined("quickmatch_old"))
                        sOldQuick = true;
                }
            }
            else
                ;
        } 
    }

    function setup(context)
    {
        SetupModule::setupAppOpt(context);
        SetupModule.clearStatic();
    }
}