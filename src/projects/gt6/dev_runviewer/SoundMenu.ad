

















module SoundMenu
{
    import PROJECT::TopRoot::*;

    static black = main::menu::MColorObject(0.05, 0.05, 0.05);
    static red = main::menu::MColorObject(0.1, 0.05, 0.05);
    static blue = main::menu::MColorObject(0.05, 0.05, 0.1);
    static purple = main::menu::MColorObject(0.075, 0.05, 0.1);
    static green = main::menu::MColorObject(0.05, 0.1, 0.05);
    static yellow = main::menu::MColorObject(0.1, 0.1, 0.05);
    static cyan = main::menu::MColorObject(0.05, 0.1, 0.1);
    static gray = main::menu::MColorObject(0.1, 0.1, 0.1);
    static orange = main::menu::MColorObject(0.1, 0.075, 0.05);
    
    static engine_file_size = nil;
    static mstream_player_instance = nil;

    function get_all_cars(context)
    {
        var res = SPECDB.executeQuery("SELECT CarLabel FROM GENERIC_CAR ORDER BY CarLabel");
        var list = [];

        foreach (var row in res)
            list.push(row[0]);

        return list;
    }

    function on_select_es_previewer(context, index, menuitem, item, menu)
    {
        var project = main::manager.loadProject("/" + main::PROJECT_ROOT_DIR + "/dev_sound/dev_sound");
        finally { main::manager.unloadProject(project); }
        SoundProject::ESSoundRoot::open(context, menuitem.arg);
    }

    function on_select_sound_debug_popup_menu(context, index, menuitem, item, menu)
    {
        var project = main::manager.loadProject("/" + main::PROJECT_ROOT_DIR + "/dev_sound/dev_sound");
        finally { main::manager.unloadProject(project); }
        SoundProject::SoundRoot.open(context);
    }

    function on_select_asset_music_previewer(context, index, menuitem, item, menu)
    {
        SoundUtil::MenuBGMPlayFile("0113", false, 1.0);
        DialogUtil::openConfirmDialog(context, DialogUtil::OK, "hit any key");
    }

    static sound_debug_mode_map = [
        0 : "OFF",
        1 : "INFO",
        2 : "LEVEL",
        3 : "3D",
        4 : "DEBUG",
        16 : "RACE",
        17 : "BGM",
    ];

    static sound_debug_mode_list = [
        0,
        1,
        2,
        3,
        4,
        16,
        17,
    ];

    function on_update_sound_debug_mode(context, index, menuitem, item)
    {
        var mode = main::pdistd::MDynRes::importInt32("SoundDebugMode");
        var name = sound_debug_mode_map[mode];
        item["value"].text = name != nil ? name : "-";
    }

    function on_activate_sound_debug_mode(context, index, menuitem, item, arg)
    {
        var mode = main::pdistd::MDynRes::importInt32("SoundDebugMode");
        if (mode == nil)
            return;

        var i = sound_debug_mode_list.indexOf(mode);
        mode = sound_debug_mode_list[(i + 1) % sound_debug_mode_list.size];
        pdistd::MDynRes::setInt32("SoundDebugMode", mode);
        on_update_sound_debug_mode(context, index, menuitem, item);
    }

    function on_update_audio_direct_mode(context, index, menuitem, item)
    {
        var mode = main::pdistd::MDynRes::importBool("AudioDeviceVolumeMode", false);
        item["value"].text = mode ? "はい" : "いいえ";
    }

    function on_activate_audio_direct_mode(context, index, menuitem, item, arg)
    {
        var mode = main::pdistd::MDynRes::importBool("AudioDeviceVolumeMode", false);
        main::pdistd::MDynRes::setBool("AudioDeviceVolumeMode", !mode);

        var newmode = main::pdistd::MDynRes::importBool("AudioDeviceVolumeMode");
        on_update_audio_direct_mode(context, index, menuitem, item);
    }

    function on_select_audio_output_info(context, index, menuitem, item, arg)
    {
        var result = main::pdiext::MSystemConfiguration::GetSystemAudioOutputState();
        var info = "";
        foreach (var map in result)
        {
            info += map.toString() + "\n";
        }

        DialogUtil::openConfirmDialog(context, DialogUtil::OK, info);
    }

    function on_init_engine_list_10000(context, index, menuitem, item, menu)
    {
        var base = 0;
        var items = Array();
        for (var i = 0; i <= 9; i++)
        {
            var entry = "%05d".format(base + (i * 10000));
            var menu = MenuItem(MenuItemTEXT, entry, nil, nil, nil, on_init_engine_list_01000);
            menu.arg = menuitem.label;
            items.push(menu);
        }

        open_menu(context, menuitem.label, items, index, 0);
    }

    function on_select_car_sound_previewer_by_id(context, index, menuitem, item, menu)
    {
        on_init_engine_list_10000(context, index, menuitem, item, menu);
    }

    function on_init_engine_list_01000(context, index, menuitem, item, menu)
    {
        var base = menuitem.label.toInt();
        var items = Array();
        for (var i = 0; i < 10; i++)
        {
            var entry = "%05d".format(base + (i * 1000));
            var menu = MenuItem(MenuItemTEXT, entry, nil, nil, nil, on_init_engine_list_00100);
            menu.arg = menuitem.label;
            items.push(menu);
        }

        open_menu(context, menuitem.label, items, index, 0);
    }

    function on_init_engine_list_00100(context, index, menuitem, item, menu)
    {
        engine_file_size = Array(1000);

        var base = menuitem.label.toInt();
        var items = Array();
        for (var i = 0; i < 10; i++)
        {
            var entry = "%05d".format(base + (i * 100));
            var menu = MenuItem(MenuItemTEXT, entry, nil, nil, nil, on_init_engine_list_00100s);
            menu.arg = menuitem.label;
            items.push(menu);
        }

        open_menu(context, menuitem.label, items, index, 0);
    }

    function on_init_engine_list_00100s(context, index, menuitem, item, menu)
    {
        var base = menuitem.label.toInt();
        var items = Array();
        for (var i = 0; i < 100; i++)
        {
            var entry = "%05d".format(base + i);
            var menu = MenuItem(MenuItemTEXT, entry, nil, nil, on_update_engine_id_item, on_select_engine_id);
            menu.arg = menuitem.label;
            items.push(menu);
        }

        open_menu(context, menuitem.label, items, index, 0);
    }

    static muffler_type_dir = [
        "normal0",
        "normal1",
        "normal2",
        "normal3",
        "turbo0",
        "turbo1",
        "turbo2",
        "turbo3",
    ];

    static muffler_type_short_name = [
        "N0",
        "N1",
        "N2",
        "N3",
        "T0",
        "T1",
        "T2",
        "T3",
    ];

    function on_update_engine_id_item(context, index, menuitem, item)
    {
        var label = menuitem.label;
        var id = label.toInt();
        var size = engine_file_size[id % 1000];

        if (size == nil)
        {
            var size = (IO
                ::File::GetFileSize("/carsound/engine/" + label + ".esgx") + 1023) / 1024;
            engine_file_size[id % 1000] = size;
        }

        if (size > 0)
        {
            var se_size = (IO::File::GetFileSize("/carsound/se/" + id + ".sgd") + 1023) / 1024;
            var start_size = (IO
                ::File::GetFileSize("/carsound/start/" + id + ".sgb") + 1023) / 1024;
            
            var desc = "EG=%dK".format(size);
            desc += ", SE=" + (se_size > 0 ? "%dK".format(se_size) : "--");
            desc += ", START=" + (start_size > 0 ? "%dK".format(start_size) : "--");

            item["label"].opacity = 1.0;
            item["value"].text = desc;
        }
        else
        {
            item["label"].opacity = 0.5;
        }
    }

    function on_select_engine_id(context, index, menuitem, item, menu)
    {
        var label = menuitem.label;
        var entries = [
            "normal0",
            "normal1",
            "normal2",
            "normal3",
            "turbo0",
            "turbo1",
            "turbo2",
            "turbo3",
            "se",
            "start"
        ];

        var items = Array();

        entries.each((entry) => 
        {
            var itemlabel = "%s/%s".format(label, entry);
            var menu = MenuItem(MenuItemTEXT, itemlabel, nil, nil, on_update_engine_type_item, on_select_engine_type);
            menu.arg = menuitem.label;
            items.push(menu);
        });

        open_menu(context, menuitem.label, items, index, 0);
    }

    function on_update_engine_type_item(context, index, menuitem, item)
    {
        var label = menuitem.label;
        var split = label.split("/");
        var id = split[0];
        var type = split[1];
        var ext = ".esgx";
        
        if (type == "se" || type == "start")
            ext = ".sgd";

        var size = (IO
            ::File::GetFileSize("/carsound/" + type + "/" + id + ext) + 1023) / 1024;

        if (size > 0)
        {
            item["label"].opacity = 1.0;
            var eg_size = (IO
                ::File::GetFileSize("/carsound/engine/" + id + ".esgx") + 1023) / 1024;

            var desc;
            if (ext == ".esgx")
                desc = "EG: %d + MF: %d = %dK".format(eg_size, size, eg_size + size);
            else
                desc = "%dK".format(size);

            item["value"].text = desc;
        }
        else
        {
            item["label"].opacity = 0.5;
        }
    }

    static msoundeffect_instance;

    function on_select_engine_type(context, index, menuitem, item, menu)
    {
        var label = menuitem.label;
        var split = label.split("/");
        var id = split[0];
        var type = split[1];

        switch (type)
        {
            case "normal0":
            case "normal1":
            case "normal2":
            case "normal3":
            case "turbo0":
            case "turbo1":
            case "turbo2":
            case "turbo3":
                push_menu_stack(context, index);
                var project = main::manager.loadProject("/" + main::PROJECT_ROOT_DIR + "/dev_sound/dev_sound");
                finally { main::manager.unloadProject(project); }

                SoundProject::EngineSoundRoot::open(context, id.toInt(10), type);
                break;

            case "se":
                msoundeffect_instance = nil;
                msoundeffect_instance = pdiext::MSoundEffect("/carsound/se/" + id + ".sgd");

                var list = msoundeffect_instance.getEffectCodeList();
                if (list == nil)
                    return;

                list.sort();
                list.push("(STOP)");

                var items = Array();
                foreach (var entry in list)
                {
                    var menu = MenuItem(MenuItemTEXT, entry, nil, nil, nil, (context, index, menuitem, item, menu) => 
                    {
                        var label = menuitem.label;
                        if (label != "(STOP)")
                            msoundeffect_instance.play(label, 1.0);
                        else
                            msoundeffect_instance.play("");
                    });

                    menu.arg = menuitem.label;
                    menu.on_keypress_func = (context, event, index, menuitem, item, arg) => 
                    {
                        switch (event.keysym)
                        {
                            case CELL_PAD_CTRL_START:
                                msoundeffect_instance.play(menuitem.label);
                                return EVENTRESULT_FILTER;

                            case CELL_PAD_CTRL_SELECT:
                                msoundeffect_instance.play("");
                                return EVENTRESULT_FILTER;
                        }

                        return EVENTRESULT_CONTINUE;
                    };

                    items.push(menu);
                }

                open_menu(context, menuitem.label, items, index, 0);
                break;

            case "start":
                SoundUtil::PlaySGXStreamDirect("/carsound/start/" + id, false, 1.0);
                break;
        }
    }

    function on_select_car_sound_previewer_by_carcode(context, index, menuitem, item, menu)
    {
        var codes = get_all_cars(context);
        var items = [];

        for (var i = 0; i < codes.size; i++)
        {
            var menu = MenuItem(MenuItemTEXT, codes[i], nil, nil, on_update_engine_previewer_carcode_item, on_select_engine_previewer_carcode);
            items.push(menu);
        }

        open_menu(context, menuitem.label, items, index, 0);

    }

    static muffler_type_dispnames = [
        "N0",
        "N1",
        "N2",
        "N3",
        "T0",
        "T1",
        "T2",
        "T3",
    ];

    function on_update_engine_previewer_carcode_item(context, index, menuitem, item)
    {
        var cp = gtengine::MCarParameter(menuitem.label);
        var a = cp.getSoundID();
        item["value"].text = "%05d, default=%s, horn=%d".format(a[0], muffler_type_dispnames[a[1]], cp.horn_sound_id);
    }

    function on_select_engine_previewer_carcode(context, index, menuitem, item, menu)
    {
        var label = menuitem.label;
        var cp = gtengine::MCarParameter(label);
        var a = cp.getSoundID();
        push_menu_stack(context, index);

        SoundProject::EngineSoundRoot::open(context, a[0], muffler_type_dispnames[a[1]]);
    }
    
    static carsound_muffler_dirnames = [
        "normal0",
        "normal1",
        "normal2",
        "normal3",
        "turbo0",
        "turbo1",
        "turbo2",
        "turbo3",
    ];

    function carsound_file_check_dialog(context, list)
    {
        foreach (var car in list)
        {
            var cp = gtengine::MCarParameter(car);
            var pair = cp.getSoundID();

            var size1 = 0UL;
            var size2 = 0UL;
            var size_start = 0UL;
            var eg_path = "carsound/engine/%05d.esgx".format(pair[0]);
            var ex_path = "carsound/%s/%05d.esgx".format(carsound_muffler_dirnames[pair[1]], pair[0]);
            var start_path = "carsound/start/%05d.sgd".format(pair[0]);

            var result = pdistd::GetFileStatus(eg_path);
            if (result['result'] == pdistd::FileError::OK)
                size1 = result['size'];
            else
                __toplevel__::System::pr("%{pair[0]} / %{car} : file not found (%{eg_path})\n");

            var result = pdistd::GetFileStatus(ex_path);
            if (result['result'] == pdistd::FileError::OK)
                size2 = result['size'];
            else
                __toplevel__::System::pr("%{pair[0]} / %{car} : file not found (%{ex_path})\n");

            var result = pdistd::GetFileStatus(ex_path); // BUG: 'ex_path' instead of 'start_path'
            if (result['result'] == pdistd::FileError::OK)
                size_start = result['size'];
            else
                __toplevel__::System::pr("%{pair[0]} / %{car} : file not found (%{start_path})\n");

            var size = size1 + size2;
            var size_max = (400 * 1024) - 256;
            if (size >= size_max)
                __toplevel__::System::pr("%{pair[0]} / %{car} : size too large (%{size1} + %{size2} = %{size} > %{size_max})\n");

            if (size >= size_max || size1 == 0 || size2 == 0 || size_start == 0)
            {
                main::sound.play("start");

                var error = "%{pair[0]} / %{car}";
                if (size1 == 0)
                    error += "\nNOT FOUND: %{eg_path}";

                if (size2 == 0)
                    error += "\nNOT FOUND: %{ex_path}";

                if (size_start == 0)
                    error += "\nNOT FOUND: %{start_path}";

                if (size >= size_max)
                    error += "\nSIZE OVER: %{size1} + %{size2} = %{size} > %{size_max}";

                var result = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, error, nil, "Continue", "Cancel");
                if (!result)
                    break;
            }
        }
    }

    function on_carsound_file_check(context, index, menuitem, item, arg)
    {
        if (!DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, "エンジン音ファイルの存在とサイズをチェックします"))
            return;

        main::sound.play("return");

        var cars = get_all_cars(context);
        carsound_file_check_dialog(context, cars);

        main::sound.play("return");
    }

    function on_carsound_file_check_dump(context, index, menuitem, item, arg)
    {
        if (!DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, "エンジン音ファイルの存在とサイズをチェックします"))
            return;

        var cars = get_all_cars(context);

        foreach (var car in cars)
        {
            var cp = main::gtengine::MCarParameter(car);
            var pair = cp.getSoundID();

            var size1 = 0UL;
            var size2 = 0UL;
            var eg_path = "carsound/engine/%05d.esgx".format(pair[0]);
            var ex_path = "carsound/%s/%05d.esgx".format(carsound_muffler_dirnames[pair[1]], pair[0]);

            var result = main::pdistd::GetFileStatus(eg_path);
            if (result['result'] == main::pdistd::FileError::OK)
                size1 = result['size'];
            else
                __toplevel__::System::pr("%{pair[0]} / %{car} : file not found (%{eg_path})\n");

            var result = main::pdistd::GetFileStatus(ex_path);
            if (result['result'] == main::pdistd::FileError::OK)
                size2 = result['size'];
            else
                __toplevel__::System::pr("%{pair[0]} / %{car} : file not found (%{ex_path})\n");

            var size = size1 + size2;
            var size_max = (400 * 1024) - 256;
            if (size >= size_max)
                __toplevel__::System::pr("%{pair[0]} / %{car} : size too large (%{size1} + %{size2} = %{size} > %{size_max})\n");
        }

        main::sound.play("return");
    }

    function on_select_carsound_file_check_carlist(context, index, menuitem, item, fexmenu)
    {
        var path = fexmenu.file;
        main::sound.play("return");

        var list = RunviewerUtil::fileToList(path);
        carsound_file_check_dialog(context, list);

        main::sound.play("return");
    }

    function on_horn_file_check_dump(context, index, menuitem, item, arg)
    {
        if (!DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, "Do you start checking horn files?"))
            return;

        var n = 279;

        for (var i = 1; i <= n; i++)
        {
            var info = nil;
            if (info != nil)
            {
                var horn_id = info[0];
                var size = 0UL;
                var size2 = 0UL;

                var path = "carsound/se/%05d.sgd".format(horn_id);
                var result = main::pdistd::GetFileStatus(path);
                if (result['result'] == main::pdistd::FileError::OK)
                    size = result['size'];
                else
                    __toplevel__::System::pr("item-index=%{i}, horn-id=%{horn_id} : file not found (%{path})\n");

                var size_max = 40 * 1024;
                if (size >= size_max)
                    __toplevel__::System::pr("item-index=%{i}, horn-id=%{horn_id} : size too large (%{size} > %{size_max})\n");
            }
            else
            {
                __toplevel__::System::pr("horn item-index:%{i} does not exist\n");
            }
        }

        main::sound.play("return");
    }

    function on_select_pacenote(context, index, menuitem, item, fexmenu)
    {
        var path = fexmenu.file;
        SoundUtil::PlaySGXStreamDirectSGD(path, SoundUtil::GetNarrationVolume());
    }

    var select_car_list_menuitem = RunviewerUtil::CreateFileExplorer(
        "/viewer/car_list", 
        on_select_carsound_file_check_carlist, ".txt", 
        "エンジン音ファイルチェック（車種リストからチェック）", "", nil);

    static sound_previewer_top_menu = [
        gray, 
        MenuItem(MenuItemTEXT, "サウンド・ポップアップメニュー", "", nil, nil, on_select_sound_debug_popup_menu),
        MenuItem(MenuItemTEXT, "エンジン／ホーンサウンドプレビュー（ID 選択）", "", nil, nil, on_select_car_sound_previewer_by_id),
        MenuItem(MenuItemTEXT, "エンジン／ホーンサウンドプレビュー（カーコード選択）", "", nil, nil, on_select_car_sound_previewer_by_carcode),
        MenuItem(MenuItemTEXT, "ESGX Player: squeal2.esgx", "", nil, nil, on_select_es_previewer, nil, "sound_gt/se/squeal2"),
        MenuItem(MenuItemTEXT, "ESGX Player: squeal3.esgx", "", nil, nil, on_select_es_previewer, nil, "sound_gt/se/squeal3"),
        MenuItem(MenuItemTEXT, "ESGX Player: squeal4.esgx", "", nil, nil, on_select_es_previewer, nil, "sound_gt/se/squeal4"),
        MenuItem(MenuItemTEXT, "ESGX Player: roadnoiz.esgx", "", nil, nil, on_select_es_previewer, nil, "sound_gt/se/roadnoiz"),
        MenuItem(MenuItemTEXT, "配信ミュージックプレイヤー", "", nil, nil, on_select_asset_music_previewer),
        MenuItem(MenuItemTEXT, "サウンドデバッグモード", "サウンドのデバッグ用にビジュアライザを表示します", nil, on_update_sound_debug_mode, on_activate_sound_debug_mode),
        MenuItem(MenuItemTEXT, "サウンドダイレクト出力モード", "BGM, SE の音量を、原音の 100% のレベルで出力するテストモードです（開発時の音量確認用）", nil, on_update_audio_direct_mode, on_activate_audio_direct_mode),
        MenuItem(MenuItemTEXT, "現在のシステム音声出力の情報", "", nil, nil, on_select_audio_output_info),
        MenuItem(MenuItemTEXT, "エンジン音ファイルチェック（ダイアログ）", "", nil, nil, on_carsound_file_check),
        MenuItem(MenuItemTEXT, "エンジン音ファイルチェック（ログに出力）", "", nil, nil, on_carsound_file_check_dump),
        select_car_list_menuitem,
        MenuItem(MenuItemTEXT, "Horn Sound File Check (Dump)", "", nil, nil, on_horn_file_check_dump),
        RunviewerUtil::CreateFileExplorer("sound_gt/guide/gt5", on_select_pacenote, "", "GT5 Voice Guidance Player", "", nil)
    ];

    function open(context)
    {
        open_menu(context, "総合プレビュー（GT6）", sound_previewer_top_menu, 0, 0);
    }
}