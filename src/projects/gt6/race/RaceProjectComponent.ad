module RaceProjectComponent::DialogParts::SettingFrame
{
    SCALE_WIDGET_SDTV(ToolTip::tip, 2.6);

    attribute scrolled_body_h;

    method appear(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = false;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method hide(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = true;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method onFinalize(context)
    {
        self.actor = nil;
    }

    method adjust_scrolled_body(scrolled_body_max_h)
    {
        if (scrolled_body_max_h == nil)
            scrolled_body_max_h = self.scrolled_body_h;

        Pane::ScrolledBody::clip.minimum_height = self.scrolled_body_h;
        Pane::ScrolledBody::clip.h = self.scrolled_body_h;

        var clip = Pane::ScrolledBody::clip;
        var space = clip.space;
        clip.updateGeometry();

        var clip_h = space.inner_pad_top + space.inner_pad_bottom;
        var scrollable = false;

        for (var w = space.first; w != nil; w = w.next)
        {
            if (!w.visible || !w.is_enable)
                continue;

            if (clip_h + w.h > scrolled_body_max_h)
                break;

            clip_h += w.h;
        }

        space.x = 0.0;
        space.y = 0.0;

        space.w = clip.w;
        space.minimum_width = clip.w;
        
        space.h = clip_h;
        space.minimum_height = clip.h;

        clip.h = clip_h;
        clip.minimum_height = clip_h;
    }

    method onRealize(context)
    {
        self.scrolled_body_h = Pane::ScrolledBody::clip.h;
    }

    method onInitialize(context)
    {
        var adj = main::menu::MAdjustment();
        Pane::ScrolledBody::VScrollbar.adjustment = adj;
        Pane::ScrolledBody::clip.v_adjustment = adj;
    }
}

module RaceProjectComponent::DialogParts::SettingFrame::Pane::Head
{
    SCALE_WIDGET_SDTV(label, 2.4);

    method setText(text)
    {
        Close::Circle::label.text = text;
        Close::Circle_i::label.text = text;
        Close::Cross::label.text = text;
        Close::Cross_i::label.text = text;
    }

    method onInitialize(context)
    {
        if (pdiext::MSystemConfiguration::GetEnterButtonAssign() == "circle")
        {
            Close::Circle.visible = false;
            Close::Circle_i.visible = false;
            Close::Cross.visible = true;
            Close::Cross_i.visible = true;
        }
        else
        {
            Close::Circle.visible = true;
            Close::Circle_i.visible = true;
            Close::Cross.visible = false;
            Close::Cross_i.visible = false;
        }
    }
}

module RaceProjectComponent::DialogParts::OK
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module RaceProjectComponent::DialogParts::Cancel
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module RaceProjectComponent::DialogParts::Label
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module RaceProjectComponent::DialogParts::Pulldown
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module RaceProjectComponent::DialogParts::Pulldown::OptionMenu
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    attribute decide_callback;

    method onRealize(manager)
    {
        self.copy_selected_item = false;
        self.popup.visible = true;
        self.decide_callback = nil;
    }

    method pulldownValueChanged(context)
    {
        var w = self.getItem(self.index);
        if (w != nil)
        {
            var w2 = self;
            w2.label.text = w.label.text;
            w2.label.abbreviate = true;
            if (w2.label_i != nil)
            {
                w2.label_i.text = w.label.text;
                w2.label_i.abbreviate = true;
            }
        }
    }

    method onInitialize(context)
    {
        self.pulldownValueChanged(context);
    }

    method onFinalize(context)
    {
        self.decide_callback = nil;
    }

    method onValueChanged(context)
    {
        self.pulldownValueChanged(context);
        if (self.decide_callback != nil)
            decide_callback(context, self.index, self);
    }
}

module RaceProjectComponent::DialogParts::PulldownItem
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module RaceProjectComponent::DialogParts::ON
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module RaceProjectComponent::DialogParts::OFF
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module RaceProjectComponent::DialogParts::Slider
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_unit, 2.4);
}

module RaceProjectComponent::DialogParts::Slider::slider
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
    SCALE_WIDGET_SDTV(popup::Max::value, 2.4);
    SCALE_WIDGET_SDTV(popup::Max::label, 2.4);
    SCALE_WIDGET_SDTV(popup::Min::value, 2.4);
    SCALE_WIDGET_SDTV(popup::Min::label, 2.4);

    attribute zero_text;
    attribute unit_text;
    attribute min_text;
    attribute max_text;
    attribute decide_callback;
    attribute format_callback;
    attribute is_zero_callback;
    attribute arg;
    attribute initialized;
    attribute format_string;
    attribute quantizer;
    attribute step_thr;

    method onRealize(manager)
    {
        self.initialized = true;
        self.zero_text = nil;
        self.unit_text = nil;
        self.min_text = nil;
        self.max_text = nil;
        self.decide_callback = nil;
        self.format_callback = nil;
        self.is_zero_callback = nil;
        self.format_string = nil;
        self.quantizer = 1.0;
        self.step_thr = nil;
        
        var pup = self['popup'];
        pup.visible = true;
        pup.minimum_width = self.w;
        pup.w = self.w;
        pup.x = 0.0;
    }

    method onInitialize(context)
    {
        self.setup(context);
        self.initialized = true;
    }

    method onFinalize(context)
    {
        self.initialized = false;
        self.zero_text = nil;
        self.unit_text = nil;
        self.min_text = nil;
        self.max_text = nil;
        self.decide_callback = nil;
        self.format_callback = nil;
        self.is_zero_callback = nil;
        self.format_string = nil;
        self.step_thr = nil;
    }

    method onStepChanged(context)
    {
        if (self.step_thr != nil)
            self.on_step_changed();
    }

    method on_step_changed()
    {
        var x = self.value - self.repeat_start;
        x /= 4.0;

        if (x < 0.0)
            x = -x;

        if (x < 1.0)
            x = 1.0;

        if (x > self.step_thr)
            x = self.step_thr;

        self.step = x;
    }

    method onPopupOpen(context)
    {
        self.sliderPopupOpen(context);
    }

    method onPopupClosed(context)
    {
        self.sliderPopupClosed(context);
    }

    method onValueChanged(context)
    {
        self.sliderValueChanged(context);
    }

    function default_value_format_function(context, value, slider)
    {
        if (slider.zero_text != nil && slider.is_zero_callback(value, slider))
            return slider.zero_text;

        var q = Math::round(value * slider.quantizer);
        return slider.format_string.format(q);
    }

    function default_is_zero_function(value, slider)
    {
        var q = Math::round(value * slider.quantizer);
        return q == 0.0;
    }

    method setup(context)
    {
        if (self.format_callback == nil)
            self.format_callback = default_value_format_function;

        if (self.is_zero_callback == nil)
            self.is_zero_callback = default_is_zero_function;

        var stepscale = Math::log10(self.step);
        var precision = stepscale >= 0.0 ? 0 : Math::ceil(-stepscale).toInt();
        self.quantizer = 10.0 ** precision;

        if (precision <= 0)
            self.format_string = "%d";
        else
            self.format_string = "%." + precision.toString() + "t";

        if (self.unit_text != nil)
            self.parent.label_unit.text = unit_text;

        var pup = self['popup'];
        pup.Min::value.text = call_format_func(context, self.min);
        pup.Max::value.text = call_format_func(context, self.max);

        if (self.min_text != nil)
            pup.Min::label.text = self.min_text;

        if (self.max_text != nil)
            pup.Max::label.text = self.max_text;

        self.reflect(context);
    }

    method reflect(context)
    {
        var text;
        if (self.zero_text != nil && self.is_zero_callback(value, self))
            text = self.zero_text;
        else
            text = call_format_func(context, self.value);

        self.label.text = text;
        if (self.defined('label_i'))
            self.label_i.text = text;
    }

    method call_format_func(context, value)
    {
        return self.format_callback(context, value, self);
    }

    method sliderPopupOpen(context)
    {
        self.sliderValueChanged(context);
    }

    method sliderPopupClosed(context)
    {
        if (!self.initialized)
            return;

        if (!self.cancel)
        {
            self.reflect(context);
            if (self.decide_callback != nil)
                self.decide_callback(context, self.value, self);
        }
    }

    method sliderValueChanged(context)
    {
        if (!self.initialized)
            return;

        var pup = self['popup'];
        var text = call_format_func(context, self.value);
        self.label.text = text;
        if (self.defined('label_i'))
            self.label_i.text = text;
    }
}

module RaceProjectComponent::DialogParts::CheckBox
{
    SCALE_WIDGET_SDTV(label, 2.4);

    attribute is_checkbox = true;
}

module RaceProjectComponent::DialogParts::CheckBox::vbox::CheckButton
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    method onActivate(context)
    {
        if (self.is_enable && !self.insensitive)
        {
            main::sound.play("checkbox");
            self.active = !self.active;

            if (self['onValueChanged'] != nil)
                self.onValueChanged(context);
        }

        return EVENTRESULT_CONTINUE;
    }
}

module RaceProjectComponent::DialogParts::GroupHeader
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module RaceProjectComponent::Tooltip::BalloonTip
{
    attribute current_widget;

    method set_value(context, widget, text, display_position, distance, visible_time)
    {
        if (self.current_widget == nil)
            return;

        self.current_widget.reset();
        if (self.current_widget == self['TIP_02'])
            self.current_widget = self['TIP_01'];
        else
            self.current_widget = self['TIP_02'];

        self.current_widget.visible = true;
        self.current_widget.set_value(context, widget, text, display_position, distance, visible_time);
    }

    method reset_value()
    {
        if (self.current_widget == nil)
            return;

        self.current_widget.reset();
    }

    method initialize(context)
    {
        if (self['TIP_01'] == nil)
        {
            var tip01 = self.Tip.doCopy();
            tip01.name = "TIP_01";
            tip01.opacity = 0.0;
            self.appendChild(context, tip01);
        }

        if (self['TIP_02'] == nil)
        {
            var tip02 = self.Tip.doCopy();
            tip02.name = "TIP_02";
            tip02.opacity = 0.0;
            self.appendChild(context, tip02);
        }

        self.current_widget = self['TIP_01'];
    }

    method onInitialize(context)
    {
        self.Tip.visible = false;
        initialize(context);
    }

    method onFinalize(context)
    {
        self.current_widget = nil;

        if (self['TIP_01'] != nil)
        {
            self.removeChild(context, self['TIP_01']);
        }

        if (self['TIP_02'] != nil)
        {
            self.removeChild(context, self['TIP_02']);
        }
    }
}

module RaceProjectComponent::Tooltip::BalloonTip::Tip
{
    attribute thread;
    attribute widget;
    attribute default_w;
    attribute is_visible_end;
    attribute display_position;
    attribute distance;
    attribute visible_time;

    SCALE_WIDGET_SDTV(Text::TextFace, 2.4);

    method set_value(context, widget, text, display_position, distance, visible_time)
    {
        reset();

        self.widget = widget;
        self.Text.TextFace.text = text;

        self.display_position = display_position != nil ? display_position : "D";
        self.distance = distance != nil ? distance : 36;
        self.visible_time = visible_time != nil ? visible_time : 3;
        self.thread = Thread(display_tip_tick, context);
        self.thread.start();
    }

    method clear()
    {
        self.widget = nil;
        self.default_w = nil;
        self.display_position = nil;
        self.distance = nil;
        self.visible_time = nil;

        if (self.thread != nil)
        {
            self.thread.terminate();
            self.thread = nil;
        }
    }

    method reset()
    {
        clear();

        self.opacity = 0.0;
        self.AppearEffect.reset();
        self.VisibleEffect.reset();
        self.Text.TextFace.text = "";
        self.w = 0;
        self.h = 0;
        self.default_w = self.w;
        self.is_visible_end = false;
    }

    method onFinalize(context)
    {
        clear();
    }

    method display_tip_tick(context)
    {
        var current_w = self.default_w;

        for (;;)
        {
            if (self.is_visible_end || self.widget == nil)
            {
                reset();
                break;
            }

            if (self.default_w < current_w)
            {
                display_tip(context);
                break;
            }
        
            current_w = self.w;
            Thread::Sleep(0.05);
        }
    }

    method display_tip(context)
    {
        var bbox = self.widget.getBoundingBox();
        var base_x = bbox.x + (bbox.w * self.widget.cursor_align_x);
        var base_y = bbox.y + (bbox.h * self.widget.cursor_align_y);

        var disp_x, disp_y;
        if ("U" == self.display_position)
        {
            disp_x = base_x - (self.w * 0.5);
            disp_y = (base_y - self.distance) - self.Tip.h;
        }
        else
        {
            disp_x = base_x - (self.w * 0.5);
            disp_y = base_y + self.distance;
        }

        var viewport = context.getViewport();
        var display_area_L = viewport.x + 20;
        var display_area_R = (viewport.x + viewport.w) - 20;

        var adjust_x = 0;
        var left_x = disp_x;
        if (left_x < display_area_L)
            adjust_x = left_x - display_area_L;

        var right_x = disp_x + self.w;
        if (right_x > display_area_R)
            adjust_x = right_x - display_area_R;

        disp_x -= adjust_x;

        self.sx = disp_x;
        self.sy = disp_y;

        if (self.AppearEffect.pause && self.AppearEffect.time == 0)
        {
            var scale_cx = 0.0;
            if (self.BalloonTip.w > 0.0)
            {
                scale_cx = disp_x == 0.0 ? 0.0 : disp_x / self.BalloonTip.w;
            }

            var scale_cy = 0.0;
            if (self.BalloonTip.h > 0.0)
            {
                scale_cy = disp_y == 0.0 ? 0.0 : disp_y / self.BalloonTip.h;
            }

            self.BalloonTip.center = [scale_cx, scale_cx]; // PDI Typo?
            self.AppearEffect.restart();
        }

        if (self.VisibleEffect.pause && self.AppearEffect.time == 0)
        {
            self.VisibleEffect.setStartDuration(0, self.visible_time);
            self.VisibleEffect.restart();
            self.VisibleEffect.on_effect_end = function(context)
            {
                self.is_visible_end = true;
                self.VisibleEffect.on_effect_end = nil;
            };
        }
    }
}

module RaceProjectComponent::Icon::Weather
{
    method onRealize(manager)
    {
        self.hidden.visible = false;
        self.icon.image_path = "";
    }
        
    method setIcon(info, hour)
    {
        var materials = [];
        if (info.ChangeWeather)
            materials.push("random");

        if (nil == hour)
        {
            var datetime = pdistd::MTime();
            datetime.setForCourse(info.StartDateTime);
            hour = datetime.hour;
        }

        var is_day = hour >= 6 && hour < 18;
        if (is_day)
            materials.push("day");
        else
            materials.push("night");

        switch (info.Condition)
        {
            case gtengine::CourseCondition::DRY:
                if (info.ChangeWeather)
                    materials.push("rain");
                break;

            case gtengine::CourseCondition::WET:
                materials.push("rain");
                break;

            case gtengine::CourseCondition::SNOW:
                materials.push("snow");
                break;
        }

        var icon_name = materials.join("_");
        self.icon.image_path = "/image/common/weather/%s.dds".format(icon_name);
    }
}

module RaceProjectComponent::MapClip
{
    attribute map_data;
    attribute thread0;

    method initializeImpl(context, gp, course_info)
    {
        CourseMapFaceUtil::initialize(context, MapClip.CourseMapFace, course_info, gp.event);
        restart();
    }

    method initialize(context, gp, course_info)
    {
        if (course_info.Scenery && !ORG.getDerivedMapData())
        {
            self.thread0 = Thread(function(context)
            {
                while (!ORG.getDerivedMapData())
                    Thread::Sleep(1.0);
                
                MapClip.initializeImpl(context, gp, course_info);
            }, context);
            self.thread0.start();

            yield;
        }
        else
            initializeImpl(context, gp, course_info);
    }

    method finalize(context)
    {
        self.map_data = nil;
        if (self.thread0 != nil)
        {
            self.thread0.terminate();
            self.thread0 = nil;
        }
    }

    method restart()
    {
        self.CourseMapFace.SpanActor.restart();
    }
}

module RaceProjectComponent::Quick::Info2
{
    attribute animation_thread;
    attribute play_module;

    method show()
    {
        self.Opacity.reverse = true;
        self.Opacity.start();
        var begin = pdistd::GetSystemTimeMicroSecond();
        while (self.opacity < 1.0)
        {
            ORG.setEffectFader(1 - self.opacity);

            var now = pdistd::GetSystemTimeMicroSecond();
            var diff = (now - begin) / 1000000;
            if (diff > self.Opacity.total_time)
                break;

            yield;
        }
    }

    method hide()
    {
        self.Opacity.reverse = false;
        self.Opacity.start();
        var begin = pdistd::GetSystemTimeMicroSecond();
        while (self.opacity > 0.0)
        {
            ORG.setEffectFader(1 - self.opacity);

            var now = pdistd::GetSystemTimeMicroSecond();
            var diff = (now - begin) / 1000000;
            if (diff > self.Opacity.total_time)
                break;

            yield;
        }
    }

    method finalize(context)
    {
        self.play_module = nil;
        if (nil != self.animation_thread)
        {
            self.animation_thread.terminate();
            self.animation_thread = nil;
        }

        Footer.finalize(context);
    }

    method startAnimation(context, start_duration)
    {
        var root = self.root_window;
        if (nil != root && root.isClosed())
            return;

        self.animation_thread = Thread(function(context) {
            Thread::Sleep(start_duration);
            Info2::Header.beginAnimation(context, start_duration);
        }, context);

        self.animation_thread.start();
        yield;
    }

    method rewind(context)
    {
        if (nil != self.play_module)
        {
            self.play_module.rewind(context);
        }
    }

    method fastforward(context)
    {
        if (nil != self.play_module)
        {
            self.play_module.fastforward(context);
        }
    }

    method setPlayModule(p)
    {
        self.play_module = p;
    }

    module Header
    {
        attribute next_animation_widget_list;

        function getRaceMenuScalarInterpolator()
        {
            if (nil != RaceMenuUtil::sAppendedParent && nil != RaceMenuUtil::sAppendedParent["SBox0"])
            {
                return RaceMenuUtil::sAppendedParent::SBox0::ScalarInterpolator;
            }

            return nil;
        }

        function disablePadEvent(context)
        {
            CursorUtil::setCursor(ContextMain, "wait");
            ContextMain.event_mask = 5;
            ContextMain.disableInput();
            ContextMain.filterKeyEvent();

            var i = getRaceMenuScalarInterpolator();
            if (nil != i)
            {
                i.setStartDuration(0, 1.7);
                i.setInterpolationPeriod(0, 0.8);
            }
        }

        function enablePadEvent(context)
        {
            CursorUtil::setCursor(ContextMain, "cursor_chrome");
            ContextMain.event_mask = 5;
            ContextMain.enableInput();

            RaceMenuUtil::setEnableButton(true);

            context.cursor_visible = true;

            var i = getRaceMenuScalarInterpolator();
            if (nil != i)
            {
                i.on_effect_end = nil;
                i.setStartDuration(0, 0);
                i.setInterpolationPeriod(0, 0.25);
                i.warp();
                RaceMenuUtil::sIsActivated = true;
            }
        }

        method beginAnimation(context, start_duration)
        {
            var list = [
                self.bg::Opacity,
                self.Color::Base::EffectWipe::WipeProgress,
                self.Color::slash_base::EffectWipe::WipeProgress,
                self.Color::LeftEdge::Opacity,
                self.InformationTitle::Opacity,
                self.EventTitle::Opacity,
                self.ModeLogo::ParallelActor,
                Body::Stretch_bg.Opacity,
            ];

            var i = start_duration > 0 ? getRaceMenuScalarInterpolator() : nil;
            if (nil != i)
            {
                disablePadEvent(context);
                list.push(i);
            }
            else
                enablePadEvent(context);

            foreach (var a in list)
            {
                a.restart();
            }

            Body::Stretch_bg.Opacity.on_effect_end = self.endAnimation;
            if (nil != i)
                i.on_effect_end = enablePadEvent;
        }

        method endAnimation(context)
        {
            Body::Stretch_bg.Opacity.on_effect_end = nil;
            Header.InformationTitle::Opacity.setInterpolationPeriod(0, 0);

            if (nil != self.next_animation_widget_list)
            {
                foreach (var w in self.next_animation_widget_list)
                    w.beginAnimation(context);
            }

            Footer.beginAnimation(context);
            Help::Opacity.restart();
        }
    }

    module Footer
    {
        method beginAnimation(context)
        {
            var list = [self.Height];
            foreach (var a in list)
            {
                a.restart();
            }

            self.Height.on_effect_end = self.endAnimation;

        }

        method endAnimation(context)
        {
            self.Height.on_effect_end = nil;
            var hbox_list = [self.HBox::Tips::HBox];

            if (nil != self.HBox::Tips["HBox2"])
            {
                hbox_list.push(self.HBox::Tips::HBox2);
            }

            foreach (var hbox in hbox_list)
            {
                hbox.X.start_value = self.HBox::Tips.w;
                hbox.X.end_value = -hbox.w;
            }

            foreach (var hbox in hbox_list)
            {
                hbox.X.restart();
            }
        }

        method finalize(context)
        {
            self.HBox::Tips::HBox.clearChildren(context);
            if (nil != self.HBox::Tips["HBox2"])
            {
                self.HBox::Tips::HBox2.clearChildren(context);
            }
        }
    }

    module Body
    {
        module StartingGrid
        {
            attribute next_animation_widget;
            attribute actor_list;
            attribute first_animation;
            attribute title_keyword = "STARTING_GRID";
            attribute thread0;

            method initialize(context, gp, course_info)
            {
                var rp = gp.event.race_parameter;
                var laps = rp.complete_type == gtengine::CompleteType::BYLAPS ? rp.race_limit_laps : 0;
                self.TextInfo.Lap::Value.text = laps > 0 ? laps : "--";
                self.TextInfo.StartType::label.text = getRaceTypeName(context, gtengine::StartType, rp.start_type);

                if (course_info.Scenery)
                {
                    self.TextInfo.Distance::Value.text = "--";
                    var me = self;

                    self.thread0 = Thread(function(context)
                    {
                        var length = 0.0;
                        while (length <= 0.0)
                        {
                            var length0 = ORG.getCourseLength();
                            if (length0 != length)
                                length = length0;

                            Thread::Sleep(1.0);
                        }

                        me.TextInfo.Distance::Value.text = pdiext::MUnit::GetCourseLengthString(laps * length);
                    }, context);

                    self.thread0.start();
                    yield;
                }
                else 
                {
                    self.TextInfo.Distance::Value.text = laps > 0 ? pdiext::MUnit::GetCourseLengthString(course_info.Length * laps) : "--";
                }
                
                self.TextInfo.Distance::Unit.text = manager.translate("Unit", pdiext::MUnit::GetUnitKeywordOfCourseLength());
                self.first_animation = true;
            }

            method beginAnimation(context)
            {
                Info2.setPlayModule(nil);
                Body::Opacity.on_effect_end = nil;

                var title = manager.translate("QuickMenu", title_keyword);
                var title_changed = Header.InformationTitle.text != title;
                Header.InformationTitle.text = title;
                Header.InformationTitle::Opacity.setStartDuration(0, 0);
                Header.InformationTitle::Opacity.setEndDuration(1, 0);

                var total_time = StartingGrid.Opacity.total_time;
                var title_time = total_time - (Header.InformationTitle::Opacity.total_time - Header.InformationTitle::Opacity.getEndDuration(0));
                if (self.first_animation)
                {
                    title_time += Stretch_bg.Opacity.total_time;
                    self.first_animation = false;
                }

                Header.InformationTitle::Opacity.setEndDuration(0, title_time);

                self.actor_list = [];
                
                var list = [
                    StartingGrid.Opacity,
                    StartingGrid.TextInfo::Opacity,
                ];

                var o = Header.InformationTitle::Opacity;
                self.actor_list.push(o);

                if (title_changed)
                {
                    o.restart();
                }
                else
                {
                    o.start();
                }

                foreach (var a in list)
                {
                    self.actor_list.push(a);
                    a.restart();
                }

                StartingGrid.Opacity.on_effect_end = self.endAnimation;

                var start_duration = 0.0;
                if (StartingGrid.FrameL.defined("Board"))
                {
                    var listbox = StartingGrid.FrameL::Board::ListBox;
                    for (var i = 0; i < listbox.getItemCount(); i++)
                    {
                        var w = listbox.getItemWidget(i, context);
                        w.Actors::Rotate3D.setStartDuration(0, start_duration);
                        w.Actors::Opacity.setStartDuration(0, start_duration);
                        self.actor_list.push(w.Actors);
                        w.Actors.restart();
                        
                        start_duration += 0.2;
                    }
                }

                if (StartingGrid.FrameR.defined("Board"))
                {
                    var listbox = StartingGrid.FrameR::Board::ListBox;
                    for (var i = 0; i < listbox.getItemCount(); i++)
                    {
                        var w = listbox.getItemWidget(i, context);
                        w.Actors::Rotate3D.setStartDuration(0, start_duration);
                        w.Actors::Opacity.setStartDuration(0, start_duration);
                        self.actor_list.push(w.Actors);
                        w.Actors.restart();
                        
                        start_duration += 0.2;
                    }
                }

                Info2.setPlayModule(self);

                Body::Opacity.reverse = true;
                Body::Opacity.start();
            }

            method endAnimation(context)
            {
                StartingGrid.Opacity.on_effect_end = nil;
                if (nil != self.next_animation_widget)
                {
                    self.next_animation_widget.beginAnimation(context);
                }
            }

            method rewind(context)
            {
                StartingGrid.Opacity.on_effect_end = nil;
                Body::Opacity.reverse = false;
                Body::Opacity.start();

                Body::Opacity.on_effect_end = self.beginAnimation;
            }

            method fastforward(context)
            {
                StartingGrid.Opacity.on_effect_end = nil;

                foreach (var a in self.actor_list)
                    a.warp();

                Body::Opacity.reverse = false;
                Body::Opacity.start();
    
                Body::Opacity.on_effect_end = self.endAnimation;
            }

            method finalize(context)
            {
                if (nil != self.thread0)
                {
                    self.thread0.terminate();
                    self.thread0 = nil;
                }
            }
        }

        module CourseInformation
        {
            attribute next_animation_widget;
            attribute actor_list;
            attribute course_info;
            attribute thread0;

            method setCourseMakerTitle(context)
            {
                var user_id = Grim2.getLoginUserId();
                var course_list = [];

                main::Course.requestList(user_id, function(args) 
                {
                    |var context, var request| = args;
                    if (request.isDone())
                    {
                        var course_list = main::Course.decodeCourseList(request);
                        foreach (var course in course_list)
                        {
                            if (course["course_id"] == GAME_STATUS.user_profile.context.coursemaker_course_id)
                            {
                                CourseInformation::Detail.Name::label.text = course["title"];
                                break;
                            }
                        }
                    }
                });
            }

            method initialize(context, gp, course_info)
            {
                self.course_info = course_info;

                var length_unit = manager.translate("Unit", pdiext::MUnit::GetUnitKeywordOfCourseLength());

                if (nil != self["MapClip"])
                {
                    self.MapClip.initialize(context, gp, course_info);
                }

                self.Logo.image_path = "/piece/gt6/course_logo_L/%{course_info.Logo}.img";
                if (course_info.Scenery)
                {
                    self.Detail.Name::label.text = "";
                    setCourseMakerTitle(context);
                }
                else
                {
                    self.Detail.Name::label.text = manager.translate("CourseName", course_info.Name);
                }

                var flag = course_info.CountryFlag.downcase();
                self.Detail.Name::Flag.image_path = "/piece/flag_ranking/%{flag}.img";

                if (course_info.Scenery)
                {
                    self.Detail.Category::Title.text = manager.translate("QuickMenu", "THEME");
                    self.Detail.Category::label.text = manager.translate("CourseName", course_info.Name);
                }
                else
                {
                    self.Detail.Category::label.text = manager.translate("CourseData", "CATEGORY_" + course_info.CourseCategory);
                }

                self.Detail.Length::HBox::Value.text = SpecDatabaseUtil::Course::getLengthText(course_info, false);
                self.Detail.Length::HBox::unit.text = length_unit;
                self.Detail.StraightLength::HBox::Value.text = SpecDatabaseUtil::Course::getLongestStraightText(course_info, false);
                self.Detail.StraightLength::HBox::unit.text = length_unit;
                self.Detail.Height::HBox::Value.text = SpecDatabaseUtil::Course::getHeightText(course_info, false);
                self.Detail.Height::HBox::unit.text = manager.translate("Unit", pdiext::MUnit::GetUnitKeywordOfCourseHeight());
                self.Detail.Condition::Time_Temp::Time::hours.text = "--";
                self.Detail.Condition::Time_Temp::Time::minutes.text = "--";
                self.Detail.Condition::Time_Temp::Temperature::temp.text = "--";
                self.Detail.Condition::Time_Temp::Temperature::unit.text = "--";
                self.Detail.Condition::Time_Temp::Temperature::unit.text = manager.translate("Unit", pdiext::MUnit::GetUnitOfTemperature().upcase());
                self.Detail.Condition::Water::value.text = "--";

                var lang = pdistd::MLocale::getLanguage();
                if ("TR" == lang)
                {
                    self.Detail.Condition::Water.movetoLast(self.Detail.Condition::Water::value);
                }

                updateWeatherInfo(context);

                if (course_info.Scenery)
                {
                    var me = self;

                    self.thread0 = Thread(function(context)
                    {
                        var length = SpecDatabaseUtil::INVALID_STRING;
                        var straight = SpecDatabaseUtil::INVALID_STRING;
                        var height = SpecDatabaseUtil::INVALID_STRING;
                        
                        while (SpecDatabaseUtil::INVALID_STRING == length ||
                            SpecDatabaseUtil::INVALID_STRING == straight ||
                            SpecDatabaseUtil::INVALID_STRING == height)
                        {
                            var length0 = SpecDatabaseUtil::Course::getLengthText(me.course_info, false);
                            if (length0 != length)
                                length = length0;

                            var straight0 = SpecDatabaseUtil::Course::getLongestStraightText(me.course_info, false);
                            if (straight0 != straight)
                                straight = straight0;

                            var height0 = SpecDatabaseUtil::Course::getHeightText(me.course_info, false);
                            if (height0 != height)
                                height = height0;
    
                            Thread::Sleep(1.0);
                        }

                        me.Detail.Length::HBox::Value.text = length;
                        me.Detail.StraightLength::HBox::Value.text = straight;
                        me.Detail.Height::HBox::Value.text = height;

                    }, context);

                    self.thread0.start();
                    yield;
                }
            }

            method finalize(context)
            {
                if (nil != self["MapClip"])
                {
                    self.MapClip.finalize(context);
                }

                if (nil != self.thread0)
                {
                    self.thread0.terminate();
                    self.thread0 = nil;
                }
            }

            method updateWeatherInfo(context)
            {
                var course_condition = self.Detail::Condition;
                var scene_time = ORG.getRace().getSceneTime();

                if (nil != scene_time)
                {
                    var time_s = scene_time.getTime() + scene_time.getTimeAdjust();
                    if (time_s < 0)
                        time_s += 60 * 60 * 24;

                    time_s = ((time_s + 59) / 60) * 60;

                    var hour = (time_s / 3600) % 24;
                    var minute = (time_s % 3600) / 60;
                    var second = time_s % 60;

                    course_condition.Time_Temp::Time::hours.text = "%02d".format(hour);
                    course_condition.Time_Temp::Time::minutes.text = "%02d".format(minute);

                    course_condition.WeatherIcon.setIcon(self.course_info, hour);
                }

                var scene = ORG.getRace().getScene();
                if (nil != scene)
                {
                    var temperature = scene.getTemperature().toInt();
                    course_condition.Time_Temp::Temperature::temp.text = temperature;
                    var water = ((scene.getWaterRetentionRate(1) * 100.0) + 0.5).toInt();
                    course_condition.Water::value.text = water; 
                }
            }

            method beginAnimation(context)
            {
                Info2.setPlayModule(nil);
                Body::Opacity.on_effect_end = nil;

                updateWeatherInfo(context);

                var title = manager.translate("QuickMenu", "COURSE_CONDITIONS");
                var title_changed = Header.InformationTitle.text != title;
                Header.InformationTitle.text = title;
                Header.InformationTitle::Opacity.setStartDuration(0, 0);

                var time = Header.InformationTitle::Opacity.getInterpolationPeriod(1);
                Header.InformationTitle::Opacity.setInterpolationPeriod(0, time);
                Header.InformationTitle::Opacity.setEndDuration(1, 1.5);

                var total_time = Stretch_bg.Height.total_time;
                var title_time = total_time - (Header.InformationTitle::Opacity.total_time - Header.InformationTitle::Opacity.getEndDuration(0));

                Header.InformationTitle::Opacity.setEndDuration(0, title_time);

                self.actor_list = [];

                var list = [
                    Stretch_bg.Height,
                    self.Opacity,
                    self.Detail.Name::X,
                    self.Detail.Condition::Height,
                    self.Detail.Condition::Time_Temp::Time::Opacity,
                    self.Detail.Condition::Time_Temp::Temperature::Opacity,
                    self.Detail.Condition::Water::Opacity,
                    self.Detail.Condition::WeatherIcon::Opacity,
                    self.Detail.Category::ParallelActor,
                    self.Detail.Length::ParallelActor,
                    self.Detail.StraightLength::ParallelActor,
                    self.Detail.Height::ParallelActor,
                ];

                var o = Header.InformationTitle::Opacity;
                self.actor_list.push(o);

                if (title_changed)
                    o.restart();
                else
                    o.start();

                foreach (var a in list)
                {
                    self.actor_list.push(a);
                    a.restart();
                }

                Stretch_bg.Height.on_effect_end = self.endAnimation;
                Info2.setPlayModule(self);

                Body::Opacity.reverse = true;
                Body::Opacity.start();
            }

            method endAnimation(context)
            {
                Stretch_bg.Height.on_effect_end = nil;
                if (nil != self.next_animation_widget)
                {
                    self.next_animation_widget.beginAnimation(context);
                }
            }

            method rewind(context)
            {
                Stretch_bg.Height.on_effect_end = nil;

                Body::Opacity.reverse = false;
                Body::Opacity.start();

                Body::Opacity.on_effect_end = self.beginAnimation;
            }

            method fastforward(context)
            {
                Stretch_bg.Height.on_effect_end = nil;

                foreach (var a in self.actor_list)
                {
                    a.warp();
                }

                Body::Opacity.reverse = false;
                Body::Opacity.start();

                Body::Opacity.on_effect_end = self.endAnimation;
            }
        }
    }
}

module RaceProjectComponent::Quick::CourseLogo
{
    method initialize(course_info)
    {
        self.image_path = "/piece/gt6/course_logo_L/%{course_info.Logo}.img";
    }

    method show()
    {
        self.Opacity.reverse = false;
        self.Opacity.setInterpolationPeriod(0, 0.7);
        self.Opacity.start();
    }

    method hide()
    {
        self.Opacity.reverse = true;
        self.Opacity.setInterpolationPeriod(0, 0.25);
        self.Opacity.start();
    }
}

module RaceProjectComponent::RaceMenu::Template::SBox0::ScalarInterpolator
{
    method onEffectEnd(context)
    {
        RaceMenuUtil::onEffectEnd_Sbox0ScalarInterpolator(context);
    }
}

module RaceProjectComponent::RaceMenu::Template::SBox0::SBox1::ListBox
{
    method onFocusEnter(context)
    {
        return RaceMenuUtil::onFocusEnterListBox(context, self);
    }

    method onFocusLeave(context)
    {
        return RaceMenuUtil::onFocusLeaveListBox(context, self);
    }

    method onFocus(context, new_index, old_index)
    {
        RaceMenuUtil::onFocusListBox(context, self, new_index, old_index);
    }

    method onActivate(context)
    {
        return RaceMenuUtil::onActivateListBox(context, self);
    }
}

module RaceProjectComponent::RaceMenu::Template::Item
{
    attribute icon;
}

module RaceProjectComponent::MiniNotice
{
    module Notice
    {
        method onRealize(manager)
        {
            reset();
        }

        method onInitialize(context)
        {
            reset();
            MiniNoticeUtil::registerWidget(self, context);
        }

        method onFinalize(context)
        {
            MiniNoticeUtil::unregisterWidget(self);
        }
        
        method reset(context)
        {
            self.visible = false;
            HBox::label_title.text = "";
            HBox::label_value.text = "";
            HBox::label_unit.text = "";
        }

        method appear(context)
        {
            if (self.visible)
                return;

            ScalarInterpolator.on_effect_end = nil;
            ScalarInterpolator.stop();
            ScalarInterpolator.forward();
            ScalarInterpolator.rewind();
            self.visible = true;
            ScalarInterpolator.restart();
        }

        method disappear(context)
        {
            self.visible = false;
        }

        method hideIfNothing(context)
        {
            if (HBox::label_title.text == "" && HBox::label_value.text == "" && HBox::label_unit.text == "")
            {
                disappear(context);
            }
        }

        method setTitle(context, text)
        {
            if (text == nil)
            {
                HBox::label_title.text = "";
                HBox::label_title.visible = false;
                hideIfNothing(context);
            }
            else
            {
                HBox::label_title.text = text;
                HBox::label_title.visible = true;
            }
        }

        method setValue(context, value)
        {
            if (value == nil)
            {
                HBox::label_value.text = "";
                HBox::label_value.visible = false;
                hideIfNothing(context);
            }
            else
            {
                HBox::label_value.text = value;
                HBox::label_value.visible = true;
            }
        } 

        method setUnit(context, unit)
        {
            if (unit == nil)
            {
                HBox::label_unit.text = "";
                HBox::label_unit.visible = false;
                hideIfNothing(context);
            }
            else
            {
                HBox::label_unit.text = unit;
                HBox::label_unit.visible = true;
            }
        } 

        method set(context, title, value, unit)
        {
            setTitle(context, title);
            setValue(context, value);
            setUnit(context, unit);
        }
    }
}