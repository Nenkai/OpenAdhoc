













module ROOT
{
    hidden.visible = false;

    static sSceneFadeTimeOrg = Pane::SceneCover::Fade.total_time;
    static sItemWidthOrg = hidden::Item.w;

    attribute result;
    attribute modal;
    attribute scene;
    attribute closing = false;

    function open(context, page_title, button_list, default_focus_value)
    {
        var dialog = ROOT.doCopy();
        dialog.context_number = context.context_number;
        return dialog._open(context, page_title, button_list, default_focus_value);
    }

    method _open(context, page_title, button_list, default_focus_value)
    {
        switch (button_list.size)
        {
            case 2:

                self.scene = "GTAUTO_silhouette2";
                self.Pane.minimum_width = 1280;
                var item_space = 200;
                hidden::Item.w = sItemWidthOrg + item_space;
                break;

            case 3:

                self.scene = "GTAUTO_silhouette3";
                self.Pane.minimum_width = 1680;
                var item_space = 160;
                hidden::Item.w = sItemWidthOrg + item_space;
                break;

            case 4:
                self.scene = "GTAUTO_silhouette4";
                self.Pane.minimum_width = 1680;
                var item_space = 80;
                hidden::Item.w = sItemWidthOrg + item_space;
                break;

            default:
                self.scene = "GTAUTO_silhouette";
                self.Pane.minimum_width = 1680;
                var item_space = 0;
                hidden::Item.w = sItemWidthOrg + item_space;
                break;
        }


        self.Pane::Label.text = page_title;
        self.Pane::HBox.clearChildren();
        var focus_w;
        foreach (|var label, var image, var value, var new_flag| in button_list)
        {
            var w = hidden::Item.doCopy();
            w.Label.text = manager.translate("GTAuto", label);
            var thumb = w.Thumbnail;
            var end_load = method (context)
            {
                thumb.FadeIn.start();
                thumb.on_delay_load_complete = nil;
            }

            thumb.on_delay_load_complete = self.*end_load;
            thumb.image_path = "/image/gt6/gtauto/%{image}.dds";
            thumb.NEW.visible = new_flag;
            w.value = value;
            self.Pane::HBox.appendChild(context, w);

            if (default_focus_value == value)
                focus_w = w;
        }

        if (focus_w != nil)
            ROOT.setFocus(focus_w);
        else
            ROOT.setFocus(self.Pane::HBox.first);

        self.closing = false;
        self.result = nil;
        self.modal = main::SequenceUtil::ModalPage(context, self);
        self.modal.open();
        return self.result;
    }

    method abort(context)
    {
        self.close(context);
    }

    method close(context)
    {
        if (self.modal != nil)
        {
            self.closing = true;
            Pane::SceneCover::Fade.backward();
            Pane::SceneCover::Fade.total_time = 0.15;
            Pane::SceneCover::Fade.start();
            context.wait(Pane::SceneCover::Fade.total_time);
            Pane::SceneFace.visible = false;
            self.Fade.backward();
            self.Fade.start();
            self.modal.close(self.Fade.total_time);
            self.modal = nil;
        }
    }

    method onInitialize(context)
    {
        Pane::SceneFace.visible = false;
        Pane::SceneCover::Fade.forward();
        Pane::SceneCover::Fade.reset();
        self.Fade.forward();
        self.Fade.restart();
        self.Fade.on_effect_end = function (context)
        {
            Pane::SceneFace.visible = true;
            self.Fade.on_effect_end = nil;
        }
        SceneFaceUtil::loadScene(Pane::SceneFace, self.scene);
        SceneFaceUtil::SetSignalHandler(Pane::SceneFace, "start");
        context.pushEvent(menu::MScriptEvent(context, GTAutoRoot, "showTutorial"));
    }

    method onFinalize(context)
    {
        Pane::SceneCover::Fade.total_time = sSceneFadeTimeOrg;
    }

    method onActivate(context, event)
    {
        sound.play("ok");
        var w = event.widget;
        self.result = w.value;
        self.close(context);

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        sound.play("cancel");
        self.result = nil;
        self.close(context);

        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        if (CursorProject::StartMenuRoot::StartMenu.checkKeyPress(context, event))
            return EVENTRESULT_FILTER;
        
        return EVENTRESULT_CONTINUE;
    }

    module Pane::SceneFace
    {
        method onSignal(context, num)
        {
            if (!ROOT.closing)
                self.Pane::SceneCover::Fade.start();
        }
    }

    module VersionGT6
    {
        method onInitialize(context)
        {
            var ver_str = pdiext::MProductInformation::GetDisplayVersion();
            ver_str = ver_str.substr(0, ver_str.rfind("."));
            if (pdiext::isQABuild())
                ver_str = ver_str + ".qa";

            self.Version.text = "Ver. " + ver_str;
        }
    }

    module hidden::Item
    {
        attribute value;
    }
}