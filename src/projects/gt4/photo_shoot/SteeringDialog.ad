module PhotoShootProject::SteeringDialog
{
	static result = false;
	static original_y = nil;

	function open(context, type)
	{
		original_y = Dialog.y;
		Dialog.y = 480.0;
	
		context.pushPage(SteeringDialog);
		SteeringDialog.setFocus(nil);
	
		Dialog::Contents::Angle::SliderBar::Init();
	
		if (!Dialog.interpolateY(original_y, 0.4))
		{
			context.sync();
		}
	
		SteeringDialog.setFocus(Dialog::Buttons::OK);
		result = false;
	
		var update_context = context.getUpdateContext();
		update_context.enterEventLoop();
	
		return result;
	}

	function close(context)
	{
		SteeringDialog.setFocus(nil);
	
		var target_y;
		if (result != nil)
			target_y = -Dialog.h;
		else
			target_y = 480.0;
	
		if (!Dialog.interpolateY(target_y, 0.4))
			context.sync();

		context.closePage(SteeringDialog);
		var update_context = context.getUpdateContext();
		update_context.leaveEventLoop();
		Dialog.y = original_y;
	}

	function onCancel(context, event, item)
	{
		main::sound.play("cancel");
		result = nil;
		close(context);
		result = false;
	
		return EVENTRESULT_FILTER;
	}
	
	function Apply()
	{
		Dialog::Contents::Angle::SliderBar::Apply();
	}
	
	function Cancel()
	{
		Dialog::Contents::Angle::SliderBar::Cancel();
	}
	
	function Cleanup()
	{
		result = nil;
		original_y = nil;
		Dialog::Contents::Angle::SliderBar::Cleanup();
	}
}

module PhotoShootProject::SteeringDialog::Dialog::Contents::Angle::SliderBar
{
	static angle = 0;
	static save_angle = 0;

	function Cleanup()
	{
		angle = nil;
		save_angle = nil;
		popup::min.text = nil;
		popup::max.text = nil;
		label.text = nil;
		popup::pinch::value.text = nil;
	}
	
	function Init()
	{
		save_angle = angle = ShootRoot::Map::PM.wheel_angle.toInt();
	
		SliderBar.display_min = -30;
		SliderBar.display_max = 30;
		SliderBar.min = -30;
		SliderBar.max = 30;
	
		popup::min.text = -30;
		popup::max.text = 30;
	
		SliderBar.index = angle;
		label.text = angle.toString() + " °";
		popup::pinch::value.text = angle;
	
		Steering::Left.rotate = angle;
		Steering::Right.rotate = angle;
	}


	function Apply()
	{
		ShootRoot::Map::PM.wheel_angle = angle.toFloat();
	}
	
	function Cancel()
	{
		ShootRoot::Map::PM.wheel_angle = save_angle.toFloat();
	}
	
	function onValueChanged(context)
	{
		angle = SliderBar.index;
		label.text = angle.toString() + " °";
		popup::pinch::value.text = angle;
	
		Steering::Left.rotate = angle;
		Steering::Right.rotate = angle;
		ShootRoot::Map::PM.wheel_angle = angle.toFloat();
	}

	function onCancel(context, event)
	{
		SteeringDialog.focus_widget = SteeringDialog::Dialog::Buttons::Cancel;
	}
}

module PhotoShootProject::SteeringDialog::Dialog::Buttons::Cancel
{
	function onActivate(context, event, item)
	{
		main::sound.play("ok");
		result = false;
		close(context);
		return EVENTRESULT_FILTER;
	}
}

module PhotoShootProject::SteeringDialog::Dialog::Buttons::OK
{
	function onActivate(context, event, item)
	{
		main::sound.play("ok");
		result = true;
		close(context);
		return EVENTRESULT_FILTER;
	}
}