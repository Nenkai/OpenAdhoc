













module ROOT
{
    CommonTemplate.visible = false;

    static sCategory;
    static sNeedNewOpneSE = false;

    attribute gp;

    method open(context, category)
    {
        PROJECT.history['LastPageName'] = ROOT.name;

        sCategory = CareerModeUtil::CATEGORY::FORMULA;

        SequenceUtil::enableStartMenuRoot();
        SequenceUtil::enableSceneFaceRoot();
        SequenceUtil::startPageDirect(context, self);
    }

    method close(context, goto_race)
    {
        GAME_STATUS.user_profile.context.career_mode_type = -1;

        var actor = self.CloseActor;
        actor.forward();
        actor.restart();
        context.wait(actor.Fade.total_time);

        sCategory = nil;

        if (!goto_race)
        {
            PROJECT.history['LastPageName'] = nil;
            GTModeRoot.open(context);
        }
    }

    method onLoad(context)
    {
        if (!PROJECT.defined("CareerModeUtil"))
            PROJECT.load("/scripts/gt6/util/CareerModeUtil");
    }

    method sequence_loop(context)
    {
        var goto_race = false;
        var selected_folder = &PROJECT.history['XChallengeRoot::SelectFolder'];
        for (;;)
        {
            if (*selected_folder == nil)
            {
                var event_folder = EventFolderSelect.open(context);
                if (event_folder != nil)
                    *selected_folder = event_folder;
                else
                    break;
            }
            
            var gp = EventSelect.open(context, *selected_folder);
            if (gp == nil)
            {
                *selected_folder = nil;
                continue;
            }

            BG.hide();

            var goto_race = RaceEntryRoot.modal_open(context, gp, nil, sCategory);
            if (goto_race)
                break;
        }

        self.close(context, goto_race);
    }

    method onInitialize(context)
    {
        CursorProject::SceneFaceRoot.requestParticleCommand(context, "topMenuParticle_Shape02");

        Title.text = CareerModeUtil::GetCategoryText(sCategory);

        BG.appear(true);
        BG.stretchV(true);
        self.OpenActor.forward();
        self.OpenActor.restart();
        self.CloseActor.stop();

        PROJECT.PlayMenuBGM(context, ROOT);
        context.pushEvent(main::menu::MFunctionEvent(sequence_loop, context));
    }

    method showTutorial(context)
    {
        var data = [
            [
                "check_begin" : "x2014_welcome",
                "begin" : "x2014_kart",
                "done" : "x2014_welcome",
                "message" : "x2014_welcome",
                "msg_param" : [
                    "open_wait_sec" : 1.0,
                    "speaker" : "SPEAKER_VETTEL",
                ],
            ],
            [
                "check_begin" : "x2014_x_intro",
                "begin" : "x2014_x3",
                "progress" : "x2014_x_intro",
                "message" : "x2014_x_intro",
                "msg_param" : [
                    "open_wait_sec" : 1.0,
                    "speaker" : "SPEAKER_VETTEL",
                ],
            ],
        ];

        TutorialUtil::showTutorial(context, data, "gttop");
    }

    method getX2014JrCarName()
    {
        return gtengine::MSpecDB::getCarName(gtengine::MSpecDB::getCarCode("x2014_jr_14"));
    }

    method showTutorialOnEvent(context, event_folder)
    {
        var data = [
            [
                "check_begin" : "x2014_congrats",
                "done" : "x2014_congrats",
                "message" : "x2014_congrats",
                "msg_param" : [
                    "open_wait_sec" : 1.0,
                    "speaker" : "SPEAKER_VETTEL",
                ],
            ],
            [
                "check_begin" : "x2014_wait_update",
                "done" : "x2014_wait_update",
                "message" : "x2014_congrats_only",
                "msg_param" : [
                    "open_wait_sec" : 1.0,
                    "speaker" : "SPEAKER_VETTEL",
                ],
            ]
        ];

        var data_kart = [
            "check_begin" : "x2014_kart",
            "done" : "x2014_kart",
            "message" : "x2014_kart",
            "msg_param" : [
                "open_wait_sec" : 1.0,
                "speaker" : "SPEAKER_VETTEL",
            ],
        ];

        var data_x3 = [
            "check_begin" : "x2014_x3",
            "progress" : "x2014_x3",
            "message" : "x2014_x3",
            "msg_param" : [
                "open_wait_sec" : 1.0,
                "speaker" : "SPEAKER_VETTEL",
                "build_text" : getX2014JrCarName(),
            ],
        ];

        var data_x2 = [
            "check_begin" : "x2014_x2",
            "progress" : "x2014_x2",
            "message" : "x2014_x2",
            "msg_param" : [
                "open_wait_sec" : 1.0,
                "speaker" : "SPEAKER_VETTEL",
            ],
        ];

        var data_x1 = [
            "check_begin" : "x2014_x1",
            "progress" : "x2014_x1",
            "message" : "x2014_x1",
            "msg_param" : [
                "open_wait_sec" : 1.0,
                "speaker" : "SPEAKER_VETTEL",
            ],
        ];

        if (event_folder == "x2014_kart01")
            data.push(data_kart);

        if (event_folder == "x2014_x3")
            data.push(data_x3);

        if (event_folder == "x2014_x2")
            data.push(data_x2);

        if (event_folder == "x2014_vettel")
            data.push(data_x1);

        TutorialUtil::showTutorial(context, data, "gttop");
    }

    method checkEndMessage(context, event_folder, folder_id)
    {
        if (event_folder == "x2014_vettel" && 
            GAME_STATUS.user_profile.record.event_record.isFolderCleared(folder_id, 2) &&
            !KeyValueUtil::getFlag_NotNil("career", "x2014_end_message"))
        {
            context.pushEvent(main::menu::MFunctionEvent(context.pageInRootTransition));
            KeyValueUtil::set("career", "x2014_end_message", true);
            TutorialUtil::message(context, "x2014_end_message", [
                "open_wait_sec" : 1.0,
                "speaker" : "SPEAKER_VETTEL"
            ]);
        }
    }

    method checkPlayEnding(context)
    {
        if (GAME_STATUS.user_profile.record.event_record.isFolderCleared(135, 2) && 
            !KeyValueUtil::getFlag_NotNil("career", "play_ending_x2014_x2"))
        {
            KeyValueUtil::set("career", "play_ending_x2014_x2", true);

            context.pushEvent(main::menu::MFunctionEvent(context.pageInRootTransition));

            CursorProject::SceneFaceRoot.visible = false;
            PageUtil::invisibleUnderPages(context, self);

            EndingMovieRoot.openModal(context, EndingMovieRoot::OpenMode::X_CHALLENGE_SHORT_END);

            CursorProject::SceneFaceRoot.visible = true;
            PageUtil::visibleUnderPages(context, self);
        }
        else if (GAME_STATUS.user_profile.record.event_record.isFolderCleared(136, 2) && 
            !KeyValueUtil::getFlag_NotNil("career", "play_ending_x2014_vettel"))
        {
            context.pushEvent(main::menu::MFunctionEvent(context.pageInRootTransition));

            KeyValueUtil::set("career", "play_ending_x2014_vettel", true);

            CursorProject::SceneFaceRoot.visible = false;
            PageUtil::invisibleUnderPages(context, self);

            EndingMovieRoot.openModal(context, EndingMovieRoot::OpenMode::X_CHALLENGE_GRAND_END);

            CursorProject::SceneFaceRoot.visible = true;
            PageUtil::visibleUnderPages(context, self);
        }
    }

    method checkClearXchallenge(context, event_folder, folder_id)
    {
        var cond_array = [
            [event_folder == "x2014_kart01" && GAME_STATUS.user_profile.record.event_record.isFolderCleared(folder_id, 2), "x2014_congrats", "x2014_x_intro", "present_x2014_kart01"],
            [event_folder == "x2014_x3" && GAME_STATUS.user_profile.record.event_record.isFolderCleared(folder_id, 2), "x2014_congrats", "x2014_x2", "present_x2014_x3"],
            [event_folder == "x2014_x2" && GAME_STATUS.user_profile.record.event_record.isFolderCleared(folder_id, 2), "x2014_congrats", "x2014_x1", "present_x2014_x2"],
        ];

        foreach (|var condition, var message_key, var begin_key, var key| in cond_array)
        {
            if (condition && !KeyValueUtil::getFlag_NotNil("career", key))
            {
                TutorialUtil::clear("gttop", message_key);
                TutorialUtil::begin("gttop", message_key);

                if (begin_key != nil)
                {
                    TutorialUtil::begin("gttop", begin_key);
                }
            }
        }
    }

    method checkPresentCars(context, event_folder, folder_info)
    {
        var folder_id = folder_info["id"];
        var present_array = [
            [event_folder == "x2014_kart01" && GAME_STATUS.user_profile.record.event_record.isFolderCleared(folder_id, 2), "present_x2014_kart01", "PRESENT_X2014_KART_01", "rb_racing_kart_125_xx"],
            [event_folder == "x2014_x3" && GAME_STATUS.user_profile.record.event_record.isFolderCleared(folder_id, 2), "present_x2014_x3", "PRESENT_X2014_X3", "x2014_jr_14"],
            [event_folder == "x2014_x2" && GAME_STATUS.user_profile.record.event_record.isFolderCleared(folder_id, 2), "present_x2014_x2", "PRESENT_X2014_X2", "x2014_std_14"],
            [event_folder == "x2014_vettel" && GAME_STATUS.user_profile.record.event_record.isFolderCleared(folder_id, 2), "present_x2014_vettel", "PRESENT_X2014_X1", "x2014_14"],
        ];

        var folder_name = RaceEventUtil::getFolderTitleText(folder_info);
        checkPresentCondition(context, event_folder, folder_id, folder_name, present_array);
    }

    method checkPresentCondition(context, event_folder, folder_id, folder_name, present_array)
    {
        foreach (|var condition, var key, var translate, var carcode| in present_array)
        {
            if (condition)
            {
                if (!KeyValueUtil::getFlag_NotNil("career", key))
                {
                    if (main::GAME_STATUS.user_profile.garage.isFull())
                    {
                        sound.play("disable");
                        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                            manager.translate(CarShowroomRoot, "Message_GarageFullAtPresentCar"));
                        return;
                    }

                    var cp = gtengine::MCarParameter(carcode);
                    cp.setNewCar();

                    CursorProject::SceneFaceRoot.visible = false;

                    var message = manager.translate("CommonGTMode", "PRESENT_EVENT_CLEAR").build(folder_name);
                    KeyValueUtil::set("career", key, true);
                    context.pushEvent(main::menu::MFunctionEvent(context.pageInRootTransition));
                    CarDeliveryRoot.openModal(context, CarDeliveryRoot::OPEN_MODE::PRESENT, cp, message);

                    CursorProject::SceneFaceRoot.visible = true;
                }
            }
        }
    }

    method DisableEventMessage(context, folder_info)
    {
        if (folder_info.NeedFolderID > 0)
        {
            var lang = main::pdistd::MLocale::getLanguage();
            var folder_event_text = MENUDB.executeQuery1R1C("SELECT L.%{lang} FROM t_event_folder F, t_event_folder_localize L WHERE F.TitleID = L.LocalizeID AND F.FolderID=?",
                                    [folder_info.NeedFolderID]);
            ERROR(context, "CommonGTMode", "Message_NeedFolderID", folder_event_text);
        }
        else if (folder_info.NeedFolderID == -1)
        {
            DialogUtil::openConfirmDialog(context, DialogUtil::OK,
                manager.translate("CommonGTMode", "Message_NeedUpdate201401"));
        }
    }

    module BG
    {
        method onInitialize(context)
        {
            var target_src = EventFolderSelect::EventFolderList;
            var target_dst = EventSelect::EventList;

            self.Transform::XY.setStartValue(0, [target_src.x, target_src.y]);
            self.Transform::WH.setStartValue(0, [target_src.w, target_src.h]);

            self.Transform::XY.setEndValue(0, [target_dst.x, target_dst.y]);
            self.Transform::WH.setEndValue(0, [target_dst.w, target_dst.h]);
        }

        method appear(warp)
        {
            self.Fade.backward();
            self.Fade.start();
            if (warp == true)
            {
                self.Fade.warp();
            }
        }

        method hide(warp)
        {
            self.Fade.forward();
            self.Fade.start();
            if (warp == true)
            {
                self.Fade.warp();
            }
        }

        method stretchH(warp)
        {
            ROOT.Banner::Fade.forward();
            ROOT.Banner::Fade.start();
            self.Transform.forward();
            self.Transform.start();
            self.gradationUD::Fade.forward();
            self.gradationUD::Fade.start();
            self.gradationLR::Fade.forward();
            self.gradationLR::Fade.start();

            if (warp == true)
            {
                ROOT.Banner::Fade.warp();
                self.Transform.warp();
                self.gradationUD::Fade.warp();
                self.gradationLR::Fade.warp();
            }
        }

        method stretchV(warp)
        {
            ROOT.Banner::Fade.backward();
            ROOT.Banner::Fade.start();
            self.Transform.backward();
            self.Transform.start();
            self.gradationUD::Fade.backward();
            self.gradationUD::Fade.start();
            self.gradationLR::Fade.backward();
            self.gradationLR::Fade.start();

            if (warp == true)
            {
                ROOT.Banner::Fade.warp();
                self.Transform.warp();
                self.gradationUD::Fade.warp();
                self.gradationLR::Fade.warp();
            }
        }
    }

    module EventFolderSelect
    {
        Template.visible = false;

        attribute result;
        attribute event_loop;

        method open(context)
        {
            ROOT.setFocus(nil);
            
            var success = self.initialize(context);
            if (!success)
                return nil;

            self.result = nil;
            self.Fade.forward();
            self.Fade.start();
            self.insensitive = false;

            self.event_loop = main::menu::EventLoop(context);
            self.event_loop.enter();
            
            self.insensitive = true;
            self.finalize(context);

            var res = self.result;
            self.result = nil;
            return res;
        }

        method close(context)
        {
            if (self.event_loop != nil)
            {
                self.Fade.backward();
                self.Fade.start();
                context.wait(self.Fade.ramain_time);
                self.event_loop.leave();
                self.event_loop = nil;
            }

            ROOT.setFocus(nil);
        }

        method initialize(context)
        {
            BG.stretchV();
            BG.appear();

            var category_str = CareerModeUtil::GetCategoryString(sCategory);
            var category_key_name = "prev_star_at_category{0}".build(sCategory);

            var success = EventFolderList.initialize(context, sCategory);
            if (!success)
                return false;

            if (ROOT.getFocusWidget() == nil)
                ROOT.setFocus(EventFolderList::ListBox);

            context.pushEvent(menu::MScriptEvent(context, ROOT, "showTutorial"));

            if (sNeedNewOpneSE)
            {
                SoundUtil::PlayStreamSE("sound_gt/se/gt6unlock");
                sNeedNewOpneSE = false;
            }

            context.pushEvent(main::menu::MFunctionEvent(context.pageInRootTransition))
            return true;
        }

        method finalize(context)
        {
            EventFolderList.finalize(context);
        }

        method onInitialize(context)
        {
            self.Fade.forward();
            self.Fade.reset();
            self.insensitive = true;
        }

        method onCancel(context)
        {
            sound.play("cancel");
            self.close(context);
            return EVENTRESULT_FILTER;
        }

        method onKeyPress(context, event)
        {
            if (CursorProject::StartMenuRoot::StartMenu.checkKeyPress(context, event))
                return EVENTRESULT_FILTER;

            switch (event.keysym)
            {
                case CELL_PAD_CTRL_SELECT:
                    if (PROJECT::IsDevelop(context))
                    {
                        var state = context.getUpdateContext().getPadButtonState(0);
                        if (state & 0x800)
                        {
                            CursorProject::SceneFaceRoot.visible = false;
                            PageUtil::invisibleUnderPages(context, self);
                            EndingMovieRoot.openModal(context, EndingMovieRoot::OpenMode::X_CHALLENGE_GRAND_END);
                            CursorProject::SceneFaceRoot.visible = true;
                            PageUtil::visibleUnderPages(context, self);
                        }
                        else if (state & 0x100)
                        {
                            CursorProject::SceneFaceRoot.visible = false;
                            PageUtil::invisibleUnderPages(context, self);
                            EndingMovieRoot.openModal(context, EndingMovieRoot::OpenMode::X_CHALLENGE_SHORT_END);
                            CursorProject::SceneFaceRoot.visible = true;
                            PageUtil::visibleUnderPages(context, self);

                        }
                    }
                    break;
            }

            return EVENTRESULT_CONTINUE;
        }

        module EventFolderList
        {
            method initialize(context, category)
            {
                var lang = main::pdistd::MLocale::getLanguage();
                var main_event_type = CareerModeUtil::GetEventType(category, CareerModeUtil::TYPE::MAIN_EVENT);
                var info_list = MENUDB.queryList("SELECT F.*, L.%{lang} FROM t_event_folder F, t_event_folder_localize L WHERE F.TitleID = LocalizeID AND F.Type=? ORDER BY F.FolderOrder",
                                                [main_event_type]);
                
                if (info_list.size == 0)
                    return false;

                var info_final = info_list.pop();
                Final::Pane.setInfo(context, info_final);

                self.ListBox.setItemTemplate(context, Template::EventFolderItem);
                self.ListBox.setItemCount(info_list.size);

                var focus_index = 0;
                for (var i = 0; i < info_list.size; i++)
                {
                    var info = info_list[i];
                    var w = self.ListBox.getItemWidget(i, context);
                    w.setInfo(context, info);

                    if (PROJECT.history['XChallengeRoot::FocusFolder'] == info.Name)
                    {
                        PROJECT.history['XChallengeRoot::FocusFolder'] = nil;
                        focus_index = i;
                        self.ListBox.save_index = focus_index;
                        ROOT.setFocus(self.ListBox);
                    }
                }

                var adj = main::menu::MAdjustment();
                self.ListBox.v_adjustment = adj;
                self.VScrollArrow.adjustment = adj;
                return true;
            }

            method finalize(context)
            {
                self.ListBox.setItemCount(0);
                self.ListBox.focus_index = 0;
            }

            module ListBox
            {
                method onActivate(context)
                {
                    var w = self.getItemWidget(self.focus_index, context);
                    if (w.defined("on_activate"))
                       return  w.on_activate(context);
                    
                       return EVENTRESULT_CONTINUE;
                    }

                method onFocusEnter(context)
                {
                    var w = self.getItemWidget(self.focus_index, context);
                    if (w != nil && w.defined("focus_enter"))
                    {
                        w["focus_enter"](context);
                        ROOT.setFocus(w);
                    }

                    return EVENTRESULT_STOP;
                }

                method onFocusLeave(context)
                {
                    var w = self.getItemWidget(self.focus_index, context);
                    if (w != nil && w.defined("focus_leave"))
                    {
                        w["focus_leave"](context);
                    }

                    return EVENTRESULT_STOP;
                }

                method onFocusNotify(context, new_index, old_index)
                {
                    if (new_index != nil)
                    {
                        var w = self.getItemWidget(new_index, context);
                        if (w != nil && w.defined("focus_enter"))
                        {
                            w["focus_enter"](context);
                            ROOT.setFocus(w);
                        }
                    }

                    if (old_index != nil)
                    {
                        var w = self.getItemWidget(old_index, context);
                        if (w != nil && w.defined("focus_leave"))
                        {
                            w["focus_leave"](context);
                        }
                    }

                    return EVENTRESULT_STOP;
                }
            }

            module Final::Pane
            {
                attribute info;

                method onInitialize(context)
                {
                    self.Label.text = "";
                    self.Label_i.text = "";
                    self.Trophy.image_path = "";
                    self.Result.text = "";
                    self.active2 = false;
                    self.ComingSoon.visible = false;
                    self.Flyer.visible = false;
                    self.Open.visible = false;
                }

                method onActivate(context)
                {
                    if (!self.active2)
                    {
                        sound.play("disable");
                        ROOT::DisableEventMessage(context, info);
                        return EVENTRESULT_FILTER;
                    }

                    sound.play("ok");
                    PROJECT.history['XChallengeRoot::FocusFolder'] = self.info.Name;

                    KeyValueUtil::set("open_event", self.info.FolderID, false);
                    
                    EventFolderSelect.result = self.info.Name;
                    EventFolderSelect.close(context);

                    return EVENTRESULT_FILTER;
                }

                method setInfo(context, info)
                {
                    self.info = info;

                    var lang = main::pdistd::MLocale::getLanguage();
                    var event_name = info[lang];

                    self.Label.text = event_name;
                    self.Label_i.text = event_name;

                    var category_text = CareerModeUtil::GetCategoryText(ROOT::sCategory);
                    Final::TextFace.text = manager.translate("CommonGTMode", "Label_MainEventFinal").build(category_text);

                    if (info.NeedFolderID > -1)
                    {
                        self.Flyer.visible = true;
                        var image_face = self.Flyer::ImageFace;
                        var end_load_img = method (context)
                        {
                            image_face.FadeActor.start();
                            image_face.on_delay_load_complete = nil;
                        };

                        image_face.on_delay_load_complete = *self.*end_load_img;
                        image_face.image_path = "piece/gt6/event_flyer/%s.img".format(info.Name);

                        if (info.NeedFolderID > 0 && !GAME_STATUS.user_profile.record.event_record.isFolderCleared(info.NeedFolderID))
                            self.active2 = false;
                        else
                            self.active2 = true;
                    }
                    else
                    {
                        self.ComingSoon.visible = true;
                        self.active2 = false;
                    }
                    
                    if (PROJECT.history['XChallengeRoot::FocusFolder'] == info.Name)
                    {
                        PROJECT.history['XChallengeRoot::FocusFolder'] = nil;
                        ROOT.setFocus(self);
                    }
                }
            }
        }

        module Template
        {
            module EventFolderItem
            {
                attribute info;

                method onInitialize(context)
                {
                    self.Name::Label.text = "";
                    self.Name::Label_i.text = "";
                    self.Trophy.image_path = "";
                    self.Result.text = "";
                    self.active2 = false;
                    self.ComingSoon.visible = false;
                }

                method on_activate(context)
                {
                    if (!self.active2)
                    {
                        sound.play("disable");
                        ROOT::DisableEventMessage(context, info);
                        return EVENTRESULT_FILTER;
                    }

                    sound.play("ok");
                    KeyValueUtil::set("open_event", self.info.FolderID, false);
                    PROJECT.history['XChallengeRoot::FocusFolder'] = self.info.Name;
                    EventFolderSelect.result = self.info.Name;
                    EventFolderSelect.close(context);

                    return EVENTRESULT_FILTER;
                }

                
                method setInfo(context, info)
                {
                    self.info = info;

                    var lang = main::pdistd::MLocale::getLanguage();
                    var event_name = info[lang];

                    self.Name::Label.text = event_name;
                    self.Name::Label_i.text = event_name;

                    self.bg.image_path = "/image/gt6/career_special/%s.dds".format(info.Name);

                    if (info.NeedFolderID > -1)
                    {
                        var image_face = self.image.flyer;
                        var end_load_img = method (context)
                        {
                            image_face.FadeActor.start();
                            image_face.on_delay_load_complete = nil;
                        };

                        image_face.on_delay_load_complete = *self.*end_load_img;
                        image_face.image_path = "piece/gt6/event_flyer/%s.img".format(info.Name);

                        if (info.NeedFolderID > 0 && !GAME_STATUS.user_profile.record.event_record.isFolderCleared(info.NeedFolderID))
                            self.active2 = false;
                        else
                            self.active2 = true;
                    }
                    else
                    {
                        self.ComingSoon.visible = true;
                        self.active2 = false;
                    }

                    var result = GAME_STATUS.user_profile.record.event_record.getEventResult(info.FolderID);
                    var order = result + 1;
                    if (order >= 1 && order <= 3)
                    {
                        var rank = ["gold", "silver", "bronze"][result];
                        self.Trophy.image_path = "/image/gt6/event/trophy_%{rank}.dds";
                        self.Result.text = "";
                    }
                    else if (order >= 4)
                    {
                        self.Trophy.image_path = "";
                        self.Result.text = result + 1;
                    }
                }

                method focus_enter(context)
                {
                    self.blink::Fade.restart();
                    self.blink.visible = true;
                }

                method focus_leave(context)
                {
                    self.blink::Fade.reset();
                }
            }
        }
    }

    module EventSelect
    {
        Template.visible = false;

        attribute result;
        attribute event_loop;
        attribute folder_info;
        attribute gp;
        attribute preserved_championship_flag;
        attribute can_take_spot_race;

        method open(context, event_folder)
        {
            ROOT.setFocus(nil);
            var success = self.initialize(context, event_folder);

            if (!success)
                return nil;

            self.result = nil;
            self.Fade.forward();
            self.Fade.start();

            self.insensitive = false;

            self.event_loop = main::menu::EventLoop(context);
            self.event_loop.enter();

            self.insensitive = true;

            var res = self.result;
            self.result = nil;
            self.finalize(context);
            return res;
        }

        method close(context)
        {
            if (self.event_loop != nil)
            {
                self.Fade.backward();
                self.Fade.start();
                context.wait(self.Fade.ramain_time);
                self.event_loop.leave();
                self.event_loop = nil;
            }
        }

        method initializeGameRecord(folder_info)
        {
            var event_id_list = folder_info["event_id_list"];
            var event_type = folder_info["event_type"];
            var folder_id = folder_info["id"];
            var category = 0;
            var is_online = false;
            
            if (folder_info["championship"])
            {
                var championship_event_id = folder_id;
                event_id_list.push(championship_event_id);
            }

            GAME_STATUS.user_profile.record.event_record.initializeRecord(event_id_list, event_type, folder_id, category, is_online);
        }

        method getFolderInfo(context, event_name)
        {
            var xml = "/game_parameter/gt6/event/%s.xml".format(event_name);
            var folder_info_list = EventRace2.decodeOfflineEventList(xml);

            if (folder_info_list.size == 0)
                return nil;

            GAME_STATUS.user_profile.context.event_name = event_name;
            return folder_info_list[0];
        }

        method getGP(context, folder_id)
        {
            var xml = "/game_parameter/gt6/event/r%03d.xml".format(folder_id);
            return GameParameterUtil::createFromFile(xml);
        }

        method updateRegulations(context)
        {
            var listbox = EventList::ListBox;
            
            for (var i = 0; i < listbox.getItemCount(); ++i)
            {
                var w = listbox.getInitializedWidget(context, i);
                if (w != nil)
                {
                    self.gp.event_index = 0;
                    w.updateRegulation(self.gp);
                }
            }
        }

        method initialize(context, event_folder)
        {
            BG.stretchH();
            BG.appear();
            if (self.folder_info == nil || self.gp == nil)
            {
                var folder_info = self.getFolderInfo(context, event_folder);
                if (folder_info == nil)
                {
                    self.close(context);
                    return false;
                }

                var gp = self.getGP(context, folder_info["id"]);
                if (gp == nil)
                {
                    self.close(context);
                    return false;
                }

                self.folder_info = folder_info;
                self.gp = gp;
                self.preserved_championship_flag = gp.championship;
            }

            self.gp.championship = self.preserved_championship_flag;
            initializeGameRecord(folder_info);

            var event_size = gp.events.size;
            if (gp.championship)
            {
                ++event_size;
                var result = GAME_STATUS.user_profile.record.event_record.getEventResult(gp.folder_id);
                self.can_take_spot_race = result > -1;
            }

            var listbox = EventList::ListBox;
            listbox.setItemTemplate(context, Template::EventItem);
            listbox.setItemCount(event_size);

            listbox.spacing = gp.championship ? 100 : 60;
            listbox.focus_index = PROJECT.history['XChallengeRoot::FocusEvent'] != nil ? PROJECT.history['XChallengeRoot::FocusEvent'] : 0;
            
            PROJECT.history['XChallengeRoot::FocusEvent'] = nil;
            ROOT.setFocus(listbox);

            var adj = main::menu::MAdjustment();
            EventList::HScrollArrow.adjustment = adj;
            listbox.h_adjustment = adj;
            
            var image_face = self.flyer;

            var end_load_img = method (context)
            {
                image_face.FadeActor.start();
                image_face.on_delay_load_complete = nil;
            };

            image_face.on_delay_load_complete = *self.*end_load_img;
            image_face.image_path = "piece/gt6/event_flyer/%s.img".format(event_folder);

            EventFolderName::Label.text = RaceEventUtil::getFolderTitleText(folder_info);

            var scrollclip = Description::ScrolledWindow::clip;
            scrollclip.space::Text.text = RaceEventUtil::getFolderDescriptionText(folder_info);
            scrollclip.space.y = 0.0;
            scrollclip.manual_target_y = 0.0;

            ToolTip.tip.value = RaceEventUtil::getFolderCopyText(folder_info);

            context.pushEvent(menu::MFunctionEvent(function(context)
            {   
                checkEndMessage(context, event_folder, self.folder_info["id"]);
                checkPlayEnding(context);
                var category_str = CareerModeUtil::GetCategoryString(sCategory);
                checkClearXchallenge(context, event_folder, self.folder_info["id"]);
                checkPresentCars(context, event_folder, self.folder_info);
                showTutorialOnEvent(context, event_folder);
                SoundUtil::MenuBGMCrossfadeGroup("xchallenge", 0.0, 1.0);
                context.pushEvent(main::menu::MFunctionEvent(context.pageInRootTransition));
            }, context));

            updateRegulations(context);
            return true;
        }

        method finalize(context)
        {
            EventList::ListBox.setItemCount(0);
        }

        method onInitialize(context)
        {
            self.Fade.forward();
            self.Fade.reset();
            self.insensitive = true;

            EventFolderName::Label.text = "";
            EventFolderName::Course.text = "";

            var adj = main::menu::MAdjustment();
            Description::Scrollbar::VScrollbar.adjustment = adj;

            var scroll_clip = Description::ScrolledWindow::clip;
            scroll_clip.scroll_mode = SCROLL_MODE_MANUAL;
            scroll_clip.v_adjustment = adj;
            ToolTip.tip.remove();
        }

        method onActivate(context)
        {
            var listbox = EventList::ListBox;
            var w = listbox.getItemWidget(listbox.focus_index);

            if (w == nil)
            {
                sound.play("disable");
                return EVENTRESULT_FILTER;
            }

            var gp = self.gp;
            if (gp.championship && !w.is_championship_item)
            {
                if (!self.can_take_spot_race)
                {
                    sound.play("disable");
                    ROOT.setFocus(listbox);
                    ERROR(context, "RaceEvent", "YOU_MUST_CLEAR_CHAMPIONSHIP");
                    return EVENTRESULT_FILTER;
                }
            }

            sound.play("ok");
            gp.event_index = w.event_index;
            gp.championship = w.is_championship_item;

            GAME_STATUS.user_profile.context.career_mode_type = CareerModeUtil::TYPE::MAIN_EVENT;
            PROJECT.history['XChallengeRoot::FocusEvent'] = listbox.focus_index;

            self.result = gp;
            self.close(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            sound.play("cancel");
            self.folder_info = nil;
            self.gp = nil;
            self.preserved_championship_flag; // Normal
            self.close(context);

            return EVENTRESULT_FILTER;
        }

        method onKeyPress(context, event)
        {
            var preopen_garage_id = GAME_STATUS.user_profile.garage.getRidingGarageId();

            if (CursorProject::StartMenuRoot::StartMenu.checkKeyPress(context, event))
            {
                if (preopen_garage_id != GAME_STATUS.user_profile.garage.getRidingGarageId())
                    updateRegulations(context);

                return EVENTRESULT_FILTER;
            }

            return EVENTRESULT_CONTINUE;
        }

        module EventList::ListBox
        {
            method getInitializedWidget(context, i)
            {
                if (i < 0)
                    return nil;

                var w = self.getItemWidget(i);
                if (w == nil)
                {
                    w = self.getItemWidget(i, context);
                    var gp = EventSelect.gp;

                    if (gp.championship)
                    {
                        if (i == 0)
                        {
                            w.init(context, gp, 0, true);
                        }
                        else if (i - 1 < gp.events.size)
                        {
                            w.init(context, gp, i - 1, false, EventSelect.can_take_spot_race);
                        }
                        else
                        {
                            return nil;
                        }
                    }
                    else if (i < gp.events.size)
                    {
                        w.init(context, gp, i, false);
                    }
                    else
                    {
                        return nil;
                    }
                }

                return w;
            }

            method onFocusEnter(context)
            {
                var w = self.getInitializedWidget(context, self.focus_index);
                if (w != nil)
                {
                    if (w.defined("focus_enter"))
                        w["focus_enter"](context);
                    ROOT.setFocus(w);
                }

                return EVENTRESULT_STOP;
            }

            method onFocusNotify(context, new_index, old_index)
            {
                if (new_index != nil)
                {
                    var w = self.getInitializedWidget(context, new_index);
                    if (w != nil && w.defined("focus_enter"))
                    {
                        w["focus_enter"](context);
                    }
                }

                if (old_index != nil)
                {
                    var w = self.getInitializedWidget(context, old_index);
                    if (w != nil && w.defined("focus_leave"))
                    {
                        w["focus_leave"](context);
                    }
                }

                return EVENTRESULT_STOP;
            }

            method onVisibleNotify(context, indexes)
            {
                foreach (var i in indexes)
                {
                    self.getInitializedWidget(context, i);
                }

                return EVENTRESULT_STOP;
            }

            method onKeyPress(context, key_event)
            {
                var scrollclip = Description::ScrolledWindow::clip;
                var line_height = scrollclip.space.Text.line_height;

                switch (key_event.keysym)
                {
                    case CELL_PAD_CTRL_SELECT:
                        if (PROJECT::IsDevelop(context))
                        {
                            var gp = EventSelect.gp;
                            var w = self.getItemWidget(self.focus_index);
                            if (w.is_championship_item)
                            {
                                var event_id = gp.folder_id;
                                var result = GAME_STATUS.user_profile.record.event_record.getEventResult(event_id);
                                if (--result < 0)
                                    result = gtengine::FinishResult::RANK_4;
                                
                                GAME_STATUS.user_profile.record.event_record.updateResultOnly(event_id, result);
                            }
                            else
                            {
                                var event = gp.events[w.event_index];
                                var event_id = event.event_id;

                                var result = GAME_STATUS.user_profile.record.event_record.getEventResult(event_id);
                                if (--result < 0)
                                    result = gtengine::FinishResult::RANK_4;
                            
                                GAME_STATUS.user_profile.record.event_record.updateResultOnly(event_id, result);
                            }

                            w.init(context, gp, w.event_index, w.is_championship_item, EventSelect.can_take_spot_race);
                        }

                        return EVENTRESULT_FILTER;
                        break;

                    case CELL_PAD_CTRL_L3_UP:
                        if (scrollclip.manualTargetIncY(line_height))
                            return EVENTRESULT_FILTER;
                        break;

                    case CELL_PAD_CTRL_L3_DOWN:
                        if (scrollclip.manualTargetIncY(-line_height))
                            return EVENTRESULT_FILTER;
                        break;
                }

                return EVENTRESULT_CONTINUE;
            }
        }

        module Template
        {
            module EventItem
            {
                attribute course_info;
                attribute event_index;
                attribute is_championship_item = false;
                attribute by_section;

                method onInitialize(context)
                {
                    self.Stars::HBox.clearChildren(context);
                    self.CourseLogo.image_path = "";
                    self.Trophy.image_path = "";
                    self.Result.text = "";
                    self.RaceType.text = "";
                    self.Spot.text = "";
                    self.Arrow.visible = false;
                    self.PassedRegulation.active = false;
                    self.active2 = true;
                }

                method init(context, gp, event_index, is_championship_item, can_take_spot_race)
                {
                    var event = gp.events[event_index];

                    var event_id = is_championship_item ? gp.folder_id : event.event_id;
                    var rp = event.race_parameter;
                    self.event_index = event_index;

                    if (is_championship_item)
                    {
                        self.active3 = true;
                        self.Championship::AllRaces.text = manager.translate("Unit", "RACE_SERIES_COUNT").build(gp.events.size);
                        self.RaceType.text = RaceEventUtil::getGameModeText(context, event);
                        self.is_championship_item = true;
                        self.event_index = 0;
                    }
                    else
                    {
                        self.active3 = false;
                        
                        var course_code = event.track.course_code;
                        var course_info = main::SPECDB.query1("SELECT ModelName, Logo, Name, Reverse, Loop, Scenery FROM COURSE WHERE ID=?", [course_code]);

                        var by_section = rp.complete_type == gtengine::CompleteType::BYSECTION;
                        self.by_section = by_section;
                        self.course_info = course_info;

                        var map_face = Map::CourseMapFace;
                        CourseMapFaceUtil::initialize(context, map_face, course_info, event);
                        map_face.span.pointer_visible = false;
                        map_face.span.move_visible = false;

                        var end_load_courselogo = method (context)
                        {
                            self.CourseLogo.FadeActor.restart();
                            self.CourseLogo.on_delay_load_complete = nil;
                        };

                        self.CourseLogo.on_delay_load_complete = *self.*end_load_courselogo;
                        self.CourseLogo.image_path = "piece/gt6/course_logo_M/%s.img".format(course_info.Logo);

                        self.RaceType.text = RaceEventUtil::getGameModeText(context, event);
                        
                        var is_oneway = !course_info.Loop;
                        var complete_type_txt = RaceEventUtil::getCompleteTypeText(context, event, is_oneway);

                        if (complete_type_txt != "")
                            self.RaceType.text += " / " + complete_type_txt;

                        if (gp.championship)
                        {
                            self.Spot.text = manager.translate("Unit", "RACE_NO").build(event_index + 1);
                            Arrow.visible = event_index > 0;
                            self.active2 = can_take_spot_race == true;
                        }
                    }

                    var result = RaceEventUtil::getResult(event_id);
                    var order = result + 1;
                    if (order >= 1 && order <= 3)
                    {
                        var rank = ["gold", "silver", "bronze"][result];
                        self.Trophy.image_path = "/image/gt6/event/trophy_%{rank}.dds";
                        self.Result.text = "";
                    }
                    else if (order >= 4)
                    {
                        self.Trophy.image_path = "";
                        self.Result.text = result + 1;
                    }
                }

                method updateRegulation(gp)
                {
                    var is_rentacar = RaceEventUtil::isRentACarEvent(gp.event);
					var dummy_text;
                    if (!is_rentacar)
                        self.PassedRegulation.active = RaceEventUtil::checkRegulation(gp, &dummy_text)

                    self.PassedRegulation.active2 = is_rentacar;
                }

                method focus_enter(context)
                {
                    if (is_championship_item)
                    {
                        EventSelect::EventFolderName::Course.text = "";
                    }
                    else
                    {
                        var map_face = Map::CourseMapFace;
                        if (self.by_section)
                        {
                            map_face.span.pointer_visible = true;
                            map_face.span.move_visible = true;
                        }
                        else
                        {
                            map_face.span.pointer_visible = true;
                            map_face.span.move_visible = false;
                        }

                        map_face.span.SpanActor.restart();
                        
                        var course_name = manager.translate("CourseName", self.course_info.Name);
                        if (self.course_info.Reverse)
                            course_name += " / " + manager.translate("CourseData", "direction_reverse");

                        EventSelect::EventFolderName::Course.text = " : %{course_name}";
                    }
                }

                method focus_leave(context)
                {
                    if (!is_championship_item)
                    {
                        var map_face = Map::CourseMapFace;
                        map_face.span.pointer_visible = false;
                        map_face.span.move_visible = false;
                        map_face.span.SpanActor.reset();
                    }
                }
            }
        }
    }
}