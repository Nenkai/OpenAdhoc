module GTAutoProjectComponent::DialogParts::Pulldown
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module GTAutoProjectComponent::DialogParts::Pulldown::OptionMenu
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    attribute decide_callback;

    method onRealize(manager)
    {
        self.copy_selected_item = false;
        self.popup.visible = true;
        self.decide_callback = nil;
    }

    method pulldownValueChanged(context)
    {
        var w = self.getItem(self.index);
        if (w != nil)
        {
            var w2 = self;
            w2.label.text = w.label.text;
            w2.label.abbreviate = true;
            if (w2.label_i != nil)
            {
                w2.label_i.text = w.label.text;
                w2.label_i.abbreviate = true;
            }
        }
    }

    method onInitialize(context)
    {
        self.pulldownValueChanged(context);
    }

    method onFinalize(context)
    {
        self.decide_callback = nil;
    }

    method onValueChanged(context)
    {
        self.pulldownValueChanged(context);
        if (self.decide_callback != nil)
            decide_callback(context, self.index, self);
    }
}

module GTAutoProjectComponent::DialogParts::PulldownItem
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module GTAutoProjectComponent::DialogParts::Slider
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_unit, 2.4);
}

module GTAutoProjectComponent::DialogParts::Slider::slider
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
    SCALE_WIDGET_SDTV(popup::Max::value, 2.4);
    SCALE_WIDGET_SDTV(popup::Max::label, 2.4);
    SCALE_WIDGET_SDTV(popup::Min::value, 2.4);
    SCALE_WIDGET_SDTV(popup::Min::label, 2.4);

    attribute zero_text;
    attribute unit_text;
    attribute min_text;
    attribute max_text;
    attribute decide_callback;
    attribute format_callback;
    attribute is_zero_callback;
    attribute arg;
    attribute initialized;
    attribute format_string;
    attribute quantizer;
    attribute step_thr;

    method onRealize(manager)
    {
        self.initialized = true;
        self.zero_text = nil;
        self.unit_text = nil;
        self.min_text = nil;
        self.max_text = nil;
        self.decide_callback = nil;
        self.format_callback = nil;
        self.is_zero_callback = nil;
        self.format_string = nil;
        self.quantizer = 1.0;
        self.step_thr = nil;
        
        var pup = self['popup'];
        pup.visible = true;
        pup.minimum_width = self.w;
        pup.w = self.w;
        pup.x = 0.0;
    }

    method onInitialize(context)
    {
        self.setup(context);
        self.initialized = true;
    }

    method onFinalize(context)
    {
        self.initialized = false;
        self.zero_text = nil;
        self.unit_text = nil;
        self.min_text = nil;
        self.max_text = nil;
        self.decide_callback = nil;
        self.format_callback = nil;
        self.is_zero_callback = nil;
        self.format_string = nil;
        self.step_thr = nil;
    }

    method onStepChanged(context)
    {
        if (self.step_thr != nil)
            self.on_step_changed();
    }

    method on_step_changed()
    {
        var x = self.value - self.repeat_start;
        x /= 4.0;

        if (x < 0.0)
            x = -x;

        if (x < 1.0)
            x = 1.0;

        if (x > self.step_thr)
            x = self.step_thr;

        self.step = x;
    }

    method onPopupOpen(context)
    {
        self.sliderPopupOpen(context);
    }

    method onPopupClosed(context)
    {
        self.sliderPopupClosed(context);
    }

    method onValueChanged(context)
    {
        self.sliderValueChanged(context);
    }

    function default_value_format_function(context, value, slider)
    {
        if (slider.zero_text != nil && slider.is_zero_callback(value, slider))
            return slider.zero_text;

        var q = Math::round(value * slider.quantizer);
        return slider.format_string.format(q);
    }

    function default_is_zero_function(value, slider)
    {
        var q = Math::round(value * slider.quantizer);
        return q == 0.0;
    }

    method setup(context)
    {
        if (self.format_callback == nil)
            self.format_callback = default_value_format_function;

        if (self.is_zero_callback == nil)
            self.is_zero_callback = default_is_zero_function;

        var stepscale = Math::log10(self.step);
        var precision = stepscale >= 0.0 ? 0 : Math::ceil(-stepscale).toInt();
        self.quantizer = 10.0 ** precision;

        if (precision <= 0)
            self.format_string = "%d";
        else
            self.format_string = "%." + precision.toString() + "t";

        if (self.unit_text != nil)
            self.parent.label_unit.text = unit_text;

        var pup = self['popup'];
        pup.Min::value.text = call_format_func(context, self.min);
        pup.Max::value.text = call_format_func(context, self.max);

        if (self.min_text != nil)
            pup.Min::label.text = self.min_text;

        if (self.max_text != nil)
            pup.Max::label.text = self.max_text;

        self.reflect(context);
    }

    method reflect(context)
    {
        var text;
        if (self.zero_text != nil && self.is_zero_callback(value, self))
            text = self.zero_text;
        else
            text = call_format_func(context, self.value);

        self.label.text = text;
        if (self.defined('label_i'))
            self.label_i.text = text;
    }

    method call_format_func(context, value)
    {
        return self.format_callback(context, value, self);
    }

    method sliderPopupOpen(context)
    {
        self.sliderValueChanged(context);
    }

    method sliderPopupClosed(context)
    {
        if (!self.initialized)
            return;

        if (!self.cancel)
        {
            self.reflect(context);
            if (self.decide_callback != nil)
                self.decide_callback(context, self.value, self);
        }
    }

    method sliderValueChanged(context)
    {
        if (!self.initialized)
            return;

        var pup = self['popup'];
        var text = call_format_func(context, self.value);
        self.label.text = text;
        if (self.defined('label_i'))
            self.label_i.text = text;
    }
}

module GTAutoProjectComponent::ButtonHelp::ButtonHelpGT6
{
    module hidden::ButtonSet
    {
        SCALE_WIDGET_SDTV(Circle::label, 2.4);
        SCALE_WIDGET_SDTV(Circle::labeli, 2.4);
        SCALE_WIDGET_SDTV(Square::label, 2.4);
        SCALE_WIDGET_SDTV(Square::labeli, 2.4);
        SCALE_WIDGET_SDTV(Triangle::label, 2.4);
        SCALE_WIDGET_SDTV(Triangle::labeli, 2.4);
        SCALE_WIDGET_SDTV(Cross::label, 2.4);
        SCALE_WIDGET_SDTV(Cross::labeli, 2.4);
        SCALE_WIDGET_SDTV(R1::label, 2.4);
        SCALE_WIDGET_SDTV(R1::labeli, 2.4);
        SCALE_WIDGET_SDTV(L1::label, 2.4);
        SCALE_WIDGET_SDTV(L1::labeli, 2.4);
        SCALE_WIDGET_SDTV(R2::label, 2.4);
        SCALE_WIDGET_SDTV(R2::labeli, 2.4);
        SCALE_WIDGET_SDTV(L2::label, 2.4);
        SCALE_WIDGET_SDTV(L2::labeli, 2.4);
    }

    method clear()
    {
        if (self.current_button_set != nil)
        {
            Pane.removeChild(self.current_button_set);
            self.current_button_set = nil;
        }

        if (self.prev_button_set != nil)
        {
            Pane.removeChild(self.prev_button_set);
            self.prev_button_set = nil;
        }

        self.current_button_set = nil;
        self.prev_button_set = nil;
        self.button_sets = Map();
    }

    method onRealize(manager)
    {
        hidden.visible = false;
    }

    method onFinalize(context)
    {
        clear();
    }

    function getEnterButtonName()
    {
        var assign = main::pdiext::MSystemConfiguration::GetEnterButtonAssign();
        if (assign == "circle")
            return "Circle"
        else
            return "Cross";
    }

    function getCancelButtonName()
    {
        var assign = main::pdiext::MSystemConfiguration::GetEnterButtonAssign();
        if (assign == "circle")
            return "Cross"
        else
            return "Circle";
    }

    attribute is_appear = false;
    attribute current_button_set = nil;
    attribute prev_button_set = nil;
    attribute button_sets = Map();
    attribute current_set = "";

    method set(context, set_list)
    {
        var button_set = hidden::ButtonSet.doCopy();
        if (pdiext::MSystemConfiguration::isSDTV())
        {
            if (set_list.size > 0 && set_list[set_list.size - 1][0] != "R2")
                set_list.push(["R2", manager.translate("Component", "Label_Zoom")]);
                
            
            var pad_left = set_list.size >= 6 ? -28 : 0;
            var w = button_set.first;

            while (w != nil)
            {
                w.pack_pad_left = pad_left;
                w = w.next;
            }
        }

        button_set.visible = false;

        var it = button_set.first;
        while (it != nil)
        {
            it.visible = false;
            it = it.next_widget;
        }

        var order_list = [];
        foreach (var set in set_list)
        {
            |var button_name, var text| = set;
            if (button_name == "Enter")
            {
                if (text == nil)
                    text = manager.translate("Component", "Label_" + button_name);
                var button_name = getEnterButtonName();
            }

            if (button_name == "Back" || button_name == "Cancel" || button_name == "Close")
            {
                if (text == nil)
                    text = manager.translate("Component", "Label_" + button_name);
                var button_name = getCancelButtonName();
            }

            if (text == nil)
                text = "";

            var button_w = button_set[button_name];
            order_list.push(button_w);
            button_w["label"].text = text;
            button_w["label"].visible = true;
            button_w["label_i"].text = text;
            button_w["label_i"].visible = false;
            button_w.visible = true;
        }

        button_set.reorderChild(order_list);
        self.prev_button_set = current_button_set;
        self.current_button_set = button_set;
        if (prev_button_set != nil)
        {
            Pane.removeChild(self.prev_button_set);
            self.prev_button_set = nil;
        }

        Pane.appendChild(context, button_set);
        button_set.InAnimation.restart();
        button_set.visible = true;
    }

    method addButtonSet(context, set_name, set_list)
    {
        self.button_sets[set_name] = set_list;
    }
    
    method setButtonSet(context, set_name)
    {
        if (self.current_set == set_name)
            return;
        var set_list = self.button_sets[set_name];
        self.set(context, set_list);
        self.current_set = set_name;
    }

    method getCurrentButtonSetName()
    {
        return self.current_set;
    }

    method setLabel(context, button_name, text)
    {
        var button_w = Pane::Buttons[button_name];
        button_w["label"].text = text;
        button_w["label_i"].text = text;
    }

    method setInsensitive(button_name, insensitive)
    {
        var button_w = Pane::Buttons[button_name];
        if (button_w != nil)
        {
            button_w["label"].visible = !insensitive;
            button_w["label_i"].visible = insensitive;
        }
    }

    method appear()
    {
        self.FadeEffect.reverse = false;
        self.FadeEffect.start();
        self.is_appear = true;
    }

    method hide()
    {
        self.FadeEffect.reverse = true;
        self.FadeEffect.start();
        self.is_appear = false;
    }

    method appearIf()
    {
        if (!self.is_appear)
        {
            appear();
            return true;
        }

        return false;
    }

    method hideIf()
    {
        if (self.is_appear)
        {
            hide();
            return true;
        }

        return false;
    }
}

module GTAutoProjectComponent::Tooltip::BalloonTip
{
    attribute current_widget;

    method set_value(context, widget, text, display_position, distance, visible_time)
    {
        if (self.current_widget == nil)
            return;

        self.current_widget.reset();
        if (self.current_widget == self['TIP_02'])
            self.current_widget = self['TIP_01'];
        else
            self.current_widget = self['TIP_02'];

        self.current_widget.visible = true;
        self.current_widget.set_value(context, widget, text, display_position, distance, visible_time);
    }

    method reset_value()
    {
        if (self.current_widget == nil)
            return;

        self.current_widget.reset();
    }

    method initialize(context)
    {
        if (self['TIP_01'] == nil)
        {
            var tip01 = self.Tip.doCopy();
            tip01.name = "TIP_01";
            tip01.opacity = 0.0;
            self.appendChild(context, tip01);
        }

        if (self['TIP_02'] == nil)
        {
            var tip02 = self.Tip.doCopy();
            tip02.name = "TIP_02";
            tip02.opacity = 0.0;
            self.appendChild(context, tip02);
        }

        self.current_widget = self['TIP_01'];
    }

    method onInitialize(context)
    {
        self.Tip.visible = false;
        initialize(context);
    }

    method onFinalize(context)
    {
        self.current_widget = nil;

        if (self['TIP_01'] != nil)
        {
            self.removeChild(context, self['TIP_01']);
        }

        if (self['TIP_02'] != nil)
        {
            self.removeChild(context, self['TIP_02']);
        }
    }
}

module GTAutoProjectComponent::Tooltip::BalloonTip::Tip
{
    attribute thread;
    attribute widget;
    attribute default_w;
    attribute is_visible_end;
    attribute display_position;
    attribute distance;
    attribute visible_time;

    SCALE_WIDGET_SDTV(Text::TextFace, 2.4);

    method set_value(context, widget, text, display_position, distance, visible_time)
    {
        reset();

        self.widget = widget;
        self.Text.TextFace.text = text;

        self.display_position = display_position != nil ? display_position : "D";
        self.distance = distance != nil ? distance : 36;
        self.visible_time = visible_time != nil ? visible_time : 3;
        self.thread = Thread(display_tip_tick, context);
        self.thread.start();
    }

    method clear()
    {
        self.widget = nil;
        self.default_w = nil;
        self.display_position = nil;
        self.distance = nil;
        self.visible_time = nil;

        if (self.thread != nil)
        {
            self.thread.terminate();
            self.thread = nil;
        }
    }

    method reset()
    {
        clear();

        self.opacity = 0.0;
        self.AppearEffect.reset();
        self.VisibleEffect.reset();
        self.Text.TextFace.text = "";
        self.w = 0;
        self.h = 0;
        self.default_w = self.w;
        self.is_visible_end = false;
    }

    method onFinalize(context)
    {
        clear();
    }

    method display_tip_tick(context)
    {
        var current_w = self.default_w;

        for (;;)
        {
            if (self.is_visible_end || self.widget == nil)
            {
                reset();
                break;
            }

            if (self.default_w < current_w)
            {
                display_tip(context);
                break;
            }
        
            current_w = self.w;
            Thread::Sleep(0.05);
        }
    }

    method display_tip(context)
    {
        var bbox = self.widget.getBoundingBox();
        var base_x = bbox.x + (bbox.w * self.widget.cursor_align_x);
        var base_y = bbox.y + (bbox.h * self.widget.cursor_align_y);

        var disp_x, disp_y;
        if ("U" == self.display_position)
        {
            disp_x = base_x - (self.w * 0.5);
            disp_y = (base_y - self.distance) - self.Tip.h;
        }
        else
        {
            disp_x = base_x - (self.w * 0.5);
            disp_y = base_y + self.distance;
        }

        var viewport = context.getViewport();
        var display_area_L = viewport.x + 20;
        var display_area_R = (viewport.x + viewport.w) - 20;

        var adjust_x = 0;
        var left_x = disp_x;
        if (left_x < display_area_L)
            adjust_x = left_x - display_area_L;

        var right_x = disp_x + self.w;
        if (right_x > display_area_R)
            adjust_x = right_x - display_area_R;

        disp_x -= adjust_x;

        self.sx = disp_x;
        self.sy = disp_y;

        if (self.AppearEffect.pause && self.AppearEffect.time == 0)
        {
            var scale_cx = 0.0;
            if (self.BalloonTip.w > 0.0)
            {
                scale_cx = disp_x == 0.0 ? 0.0 : disp_x / self.BalloonTip.w;
            }

            var scale_cy = 0.0;
            if (self.BalloonTip.h > 0.0)
            {
                scale_cy = disp_y == 0.0 ? 0.0 : disp_y / self.BalloonTip.h;
            }

            self.BalloonTip.center = [scale_cx, scale_cx]; // PDI Typo?
            self.AppearEffect.restart();
        }

        if (self.VisibleEffect.pause && self.AppearEffect.time == 0)
        {
            self.VisibleEffect.setStartDuration(0, self.visible_time);
            self.VisibleEffect.restart();
            self.VisibleEffect.on_effect_end = (context) => 
            {
                self.is_visible_end = true;
                self.VisibleEffect.on_effect_end = nil;
            };
        }
    }
}

module GTAutoProjectComponent::GTAutoMenu::GTAutoMenu
{
    attribute cb_vn;
    attribute cb_fn;

    method onRealize(manager)
    {
        self.setDisplayEmpty(false);
    }

    method setCategoryComponent(context, widgets)
    {
        if (widgets.isInstanceOf(menu::MWidget))
            widgets = [widgets];

        foreach (var w in widgets)
            self.Categories::ScrolledWindow::clip::space.appendChild(context, w);
    }

    method clearCategoryComponent(context)
    {
        self.Categories::ScrolledWindow::clip::space.clearChildren(context);
    }

    method getListBox()
    {
        return self.ListWindow::clip::ListBox;
    }

    method setDisplayEmpty(visible, text)
    {
        if (text != nil)
            self.ListWindow::Empty::TextFace.text = text;

        self.ListWindow::Empty.visible = visible;
    }
}

module GTAutoProjectComponent::GTAutoMenu::GTAutoMenu::ListWindow::clip::ListBox
{
    method onInitialize(context)
    {
        var adj = main::menu::MAdjustment();
        self.clip::VScrollbar.adjustment = adj;
        self.clip::VScrollArrow.adjustment = adj;
        self.v_adjustment = adj;
    }

    method onFocusEnter(context)
    {
        var w = self.getItemWidget(self.focus_index, context);
        var root = context.getRootWindow();
        root.setFocus(w);
        return EVENTRESULT_FILTER;
    }
}

module GTAutoProjectComponent::GTAutoMenu::Category
{
    attribute value;

    method setCategoryItemComponent(context, widgets)
    {
        if (widgets.isInstanceOf(menu::MWidget))
            widgets = [widgets];

        foreach (var w in widgets)
            self.VBox.appendChild(context, w);
    }

    method setText(text)
    {
        self.Label.text = text;
    }
}

module GTAutoProjectComponent::GTAutoMenu::CategoryItem
{
    attribute value;
    
    method setText(text)
    {
        self.Label.text = text;
        self.Label_i.text = text;
        self.Label_a.text = text;
    }
}