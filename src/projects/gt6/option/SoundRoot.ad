













module ROOT
{
    static sOpenMode;

    static sSliderValueColor;
    static sSliderRedColor = main::menu::MColorObject(1.0, 0.2, 0.2);
    static sSysBgmContext = Array(8);
    static sPreviewingBGM;
    static sPreviewingSceneVolume;

    method open(context, open_mode)
    {
        if (open_mode != nil)
            sOpenMode = open_mode;

        SettingFrame.appear();
        SequenceUtil::pushPage(context, self);
    }

    method close(context)
    {
        var delay_time = SettingFrame.hide();

        SoundUtil::UpdateBGMVolume();
        SoundUtil::BGMPlayGroup(SoundUtil::SCENE_MENU, "menu", SoundUtil::REPEAT_GROUP, 1.0, 1.0);

        SequenceUtil::popPage(context, self, delay_time);
    }

    method reflect(context)
    {
        var option = main::GAME_STATUS.user_profile.option;

        SettingFrame::Pane::ScrolledBody::clip::space::MenuBGM.slider.index = option.menu_bgm_volume;
        SettingFrame::Pane::ScrolledBody::clip::space::MenuSE.slider.index = option.menu_se_volume;

        SettingFrame::Pane::ScrolledBody::clip::space::RaceBGM.slider.index = option.race_bgm_volume;
        SettingFrame::Pane::ScrolledBody::clip::space::RaceSE.slider.index = option.race_se_volume;

        SettingFrame::Pane::ScrolledBody::clip::space::ReplayBGM.slider.index = option.replay_bgm_volume;
        SettingFrame::Pane::ScrolledBody::clip::space::ReplaySE.slider.index = option.replay_se_volume;

        SettingFrame::Pane::ScrolledBody::clip::space::UserBGM.slider.index = option.user_bgm_volume;

        SettingFrame::Pane::ScrolledBody::clip::space::UserBGMMenu::vbox::Enable.active = option.sysbgm_use[0];
        SettingFrame::Pane::ScrolledBody::clip::space::UserBGMMenu::vbox::Enable.insensitive = !option.sysbgm_valid[0];

        SettingFrame::Pane::ScrolledBody::clip::space::UserBGMRace::vbox::Enable.active = option.sysbgm_use[1];
        SettingFrame::Pane::ScrolledBody::clip::space::UserBGMRace::vbox::Enable.insensitive = !option.sysbgm_valid[1];

        SettingFrame::Pane::ScrolledBody::clip::space::UserBGMSlideshow::vbox::Enable.active = option.sysbgm_use[2];
        SettingFrame::Pane::ScrolledBody::clip::space::UserBGMSlideshow::vbox::Enable.insensitive = !option.sysbgm_valid[2];

        for (var i = 0; i < 8; i++)
            sSysBgmContext[i] = option.sysbgm_valid[i] ? option.sysbgm_context[i] : nil;

        SettingFrame::Pane::ScrolledBody::clip::space::DynamicRange.OptionMenu.setIndex(context, option.sound_dynamic_range);
        SettingFrame::Pane::ScrolledBody::clip::space::SpeakerLayout.OptionMenu.insensitive = true;

        var index = 0;
        var max_ch = pdiext::MSystemConfiguration::GetSystemAudioAvailableOutputChannels();
        if (max_ch >= 6)
        {
            var map = [
                SpeakerBits::L_R : 0,
                SpeakerBits::L_R | SpeakerBits::LS_RS : 1,
                SpeakerBits::L_R | SpeakerBits::C | SpeakerBits::LS_RS : 2,
                SpeakerBits::L_R | SpeakerBits::C | SpeakerBits::LS_RS | SpeakerBits::CB : 3,
                SpeakerBits::L_R | SpeakerBits::C | SpeakerBits::LS_RS | SpeakerBits::LB_RB : 4,
            ];

            var pair = map.find(option.speaker_bits & (SpeakerBits::L_R | SpeakerBits::C | SpeakerBits::LS_RS | SpeakerBits::CB | SpeakerBits::LB_RB));
            if (pair != nil)
                index = pair[1];

            SettingFrame::Pane::ScrolledBody::clip::space::SpeakerLayout.OptionMenu.insensitive = false;
        }

        SettingFrame::Pane::ScrolledBody::clip::space::SpeakerLayout.OptionMenu.setIndex(context, index);
        SettingFrame::Pane::ScrolledBody::clip::space::RaceSoundPosition::OptionMenu.setIndex(context, option.race_sound_position + 1);
    }

    method apply(context)
    {
        var option = main::GAME_STATUS.user_profile.option;

        option.menu_bgm_volume = SettingFrame::Pane::ScrolledBody::clip::space::MenuBGM.slider.index;
        option.menu_se_volume = SettingFrame::Pane::ScrolledBody::clip::space::MenuSE.slider.index;

        option.race_bgm_volume = SettingFrame::Pane::ScrolledBody::clip::space::RaceBGM.slider.index;
        option.race_se_volume = SettingFrame::Pane::ScrolledBody::clip::space::RaceSE.slider.index;

        option.replay_bgm_volume = SettingFrame::Pane::ScrolledBody::clip::space::ReplayBGM.slider.index;
        option.replay_se_volume = SettingFrame::Pane::ScrolledBody::clip::space::ReplaySE.slider.index;

        option.user_bgm_volume = SettingFrame::Pane::ScrolledBody::clip::space::UserBGM.slider.index;

        option.sysbgm_use[0] = SettingFrame::Pane::ScrolledBody::clip::space::UserBGMMenu::vbox::Enable.active;
        option.sysbgm_use[1] = SettingFrame::Pane::ScrolledBody::clip::space::UserBGMRace::vbox::Enable.active;
        option.sysbgm_use[2] = SettingFrame::Pane::ScrolledBody::clip::space::UserBGMSlideshow::vbox::Enable.active;

        for (var i = 0; i < 8; i++)
        {
            option.sysbgm_valid[i] = sSysBgmContext[i] != nil;
            if (sSysBgmContext[i] != nil)
                option.sysbgm_context[i] = sSysBgmContext[i];
        }

        option.sound_dynamic_range = SettingFrame::Pane::ScrolledBody::clip::space::DynamicRange.OptionMenu.index;

        if (!SettingFrame::Pane::ScrolledBody::clip::space::SpeakerLayout.OptionMenu.insensitive)
        {
            var list = [
                SpeakerBits::L_R,
                SpeakerBits::L_R | SpeakerBits::LS_RS | SpeakerBits::LFE,
                SpeakerBits::L_R | SpeakerBits::C | SpeakerBits::LS_RS | SpeakerBits::LFE,
                SpeakerBits::L_R | SpeakerBits::C | SpeakerBits::LS_RS | SpeakerBits::CB | SpeakerBits::LFE,
                SpeakerBits::L_R | SpeakerBits::C | SpeakerBits::LS_RS | SpeakerBits::LB_RB | SpeakerBits::LFE,
            ];

            option.speaker_bits = list[SettingFrame::Pane::ScrolledBody::clip::space::SpeakerLayout.OptionMenu.index];
            option.speaker_layout = SettingFrame::Pane::ScrolledBody::clip::space::SpeakerLayout.OptionMenu.index;
            option.bgm_upmix_enable = 1;
        }

        option.race_sound_position = SettingFrame::Pane::ScrolledBody::clip::space::RaceSoundPosition.OptionMenu.index - 1;
        option.apply();
    }

    function on_slider_value_changed(context, slider)
    {
        slider.sliderValueChanged(context);
        
        var scale = 1.0;
        var value = slider.index * scale;
        slider["label"].color = value > 100 ? sSliderRedColor : sSliderValueColor;
        return value;
    }

    function on_slider_decided(context, index, slider)
    {
        var scale = 1.0;
        var value = slider.index * scale;
        slider["label"].color = value > 100 ? sSliderRedColor : sSliderValueColor;
    }

    method onRealize(manager)
    {
        sSliderValueColor = SettingFrame::Pane::ScrolledBody::clip::space::MenuBGM::slider::label.color;
    }

    method onInitialize(context)
    {
        if (gDirectApplyMode)
            SettingFrame::Pane::Foot.visible = false;

        var option = main::GAME_STATUS.user_profile.option;

        reflect(context);
        sPreviewingBGM = "menu";
        sPreviewingSceneVolume = option.menu_bgm_volume;

        var audioout_ch = 0;
        var audio_format = "-";

        var max_ch = pdiext::MSystemConfiguration::GetSystemAudioAvailableOutputChannels();
        var states = pdiext::MSystemConfiguration::GetSystemAudioOutputState();

        if (states.size > 0)
        {
            var map = states[0];
            var ch_map = [
                2 : "2",
                6 : "5.1",
                8 : "7.1",
            ] ;

            audioout_ch = map["channel"];

            audio_format = "%s %s %s %s %s".format(context.translate(ROOT, "Audio", map["encoder"]),
                ch_map[audioout_ch],
                context.translate(ROOT, "Audio", "CHANNEL_CH"),
                map["fs"],
                context.translate(ROOT, "Audio", "KHZ")
            );            
        }

        SettingFrame::Pane::ScrolledBody::clip::space::CurrentAudioOut.Text.label.text = audio_format;

        var off_text = context.translate(ROOT, "Off");

        var sliders = [
            SettingFrame::Pane::ScrolledBody::clip::space::MenuBGM.slider,
            SettingFrame::Pane::ScrolledBody::clip::space::MenuSE.slider,
            SettingFrame::Pane::ScrolledBody::clip::space::RaceBGM.slider,
            SettingFrame::Pane::ScrolledBody::clip::space::RaceSE.slider,
            SettingFrame::Pane::ScrolledBody::clip::space::ReplayBGM.slider,
            SettingFrame::Pane::ScrolledBody::clip::space::ReplaySE.slider,
            SettingFrame::Pane::ScrolledBody::clip::space::UserBGM.slider,
        ];

        foreach (var w in sliders)
        {
            w.decide_callback = on_slider_decided;
            w.zero_text = off_text;
            w.setup(context);
            on_slider_decided(context, nil, w);
        }

        var opt = SettingFrame::Pane::ScrolledBody::clip::space::SpeakerLayout.OptionMenu;

        var list;
        if (max_ch < 6)
            list = [0, 1, 1, 1, 1];
        else if (max_ch < 8)
            list = [0, 0, 0, 1, 1];
        else
            list = [0, 0, 0, 0, 0];

        opt.setInsensitive(context, list);

        PROJECT.SetWidgetEnable(false, SettingFrame::Pane::ScrolledBody::clip::space.getChildList());

        var focus_w;
        switch (sOpenMode)
        {
            case "SND_volume":
                SettingFrame::Pane::Head::label.text = context.translate(OptionRoot, "SND_volume");
                PROJECT.SetWidgetEnable(true, [
                    SettingFrame::Pane::ScrolledBody::clip::space::MenuBGM,
                    SettingFrame::Pane::ScrolledBody::clip::space::MenuSE,
                    SettingFrame::Pane::ScrolledBody::clip::space::RaceBGM,
                    SettingFrame::Pane::ScrolledBody::clip::space::RaceSE,
                    SettingFrame::Pane::ScrolledBody::clip::space::ReplayBGM,
                    SettingFrame::Pane::ScrolledBody::clip::space::ReplaySE,
                    SettingFrame::Pane::ScrolledBody::clip::space::UserBGM,
                    SettingFrame::Pane::ScrolledBody::clip::space::RaceSoundPosition,
                ]);
                focus_w = SettingFrame::Pane::ScrolledBody::clip::space::MenuBGM::slider;
                break;

            case "SND_output":
                SettingFrame::Pane::Head::label.text = context.translate(OptionRoot, "SND_output");
                PROJECT.SetWidgetEnable(true, [
                    SettingFrame::Pane::ScrolledBody::clip::space::CurrentAudioOut,
                    SettingFrame::Pane::ScrolledBody::clip::space::DynamicRange,
                    SettingFrame::Pane::ScrolledBody::clip::space::SpeakerLayout
                ]);
                focus_w = SettingFrame::Pane::ScrolledBody::clip::space::DynamicRange::OptionMenu;
                break;    

            case "SND_user_bgm":
                SettingFrame::Pane::Head::label.text = context.translate(OptionRoot, "SND_user_bgm");
                PROJECT.SetWidgetEnable(true, [
                    SettingFrame::Pane::ScrolledBody::clip::space::UserBGMMenu,
                    SettingFrame::Pane::ScrolledBody::clip::space::UserBGMRace,
                    SettingFrame::Pane::ScrolledBody::clip::space::UserBGMSlideshow
                ]);
                focus_w = SettingFrame::Pane::ScrolledBody::clip::space::UserBGMMenu::vbox::Open;
                break;    
        }

        SoundUtil::SetSystemBGMEnable(context, true);
        SettingFrame.adjust_scrolled_body();
        ROOT.setFocus(focus_w);
        SettingFrame::Pane::ScrolledBody::clip::space.parent.warp(focus_w);
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        if (gDirectApplyMode)
        {
            ROOT.apply();
            ROOT.close(context);
        }
        else
            ROOT.setFocus(SettingFrame::Pane::Foot::Cancel);

        return EVENTRESULT_FILTER;
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::DynamicRange::OptionMenu
    {
        method onPopupClosed(context)
        {
            var option = main::GAME_STATUS.user_profile.option;

            if (option.sound_dynamic_range == 0 && SettingFrame::Pane::ScrolledBody::clip::space::DynamicRange::OptionMenu.index > 0)
            {
                context.pushEvent(menu::MFunctionEvent(
                    DialogUtil::openConfirmDialog, context, DialogUtil::OK, context.translate(ROOT, "SoundDRCAttention")
                ));
            }
        }
    }

    // Menu BGM Sliders
    module SettingFrame::Pane::ScrolledBody::clip::space::MenuBGM::slider
    {
        method onValueChanged(context)
        {
            var value = on_slider_value_changed(context, self);
            if (self.popup)
            {
                SoundUtil::PreviewBGMVolume(value, SettingFrame::Pane::ScrolledBody::clip::space::UserBGM::slider.index);
                sPreviewingSceneVolume = value;
            }
        }

        method onPopupOpen(context)
        {
            var group = "menu";
            sPreviewingBGM = group;
            SoundUtil::BGMPlayGroup(SoundUtil::SCENE_MENU, group, SoundUtil::REPEAT_GROUP, 0.5, 0.5);

            onValueChanged(context);
        }

        method onPopupClosed(context)
        {
            SoundUtil::PreviewBGMVolume(self.index, SettingFrame::Pane::ScrolledBody::clip::space::UserBGM::slider.index);
            sPreviewingSceneVolume = self.index;
            __prototype__::onPopupClosed(context);
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::MenuSE::slider
    {
        method onValueChanged(context)
        {
            on_slider_value_changed(context, self);
        }
    }

    // Race BGM Sliders
    module SettingFrame::Pane::ScrolledBody::clip::space::RaceBGM::slider
    {
        method onValueChanged(context)
        {
            var value = on_slider_value_changed(context, self);
            if (self.popup)
            {
                SoundUtil::PreviewBGMVolume(value, SettingFrame::Pane::ScrolledBody::clip::space::UserBGM::slider.index);
                sPreviewingSceneVolume = value;
            }
        }

        method onPopupOpen(context)
        {
            var group = "racing";
            sPreviewingBGM = group;
            SoundUtil::BGMPlayGroup(SoundUtil::SCENE_RACE, group, SoundUtil::REPEAT_GROUP, 0.5, 0.5);

            onValueChanged(context);
        }

        method onPopupClosed(context)
        {
            SoundUtil::PreviewBGMVolume(self.index, SettingFrame::Pane::ScrolledBody::clip::space::UserBGM::slider.index);
            sPreviewingSceneVolume = self.index;
            __prototype__::onPopupClosed(context);
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::RaceSE::slider
    {
        method onValueChanged(context)
        {
            on_slider_value_changed(context, self);
        }
    }

    // Replay BGM Sliders
    module SettingFrame::Pane::ScrolledBody::clip::space::ReplayBGM::slider
    {
        method onValueChanged(context)
        {
            var value = on_slider_value_changed(context, self);
            if (self.popup)
            {
                SoundUtil::PreviewBGMVolume(value, SettingFrame::Pane::ScrolledBody::clip::space::UserBGM::slider.index);
                sPreviewingSceneVolume = value;
            }
        }

        method onPopupOpen(context)
        {
            var group = "racing";
            sPreviewingBGM = group;
            SoundUtil::BGMPlayGroup(SoundUtil::SCENE_REPLAY, group, SoundUtil::REPEAT_GROUP, 0.5, 0.5);

            onValueChanged(context);
        }

        method onPopupClosed(context)
        {
            SoundUtil::PreviewBGMVolume(self.index, SettingFrame::Pane::ScrolledBody::clip::space::UserBGM::slider.index);
            sPreviewingSceneVolume = self.index;
            __prototype__::onPopupClosed(context);
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::ReplaySE::slider
    {
        method onValueChanged(context)
        {
            on_slider_value_changed(context, self);
        }
    }

    // User BGM Slider
    module SettingFrame::Pane::ScrolledBody::clip::space::UserBGM::slider
    {
        function preview_user_bgm_volume(user_bgm_volume_percent)
        {
            if (user_bgm_volume_percent == nil)
                user_bgm_volume_percent = SettingFrame::Pane::ScrolledBody::clip::space::UserBGM::slider.index;
                
            SoundUtil::PreviewBGMVolume(sPreviewingSceneVolume, user_bgm_volume_percent);
        }

        method onValueChanged(context)
        {
            if (self.popup)
            {
                var user_bgm_volume_percent = on_slider_value_changed(context, self);
                preview_user_bgm_volume(user_bgm_volume_percent);
            }
        }

        method onPopupOpen(context)
        {
            if (!SoundUtil::CheckSystemBGMPlay(sPreviewingBGM))
            {
                var scene = nil;
                var group = nil;

                if (SoundUtil::CheckSystemBGMPlay("racing"))
                {
                    scene = SoundUtil::SCENE_RACE;
                    group = "racing";
                }
                else if (SoundUtil::CheckSystemBGMPlay("menu"))
                {
                    scene = SoundUtil::SCENE_MENU;
                    group = "menu";
                }

                if (group != nil)
                {
                    sPreviewingBGM = group;
                    SoundUtil::BGMPlayGroup(scene, group, SoundUtil::REPEAT_GROUP, 0.5, 0.5);
                }
            }

            onValueChanged(context);
        }

        method onPopupClosed(context)
        {
            preview_user_bgm_volume(nil);
            __prototype__::onPopupClosed(context);
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::UserBGMMenu::vbox::Open
    {
        function onActivate(context)
        {
            main::sound.play("ok");
            var group = "menu";
            var sysbgm_index = SoundUtil::SystemBGMGroupToIndex(group);
            var bytedata = SoundUtil::OpenSystemBGMDialog(context);

            if (bytedata != nil)
            {
                sSysBgmContext[sysbgm_index] = bytedata;
                var checkbox = SettingFrame::Pane::ScrolledBody::clip::space::UserBGMMenu::vbox::Enable;
                checkbox.insensitive = false;
            }

            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::UserBGMRace::vbox::Open
    {
        function onActivate(context)
        {
            main::sound.play("ok");
            var group = "racing";
            var sysbgm_index = SoundUtil::SystemBGMGroupToIndex(group);
            var bytedata = SoundUtil::OpenSystemBGMDialog(context);

            if (bytedata != nil)
            {
                sSysBgmContext[sysbgm_index] = bytedata;
                var checkbox = SettingFrame::Pane::ScrolledBody::clip::space::UserBGMRace::vbox::Enable;
                checkbox.insensitive = false;
            }

            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::UserBGMSlideshow::vbox::Open
    {
        function onActivate(context)
        {
            main::sound.play("ok");
            var group = "slideshow";
            var sysbgm_index = SoundUtil::SystemBGMGroupToIndex(group);
            var bytedata = SoundUtil::OpenSystemBGMDialog(context);

            if (bytedata != nil)
            {
                sSysBgmContext[sysbgm_index] = bytedata;
                var checkbox = SettingFrame::Pane::ScrolledBody::clip::space::UserBGMSlideshow::vbox::Enable;
                checkbox.insensitive = false;
            }

            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::Foot::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.apply();
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::Foot::Cancel
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }
}