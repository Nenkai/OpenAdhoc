













module ROOT
{
    module MODE
    {
        static ALL = 0x00;
        static ONLINE = 0x01;
        static NO_KART_ONLY = 0x02;
        static PASS_COURSE_LIST = 0x80;
    }

    attribute modal_page;
    attribute closed;
    attribute disable_cnt = 0;
    attribute mode;
    attribute result;
    attribute strategy;
    attribute passedCourseList;
    attribute passedCourseMakerList;

    hidden.is_enable = false;

    method open(context, mode, courseList, coursemakerList)
    {
        self.mode = mode;
        self.closed = false;
        self.passedCourseList = courseList;
        self.passedCourseMakerList = coursemakerList;
        self.modal_page = main::SequenceUtil::ModalPage(context, ROOT);
        self.modal_page.open();
        
        var res = self.result;
        self.result = nil;
        return res;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;
        
        self.OpenActor.on_effect_end = nil;

        PageUtil::visibleUnderPages(context, self);

        ROOT.setFocus(nil);

        var actor = self.CloseActor;
        actor.forward();
        actor.restart();

        if (self.modal_page != nil)
        {
            var delay_time = actor.Fade.total_time;
            self.modal_page.close(delay_time);
            self.modal_page = nil;
        }
    }

    method abort(context)
    {
        if (self.closed == nil || self.closed)
            return;

        self.closed = true;
        
        self.OpenActor.on_effect_end = nil;

        PageUtil::visibleUnderPages(context, self);

        if (self.modal_page != nil)
        {
            self.modal_page.close();
            self.modal_page = nil;
        }
    }

    class Strategy 
    {
        attribute column_widget;

        function createCategoryItems(context)
        {

        }

        function deleteCategoryItems(context)
        {

        }

        method updateList(context)
        {

        }

        method setButtonHelp(context)
        {

        }

        method onOutViewMode(context)
        {

        }

        method finalize()
        {

        }
    }

    class CourseStrategy : Strategy
    {
        attribute category;

        method __init__()
        {
            self.column_widget = ListMenu::ListWindow::ColumnList::Course;
        }

        method updateList(context, category)
        {
            var where_list = [];
            var params = [];
            var course_list;

            if (ROOT.mode == ROOT::MODE::PASS_COURSE_LIST)
            {
                if (category == nil)
                    course_list = ROOT.passedCourseList;
                else
                {
                    course_list = [];
                    foreach (var course in ROOT.passedCourseList)
                    {
                        if (course.CourseCategory == category)
                            course_list.push(course);
                    }
                }
            }
            else
            {
                if (ROOT.mode & ROOT::MODE::ONLINE)
                    where_list.push("Online=1");

                if (ROOT.mode & ROOT::MODE::NO_KART_ONLY)
                    where_list.push("KartOnly=0");

                if (category != nil)
                {
                    where_list.push("CourseCategory=?");
                    params.push(category);
                }

                var where_clause = "WHERE " + where_list.join(" AND ");
                course_list = SPECDB.queryList("SELECT ID, Name, Logo, Reverse, ChangeWeather, ChangeTime, Length, Elevation, Straight, Corner FROM COURSE %{where_clause} ORDER BY Length", params);
            }

            if (course_list == nil)
                course_list = [];

            ListMenu::ListWindow.setList(context, course_list, hidden::CourseItem);
        }

        method setButtonHelpOnList(context)
        {
            ButtonHelpGT6.setButtonSet(context, "onCourseList");
        }
    }

    class CourseMakerStrategy : Strategy
    {
        attribute category;

        method __init__()
        {
            self.column_widget = ListMenu::ListWindow::ColumnList::Course;
        }

        method updateList(context, category)
        {
            var where_list = [];
            var params = [];
            var course_list;

            if (ROOT.mode & ROOT::MODE::PASS_COURSE_LIST)
            {
                course_list = ROOT.passedCourseMakerList;
            }

            if (course_list == nil)
                course_list = [];

            ListMenu::ListWindow.setList(context, course_list, hidden::CourseItem2);
        }

        method setButtonHelpOnList(context)
        {
            ButtonHelpGT6.setButtonSet(context, "onCourseList");
        }
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }

    method onInitialize(context)
    {
        ContextMain.disableInput();

        var actor = self.OpenActor;
        actor.forward();
        actor.restart();

        actor.on_effect_end = (context) => 
        {
            if (self.closed)
                return;

            actor.on_effect_end = nil;
            PageUtil::invisibleUnderPages(context, self);
            ContextMain.enableInput();
        };

        self.CloseActor.stop();

        ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::CourseMaker.visible = 
            self.passedCourseMakerList != nil && !self.passedCourseMakerList.empty();

        ListMenu::Menus.shiftMainMenu(context, 'Main_TopMenu', true);

        ButtonHelpGT6.addButtonSet(context, "onMenus", [
            ["Enter"],
            ["Close"]
        ]);

        ButtonHelpGT6.addButtonSet(context, "onCourseList", [
            ["Enter"],
            ["Back"]
        ]);

        ButtonHelpGT6.setButtonSet(context, "onMenus");
        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        PageUtil::visibleUnderPages(context, self);

        if (ROOT.strategy != nil)
        {
            ROOT.strategy.finalize();
            ROOT.strategy = nil;
        }

        self.closed = nil;
        self.disable_cnt = nil;
        self.mode = nil;
        self.strategy = nil;
        self.passedCourseList = nil;
        self.passedCourseMakerList = nil;

        ContextMain.enableInput();
        return EVENTRESULT_FILTER;
    }

    method disableInput(context)
    {
        if (self.disable_cnt == nil)
            self.disable_cnt = 0;

        if (self.disable_cnt == 0)
        {
            context.event_mask = 5;
            context.disableInput();
            context.filterKeyEvent();
        }

        self.disable_cnt++;
    }

    method enableInput(context)
    {
        if (self.disable_cnt == nil)
            self.disable_cnt = 0;

        self.disable_cnt--;
        if (disable_cnt < 0)
            disable_cnt = 0;

        if (disable_cnt == 0)
        {
            context.event_mask = 5;
            context.enableInput();
        }
    }

    module ImportMenuCommons
    {
        attribute focus_;
        attribute active_;

        method setActiveMenu(a, w)
        {
            if (w != nil)
            {
                ListMenu::ListWindow::Head::Label.text = w.Label.text;
            }

            if (self.active_ == w)
                return false;

            if (self.active_ != nil)
            {
                self.active_.active = false;
                self.active_ = nil;
            }

            if (w != nil)
            {
                w.active = a;
                self.active_ = w;
                ListMenu::ListWindow::Head::Label.text = w.Label.text;
            }

            return true;
        }

        method _on_focus_CB(context)
        {
            var focus_w;
            if (self.active_ != nil)
            {
                focus_w = self.active_;
            }
            else if (self.defined('default_focus_') && self.default_focus_ != nil)
            {
                focus_w = self.default_focus_;
            }

            if (focus_w != nil)
            {
                if (self["ScrolledWindow"] != nil)
                    self.ScrolledWindow::clip.warp(focus_w);

                ROOT.setFocus(focus_w);

                if (focus_w.defined('onFocus_CB'))
                    focus_w['onFocus_CB'](context);
                
                if (self.defined('onFocus_CB'))
                    self['onFocus_CB'](context);
            }
        }

        method _leave_focus_CB(context)
        {
            if (self.defined('leaveFocus_CB'))
                self['leaveFocus_CB'](context);
        }
    }

    module ListMenu::Menus
    {
        attribute main_menu_;
        attribute sub_menu_;

        method onKeyPress(context, event)
        {
            if (event.keysym == CELL_PAD_CTRL_L3_RIGHT)
            {
                if (ListMenu::ListWindow.inViewMode(context, false))
                {
                    sound.play("cursor");
                    return EVENTRESULT_FILTER;
                }
            }

            return EVENTRESULT_CONTINUE;
        }

        method shiftMainMenu(context, main_menu, warp)
        {
            ROOT.disableInput(context);

            var sub_menu_w = self.sub_menu_ != nil ? ListMenu::Menus[self.sub_menu_] : nil;
            var main_menu_w = ListMenu::Menus[main_menu];
            if (main_menu_w != nil)
            {
                main_menu_w.x = 0.0;
                main_menu_w.visible = true;

                if (main_menu_w.defined("init_CB"))
                    main_menu_w.init_CB(context);
            }

            if (sub_menu_w != nil)
            {
                if (sub_menu_w.defined("_leave_focus_CB"))
                    sub_menu_w._leave_focus_CB(context);
            }

            if (main_menu_w != nil)
            {
                if (main_menu_w.defined("_on_focus_CB"))
                    main_menu_w._on_focus_CB(context);
            }

            self.MoveActor.reverse = false;
            self.MoveActor.start();

            self.MoveActor.on_effect_end = (context) => 
            {
                if (sub_menu_w != nil)
                    sub_menu_w.visible = false;

                ListMenu::Menus::MoveActor.on_effect_end = nil;

                ROOT.enableInput(context);
            };

            if (warp == true)
                self.MoveActor.warp();

            self.main_menu_ = main_menu;
            self.sub_menu_ = nil;
        }

        method shiftSubMenu(context, sub_menu, warp)
        {
            ROOT.disableInput(context);

            var main_menu_w = self.main_menu_ != nil ? ListMenu::Menus[self.main_menu_] : nil;
            var sub_menu_w = ListMenu::Menus[sub_menu];
            if (sub_menu_w != nil)
            {
                sub_menu_w.x = 480.0;
                sub_menu_w.visible = true;

                if (sub_menu_w.defined("init_CB"))
                    sub_menu_w.init_CB(context);

                yield;
            }

            if (main_menu_w != nil)
            {
                if (main_menu_w.defined("_leave_focus_CB"))
                main_menu_w._leave_focus_CB(context);
            }

            if (sub_menu_w != nil)
            {
                if (sub_menu_w.defined("_on_focus_CB"))
                    sub_menu_w._on_focus_CB(context);
            }

            self.MoveActor.reverse = true;
            self.MoveActor.start();

            self.MoveActor.on_effect_end = (context) => 
            {
                if (main_menu_w != nil)
                    main_menu_w.visible = false;

                ListMenu::Menus::MoveActor.on_effect_end = nil;

                ROOT.enableInput(context);
            };

            if (warp == true)
                self.MoveActor.warp();

            self.sub_menu_ = sub_menu;
        }

        method onInitialize(context)
        {
            for (var w = self.first; w != nil; w = w.next)
                w.visible = false;

            self.insensitive = false;
        }
    }

    module ListMenu::Menus::Main_TopMenu
    {
        import ImportMenuCommons::*;

        attribute default_focus_ = ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Course::VBox::All;

        method onFinalize(context)
        {
            self.setActiveMenu(false);
        }
    }

    module ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Course::VBox
    {
        attribute strategy = CourseStrategy();

        method onInitialize(context)
        {
            
        }

        method onFinalize(context)
        {
            
        }

        method updateCourseList(context, category)
        {
            var listbox = ListMenu.getListBox();
            listbox.visible = false;
            ROOT.strategy = self.strategy;
            ROOT.strategy.updateList(context, category);
            listbox.visible = true;
        }

        module All
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
                if (res)
                    updateCourseList(context);
            }

            method onActivate(context)
            {
                sound.play("ok");
                self.onFocus_CB(context);
                return EVENTRESULT_FILTER;
            }
        }

        module Circuit
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
                if (res)
                    updateCourseList(context, "circuit");
            }

            method onActivate(context)
            {
                sound.play("ok");
                self.onFocus_CB(context);
                return EVENTRESULT_FILTER;
            }
        }

        module Original
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
                if (res)
                    updateCourseList(context, "original");
            }

            method onActivate(context)
            {
                sound.play("ok");
                self.onFocus_CB(context);
                return EVENTRESULT_FILTER;
            }
        }

        module City
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
                if (res)
                    updateCourseList(context, "city");
            }

            method onActivate(context)
            {
                sound.play("ok");
                self.onFocus_CB(context);
                return EVENTRESULT_FILTER;
            }
        }

        module SnowDirt
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
                if (res)
                    updateCourseList(context, "snow_dirt");
            }

            method onActivate(context)
            {
                sound.play("ok");
                self.onFocus_CB(context);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::CourseMaker::VBox
    {
        attribute strategy = CourseMakerStrategy();

        method onInitialize(context)
        {
            
        }

        method onFinalize(context)
        {
            
        }

        method updateCourseList(context, category)
        {
            var listbox = ListMenu.getListBox();
            listbox.visible = false;
            ROOT.strategy = self.strategy;
            ROOT.strategy.updateList(context, category);
            listbox.visible = true;
        }

        module All
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
                if (res)
                    updateCourseList(context);
            }

            method onActivate(context)
            {
                sound.play("ok");
                self.onFocus_CB(context);
                return EVENTRESULT_FILTER;
            }
        }
    }
    
    module hidden::CourseItem
    {
        attribute value;

        method onInitialize(context)
        {
            self.Name::Label.text = "";
            self.Type::Label.text = "";
            self.Length::Label.text = "";
            self.Elevation::Label.text = "";
            self.Straight::Label.text = "";
            self.Corner::Label.text = "";
        }

        method on_activate(context)
        {
            main::sound.play("ok");

            var info = self.value;

            if (ROOT.mode == ROOT::MODE::PASS_COURSE_LIST) 
                ROOT.result = info;
            else
                ROOT.result = info.ID;

            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method setInfo(context, info)
        {
            self.value = info;
            self.Logo.image_path = "piece/gt6/course_logo_M/%s.img".format(info.Logo);
            self.Name::Label.text = info.CourseNameShort;

            var list = [];
            if (info.Reverse)
                list.push(manager.translate("CourseData", "direction_reverse"));
            else
                list.push(manager.translate("CourseData", "direction_normal"));

            if (info.ChangeWeather)
                list.push(manager.translate("CourseData", "track_change_weather"));

            if (info.ChangeTime)
                list.push(manager.translate("CourseData", "track_change_time"));

            self.Type::Label.text = list.join(" / ");
            self.Length::Label.text = pdiext::MUnit::GetCourseLengthString(info.Length, true);
            self.Elevation::Label.text = pdiext::MUnit::GetCourseLengthString(info.Elevation, true);
            self.Straight::Label.text = pdiext::MUnit::GetCourseLengthString(info.Straight, true);
            self.Corner::Label.text = info.Corner;
        }
    }

    module hidden::CourseItem2
    {
        attribute value;

        method onInitialize(context)
        {
            self.Name::Label.text = "";
            self.Type::Label.text = "";
            self.Length::Label.text = "";
            self.Elevation::Label.text = "";
            self.Straight::Label.text = "";
            self.Corner::Label.text = "";
        }

        method on_activate(context)
        {
            main::sound.play("ok");

            var info = self.value;

            if (ROOT.mode == ROOT::MODE::PASS_COURSE_LIST) 
                ROOT.result = info;
            else
                ROOT.result = info.ID;

            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method setInfo(context, info)
        {
            self.value = info;
            var image_path = Photo.getPngImagePath(info.CourseMap);
            if (pdistd::Exist(image_path))
                self.Map.image_path = image_path;
            else
            {
                var image_face = self.Map;
                Photo.requestPngImage(info.CourseMap, (args) => 
                {
                    |var context, var request| = args;
                    if (request.isDone())
                        image_face.image_path = image_path;
                });
            }


            self.Logo.image_path = "piece/gt6/course_logo_M/%s.img".format(info.Logo);
            self.Name::Label.text = info.CourseNameShort;

            var list = [];
            if (info.Reverse)
                list.push(manager.translate("CourseData", "direction_reverse"));
            else
                list.push(manager.translate("CourseData", "direction_normal"));

            if (info.ChangeWeather)
                list.push(manager.translate("CourseData", "track_change_weather"));

            if (info.ChangeTime)
                list.push(manager.translate("CourseData", "track_change_time"));

            self.Type::Label.text = list.join(" / ");
            self.Length::Label.text = pdiext::MUnit::GetCourseLengthString(info.Length, true);
            self.Elevation::Label.text = pdiext::MUnit::GetCourseLengthString(info.Elevation, true);
            self.Straight::Label.text = pdiext::MUnit::GetCourseLengthString(info.Straight, true);
            self.Corner::Label.text = info.Corner;
        }
    }

    module ListMenu::ListWindow
    {
        module ITEM_STATE
        {
            static Blank = 1;
            static Selected = 2;
        }

        attribute data_list_;
        attribute item_state_list_;
        attribute prev_focus_w_;
        attribute prev_button_set_;
        attribute is_empty_;
        attribute in_view_;

        method setHeadListCount(context)
        {
            Head::ListCount.setText(self.data_list_.size);
        }

        method setList(context, data_list, template_item)
        {
            self.data_list_ = data_list;
            setHeadListCount(context);

            self.item_state_list_ = Array(self.data_list_.size);

            var listbox = ListMenu.getListBox();
            listbox.setItemTemplate(context, template_item);

            if (listbox.getItemCount() > 0)
            {
                listbox.setItemCount(0);
                listbox.postRedraw();
                context.wait();
            }

            if (data_list.size > 0)
            {
                listbox.setItemCount(data_list.size);
                listbox.focus_index = 0;
                self.is_empty_ = false;
                ListMenu.setDisplayEmpty(self.is_empty_);
            }
            else
            {
                self.is_empty_ = true;
                var nothing = "";
                ListMenu.setDisplayEmpty(self.is_empty_, nothing);
            }

            for (var w = ColumnList.first_window; w != nil; w = w.next_window)
                w.visible = false;

            ROOT.strategy.column_widget.visible = true;
        }

        method inViewMode(context, warp, no_move)
        {
            if (self.is_empty_ || self.in_view_)
                return false;

            var focus_w = ROOT.getFocusWidget();
            if (focus_w == nil)
                return false;

            self.prev_focus_w_ = focus_w;
            self.prev_button_set_ = ButtonHelpGT6.getCurrentButtonSetName();

            if (no_move == nil || !no_move)
            {
                ListMenu.MoveActor.reverse = false;
                ListMenu.MoveActor.start();

                if (warp == true)
                {
                    ListMenu.MoveActor.warp();
                }
            }
            
            ListMenu::Menus.insensitive = true;
            self.insensitive = false;

            clip::VScrollbar.display_policy = "automatic";
            ROOT.strategy.setButtonHelpOnList(context);
            ROOT.setFocus(ListMenu.getListBox());

            self.in_view_ = true;
            return true;
        }

        method outViewMode(context, warp)
        {
            if (!self.in_view_)
                return false;

            ListMenu.MoveActor.reverse = true;
            ListMenu.MoveActor.start();

            if (warp == true)
                ListMenu.MoveActor.warp();
            
            self.insensitive = true;
            ListMenu::Menus.insensitive = false;

            clip::VScrollbar.display_policy = "never";

            ROOT.setFocus(self.prev_focus_w_);
            self.prev_focus_w_ = nil;
            ButtonHelpGT6.setButtonSet(context, self.prev_button_set_);
            self.prev_button_set_ = nil;
            ROOT.strategy.onOutViewMode(context);

            self.in_view_ = false;
            return true;
        }

        method onInitialize(context)
        {
            self.is_empty_ = false;
            self.in_view_ = false;
            self.insensitive = true;

            ListMenu.MoveActor.forward();
            ListMenu.MoveActor.reset();

            clip::VScrollbar.display_policy = "never";
        }

        method onFinalize(context)
        {
            self.data_list_ = nil;
            self.item_state_list_ = nil;
            self.prev_focus_w_ = nil;
            self.prev_button_set_ = nil;
            self.is_empty_ = nil;
            self.in_view_ = nil;
        }

        method onKeyPress(context, event)
        {
            if (event.keysym == CELL_PAD_CTRL_L3_LEFT)
            {
                if (self.outViewMode(context))
                {
                    sound.play("cursor");
                    return EVENTRESULT_FILTER;
                }
            }
            else if (event.keysym == CELL_PAD_CTRL_SQUARE)
            {

            }

            return EVENTRESULT_CONTINUE;
        }

        method onActivate(context, event)
        {
            var listbox = ListMenu.getListBox();
            var item_index = listbox.focus_index;
            var item = listbox.getItemWidget(listbox.focus_index);
            var state = self.item_state_list_[item_index];

            if (state == ITEM_STATE::Blank)
            {
                sound.play("disable");
                return;
            }

            ROOT.setFocus(item);
            item.on_activate(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            if (self.outViewMode(context))
            {
                sound.play("cancel");
            }

            return EVENTRESULT_FILTER;
        }

        method getFocusedItem()
        {
            var listbox = ListMenu.getListBox();
            return listbox.getItemWidget(listbox.focus_index);
        }

        method updateVisibleListItems(context)
        {
            var listbox = ListMenu.getListBox();
            for (var i = 0; i < listbox.getItemCount(); i++)
            {
                var item = listbox.getItemWidget(i);
                if (item != nil)
                    updateListItem(context, item, i);
            }
        }

        method updateListItem(context, item, item_index)
        {
            if (item_index < self.item_state_list_.size)
            {
                var state = self.item_state_list_[item_index];
                if (state == ITEM_STATE::Blank)
                    item.isBlank(true);
                else
                    item.setInfo(context, self.data_list_[item_index]);
            }
        }

        module clip::ListBox
        {
            method onVisibleNotify(context, indexes)
            {
                foreach (var i in indexes)
                {
                    if (self.getItemVisible(i))
                    {
                        var w = self.getItemWidget(i);
                        if (w == nil)
                        {
                            var item = self.getItemWidget(i, context);
                            ListMenu::ListWindow.updateListItem(context, item, i);
                        }
                        else
                        {
                            self.setItemWidget(i, context, nil);
                        }
                    }
                }
            }
        }

        module Head::ListCount
        {
            method setText(a, b)
            {
                if (b == nil)
                {
                    ListCount::label_L.text = "";
                    ListCount::label_S.text = a;
                }
                else
                {
                    ListCount::label_L.text = a + "/";
                    ListCount::label_S.text = b;
                }
            }
        }
    }
}