module PROJECT::ROOT
{
	static manager = nil;
	static watcher = nil;
	static datasize = 0;
	static mode;
	static nextMode;
	static openDialog;

	function onCancel(context, item)
	{
		main::sound.play("cancel");
		exitMenu(context);
		return EVENTRESULT_FILTER;
	}

	function clean(context)
	{
		watcher.remove();
		manager = nil;
	}

	function exitMenu(context)
	{
		main::sound.play("cancel");
		clean();
	
		context.finish();
		context.transition = main::menu::MColorTransition();
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		main::game.next_menu_project = main::TopProject;
	}

	function onInitialize(context)
	{
		print "Warning onInitialize!";
	
		manager = main::menu::MMemoryCardManager("MODE_SAVE_GAME");
	
		watcher = main::menu::MScriptWatcher(context, Warning, "onCheck");
		watcher.interval = 5;
		watcher.append();
	
		datasize = manager.getNewFile().size;
	
		mode = 0;
		nextMode = 0;
		openDialog = nil;
	}

	function onCheck(context)
	{
		if (nextMode != 0)
		{
			mode = nextMode;
			switch (mode)
			{
				case 4:
					if (GameSave::saved)
					{
						openDialog = YesNoDialog;
						YesNoDialog::open(context, autoSaveEnable, exitMenu, StoreHouse::autosave_enable.value, 1);
						GameSave::saved = 0;
					}
					else
					{
						clean(context);
						context.startPage(AutoLoad);
					}
					break;

				case 1:
					openDialog = OKDialog;
					OKDialog::open(context, exitMenu, exitMenu, StoreHouse::warn_mc_not_connect.value.format(datasize));
					break;

				case 2:
					openDialog = YesNoDialog;
					YesNoDialog::open(context, saveNew, exitMenu, StoreHouse::warn_not_exist_gt4p_data.value, 1);
					break;

				case 3:
					openDialog = OKDialog;
					OKDialog::open(context, exitMenu, exitMenu, StoreHouse::warn_mc_lack_size.value.format(datasize));
					break;

				case 5:
					openDialog = OKDialog;
					OKDialog::open(context, exitMenu, exitMenu, StoreHouse::read_error.value);
					break;
			}
	
			nextMode = 0;
			return;
		}
	
		if (manager.isChanged() || mode == 0 || mode == 1)
		{
			var newMode = 1;
	
			if (manager.isConnect())
			{
				if (manager.isFormat())
				{
					var file = manager.getNewFile();
					var r = 0;

					for (var i = 0; i < 3; ++i)
					{
						r = file.isExist(manager);
						if (r >= 0)
							break;
					}
	
					if (r == 0)
					{
						newMode = 4;
					}
					else if (r == 1)
					{
						if ((manager.realFree - 1) < datasize)
							newMode = 3;
						else
							newMode = 2;
					}
					else
					{
						newMode = 1;
					}
				}
				else
					newMode = 2;
			}
			else
			{
				newMode = 1;
			}
	
			if (newMode != mode)
			{
				if (openDialog != nil)
					context.closePage(openDialog);
	
				nextMode = newMode;
			}
		}
	}

	function saveNew(context)
	{
		main::sound.play("cancel");
		clean(context);
		GameSave::bootCreateMode = 1;
		context.startPage(GameSave);
	}

	function autoSaveEnable(context)
	{
		var option = main::game.getOption();
		option.auto_save = true;
		main::game.setOption(option);
		exitMenu(context);
	}
}