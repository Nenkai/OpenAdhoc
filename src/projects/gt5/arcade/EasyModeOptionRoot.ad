















module EasyModeOptionRoot
{
    static sArgs;

    attribute modal_page_;
    attribute result_;
    attribute prev_focus_;
    attribute dp_;
    attribute cp_;

    method open(context, cp, dp)
    {
        sArgs = [cp, dp];
        self.result_ = false;

        ArcadeProject::ignorePadEvent(true);


        self.modal_page_ = SequenceUtil::ModalPage(context, EasyModeOptionRoot);
        self.modal_page_.open();

        var result = self.result_;
        self.result_ = nil;
        return result;
    }

    method close(context)
    {
        EasyModeOptionRoot.setFocus(nil);

        self.Pane::MoveEffect.reverse = true;
        self.Pane::MoveEffect.start();

        context.sync(0.2);

        EasyModeOptionRoot.setFocus(self.prev_focus_);
        self.prev_focus_ = nil;

        BalloonTip.reset_value();


        if (self.modal_page_ != nil)
        {
            self.modal_page_.close();
            self.modal_page_ = nil;
        }
    }

    method abort(context)
    {
        if (self.modal_page_ != nil)
        {
            self.close(context);
        }
    }

    method onInitialize(context)
    {
        self.prev_focus_ = EasyModeOptionRoot.getFocusWidget();

        |self.cp_, self.dp_| = sArgs;
        sArgs = nil;

        Pane::HBox::MT.visible = !self.cp_.isATOnly();

        var end_move = method(context) {
            self.insensitive = false;
            ArcadeProject::ignorePadEvent(false);

            context.pushEvent(main::menu::MFunctionEvent(EasyModeOptionRoot.setFocus, Pane::HBox::AT));
            self.Pane::MoveEffect.on_effect_end = nil;
        }
        self.Pane::MoveEffect.reverse = false;
        self.Pane::MoveEffect.on_effect_end = self.*end_move;
        self.Pane::MoveEffect.restart();
        self.insensitive = true;
    }

    method onActivate(context, event)
    {
        main::sound.play("next");

        if (event.widget == self.Pane::HBox::MT)
        {
            self.dp_.manual = true;
        }
        else if (event.widget == self.Pane::HBox::AT)
        {
            self.dp_.manual = false;
        }

        self.result_ = true;
        self.close(context);
        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        context.target_widget = nil;
        self.result_ = false;
        self.close(context);
        return EVENTRESULT_FILTER;
    }
}