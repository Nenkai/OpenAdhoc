module GTTV2ProjectUtil
{
    function isExistMovie(tv)
    {
        var movie_path = tv["movie_path"];
        if (nil != movie_path)
        {
            return pdistd::Exist(movie_path);
        }

        var bd_only = tv["bd_only"];
        if (!bd_only)
        {
            return Tv2.isExistMovie(tv["file_id"], bd_only);
        }
        else
        {
            if (Tv2.isExistMovie(tv["file_id"], bd_only))
            {
                return true;
            }
            else
            {
                var res = Tv2.isExistMovie(tv["file_id"], !bd_only);
                return res;
            }
        }
    }

    function getMoviePath(tv)
    {
        var movie_path = tv["movie_path"];
        if (nil != movie_path)
        {
            return movie_path;
        }

        var bd_only = tv["bd_only"];
        if (!bd_only)
        {
            return Tv2.getMoviePath(tv["file_id"], bd_only);
        }
        else
        {
            if (Tv2.isExistMovie(tv["file_id"], bd_only))
            {
                return Tv2.getMoviePath(tv["file_id"], bd_only);
            }
            else
            {
                return Tv2.getMoviePath(tv["file_id"], !bd_only);
            }
        }

        return Tv2.getMoviePath(tv["file_id"], tv["bd_only"]);
    }

    function getStatusText(context, root, tv, error)
    {
        var entitlement = hasEntitlement(context, tv);
        |var label, var price| = getPriceText(context, root, tv, entitlement);
        var pace = getPaceText(context, root, tv, error, entitlement, "");
        return [label, price, pace];
    }

    function getStatusTextLong(context, root, tv, error)
    {
        var entitlement = hasEntitlement(context, tv);
        |var label, var price| = getPriceText(context, root, tv, entitlement);
        var pace = getPaceText(context, root, tv, error, entitlement, "_LONG");
        if (entitlement && "" == pace)
        {
            pace = context.translate(context.getRootWindow(), "GTTV2", "DOWNLOADABLE_LONG");   
        }
        return [label, price, pace];
    }

    function getPriceText(context, root, tv, entitlement)
    {
        var sku = tv["sku"];
        if (nil == sku || "" == sku)
        {
            return ["", context.translate(root, "GTTV2", "FREE")];
        }

        if (nil == sPSNData)
        {
            return ["", context.translate(root, "GTTV2", "SUSPEND_SALE")];
        }

        var sku_info = sPSNData.sku_list[sku];
        var label = "";
        var price = "";
        if (nil != sku_info)
        {
            if (entitlement)
            {
                price = context.translate(root, "GTTV2", "BOUGHT");
            }
            else
            {
                label = context.translate(root, "GTTV2", "PRICE");
                price = sku_info["price_text"];
            }
        }
        else
        {
            price = context.translate(root, "GTTV2", "SUSPEND_SALE");
        }
        return [label, price];
    }

    function getPaceText(context, root, tv, error, entitlement, suffix)
    {
        if (nil == tv["tv_id"])
        {
            return "";
        }

        var text = "";
        if (!isExistMovie(tv))
        {
            var status = PaceUtil::Tv::getTVStatus(tv);
            if ("Download" == status)
            {
                text = "";
            }
            else
            {
                text = context.translate(root, "GTTV2", status.upcase()+suffix);
                if (nil != error && "PaceError" == status)
                {
                    text = context.translate(root, "GTTV2", "ERROR_FORMAT").build(text, "0x%x".format(error));
                }
            }
        }
        else
        {
            if (entitlement)
            {
                text = context.translate(root, "GTTV2", "PLAYABLE");
            }
            else
            {
                text = "";
            }
        }
        return text;
    }

    function setImage(context, image_id, image_face)
    {
        var image_path = Tv2.getImagePath(image_id);
        if (Tv2.isExistImage(image_id))
        {
            image_face.image_path = image_path;
        }
        else
        {
            Tv2.requestImage(image_id, function(args) {
                |var context, var request| = args;
                if (request.isDone())
                {
                    image_face.image_path = image_path;
                }
            })
        }
    }

    function setImageS(context, s_image_id, image_face)
    {
        var image_path = Tv2.getListImageSPath(s_image_id);
        if (Tv2.isExistListImageS(s_image_id))
        {
            image_face.image_path = image_path;
        }
        else
        {
            Tv2.requestListImageS(s_image_id, function(args) {
                |var context, var request| = args;
                if (request.isDone())
                {
                    image_face.image_path = image_path;
                }
            })
        }
    }

    function setImageM(context, m_image_id, image_face)
    {
        var image_path = Tv2.getListImageMPath(m_image_id);
        if (Tv2.isExistListImageM(m_image_id))
        {
            image_face.image_path = image_path;
        }
        else
        {
            Tv2.requestListImageM(m_image_id, function(args) {
                |var context, var request| = args;
                if (request.isDone())
                {
                    image_face.image_path = image_path;
                }
            })
        }
    }

    function getDurationText(context, duration_sec)
    {
        var root = context.getRootWindow();
        if (duration_sec > 3600)
        {
            var hour = duration_sec / 3600;
            var minute = duration_sec % 3600 / 60;
            var second = duration_sec % 60;
            return context.translate(root, "GTTV", "HOUR_MINUTE_SECOND_FORMAT").build(digit2(hour), digit2(minute), digit2(second));
        }
        else if (duration_sec > 60)
        {
            var minute = duration_sec / 60;
            var second = duration_sec % 60;
            return context.translate(root, "GTTV", "MINUTE_SECOND_FORMAT").build(digit2(minute), digit2(second));
        }
        else
        {
            return context.translate(root, "GTTV", "SECOND_FORMAT").build(digit2(duration_sec));
        }
    }

    function getSizeText(context, size_byte)
    {
        var root = context.getRootWindow();
        if (size_byte > 1024*1024*1024)
        {
            var giga_byte = size_byte.toFloat() / 1024 / 1024 / 1024;
            return "%.1f %s".format(giga_byte, context.translate(root, "GTTV", "GIGA_BYTE"));
        }
        else if (size_byte > 1024*1024)
        {
            var mega_byte = size_byte / 1024 / 1024;
            return "%d %s".format(mega_byte, context.translate(root, "GTTV", "MEGA_BYTE"));
        }
        else if (size_byte > 1024)
        {
            var kilo_byte = size_byte / 1024;
            return "%d %s".format(kilo_byte, context.translate(root, "GTTV", "KILO_BYTE"));
        }
        else
        {
            return "%d %s".format(size_byte, context.translate(root, "GTTV", "BYTE"));
        }
    }

    function checkTv(tv_id)
    {
        var id = tv_id["id"];
        var rating = tv_id["rating"];

        if (!checkParentalLock(rating))
        {
            return false;
        }
        if (!checkAchievement(tv_id["achievement"]))
        {
            return false;
        }
        return true;
    }

    function checkParentalLock(rating)
    {
        if (0 == rating)
        {
            return true;
        }
        var region = pdiext::MProductInformation::GetGameRegionCode();
        if ("jp" == region || "tw" == region)
        {
            return true;
        }
        var parental_level = pdistd::SysParamParentalLevel();
        if (0 == parental_level)
        {
            return true;
        }
        if ("us" == region)
        {
            return rating <= parental_level;
        }
        else if ("uk" == region)
        {
            if (rating > parental_level)
            {
                return false;
            }
            var parental_level_age = getParentalLevelByAge();
            return rating <= parental_level_age;
        }
    }

    function checkAchievement(achievement)
    {
        if (0 == achievement)
        {
            return true;
        }
        else if (1 == achievement)
        {
            return GAME_STATUS.user_profile.game_flags.getFlag("GTTV_PLAYABLE_MOVIES", "ENDING1");
        }
        else if (2 == achievement)
        {
            return GAME_STATUS.user_profile.game_flags.getFlag("GTTV_PLAYABLE_MOVIES", "ENDING2");
        }
        else if (3 == achievement)
        {
            // nothing here
        }
        else if (4 == achievement)
        {
            // nothing here
        }
        return false;
    }

    function getParentalLevelByAge()
    {
        var restriction = NP.getContentsRestriction();
        if (nil != restriction)
        {
            var age = restriction["age"];
            var max_level = 10;
            var age_list = [18,17,15,13,12,10,8,6,3];
            for (var i = 0; i < age_list.size; ++i)
            {
                if (age >= age_list[i])
                {
                    var age_level = max_level - i;
                    return age_level;
                }
            }
        }
        return EVENTRESULT_FILTER;
    }

    function digit2(i)
    {
        return "%02d".format(i);
    }

    class Waiting : UIKitProject::ProgressRoot::ThreadData
    {
        method begin_message(context)
        {
            return context.translate(context.getRootWindow(), "GTTV2", "WAIT_ON_FIRST_BOOT");
        }
    }

    function updateAll(context)
    {
        var updater = Waiting(
            function (args, progress) {
                var context = args;
                if (LoginUtil::isOnline())
                {
                    var request1 = Tv2.requestCategoryRoot(function(args) {});
                    if (Grim2Util::__deprecated__join__(context, request1))
                    {
                        var category_root_list = Tv2.decodeCategoryRoot(request1);
                        var list_id_list = Array();

                        foreach (var category_root in category_root_list)
                        {
                            var list_id = category_root["category_id1"];
                            list_id_list.push(list_id);
                        }

                        var tv_id_list_all = [];
                        var tv_id_list_list = [];
                        foreach (var list_id in list_id_list)
                        {
                            if (LoginUtil::isOnline())
                            {
                                var request2 = Tv2.requestTvIdList(list_id, function(args) {});
                                if (Grim2Util::__deprecated__join__(context, request2))
                                {
                                    var tv_id_list = Tv2.decodeTvIdList(request2);
                                    tv_id_list_list.push(tv_id_list);
                                    tv_id_list_all += tv_id_list["tv_ids"];
                                }
                            }
                        }

                        var tv_list = [];
                        var index = 0;
                        foreach (var tvid in tv_id_list_all)
                        {
                            ++index;
                            if ("movie" != tvid["type"])
                            {
                                // intentionally blank
                            }
                            else
                            {
                                var tv_id = tvid["id"];
                                if (LoginUtil::isOnline())
                                {
                                    var request3 = Tv2.requestTv(tv_id, function(args) {});
                                    if (Grim2Util::__deprecated__join__(context, request3))
                                    {
                                        var tv = Tv2.decodeTv(request3);
                                        tv_list.push(tv);
                                    }
                                }

                                progress.value = 0.95 * index.toFloat() / tv_id_list_all.size;
                            }
                        }

                        if (tv_id_list_list.size > 0)
                        {
                            TvFileUtil::updateTvIdListByList(tv_id_list_list);
                        }

                        progress.value = 0.97;
                        if (tv_list.size > 0)
                        {
                            TvFileUtil::updateTvByList(tv_list);
                        }
                    }
                }
                progress.value = 1.0;
            },
            context
        );

        updater.auto_mode = true;
        UIKitProject::ProgressRoot.open(context, [updater]);
    }

    function hasEntitlement(context, tv)
    {
        var entitlement_id = tv["entitlement"];
        if (nil == entitlement_id || entitlement_id == "")
        {
            return true;
        }
        var res = NP.checkEntitlementById(entitlement_id);
        if (0x8002AA10 == res)
        {
            NP.requestTicketRequest();
            res = NP.checkEntitlementById(entitlement_id);
        }
        return 0 == res;
    }

    function getEntitlement(context, tv)
    {
        var entitlement_id = tv["entitlement"];
        if (nil == entitlement_id || entitlement_id == "")
        {
            return nil;
        }
        var res = NP.getEntitlementById(entitlement_id);
        if (0x8002AA10 == res["result"])
        {
            NP.requestTicketRequest();
            res = NP.getEntitlementById(entitlement_id);
        }
        if (0 == res["result"])
        {
            return res["value"];
        }
        return nil;
    }

    function shouldReturn(context, offline, root)
    {
        if (0 != offline)
        {
            return false;
        }
        if (LoginUtil::isOnline())
        {
            return false;
        }
        if (nil != root)
        {
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, context.translate(root, "GTTV2", "GOTO_GTTV_TOP"));
        }
        return true;
    }

    function getTvStatus(context, tv)
    {
        if (!hasEntitlement(context, tv))
        {
            if (isExistMovie(tv))
            {
                return GAME_STATUS.user_profile.shopping_cart.isExist(tv["tv_id"], "movie", tv["sku"]) ? "ViewCart" : "AddCart";
            }
            else
            {
                var pace_status = PaceUtil::Tv::getTVStatus(tv);
                if ("Download" == pace_status)
                {
                    return GAME_STATUS.user_profile.shopping_cart.isExist(tv["tv_id"], "movie", tv["sku"]) ? "ViewCart" : "AddCart";
                }
                else
                {
                    return pace_status;
                }
            }
        }
        else
        {
            if (isExistMovie(tv))
            {
                return "Play";
            }
            else if (PaceUtil::isActive())
            {
                return PaceUtil::Tv::getTVStatus(tv);
            }
            else
            {
                return "Download";
            }
        }
    }

    function getTVStatusDownloading(context, tv)
    {
        if (!hasEntitlement(context, tv))
        {
            var pace_status = PaceUtil::Tv::getTVStatus(tv);
            if ("Download" == pace_status)
            {
                return main::GAME_STATUS.user_profile.shopping_cart.isExist(tv["tv_id"], "movie", tv["sku"]) ? "ViewCart" : "AddCart";
            }
            else
            {
                return pace_status;
            }
        }
        else if (PaceUtil::isActive())
        {
            return PaceUtil::Tv::getTVStatus(tv);
        }
        else
        {
            return "Download";
        }
    }

    function getHddFreeSpace(root, context)
    {
        var label = context.translate(root, "GTTV", "HDD_FREE_SPACE");
        var number = "";
        var unit = "";
        var free_size_MB = PaceUtil::Tv::getFreeSpaceMB();

        if (free_size_MB >= 1024)
        {
            number = "%.1f".format(free_size_MB.toFloat()/1024);
            unit = context.translate(root, "GTTV", "GIGA_BYTE");
        }
        else
        {
            number = free_size_MB;
            unit = context.translate(root, "GTTV", "MEGA_BYTE");
        }
        return [label, number, unit];
    }

    function getPankuzuText(root, context, pankuzu_list)
    {
        // English translation: breadcrumbs (UI element)
        var separator = " %s ".format(context.translate(root, "GTTV", "PANKUZU_SEPARATOR"));
        var text = "";
        for (var i = 0; i < pankuzu_list.size-1; ++i)
        {
            text += pankuzu_list[i];
            text += separator;
        }
        if (pankuzu_list.size > 0)
        {
            text += pankuzu_list[pankuzu_list.size-1];
        }
        return text;
    }

    class PSNData
    {
        attribute sku_list;

        method __init__()
        {
            self.sku_list = Map();
        }

        method get(context)
        {
            NPCommerceUtil::begin(context);
            getImpl(context, nil);
            NPCommerceUtil::end(context);
        }

        method getImpl(context, category_id)
        {
            var category = NPCommerceUtil::getCategory(category_id);

            if (nil == category)
            {
                main::Grim2.setInitialize(false);
                GTTV2Project::sModeOnline = false;
                return;
            }
            var contents = category["contents"];
            foreach (var content in contents)
            {
                if ("CATEGORY" == content["contentType"])
                {
                    getImpl(context, content["categoryId"]);
                }
                else if ("PRODUCT" == content["contentType"])
                {
                    var sku_all = content["sku"];
                    var sku_id = sku_all["skuId"];
                    var product_id = content["productId"];
                    var sku = ["sku_id": sku_id, "price": sku_all["price"], "category_id": category_id, "product_id": product_id];
                    sku["price_text"] = NPCommerceUtil::getPrice(sku_all["price"]);
                    self.sku_list[sku_id] = sku;
                }
            }
        }
    }

    module Cart
    {
        static ERROR_SUCCESS = 0;
        static ERROR_CART_FULL = 1;
        static ERROR_NO_SKU = 2;
        static ERROR_DUPLICATE = 3;

        static sDirty = false;

        function add(my_tv)
        {
            var my_tv_id = my_tv["tv_id"];
            if ("" == my_tv["sku"])
            {
                return ERROR_NO_SKU;
            }

            var found = false;
            var list = getList();
            foreach (var tv_id in list)
            {
                if (my_tv_id == tv_id)
                {
                    found = true;
                    break;
                }
            }

            if (!found)
            {
                var my_sku = my_tv["sku"];
                foreach (var tv_id in list)
                {
                    var tv = main::Tv2.getTv(tv_id);
                    if (nil != tv)
                    {
                        if (my_sku == tv["sku"])
                        {
                            found = true;
                            break;
                        }
                    }
                }
            }

            if (found)
            {
                return ERROR_DUPLICATE;
            }

            var result = ERROR_CART_FULL;
            for (var i = 0; i < main::GAME_STATUS.user_profile.context.shopping_cart.size; ++i)
            {
                if (0 == main::GAME_STATUS.user_profile.context.shopping_cart[i])
                {
                    main::GAME_STATUS.user_profile.context.shopping_cart[i] = my_tv_id;
                    sDirty = true;
                    result = ERROR_SUCCESS;
                    break;
                }
            }
            return result;
        }

        function delete(tv_id)
        {
            var result = false;
            for (var i = 0; i < main::GAME_STATUS.user_profile.context.shopping_cart.size; ++i)
            {
                if (tv_id == main::GAME_STATUS.user_profile.context.shopping_cart[i])
                {
                    main::GAME_STATUS.user_profile.context.shopping_cart[i] = 0;
                    result = true;
                    break;
                }
            }
            return result;
        }

        function clear()
        {
            for (var i = 0; i < main::GAME_STATUS.user_profile.context.shopping_cart.size; ++i)
            {
                main::GAME_STATUS.user_profile.context.shopping_cart[i] = 0;
            }
        }

        function getList()
        {
            return main::GAME_STATUS.user_profile.context.shopping_cart;
        }

        function getTVList(context)
        {
            var cart_list = getList();
            var tv_list = [];
            foreach (var tv_id in cart_list)
            {
                if (0 != tv_id)
                {
                    var tv = main::Tv2.getTv(tv_id);
                    if (nil != tv)
                    {
                        if (hasEntitlement(context, tv))
                        {
                            delete(tv["tv_id"]);
                        }
                        else
                        {
                            tv_list.push(tv);
                        }
                    }
                }
            }
            return tv_list;
        }

        function getItemCount()
        {
            var list = getList();
            var count = 0;
            foreach (var tv_id in list)
            {
                if (0 != tv_id)
                {
                    ++count;
                }
            }
            return count;
        }

        function hasItem(my_tv)
        {
            if (nil == my_tv)
            {
                return false;
            }

            var cart_list = getList();
            foreach (var tv_id in cart_list)
            {
                if (my_tv["tv_id"] == tv_id)
                {
                    return true;
                }
            }

            foreach (var tv_id in cart_list)
            {
                var tv = main::Tv2.getTv(tv_id);
                if (nil != tv)
                {
                    if (my_tv["sku"] == tv["sku"])
                    {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    class TranscodeObject : UIKitProject::ProgressRoot::Data
    {
        attribute tv;
        attribute output_file;
        attribute _msg_cancel;

        method __init__(context, tv, output_file)
        {
            self.auto_mode = true;
            self.tv = tv;
            self.output_file = output_file;
            _msg_cancel = context.translate(context.getRootWindow(), "GTTV2", "MSG_TRANSCODE_CANCEL");
        }

        method begin_message(context)
        {
            return context.translate(context.getRootWindow(), "GTTV2", "MSG_TRANSCODING");
        }

        method success_message(context)
        {
            return context.translate(context.getRootWindow(), "GTTV2", "MSG_TRANSCODE_SUCCESS");
        }

        method failed_message(context)
        {
            return context.translate(context.getRootWindow(), "GTTV2", "MSG_TRANSCODE_FAILED");
        }

        method cancel_message(context)
        {
            return _msg_cancel;
        }

        method begin(context)
        {
            var contents_key = self.tv["contents_key"];
            if (nil != contents_key)
            {
                if (contents_key.isInstanceOf(System::ByteData))
                {
                    Transcoder.setKey(contents_key);
                }
                else
                {
                    var key = Tv2.decodeContentsKey(contents_key);
                    Transcoder.setKey(key);
                }
            }

            Transcoder.setSubtitle(self.tv["captions"]);
            Transcoder.setAudioTrack(self.tv["audio"]);
            var pam_path = getMoviePath(self.tv);
            Transcoder.open(pam_path, self.output_file);
            var result = Transcoder.start();

            return 0 == result;
        }

        method end(context)
        {
            var result = Transcoder.stop();
            Transcoder.close();
            return 0 == result;
        }

        method isFinish(context)
        {
            return !Transcoder.isConverting() || pdiext::MSystemCondition::IsExitGame();
        }

        method getProgress(context)
        {
            return Transcoder.progress;
        }

        method cancel(context)
        {
            Transcoder.close();
        }
    }

    class ExportObject : UIKitProject::ProgressRoot::Data
    {
        attribute tv;
        attribute input_file;
        attribute exporter;
        attribute mode_online;

        method __init__(tv, input_file, mode_online)
        {
            self.tv = tv;
            self.input_file = input_file;
            self.mode_online = mode_online;
        }

        method begin_message(context)
        {
            return context.translate(context.getRootWindow(), "GTTV2", "MSG_PSP_EXPORTING");
        }

        method success_message(context)
        {
            return context.translate(context.getRootWindow(), "GTTV2", "MSG_PSP_EXPORT_SUCCESS");
        }

        method failed_message(context)
        {
            return context.translate(context.getRootWindow(), "GTTV2", "MSG_PSP_EXPORT_FAILED");
        }

        method begin(context)
        {
            self.exporter = main::pdistd::MVideoExport();
            var input_raw_file = main::pdistd::ConvertSystemPath(self.input_file);

            var last_slash = input_raw_file.rfind("/", input_raw_file.size-1);
            var dir = input_raw_file.substr(0, last_slash+1);
            var file = input_raw_file.substr(last_slash+1);

            var result = self.exporter.open();
            if (0 != result)
            {
                return false;
            }

            var title = self.tv["title"];
            var description = self.tv["description"];
            if (!self.mode_online)
            {
                title = context.translate(context.getRootWindow(), "GTTVOffline", title);
                description = context.translate(context.getRootWindow(), "GTTVOffline", description);
            }

            var result = self.exporter.start(dir, file, title, "GT5", description);
            return 0 == result;
        }

        method end(context)
        {
            var res = self.exporter.result;
            var result = self.exporter.finalize();
            context.wait(1.0);
            self.exporter.close();
            self.exporter = nil;

            return 0 == res && 0 == result;
        }

        method isFinish(context)
        {
            return !self.exporter.isExportingNow() || main::pdiext::MSystemCondition::IsExitGame();
        }

        method getProgress(context)
        {
            return self.exporter.progress;
        }
    }
}
