











static sServiceBrowser;

module ROOT
{
    static sThread = nil;
    static sService = nil;
    static sServiceList = Map();

    function onTick(context)
    {
        while (1)
        {
            if (sServiceBrowser == nil)
                continue;

            sServiceList = Map();
            var list = sServiceBrowser.getServiceList();

            foreach (var service in list)
                sServiceList[service.name] = service;
            
            ROOT.updateText(context);
            Thread::Sleep(2);
        }
    }

    method updateText(context)
    {
        var text = "";
        foreach (|var name, var service| in sServiceList)
            text += service.toString() + ", txt = " + service.txt + "\n";
        

        ROOT::TextFace.text = text;
    }

    method onInitialize(context)
    {
        sThread = Thread(onTick);
        sThread.start();

        pdistd::MLoggerManager::SetLogLevel(pdistd::LoggerLogLevel::Trace, "DNS");
        ServicePublisher.initialize();
        sService = ServicePublisher.createServiceConfig("LanParty");
        ServicePublisher.publish(sService);

        if (sServiceBrowser == nil)
            sServiceBrowser = gtengine::MServiceBrowser();

        sServiceBrowser.initialize();
        sServiceBrowser.setContinuousMode(true);
        sServiceBrowser.browseRequest(sService, nil, function(args)
        {
            |var context, var requestId, var service| = args;
            sServiceList[service.name] = service;
            ROOT.updateText(context);
        });

        NUS.initialize();
    }

    method onFinalize(context)
    {
        if (sService != nil)
        {
            ServicePublisher.remove(sService);
            sService = nil;
        }

        sServiceBrowser.clearCallback();
        if (sThread != nil)
        {
            sThread.terminate();
            sThread = nil;
        }
    }

    method onKeyPress(context, event)
    {
        var list = sServiceBrowser.getServiceList();
    }
}

