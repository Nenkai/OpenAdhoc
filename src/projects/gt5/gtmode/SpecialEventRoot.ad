module ROOT
{
    hidden.visible = false; 

    class SPEventInfo
    {   
        attribute number_;
        attribute sp_event_type_;
        attribute sp_event_code_;
        attribute need_level_;
        attribute category_count_;
        attribute category_level_;
        attribute game_count_list_;
        attribute game_flag_name_;
        attribute text_basename_;   

        method __init__(number, sp_event_type, sp_event_code, need_level, category_count, category_level, game_count_list, game_flag_name, text_basename)
        {
            self.number_ = number;
            self.sp_event_type_ = sp_event_type;
            self.sp_event_code_ = sp_event_code;
            self.need_level_ = need_level;
            self.category_count_ = category_count;
            self.category_level_ = category_level;
            self.game_count_list_ = game_count_list;
            self.game_flag_name_ = game_flag_name;
            self.text_basename_ = text_basename;
        }
    }   

    static sKART = SPEventInfo(1, SpecialEventUtil::EVENT_TYPE::GT_KART_CMP, "kart", 1, 3, [1, 7, 17], [2, 2, 2], nil, "kart");  
    static sGORDON = SPEventInfo(2, SpecialEventUtil::EVENT_TYPE::JEFF_G_DS, "gordon", 2, 3, [2, 9, 21], [2, 4, 3], "NASCAR_school_intro", "gordon");  
    static sSTIG = SPEventInfo(3, SpecialEventUtil::EVENT_TYPE::STIG_CHG, "stig", 4, 3, [4, 8, 19], [1, 1, 1], "Topgear_intro", "stig_C");    
    static sAMG = SPEventInfo(4, SpecialEventUtil::EVENT_TYPE::AMG_DS, "amg", 6, 4, [6, 12, 18, 24], [5, 5, 5, 5], nil, "amg");   
    static sRALLY = SPEventInfo(5, SpecialEventUtil::EVENT_TYPE::GT_RALLY, "rally", 10, 3, [10, 15, 20], [3, 3, 3], nil, "rally");  
    static sTOUR = SPEventInfo(6, SpecialEventUtil::EVENT_TYPE::GRAND_TOUR, "tour", 13, 1, [13], [5], nil, "tour"); 
    static sLOEB = SPEventInfo(7, SpecialEventUtil::EVENT_TYPE::LOEB_RC, "loeb", 16, 1, [16], [3], "loeb_Rally_Challenge", "loeb");  
    static sVETTEL = SPEventInfo(8, SpecialEventUtil::EVENT_TYPE::X1_CHG, "vettel", 30, 1, [30], [3], "X1challenge_intro", "vettel");   

    static sSPEventsData = [sKART, sGORDON, sSTIG, sAMG, sRALLY, sTOUR, sLOEB, sVETTEL];    

    class SPEventOutroDefine
    {   
        attribute sp_event_info_;
        attribute compare_result_;
        attribute game_flag_pair_;
        attribute intro_arg_;   

        method __init__(sp_event_info, compare_result, game_flag_pair, intro_arg)
        {
            self.sp_event_info_ = sp_event_info;
            self.compare_result_ = compare_result;
            self.game_flag_pair_ = game_flag_pair;
            self.intro_arg_ = intro_arg;
        }
    }   

    static sOutroDefines = [SPEventOutroDefine(sVETTEL, LicenseUtil::PRIZE::BRONZE, ["TOP_SCENES", "X1_delivery"], "X1_delivery")]; 

    function SetSPEventSelectWidget(context, widget, sp_event_info)
    {
        var sp_event_code = sp_event_info.sp_event_code_;
        var need_level = sp_event_info.need_level_;
        var number = sp_event_info.number_; 

        var text_basename = sp_event_info.text_basename_;   

        widget.icon.image_path = "image/gt5/special/img_%s.dds".format(sp_event_code);
        widget.Board::logo.image_path = "image/gt5/special/logo_M_%s.dds".format(sp_event_code);
        widget.Board::number.image_path = "image/gt5/special/no_%02d.dds".format(number);    

        widget.Board::Level::value.text = (need_level != nil) ? need_level : "--";  

        widget.Board::title.text = context.translate(ROOT, "SpecialEventInfoGT5", "EVENT_NAME_J_%s".format(text_basename));
        widget.Board::description.text = context.translate(ROOT, "SpecialEventInfoGT5", "EVENT_DETAILS_%s".format(text_basename));  

        for (var i = 0; i < 4; i++)
        {
            var color_obj = hidden::SPEventColors[sp_event_code]["panel"].getColor(i);
            widget.Board::panel2.setColor(color_obj, i);
        }   

        var color_obj = hidden::SPEventColors[sp_event_code]["txt"].getColor(0);
        widget.Board::description.text_color = color_obj;   

        widget.Board::FadeActor.restart();
    }   

    function GetSpecialEventId(sp_event_type, category_index, game_index)
    {    
        return sp_event_type * 1000 + GetGameId(category_index, game_index);
    }   

    function GetGameId(category_index, game_index)
    {
        return (category_index + 1) * 100 + (game_index + 1);
    }   

    function GetEventFilePath(sp_event_code, category_index, game_index, ext)
    {
        if (ext == nil)
            ext = "";

        var game_id = GetGameId(category_index, game_index);    
        var event_file_path = "textdata/gt5/special_event/%s%d%s.xml".format(sp_event_code, game_id, ext);   
        return event_file_path;
    }   

    method canEnterEvent(need_level)
    {
        var current_a_level = GAME_STATUS.user_profile.getAspecLevel();
        var current_b_level = GAME_STATUS.user_profile.getBspecLevel(); 

        return (need_level <= current_a_level) || (need_level <= current_b_level);
    }   

    function loadGP(context, path)
    {
        if (pdistd::Exist(path))
        {
            var fst = pdistd::ReadFile(path);
            var buf = fst["buffer"];    

            if (buf != nil)
            {
                var gp_list = GameParameterUtil::parseXML(buf);
                var gp = gp_list[0];    

                return gp;
            }
        }   

        return nil;
    }   

    function checkRegulation(context, gp, view_only)
    {
        var cp = GAME_STATUS.user_profile.garage.riding_car;
        var regulation = gp.event.regulation;   

        return regulation.checkIfQualifiedCar(cp, !view_only);
    }   

    method open(context)
    {
        SequenceUtil::startPage(context, self);
    }   

    method close(context)
    {
        PROJECT.history['LastPageName'] = "";
        PROJECT.history['SpecialEventRoot::EventIndex'] = nil;
        PROJECT.history['SpecialEventRoot::CategoryID'] = nil;
        PROJECT.history['SpecialEventRoot::FocusIndex'] = nil;  

        GTModeRoot.open(context);
    }   

    method onInitialize(context)
    {
        ROOT::SPEventSelect.hide(context, false);
        ROOT::CategorySelect.hide(context, true);
        ROOT::GameSelect.hide(context, true);
        ROOT::EventBG.hide(context, true);  

        check_outro(context);   

        context.pushEvent(main::menu::MFunctionEvent(postInitialize, context)); 

        context.cursor_visible = true;  

        if (PROJECT.history['SpecialEventRoot::CategoryID'] != nil)
        {
            var event_index = PROJECT.history['SpecialEventRoot::EventIndex'];
            var category_index = PROJECT.history['SpecialEventRoot::CategoryID'];
            var game_index = PROJECT.history['SpecialEventRoot::FocusIndex'];
            var sp_event_info = sSPEventsData[event_index]; 

            ROOT::CategorySelect.setSPEventInfo(context, sp_event_info);
            ROOT::GameSelect.setCategory(context, category_index, sp_event_info, game_index);
            ROOT::GameSelect.appear(context, true);
        }   
        else
            context.pushEvent(main::menu::MFunctionEvent(ROOT::SPEventSelect.appear, context, true));
    }   

    method postInitialize(context)
    {
        SoundUtil::MenuBGMCrossfadeGroup("menu", 0.0, 3.0);
        SaveDataUtilGT5::checkSaveEveryWhere(context);
    }   

    method openModeIntroduction(context)
    {
        if (!GAME_STATUS.user_profile.game_flags.getFlag("INTRODUCTION", "SPECIAL_EVENT"))
        {
            context.wait(0.5);  

            DialogUtil::openInformationDialog(context, context.translate(ROOT, "IntroductionGT5", "SPECIAL_EVENT"));  

            GAME_STATUS.user_profile.game_flags.setFlag("INTRODUCTION", "SPECIAL_EVENT", true);
        }
    }   

    method check_outro(context)
    {
        var play_test = false;  

        foreach (var outro_define in sOutroDefines)
        {
            var sp_event_info = outro_define.sp_event_info_;    
            var result_max = GLOBAL_STATUS.user_profile.record.special_event.getEventTypeResult(sp_event_info.sp_event_type_);  

            if ((result_max >= 0 && result_max <= outro_define.compare_result_) || play_test)
            {
                var pair = outro_define.game_flag_pair_;    

                if ((pair != nil && !GLOBAL_STATUS.user_profile.game_flags.getFlag(pair[0], pair[1])) || play_test)
                {
                    SchoolIntroRoot.open(context, ROOT, "X1_delivery", on_end_outro, sp_event_info);
                    break;
                }
            }
        }   

    }   

    method on_end_outro(context, sp_event_info)
    {
        SoundUtil::MenuBGMCrossfadeGroup("menu", 3.0, 3.0); 
    }   

    method onKeyPress(context, event)
    {
        if (!ROOT::GameSelect.insensitive)
        {
            if (event.keysym == CELL_PAD_CTRL_SQUARE)
            {
                if (ROOT::GameSelect::SBox.visible)
                    return ROOT::GameSelect::SBox::HBox::Garage.onActivate(context);
            }
        }   

        return EVENTRESULT_CONTINUE;
    }
}

module ROOT::SPEventSelect
{

    attribute finder_;
    attribute thread_;
    attribute chase_actor_target_

    method appear(context, warp)
    {
        self.insensitive = false;
        PROJECT::ignorePadEvent(true);

        MyHome.cancel_cb_func_ = nil;
        ROOT::EventBG.hide(context, false);

        var effect_end = method(context)
        {
            self.createChaseActorThread();

            context.pushEvent(main::menu::MFunctionEvent(self.finder_.onFocus, context, ROOT));
            context.pushEvent(main::menu::MFunctionEvent(ROOT.openModeIntroduction, context));

            PROJECT::ignorePadEvent(false);
            self.FadeActor.on_effect_end = nil;
        }   

        self.FadeActor.reverse = false;
        self.FadeActor.on_effect_end = self.*effect_end;
        self.FadeActor.start(); 

        if (warp)
            self.FadeActor.warp();

        ROOT::ButtonHelpGT5.set(context, [
            [ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "Component", "Enter")], 
            [ButtonHelpGT5.getCancelButtonName(), context.translate(ROOT, "Component", "Cancel")]
        ]);
    }

    method hide(context, warp)
    {
        self.insensitive = true;
        ROOT.setFocus(nil); 

        self.terminateChaseActorThread();
        BalloonTip.reset_value();   

        self.FadeActor.reverse = true;
        self.FadeActor.start(); 

        if (warp)
            self.FadeActor.warp();
    }   

    method onInitialize(context)
    {
        var initial_data = makeInitialData(context);    

        self.finder_ = UIKitProject::FinderRoot::setCopy(context, self, initial_data, false);   

        self.MovingBG::FadeActor.reverse = false;
        self.MovingBG::FadeActor.reset();
        self.MovingBG::FadeActor.reverse = true;
    }   

    method onFinalize(context)
    {
        self.terminateChaseActorThread();   

        if (self.finder_ != nil)
        {
            var parent = self.finder_.parent;
            parent.removeChild(context, self.finder_);
        }   
    }   

    method cb_init_sp_event(context, candidate_data, item_w, arg)
    {
        var sp_event_info = candidate_data.value_;
        ROOT::SetSPEventSelectWidget(context, item_w, sp_event_info);
    }   

    method cb_focused_sp_event(context, candidate_data, item_w, arg)
    {
        self.chase_actor_target_ = item_w;
    }   

    method cb_selected_sp_event(context, folder_data, close, arg)
    {
        var candidate_data = folder_data.getItemData();
        var sp_event_info = candidate_data.value_;  

        if (!canEnterEvent(sp_event_info.need_level_))
        {
            main::sound.play("disable");    

            var msg = context.translate(ROOT, "MESSAGE_YOU_DONT_HAVE_ENOUGH_LEVEL").build(sp_event_info.need_level_);   

            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
            return EVENTRESULT_FILTER;
        }   

        main::sound.play("ok"); 

        if (sp_event_info.game_flag_name_ != nil && !GLOBAL_STATUS.user_profile.game_flags.getFlag("TOP_SCENES", sp_event_info.game_flag_name_))
            SchoolIntroRoot.open(context, ROOT, sp_event_info.sp_event_type_, on_end_intro, sp_event_info);
        else
            open_category_select(context, sp_event_info, false);
    }   

    method on_end_intro(context, sp_event_info)
    {
        SoundUtil::MenuBGMCrossfadeGroup("menu", 3.0, 3.0);
        open_category_select(context, sp_event_info, true);
    }

    method open_category_select(context, sp_event_info, warp)
    {
        self.hide(context, warp);
        ROOT::CategorySelect.setSPEventInfo(context, sp_event_info);
        ROOT::CategorySelect.appear(context, warp);
    }

    method cb_canceled_sp_event(context, folder_data, func_popup_close)
    {
        PROJECT::playBackHomeSound();
        close(context);
    }   

    method makeInitialData(context)
    {
        var available_events = [];  

        foreach (var event in ROOT::sSPEventsData)
        {
            if (event.sp_event_code_ == "vettel" && !canEnterEvent(event.need_level_))
                continue;   
            
            available_events.push(event);
        }   

        var initial_data = UIKitProject::FinderRoot.InitialData(UIKitProject::FinderRoot.makeCandidates(available_events)); 
        initial_data.view_type_ = UIKitProject::FinderRoot::ViewType::SCROLL_H;
        initial_data.extended_item_ = hidden::SPEventSelectItem;
        initial_data.cb_init_item_ = self.cb_init_sp_event;
        initial_data.cb_focus_enter_ = self.cb_focused_sp_event;    
        initial_data.cb_on_activate_ = self.cb_selected_sp_event;
        initial_data.cb_on_cancel_ = self.cb_canceled_sp_event;
        initial_data.import_iconbox_parameter_ = self.IconBox;    
        initial_data.activate_sound_ = nil; 

        return initial_data;
    }   

    method createChaseActorThread()
    {
        self.thread_ = Thread(self.setChaseActorTarget);
        self.thread_.start();
    }   

    method terminateChaseActorThread()
    {
        if (self.thread_ != nil)
        {
            self.thread_.terminate();
            self.thread_ = nil;
        }   

        self.chase_actor_target_ = nil;
        self.MovingBG::FadeActor.reverse = true;
        self.MovingBG::FadeActor.start();
    }   

    method setChaseActorTarget(context)
    {
        for (;;)
        {
            if (chase_actor_target_ != nil)
            {
                if (self.MovingBG::FadeActor.reverse)
                {
                    self.MovingBG::ChaseActor.freeze();
                    self.MovingBG::ChaseActor.target_x = self.chase_actor_target_.x;
                    self.MovingBG::ChaseActor.reset();  

                    self.MovingBG::FadeActor.reverse = false;
                    self.MovingBG::FadeActor.start();
                }
                else
                {
                    self.MovingBG::ChaseActor.target_x = self.chase_actor_target_.x;
                }   
            }

            Thread::Sleep(0.05);
        }
    }
}

module ROOT::CategorySelect
{

    attribute finder_;
    attribute sp_event_info_;

    method setSPEventInfo(context, sp_event_info)
    {
        self.sp_event_info_ = sp_event_info;
        ROOT::SetSPEventSelectWidget(context, self.SPEventInfo, sp_event_info);

        self.SPEventInfo::PlayMovie.active = sp_event_info.game_flag_name_ != nil;

        self.sp_event_title.text = context.translate(ROOT, "SpecialEventInfoGT5", "EVENT_NAME_A_%s".format(sp_event_info_.text_basename_));

        var category_count = sp_event_info.category_count_;
        var iconbox = self.SelectBox["CategorySelectPanel"]["IconBox"];

        iconbox.minimum_width = hidden::CategorySelectItem.w * category_count;
        iconbox.minimum_height = hidden::CategorySelectItem.h;
        iconbox.w = iconbox.minimum_width;
        iconbox.h = iconbox.minimum_height;

        var initial_data = makeInitialData(context, category_count, iconbox);
        self.finder_.replaceFolder(context, initial_data);
    }

    method appear(context, warp)
    {
        self.insensitive = false;
        PROJECT::ignorePadEvent(true);
        MyHome.cancel_cb_func_ = cb_canceled_category;

        ROOT::EventBG.appearIf(context, warp, self.sp_event_info_.sp_event_code_);

        var effect_end = method (context)
        {
            self.ScrollText::EventInfo::ToolTip.visible = true;

            self.ScrollText::EventInfo::ToolTip.value = context.translate(ROOT, "SpecialEventInfoGT5", "EVENT_DETAILS_%s".format(sp_event_info_.text_basename_));
            context.pushEvent(main::menu::MFunctionEvent(self.finder_.onFocus, context, ROOT));

            PROJECT::ignorePadEvent(false);
            self.SelectBox::MoveActor.on_effect_end = nil;
        }

        self.SelectBox::MoveActor.reverse = false;
        self.SelectBox::MoveActor.reset();

        self.SelectBox::MoveActor.on_effect_end = self.*effect_end;
        self.SelectBox::MoveActor.start();

        self.SPEventInfo::ParallelActor.reverse = false;
        self.SPEventInfo::ParallelActor.restart();

        self.FadeActor.reverse = false;
        self.FadeActor.restart();

        if (warp)
        {
            self.FadeActor.warp();
            self.SelectBox::MoveActor.warp();
            self.SPEventInfo::ParallelActor.warp();
        }

        ROOT::ButtonHelpGT5.set(context, [
            [ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "Component", "Enter")], 
            [ButtonHelpGT5.getCancelButtonName(), context.translate(ROOT, "Component", "Cancel")]
        ]);
    }

    method hide(context, warp)
    {
        self.insensitive = true;
        ROOT.setFocus(nil);

        BalloonTip.reset_value();
        PROJECT::ignorePadEvent(false);

        self.SelectBox::MoveActor.on_effect_end = nil;
        self.SelectBox::MoveActor.reverse = true;
        self.SelectBox::MoveActor.start();

        self.SPEventInfo::ParallelActor.reverse = true;
        self.SPEventInfo::ParallelActor.start();

        self.ScrollText::EventInfo::ToolTip.value = "";
        self.ScrollText::EventInfo::ToolTip.visible = false;
        self.FadeActor.reverse = true;
        self.FadeActor.start();

        if (warp)
            self.FadeActor.warp();
    }

    method onInitialize(context)
    {
        var dummy_initial_data = UIKitProject::FinderRoot.InitialData(UIKitProject::FinderRoot.makeCandidates([]));

        var panel = hidden::CategorySelectPanel.doCopy();
        self.SelectBox.appendChild(context, panel);

        self.ScrollText::EventInfo::ToolTip.remove();
        self.ScrollText::EventInfo::ToolTip.action_type = 3;

        self.finder_ = UIKitProject::FinderRoot::setCopy(context, self.SelectBox["CategorySelectPanel"], dummy_initial_data, false);
        self.hide(context, true);
    }

    method onFinalize(context)
    {
        if (self.finder_ != nil)
        {
            var parent = self.finder_.parent;
            parent.removeChild(context, self.finder_);
        }

        self.SelectBox.clearWindow(context);
    }

    method cb_init_category(context, candidate_data, item_w, arg)
    {
        |var balloon, var image_path| = candidate_data.value_;
        item_w.ImageFace.image_path = image_path;
        var category_level = self.sp_event_info_.category_level_[candidate_data.item_index_];

        if (category_level > 0)
        {
            item_w.Level.visible = true;
            item_w.Level::value.text = category_level;
        }
        else
            item_w.Level.visible = false;
    }

    method cb_focused_category(context, candidate_data, item_w, arg)
    {
        |var balloon, var image_path| = candidate_data.value_;
        var balloon_text = context.translate(ROOT, "SpecialEventInfoGT5", balloon);
        BalloonTip.set_value(context, item_w, balloon_text, 24);
    }

    method cb_selected_category(context, folder_data, close, arg)
    {
        var candidate_data = folder_data.getItemData();
        var category_index = candidate_data.item_index_;

        var need_category_level = self.sp_event_info_.category_level_[category_index];
        if (!canEnterEvent(need_category_level))
        {
            main::sound.play("disable");

            var msg = context.translate(ROOT, "MESSAGE_YOU_DONT_HAVE_ENOUGH_LEVEL").build(need_category_level);
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);

            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");
        self.hide(context, false);

        ROOT::GameSelect.setCategory(context, category_index, self.sp_event_info_);
        ROOT::GameSelect.appear(context, false);
    }

    method cb_canceled_category(context, folder_data, func_popup_close)
    {
        sound.play("cancel");
        cancelCategorySelect(context);
    }

    method cancelCategorySelect(context)
    {
        self.hide(context, false);
        ROOT::SPEventSelect.appear(context, false);
    }

    method makeInitialData(context, category_count, icon_box)
    {
        var values = Array(category_count);

        if (category_count > 1)
        {
            for (var i = 0; i < category_count; i++)
                values[i] = ["EVENT_LEVEL_%{i + 1}", "image/gt5/special/icon_level_%{i + 1}.dds"];
        }
        else
            values[0] = ["EVENT_ENTRY", "image/gt5/special/icon_level_0.dds"]

        var list = Array(category_count);

        var initial_data = UIKitProject::FinderRoot.InitialData(UIKitProject::FinderRoot.makeCandidates(values));
        initial_data.view_type_ = UIKitProject::FinderRoot::ViewType::SCROLL_H;
        initial_data.extended_item_ = hidden::CategorySelectItem;
        initial_data.cb_init_item_ = self.cb_init_category;
        initial_data.cb_focus_enter_ = self.cb_focused_category;
        initial_data.cb_on_activate_ = self.cb_selected_category;
        initial_data.cb_on_cancel_ = self.cb_canceled_category;
        initial_data.import_iconbox_parameter_ = icon_box;
        initial_data.activate_sound_ = nil;

        return initial_data;
    }

    method onPlayMovie(context)
    {
        main::sound.play("ok");

        SchoolIntroRoot.open(context, ROOT, self.sp_event_info_.sp_event_type_, 
            function (context) { SoundUtil::MenuBGMCrossfadeGroup("menu", 3.0, 3.0) }
        );
    }

    module ROOT::CategorySelect::SPEventInfo::PlayMovie
    {
        method onActivate(context)
        {
            CategorySelect.onPlayMovie(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            sound.play("cancel");
            CategorySelect.cancelCategorySelect(context);

            return EVENTRESULT_FILTER;
        }
    }
}

module ROOT::GameSelect
{
    attribute finder_;
    attribute sp_event_info_;
    attribute category_index_;
    attribute game_info_list_;

    class GameInfo
    {
        attribute car_label_;
        attribute car_color_;
        attribute gp_;

        method __init__(car_label, car_color, gp)
        {
            self.car_label_ = car_label;
            self.car_color_ = car_color;
            self.gp_ = gp;
        }
    }

    method setCategory(context, category_index, sp_event_info, focus_index)
    {
        self.sp_event_info_ = sp_event_info;
        self.category_index_ = category_index;
        var sp_event_code = sp_event_info.sp_event_code_;

        var game_count = sp_event_info_.game_count_list_[category_index];
        var initial_data = makeInitialData(context, game_count, focus_index);
        self.finder_.replaceFolder(context, initial_data);

        self.logo.image_path = "image/gt5/special/logo_L_%s.dds".format(sp_event_code);

        self.game_info_list_ = Array(game_count)

        for (var i = 0; i < game_count; i++)
        {
            var path = ROOT::GetEventFilePath(sp_event_code, category_index, i);

            if (pdistd::Exist(path))
            {
                var fst = pdistd::ReadFile(path);
                var buf = fst["buffer"];
                if (buf == nil)
                    continue;
                
                var gp;
                var gp_list = GameParameterUtil::parseXML(buf);
                gp = gp_list[0];
                if (gp == nil)
                    continue;

                var car_label;
                var car_color;
                if (gp.event.constraint.cars.size > 0)
                {
                    var cp = gp.event.constraint.cars[0];
                    car_label = cp.getCarLabel();
                    car_color = cp.color;
                }
                else
                {
                    var n = gp.event.entry_set.entries.size;
                    for (var j = 0; j < n; j++)
                    {
                        var entry = gp.event.entry_set.entries[j];
                        if (entry.player_no == 0)
                        {
                            car_label = entry.car.label;
                            car_color = entry.car.color;
                            break;
                        }
                    }
                }
                

                self.game_info_list_[i] = GameInfo(car_label, car_color, gp);
            }
        }
    }

    method appear(context, warp)
    {
        self.insensitive = false;
        PROJECT::ignorePadEvent(true);

        MyHome.cancel_cb_func_ = cb_canceled_game;

        ROOT::EventBG.appearIf(context, warp, self.sp_event_info_.sp_event_code_);

        var effect_end = method(context)
        {
            context.pushEvent(main::menu::MFunctionEvent(self.finder_.onFocus, context, ROOT));

            PROJECT::ignorePadEvent(false);
            self.SelectBox::MoveActor.on_effect_end = nil;
        }

        self.SelectBox::MoveActor.reverse = false;
        self.SelectBox::MoveActor.reset();
        self.SelectBox::MoveActor.on_effect_end = self.*effect_end;
        self.SelectBox::MoveActor.start();

        self.FadeActor.reverse = false;
        self.FadeActor.restart();

        self.Info::FadeActor.reverse = false;
        self.Info::FadeActor.reset();

        if (warp)
        {
            self.FadeActor.warp();
            self.SelectBox::MoveActor.warp();
        }

        if (self.sp_event_info_.sp_event_code_ == "rally" || self.sp_event_info_.sp_event_code_ == "kart")
            self.SBox.visible = true;
        else
            self.SBox.visible = false;

        var button_helps = [
            [ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "Component", "Enter")], 
            [ButtonHelpGT5.getCancelButtonName(), context.translate(ROOT, "Component", "Cancel")]
        ];

        if (ROOT::GameSelect::SBox.visible)
            button_helps.push(["Square", context.translate(ROOT, "GTModeProject::GTModeRoot", "GARAGE")]);

        ButtonHelpGT5.set(context, button_helps);
    }

    method hide(context, warp)
    {
        self.insensitive = true;
        ROOT.setFocus(nil);

        BalloonTip.reset_value();
        self.resetWidget();

        self.FadeActor.reverse = true;
        self.FadeActor.start();

        if (warp)
            self.FadeActor.warp();
    }

    method onInitialize(context)
    {
        var dummy_initial_data = UIKitProject::FinderRoot.InitialData(UIKitProject::FinderRoot.makeCandidates([]));
        self.resetWidget();

        self.finder_ = UIKitProject::FinderRoot::setCopy(context, self.SelectBox, dummy_initial_data, false);

        var description = self.Info::Description;
        description.ScrolledWindow::clip.scroll_mode = 2;

        var adj = main::menu::MAdjustment();
        description.Scrollbar::VScrollbar.adjustment = adj;

        description.ScrolledWindow::clip.v_adjustment = adj;
        description.ScrolledWindow::clip.space.y = 0.0;
        description.ScrolledWindow::clip.manual_target_y = 0.0;

        self.hide(context, true);
    }

    method onFinalize(context)
    {
        if (self.finder_ != nil)
        {
            var parent = self.finder_.parent;
            parent.removeChild(context, self.finder_);
        }
    }

    method cb_init_game(context, candidate_data, item_w, arg)
    {
        var game_index = candidate_data.item_index_;
        var game_info = self.game_info_list_[game_index];

        var eid = ROOT::GetSpecialEventId(self.sp_event_info_.sp_event_type_, self.category_index_, game_index);
        var result_pair = GLOBAL_STATUS.user_profile.record.special_event.getResult(eid);

        var result = result_pair[0];

        item_w.init(context, self.sp_event_info_.sp_event_code_, game_info, result);
    }

    method cb_focused_game(context, candidate_data, item_w, arg)
    {
        var game_index = candidate_data.item_index_;
        var sp_event_code = self.sp_event_info_.sp_event_code_;
        var game_id = ROOT::GetGameId(self.category_index_, game_index);
        var text_basename = self.sp_event_info_.text_basename_;

        self.Info::game_title.text = context.translate(ROOT, "SpecialEventInfoGT5", "%s%st".format(text_basename, game_id));
        var description_text = context.translate(ROOT, "SpecialEventInfoGT5", "%s%sd".format(text_basename, game_id));

        var scrollclip = self.Info::Description::ScrolledWindow::clip;

        scrollclip.space::TextFace.text = description_text;
        scrollclip.manual_target_y = 0.0;
        scrollclip.space.y = 0.0;

        var game_info = self.game_info_list_[game_index];

        if (game_info != nil)
        {
            var car_label = game_info.car_label_;
            var car_color = game_info.car_color_;

            if (car_label != nil)
            {
                self.Info::car_name.text = gtengine::MSpecDB::getCarShortName(car_label);
                self.Info::manufacturer_name.text = context.translate(ROOT, "TunerName", gtengine::MSpecDB::getTunerLabel(car_label));

                var car_image_path = "image/gt5/special/car_%s_%02d_cmp.dds".format(car_label, car_color);

                if (car_image_path != self.Info::car_thumb.image_path)
                {
                    var car_delay_load_complete = method (context)
                    {
                        self.Info::car_thumb::FadeActor.restart();
                        self.Info::car_thumb.on_delay_load_complete = nil;
                    };

                    self.Info::car_thumb.image_path = car_image_path;
                    self.Info::car_thumb::FadeActor.reset();
                    self.Info::car_thumb.on_delay_load_complete = self.*car_delay_load_complete;
                    self.Info::car_thumb::FadeActor.start();
                }
                else
                    ;
            }
            else
            {
                self.Info::car_thumb.image_path = "";
                self.Info::car_thumb::FadeActor.reset();
            }

            var prize_table = game_info.gp_.event.reward.prize_table;
            for (var i = 0; i < 3; i++)
            {
                if (i < prize_table.size)
                {
                    var prize = main::pdiext::MMisc::GetMoneyString(prize_table[i]);
                    self.Info["Prize%{i + 1}"]["prize"].text = "Cr.%{prize}";
                }
                else
                    self.Info["Prize%{i + 1}"]["prize"].text = "--";
            }
        }

        if (sp_event_code == "rally" || sp_event_code == "kart")
        {
            var tire_index = game_info.gp_.event.regulation.limit_tire_f;

            if (tire_index > -1)
                self.SBox::HBox::LimitTire::TextFace.text = TireUtil::getName(context, tire_index, ROOT);
            else
                self.SBox::HBox::LimitTire::TextFace.text = context.translate(ROOT, "UNRESTRICTED");

            self.SBox::HBox::Regulation.visible = true;
        }

        self.Info::FadeActor.start();
    }

    method cb_selected_game(context, folder_data, close, arg)
    {
        var sp_event_code = self.sp_event_info_.sp_event_code_;
        var event_file_path_ext = nil;

        var candidate_data = folder_data.getItemData();
        var game_index = candidate_data.item_index_;
        var overwriting_game_id = nil;

        var event_file_path = ROOT::GetEventFilePath(sp_event_code, self.category_index_, game_index, event_file_path_ext);
        var gp = loadGP(context, event_file_path);

        if (gp == nil)
        {
            main::sound.play("disable");
            return;
        }

        if (sp_event_code == "rally" || sp_event_code == "kart")
        {
            if (GAME_STATUS.user_profile.garage.riding_id < 0)
            {
                main::sound.play("disable");
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "MESSAGE_WHEN_GARAGE_IS_EMPTY"));

                return EVENTRESULT_FILTER;
            }

            var cp = main::GAME_STATUS.user_profile.garage.getRidingCar();
            if (main::gtengine::MSpecDB::checkGenericFlag("one_make_only", cp.getCarCode()))
            {
                main::sound.play("disable");
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "MyHome", "CANNOT_ENTER_ASPEC_BSPEC_EVENT"));

                return EVENTRESULT_FILTER;
            }

            for (;;)
            {
                var report = checkRegulation(context, gp, false);
                if (report[0])
                {
                    break;
                }
                else
                {
                    sound.play("disable");

                    var res = RegulationReportPopup.open(context, gp.event.regulation, report, true, false);
                    if (res)
                    {
                        GaragePopup.open(context, nil, gp.event.regulation);
                        ROOT::HeaderGT5::HBox::RidingCar.refresh(context);
                    }
                    else
                        return EVENTRESULT_FILTER;
                }
            }

            if (sp_event_code == "rally")
            {
                var game_id = ROOT::GetGameId(self.category_index_, game_index);

                var data = CursorProject::LoadingRoot::SpecialEventData(gp, 
                    "piece/logo/logo_L_rally.img", 
                    context.translate(ROOT, "SpecialEventInfoGT5", "rally%{game_id}t"));
                CursorProject::LoadingRoot.setData(data);
            }
            else if (sp_event_code == "kart")
            {
                var eid = ROOT::GetSpecialEventId(self.sp_event_info_.sp_event_type_, self.category_index_, game_index);
                overwriting_game_id = eid;

                var kart_special_logo_defs = [
                    1101 : "karttrack_a",
                    1102 : "karttrack_b",
                    1201 : "karttrack_c",
                    1202 : "karttrack_d",
                    1301 : "karttrack_e",
                    1302 : "mini"
                ];

                var logoname = kart_special_logo_defs[eid];
                var logopath = nil;
                if (logoname != nil)
                    logopath = "piece/course_logo_L/%s.img".format(logoname);

                var course_name_i18n = nil;
                var info = CourseData::getCourseInfo(gp.event.track.course_code);

                if (info.name != "")
                    course_name_i18n = context.translate(ROOT, "CourseNameI18n", info.name);

                var data = CursorProject::LoadingRoot::SpecialEventData(gp, logopath, nil, course_name_i18n);
                CursorProject::LoadingRoot.setData(data);
            }
        }
        else if (sp_event_code == "tour")
        {
            var eid = ROOT::GetSpecialEventId(self.sp_event_info_.sp_event_type_, self.category_index_, game_index);
            var can_exec = false;

            if (eid % 10 == 1)
                can_exec = true;
            else
            {
                |var result, var best_time| = GLOBAL_STATUS.user_profile.record.special_event.getResult(eid - 1);
                var can_exec = LicenseUtil::PRIZE::NONE < result;
            }

            if (!can_exec)
            {
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "CANNOT_SELECT_THIS_GRANDTOUR"));
                return EVENTRESULT_FILTER;
            }

            if (eid % 10 == 1)
            {
                var data = CursorProject::LoadingRoot::SpecialEventData(gp, "piece/logo/logo_L_tour.img", 
                context.translate(ROOT, "SpecialEventInfoGT5", "EVENT_NAME_J_tour"));
                CursorProject::LoadingRoot.setData(data);
            }
        }
        else
        {
            var eid = ROOT::GetSpecialEventId(self.sp_event_info_.sp_event_type_, self.category_index_, game_index);
            overwriting_game_id = eid;
        }
        

        if (gp != nil && overwriting_game_id != nil)
            gp.game_id = overwriting_game_id;

        main::sound.play("next");

        if (gp != nil && GameParameterUtil::executeEvent(context, gp, GAME_STATUS))
        {
            PROJECT.history['SpecialEventRoot::EventIndex'] = self.sp_event_info_.number_ - 1;

            PROJECT.history['SpecialEventRoot::CategoryID'] = self.category_index_;
            PROJECT.history['SpecialEventRoot::FocusIndex'] = game_index;
            PROJECT.history['LastPageName'] = ROOT.name;

            var gctx = GLOBAL_STATUS.user_profile.context;
            gctx.special_event_type = self.sp_event_info_.sp_event_type_;

            gctx.special_event_id = ROOT::GetSpecialEventId(self.sp_event_info_.sp_event_type_, self.category_index_, game_index);

            var strlog = "GS=%d:GU=%s".format(gctx.special_event_id, main::PDINetwork.getClientName());
            main::Grim2.requestPutLog(strlog);
        }
        else
        {
            main::sound.play("disable")
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, "SOMETHING WRONG");
            CursorProject::LoadingRoot.setData(nil);
        }
    }

    method cb_canceled_game(context, folder_data, func_popup_close)
    {
        sound.play("cancel");
        self.hide(context, false);

        ROOT::CategorySelect.setSPEventInfo(context, self.sp_event_info_);
        ROOT::CategorySelect.appear(context, false);
    }

    method cb_on_key_press_game(context, event, item_w, candidate_data)
    {
        var scrollclip = self.Info::Description::ScrolledWindow::clip;
        var space = scrollclip.space;
        var textface = space.TextFace;
        var line_height = textface.line_height;

        var status = EVENTRESULT_CONTINUE;
        if (event.keysym == CELL_PAD_CTRL_L3_UP)
        {
            if (scrollclip.manualTargetIncY(line_height))
                status = EVENTRESULT_STOP;
        }

        if (event.keysym == CELL_PAD_CTRL_L3_DOWN)
        {
            scrollclip.manualTargetIncY(-line_height)
            status = EVENTRESULT_STOP;
        }

        if (pdiext::isQABuild() && event.keysym == CELL_PAD_CTRL_START)
        {
            main::sound.play("return");

            var game_index = candidate_data.item_index_;
            var game_info = self.game_info_list_[game_index];

            var special_event = main::GLOBAL_STATUS.user_profile.record.special_event;
            var eid = ROOT::GetSpecialEventId(self.sp_event_info_.sp_event_type_, self.category_index_, game_index);
            |var result, var best_time, var best_score, var best_order| = special_event.getResult(eid);

            switch (result)
            {
                case LicenseUtil::PRIZE::NONE:
                    var result = LicenseUtil::PRIZE::BRONZE;
                    item_w.Record.ImageFace.image_path = "image/gt5/icon/trophy_bronze.dds";
                    item_w.Record.ImageFace.visible = true;
                    break;

                case LicenseUtil::PRIZE::BRONZE:
                    var result = LicenseUtil::PRIZE::SILVER;
                    item_w.Record.ImageFace.image_path = "image/gt5/icon/trophy_silver.dds";
                    item_w.Record.ImageFace.visible = true;
                    break;

                case LicenseUtil::PRIZE::SILVER:
                    var result = LicenseUtil::PRIZE::GOLD;
                    item_w.Record.ImageFace.image_path = "image/gt5/icon/trophy_gold.dds";
                    item_w.Record.ImageFace.visible = true;
                    break;    
            }

            item_w.Record.ImageFace.doInitialize(context);

            var gp = game_info.gp_;
            var event = gp.events[0];
            var eval_type = event.eval_condition.type;

            if (eval_type == 0 && self.sp_event_info_.sp_event_code_ == "rally")
                eval_type = gtengine::EvalType::TIME;

            switch (eval_type)
            {
                case gtengine::EvalType::TIME:
                    special_event.updateResult(eid, result, eval_type, best_time - 1, nil, nil);
                    break;

                case gtengine::EvalType::DRIFT:
                    special_event.updateResult(eid, result, eval_type, nil, best_score + 1, nil);
                    break;

                case gtengine::EvalType::ORDER:
                    special_event.updateResult(eid, result, eval_type, nil, nil, result);
                    break;    
            }
        }

        return status;
    }

    method makeInitialData(context, games_count, focus_index)
    {
        if (focus_index == nil)
            focus_index = 0;

        var list = Array(games_count);

        var initial_data = UIKitProject::FinderRoot.InitialData(UIKitProject::FinderRoot.makeCandidates(list));

        initial_data.view_type_ = UIKitProject::FinderRoot::ViewType::SCROLL_H;
        initial_data.extended_item_ = hidden::GameSelectItem;
        initial_data.import_iconbox_parameter_ = self.SelectBox::Composite::IconBox;
        initial_data.cb_init_item_ = self.cb_init_game;
        initial_data.cb_focus_enter_ = self.cb_focused_game;
        initial_data.cb_on_activate_ = self.cb_selected_game;
        initial_data.cb_on_cancel_ = self.cb_canceled_game;
        initial_data.cb_on_key_press_ = self.cb_on_key_press_game;
        initial_data.h_scrollbar_ = self.SelectBox::HScrollbar;
        initial_data.focus_index_ = focus_index;
        initial_data.activate_sound_ = nil;
        return initial_data;
    }

    method resetWidget()
    {
        self.Info::game_title.text = "";
        self.Info::Description::ScrolledWindow::clip::space::TextFace.text = "";
        self.Info::Prize1::prize.text = "";
        self.Info::Prize2::prize.text = "";
        self.Info::Prize3::prize.text = "";
        self.Info::car_thumb.image_path = "";
        self.Info::car_name.text = "";
        self.Info::manufacturer_name.text = "";
    }

    SCALE_WIDGET_SDTV(Info::Description::ScrolledWindow::clip::space::TextFace, 2.6);
}

module ROOT::GameSelect::SBox::HBox::Garage
{
    attribute regulation_;

    method setRegulation(regulation)
    {
        regulation_ = regulation;
    }

    method onActivate(context)
    {
        main::sound.play("ok");
        GaragePopup.open(context, nil, self.regulation_);
        ROOT::HeaderGT5::HBox::RidingCar.refresh(context);
        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        if (!ROOT::CategorySelect.insensitive)
            ROOT::CategorySelect.cb_canceled_category(context, nil);
        else if (!ROOT::GameSelect.insensitive)
            ROOT::GameSelect.cb_canceled_game(context, nil);

        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context, event)
    {
        BalloonTip.set_value(context, event.widget, context.translate(ROOT, "GTModeProject::GTModeRoot", "GARAGE"), 0);

        return EVENTRESULT_STOP;    
    }

    method onFocusLeave(context, event)
    {
        BalloonTip.reset_value();
        return EVENTRESULT_STOP;
    }
}

module ROOT::GameSelect::SBox::HBox::Regulation
{
    method onActivate(context)
    {
        main::sound.play("ok");

        var game_index = GameSelect.finder_.getFocusIndex(context);
        var game_info = GameSelect.game_info_list_[game_index];

        var gp = game_info.gp_;
        var regulation = gp.event.regulation;

        var report = ROOT.checkRegulation(context, gp, true);
        var res = RegulationReportPopup.open(context, regulation, report, true);

        if (res)
        {
            GaragePopup.open(context, nil, gp.event.regulation);
            ROOT::HeaderGT5::HBox::RidingCar.refresh(context);
        }

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        ROOT::GameSelect.cb_canceled_game(context, nil);
        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context, event)
    {
        BalloonTip.set_value(context, event.widget, context.translate(ROOT, "GTModeProject::ABspecEventRoot", "BALLOON_REGULATION"), 0);

        return EVENTRESULT_STOP;    
    }

    method onFocusLeave(context, event)
    {
        BalloonTip.reset_value();
        return EVENTRESULT_STOP;
    }
}

module ROOT::hidden::GameSelectItem
{

    function onLoad(context)
    {
        Weather.visible = false;
        Laps::TextFace.text = "";
        Laps.visible = false;
        course_template.image_path = "";
        course_template.visible = false;
        course_logo.image_path = "";
        course_map.image_path = "";
        Record::TextFace.text = "";
        Record::ImageFace.image_path = "";
    }

    method init(context, event_code, game_info, result = -1)
    {
        if (game_info != nil)
        {
            var track = game_info.gp_.event.track;
            var course_code = track.course_code;

            if (course_code != nil)
            {
                var use_generator = track.use_generator;
                var course_pathway = track.course_pathway;

                if (use_generator || course_pathway != nil)
                {
                    self.course_template.image_path = "piece/replay_thumb/%s.img".format(main::gtengine::MSpecDB::getCourseLabel(course_code));
                    self.course_template.visible = true;
                    self.course_logo.image_path = "";
                    self.course_map.image_path = "";
                    self.Weather.setup(context, game_info.gp_);
                }
                else
                {
                    var course_info = CourseData::getCourseInfo(course_code);
                    self.course_template.image_path = "";
                    self.course_template.visible = false;
                    self.course_logo.image_path = "piece/course_logo_M/%{course_info.logo}.img";
                    self.course_map.image_path = "piece/course_map_M/%{course_info.map}.img";
                    self.Weather.setup(context, game_info.gp_);
                }
            }

            switch (result)
            {
                case 0:
                    self.Record::TextFace.text = "";
                    self.Record::TextFace.visible = false;
                    self.Record::ImageFace.image_path = "image/gt5/icon/trophy_gold.dds";
                    self.Record::ImageFace.visible = true;
                    break;

                case 1:
                    self.Record::TextFace.text = "";
                    self.Record::TextFace.visible = false;
                    self.Record::ImageFace.image_path = "image/gt5/icon/trophy_silver.dds";
                    self.Record::ImageFace.visible = true;
                    break;

                case 2:
                    self.Record::TextFace.text = "";
                    self.Record::TextFace.visible = false;
                    self.Record::ImageFace.image_path = "image/gt5/icon/trophy_bronze.dds";
                    self.Record::ImageFace.visible = true;
                    break;

                default:
                    if (result < 0)
                        self.Record::TextFace.text = "";
                    else
                        self.Record::TextFace.text = result + 1;

                    self.Record::TextFace.visible = true;
                    self.Record::ImageFace.image_path = "";
                    self.Record::ImageFace.visible = false;
                    break;
            }
        }
        else
        {
            self.Weather.visible = false;
            self.Laps::TextFace.text = "";
            self.Laps.visible = false;
            self.course_template.image_path = "";
            self.course_template.visible = false;
            self.course_logo.image_path = "";
            self.course_map.image_path = "";
            self.Record::TextFace.text = "";
            self.Record::ImageFace.image_path = "";
        }

    }

    module Weather2
    {
        method setup(context, gp)
        {
            self.datetime_icon.visible = false;
            var rp = gp.event.race_parameter;
            var daynight = false;

            if (rp.datetime.hour >= 6 && rp.datetime.hour < 18)
                daynight = true;

            if (rp.weather_no_precipitation == true)
                self.weather_icon.image_path = (daynight) ? "image/common/weather/day.dds" : "image/common/weather/night.dds";
            else if (rp.weather_prec_rain_only == true)
            {
                if (rp.weather_no_schedule)
                    self.weather_icon.image_path = (daynight) ? "image/common/weather/random_day_rain.dds" : "image/common/weather/random_night_rain.dds";
                else
                    self.weather_icon.image_path = (daynight) ? "image/common/weather/day_rain.dds" : "image/common/weather/night_rain.dds";
            }
            else if (rp.weather_prec_snow_only == true)
            {
                if (rp.weather_no_schedule)
                    self.weather_icon.image_path = (daynight) ? "image/common/weather/random_day_snow.dds" : "image/common/weather/random_night_snow.dds";
                else
                    self.weather_icon.image_path = (daynight) ? "image/common/weather/day_snow.dds" : "image/common/weather/night_snow.dds";
            }

            if (rp.time_progress_speed != 0.0)
                self.datetime_icon.visible = true;

            self.visible = true;
        }
    }
}

module ROOT::EventBG
{
    method appearIf(context, warp, sp_event_code)
    {
        if (!self.FadeActor.reverse)
            return;

        self.image_path = "image/gt5/special/bg_%s.dds".format(sp_event_code);

        self.FadeActor.reverse = false;
        self.FadeActor.restart();

        if (warp)
            self.FadeActor.warp();
    }

    method hide(context, warp)
    {
        self.FadeActor.reverse = true;
        self.FadeActor.start();

        if (warp)
            self.FadeActor.warp();
    }
}

module ROOT::MyHome
{
    attribute cancel_cb_func_;

    method onActivate(context)
    {
        PROJECT::playBackHomeSound();
        close(context);

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        if (cancel_cb_func_ != nil)
            self.cancel_cb_func_(context);
        else
        {
            PROJECT::playBackHomeSound();
            close(context);
        }

        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context, event)
    {
        BalloonTip.set_value(context, event.widget, context.translate(ROOT, "MyHome", "MYHOME_BACK_BUTTON"), 20);
        return EVENTRESULT_STOP;    
    }

    method onFocusLeave(context, event)
    {
        BalloonTip.reset_value();

        return EVENTRESULT_STOP;
    }

    method onKeyPress(context, event)
    {
        if (event.keysym == CELL_PAD_CTRL_L3_UP)
        {
            if (!ROOT::GameSelect.insensitive)
            {
                ROOT::GameSelect.finder_.onFocus(context);

                return EVENTRESULT_FILTER;
            }

            if (!ROOT::CategorySelect.insensitive)
            {
                ROOT::CategorySelect.finder_.onFocus(context);

                return EVENTRESULT_FILTER;
            }
        }

        return EVENTRESULT_CONTINUE;
    }
}

module hidden::SPEventSelectItem
{
    method onInitialize(context)
    {
        self.Board::FadeActor.reset();

        self.icon.image_path = "";
        self.Board::logo.image_path = "";
        self.Board::number.image_path = "";
        self.Board::Level::value.text = "";
        self.Board::title.text = "";
        self.Board::description.text = "";
    }    
}