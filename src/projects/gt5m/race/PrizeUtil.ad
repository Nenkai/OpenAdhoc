//---------------------------------------------------------------------------------------
// PrizeUtil.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module PrizeUtil
{
    function hasClearData()
    {
        if (main::RaceOperator.game_condition.eval_condition == nil)
            return false;

        var eval_type = main::RaceOperator.game_condition.eval_condition[0];

        if (eval_type == main::gtengine::EvalType::TIME || eval_type == main::gtengine::EvalType::ORDER)
        {
            var data = main::RaceOperator.game_condition.eval_condition[1];
            if (data[0] != 0)
                return true;
        }

        return false;
    }

    function calcEventResult2(finishResult, playerNum)
    {
        var order = -1;
        var prizeList = [];
        if (finishResult == nil || finishResult < 0)
            return [order, prizeList];

        var event = gSequenceCondition.game_plan.events[0];
        if (event.reward == nil)
            return [order, prizeList];

        var rewardTable = event.reward.prize_table;

        if (hasClearData())
        {
            switch (finishResult)
            {
                case main::gtengine::FinishResult::GOLD:
                    order = 0;
                    break;
                case main::gtengine::FinishResult::SILVER:
                    order = 1;
                    break;
                case main::gtengine::FinishResult::BRONZE:
                    order = 2;
                    break;
                default:
                    order = -1;
                    break;
            }

            prizeList = [0, 0, 0];

            for (var i = 0; i < rewardTable.size && i < prizeList.size; i++)
            {
                if (event.eval_condition.data[i] > 0)
                    prizeList[i] = rewardTable[i].toInt();
            }
        }
        else
        {
            prizeList = [0, 0, 0, 0];

            var playerTotalNum = prizeList.size;
            if (playerNum != nil && playerNum <= prizeList.size)
                playerTotalNum = playerNum.toInt();

            var prizeCarOrderSizeDiff = prizeList.size - playerTotalNum;

            for (var i = 0; i < playerTotalNum && i < rewardTable.size && i < prizeList.size; i++)
                prizeList[i] = rewardTable[i].toInt();

            order = finishResult;

            if (finishResult >= rewardTable.size)
                order = -1;
        }

        return [order, prizeList];
    }

    class JackpotRaceInfo
    {
        attribute mIsJackpotRace = nil;
        attribute mPrizeScaling = nil;
        attribute mMySlotId = nil;
        attribute mLuckySlotId = nil;
        attribute mLuckyPlayerOrder = nil;
        attribute mCarOrderList = nil;

        method __init__(isJackpotRace, prizeScaling, mySlotId, luckySlotId, luckyPO, carOrder)
        {
            self.mIsJackpotRace = isJackpotRace;
            self.mPrizeScaling = prizeScaling;
            self.mMySlotId = mySlotId;
            self.mLuckySlotId = luckySlotId;
            self.mLuckyPlayerOrder = luckyPO;
            self.mCarOrderList = carOrder;
        }
    }

    function getJackpotRaceInfo()
    {
        main::ORG.fetchRaceDisplay();

        var mySlotId = main::RaceOperator.getAccountSlotID(0);

        var rp = main::ORG.getCurrentRaceParameter();
        var luckySlotId = rp.lucky_slot_id;

        var isJackpotRace = luckySlotId >= 0 ? true : false;

        var luckyPlayerOrder = -1;
        var prizeScaling = 2.0;

        if (isJackpotRace)
        {
            luckyPlayerOrder = getEnsuredOrder(luckySlotId);
            prizeScaling = RaceRoot.getJackpotScalingFactor();
            main::GlobalStatus::game_context.battle_renchan_num++;
        }
        else
            main::GlobalStatus::game_context.battle_renchan_num = 0;

        var orderList = main::ORG.getCarOrderList();

        return JackpotRaceInfo(isJackpotRace,
                               prizeScaling,
                               mySlotId,
                               luckySlotId,
                               luckyPlayerOrder,
                               orderList);
    }
}