module PROJECT::ROOT
{
    static current_method = nil;

    function getCarsString(context, num)
    {
        if (num <= 0)
            return "--";
        else if (num <= 1)
            return context.translate(ROOT, "one_car").format(num);
        else
            return context.translate(ROOT, "afew_cars").format(num);
    }

    function onInitialize(context) { }

    function onCancel(context, event, item)
    {
        main::sound.play("cancel");
        start_page(context, CourseRoot);
        return EVENTRESULT_FILTER;
    }

    function getCurrentROOT()
    {
        if (current_method == nil)
            return CourseRoot;

        switch (current_method)
        {
            case "ByMaker":
                return MakerRoot;
            
            case "ByHistory":  
                return HistoryRoot;

            case "ByFavorite":
                return MakerRoot;
        }
    }

    function getCurrentCategory()
    {
        var category = nil;

        if (GameRoot::current_game == "LANBattle")
            category = "favorite";
        else if (GameRoot::current_game == "PhotoMode")
            category = "favorite";
        else
        {
            switch (current_method)
            {
                case "ByMaker":
                    category = MakerRoot::getCurrentCategory();
                    break;
                
                case "ByHistory":
                    category = HistoryRoot::getCurrentCategory();
                    break;

                case "ByFavorite":
                    category = "favorite";
                    break;
            }
        }

        return category;
    }

    function getCurrentCarList()
    {
        var list = nil;
        var list_name = getCurrentCategory();

        if (list_name != "favorite")
        {
            list_name = list_name + "_carlist";
            if (CarData.defined(list_name))
            {
                var prelist = CarData[list_name];
                var list = [];

                for (var i = 0; i < prelist.size; i++)
                {
                    if (main::game.isCarAvailable(prelist[i]))
                        list.push(prelist[i]);
                }
            }
            else
                var list = [];

        }
        else 
            var list = main::game.favorite_car.buildLabelList();

        if (GameRoot::current_game == "LANBattle")
        {
            var runnable_car_exist = false;

            if (CourseRoot::isDirt())
            {
                for (var i = 0; i < list.size; i++)
                {
                    if (main::menu::MCarData::IsDirtRunnable(list[i]) && main::menu::MCarData::GetOpenModelType(list[i]) != 2)
                    {
                        runnable_car_exist = true;
                        break;
                    }
                }
            }
            else
            { 
                for (var i = 0; i < list.size; i++)
                {
                    if (main::menu::MCarData::GetOpenModelType(list[i]) != 2)
                    {
                        runnable_car_exist = true;
                        break;
                    }
                }
            }

            if (list.size <= 0)
                runnable_car_exist = false;
            else
                ;

            if (!runnable_car_exist)
                list = nil;
            else
                ;
        }

        return list;
    }
    
    function getCategoryCarNum(category)
    {
        if (category != "favorite")
        {
            var listname = category + "_carlist";
            if (!CarData.defined(listname))
                return false;

            var carlist = CarData[listname];
            var size = carlist.size;
            var num = 0;

            for (var i = 0; i < size; i++)
            {
                if (main::game.isCarAvailable(carlist[i]))
                    num++;
            }

            return num;
        }
        else
        {
            return main::game.favorite_car.getSize();
        }
    }

    function getNumOfFavoriteCars()
    {
        return main::game.favorite_car.getSize();
    }
}

module PROJECT::ROOT::ByMaker
{
    function onActivate(context, event, item)
    {
        main::sound.play("ok");
        current_method = "ByMaker";
        start_page(context, MakerRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ByHistory
{
    function onActivate(context, event, item)
    {
        main::sound.play("ok");
        current_method = "ByHistory";
        start_page(context, HistoryRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ByFavorite
{
    function onActivate(context, event, item)
    {
        main::sound.play("ok");
        current_method = "ByFavorite";
        start_page(context, CarRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::MakerRoot
{
    Nation::VBox.actor = main::menu::MAnchorActor(Nation::VBox, ScrollWindow::clip::space, 0, 1);

    static selected_name = nil;
    //static original_flag_w = Nation::VBox["na00"].w; aspect correction probably

    static jp_nation_list = [
        "japan",
        "usa",
        "france",
        "german",
        "italy",
        "uk",
        "netherlands",
        "spain",
        "belgium",
        "australia",
        "sweden",
        "korea"
    ];

    static jp_nation_list2 = [
        "JP",
        "US",
        "FR",
        "DE",
        "IT",
        "GB",
        "NL",
        "ES",
        "BE",
        "AU",
        "SE",
        "KR"
    ];

    static tw_nation_list = [
        "japan",
        "usa",
        "france",
        "german",
        "italy",
        "uk",
        "netherlands",
        "spain",
        "belgium",
        "australia",
        "sweden",
        "korea"
    ];

    static tw_nation_list2 = [
        "JP",
        "US",
        "FR",
        "DE",
        "IT",
        "GB",
        "NL",
        "ES",
        "BE",
        "AU",
        "SE",
        "KR"
    ];

    static us_nation_list = [
        "usa",
        "japan",
        "france",
        "german",
        "italy",
        "uk",
        "netherlands",
        "spain",
        "belgium",
        "australia",
        "sweden",
        "korea"
    ];

    static us_nation_list2 = [
        "US",
        "JP",
        "FR",
        "DE",
        "IT",
        "GB",
        "NL",
        "ES",
        "BE",
        "AU",
        "SE",
        "KR"
    ];

    static uk_nation_list = [
        "uk",
        "france",
        "german",
        "italy",
        "spain",
        "japan",
        "usa",
        "netherlands",
        "belgium",
        "australia",
        "sweden",
        "korea"
    ];

    static uk_nation_list2 = [
        "GB",
        "FR",
        "DE",
        "IT",
        "ES",
        "JP",
        "US",
        "NL",
        "BE",
        "AU",
        "SE",
        "KR"
    ];

    static kr_nation_list = [
        "korea",
        "japan",
        "usa",
        "france",
        "german",
        "italy",
        "uk",
        "netherlands",
        "spain",
        "belgium",
        "australia",
        "sweden"
    ];

    static kr_nation_list2 = [
        "KR",
        "JP",
        "US",
        "FR",
        "DE",
        "IT",
        "GB",
        "NL",
        "ES",
        "BE",
        "AU",
        "SE"
    ];

    static cn_nation_list = [
        "usa",
        "france",
        "german",
        "italy",
        "uk",
        "netherlands",
        "spain",
        "belgium",
        "australia",
        "sweden",
        "japan",
        "korea"
    ];

    static cn_nation_list2 = [
        "US",
        "FR",
        "DE",
        "IT",
        "GB",
        "NL",
        "ES",
        "BE",
        "AU",
        "SE",
        "JP",
        "KR"
    ];

    static nation_list = MakerRoot[main::menu::MSystem::GetRegionCode() + "_nation_list"];
    static nation_list2 = MakerRoot[main::menu::MSystem::GetRegionCode() + "_nation_list2"];

    function getNumOfCars()
    {
        var result = 0;
        var nnum = nation_list.size;

        for (var n = 0; n < nnum; n++)
        {
            var nation = nation_list[n];
            var maker_list = MakerData[nation + "_makers"];
            var mnum = maker_list.size;

            for (var m = 0; m < mnum; m++)
            {
                var maker = maker_list[m];
                var carnum = ROOT::getCategoryCarNum(maker);
                result += carnum;
            }
        }

        return result;
    }

    static num_of_cars = 0;

    function onLoad(context)
    {
        num_of_cars = getNumOfCars();

        for (var i = 0; i < nation_list2.size; i++)
        {
            var na = Nation::VBox["na%02d".format(i)];
            if (na != nil)
            {
                na["bg"].image_path = "image/arcade/common/" + nation_list2[i] + ".png";

                //if (wide)
                //    na["bg"].w = original_flag_w * 0.85; // aspect correction probably
            }
        }
    }

    function setMagnifyActor(widget)
    {
        var actor = main::menu::MMoveActor(widget, widget.x, widget.y, 0.8 / 0.5);
        widget.actor = actor;
        widget.actor.ratio = 0.3;
        widget.actor.out = false;
        widget.actor.warp();
    }

    function onInitialize(context)
    {
        hidden.visible = false;
        ToolTip::tip.remove();
        ROOT::current_method = "ByMaker" // Original code weirdness, don't really need to access by root when it's already in scope here

        Tab::Maker.active = true;

        if (GameRoot::current_game == "SplitBattle")
        {
            Tab.visible = false;
            Tab2p.visible = true;
        }
        else
        {
            Tab.visible = true;
            Tab2p.visible = false;
        }

        var nnum = nation_list.size;

        for (var n = 0; n < nnum; n++)
        {
            var nation = nation_list[n];
            var maker_list = MakerData[nation + "_makers"];
            var mnum = maker_list.size;

            var guide = ScrollWindow::VBox["gd%02d".format(n)];
            var cy = (ScrollWindow::VBox.y + guide.y) + (guide.h / 2.0);
            var step_w = 150.0; // wide ? 120.0 : aspect correction
            var x = 32.0 + (step_w / 2.0);

            for (var m = 0; m < mnum; m++)
            {
                var maker = maker_list[m];
                var car_num = ROOT::getCategoryCarNum(maker);

                if (car_num <= 0)
                    continue;

                var item = hidden::Item.doCopy();
                item.name = maker;
                var path = "image/piece/tuner_logo2/" + maker + ".png";
                item["bg"].image_path = path;
                item.defineStatic("maker", maker);

                ScrollWindow::clip::space.appendChild(context, item);
                item.adjustSize();
                //if (wide)
                //    item.w = item.w * 0.4;
                //else aspect correction
                item.w = item.w * 0.5;
                item.h = item.h * 0.5;
                item.x = x - (item.w / 2.0);
                item.y = cy - (item.h / 2.0);

                setMagnifyActor(item["bg"]);
                x += step_w;
            }
        }

        ScrollWindow.updateGeometry();
        ScrollWindow::clip::space.w = ScrollWindow::clip::space.w + 32.0; // Original code weirdness, dunno why not just +=
        ScrollWindow::clip::space.h = ScrollWindow::clip::space.h + 32.0;

        Tab::Maker::info.text = ROOT::getCarsString(context, num_of_cars);
        Tab::History::info.text = ROOT::getCarsString(context, HistoryRoot::num_of_cars);
        Favorite::label.adjustScale();
        Favorite::info.text = ROOT::getCarsString(context, ROOT::getNumOfFavoriteCars());

        if (selected_name == nil)
            if (Tab.visible)
                MakerRoot.setFocus(Tab::Maker);
            else
                MakerRoot.setFocus(Tab2p::Maker);
        else if (selected_name == "Favorite")
            MakerRoot.setFocus(Favorite);
        else if (selected_name == "Maker")
            if (Tab.visible)
                MakerRoot.setFocus(Tab::Maker);
            else
                MakerRoot.setFocus(Tab2p::Maker);
        else if (selected_name == "History")
            MakerRoot.setFocus(Tab::History);
        else
        {
            var fwidget = ScrollWindow::clip::space[selected_name];
            ScrollWindow.warp(fwidget);
            MakerRoot.setFocus(fwidget);
        }
    }

    function onFinalize(context)
    {
        ScrollWindow::clip::space.clearChildren(context);
    }

    function onKeyPress(context, event) { return EVENTRESULT_CONTINUE; }

    function getCurrentCategory() 
    { 
        return selected_name; 
    }

    function remember_focus()
    {
        var fwidget = MakerRoot.getFocusedWidget();

        if (fwidget != nil)
            selected_name = fwidget.name;
    }

    function onCancel(context, event, item)
    {
        main::sound.play("cancel");
        selected_name = nil;

        if (GameRoot::current_game == "SplitBattle")
            start_page(context, SplitRoot);
        else
            start_page(context, CourseRoot);

        return EVENTRESULT_FILTER;
    }

    function onActivate(context, event, item)
    {
        main::sound.play("ok");
        
        remember_focus();

        start_page(context, CarRoot);

        return EVENTRESULT_FILTER;
    }

    function openGarage(context, slot)
    {
        main::sound.play("ok");

        var manager = main::menu::MMemoryCardManager("MODE_LOAD_GAME", slot);

        if (!manager.isConnect())
        {
            openConfirmDialog(context, DIALOG_ERROR, context.translate(MakerRoot, "MemoryCard", "no_memorycard_slot_n").format(slot + 1));
            return false;
        }

        var r = nil;
        var game = nil;

        while (1)
        {
            var m = checkGameData(context, 0, manager, slot);
            if (m == nil)
                return false; // 14582 possibly not a eventresult type return
            else
            {
                openProgressDialog(context, context.translate(MakerRoot, "MemoryCard", "now_loading"));
                [r, game] = loadGameDataForTrade(context, manager);

                closeProgressDialog(context);

                if (r != "OK")
                {
                    if (!reportGameDataError(context, 0, 0, r, slot))
                        return false; // 14621 possibly not a eventresult type return
                }
                else
                    break;
            }
        }

        if (game == nil)
        {
            openConfirmDialog(context, DIALOG_ERROR, "fatal error happend.");
            return false; // 14644 possibly not a eventresult type return
        }

        GarageRoot::resetCondition();
        GarageRoot::open(context, game, slot);
    }
}

module PROJECT::MakerRoot::Tab::Maker
{
    function onActivate(context, event, item)
    {
        var widget = ScrollWindow::clip::space.first;

        if (widget != nil)
        {
            main::sound.play("cursor");
            MakerRoot.setFocus(widget);
        }

        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        ToolTip::tip.key = "Maker";
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::MakerRoot::Tab::History
{
    function onActivate(context, event, item)
    {
        main::sound.play("ok");
        start_page(context, HistoryRoot);
        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        ToolTip::tip.key = "History";
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::MakerRoot::Tab2p::Maker
{
    function onActivate(context, event, item)
    {
        return Tab::Maker::onActivate(context, event, item);
    }

    function onFocusEnter(context, event)
    {
        return Tab::Maker::onFocusEnter(context, event);
    }
}

module PROJECT::MakerRoot::Tab2p::Slot1
{
    function onActivate(context, event, item)
    {
        openGarage(context, 0);
        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        ToolTip::tip.value = context.translate(MakerRoot, "TOOLTIP|Slot1");
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::MakerRoot::Tab2p::Slot2
{
    function onActivate(context, event, item)
    {
        openGarage(context, 1);
        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        ToolTip::tip.value = context.translate(MakerRoot, "TOOLTIP|Slot2");
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::MakerRoot::Favorite
{
    function onActivate(context, event, item)
    {
        var num = ROOT::getNumOfFavoriteCars();

        if (num <= 0)
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_ERROR, context.translate(MakerRoot, "no favorite cars"));
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");
        ROOT::current_method = "ByFavorite";
        remember_focus();
        start_page(context, CarRoot);

        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        ToolTip::tip.value = context.translate(MakerRoot, "TOOLTIP|Favorite").format(main::game.username);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::MakerRoot::hidden::Item
{
    function onFocusEnter(context, event)
    {
        event.widget["bg"].actor.out = true;

        var maker = event.widget["maker"];
        
        var num = ROOT::getCategoryCarNum(maker);
        var maker_name = context.translate(MakerRoot, "TunerName", maker);
        ToolTip::tip.value = maker_name + "    " + ROOT::getCarsString(context, num);

        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        event.widget["bg"].actor.out = false;
        return EVENTRESULT_FILTER;
    }
}