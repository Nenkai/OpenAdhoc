//---------------------------------------------------------------------------------------
// SelectRoomRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ROOT
{
    hidden.visible = false;
    WifiWarningPane.visible = false;

    static MODE_BATTLE = 0;
    static MODE_TRADE = 1;
    static MODE_GIVE = 2;
    static MODE_TAKE = 3;

    static sMode = MODE_BATTLE;
    static sWatcher = nil;
    static sWatcherRunning = false;

    method seekRoom(context, groupName)
    {
        setCursor(context, "wait");

        main::pdiext::MSystemUtility::waitUntilScanFinish();

        var scan_result = main::pdiext::MSystemUtility::scanAdHoc();
        reflectScanResult(context, scan_result);

        var existing_info = nil;
        if (scan_result != nil)
        {
            foreach (var info in scan_result)
            {
                if (info["groupName"] == groupName)
                {
                    existing_info = info;
                    break;
                }
            }
        }

        setCursor(context, "default");

        return existing_info;
    }

    method enterRoom(context, groupName, room_no)
    {
        setCursor(context, "wait");

        sWatcherRunning = false;

        main::GlobalStatus::game_context.battle_laps = 2;

        var join = false;
        var existing_info = seekRoom(context, groupName);

        if (existing_info != nil)
        {
            if (sMode == MODE_GIVE)
            {
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                                              context.translate(ROOT, "SHOULD_BE_HOST_GIVE"));
                sWatcherRunning = true;
                setCursor(context, "default");
                return false;
            }

            if (DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "DO_YOU_JOIN").format(groupName)))
            {
                if (!main::pdiext::MSystemUtility::joinAdHoc(existing_info))
                {
                    sWatcherRunning = true;
                    setCursor(context, "default");
                    return false;
                }
                join = true;
            }
            else
            {
                sWatcherRunning = true;
                setCursor(context, "default");
                return false;
            }
        }
        else
        {
            if (sMode == MODE_TAKE)
            {
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "SHOULD_BE_GUEST_TAKE"));
                sWatcherRunning = true;
                setCursor(context, "default");
                return false;
            }

            var res;
            if (sMode == MODE_GIVE)
                res = true;
            else
                res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "DO_YOU_CREATE").format(groupName));

            if (res)
            {
                if (sMode != MODE_GIVE)
                    existing_info = seekRoom(context, groupName);

                if (existing_info != nil)
                {
                    if (!DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "ALREADY_CREATED")))
                    {
                        sWatcherRunning = true;
                        setCursor(context, "default");
                        return false;
                    }
                    
                    setCursor(context, "wait");

                    if (!main::pdiext::MSystemUtility::joinAdHoc(existing_info))
                    {
                        sWatcherRunning = true;
                        setCursor(context, "default");
                        return false;
                    }
                    join = true;
                }
                else
                {
                    setCursor(context, "wait");

                    if (!main::pdiext::MSystemUtility::createAdHoc(groupName))
                    {
                        sWatcherRunning = true;
                        setCursor(context, "default");
                        return false;
                    }
                    join = false;
                }
            }
            else
            {
                sWatcherRunning = true;
                setCursor(context, "default");
                return false;
            }
        }

        setCursor(context, "wait");

        switch (sMode)
        {

            case MODE_TRADE:
                {
                    TradeRoot.setJoinMode(join);

                    var res = DialogUtil::openConfirmExecDialog(context,
                                                                nil,
                                                                context.translate(ROOT, "CONNECTING"),
                                                                nil,
                                                                context.translate(ROOT, "CONNECTING_FAILED"),
                                                                TradeRoot::startAdHocMatching, nil, nil);
                    if (res)
                    {
                        TradeRoot.setRoomNo(room_no);
                        setCursor(context, "default");
                        StartPageIn_XEffect(context, ROOT, TradeRoot);
                        return true;
                    }
                    else
                    {
                        main::pdiext::MSystemUtility::disconnectAdHoc();
                        sWatcherRunning = true;
                        setCursor(context, "default");
                        return false;
                    }
                }
                break;

            case MODE_GIVE:
            case MODE_TAKE:
                {
                    ShareRoot.setGiveMode(sMode == MODE_GIVE);
                    ShareRoot.setRoomNo(room_no);
                    ShareRoot.setJoinMode(join);

                    var res = DialogUtil::openConfirmExecDialog(context,
                                                                nil,
                                                                context.translate(ROOT, "CONNECTING"),
                                                                nil,
                                                                context.translate(ROOT, "CONNECTING_FAILED"),
                                                                ShareRoot::startAdHocMatching, nil, nil);
                    if (res)
                    {
                        setCursor(context, "default");
                        StartPageIn_XEffect(context, ROOT, ShareRoot);
                        return true;
                    }
                    else
                    {
                        main::pdiext::MSystemUtility::disconnectAdHoc();
                        sWatcherRunning = true;
                        setCursor(context, "default");
                        return false;
                    }
                }
                break;

            case MODE_BATTLE:
                {
                    main::GlobalStatus::game_context.course = main::gtengine::MSpecDB::NO_CODE64;
                    main::GlobalStatus::game_context.setCar(main::gtengine::MCarParameter());
                    main::GlobalStatus::game_context.battle_prev_order = -1;
                    main::GlobalStatus::game_context.battle_prev_number = -1;
                    main::GlobalStatus::game_context.battle_renchan_num = 0;


                    main::ORG.clearNetworkGameInformation();


                    main::GlobalStatus::game_context.battle_room_no = room_no;
                    main::GlobalStatus::game_context.battle_join_mode = join;
                    main::RaceOperator.clearPersonalStatus();
                    gGameStatus.user_profile.garage.rideCar(main::gtengine::MSpecDB::NO_CODE64, 0);
                    OnlineRoot.setJoinMode(main::GlobalStatus::game_context.battle_join_mode);
                    if (!join)
                        main::GlobalStatus::game_context.game_mode = main::gtengine::GameMode::ADHOC_BATTLE_AMA;
                    else
                        main::GlobalStatus::game_context.game_mode = -1;


                    main::GlobalStatus::game_context.battle_phase = 2;

                    var res = DialogUtil::openConfirmExecDialog(context,
                                                                nil,
                                                                context.translate(ROOT, "CONNECTING"),
                                                                nil,
                                                                context.translate(ROOT, "CONNECTING_FAILED"),
                                                                OnlineRoot::startAdHocMatching, nil, nil);
                    if (res)
                    {
                        setCursor(context, "default");
                        StartPageIn_XEffect(context, ROOT, OnlineRoot);
                        return true;
                    }
                    else
                    {
                        main::pdiext::MSystemUtility::disconnectAdHoc();
                        sWatcherRunning = true;
                        setCursor(context, "default");
                        return false;
                    }
                }
                break;
        }

        setCursor(context, "default");

        return false;
    }

    method checkWirelessSwitchState(context)
    {
        var wifi_on = main::pdistd::MNetworkInterface::isWirelessSwitchOn();

        var prev_dialog = WifiWarningPane.visible;
        var focused_widget = ROOT.getFocusedWidget();

        if (!wifi_on)
        {
            if (!prev_dialog)
                WifiWarningPane.visible = true;

            if (focused_widget != nil && focused_widget.name != "OK")
                ROOT.setFocus(WifiWarningPane::Dialog::Buttons::OK);

            IconBox.can_focus = false;
            Exit.can_focus = false;
        }
        else
        {
            if (prev_dialog)
                WifiWarningPane.visible = false;

            IconBox.can_focus = true;
            Exit.can_focus = true;
            if (focused_widget != nil && focused_widget.name == "OK")
                ROOT.setFocus(IconBox);

        }

        return wifi_on;
    }

    method reflectScanResult(context, ret)
    {
        if (ret != nil)
        {
            var ret_hash = [:];
            foreach (var info in ret)
                ret_hash[info["groupName"]] = true;

            for (var i = 0; i < 10; i++)
            {
                var w = IconBox.getItemWidget(i, context);
                if (w != nil)
                {
                    var previousState = w.bg_on.visible;
                    var active = ret_hash[w.gname] != nil;

                    w.bg_off.visible = !active;
                    w.bg_on.visible = active;

                    if (i == IconBox.focus_index && previousState != active)
                        w.onFocusEnter(context);
                }
            }
        }

    }

    method scanOnce(context)
    {
        if (!checkWirelessSwitchState(context))
            return;

        setCursor(context, "wait");
        reflectScanResult(context, main::pdiext::MSystemUtility::scanAdHoc());
        setCursor(context, "default");
    }

    method scanRegularly(context)
    {
        var state = main::pdiext::MSystemUtility::getAdHocScanState();
        if (state == main::pdistd::AdHocScanState::None)
        {
            main::pdiext::MSystemUtility::scanAdHocRequest();
        } 
        else if (state == main::pdistd::AdHocScanState::Scanning)
        {
        } 
        else if (state == main::pdistd::AdHocScanState::Finish)
        {
            reflectScanResult(context, main::pdiext::MSystemUtility::getAdHocScanResult());

            main::pdiext::MSystemUtility::scanAdHocRequest();
        }
    }

    method onTick(context)
    {
        if (!sWatcherRunning)
            return;

        if (!checkWirelessSwitchState(context))
            return;

        scanRegularly(context);
    }

    method setMode(mode)
    {
        sMode = mode;
    }

    method onInitialize(context)
    {
        IconBox.h_adjustment = main::menu::MAdjustment();
        HScrollbar.adjustment = IconBox.h_adjustment;

        IconBox.set(context);

        Header::TextFace.text = context.translate(ROOT, ["TitleBattle", "TitleTrade", "TitleGive", "TitleTake"][sMode]);

        ToolTip::tip.remove();
        ToolTip::tip.action_type = 1;
        ToolTip::tip.visible = false;

        ROOT.setFocus(IconBox);

        sWatcherRunning = false;
        WifiWarningPane.visible = false;

        context.pushEvent(main::menu::MFunctionEvent(on_initialize, context));
    }

    method on_initialize(context)
    {
        scanOnce(context);

        sWatcher = WatcherUtil::Create(context, onTick, 60);
        sWatcherRunning = true;

        SoundUtil::BGMPlayGroup('menu', "online");
    }

    method onPageInEnd(context)
    {
        BalloonTip.initialize(context);

        ToolTip::tip.visible = true;
        ToolTip::tip.value = "";

        var focus_w = ROOT.getFocusWidget();
        if (focus_w != nil && focus_w['onFocusEnter'] != nil)
            focus_w.onFocusEnter(context);
    }

    method onFinalize(context)
    {
        if (sWatcher != nil)
        {
            WatcherUtil::Delete(sWatcher);
            sWatcher = nil;
        }

        IconBox.setItemCount(0, 0);
    }

    method onActivate(context)
    {
        if (!main::pdistd::MNetworkInterface::isWirelessSwitchOn())
            return EVENTRESULT_FILTER;

        var index = IconBox.focus_index;
        var w = IconBox.getItemWidget(index, context);
        if (w.is_dummy)
        {
            main::sound.play("cancel");
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");

        enterRoom(context, w.gname, w.room_no);

        return EVENTRESULT_FILTER;
    }

    method onExit(context)
    {
        sWatcherRunning = false;

        main::pdiext::MSystemUtility::disconnectAdHoc();

        main::GlobalStatus::game_context.game_mode = -1;
        main::GlobalStatus::game_context.battle_phase = 0;

        switch (sMode)
        {
            case MODE_BATTLE:
                BranchRoot.setOpenMode(BranchRoot::MODE::ADHOC);
                BranchRoot.setFocusItem("adhoc_battle");
                break;
            case MODE_TRADE:
                BranchRoot.setOpenMode(BranchRoot::MODE::TRADE_AND_SHARE);
                BranchRoot.setFocusItem("trade");
                break;
            case MODE_GIVE:
                BranchRoot.setOpenMode(BranchRoot::MODE::TRADE_AND_SHARE);
                BranchRoot.setFocusItem("give");
                break;
            case MODE_TAKE:
                BranchRoot.setOpenMode(BranchRoot::MODE::TRADE_AND_SHARE);
                BranchRoot.setFocusItem("take");
                break;
        }

        StartPageOut_XEffect(context, ROOT, BranchRoot);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.setFocus(Exit);
        return EVENTRESULT_FILTER;
    }
}

module ROOT::Exit
{
    method onActivate(context)
    {
        main::sound.play("ok");
        ROOT.onExit(context);
        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context)
    {
        var balloon_text = context.translate(ROOT, "Arcade", "close");
        BalloonTip.set_value(context, self, balloon_text, 12);
        return EVENTRESULT_FILTER;
    }

    method onFocusLeave(context)
    {
        BalloonTip.reset_value();
        return EVENTRESULT_FILTER;
    }
}

module ROOT::IconBox
{
    method set(context)
    {
        self.setItemTemplate(context, hidden::Item);
        self.setItemCount(0, 0);

        var item_size = 10;
        if (item_size < 10)
            item_size = 10;

        var lines = 2;

        self.setItemCount((item_size + 1) / lines, lines);

        for (var i = 0; i < 10; i++)
        {
            var w = self.getItemWidget(i, context);
            if (w != nil)
            {
                w.gname = ["race%02d", "trade%02d", "share%02d", "share%02d"][sMode].format(i + 1);
                w.room_no = i;
                w.bg_off.visible = true;
                w.bg_on.visible = false;
            }
        }

        ToolTip::tip.value = "";
    }

    method onVisibleNotify(context, indexes)
    {
        foreach (var i in indexes)
        {
            if (IconBox.getItemVisible(i))
            {
                var w = IconBox.getItemWidget(i, context);
                if (w != nil)
                {
                    var number_path = "image/gt5m/icon/room_n%02d.png".format(i + 1);
                    w.bg_on.ImageFace.image_path = number_path;
                    w.bg_on.ImageFace.doInitialize(context);
                    w.bg_off.ImageFace.image_path = number_path;
                    w.bg_off.ImageFace.doInitialize(context);
                }
            }
        }
    }

    method onFocusEnter(context)
    {
        var w = self.getItemWidget(self.focus_index, context);
        ROOT.setFocus(w);

        return EVENTRESULT_FILTER;
    }

    method onFocusLeave(context)
    {
        BalloonTip.reset_value();

        self.v_magnify = 1.0;
        self.h_magnify = 1.0;

        return EVENTRESULT_FILTER;
    }

    method onFocusNotify(context, new_index, old_index)
    {
        self.v_magnify = 1.0;
        self.h_magnify = 1.0;

        var new_w = self.getItemWidget(new_index, context);
        if (new_w != nil)
            ROOT.setFocus(new_w);

        return EVENTRESULT_FILTER;
    }
}

module ROOT::hidden::Item
{
    attribute gname = "";
    attribute room_no = 0;
    attribute is_dummy = false;

    method onFocusEnter(context)
    {
        if (!is_dummy)
        {
            IconBox.v_magnify = 1.2;
            IconBox.h_magnify = 1.2;

            var index = IconBox.focus_index;
            var active = self.bg_on.visible;
            var message;
            if (active)
                message = context.translate(ROOT, "THERE_IS_SOMEBODY");
            else
                message = context.translate(ROOT, "THERE_IS_NOBODY");
            set_balloontip(context, message);

            ToolTip::tip.value = context.translate(ROOT, "ROOM_NO").build(index + 1);
        } 
        else 
        {
            BalloonTip.reset_value();
            ToolTip::tip.value = "";
        }

        return EVENTRESULT_FILTER;
    }

    method set_balloontip(context, txt)
    {
        var index = IconBox.focus_index;
        var base_point = self;
        if ((index - 4) > -1 && (index + 4) < 10)
        {
            if (index & 1)
                base_point = IconBox::CenterBottom;
            else
                base_point = IconBox::CenterTop;
        }
        BalloonTip.set_value(context, base_point, txt, 35);
    }
}

module ROOT::WifiWarningPane::Dialog::Buttons::OK
{
    attribute balloon_text = nil;

    method onInitialize(context)
    {
        self.balloon_text = context.translate(ROOT, "Balloon", "OK");
        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context)
    {
        if (nil != self.balloon_text)
        {
            BalloonTip.set_value(context, self, self.balloon_text, self.h * 0.5);
        }
        return EVENTRESULT_FILTER;
    }

    method onActivate(context)
    {
        main::sound.play("ok");
        onExit(context);
        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        return EVENTRESULT_FILTER;
    }
}