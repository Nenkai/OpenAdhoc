

















module RaceModeRoot
{
    hidden.visible = false;

    attribute finder_ = nil;

    method open(context, from_prev_page)
    {
        context.pushPage(RaceModeRoot);
        return true;
    }

    method close(context)
    {
        LeaveDetectUtil::end(context);
        
        ArcadeProject::ignorePadEvent(true, true);

        self.FadeEffect.reverse = true;
        self.FadeEffect.on_effect_end = self.close_end;
        self.FadeEffect.start();
    }

    method close_end(context)
    {
        self.FadeEffect.reverse = false;
        self.FadeEffect.reset();
        context.closePage(self);

        ArcadeProject::ignorePadEvent(false);
    }

    method onKeyPress(context, event)
    {
        LeaveDetectUtil::activated(context, event);
        return EVENTRESULT_CONTINUE;
    }

    method onInitialize(context)
    {
        RaceModeRoot::player.text = "";
        RaceModeRoot::PlayerIcon.image_path = "";
        RaceModeRoot::ModeName.text = "";

        RaceModeRoot.setFocus(nil);

        RaceModeRoot.Exit.appear(context, true);
        RaceModeRoot::Exit.insensitive = true;

        context.pushEvent(main::menu::MFunctionEvent(postInitialize, context));
    }

    method postInitialize(context)
    {
        OverLapRoot.onRaceModeSelect(context);

        self.FadeEffect.start();

        SoundUtil::MenuBGMCrossfadeGroup("menu", 0.0, 3.0);

        if (0 < ArcadeProject.gLeaveDetectTime)
        {
            LeaveDetectUtil::reset(context);
            LeaveDetectUtil::begin(context, ArcadeProject.gLeaveDetectTime, RaceModeRoot, ArcadeProject.onLeaveDetect, nil, true);
        }

        ModeSelector.appear(context, false, true);

        SaveDataUtilGT5::checkSaveEveryWhere(context);
    }

    method onFinalize(context) {}
}

module RaceModeRoot::ModeSelector
{
    static sDuration;
    attribute finder_;

    method appear(context, warp, on_root_open)
    {
        ArcadeProject::ignorePadEvent(true);

        var end_move = method(context) 
        {
            self.insensitive = false;
            RaceModeRoot::Exit.insensitive = false;
            context.pushEvent(main::menu::MFunctionEvent(self.finder_.onFocus, context, RaceModeRoot));

            ArcadeProject::ignorePadEvent(false);
            self.MoveEffect.on_effect_end = nil;
        };

        if (warp)
        {
            self.MoveEffect.reverse = false;
            self.MoveEffect.setStartDuration(0, 0.0);
            self.MoveEffect.on_effect_end = self.*end_move;
            self.MoveEffect.start();
            self.MoveEffect.warp();
        } 
        else 
        {
            self.MoveEffect.reverse = false;

            if (on_root_open)
                self.MoveEffect.setStartDuration(0, self.sDuration);
            else
                self.MoveEffect.setStartDuration(0, 0.0);

            self.MoveEffect.on_effect_end = self.*end_move;
            self.MoveEffect.start();
        }
    }

    method hide(context, warp)
    {
        self.insensitive = true;
        RaceModeRoot.setFocus(nil);

        BalloonTip.reset_value();

        if (warp)
        {
            self.MoveEffect.reverse = true;
            self.MoveEffect.setStartDuration(0, 0.0);
            self.MoveEffect.start();
            self.MoveEffect.warp();
        } 
        else 
        {
            self.MoveEffect.reverse = true;
            self.MoveEffect.setStartDuration(0, 0.0);
            self.MoveEffect.start();
        }
    }

    method onLoad(context)
    {
        self.sDuration = self.MoveEffect.getStartDuration(0);
    }

    method onUnLoad(context)
    {
        self.sDuration = nil;
    }

    method onInitialize(context)
    {
        var initial_data = self.getInitialData(context);
        self.finder_ = UIKitProject::FinderRoot.setCopy(context, self, initial_data, false);

        hide(context, true);
    }

    method onFinalize(context)
    {
        if (self.finder_ != nil)
        {
            var parent = self.finder_.parent;
            parent.removeChild(context, self.finder_);
            self.finder_ = nil;
        }
    }

    method cb_on_activate(context, folder_data, func_close, arg)
    {
        var candidate_data = folder_data.getItemData();
        main::GAME_STATUS.user_profile.context.arcade_game_mode = candidate_data.value_;
        
        var arcade_mode = candidate_data.value_;

        if (!ArcadeProject::getArcadeModeEnable(arcade_mode))
        {
            main::sound.play("disable");

            var msg = context.translate(RaceModeRoot, "Arcade", "cannot_select_in_this_version");
            
            LeaveDetectUtil::suspend(context);
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
            LeaveDetectUtil::resume(context);

            return;
        }

        gArcadeSequence.setArcadeMode(arcade_mode);
        ArcadeProject.history['RaceModeRoot::SelectedArcadeMode'] = arcade_mode;

        if (ArcadeModeEnum::TIME_ATTACK == arcade_mode)
        {
            var file = "";
            if ("sls" == GAME_STATUS.user_profile.option.demo_version_code)
            {
                file = "/textdata/gt5/event_race/dc_topgear_timetrial_2011_offline.xml";
            }
            
            if ("86gp_final" == GAME_STATUS.user_profile.option.demo_version_code)
            {
                file = "/textdata/demo/arcade_timetrial_86gp_final.xml";
            }

            if (file != "")
            {
                var fst = main::pdistd::ReadFile(file);
                var buf = fst["buffer"];
                if (buf != nil)
                {
                    var gp_list = GameParameterUtil::parseXML(buf);
                    var gp = gp_list[0];
                    gArcadeSequence.setGP(gp);
                }
            }
        }

        if (arcade_mode == ArcadeModeEnum::SINGLE_RACE)
        {
            self.hide(context, false);
            
            context.sync(0.2);

            Difficulty.appear(context, false, false);
        } 
        else 
        {
            main::GAME_STATUS.user_profile.context.arcade_difficulty = ArcadeProject::DifficultyEnum::NONE;
            gArcadeSequence.moveNextPage(context);
        }
    }

    method cb_on_cancel(context, finder_data, func_popup_close)
    {
        main::sound.play("cancel");
        ArcadeProject.history['RaceModeRoot::SelectedArcadeMode'] = nil;

        RaceModeRoot.setFocus(Exit);
    }

    method cb_focus_enter(context, candidate_data, item_w, old_candidate_data, old_item_w, arg)
    {
        ModeName.text = context.translate(RaceModeRoot, "E_LABEL_%{candidate_data.label_}");
        ModeName.TransientReset();
        Description.text = context.translate(RaceModeRoot, "DESCRIPTION_%{candidate_data.label_}");
        Description::FadeEffect.restart();

        var txt = context.translate(RaceModeRoot, "LABEL_%{candidate_data.label_}");
        BalloonTip.set_value(context, item_w, txt, 24);

        if (ArcadeModeEnum::SPLIT_BATTLE == candidate_data.value_)
        {
            player.text = context.translate(RaceModeRoot, "2_PLAYERS");
            PlayerIcon.image_path = "image/gt5/icon/sign_2p.dds";
        }
        else
        {
            player.text = context.translate(RaceModeRoot, "SINGLE_PLAYER");
            PlayerIcon.image_path = "image/gt5/icon/sign_1p.dds";
        }

        ListBox3D.focus_index = candidate_data.item_index_;
    }

    method cb_init_item(context, candidate_data, item_w, arg)
    {
        var arcade_mode = candidate_data.value_;
        var disable = false;
        switch(arcade_mode)
        {
            case ArcadeModeEnum::SINGLE_RACE:
                disable = !main::GAME_STATUS.user_profile.option.visible_icon_singlerace;
                break;

            case ArcadeModeEnum::TIME_ATTACK:
                disable = !main::GAME_STATUS.user_profile.option.visible_icon_timetrial;
                break;

            case ArcadeModeEnum::DRIFT_ATTACK:
                disable = !main::GAME_STATUS.user_profile.option.visible_icon_drifttrial;
                break;

            case ArcadeModeEnum::SPLIT_BATTLE:
                disable = !main::GAME_STATUS.user_profile.option.visible_icon_split;
                break;

            case ArcadeModeEnum::MY_GAME:
                disable = !main::GAME_STATUS.user_profile.option.visible_icon_usercustom;
                break;
        }

        item_w.disable.visible = disable;
    }

    method getInitialData(context)
    {
        var candidates = Array();
        var focus_index = 0;

        var data_list;

        if ("demo" == GetVersionBranch())
        {
            data_list = [
                ['value': ArcadeModeEnum::SINGLE_RACE, 'label': "SINGLE_RACE", 'image': "image/gt5/thumbnail/arcade_singlerace.dds"],
                ['value': ArcadeModeEnum::TIME_ATTACK, 'label': "TIME_ATTACK", 'image': "image/gt5/thumbnail/arcade_timetrial.dds"],
                ['value': ArcadeModeEnum::DRIFT_ATTACK, 'label': "DRIFT_ATTACK", 'image': "image/gt5/thumbnail/arcade_drifttrial.dds"],
                ['value': ArcadeModeEnum::SPLIT_BATTLE, 'label': "SPLIT_BATTLE", 'image': "image/gt5/thumbnail/arcade_2p.dds"]];
        }
        else
        {
            data_list = [
                ['value': ArcadeModeEnum::SINGLE_RACE, 'label': "SINGLE_RACE", 'image': "image/gt5/thumbnail/arcade_singlerace.dds"],
                ['value': ArcadeModeEnum::TIME_ATTACK, 'label': "TIME_ATTACK", 'image': "image/gt5/thumbnail/arcade_timetrial.dds"],
                ['value': ArcadeModeEnum::DRIFT_ATTACK, 'label': "DRIFT_ATTACK", 'image': "image/gt5/thumbnail/arcade_drifttrial.dds"],
                ['value': ArcadeModeEnum::SPLIT_BATTLE, 'label': "SPLIT_BATTLE", 'image': "image/gt5/thumbnail/arcade_2p.dds"]];
        }



        var selected_arcade_mode = ArcadeProject.history['RaceModeRoot::SelectedArcadeMode'];
        var focus_index;
        for (var i = 0; i < data_list.size; i++)
        {
            var data = data_list[i];
            var candidate_data = UIKitProject::FinderRoot.CandidateData(data['value'], data['label'], data['balloon'], data['image']);
            candidates.push(candidate_data);


            if (data['value'] == selected_arcade_mode)
                focus_index = i;
        }

        var initial_data = UIKitProject::FinderRoot.InitialData();
        initial_data.view_type_ = UIKitProject::FinderRoot::ViewType::SCROLL_H;
        initial_data.item_type_ = UIKitProject::FinderRoot::ItemType::COMMON_THUMB_S;
        initial_data.candidates_ = candidates;
        initial_data.translate_page_ = RaceModeRoot;
        initial_data.load_image_from_disk_ = false;
        initial_data.cb_init_item_ = self.cb_init_item;
        initial_data.cb_on_activate_ = self.cb_on_activate;
        initial_data.cb_on_cancel_ = self.cb_on_cancel;
        initial_data.cb_focus_enter_ = self.cb_focus_enter;
        initial_data.focus_index_ = focus_index;
        initial_data.extended_item_ = hidden::Thumb;
        initial_data.import_iconbox_parameter_ = self.IconBox;

        return initial_data;
    }
}

module RaceModeRoot::Difficulty
{
    static sDuration;
    attribute finder_;

    method appear(context, warp, on_root_open)
    {
        ArcadeProject::ignorePadEvent(true);

        var end_move = method(context) 
        {
            self.insensitive = false;
            self.finder_.setFocusIndex(0);
            context.pushEvent(main::menu::MFunctionEvent(self.finder_.onFocus, context, RaceModeRoot));
            ArcadeProject::ignorePadEvent(false);
            self.MoveEffect.on_effect_end = nil;
        }

        RaceModeRoot.Exit.hide(context, warp);

        self.MoveEffect.reverse = false;
        if (on_root_open)
            self.MoveEffect.setStartDuration(0, self.sDuration);
        else
            self.MoveEffect.setStartDuration(0, 0.0);

        self.MoveEffect.on_effect_end = self.*end_move;
        self.MoveEffect.start();
        if (warp)
            self.MoveEffect.warp();
    }

    method hide(context, warp)
    {
        self.insensitive = true;
        RaceModeRoot.setFocus(nil);

        RaceModeRoot.Exit.appear(context, false);

        BalloonTip.reset_value();

        if (warp)
        {
            self.MoveEffect.reverse = true;
            self.MoveEffect.setStartDuration(0, 0.0);
            self.MoveEffect.start();
            self.MoveEffect.warp();
        } 
        else 
        {
            self.MoveEffect.reverse = true;
            self.MoveEffect.setStartDuration(0, 0.0);
            self.MoveEffect.start();
        }
    }

    method onLoad(context)
    {
        self.sDuration = self.MoveEffect.getStartDuration(0);
    }

    method onUnLoad(context)
    {
        self.sDuration = nil;
    }

    method onInitialize(context)
    {
        var initial_data = self.getInitialData(context);
        self.finder_ = UIKitProject::FinderRoot.setCopy(context,
            self,
            initial_data,
            false);
        hide(context, true);
    }

    method onFinalize(context)
    {
        if (self.finder_ != nil)
        {
            var parent = self.finder_.parent;
            parent.removeChild(context, self.finder_);
            self.finder_ = nil;
        }
    }


    method cb_on_activate(context, folder_data, func_close, arg)
    {
        var candidate_data = folder_data.getItemData();
        main::GAME_STATUS.user_profile.context.arcade_difficulty = candidate_data.value_;

        gArcadeSequence.moveNextPage(context);
    }

    method cb_on_cancel(context, finder_data, func_popup_close)
    {
        main::sound.play("cancel");

        self.hide(context, false);

        context.sync(0.2);

        ModeSelector.appear(context, false, false);
    }

    method cb_focus_enter(context, candidate_data, item_w, old_candidate_data, old_item_w, arg)
    {
        var txt = context.translate(RaceModeRoot, "LABEL_%{candidate_data.label_}");
        BalloonTip.set_value(context, item_w, txt, 24);
    }
    
    method getInitialData(context)
    {
        var candidates = Array();
        var focus_index = 0;

        var data_list = [
            ['value': ArcadeProject::DifficultyEnum::EASY, 'label': "DIFFICULTY_EASY", 'image': "image/gt5/icon/arcade_level_C.dds"],
            ['value': ArcadeProject::DifficultyEnum::NORMAL, 'label': "DIFFICULTY_NORMAL", 'image': "image/gt5/icon/arcade_level_B.dds"],
            ['value': ArcadeProject::DifficultyEnum::PRO, 'label': "DIFFICULTY_PRO", 'image': "image/gt5/icon/arcade_level_A.dds"],
        ];

        for (var i = 0; i < data_list.size; i++)
        {
            var data = data_list[i];
            var candidate_data = UIKitProject::FinderRoot.CandidateData(data['value'], data['label'], data['balloon'], data['image']);
            candidates.push(candidate_data);
        }

        var initial_data = UIKitProject::FinderRoot.InitialData();
        initial_data.view_type_ = UIKitProject::FinderRoot::ViewType::SCROLL_H;
        initial_data.item_type_ = UIKitProject::FinderRoot::ItemType::COMMON_THUMB_S;
        initial_data.candidates_ = candidates;
        initial_data.translate_page_ = RaceModeRoot;
        initial_data.load_image_from_disk_ = false;
        initial_data.cb_on_activate_ = self.cb_on_activate;
        initial_data.cb_on_cancel_ = self.cb_on_cancel;
        initial_data.cb_focus_enter_ = self.cb_focus_enter;
        initial_data.focus_index_ = focus_index;
        initial_data.import_iconbox_parameter_ = self.IconBox;

        return initial_data;
    }
}


module RaceModeRoot::ListBox3D
{
    static images;
    images = [
        "image/gt5/flyer/flyer_arcade_singlerace.dds",
        "image/gt5/flyer/flyer_arcade_timetrial.dds",
        "image/gt5/flyer/flyer_arcade_drifttrial.dds",
        "image/gt5/flyer/flyer_arcade_2p.dds"
    ];


    function onInitialize(context)
    {
        hidden::Item::ImageFace.image_path = "";
        ListBox3D.setItemTemplate(context, hidden::Item);
        ListBox3D.setItemCount(images.size);
    }

    method onVisibleNotify(context, indexes)
    {
        foreach (var i in indexes)
        {
            if (self.getItemVisible(i))
            {
                var w = self.getItemWidget(i, context);
                if (w != nil)
                {
                    var ii = i % images.size;
                    w.ImageFace.image_path = images[ii];
                }
            }
        }
    }
}

module RaceModeRoot::Exit
{
    method appear(context, warp)
    {
        self.insensitive = false;
        self.FadeActor.reverse = false;
        self.FadeActor.start();
        if (warp)
            self.FadeActor.warp();
    }

    method hide(context, warp)
    {
        self.insensitive = true;
        self.FadeActor.reverse = true;
        self.FadeActor.start();
        if (warp)
            self.FadeActor.warp();
    }

    method onActivate(context)
    {
        main::sound.play("return");

        gArcadeSequence.movePrevPage(context);

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context, event)
    {
        BalloonTip.set_value(context,
            event.widget,
            context.translate(RaceModeRoot, "EXIT"), 0);
        return EVENTRESULT_STOP;
    }

    method onFocusLeave(context, event)
    {
        BalloonTip.reset_value();
        return EVENTRESULT_STOP;
    }
}