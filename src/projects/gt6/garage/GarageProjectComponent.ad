module GarageProjectComponent::DialogParts::DialogFrame
{

    method appear(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = false;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }


    method hide(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = true;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }


    method onFinalize(context)
    {
        self.actor = nil;
    }
}

module GarageProjectComponent::DialogParts::DialogFrame::Pane::Head
{
    SCALE_WIDGET_SDTV(label, 2.4);

    method setText(text)
    {
        Close::Circle::label.text = text;
        Close::Circle_i::label.text = text;
        Close::Cross::label.text = text;
        Close::Cross_i::label.text = text;
    }

    method onInitialize(context)
    {
        if (pdiext::MSystemConfiguration::GetEnterButtonAssign() == "circle")
        {
            Close::Circle.visible = false;
            Close::Circle_i.visible = false;
            Close::Cross.visible = true;
            Close::Cross_i.visible = true;
        }
        else
        {
            Close::Circle.visible = true;
            Close::Circle_i.visible = true;
            Close::Cross.visible = false;
            Close::Cross_i.visible = false;
        }
    }
}

module GarageProjectComponent::DialogParts::SettingFrame
{
    SCALE_WIDGET_SDTV(ToolTip::tip, 2.6);

    attribute scrolled_body_h;

    method appear(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = false;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method hide(warp = false, period = 0.25)
    {
        if (self.actor == nil)
            self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = period;
        self.actor.out = true;
        self.actor.restart();
        if (warp)
            self.actor.warp();
        return period;
    }

    method onFinalize(context)
    {
        self.actor = nil;
    }

    method adjust_scrolled_body(scrolled_body_max_h)
    {
        if (scrolled_body_max_h == nil)
            scrolled_body_max_h = self.scrolled_body_h;

        Pane::ScrolledBody::clip.minimum_height = self.scrolled_body_h;
        Pane::ScrolledBody::clip.h = self.scrolled_body_h;

        var clip = Pane::ScrolledBody::clip;
        var space = clip.space;
        clip.updateGeometry();

        var clip_h = space.inner_pad_top + space.inner_pad_bottom;
        var scrollable = false;

        for (var w = space.first; w != nil; w = w.next)
        {
            if (!w.visible || !w.is_enable)
                continue;

            if (clip_h + w.h > scrolled_body_max_h)
                break;

            clip_h += w.h;
        }

        space.x = 0.0;
        space.y = 0.0;

        space.w = clip.w;
        space.minimum_width = clip.w;
        
        space.h = clip_h;
        space.minimum_height = clip.h;

        clip.h = clip_h;
        clip.minimum_height = clip_h;
    }

    method onRealize(context)
    {
        self.scrolled_body_h = Pane::ScrolledBody::clip.h;
    }

    method onInitialize(context)
    {
        var adj = main::menu::MAdjustment();
        Pane::ScrolledBody::VScrollbar.adjustment = adj;
        Pane::ScrolledBody::clip.v_adjustment = adj;
    }
}

module GarageProjectComponent::DialogParts::SettingFrame::Pane::Head
{
    SCALE_WIDGET_SDTV(label, 2.4);

    method setText(text)
    {
        Close::Circle::label.text = text;
        Close::Circle_i::label.text = text;
        Close::Cross::label.text = text;
        Close::Cross_i::label.text = text;
    }

    method onInitialize(context)
    {
        if (pdiext::MSystemConfiguration::GetEnterButtonAssign() == "circle")
        {
            Close::Circle.visible = false;
            Close::Circle_i.visible = false;
            Close::Cross.visible = true;
            Close::Cross_i.visible = true;
        }
        else
        {
            Close::Circle.visible = true;
            Close::Circle_i.visible = true;
            Close::Cross.visible = false;
            Close::Cross_i.visible = false;
        }
    }
}

module GarageProjectComponent::DialogParts::Button
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module GarageProjectComponent::DialogParts::Pulldown
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module GarageProjectComponent::DialogParts::Pulldown::OptionMenu
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    attribute decide_callback;

    method onRealize(manager)
    {
        self.copy_selected_item = false;
        self.popup.visible = true;
        self.decide_callback = nil;
    }

    method pulldownValueChanged(context)
    {
        var w = self.getItem(self.index);
        if (w != nil)
        {
            var w2 = self;
            w2.label.text = w.label.text;
            w2.label.abbreviate = true;
            if (w2.label_i != nil)
            {
                w2.label_i.text = w.label.text;
                w2.label_i.abbreviate = true;
            }
        }
    }

    method onInitialize(context)
    {
        self.pulldownValueChanged(context);
    }

    method onFinalize(context)
    {
        self.decide_callback = nil;
    }

    method onValueChanged(context)
    {
        self.pulldownValueChanged(context);
        if (self.decide_callback != nil)
            decide_callback(context, self.index, self);
    }
}

module GarageProjectComponent::DialogParts::PulldownItem
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module GarageProjectComponent::DialogParts::CheckBox
{
    SCALE_WIDGET_SDTV(label, 2.4);

    attribute is_checkbox = true;
}

module GarageProjectComponent::DialogParts::CheckBox::vbox::CheckButton
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    method onActivate(context)
    {
        if (self.is_enable && !self.insensitive)
        {
            main::sound.play("checkbox");
            self.active = !self.active;

            if (self['onValueChanged'] != nil)
                self.onValueChanged(context);
        }

        return EVENTRESULT_CONTINUE;
    }
}

module GarageProjectComponent::DialogParts::GroupHeader
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module GarageProjectComponent::ListMenu::ListMenu
{
    attribute cb_vn;
    attribute cb_fn;

    method onRealize(manager)
    {
        self.setDisplayEmpty(false);
    }

    method setCategoryComponent(context, widgets)
    {
        if (widgets.isInstanceOf(menu::MWidget))
            widgets = [widgets];

        foreach (var w in widgets)
            self.Categories::ScrolledWindow::clip::space.appendChild(context, w);
    }

    method clearCategoryComponent(context)
    {
        var space = self.Categories::ScrolledWindow::clip::space;
        foreach (var w in space.getChildList())
        {
            if (w.name == "Header")
                continue;

            space.removeChild(w);
        }
    }

    method getListBox()
    {
        return self.ListWindow::clip::ListBox;
    }

    method setDisplayEmpty(visible, text)
    {
        if (text != nil)
            self.ListWindow::Empty::TextFace.text = text;

        self.ListWindow::Empty.visible = visible;
    }
}

module GarageProjectComponent::ListMenu::ListMenu::ListWindow::clip::ListBox
{
    method onInitialize(context)
    {
        var adj = main::menu::MAdjustment();
        self.clip::VScrollbar.adjustment = adj;
        self.v_adjustment = adj;
    }

    method onFocusEnter(context)
    {
        var w = self.getItemWidget(self.focus_index, context);
        var root = context.getRootWindow();
        root.setFocus(w);
        return EVENTRESULT_FILTER;
    }
}

module GarageProjectComponent::ListMenu::Category
{
    attribute value;

    method setCategoryItemComponent(context, widgets)
    {
        if (widgets.isInstanceOf(menu::MWidget))
            widgets = [widgets];

        foreach (var w in widgets)
            self.VBox.appendChild(context, w);
    }

    method setText(text)
    {
        self.Label.text = text;
    }
}

module GarageProjectComponent::ListMenu::CategoryItem
{
    attribute value;

    method setText(text)
    {
        self.Label.text = text;
        self.Label_i.text = text;
        self.Label_a.text = text;
    }
}

module GarageProjectComponent::ListMenu::CarItem
{
    attribute value;

    method onRealize(manager)
    {
        resetInfo();
    }

    method resetInfo()
    {
        self.Invalid.visible = false;
        self.Favorite.visible = false;
        self.Riding.visible = false;

        self.Number::Label.text = "";
        self.Name::Label.text = "";
        self.Dealer::Label.text = "";
        self.PP::Label.text = "";
        self.Power::Label.text = "";
        self.Weight::Label.text = "";
        self.Drive::Label.text = "";
        self.Aspiration::Label.text = "";
        self.Year::Label.text = "";
        
        self.Thumbnail.image_path = "";
        self.isBlank(false);
        self.visibleCheckbox(false);
        self.insensitiveCheckbox(false);
        self.activeCheckbox(false);
    }

    method isBlank(is_blank)
    {
        if (is_blank == nil)
            return self.active2;
        else
        {
            self.active2 = is_blank;
            return true;
        }
    }

    method isRiding(is_riding)
    {
        if (is_riding == nil)
            return self.Riding.visible;
        else
        {
            self.Riding.visible = is_riding;
            return true;
        }
    }

    method visibleCheckbox(visible)
    {
        if (visible == nil)
            return self.active3;
        else
        {
            self.active3 = visible;
            return true;
        }
    }

    method insensitiveCheckbox(_insensitive)
    {
        if (_insensitive == nil)
            return self.Checkbox::Check.insensitive;
        else
        {
            self.Checkbox::Check.insensitive = _insensitive;
            return true;
        }
    }

    method activeCheckbox(active)
    {
        if (active == nil)
        {
            return self.Checkbox::Check.active;
        }
        else if (self.Checkbox::Check.insensitive && active)
        {
            return false;
        }
        else
        {
            self.Checkbox::Check.active = active;
            return true;
        }
    }

    method setInfo(context, mgarage_car, number, is_stockyard)
    {
        if (mgarage_car.isInstanceOf(gtengine::MGarageCar))
        {
            if (number != nil)
            {
                self.Number::Label.text = number;
                self.Number.visible = true;
            }
            else
            {
                self.Number.visible = false;
            }

            if (is_stockyard == true)
                self.Thumbnail.image_path = GarageUtil::Thumbnail::getPath(mgarage_car.garage_id, GarageUtil::Thumbnail::Type::Stockyard,
                    GarageUtil::Thumbnail::Size::S); 
            else
                self.Thumbnail.image_path = GarageUtil::Thumbnail::getPath(mgarage_car.garage_id, GarageUtil::Thumbnail::Type::Garage,
                    GarageUtil::Thumbnail::Size::S); 

            self.Name::Label.text = mgarage_car.short_name;
            var is_unknown_car = mgarage_car.short_name == "--";

            if (!is_unknown_car)
            {
                var tuner_label = gtengine::MSpecDB::getTunerString(mgarage_car.tuner);
                self.Dealer::Label.text = manager.translate("TunerName", tuner_label);
                self.PP::Label.text = mgarage_car.pp1k;
                self.Power::Label.text = mgarage_car.real_spec_hidden ? "---" : pdiext::MUnit::GetPowerForDisplay(mgarage_car.power);
                self.Weight::Label.text = mgarage_car.real_spec_hidden ? "---" : mgarage_car.mass;
                self.Drive::Label.text = SpecDatabaseUtil::changeDriveTrainTypeToString(mgarage_car.drive_train);

                var aspiration = "---";
                switch (mgarage_car.aspiration_type)
                {
                    case gtengine::AspirationType::NATUNE:
                        aspiration = manager.translate("AspirationName", "Label_NATUNE");
                        break;

                    case gtengine::AspirationType::SUPERCHARGER:
                        aspiration = manager.translate("AspirationName", "Label_SUPERCHARGER");
                        break; 

                    case gtengine::AspirationType::SUPERTURBO:
                        aspiration = manager.translate("AspirationName", "Label_SUPERTURBO");
                        break; 

                    case gtengine::AspirationType::TURBO:
                        aspiration = manager.translate("AspirationName", "Label_TURBO");
                        break; 

                    case gtengine::AspirationType::MOTOR:
                        aspiration = manager.translate("AspirationName", "Label_MOTOR");
                        break; 
                }

                self.Aspiration::Label.text = aspiration;


                self.Year::Label.text = mgarage_car.year > 0 ? mgarage_car.year : "---";
                self.Favorite.visible = mgarage_car.favorite;
                self.Invalid.visible = mgarage_car.invalid;

                if (is_stockyard == false)
                    self.Riding.visible = mgarage_car.garage_id == GAME_STATUS.user_profile.garage.getRidingGarageId();
            }
            else
            {
                self.Dealer::Label.text = "---";
                self.PP::Label.text = "---";
                self.Power::Label.text = "---";
                self.Weight::Label.text = "---";
                self.Drive::Label.text = "---";
                self.Aspiration::Label.text = "---";
                self.Year::Label.text = "---";
                self.Favorite.visible = false;
                self.Invalid.visible = true;
            }

            isBlank(false);
        }
    }
}

module GarageProjectComponent::ButtonHelp::ButtonHelpGT6
{
    module hidden::ButtonSet
    {
        SCALE_WIDGET_SDTV(Circle::label, 2.4);
        SCALE_WIDGET_SDTV(Circle::labeli, 2.4);
        SCALE_WIDGET_SDTV(Square::label, 2.4);
        SCALE_WIDGET_SDTV(Square::labeli, 2.4);
        SCALE_WIDGET_SDTV(Triangle::label, 2.4);
        SCALE_WIDGET_SDTV(Triangle::labeli, 2.4);
        SCALE_WIDGET_SDTV(Cross::label, 2.4);
        SCALE_WIDGET_SDTV(Cross::labeli, 2.4);
        SCALE_WIDGET_SDTV(R1::label, 2.4);
        SCALE_WIDGET_SDTV(R1::labeli, 2.4);
        SCALE_WIDGET_SDTV(L1::label, 2.4);
        SCALE_WIDGET_SDTV(L1::labeli, 2.4);
        SCALE_WIDGET_SDTV(R2::label, 2.4);
        SCALE_WIDGET_SDTV(R2::labeli, 2.4);
        SCALE_WIDGET_SDTV(L2::label, 2.4);
        SCALE_WIDGET_SDTV(L2::labeli, 2.4);
    }

    method clear()
    {
        if (self.current_button_set != nil)
        {
            Pane.removeChild(self.current_button_set);
            self.current_button_set = nil;
        }

        if (self.prev_button_set != nil)
        {
            Pane.removeChild(self.prev_button_set);
            self.prev_button_set = nil;
        }

        self.current_button_set = nil;
        self.prev_button_set = nil;
        self.button_sets = Map();
    }

    method onRealize(manager)
    {
        hidden.visible = false;
    }

    method onFinalize(context)
    {
        clear();
    }

    function getEnterButtonName()
    {
        var assign = main::pdiext::MSystemConfiguration::GetEnterButtonAssign();
        if (assign == "circle")
            return "Circle"
        else
            return "Cross";
    }

    function getCancelButtonName()
    {
        var assign = main::pdiext::MSystemConfiguration::GetEnterButtonAssign();
        if (assign == "circle")
            return "Cross"
        else
            return "Circle";
    }

    attribute is_appear = false;
    attribute current_button_set = nil;
    attribute prev_button_set = nil;
    attribute button_sets = Map();
    attribute current_set = "";

    method set(context, set_list)
    {
        var button_set = hidden::ButtonSet.doCopy();
        if (pdiext::MSystemConfiguration::isSDTV())
        {
            if (set_list.size > 0 && set_list[set_list.size - 1][0] != "R2")
                set_list.push(["R2", manager.translate("Component", "Label_Zoom")]);
                
            
            var pad_left = set_list.size >= 6 ? -28 : 0;
            var w = button_set.first;

            while (w != nil)
            {
                w.pack_pad_left = pad_left;
                w = w.next;
            }
        }

        button_set.visible = false;

        var it = button_set.first;
        while (it != nil)
        {
            it.visible = false;
            it = it.next_widget;
        }

        var order_list = [];
        foreach (var set in set_list)
        {
            |var button_name, var text| = set;
            if (button_name == "Enter")
            {
                if (text == nil)
                    text = manager.translate("Component", "Label_" + button_name);
                var button_name = getEnterButtonName();
            }

            if (button_name == "Back" || button_name == "Cancel" || button_name == "Close")
            {
                if (text == nil)
                    text = manager.translate("Component", "Label_" + button_name);
                var button_name = getCancelButtonName();
            }

            if (text == nil)
                text = "";

            var button_w = button_set[button_name];
            order_list.push(button_w);
            button_w["label"].text = text;
            button_w["label"].visible = true;
            button_w["label_i"].text = text;
            button_w["label_i"].visible = false;
            button_w.visible = true;
        }

        button_set.reorderChild(order_list);
        self.prev_button_set = current_button_set;
        self.current_button_set = button_set;
        if (prev_button_set != nil)
        {
            Pane.removeChild(self.prev_button_set);
            self.prev_button_set = nil;
        }

        Pane.appendChild(context, button_set);
        button_set.InAnimation.restart();
        button_set.visible = true;
    }

    method addButtonSet(context, set_name, set_list)
    {
        self.button_sets[set_name] = set_list;
    }
    
    method setButtonSet(context, set_name)
    {
        if (self.current_set == set_name)
            return;
        var set_list = self.button_sets[set_name];
        self.set(context, set_list);
        self.current_set = set_name;
    }

    method getCurrentButtonSetName()
    {
        return self.current_set;
    }

    method setLabel(context, button_name, text)
    {
        var button_w = Pane::Buttons[button_name];
        button_w["label"].text = text;
        button_w["label_i"].text = text;
    }

    method setInsensitive(button_name, insensitive)
    {
        var button_w = Pane::Buttons[button_name];
        if (button_w != nil)
        {
            button_w["label"].visible = !insensitive;
            button_w["label_i"].visible = insensitive;
        }
    }

    method appear()
    {
        self.FadeEffect.reverse = false;
        self.FadeEffect.start();
        self.is_appear = true;
    }

    method hide()
    {
        self.FadeEffect.reverse = true;
        self.FadeEffect.start();
        self.is_appear = false;
    }

    method appearIf()
    {
        if (!self.is_appear)
        {
            appear();
            return true;
        }

        return false;
    }

    method hideIf()
    {
        if (self.is_appear)
        {
            hide();
            return true;
        }

        return false;
    }
}

module GarageProjectComponent::MiniNotice
{
    module Notice
    {
        method onRealize(manager)
        {
            reset();
        }

        method onInitialize(context)
        {
            reset();
            MiniNoticeUtil::registerWidget(self, context);
        }

        method onFinalize(context)
        {
            MiniNoticeUtil::unregisterWidget(self);
        }
        
        method reset(context)
        {
            self.visible = false;
            HBox::label_title.text = "";
            HBox::label_value.text = "";
            HBox::label_unit.text = "";
        }

        method appear(context)
        {
            if (self.visible)
                return;

            ScalarInterpolator.on_effect_end = nil;
            ScalarInterpolator.stop();
            ScalarInterpolator.forward();
            ScalarInterpolator.rewind();
            self.visible = true;
            ScalarInterpolator.restart();
        }

        method disappear(context)
        {
            self.visible = false;
        }

        method hideIfNothing(context)
        {
            if (HBox::label_title.text == "" && HBox::label_value.text == "" && HBox::label_unit.text == "")
            {
                disappear(context);
            }
        }

        method setTitle(context, text)
        {
            if (text == nil)
            {
                HBox::label_title.text = "";
                HBox::label_title.visible = false;
                hideIfNothing(context);
            }
            else
            {
                HBox::label_title.text = text;
                HBox::label_title.visible = true;
            }
        }

        method setValue(context, value)
        {
            if (value == nil)
            {
                HBox::label_value.text = "";
                HBox::label_value.visible = false;
                hideIfNothing(context);
            }
            else
            {
                HBox::label_value.text = value;
                HBox::label_value.visible = true;
            }
        } 

        method setUnit(context, unit)
        {
            if (unit == nil)
            {
                HBox::label_unit.text = "";
                HBox::label_unit.visible = false;
                hideIfNothing(context);
            }
            else
            {
                HBox::label_unit.text = unit;
                HBox::label_unit.visible = true;
            }
        } 

        method set(context, title, value, unit)
        {
            setTitle(context, title);
            setValue(context, value);
            setUnit(context, unit);
        }
    }
}
