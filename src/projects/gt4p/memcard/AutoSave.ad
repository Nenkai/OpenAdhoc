module PROJECT::ROOT
{
	function setActor(widget)
	{
		widget.actor = main::menu::MBlinkActor(widget);
		widget.actor.period = 0.1;
	}

	static manager = nil;
	static watcher = nil;
	static mode;
	static nextMode;
	static openDialog;

	function exitMenu(context)
	{
		clean();
	
		context.finish();
	
		context.transition = main::menu::MColorTransition();
		context.transition.panOut(context);
		context.transition.syncOut(context);
	}

	function clean(context)
	{
		if (watcher != nil)
			watcher.remove()
		
		watcher = nil;
		manager = nil;
	}

	function onInitialize(context)
	{
		manager = main::menu::MMemoryCardManager("MODE_SAVE_GAME");
	
		watcher = main::menu::MScriptWatcher(context, AutoSave, "onCheck");
		watcher.interval = 5;
		watcher.append();
	
		mode = 0;
		nextMode = 0;
		openDialog = nil;
	}

	function closeDialog(context)
	{
		if (openDialog != nil)
			context.closePage(openDialog);
		
		openDialog = nil;
	}

	function save(context)
	{
		closeDialog(context);
		context.sync(0.03);
	
		if (watcher != nil)
			watcher.remove();

		watcher = nil;
	
		var file = manager.getNewFile();
	
		setActor(blink);
	
		var filesize = file.readSize(manager);
		var datasize = file.size;
	
		if (filesize != datasize)
		{
			if ((datasize - filesize) > manager.realFree)
			{
				blink.actor = nil;
				OKDialog::open(
					context,
					oksoundexit,
					cancelsoundexit,
					StoreHouse::not_enough_space.value.format(datasize - filesize)
				);
				return;
			}
	
			if (!file.remove(manager, dummy))
			{
				blink.actor = nil;
				OKDialog::open(
					context,
					oksoundexit,
					cancelsoundexit,
					StoreHouse::write_error.value
				);
				return;
			}
		}
	
		if (!file.save(manager, StoreHouse::gt4p_game_data.value, dummy))
		{
			blink.actor = nil;
			OKDialog::open(
				context,
				oksoundexit,
				cancelsoundexit,
				StoreHouse::write_error.value
			);
			return;
		}
	
		manager.clearAutoSaveDisabled();
		blink.actor = nil;
		exitMenu(context);
	}

	function dummy(v)
	{
	}

	function onCheck(context)
	{
		if (nextMode != 0)
		{
			mode = nextMode;
			switch (mode)
			{
				case 4:
					save(context);
					break;

				case 1:
					openDialog = YesNoDialog;
					YesNoDialog::open(context, autosaveDisableExit, cancelsoundexit, StoreHouse::autosave_mc_not_connect.value, 1);
					break;

				case 2:
					openDialog = YesNoDialog;
					YesNoDialog::open(context, saveNew, askDisable, StoreHouse::autosave_mc_no_gamedata.value, 1);
					break;

				case 3:
					openDialog = YesNoDialog;
					YesNoDialog::open(context, save, askDisable, StoreHouse::autosave_mc_changed.value, 1);
					break;

				case 6:
					openDialog = OKDialog;
					OKDialog::open(context, oksoundexit, cancelsoundexit, StoreHouse::read_error.value);
					break;

				case 5:
					openDialog = YesNoDialog;
					YesNoDialog::open(context, autosaveDisableExit, cancelsoundexit, StoreHouse::autosave_disable_autosave.value, 1);
					break;
			}
	
			nextMode = 0;
			return;
		}
		
		if (manager.isChanged() || mode == 0 || mode == 1)
		{
			var newMode = 0;
	
			if (manager.isConnect())
			{
				if (manager.isFormat())
				{
					var file = manager.getNewFile();
					var r = 0;
	
					for (var i = 0; i < 3; ++i)
					{
						r = file.isExist(manager);
						if (r >= 0)
							break;
					}
	
					if (r == 0)
					{
						if (manager.isAutoSaveDisabled())
						{
							newMode = 3;
						}
						else
						{
							newMode = 4;
						}
					}
					else if (r == 1)
					{
						newMode = 2;
					}
					else
					{
						newMode = 0;
					}
				}
				else
					newMode = 2;
			}
			else
			{
				newMode = 1;
			}
	
			if (newMode != mode)
			{
				closeDialog(context);
				nextMode = newMode;
			}
		}
	}

	function autosaveDisableExit(context)
	{
		main::sound.play("ok");
	
		var option = main::game.getOption();
		option.auto_save = 0;
		main::game.setOption(option);
	
		manager.clearAutoSaveDisabled();
	
		exitMenu(context);
	}

	function saveNew(context)
	{
		main::sound.play("ok");
		clean(context);
		context.startPage(GameSave);
	}

	function askDisable(context)
	{
		main::sound.play("cancel");
		closeDialog(context);
		nextMode = 5;
	}

	function oksound(context)
	{
		main::sound.play("ok");
	}
	
	function cancelsound(context)
	{
		main::sound.play("cancel");
	}

	function oksoundexit(context)
	{
		main::sound.play("ok");
		exitMenu(context);
	}

	function cancelsoundexit(context)
	{
		main::sound.play("cancel");
		exitMenu(context);
	}
}