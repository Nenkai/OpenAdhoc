











module ROOT
{
    static sFirstScrollItem = nil;
    static sLastScrollItem = nil;
    
    hidden.visible = false;

    static isRacePhoto = false;
    static isNoMove = false;
    static isStandardLimit = false;
    static ignoreUpdate = true;

    attribute openSimply_result;

    method _openSimply_activated()
    {
        self.openSimply_result = true;
    }

    method _openSimply_closed()
    {
        if (self.openSimply_result == nil)
            self.openSimply_result = false;
    }

    class Data
    {
        attribute f_value;
        attribute shutter_speed;
        attribute ev;
        attribute focus;
        attribute mm;
        attribute filter;
        attribute aspect;
        attribute vertical;
        attribute output_3d;
        attribute aa;
        attribute output_size;
        attribute camera_follow;
        attribute camera_y;
        attribute activate_sound;
        attribute cb_closed;
        attribute cb_instance;
        attribute scene;
        attribute base_root;
        attribute modal_page;
        attribute result;

        method __init__(scene, base_root, f_value, shutter_speed, ev, focus, mm, filter, aspect, vertical, aa, output_3d, output_size, camera_follow, camera_y)
        {
            self.scene = scene;
            self.base_root = base_root;
            self.f_value = f_value;
            self.shutter_speed = shutter_speed;
            self.ev = ev;
            self.focus = focus;
            self.mm = mm;
            self.filter = filter;
            self.aspect = aspect;
            self.vertical = vertical;
            self.output_3d = output_3d;
            self.output_size = output_size;
            self.aa = aa;
            self.camera_follow = camera_follow;
            self.camera_y = camera_y;
            self.activate_sound = "ok";
        }

        method popHistory(history)
        {
            self.f_value = history['f_value'];
            self.shutter_speed = history['shutter_speed'];
            self.ev = history['ev'];
            self.focus = history['focus'];
            self.mm = history['mm'];
            self.filter = history['filter'];
            self.aspect = history['aspect'];
            self.vertical = history['vertical'];
            self.output_3d = history['output_3d'];
            self.aa = history['aa'];
            self.output_size = history['output_size'];
            self.camera_follow = history['camera_follow'];
            self.activate_sound = history['activate_sound'];
        }

        method pushHistory(history)
        {
            history['f_value'] = self.f_value;
            history['shutter_speed'] = self.shutter_speed;
            history['ev'] = self.ev;
            history['focus'] = self.focus;
            history['mm'] = self.mm;
            history['filter'] = self.filter;
            history['aspect'] = self.aspect;
            history['vertical'] = self.vertical;
            history['output_3d'] = self.output_3d;
            history['aa'] = self.aa;
            history['output_size'] = self.output_size;
            history['camera_follow'] = self.camera_follow;
            history['activate_sound'] = self.activate_sound;
        }

        method open(context)
        {
            self.result = false;
            self.modal_page = SequenceUtil::ModalPage(context, ROOT);
            self.modal_page.open();
        }

        method close(context)
        {
            if (self.cb_closed != nil)
                (self.cb_instance.*self.cb_closed)(context, self.result);

            if (self.modal_page != nil)
            {
                self.modal_page.close();
                self.modal_page = nil;
            }
        }
    }

    attribute sData;

    method open(context, data, race_photo, nomove, standard_limiit)
    {
        self.sData = *data;
        ROOT::FadeActor.out = true;
        ROOT::FadeActor.warp();

        ROOT.setFocus(CameraSetting_new::ScrolledWindow::ScrollClip::space::Aspect::OptionMenu);
        ROOT.isRacePhoto = race_photo;
        ROOT.isNoMove = nomove;
        ROOT.isStandardLimit = standard_limiit;
        ROOT.ignoreUpdate = true;

        self.sData.open(context);
    }

    method close(context)
    {
        context.target_widget = nil;

        ROOT.setFocus(nil);
        ROOT::FadeActor.out = true;

        context.sync(0.25);
        self.sData.close(context);
    }

    method abort(context)
    {
        if (self.sData != nil)
        {
            self.close(context);
            self.sData = nil;
        }
    }

    method execCommand(command, que)
    {
        if (self.sData != nil)
        {
            if (que != nil)
                self.sData.scene.execCommand(command, que);
            else
                self.sData.scene.execCommand(command);
        }
    }

    method setFilter(command_root, idx)
    {
        var command = nil;

        switch (idx)
        {
            case 0:
                command = CommandAlias::get("filter_base");
                break;

            case 1:
                command = CommandAlias::get("filter_monochrome");
                break;

            case 2:
                command = CommandAlias::get("filter_hard_monochrome");
                break;

            case 3:
                command = CommandAlias::get("filter_sepia");
                break;

            case 4:
                command = CommandAlias::get("filter_cool");
                break;

            case 5:
                command = CommandAlias::get("filter_warm");
                break;

            case 6:
                command = CommandAlias::get("filter_crossprocess");
                break;

            case 7:
                command = CommandAlias::get("filter_crossprocess2");
                break;

            case 8:
                command = CommandAlias::get("filter_crossprocess3");
                break;

            case 9:
                command = CommandAlias::get("filter_miniature");
                break;

            case 10:
                command = CommandAlias::get("filter_partColor");
                break;
        }

        if (command != nil)
            command_root.execCommand(command, false);
    }

    method onInitialize(context)
    {
        ROOT.navigate_insensitive = true;

        OptionMenuUtil::initialize(context, ROOT, CameraSetting_new::ScrolledWindow::ScrollClip::space::Filter::OptionMenu, hidden::Item,
            ["FILTER_OFF", "FILTER_MONO", "FILTER_HARD_MONO", "FILTER_SEPIA", "FILTER_COOL", "FILTER_WARM", "FILTER_CROSSPROCESS", "FILTER_CROSSPROCESS2", "FILTER_CROSSPROCESS3", "FILTER_MINIATURE", "FILTER_PARTCOLOR"], "PhotoMode");

        OptionMenuUtil::initialize(context, ROOT, CameraSetting_new::ScrolledWindow::ScrollClip::space::Aspect::OptionMenu, hidden::Item,
            ["ASPECT_2_3", "ASPECT_1_1", "ASPECT_1_1.4", "ASPECT_1_1.6", "ASPECT_9_16"], "PhotoMode");
     
        OptionMenuUtil::initialize(context, ROOT, CameraSetting_new::ScrolledWindow::ScrollClip::space::Composition::OptionMenu, hidden::Item,
            ["HORIZONTAL", "VERTICAL"], "PhotoMode");

        OptionMenuUtil::initialize(context, ROOT, CameraSetting_new::ScrolledWindow::ScrollClip::space::OUTPUT_3D::OptionMenu, hidden::Item,
            ["JPEG_OUTPUT", "3D_OUTPUT"], "PhotoMode");
    
        var is3DAvailable = true;

        OptionMenuUtil::initialize(context, ROOT, CameraSetting_new::ScrolledWindow::ScrollClip::space::Size::OptionMenu, hidden::Item,
            ["x 1", "x 2"], "PhotoMode");

        OptionMenuUtil::initialize(context, ROOT, CameraSetting_new::ScrolledWindow::ScrollClip::space::CameraFollow::OptionMenu, hidden::Item,
            ["TARGET_FOLLOW_MODE1", "TARGET_FOLLOW_MODE2", "TARGET_FOLLOW_MODE3"], "PhotoMode");
    
        OptionMenuUtil::initialize(context, ROOT, CameraSetting_new::ScrolledWindow::ScrollClip::space::CameraYMove::OptionMenu, hidden::Item,
            ["INVERESE_NO", "INVERESE_YES"], "PhotoMode");
    
        if (!ROOT.isRacePhoto)
            CameraSetting_new::ScrolledWindow::ScrollClip::space::CameraFollow.visible = false;
        else
            CameraSetting_new::ScrolledWindow::ScrollClip::space::CameraFollow.visible = true;

        self.reflect(context);
        self.ignoreUpdate = false;

        CameraSetting_new::ScrolledWindow::ScrollClip.scroll_mode = 0;
        CameraSetting_new::ScrolledWindow::ScrollClip.space.y = 0.0;
        CameraSetting_new::ScrolledWindow::ScrollClip.updateGeometry();
        var child_cnt = CameraSetting_new::ScrolledWindow::ScrollClip::space.countChild();

        for (var i = 0; i < child_cnt; i++)
        {
            var w = CameraSetting_new::ScrolledWindow::ScrollClip::space.getChild(i);
            if (w.visible)
            {
                var s = nil;
                if (w.defined('slider'))
                    s = w['slider'];

                if (w.defined('OptionMenu'))
                    s = w['OptionMenu'];

                if (w.defined('Button'))
                    s = w['Button'];

                if (self.sFirstScrollItem == nil)
                    ROOT::sFirstScrollItem = s;

                ROOT::sLastScrollItem = s;
            }
        }
    }

    method onFinalize(context)
    {
        OptionMenuUtil::finalize(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::Filter::OptionMenu);
        OptionMenuUtil::finalize(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::Aspect::OptionMenu);
        OptionMenuUtil::finalize(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::Composition::OptionMenu);
        OptionMenuUtil::finalize(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::OUTPUT_3D::OptionMenu);
        OptionMenuUtil::finalize(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::Size::OptionMenu);
        OptionMenuUtil::finalize(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::CameraFollow::OptionMenu);
        OptionMenuUtil::finalize(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::CameraYMove::OptionMenu);
    }

    function half_adjust(value, adjust)
    {
        return value + (value >= 0.0 ? adjust : -adjust);
    }

    function value_format_function(context, value, slider)
    {
        var arg = slider.arg;
        var scale = arg['scale'] != nil ? arg['scale'] : 1.0;
        var v = scale * value;
        return "%.1f".format(half_adjust(v, 0.05));
    }

    function value_format_function_no_float(context, value, slider)
    {
        var arg = slider.arg;
        var scale = arg['scale'] != nil ? arg['scale'] : 1.0;
        var v = scale * value;
        var val_f = half_adjust(v, 0.5);

        return "%d".format(val_f.toInt());
    }

    function slider_setup(context, item, arg, no_float)
    {
        var min = arg['min'] / arg['step'];
        var max = arg['max'] / arg['step'];

        var step = arg['step'] != nil ? arg['step'] : 1.0;
        var scale = arg['scale'] != nil ? arg['scale'] : 1.0;
        var unit = arg['unit'] != nil ? arg['unit'] : "";
        var pid = arg['pid'] != nil ? arg['pid'] : 0;
        var value = arg['value'] / scale;
        
        var slider = item.slider;
        slider.arg = arg;
        slider.range = [min, max];
        slider.step = 1;
        slider.value = value;
        slider.unit_text = unit;
        slider.step_thr = step;

        if (no_float != nil)
            slider.format_callback = value_format_function_no_float;
        else
            slider.format_callback = value_format_function;

        slider.setup(context);
        slider.decide_callback = arg['decide_cb'];
    }

    method reflect(context)
    {
        slider_setup(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::Fvalue,
            ['value': self.sData.f_value, 'min': 10.0, 'max': 450.0, 'step': 1.0, 'scale': 0.1]);

        if (!ROOT.isRacePhoto)
        {
            slider_setup(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::ShutterSpeed,
                ['value': self.sData.shutter_speed, 'min': 10, 'max': 80000, 'step': 10, 'scale': 1], true);
        }
        else
        {
            slider_setup(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::ShutterSpeed,
                ['value': self.sData.shutter_speed, 'min': 600, 'max': 80000, 'step': 10, 'scale': 1], true);
        }

        slider_setup(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::Ev,
            ['value': self.sData.ev, 'min': -50.0, 'max': 50.0, 'step': 1.0, 'scale': 0.1]);

        var minmm = 14;
        if (ROOT.isNoMove)
            minmm = 50;

        var maxmm = 500;
        if (ROOT.isStandardLimit)
            maxmm = self.sData.mm;

        slider_setup(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::FocalLength,
            ['value': self.sData.mm, 'min': minmm, 'max': maxmm, 'step': 1, 'scale': 1], true);
    
        CameraSetting_new::ScrolledWindow::ScrollClip::space::Filter::OptionMenu.setIndex(context, self.sData.filter);
        CameraSetting_new::ScrolledWindow::ScrollClip::space::Aspect::OptionMenu.setIndex(context, self.sData.aspect);
        CameraSetting_new::ScrolledWindow::ScrollClip::space::Composition::OptionMenu.setIndex(context, self.sData.vertical);
        CameraSetting_new::ScrolledWindow::ScrollClip::space::OUTPUT_3D::OptionMenu.setIndex(context, self.sData.output_3d);
        CameraSetting_new::ScrolledWindow::ScrollClip::space::Size::OptionMenu.setIndex(context, self.sData.output_size);
        CameraSetting_new::ScrolledWindow::ScrollClip::space::CameraFollow::OptionMenu.setIndex(context, self.sData.camera_follow);
        CameraSetting_new::ScrolledWindow::ScrollClip::space::CameraYMove::OptionMenu.setIndex(context, self.sData.camera_y);
    }

    method apply(context)
    {
        self.sData.f_value = CameraSetting_new::ScrolledWindow::ScrollClip::space::Fvalue.slider.index;
        self.sData.shutter_speed = CameraSetting_new::ScrolledWindow::ScrollClip::space::ShutterSpeed.slider.index;
        self.sData.ev = CameraSetting_new::ScrolledWindow::ScrollClip::space::Ev.slider.index;
        self.sData.mm = CameraSetting_new::ScrolledWindow::ScrollClip::space::FocalLength.slider.value;
        self.sData.filter = CameraSetting_new::ScrolledWindow::ScrollClip::space::Filter::OptionMenu.index;
        self.sData.aspect = CameraSetting_new::ScrolledWindow::ScrollClip::space::Aspect::OptionMenu.index;
        self.sData.vertical = CameraSetting_new::ScrolledWindow::ScrollClip::space::Composition::OptionMenu.index;
        self.sData.output_3d = CameraSetting_new::ScrolledWindow::ScrollClip::space::OUTPUT_3D::OptionMenu.index;
        self.sData.output_size = CameraSetting_new::ScrolledWindow::ScrollClip::space::Size::OptionMenu.index;
        self.sData.camera_follow = CameraSetting_new::ScrolledWindow::ScrollClip::space::CameraFollow::OptionMenu.index;
        self.sData.camera_y = CameraSetting_new::ScrolledWindow::ScrollClip::space::CameraYMove::OptionMenu.index;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.apply(context);
        ROOT.close(context);
        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case CELL_PAD_CTRL_TRIANGLE:
                main::sound.play("cancel");
                ROOT.apply(context);
                ROOT.close(context);
                return EVENTRESULT_FILTER;

                break;
        }

        return EVENTRESULT_CONTINUE;
    }

    function SliderValueChangeFloat(context, slider, command_string)
    {
        var value = slider.value;
        var arg = slider.arg;
        var scale = arg['scale'] != nil ? arg['scale'] : 1.0;
        var v = scale * value;

        var command = command_string.format(v);
        ROOT.execCommand(command);
        return EVENTRESULT_FILTER;
    }

    function SliderCloseFloat(context, slider, command_string)
    {
        if (!slider.cancel)
            main::sound.play("ok");
        else
            main::sound.play("cancel");

        var arg = slider.arg;
        var v = arg['value'];

        var command = command_string.format(v);
        ROOT.execCommand(command);
        return EVENTRESULT_FILTER;
    }

    module CameraSetting_new::ScrolledWindow::ScrollClip::space::Fvalue::slider
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);
            return SliderValueChangeFloat(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::Fvalue::slider, "setFixFnumber %f");
        }

        method onPopupClosed(context)
        {
            __prototype__::onPopupClosed(context);
            return SliderCloseFloat(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::Fvalue::slider, "setFixFnumber %f");
        }
    }

    module CameraSetting_new::ScrolledWindow::ScrollClip::space::ShutterSpeed::slider
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);
            return SliderValueChangeFloat(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::ShutterSpeed::slider, "setScreenShotShutterSpeed %f");
        }

        method onPopupClosed(context)
        {
            __prototype__::onPopupClosed(context);
            return SliderCloseFloat(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::ShutterSpeed::slider, "setScreenShotShutterSpeed %f");
        }
    }

    module CameraSetting_new::ScrolledWindow::ScrollClip::space::Ev::slider
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);
            return SliderValueChangeFloat(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::Ev::slider, "setExposureCorrect %f");
        }

        method onPopupClosed(context)
        {
            __prototype__::onPopupClosed(context);
            return SliderCloseFloat(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::Ev::slider, "setExposureCorrect %f");
        }
    }

    module CameraSetting_new::ScrolledWindow::ScrollClip::space::FocalLength::slider
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);
            return SliderValueChangeFloat(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::FocalLength::slider, "setCameraFocusLength %f");
        }

        method onPopupClosed(context)
        {
            __prototype__::onPopupClosed(context);
            return SliderCloseFloat(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::FocalLength::slider, "setCameraFocusLength %f");
        }
    }

    module CameraSetting_new::ScrolledWindow::ScrollClip::space::Filter::OptionMenu
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);
            ROOT.setFilter(ROOT, self.index);
            return EVENTRESULT_FILTER;
        }
    }

    module CameraSetting_new::ScrolledWindow::ScrollClip::space::Aspect::OptionMenu
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);
            if (!ROOT.ignoreUpdate)
            {
                ROOT.sData.base_root.changeAspect(context, self.index);
            }
        }
    }

    module CameraSetting_new::ScrolledWindow::ScrollClip::space::Composition::OptionMenu
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);
            if (!ROOT.ignoreUpdate)
            {
                ROOT.sData.vertical = self.index;
                ROOT.sData.base_root.changeAspect(context, CameraSetting_new::ScrolledWindow::ScrollClip::space::Aspect::OptionMenu.index, self.index);
            }
        }
    }

    module CameraSetting_new::ScrolledWindow::ScrollClip::space::OUTPUT_3D::OptionMenu
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);
        }
    }

    module CameraSetting_new::ScrolledWindow::ScrollClip::space::CameraYMove::OptionMenu
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);
            
            var d_option = main::GAME_STATUS.user_profile.context.saved_driving_option[0];
            d_option.cam_y_inverse = self.index;

            var command;
            switch (self.index)
            {
                case 0:
                    command = "setWalkCamreaYInverse false";
                    break;

                case 1:
                    command = "setWalkCamreaYInverse true";
                    break;
            }

            ROOT.execCommand(command);
        }
    }
}