












// Root for displaying members currently in the lobby and their information.
module ROOT
{
    attribute isOpening = false;
    attribute memberList;
    attribute currentMode = 0;
    attribute specialMenuEnabled = false;
    
    hidden.visible = false;

    module hidden
    {
        module MemberItem
        {
            attribute member;
            attribute memberIndex;
            attribute activeSteeringTextList = [
                LocalizedText::OFF,
                manager.translate("TrialSetting", "ACTIVE_STEERING_WEAK"),
                manager.translate("TrialSetting", "ACTIVE_STEERING_STRONG"),
            ];

            method initialize(context, member, index)
            {
                self.x = 0;
                self.y = 0;
                self.member = member;
                self.memberIndex = index;
                self.updateInfo(context);
            }

            method resetDetailRowLabels(str = "--")
            {
                self.Composite2.label.text = str;
                self.Composite3.label.text = str;
                self.Composite4.label.text = str;
            }

            method updateInfo(context)
            {
                var member = self.member;
                self.Number.label.text = member != nil ? self.memberIndex : "--";
                
                if (member != nil)
                {
                    var slotId = member["entrySlotId"];
                    var name = member["displayName"];
                    var isMe = slotId == RaceOperator.getAccountSlotID(0);

                    if (PROJECT::sRoomType == gtengine::RoomType::CLUB_LOBBY ||
                        PROJECT::sRoomType == gtengine::RoomType::CLUB_EVENT)
                    {
                        var isGuest = member["isGuest"];
                        self.Number.bg.visible = isGuest;
                        self.Number.bg_frame.visible = isGuest;
                    }
                    else
                    {
                        self.Number.bg.visible = true;
                        self.Number.bg_frame.visible = true;
                    }

                    self.Number.bg_green.visible = !self.Number.bg.visible;
                    self.Number.bg_green_frame.visible = !self.Number.bg_frame.visible;
                    self.Name.label.text = isMe ? "" : name;
                    self.Name.label_Myname.text = isMe ? name : "";

                    var entried = member["entryState"] == gtengine::EntryLevel::RACER;
                    var cp, dp;

                    if (entried)
                    {
                        var cp = ORG.getEntriedCarParameter(slotId);
                        var dp = ORG.getEntriedDriverParameter(slotId);

                        var carCode, carColor;
                        if (cp != nil)
                        {
                            carCode = cp.getCarCode();
                            carColor = cp.color;
                        }
                        else
                            ;

                        if (cp != nil)
                        {
                            self.Composite1.Chip.color.setCarParameter(cp);
                            self.Composite1.Label.text = gtengine::MSpecDB::getCarShortName(carCode);
                        }
                        else
                        {
                            self.Composite1.Label.text = "--";
                            self.Composite1.Chip.visible = false;
                        }
                    }
                    else
                    {
                        self.Composite1.Label.text = "--";
                        self.Composite1.Chip.visible = false;
                    }

                    if (cp == nil || dp == nil)
                        self.resetDetailRowLabels();
                    else
                    {
                        var text0, text1, text2;
                        switch (ROOT.currentMode % 4)
                        {
                            case 0:
                                text0 = self.getTireText(cp, true);
                                text1 = self.getTireText(cp, false);
                                text2 = dp.physics_pro ? LocalizedText::OFF : LocalizedText::ON;
                                break;

                            case 1:
                                text0 = manager.translate("TrialSetting", dp.manual ? "MANUAL" : "AUTOMATIC");
                                text1 = self.activeSteeringTextList[dp.active_steering];
                                text2 = dp.display_driving_line ? LocalizedText::ON : LocalizedText::OFF;
                                break;

                            case 2:
                                text0 = cp.quicktune_tcs == 0 ? LocalizedText::OFF : cp.quicktune_tcs;
                                text1 = dp.assist_asm ? LocalizedText::ON : LocalizedText::OFF;
                                text2 = cp.ABSCorneringControlLevel == 0 ? LocalizedText::OFF : cp.ABSCorneringControlLevel;
                                break;

                            case 3:
                                if (member["carCode"] == cp.getCarCode() && member["pp"] > 0)
                                {
                                    text0 = member["pp"];

                                    if (member["isRealSpecHidden"])
                                    {
                                        text1 = "--";
                                        text2 = "--";
                                    }
                                    else
                                    {
                                        text1 = EventSettingProject::getPowerString(member["power"]);
                                        text2 = EventSettingProject::getWeightString(member["weight"], true);
                                    }
                                }
                                else
                                {
                                    cp.beginInfo();
                                    text0 = cp.getPP1000();
                                    text1 = cp.getPowerString(false);
                                    text2 = cp.getWeightString();
                                    cp.endInfo();
                                }
                                break;
                        }
                        
                        self.Composite2.label.text = text0;
                        self.Composite3.label.text = text1;
                        self.Composite4.label.text = text2;
                    }
                }
                else
                {
                    self.Name.label.text = "--";
                    self.Name.label_Myname.text = "";
                    self.Number.bg.visible = false;
                    self.Number.bg_green.visible = false;
                    self.Number.bg_frame.visible = false;
                    self.Number.bg_green_frame.visible = false;
                    self.Composite1.Chip.visible = false;
                    self.Composite1.Label.text = "--";
                    self.Composite2.label.text = "--";
                    self.Composite3.label.text = "--";
                    self.Composite4.label.text = "--";
                }
            }

            method getTireText(cp, isFront)
            {
                |var tire_f, var tire_r| = cp.getTireCategories();
                return TireUtil::getNameShort(isFront ? tire_f : tire_r); 
            }

            method getSrfText(dp)
            {
                var text = "--";
                if (dp != nil)
                    text = dp.physics_pro ? LocalizedText::OFF : LocalizedText::ON;

                return text;
            }

            function onKickOut(context, member)
            {
                main::sound.play("ok");

                var user_id = member["userId"];
                var room_member_id = member["roomMemberId"];

                sCancelableDialogOpening = true;
                
                if (DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, 
                    manager.translate(PaddockRoot, "DO_YOU_KICKOUT").build(user_id.name)))
                {
                    if (OnlineSession.hasTimeoutLimit())
                        return;

                    var forbidReentry = true;
                    var ret = Lobby.kickOutRoomMember(room_member_id, forbidReentry)
                }

                sCancelableDialogOpening = false;
            }

            function onKickOutVote(context, member)
            {
                var user_id = member["userId"];

                sCancelableDialogOpening = true;
                
                if (DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, 
                    manager.translate(PaddockRoot, "DO_YOU_VOTE_ON_KICKOUT").build(user_id.name)))
                {
                    if (OnlineSession.hasTimeoutLimit())
                        return;

                    OnlineSession.voteOnKickOut(member["communicatorIndex"]);
                }

                sCancelableDialogOpening = false;
            }

            function onGriefReport(context, member)
            {
                main::sound.play("ok");

                var user_id = member["userId"];

                sCancelableDialogOpening = true;
                
                var message = manager.translate("OnlineMessage", "DO_YOU_SEND_GRIEF_REPORT").build(user_id.name);
                if (DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, message))
                {
                    var comment = "in Paddock";
                    
                    Grim2.requestSendReport(user_id.name, comment, (args) => {});

                    DialogUtil::openConfirmDialog(context, DialogUtil::OK, 
                        manager.translate("OnlineMessage", "GRIEF_REPORT_DONE"));

                }

                sCancelableDialogOpening = false;
            }

            function onMute(context, member, widget)
            {
                sound.play("ok");

                var memberId = member["roomMemberId"];
                var avmember = AVChat.getMember(memberId);
                var muting = avmember != nil ? avmember["mute"] : false;

                if (avmember != nil)
                {
                    AVChat.muteMember(memberId, !muting);
                    muting = !muting;
                }

                var attached = avmember != nil ? avmember["micStatus"] == pdistd::MicStatus::AttachedUsing : false;
                widget.insensitive = !attached;
                widget.updateLabel(context, manager.translate(PaddockRoot, muting ? "CANCEL_MUTE" : "MUTE"));
            }

            function onMuteLocal(context, widget)
            {
                sound.play("ok");

                AVChat.muteMic(!AVChat.isMicMute());
                var muting = AVChat.isMicMute();
                widget.updateLabel(context, manager.translate(PaddockRoot, muting ? "CANCEL_MUTE_ME" : "MUTE_ME"));

                var attached = AVChat.getMicStatus() == pdistd::MicStatus::AttachedUsing ||
                        AVChat.getMicStatus() == pdistd::MicStatus::AttachedButUnused;
 
                widget.insensitive = !attached;
            }

            function isOthersMicAttached(member)
            {
                if (!AVChat.isJoined())
                    return false;

                var memberId = member["roomMemberId"];
                var avmember = AVChat.getMember(memberId);

                var attached = avmember != nil ? avmember["micStatus"] == pdistd::MicStatus::AttachedUsing : false;
                return attached;
            }

            function openProfileRoot(context, member)
            {
                var buttonKickOut = UIKitProject::ProfileRoot::Button(manager.translate(PaddockRoot, "KICK_OUT"), 
                    (context, widget) => 
                    {
                        var m = member;
                        onKickOut(context, m);
                    });

                var buttonKickOutVote = UIKitProject::ProfileRoot::Button(manager.translate(PaddockRoot, "KICK_OUT_VOTE"), 
                    (context, widget) => 
                    {
                        var m = member;
                        onKickOutVote(context, m);
                    });

                var buttonGriefReport = UIKitProject::ProfileRoot::Button(manager.translate("OnlineMessage", "SEND_GRIEF_REPORT"), 
                    (context, widget) => 
                    {
                        var m = member;
                        onGriefReport(context, m);
                    });

                var defaultMuteLabelKey = "MUTE";
                if (AVChat.isJoined())
                {
                    var memberId = member["roomMemberId"];
                    var avmember = AVChat.getMember(memberId);

                    var muting = avmember != nil ? avmember["mute"] : false;
                    if (muting)
                        defaultMuteLabelKey = "CANCEL_MUTE";
                }

                var buttonMute = UIKitProject::ProfileRoot::Button(manager.translate(PaddockRoot, defaultMuteLabelKey), 
                    (context, widget) => 
                    {
                        var m = member;
                        onMute(context, m, widget);
                    },
                    (context, widget) => 
                    {
                        var m = member;
                        widget.insensitive = !isOthersMicAttached(m);
                    });

                var buttonMuteLocal = UIKitProject::ProfileRoot::Button(manager.translate(PaddockRoot, AVChat.isJoined() && AVChat.isMicMute() ? "CANCEL_MUTE_ME" : "MUTE_ME"), 
                    (context, widget) => 
                    {
                        onMuteLocal(context, widget);
                    },
                    (context, widget) => 
                    {
                        var attached = AVChat.getMicStatus() == pdistd::MicStatus::AttachedUsing ||
                                       AVChat.getMicStatus() == pdistd::MicStatus::AttachedButUnused;
                        widget.insensitive = !attached;
                    });

                var isMe = member["roomMemberId"] == Lobby.getMyRoomMemberId();
                var isFriend = PROJECT::isFriend(member["userId"].name);
                var rc = OnlineSession.getRoomConfig();
                var isPublicRoom = rc.scope == gtengine::Scope::PUBLIC;
                var buttons = [];

                if (AVChat.isJoined())
                    buttons.push(isMe ? buttonMuteLocal : buttonMute);
                
                if (isPublicRoom)
                {
                    if (!isMe && !isFriend && Lobby.isRoomOwner())
                        buttons.push(buttonKickOut);

                    if (!isMe && !isFriend && !Lobby.isRoomOwner())
                        buttons.push(buttonKickOutVote);

                    if (!isMe && !isFriend)
                        buttons.push(buttonGriefReport);
                }

                var params = UIKitProject::ProfileRoot::Params();
                params.additionalButtons = buttons.size > 0 ? buttons : nil;
                params.pdi_user_id = member["userId"];
                UIKitProject::ProfileRoot.open(context, member["userId"].name, params);
            }

            method onActivate(context)
            {
                if (self.member != nil)
                {
                    main::sound.play("ok");
                    openProfileRoot(context, self.member);
                }
                else
                    ;

                return EVENTRESULT_FILTER;
            }

            method onKeyPress(context, event)
            {
                if (ROOT.specialMenuEnabled && event.keysym == CELL_PAD_CTRL_TRIANGLE && self.member != nil)
                {
                    self.openSpecialContextMenu(context);
                    return EVENTRESULT_FILTER;
                }

                return EVENTRESULT_CONTINUE;
            }

            method openSpecialContextMenu(context)
            {
                var list = [];
                list.push(UIKitProject::ContextMenuPopup::Data("Change name", true, function(context)
                {
                    var m = self.member;
                    var memberId = m["roomMemberId"];
                    var currentName = m["displayName"];
                    var inputedName = OnlineUtil::openInputNicknameDialog(context, currentName);
                    if (inputedName != nil)
                    {
                        OnlineSession.changeNickname(inputedName, memberId);
                    }
                }, nil, nil));

                var sx = self.sx;
                var sy = self.sy + self.h;
                UIKitProject::ContextMenuPopup.open(context, sx, sy, "", list);
            }
        }
    }

    method open(context, memberList)
    {
        if (self.isOpening)
            return false;

        self.isOpening = true;
        self.memberList = memberList;

        SequenceUtil::pushPage(context, ROOT);
    }

    method close(context)
    {
        self.isOpening = false;
        self.OpenActor.stop();

        var actor = self.CloseActor;
        actor.forward();
        actor.restart();

        pdiext::ProcessUpdateIteration(300000);
        SequenceUtil::popPage(context, ROOT);
    }

    method abort(context)
    {
        if (self.isOpening)
        {
            UIKitProject::ContextMenuPopup.abort(context);
            OSKUtil::closeChatDialog(context);
            UIKitProject::SimpleSendMessageRoot.close(context);
            UIKitProject::ProfileRoot.close(context);
            self.close(context);
        }
    }

    method onInitialize(context)
    {
        self.refreshHeader(context);
        self.buildMemberList(context, self.memberList);
        
        var actor = self.OpenActor;
        actor.forward();
        actor.restart();
        self.CloseActor.stop();

        self.specialMenuEnabled = false;

        if (OnlineSession.isRoomOwner())
        {
            var rc = OnlineSession.getRoomConfig();
            if (rc.overwrite_user_name)
                self.specialMenuEnabled = true;
        }

        var list = [
            ["Enter"],
            ["Back"],
            ["Square", manager.translate("QuickMenu", "CHANGE_INFORMATION")],
        ];

        if (self.specialMenuEnabled)
        {
            list.push(["Triangle", "Special Command"]);
        }

        ButtonHelpGT6.set(context, list);
    }

    method onFinalize(context)
    {
        self.ListBox.clearChildren(context);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        self.close(context);
        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        if (event.keysym == CELL_PAD_CTRL_SQUARE)
        {
            self.changeViewMode(context);
            return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }

    method changeViewMode(context)
    {
        ++self.currentMode;
        self.refreshHeader(context);
        self.refreshMemberList(context);
    }

    method refreshHeader(context)
    {
        var text0, text1, text2;
        switch (self.currentMode % 4)
        {
            case 0:
                text0 = manager.translate(ROOT, "FrontTire");
                text1 = manager.translate(ROOT, "RearTire");
                text2 = manager.translate(ROOT, "SkidRecoveryForce");
                break;

            case 1:
                text0 = manager.translate(ROOT, "Transmission");
                text1 = manager.translate(ROOT, "ActiveSteering");
                text2 = manager.translate(ROOT, "DrivingLine");
                break;

            case 2:
                text0 = manager.translate(ROOT, "TCS");
                text1 = manager.translate(ROOT, "ASM");
                text2 = manager.translate(ROOT, "ABS");
                break;

            case 3:
                text0 = manager.translate(ROOT, "PP");
                text1 = manager.translate(ROOT, "Power");
                text2 = manager.translate(ROOT, "Weight");
                break;
        }

        self.Header::Composite2.label.text = text0;
        self.Header::Composite3.label.text = text1;
        self.Header::Composite4.label.text = text2;
    }

    method refreshMemberList(context)
    {
        var children = self.ListBox.getChildList();
        foreach (var member in children)
            member.resetDetailRowLabels();

        foreach (var member in children)
            member.updateInfo(context);
    }

    method buildMemberList(context, members)
    {
        if (members == nil)
            members = OnlineSession.getMemberList();

        for (var i = 0; i < 16; ++i)
        {
            var item = ROOT::hidden::MemberItem.doCopy();
            var member = i < members.size ? members[i] : nil;
            item.initialize(context, member, i + 1);
            self.ListBox.appendChild(context, item);
        }
    }
}