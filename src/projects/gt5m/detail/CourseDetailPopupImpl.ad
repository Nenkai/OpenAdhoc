//---------------------------------------------------------------------------------------
// CourseDetailPopupImpl.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module CourseDetailPopup
{
    attribute data = nil;
    attribute reverse = nil;
    attribute caller_root = nil;
    attribute race_difficulty = nil;

    class Data
    {
        attribute course_id = nil;
        attribute course_logo = nil;
        attribute course_label = nil;
        attribute category = nil;
        attribute length = nil;
        attribute elevation = nil;
        attribute has_reverse = nil;
        attribute driving_line = nil;
        attribute can_change_course = nil;
        attribute rank = nil;
        attribute r_rank = nil;
        attribute drift_type = nil;

        method __init__()
        {
            self.can_change_course = true;
        }
    }

    method open(context, data)
    {
        self.caller_root = context.getRootWindow();
        self.data = data;
        self.reverse = false;
        self.closing = false;
        self.result = false;
        self.popup = main::SequenceUtil::ModalPage(context, CourseDetailPopup);
        self.popup.open();
        return [ "result" : self.result,
                 "reverse" : self.reverse,
                 "driving_line" :self.data.driving_line,
                 "race_difficulty" : self.race_difficulty,
                 "drift_type" : self.data.drift_type ];
    }

    method onInitialize(context)
    {
        setCursor(context, "wait");

        BalloonTip.visible = false;
        BalloonTip.initialize(context);
        Pane.initialize(context, context.translate(CourseDetailPopup, "Balloon", "CourseDetail"));

        var space = Pane::Setting::Body::ScrollClip::space;
        space.y = 0;
        space.Layout::OptionMenu.insensitive = self.data.can_change_course && !self.data.has_reverse;
        if (self.data.has_reverse)
            space.Layout::OptionMenu.initialize(context, CourseDetailPopup, Template::OptionMenuItem1, ["LAYOUT_NORMAL", "LAYOUT_REVERSE"], "TrialSetting");
        else
            space.Layout::OptionMenu.initialize(context, CourseDetailPopup, Template::OptionMenuItem1, ["LAYOUT_NORMAL"], "TrialSetting");

        if (main::GlobalStatus::game_context.game_mode == main::gtengine::GameMode::SINGLE_RACE ||
            main::GlobalStatus::game_context.game_mode == -1)
            space.Difficulty.visible = true;
        else
            space.Difficulty.visible = false;

        space.DrivingLine::OptionMenu.initialize(context, CourseDetailPopup, Template::OptionMenuItem1, ["OFF", "ON"], "TrialSetting");

        space.DriftType::OptionMenu.initialize(context, CourseDetailPopup, Template::OptionMenuItem1, ["SECTION", "FULL_LAP"], "TrialSetting");

        if (main::GlobalStatus::game_context.game_mode == main::gtengine::GameMode::DRIFT_ATTACK)
            space.DriftType.visible = true;
        else
            space.DriftType.visible = false;

        Contents::ImageFace.image_path = "piece_gt5m/course_image/" + self.data.course_id + ".img";
        Contents::ImageFace.doInitialize(context);

        Contents::ImageFaceMap.image_path = "piece_gt5m/course_map_menu/" + self.data.course_id + ".img";
        Contents::ImageFaceMap.doInitialize(context);

        Contents::ImageFaceLogo.image_path = "piece_gt5m/course_logo_S/" + self.data.course_logo + ".img";
        Contents::ImageFaceLogo.doInitialize(context);

        if (self.data.category != "")
            Contents::TextFaceCategory.text = context.translate(CourseDetailPopup, "SpecFormat", "course_category_%s".format(self.data.category));
        else
            Contents::TextFaceCategory.text = "";

        var length_format = context.translate(CourseDetailPopup, "SpecFormat", "course_length");
        Contents::TextFaceLength.text = length_format.build(main::pdiext::MUnit::GetCourseLengthString(self.data.length),
                                                            context.translate(CourseDetailPopup, "Unit", main::pdiext::MUnit::GetUnitKeywordOfCourseLength()));

        var elevation_format = context.translate(CourseDetailPopup, "SpecFormat", "course_elevation");
        Contents::TextFaceElevation.text = elevation_format.build(main::pdiext::MUnit::GetCourseHeightString(self.data.elevation),
                                                                  context.translate(CourseDetailPopup, "Unit", main::pdiext::MUnit::GetUnitKeywordOfCourseHeight()));
        
        var course_label = self.data.course_label;
        if (course_label.beginWith("r_"))
            course_label = course_label.substr(2);

        Pane::About::Icon.visible = false;
        Pane::About::TextFace.text = context.translate(CourseDetailPopup, "CourseName", course_label);

        reflect(context);

        CourseDetailPopup.setFocus(Pane::Footer::OK);

        onInitializeAnimation(context);

        setCursor(context, "default");

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        var space = Pane::Setting::Body::ScrollClip::space;
        space.Layout::OptionMenu.finalize(context);
        space.Difficulty::OptionMenu.finalize(context);
        space.DrivingLine::OptionMenu.finalize(context);
        space.DriftType::OptionMenu.finalize(context);

        return EVENTRESULT_FILTER;
    }

    method initializeDifficulty(context)
    {
        var space = Pane::Setting::Body::ScrollClip::space;
        var previous_index = space.Difficulty::OptionMenu.index;

        var r = 0 == space.Layout::OptionMenu.index ? self.data.rank : self.data.r_rank;
        var difficulties = ["RANK_D"];
        if (r < 4)
            difficulties.push("RANK_C");

        if (r < 3)
            difficulties.push("RANK_B");

        if (r < 2)
            difficulties.push("RANK_A");

        if (r < 1)
            difficulties.push("RANK_S");

        space.Difficulty::OptionMenu.insensitive = 1 == difficulties.size;

        space.Difficulty::OptionMenu::popup::vbox.clearWindow(context);
        space.Difficulty::OptionMenu.initialize(context, CourseDetailPopup, Template::OptionMenuItem1, difficulties, "TrialSetting");

        var difficulty_count = space.Difficulty::OptionMenu.Count();
        var new_index = difficulty_count - 1;

        if (previous_index < (difficulty_count - 1))
            new_index = previous_index;

        space.Difficulty::OptionMenu.setIndex(context, new_index)
    }

    method reflect(context)
    {
        var space = Pane::Setting::Body::ScrollClip::space;

        var layout_index = self.data.course_label.beginWith("r_") ? 1 : 0;
        if (layout_index == 0)
        {
            var r_course_label = "r_" + self.data.course_label;
            var r_course_code = main::gtengine::MSpecDB::getCourseCode(r_course_label);
            if (main::GlobalStatus::game_context.course == r_course_code)
                layout_index = 1;
        }

        space.Layout::OptionMenu.setIndex(context, layout_index);

        var difficulty_count = space.Difficulty::OptionMenu.Count();
        var difficulty_index = difficulty_count - 1;

        if (main::GlobalStatus::game_context.race_difficulty < (difficulty_count - 1))
            difficulty_index = main::GlobalStatus::game_context.race_difficulty;

        space.Difficulty::OptionMenu.setIndex(context, difficulty_index);
        space.DrivingLine::OptionMenu.setIndex(context, self.data.driving_line ? 1 : 0);
        space.DriftType::OptionMenu.setIndex(context, self.data.drift_type);
    }

    method apply(context)
    {
        var space = Pane::Setting::Body::ScrollClip::space;
        self.reverse = space.Layout::OptionMenu.index != 0;
        self.race_difficulty = space.Difficulty::OptionMenu.index;
        self.data.driving_line = space.DrivingLine::OptionMenu.index != 0;
        self.data.drift_type = space.DriftType::OptionMenu.index;
    }

    attribute popup = nil;
    attribute closing = nil;
    attribute result = nil;

    method onCancel(context)
    {
        main::sound.play("cancel");
        CourseDetailPopup.setFocus(Pane::Footer::Cancel);
        return EVENTRESULT_FILTER;
    }

    method close(context)
    {
        if (nil != self.popup)
        {
            self.popup.close();
            self.popup = nil;
        }
    }

    method onInitializeAnimation(context)
    {
        context.event_mask &= ~1;
        context.filterKeyEvent();

        ScalarInterpolator.reverse = false;
        ScalarInterpolatorX.reverse = false;
        ScalarInterpolatorY.reverse = false;

        ScalarInterpolatorX.on_effect_end = function (context)
        {
            main::menu::MFocusEnterEvent(context, CourseDetailPopup.focus_widget).dispatchEvent();
            BalloonTip.visible = true;
            ScalarInterpolatorX.on_effect_end = nil;
            context.event_mask |= 1;

            if (CourseDetailPopup.caller_root != nil)
                CourseDetailPopup.caller_root.visible = false;
        }

        ScalarInterpolator.restart();
        ScalarInterpolatorX.restart();
        ScalarInterpolatorY.restart();
    }

    method onCancelAnimation(context)
    {
        context.event_mask &= ~1;
        context.filterKeyEvent();

        ScalarInterpolator.reverse = true;
        ScalarInterpolatorX.reverse = true;
        ScalarInterpolatorY.reverse = true;

        ScalarInterpolatorX.on_effect_end = function (context)
        {
            CourseDetailPopup.close(context);
            ScalarInterpolatorX.on_effect_end = nil;
            context.event_mask |= 1;
        }

        if (CourseDetailPopup.caller_root != nil)
        {
            CourseDetailPopup.caller_root.visible = true;
            CourseDetailPopup.caller_root = nil;
        }
        ScalarInterpolator.restart();
        ScalarInterpolatorX.restart();
        ScalarInterpolatorY.restart();
    }

    module Pane::Footer
    {
        method onFocusEnter(context, event)
        {
            var w = event.widget;
            BalloonTip.set_value(context, w, w.balloon.text, 3.5);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Footer::Cancel
    {
        method onActivate(context)
        {
            if (!CourseDetailPopup.closing)
            {
                main::sound.play("cancel");
                CourseDetailPopup.closing = true;
                CourseDetailPopup.onCancelAnimation(context);
            }
            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Footer::OK
    {
        method onActivate(context)
        {
            if (CourseDetailPopup.closing)
                return EVENTRESULT_FILTER;

            if (CourseDetailPopup.data.can_change_course)
            {
                var label = CourseDetailPopup.data.course_label;
                var space = Pane::Setting::Body::ScrollClip::space;
                if (space.Layout::OptionMenu.index != 0)
                    label = "r_" + CourseDetailPopup.data.course_label;

                if (CourseDetailPopup::isDriftDisable(context, main::GlobalStatus::game_context.game_mode, main::gtengine::MSpecDB::getCourseCode(label)))
                {
                    main::sound.play("cancel");
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(CourseDetailPopup, "Arcade", "CAN_NOT_START_DRIFT_AT_COURSE"));
                    return EVENTRESULT_FILTER;
                }
            }

            main::sound.play("ok");


            var interrupt = false;
            if (main::GlobalStatus::game_context.getCar().getCarCode() != main::gtengine::MSpecDB::NO_CODE64)
            {
                var context_carcode = main::GlobalStatus::game_context.getCar().getCarCode();
                var course_code = main::gtengine::MSpecDB::getCourseLabel(CourseDetailPopup.data.course_label);
                var GF = main::gtengine::MSpecDB::checkGenericFlag("dirt_disable", context_carcode);
                if (GF)
                {
                    var condition_code = main::gtengine::MSpecDB::getCourseCondition(course_code);
                    if (condition_code == main::gtengine::CourseCondition::DIRT ||
                        condition_code == main::gtengine::CourseCondition::SNOW)
                    {
                        var confirm_mess = context.translate(CourseDetailPopup, "Arcade", "CONFIRMATION_COURSE_SELECT");
                        var res = DialogUtil::openConfirmDialog(context, DialogUtil::DEFAULT_NO, confirm_mess);
                        interrupt = !res;
                    }
                }
            }

            if (interrupt)
                return EVENTRESULT_FILTER;

            CourseDetailPopup.closing = true;
            CourseDetailPopup.result = true;
            CourseDetailPopup.apply(context);
            Blink.ScalarInterpolator.on_effect_end = function (context)
            {
                CourseDetailPopup.close(context);
            }
            
            if (CourseDetailPopup.caller_root != nil)
            {
                CourseDetailPopup.caller_root.visible = true;
                CourseDetailPopup.caller_root = nil;
            }

            Blink.ScalarInterpolator.restart();
            return EVENTRESULT_FILTER;
        }
    }


    function isDriftDisable(context, mode, course_code)
    {
        if (course_code == main::gtengine::MSpecDB::NO_CODE64)
            return false;

        if (mode == main::gtengine::GameMode::DRIFT_ATTACK)
        {
            var disable_course = [ main::gtengine::MSpecDB::getCourseCode("testcourse_ps2"),
                                   main::gtengine::MSpecDB::getCourseCode("oval_ps2") ];


            foreach (var code in disable_course)
            {
                if (code == course_code)
                    return true;
            }
        }
        return false;
    }

    module Pane::Setting::Body::ScrollClip::space::Layout::OptionMenu
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);

            CourseDetailPopup.initializeDifficulty(context);
        }
    }
}