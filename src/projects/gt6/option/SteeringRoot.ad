













module ROOT
{
    method open(context)
    {
        SettingFrame2.appear();
        SequenceUtil::pushPage(context, self);
    }

    method close(context)
    {
        var delay_time = SettingFrame2.hide();
        SequenceUtil::popPage(context, self, delay_time);
    }

    method reflect(context)
    {
        var option = main::GAME_STATUS.user_profile.option;

        SettingFrame2::Pane::Right::ScrolledBody::clip::space::Assist::OptionMenu.setIndex(context, option.steering_assist_type_1p - 1);
        SettingFrame2::Pane::Right::ScrolledBody::clip::space::PowerAssist::OptionMenu.setIndex(context, 1 - option.FFB_assist_1p);
        SettingFrame2::Pane::Right::ScrolledBody::clip::space::Feedback::slider.index = option.FFB_level_1p;
        SettingFrame2::Pane::Right::ScrolledBody::clip::space::Rise::slider.index = option.FFB_rise_1p;
    }

    method apply(context)
    {
        var option = main::GAME_STATUS.user_profile.option;

        option.steering_assist_type_1p =  SettingFrame2::Pane::Right::ScrolledBody::clip::space::Assist::OptionMenu.index + 1;
        option.FFB_assist_1p =  1 - SettingFrame2::Pane::Right::ScrolledBody::clip::space::PowerAssist::OptionMenu.index;
        option.FFB_level_1p = SettingFrame2::Pane::Right::ScrolledBody::clip::space::Feedback::slider.index;
        option.FFB_rise_1p = SettingFrame2::Pane::Right::ScrolledBody::clip::space::Rise::slider.index;
        option.apply();
    }

    function activeCanConfigControllers(focus_config)
    {
        switch (focus_config)
        {
            case "ActiveSteering":
            case "Feedback":
            case "Rise":
                SettingFrame2::Pane::Left::View['T500RS'].active = true;
                SettingFrame2::Pane::Left::View['T300RS'].active = true;
                SettingFrame2::Pane::Left::View['G27'].active = true;
                SettingFrame2::Pane::Left::View['G25'].active = true;
                SettingFrame2::Pane::Left::View['DF_GT'].active = true;
                SettingFrame2::Pane::Left::View['GTF_PRO'].active = true;
                SettingFrame2::Pane::Left::View['GTF_RX'].active = true;
                SettingFrame2::Pane::Left::View['GTF'].active = true;
                SettingFrame2::Pane::Left::View['DF'].active = true;
                break;
                
            case "Assist":
                SettingFrame2::Pane::Left::View['T500RS'].active = false;
                SettingFrame2::Pane::Left::View['T300RS'].active = false;
                SettingFrame2::Pane::Left::View['G27'].active = false;
                SettingFrame2::Pane::Left::View['G25'].active = false;
                SettingFrame2::Pane::Left::View['DF_GT'].active = false;
                SettingFrame2::Pane::Left::View['GTF_PRO'].active = false;
                SettingFrame2::Pane::Left::View['GTF_RX'].active = true;
                SettingFrame2::Pane::Left::View['GTF'].active = true;
                SettingFrame2::Pane::Left::View['DF'].active = true;
                break;

            case "PowerAssist":
                SettingFrame2::Pane::Left::View['T500RS'].active = true;
                SettingFrame2::Pane::Left::View['T300RS'].active = true;
                SettingFrame2::Pane::Left::View['G27'].active = true;
                SettingFrame2::Pane::Left::View['G25'].active = true;
                SettingFrame2::Pane::Left::View['DF_GT'].active = true;
                SettingFrame2::Pane::Left::View['GTF_PRO'].active = true;
                SettingFrame2::Pane::Left::View['GTF_RX'].active = false;
                SettingFrame2::Pane::Left::View['GTF'].active = false;
                SettingFrame2::Pane::Left::View['DF'].active = false;
                break;
        }
    }

    method onInitialize(context)
    {
        if (gDirectApplyMode)
            SettingFrame2::Pane::Right::Foot.visible = false;
        
        reflect(context);
        SettingFrame2::Pane::Right::ScrolledBody::clip::space::Feedback::slider.setup(context);
        SettingFrame2::Pane::Right::ScrolledBody::clip::space::Rise::slider.setup(context);

        ROOT.setFocus(SettingFrame2::Pane::Right::ScrolledBody::clip::space::Assist::OptionMenu);
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        if (gDirectApplyMode)
        {
            ROOT.apply();
            ROOT.close(context);
        }
        else
            ROOT.setFocus(SettingFrame2::Pane::Right::Foot::Cancel);

        return EVENTRESULT_FILTER;
    }

    module SettingFrame2::Pane::Right::ScrolledBody::clip::space
    {
        method onFocusEnter(context, event)
        {
            ROOT.activeCanConfigControllers(event.widget.parent.name);
            return EVENTRESULT_CONTINUE;
        }
    }

    module SettingFrame2::Pane::Right::ScrolledBody::clip::space::Assist::OptionMenu
    {
        method onFocusEnter(context)
        {
            context.pushEvent(main::menu::MFunctionEvent(function(context) {
                var GTF = context.translate(ROOT, "SteeringPartName", "GT_FORCE");
                var DF = context.translate(ROOT, "SteeringPartName", "DRIVING_FORCE");
                var GTF_RX = context.translate(ROOT, "SteeringPartName", "GT_FORCE_RX");
                var txt_base = context.translate(ROOT, "TOOLTIP|Assist");
                var txt_mix = txt_base.build(GTF, DF, GTF_RX);
                self.SettingFrame2::ToolTip::tip.value = txt_mix;
            }, context));

            return EVENTRESULT_CONTINUE;
        }
    }

    module SettingFrame2::Pane::Right::ScrolledBody::clip::space::Feedback::slider
    {
        method onFocusEnter(context)
        {
            context.pushEvent(main::menu::MFunctionEvent(function(context) {
                self.SettingFrame2::ToolTip::tip.value = manager.translate("TrialSetting", "TOOLTIP|FFBTorque");
            }, context));

            ROOT.activeCanConfigControllers(self.parent.name);
            return EVENTRESULT_CONTINUE;
        }
    }

    module SettingFrame2::Pane::Right::ScrolledBody::clip::space::Rise::slider
    {
        method onFocusEnter(context)
        {
            context.pushEvent(main::menu::MFunctionEvent(function(context) {
                self.SettingFrame2::ToolTip::tip.value = manager.translate("TrialSetting", "TOOLTIP|FFBRise");
            }, context));

            ROOT.activeCanConfigControllers(self.parent.name);
            return EVENTRESULT_CONTINUE;
        }
    }

    module SettingFrame2::Pane::Right::Foot::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.apply();
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame2::Pane::Right::Foot::Cancel
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }
}