//---------------------------------------------------------------------------------------
// SelectRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ROOT
{
    hidden.visible = false;

    attribute modal_page = nil;
    attribute data = nil;
    attribute result = nil;

    class Data
    {
        attribute title = nil;
        attribute translate_page = nil;
        attribute extra_translate_page = nil;
        attribute candidates = nil;
    }

    method open(context, data)
    {
        self.result = nil;
        self.data = data;
        self.modal_page = SequenceUtil::ModalPage(context, ROOT);
        self.modal_page.open();
        var res = self.result;
        self.result = nil;
        return res;
    }

    method close(context, selected_index)
    {
        if (self.modal_page != nil)
        {
            self.modal_page.close();
            self.modal_page = nil;
            self.result = selected_index;
        }
    }

    method onInitialize(context)
    {
        if (self.data.title != nil)
        {
            if (self.data.extra_translate_page != nil)
                Pane::Title::title.text = context.translate(self.data.translate_page, self.data.extra_translate_page, self.data.title);
            else
                Pane::Title::title.text = context.translate(self.data.translate_page, self.data.title);
        }

        initializeListBox(context);

        ROOT.setFocus(Pane::Body::ListBox);

        return EVENTRESULT_FILTER;
    }

    method initializeListBox(context)
    {
        var listbox = Pane::Body::ListBox;
        listbox.setItemCount(self.data.candidates.size);
        listbox.setItemTemplate(context, hidden::Item);

        listbox.adjustment = main::menu::MAdjustment();
        Pane::Body::VScrollbar.adjustment = listbox.adjustment;

        Pane::Buttons.visible = false;
    }

    method onFinalize(context)
    {
        var listbox = Pane::Body::ListBox;
        listbox.setItemCount(0);

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        close(context, nil);
        return EVENTRESULT_FILTER;
    }

    module Pane::Body::ListBox
    {
        method onVisibleNotify(context, indexes)
        {
            foreach (var i in indexes)
            {
                if (self.getItemVisible(i))
                {
                    var item = self.getItemWidget(i);
                    if (item == nil)
                    {
                        item = self.getItemWidget(i, context);
                        item.initialize(context, i, ROOT.data.candidates[i]);
                    }
                }
            }
        }

        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.close(context, self.focus_index);
            return EVENTRESULT_FILTER;
        }

        method onKeyPress(context, event)
        {
            switch (event.keysym)
            {
                case PSP_PAD_CTRL_L3_LEFT:
                    self.decIndex(5);
                    return EVENTRESULT_FILTER;

                case PSP_PAD_CTRL_L3_RIGHT:
                    self.incIndex(5);
                    return EVENTRESULT_FILTER;
            }

            return EVENTRESULT_CONTINUE;
        }
    }

    module hidden::Item
    {
        method initialize(context, index, candidate)
        {
            var text = candidate.toString();
            self.TextFace.text = text;
            self.TextFaceF.text = text;
            self.ColorFace0.visible = (index % 2) == 0;
            self.ColorFace1.visible = (index % 2) != 0;
        }
    }
}