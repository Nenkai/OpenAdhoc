













#define GARAGE_TABLE_NAME "t_garage"
#define GARAGE_TABLE_VERSION 15

#define MAX_CARS 2000
#define MAX_FAVORITE 100
#define MAX_ONLINE 6

module Garage2
{
    class CarParameterProxy
    {
        attribute buf;
        attribute car_code;
        attribute country;
        attribute year;
        attribute power;
        attribute power_rpm;
        attribute mass;
        attribute color;
        attribute has_premium;
        attribute short_name;
        attribute tuner_label;
        attribute drive_train;
        attribute cp;
        attribute garage_id;
        attribute odometer;
        attribute ride_count;
        attribute paint_color;
        attribute grim_car_id;
        attribute pp;
        attribute favorite;
        attribute invalid;
        
        method __init__(buf, car_code, country, year, power, power_rpm, mass, color, 
            has_premium, short_name, tuner_label, drive_train, garage_id, odometer, 
            ride_count, paint_color, grim_car_id, pp, favorite, invalid)
        {
            self.buf = buf;
            self.car_code = car_code;
            self.country = country;
            self.year = year;
            self.power = power;
            self.power_rpm = power_rpm;
            self.mass = mass;
            self.color = color;
            self.has_premium = has_premium;
            self.short_name = short_name;
            self.tuner_label = tuner_label;
            self.drive_train = drive_train;
            self.garage_id = garage_id;
            self.odometer = odometer;
            self.ride_count = ride_count;
            self.paint_color = paint_color;
            self.grim_car_id = grim_car_id;
            self.pp = pp;
            self.favorite = favorite;
            self.invalid = invalid;
        }

        method copyIf(_cpp)
        {
            self.power = _cpp.power;
            self.power_rpm = _cpp.power_rpm;
            self.mass = _cpp.mass;
            self.pp = _cpp.pp;
        }

        method getCP()
        {
            if (self.cp == nil)
            {
                self.cp = main::gtengine::MCarParameter();
                self.cp.deserialize(self.buf.getByteData(0));
                self.buf = nil;
            }

            return self.cp;
        }

        method getYearString()
        {
            return self.year == 0 ? "---" : self.year.toString();
        }

        method getMassString()
        {
            var unit_mass = pdiext::MUnit::GetUnitOfMass();
            return self.mass == 0 ? "---" : "%{self.mass} %{unit_mass}";
        }

        method getPowerString()
        {
            var unit_power = pdiext::MUnit::GetUnitOfPower();
            if (self.power == 0)
                return "---";
            else 
                return "%s %{unit_power}".format(pdiext::MUnit::GetPowerForDisplay(self.power));
        }

        method getPsRpmString()
        {
            if (self.power == 0 || self.power_rpm == "---")
                return "---";
            
            var unit_power = pdiext::MUnit::GetUnitOfPower();
            var power_str = "%s%{unit_power}".format(pdiext::MUnit::GetPowerForDisplay(self.power));

            var unit_rpm = pdiext::MUnit::GetUnitOfRpm();
            var power_rpm_str = "%{self.power_rpm}%{unit_rpm}";
            return "%{power_str}/%{power_rpm_str}";
        }
    }

    function clearInitializer()
    {
        undef CreateStructure;
        undef Initialize;
        undef clearInitializer;
        undef addInitialize;
    }

    function CreateStructure()
    {
        var st = STStructure("Impl");
        Garage2.defineModule(st);

        st.define("riding_car", STObject(gtengine::MCarParameter));
        st.define("riding_id", STInt());
        st.define("friend_car_id", STInt());
        DefineMethod();
        return st;
    }

    function Initialize(instance, for_importcar)
    {
        instance.riding_car = gtengine::MCarParameter(nil, false);
        instance.riding_id = -1;
        instance.friend_car_id = -1;

        var sqlite = GlobalStatus::getSqlite();
        DBUtil::initializeTableCommon(sqlite, GARAGE_TABLE_NAME, GARAGE_TABLE_VERSION);

        var sql_list = [
            "CREATE TABLE IF NOT EXISTS t_garage (garage_id INTEGER PRIMARY KEY, car_code INTEGER, color INTEGER, " +
            "type INTEGER, country TEXTL, tuner_label TEXT, drive_train TEXT, favorite INTEGER, " +
            "year INTEGER, power INTEGER, power_rpm TEXT, pp INTEGER, mass INTEGER, online INTEGER, grim_car_id INTEGER, " +
            "name_JP TEXT, name_EN TEXT, carparameter BLOB, odometer INTEGER, ride_count INTEGER, obtained_date INTEGER, aspiration INTEGER, " +
            "paint_color INTEGER, riding_order INTEGER, slot_id INTEGER, carparameterB BLOB, carparameterC BLOB, " +
            "cp_commentA TEXT, cp_commentB TEXT, cp_commentC TEXT, " +
            "invalid INTEGER, length INTEGER, car_category INTEGER" 
            ")",

            "CREATE INDEX IF NOT EXISTS t_garage_idx1 ON t_garage (car_code)",
            "CREATE INDEX IF NOT EXISTS t_garage_idx2 ON t_garage (color)",
            "CREATE INDEX IF NOT EXISTS t_garage_idx3 ON t_garage (type)",
            "CREATE INDEX IF NOT EXISTS t_garage_idx4 ON t_garage (country)",
            "CREATE INDEX IF NOT EXISTS t_garage_idx5 ON t_garage (tuner_label)",
            "CREATE INDEX IF NOT EXISTS t_garage_idx6 ON t_garage (drive_train)",
            "CREATE INDEX IF NOT EXISTS t_garage_idx7 ON t_garage (favorite)",
            "CREATE INDEX IF NOT EXISTS t_garage_idx8 ON t_garage (year)",
            "CREATE INDEX IF NOT EXISTS t_garage_idx9 ON t_garage (power)",
            "CREATE INDEX IF NOT EXISTS t_garage_idx10 ON t_garage (online)",
            "CREATE INDEX IF NOT EXISTS t_garage_idx11 ON t_garage (pp)",
            "CREATE INDEX IF NOT EXISTS t_garage_idx12 ON t_garage (mass)",
            "CREATE INDEX IF NOT EXISTS t_garage_idx13 ON t_garage (odometer)",
            "CREATE INDEX IF NOT EXISTS t_garage_idx14 ON t_garage (ride_count)",
            "CREATE INDEX IF NOT EXISTS t_garage_idx15 ON t_garage (obtained_date)",
            "CREATE INDEX IF NOT EXISTS t_garage_idx16 ON t_garage (riding_order)",
        ];

        var dummy_param = [];
        var sql_list0 = Array();
        foreach (var sql in sql_list)
            sql_list0.push([sql, dummy_param]);

        var res = sqlite.executeTransaction(sql_list0);
    }

    function addInitialize(instance)
    {
        var sqlite = GlobalStatus::getSqlite();
        var version = DBUtil::getTableVersionCommon(sqlite, GARAGE_TABLE_NAME);

        // V7->V10: Add riding order, cp blob & comment columns
        if (version == 7)
        {
            sqlite.begin();
            
            var sql_list = [
                "ALTER TABLE %s ADD COLUMN riding_order INTEGER".format(GARAGE_TABLE_NAME),
                "ALTER TABLE %s ADD COLUMN slot_id INTEGER".format(GARAGE_TABLE_NAME),
                "ALTER TABLE %s ADD COLUMN carparameterB BLOB".format(GARAGE_TABLE_NAME),
                "ALTER TABLE %s ADD COLUMN carparameterC BLOB".format(GARAGE_TABLE_NAME),
                "ALTER TABLE %s ADD COLUMN cp_commentA TEXT".format(GARAGE_TABLE_NAME),
                "ALTER TABLE %s ADD COLUMN cp_commentB TEXT".format(GARAGE_TABLE_NAME),
                "ALTER TABLE %s ADD COLUMN cp_commentC TEXT".format(GARAGE_TABLE_NAME),
                "DROP INDEX IF EXISTS %s_idx16".format(GARAGE_TABLE_NAME),
                "CREATE INDEX %s_idx16 ON %s (riding_order)".format(GARAGE_TABLE_NAME, GARAGE_TABLE_NAME),
                "UPDATE %s SET riding_order = 0".format(GARAGE_TABLE_NAME),
                "UPDATE %s SET slot_id = 0".format(GARAGE_TABLE_NAME),
                "UPDATE %s SET carparameterB = carparameter".format(GARAGE_TABLE_NAME),
                "UPDATE %s SET carparameterC = carparameter".format(GARAGE_TABLE_NAME),
                "UPDATE %s SET cp_commentA = '', cp_commentB = '', cp_commentC = ''".format(GARAGE_TABLE_NAME),
            ];

            foreach (var sql in sql_list)
            {
                var res = sqlite.execute0(sql);
                DB_ASSERT(res == SQLITE_OK, res);
            }

            DBUtil::updateTableVersionCommon(sqlite, GARAGE_TABLE_NAME, 10);
            version = 10;
            sqlite.commit();
        }

        // V10->V11: Add Invalid column
        if (version == 10)
        {
            var sql_list = [
                "ALTER TABLE %s ADD COLUMN invalid INTEGER".format(GARAGE_TABLE_NAME),
                "UPDATE %s SET invalid = 0".format(GARAGE_TABLE_NAME),
            ];

            var dummy_param = [];
            var sql_list0 = Array();
            foreach (var sql in sql_list)
                sql_list0.push([sql, dummy_param]);
    
            var res = sqlite.executeTransaction(sql_list0);

            DBUtil::updateTableVersionCommon(sqlite, GARAGE_TABLE_NAME, 11);
            version = 11;
        }

        // V11->V12: Add length & car_category columns
        if (version == 11)
        {
            var sql1 = "SELECT DISTINCT car_code FROM t_garage";
            var res = sqlite.executeQuery(sql1, []);
            var sql_list0 = [];

            var sql_list = [
                "ALTER TABLE %s ADD COLUMN length INTEGER".format(GARAGE_TABLE_NAME),
                "ALTER TABLE %s ADD COLUMN car_category INTEGER".format(GARAGE_TABLE_NAME),
            ];
     
            foreach (var sql in sql_list)
                sql_list0.push([sql, []]);
    
            var sql2 = "UPDATE t_garage SET length = ?, car_category = ? WHERE car_code = ?";
            foreach (var row in res)
            {
                var car_code = row[0];
                var length = gtengine::MSpecDB::getCarCatalogLength(car_code, false);
                if (length == "---")
                    length = "0";

                var car_category = gtengine::MSpecDB::getCarCategory(car_code);
                sql_list0.push([sql2, [length.toInt(), car_category, car_code]]);
            }

            var res0 = sqlite.executeTransaction(sql_list0);
            DBUtil::updateTableVersionCommon(sqlite, GARAGE_TABLE_NAME, GARAGE_TABLE_VERSION);
            version = 12;
        }

        // V12->V13: Update carparameter blobs
        if (version == 12)
        {
            var car_code = gtengine::MSpecDB::getCarCode("racing_kart_125_sp_xx");
            var sql1 = "SELECT garage_id, carparameter, carparameterB, carparameterC FROM t_garage where car_code = ?";
            var res = sqlite.executeQuery(sql1, [car_code]);

            if (res.size > 0)
            {
                var category = gtengine::PARTS_TIRE::SPORTS_SOFT_A;
                var cp = instance.riding_car;
                if (cp != nil)
                {
                    if (car_code == cp.getCarCode())
                    {
                        cp.beginPartsInfo();
                        cp.setParts(gtengine::CarPartsType::FRONT_TIRE, category);
                        cp.setParts(gtengine::CarPartsType::REAR_TIRE, category);
                        cp.endPartsInfo();
                    }
                }

                var carparameter_list = [
                    res[0][1],
                    res[0][2],
                    res[0][3],
                ];
                var cp_list = [];

                foreach (var carparameter in carparameter_list)
                {
                    var cp = main::gtengine::MCarParameter();
                    cp.deserialize(carparameter.getByteData(0));

                    cp.beginPartsInfo();
                    cp.setParts(gtengine::CarPartsType::FRONT_TIRE, category);
                    cp.setParts(gtengine::CarPartsType::REAR_TIRE, category);
                    cp.endPartsInfo();

                    cp_list.push(cp);
                }

                var garage_id = res[0][0];
                var blobA = main::pdistd::MBlob(cp_list[0].serialize());
                var blobB = main::pdistd::MBlob(cp_list[1].serialize());
                var blobC = main::pdistd::MBlob(cp_list[2].serialize());

                var sql = "UPDATE t_garage set carparameter = ?, carparameterB = ?, carparameterC = ? WHERE garage_id = ?";
                var sql_list = [];
                sql_list.push([sql, [blobA, blobB, blobC, garage_id]]);

                var res = sqlite.executeTransaction(sql_list);
                DBUtil::updateTableVersionCommon(sqlite, GARAGE_TABLE_NAME, GARAGE_TABLE_VERSION);
                version = 13;
            }
        }

        // V13->V14 = PP Update
        if (version == 13)
        {
            var sql = "SELECT garage_id, slot_id, carparameter, carparameterB, carparameterC FROM t_garage";
            var res = sqlite.executeQuery(sql);
            var sql_list = [];
            var sql_update = "UPDATE t_garage SET pp = ? WHERE garage_id = ?";
            foreach (var row in res)
            {
                var garage_id = row[0];
                var slot_id = row[1];

                if (slot_id == nil)
                    continue;

                var cp = main::gtengine::MCarParameter();
                var buf = row[2 + slot_id];
                cp.deserialize(buf.getByteData(0));

                cp.beginInfo();
                var pp = cp.getPP1000();
                cp.endInfo();

                var pp_int = pp.toInt();
                sql_list.push([sql_update, [pp_int, garage_id]]);
            }

            var res1 = sqlite.executeTransaction(sql_list);
            DBUtil::updateTableVersionCommon(sqlite, GARAGE_TABLE_NAME, GARAGE_TABLE_VERSION);
            version = 14;
        }

        // V14->V15: PP Update, fix nil columns
        if (version == 14)
        {
            var sql = "SELECT garage_id, slot_id, carparameter, carparameterB, carparameterC FROM t_garage";
            var res = sqlite.executeQuery(sql);
            var sql_list = [];
            var sql_update = "UPDATE t_garage SET pp = ? WHERE garage_id = ?";
            var invalid_garage_id_list = [];

            foreach (var row in res)
            {
                var garage_id = row[0];
                var slot_id = row[1];
                if (slot_id == nil)
                {
                    invalid_garage_id_list.push(garage_id);
                    slot_id = 0;
                }

                var cp = main::gtengine::MCarParameter();
                var buf = row[2 + slot_id];
                cp.deserialize(buf.getByteData(0));

                cp.beginInfo();
                var pp = cp.getPP1000();
                cp.endInfo();

                var pp_int = pp.toInt();
                sql_list.push([sql_update, [pp_int, garage_id]]);
            }

            var res1 = sqlite.executeTransaction(sql_list);
            if (invalid_garage_id_list.size > 0)
            {
                var sql0 = "SELECT riding_order, slot_id, carparameterB, carparameterC, cp_commentA, cp_commentB, cp_commentC FROM t_garage where garage_id = ?";
                foreach (var garage_id in invalid_garage_id_list)
                {
                    var row = sqlite.executeQuery(sql0, [garage_id]);
                    if (row.size == 0)
                        continue;

                    |var riding_order, var slot_id, var carparameterB, var carparameterC, var cp_commentA, var cp_commentB, var cp_commentC| = row[0];
                    var sql_list0 = [];

                    if (riding_order == nil)
                    {
                        var s = "UPDATE %s SET riding_order = 0 WHERE garage_id = ?".format(GARAGE_TABLE_NAME, garage_id);
                        sql_list0.push([s, [garage_id]]);
                    }

                    if (slot_id == nil)
                    {
                        var s = "UPDATE %s SET slot_id = 0 WHERE garage_id = ?".format(GARAGE_TABLE_NAME, garage_id);
                        sql_list0.push([s, [garage_id]]);
                    }

                    if (carparameterB == nil)
                    {
                        var s = "UPDATE %s SET carparameterB = carparameter WHERE garage_id = ?".format(GARAGE_TABLE_NAME, garage_id);
                        sql_list0.push([s, [garage_id]]);
                    }

                    if (carparameterC == nil)
                    {
                        var s = "UPDATE %s SET carparameterC = carparameter WHERE garage_id = ?".format(GARAGE_TABLE_NAME, garage_id);
                        sql_list0.push([s, [garage_id]]);
                    }

                    if (cp_commentA == nil)
                    {
                        var s = "UPDATE %s SET cp_commentA = '' WHERE garage_id =?".format(GARAGE_TABLE_NAME, garage_id);
                        sql_list0.push([s, [garage_id]]);
                    }

                    if (cp_commentB == nil)
                    {
                        var s = "UPDATE %s SET cp_commentB = '' WHERE garage_id =?".format(GARAGE_TABLE_NAME, garage_id);
                        sql_list0.push([s, [garage_id]]);
                    }

                    if (cp_commentC == nil)
                    {
                        var s = "UPDATE %s SET cp_commentC = '' WHERE garage_id =?".format(GARAGE_TABLE_NAME, garage_id);
                        sql_list0.push([s, [garage_id]]);
                    }

                    res1 = sqlite.executeTransaction(sql_list0);
                }
            }

            DBUtil::updateTableVersionCommon(sqlite, GARAGE_TABLE_NAME, GARAGE_TABLE_VERSION);
            version = 15;
        }

        if (version == 15)
            ;
    }

    function DefineMethod()
    {
        module Impl
        {
            method apply()
            {
                if (!self.riding_car.isVacant())
                    self.riding_car.permanentlyBeginInfo();
            }

            method addCar(cp)
            {
                var garage_count = getCount();
                if (garage_count >= MAX_CARS)
                    return -1;

                cp.rentacar = false;
                var garage_id = getNextGarageId();
                cp.garage_id = garage_id;

                var results = createInsertSql(cp);
                if (results == nil)
                    return -1;

                |var sql, var params| = results;
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.execute(sql, params);

                if (isFailed(res))
                {
                    cp.garage_id = -1;
                    garage_id = -1;
                }
                else
                {
                    if (self.riding_id < 0)
                        rideCar(garage_id);

                    checkPSTrophy_forCOLLECTOR();
                    checkPSTrophy_forOBTAIN_MEMORIAL_CARS();
                }

                return garage_id;
            }

            method createInsertSql(cp)
            {
                var car_code = cp.getCarCode();
                var color = cp.color;
                var results = gtengine::MSpecDB::getCarDataForGarage(car_code);
                if (results == nil)
                    return nil;

                |var has_premium, var country, var tuner_label, var drive_train, var year, 
                    var power, var name_jp, var name_en, var power_rpm, var mass| = results;
                var type = has_premium ? 1 : 2;
                var blob = main::pdistd::MBlob(cp.serialize());
                
                cp.beginInfo();
                var pp = cp.getPP1000();
                |var cp_power, var cp_power_rpm| = cp.getPower();
                var cp_weight = cp.getWeight();
                var cp_aspiration = cp.getAspirationType();
                cp.endInfo();

                var length = gtengine::MSpecDB::getCarCatalogLength(car_code, false);
                if (length == "---")
                    length = "0";

                var sql = "INSERT INTO t_garage (garage_id, car_code, color, type, country, tuner_label, drive_train, favorite, year, power, "
                    "power_rpm, pp, mass, online, grim_car_id, name_JP, name_EN, carparameter, odometer, ride_count, obtained_date, aspiration, paint_color,"
                    "riding_order, slot_id, carparameterB, carparameterC, cp_commentA, cp_commentB, cp_commentC, invalid, length, car_category) "
                    "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                var params = Array(33);
                params[0] = cp.garage_id;
                params[1] = car_code;
                params[2] = color;
                params[3] = type;
                params[4] = country;
                params[5] = tuner_label;
                params[6] = drive_train;
                params[7] = 0;
                params[8] = year;
                params[9] = cp_power.toInt();
                params[10] = cp_power_rpm;
                params[11] = pp.toInt();
                params[12] = cp_weight;
                params[13] = 0;
                params[14] = 0;
                params[15] = name_jp;
                params[16] = name_en;
                params[17] = blob;
                params[18] = cp.odometer;
                params[19] = 0;
                params[20] = pdiext::getBetterTime().getBySecond();
                params[21] = cp_aspiration;
                params[22] = cp.getPaintColor(0);
                params[23] = 0;
                params[24] = 0;
                params[25] = blob;
                params[26] = blob;
                params[27] = "";
                params[28] = "";
                params[29] = "";
                params[30] = 0;
                params[31] = length.toInt();
                params[32] = gtengine::MSpecDB::getCarCategory(car_code);
                return [sql, params];
            }

            method updateRidingCar()
            {
                if (self.riding_id >= 0)
                    updateCar(self.riding_car);
            }

            method updateCarName(garage_id, car_code)
            {
                var name_jp = gtengine::MSpecDB::getCarName(car_code);
                var name_en = gtengine::MSpecDB::getCarName_A(car_code);

                var sql = "UPDATE t_garage set car_code = ?, name_JP = ?, name_EN = ? WHERE garage_id = ?";

                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeTransaction([[sql, [car_code, name_jp, name_en, garage_id]]]);
                if (isFailed(res))
                    ;

                return true;
            }

            method updateCar(cp)
            {
                if (isRidingCar(cp.garage_id))
                {
                    self.riding_car.deepCopy(cp);
                    self.riding_car.permanentlyBeginInfo();
                    self.riding_car.updateScratch();
                }

                return update_car(cp);
            }

            method updateCarWithoutTrunk(cp)
            {
                if (isRidingCar(cp.garage_id))
                {
                    self.riding_car.copyWithoutTrunk(cp);
                    self.riding_car.permanentlyBeginInfo();
                    self.riding_car.updateScratch();
                }
                else
                    return update_car_without_trunk(cp);
            }

            method update_car(cp)
            {
                var sqlite = GlobalStatus::getSqlite();
                if (main::GameSequence::getCurrentProject() == "arcade")
                {
                    var cp0 = getCar(cp.garage_id);
                    if (cp0 != nil)
                        cp.copyAccumulatedStatus(cp0);
                }

                var sql_param_list = createUpdateSql(cp);
                var res = sqlite.executeTransaction(sql_param_list);
                if (isFailed(res))
                    ;

                return true;
            }

            method update_car_without_trunk(cp)
            {
                var org_cp = getCar(cp.garage_id);
                if (org_cp == nil)
                    return false;

                org_cp.copyWithoutTrunk(cp);
                return update_car(org_cp);
            }

            method createUpdateSql(cp)
            {
                var blob = main::pdistd::MBlob(cp.serialize());
                cp.beginInfo();
                var pp = cp.getPP1000();
                var power = cp.getPower();
                var cp_weight = cp.getWeight();
                var cp_aspiration = cp.getAspirationType();
                cp.endInfo();

                var sql_list = Array();
                var sql = "UPDATE t_garage set power=?, power_rpm=?, pp=?, mass=?, odometer=?, ride_count=?, aspiration=?, paint_color=?, color=?"
                    " WHERE garage_id=?";

                var params = Array(10);
                params[0] = power[0].toInt();
                params[1] = power[1].toInt();
                params[2] = pp.toInt();
                params[3] = cp_weight;
                params[4] = cp.odometer;
                params[5] = cp.ride_count;
                params[6] = cp_aspiration;
                params[7] = cp.getPaintColor(0);
                params[8] = cp.color;
                params[9] = cp.garage_id;

                sql_list.push([sql, params]);

                var sqlA = "UPDATE t_garage set carparameter = ? WHERE garage_id = ? AND slot_id = 0";
                var sqlB = "UPDATE t_garage set carparameterB = ? WHERE garage_id = ? AND slot_id = 1";
                var sqlC = "UPDATE t_garage set carparameterC = ? WHERE garage_id = ? AND slot_id = 2";

                params = Array(2);
                params[0] = blob;
                params[1] = cp.garage_id;

                sql_list.push([sqlA, params]);
                sql_list.push([sqlB, params]);
                sql_list.push([sqlC, params]);
                return sql_list;
            }

            method addCarList(cp_list)
            {
                var sql_list = [];
                foreach (var cp in cp_list)
                {
                    var garage_id = getNextGarageId();
                    cp.rentacar = false;
                    cp.garage_id = garage_id;
                    var sql = createInsertSql(cp);
                    if (sql != nil)
                        sql_list.push(sql);
                }

                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeTransaction(sql_list);
                if (isFailed(res))
                    return false;

                checkPSTrophy_forCOLLECTOR();
                checkPSTrophy_forOBTAIN_MEMORIAL_CARS();

                return true;
            }

            method removeCar(garage_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "DELETE FROM t_garage WHERE garage_id = ?";
                var res = sqlite.execute(sql, [garage_id]);
                if (isFailed(res))
                    return false;

                foreach (var type_str in ["L", "M", "S"])
                    pdistd::RemoveFile(GarageUtil::getThumbnailPath(garage_id, type_str));

                return true;
            }

            method clearRidingCar()
            {
                self.riding_car.clear();
                self.riding_id = -1;
            }

            method removeCarByCarCode(car_code)
            {
                var car_list = getCarListByCarCode(car_code);
                var get_out = false;

                if (car_list != nil)
                {
                    foreach (var item in car_list)
                    {
                        var garage_id = item[0];
                        if (garage_id == self.riding_id)
                        {
                            get_out = true;
                            break;
                        }
                    }
                }

                var sqlite = GlobalStatus::getSqlite();
                var sql = "DELETE FROM t_garage WHERE car_code = ?";
                var res = sqlite.execute(sql, [car_code]);
                if (isFailed(res))
                    return false;

                if (get_out)
                    clearRidingCar();

                return true;
            }

            method clear()
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "DELETE FROM t_garage";
                var res = sqlite.execute(sql);

                if (isFailed(res))
                    ;

                clearRidingCar();
            }

            method rideCar(garage_id)
            {
                var cp;
                if (garage_id < 0)
                {
                    |cp, garage_id| = getAnyCar();
                }
                else
                {   
                    cp = getCar(garage_id);
                }

                if (cp == nil)
                    return false;

                if (self.riding_id >= 0)
                    updateRidingCar();

                updateRidingCount(garage_id);

                cp.ride_count = cp.ride_count + 1;
                self.riding_id = garage_id;
                self.riding_car.deepCopy(cp);
                self.riding_car.permanentlyBeginInfo();

                if (self.friend_car_id >= 0 && garage_id != self.friend_car_id)
                {
                    removeCar(self.friend_car_id);
                    self.friend_car_id = -1;
                }
                
                return true;
            }

            method updateRidingCount(garage_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "UPDATE t_garage SET riding_order = (SELECT MAX (riding_order) FROM t_garage) + 1 WHERE garage_id = ?";
                sqlite.executeQuery(sql, [garage_id]);
            }

            method rideFriendCar(cp)
            {
                var result = false;
                var garage_id = addCar(cp);
                if (garage_id > 0)
                {
                    if (rideCar(garage_id))
                    {
                        self.friend_car_id = garage_id;
                        return true;
                    }
                }

                return false;
            }

            method getRidingCar()
            {
                if (self.riding_id < 0)
                    return nil;
                else
                    return self.riding_car;
            }

            method isRidingCar(garage_id)
            {
                return self.riding_id == garage_id;
            }

            method isRidingFriendCar()
            {
                return self.friend_car_id >= 0 && self.riding_id == self.friend_car_id;
            }

            method isFriendCar(garage_id)
            {
                return self.friend_car_id >= 0 && garage_id == self.friend_car_id;
            }

            method getCarList()
            {
                return getCarList2("", [], "ORDER BY garage_id ASC", false);
            }

            method getCPList()
            {
                return getCarList2("", [], "ORDER BY garage_id ASC", true);
            }

            method convertRow2Cpp(row)
            {
                |var garage_id, var carparameter, var car_code, var country, var year, var power, var power_rpm, var mass, var color, 
                    var type, var tuner_label, var drive_train, var short_name, var odometer, var ride_count, var paint_color, 
                    var grim_car_id, var pp, var favorite, var slot_id, var carparameterB, var carparameterC, var invalid| = row;

                var has_premium = type == 1;
                var buf = slot_id == 0 ? carparameter : slot_id == 1 ? carparameterB : carparameterC;
                var cpp = CarParameterProxy(buf, car_code, country, year, power, power_rpm, mass, color, 
                    has_premium, short_name, tuner_label, drive_train, garage_id, odometer, 
                    ride_count, paint_color, grim_car_id, pp, favorite, invalid);

                return cpp;
            }

            method convertRowList2CppList(list)
            {
                var cars = Array(list.size);
                var i = 0;
                foreach (var row in list)
                {
                    cars[i++] = convertRow2Cpp(row);
                }

                return cars;
            }

            method getCarList2(where, params, order_by, cp_only = false)
            {
                var name = (main::pdiext::MProductInformation::GetGameRegionCode() == "jp" && main::pdistd::MLocale::getLanguage()) == "JP" ? "name_jp" : "name_en";

                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT garage_id, carparameter, car_code, country, year, power, power_rpm, mass, color, "
                          "type, tuner_label, drive_train, %{name}, odometer, ride_count, paint_color, grim_car_id, pp, favorite, "
                          "slot_id, carparameterB, carparameterC, invalid FROM t_garage ";

                if (where != "")
                    sql += "%s ".format(where);

                sql += order_by;
                sqlite.executeQueryBegin(sql, params);

                var cp_list = [];
                while (true)
                {
                    var row = sqlite.executeQueryNext();
                    if (row == nil)
                        break;

                    if (cp_only)
                    {
                        cp_list.push(row);
                    }
                    else
                    {
                        var garage_id = row[0];
                        cp_list.push([garage_id, nil, self.riding_id == garage_id, row]);
                    }
                }

                sqlite.executeQueryEnd();
                return cp_list;
            }

            method getCarList3(where, params, order_by)
            {
                var name = (main::pdiext::MProductInformation::GetGameRegionCode() == "jp" && main::pdistd::MLocale::getLanguage()) == "JP" ? "name_jp" : "name_en";

                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT garage_id, car_code, country, year, power, power_rpm, mass, color, "
                          "type, tuner_label, drive_train, %{name}, odometer, ride_count, paint_color, grim_car_id, pp, favorite, "
                          "slot_id, invalid FROM t_garage ";

                if (where != "")
                    sql += "%s ".format(where);

                sql += order_by;
                var res = sqlite.executeQuery(sql, params);
                sqlite.executeQueryBegin(sql, params);

                var cp_list = Array(res.size);
                var index = 0;
                while (true)
                {
                    var row = sqlite.executeQueryNext();
                    if (row == nil)
                        break;

                    |var garage_id, var car_code, var country, var year, var power, var power_rpm, var mass, var color, 
                        var type, var tuner_label, var drive_train, var short_name, var odometer, var ride_count, var paint_color, 
                        var grim_car_id, var pp, var favorite, var slot_id, var invalid| = row;

                    var has_premium = type == 1;
                    var buf = nil;
                    var cpp = CarParameterProxy(buf, car_code, country, year, power, power_rpm, mass, color, 
                        has_premium, short_name, tuner_label, drive_train, garage_id, odometer, 
                        ride_count, paint_color, grim_car_id, pp, favorite, invalid);
                    cp_list[index++] = [garage_id, cpp, self.riding_id == garage_id];
                }

                sqlite.executeQueryEnd();
                return cp_list;
            }

            method getCarListByCarCode(car_code)
            {
                return getCarList2("WHERE car_code = ?", [car_code], "ORDER BY garage_id ASC", false);
            }

            method getGarageIdList(where)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT garage_id FROM t_garage %{where} ORDER BY garage_id";
                var res = sqlite.executeQuery(sql, []);

                var list = [];
                foreach (var row in res)
                    list.push(row[0]);

                return list;
            }

            method getAnyCar()
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT garage_id, slot_id, carparameter, carparameterB, carparameterC FROM t_garage WHERE invalid = 0 ORDER BY RANDOM() LIMIT 1";

                var res = sqlite.executeQuery(sql);
                if (res.size <= 0)
                    return [nil, -1];

                var garage_id = res[0][0];
                var slot_id = res[0][1];
                var buf = res[0][slot_id + 2];
                if (buf == nil)
                    return [nil, -1]; 

                var cp = main::gtengine::MCarParameter();
                cp.deserialize(buf.getByteData(0));
                return [cp, garage_id];
            }

            method getCar(garage_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT slot_id, carparameter, carparameterB, carparameterC FROM t_garage WHERE garage_id = ?";
                var res = sqlite.executeQuery(sql, [garage_id]);
                var slot_id = res[0][0];
                if (slot_id == nil)
                    return nil;

                var buf = res[0][slot_id + 1];
                if (buf == nil)
                    return nil;

                var cp = main::gtengine::MCarParameter();
                cp.deserialize(buf.getByteData(0));
                return cp;
            }

            method hasCar(car_code, color)
            {
                if (car_code.isInstanceOf(String))
                    car_code = gtengine::MSpecDB::getCarCode(car_code);

                var res = nil;
                var sqlite = GlobalStatus::getSqlite();
                if (color != nil)
                {
                    var sql = "SELECT COUNT (*) FROM t_garage WHERE car_code = ? AND color = ?";
                    res = sqlite.executeQuery(sql, [car_code, color]);
                }
                else
                {
                    var sql = "SELECT COUNT (*) FROM t_garage WHERE car_code = ?";
                    res = sqlite.executeQuery(sql, [car_code]);
                }

                var count = getResult1(res);
                return count != nil && count > 0;
            }

            method getCount(where)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT COUNT (*) FROM t_garage ";
                if (where != nil)
                    sql += where;

                var res = sqlite.executeQuery(sql);
                var count = getResult1(res);
                return count == nil ? 0 : count;
            }

            method getMax()
            {
                return MAX_CARS;
            }

            method getCountryList(type, additional_conditions)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT DISTINCT country FROM t_garage WHERE type = ? ";

                if (additional_conditions != nil && additional_conditions.size > 0)
                    sql += "AND %s ".format(additional_conditions.join(" AND "));

                sql += "ORDER BY country";

                var res = sqlite.executeQuery(sql, [type]);
                var list = [];
                foreach (var row in res)
                    list.push(row[0]);

                return list;
            }

            method getTunerList(type, country, additional_conditions)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT DISTINCT tuner_label FROM t_garage WHERE type = ? ";

                var params = [type];
                if (country != nil)
                {
                    sql += "AND country = ? ";
                    params.push(country);
                }

                if (additional_conditions != nil && additional_conditions.size > 0)
                    sql += "AND %s ".format(additional_conditions.join(" AND "));

                sql += "ORDER BY tuner_label";

                var res = sqlite.executeQuery(sql, params);
                var list = [];
                foreach (var row in res)
                    list.push(row[0]);

                return list;
            }

            method getDriveTrainList(type, country, tuner_label, additional_conditions)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT DISTINCT drive_train FROM t_garage WHERE type = ? ";

                var params = [type];
                if (country != nil)
                {
                    sql += "AND country = ? ";
                    params.push(country);
                }

                if (tuner_label != nil)
                {
                    sql += "AND tuner_label = ? ";
                    params.push(tuner_label);
                }

                if (additional_conditions != nil && additional_conditions.size > 0)
                    sql += "AND %s ".format(additional_conditions.join(" AND "));

                sql += "ORDER BY drive_train";

                var res = sqlite.executeQuery(sql, params);
                var list = [];
                foreach (var row in res)
                    list.push(row[0]);

                return list;
            }

            /////////////////////////////////////
            // Favorite cars handling
            /////////////////////////////////////
            method getFavoriteCarList(country, tuner_label, drive_train, order, by)
            {
                |var where, var params| = createWhereAndParams(country, tuner_label, drive_train, true);
                var order_by = createOrderBy(order, by);
                return getCarList2(where, params, order_by, false);
            }

            method getFavoriteCPList(country, tuner_label, drive_train, order, by)
            {
                |var where, var params| = createWhereAndParams(country, tuner_label, drive_train, true);
                var order_by = createOrderBy(order, by);
                return getCarList2(where, params, order_by, true);
            }

            method getFavoriteCPPList(country, tuner_label, drive_train, order, by)
            {
                |var where, var params| = createWhereAndParams(country, tuner_label, drive_train, true);
                var order_by = createOrderBy(order, by);
                var list = getCarList2(where, params, order_by, true);
                return convertRowList2CppList(list);
            }

            method getFavoriteCount()
            {
                return getCount("WHERE favorite = 1");
            }

            method getFavoriteMax()
            {
                return MAX_FAVORITE;
            }

            method isFavorite(garage_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT COUNT (*) FROM t_garage WHERE garage_id = ? AND favorite = 1";
                var res = sqlite.executeQuery(sql, [garage_id]);
                var count = getResult1(res);
                return count != nil && count > 0;
            }

            method setFavorite(garage_id, v)
            {
                if (v.isInstanceOf(Bool))
                    v = v.toInt();

                var sqlite = GlobalStatus::getSqlite();
                var sql = "UPDATE t_garage SET favorite = ? WHERE garage_id = ?";
                sqlite.execute(sql, [v, garage_id]);
            }

            method setFavoriteByList(garage_id_list, v)
            {
                if (v.isInstanceOf(Bool))
                    v = v.toInt();

                var sql = "UPDATE t_garage SET favorite = %{v} WHERE garage_id = ?";
                var sql_list = Array();

                foreach (var garage_id in garage_id_list)
                {
                    var params = [garage_id];
                    sql_list.push([sql, params]);
                }

                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeTransaction(sql_list);
                DB_ASSERT(res == SQLITE_DONE, res);

                if (isFailed(res))
                    ;
            }

            /////////////////////////////////////
            // Online (shared) cars handling
            /////////////////////////////////////
            method getOnlineCount()
            {
                return getCount("WHERE online = 1");
            }

            method getOnlineMax()
            {
                return MAX_ONLINE;
            }

            method setOnline(garage_id, v)
            {
                if (v.isInstanceOf(Bool))
                    v = v.toInt();

                var sqlite = GlobalStatus::getSqlite();
                var sql = "UPDATE t_garage SET online = ? WHERE garage_id = ?";
                sqlite.executeQuery(sql, [v, garage_id]);
            }

            method setForceOffline()
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "UPDATE t_garage SET online = 0";
                sqlite.executeQuery(sql, []);
            }

            method isOnline(garage_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT COUNT (*) FROM t_garage WHERE garage_id = ? AND online = 1";
                var res = sqlite.executeQuery(sql, [garage_id]);
                var count = getResult1(res);
                return count != nil && count > 0;
            }

            method getStatus(garage_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT online, favorite, grim_car_id FROM t_garage WHERE garage_id = ?";
                var res = sqlite.executeQuery(sql, [garage_id]);
                if (res.size == 0)
                    return nil;

                return res[0];
            }

            method updateGrimCarId(garage_id, grim_car_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "UPDATE t_garage SET grim_car_id = ? WHERE garage_id = ?";
                sqlite.executeQuery(sql, [grim_car_id, garage_id]);
            }

            method getObtainedDate(garage_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT obtained_date FROM t_garage WHERE garage_id = ?";
                var res = sqlite.executeQuery(sql, [garage_id]);
                var result = getResult1(res);

                if (result == nil)
                    return "";

                var datetime = pdistd::MTime();
                datetime.setBySecond(result);
                return datetime;
            }

            method checkPSTrophy_forCOLLECTOR()
            {
                if (getCount() >= 1000)
                    PDINetwork.unlockTrophyAsync(gtengine::TrophyType::COLLECTOR);
            }

            method checkPSTrophy_forOBTAIN_MEMORIAL_CARS()
            {
                var year1960 = getCount("WHERE 1960 <= year AND year < 1970");
                var year1970 = getCount("WHERE 1970 <= year AND year < 1980");
                var year1980 = getCount("WHERE 1980 <= year AND year < 1990");
                var year1990 = getCount("WHERE 1990 <= year AND year < 2000");
                var year2000 = getCount("WHERE 2000 <= year AND year < 2010");

                if (year1960 && year1970 && year1980 && year1990 && year2000)
                    PDINetwork.unlockTrophyAsync(gtengine::TrophyType::OBTAIN_MEMORIAL_CARS);
            }

            method RandomPickup(limit, additional_conditions)
            {
                if (limit == nil)
                    limit = 1;

                var where = "";
                if (additional_conditions != nil && additional_conditions.size > 0)
                    where = "WHERE %s".format(additional_conditions.join(" AND "));

                var order_by = "ORDER BY RANDOM() LIMIT %{limit}";
                var list = getCarList2(where, [], order_by, true);
                return convertRowList2CppList(list);
            }

            method getCurrentSlot(garage_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT slot_id FROM t_garage WHERE garage_id = ?";
                var res = sqlite.executeQuery(sql, [garage_id]);
                var result = getResult1(res);
                return result == nil ? 0 : nil;
            }

            method changeSlot(garage_id, slot_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "UPDATE t_garage SET slot_id = ? WHERE garage_id = ?";
                sqlite.executeQuery(sql, [slot_id, garage_id]);
            }

            method updateSlotComment(garage_id, slot_id, comment)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql_list = Array();
                var params = [comment, garage_id];

                if (slot_id == 0)
                {
                    var sql = "UPDATE t_garage SET cp_commentA = ? WHERE garage_id = ?";
                    sql_list.push([sql, params]);
                }

                if (slot_id == 1)
                {
                    var sql = "UPDATE t_garage SET cp_commentB = ? WHERE garage_id = ?";
                    sql_list.push([sql, params]);
                }

                if (slot_id == 2)
                {
                    var sql = "UPDATE t_garage SET cp_commentC = ? WHERE garage_id = ?";
                    sql_list.push([sql, params]);
                }

                sqlite.executeTransaction(sql_list);
            }

            method getCommentABC(garage_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT cp_commentA, cp_commentB, cp_commentC FROM t_garage WHERE garage_id = ?";
                var res = sqlite.executeQuery(sql, [garage_id]);
                if (res.size == 0)
                    return ["", "", ""];

                var row = res[0];
                if (row.size == 0)
                    return ["", "", ""];

                return row;
            }

            method isExistRidingCar(car_code)
            {
                var car_list = getCarListByCarCode(car_code);
                if (car_list == nil)
                    return false;

                var result = false;
                foreach (var item in car_list)
                {
                    var garage_id = item[0];
                    if (garage_id == self.riding_id)
                    {
                        result = true;
                        break;
                    }
                }

                return result;
            }

            method setInvalid(car_label_list, invalid)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "UPDATE t_garage SET invalid = ? WHERE car_code = ?";
                var sql_list = [];
                var car_code_list = [];
                var invalid_value = invalid ? 1 : 0;
                foreach (var car_label in car_label_list)
                {
                    var car_code = gtengine::MSpecDB::getCarCode(car_label);
                    car_code_list.push(car_code);

                    var params = [invalid_value, car_code];
                    sql_list.push([sql, params]);
                }

                sqlite.executeTransaction(sql_list);

                if (invalid)
                {
                    foreach (var car_code in car_code_list)
                    {
                        if (isExistRidingCar(car_code))
                        {
                            if (!rideCar(-1))
                            {
                                clearRidingCar();
                                break;
                            }
                        }
                    }
                }
            }

            method setInvalidByCarCode(car_code, invalid)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "UPDATE t_garage SET invalid = ? WHERE car_code = ?";
                var invalid_value = invalid ? 1 : 0;
                var params = [invalid_value, car_code];
                var sql_list = [[sql, params]];
                sqlite.executeTransaction(sql_list);

                if (invalid)
                {
                    if (isExistRidingCar(car_code))
                    {
                        if (!rideCar(-1))
                            clearRidingCar();
                    }
                }
            }

            method getResult1(res)
            {
                if (res.size == 0)
                    return nil;

                var row = res[0];
                if (row.size == 0)
                    return nil;

                return res[0][0];
            }

            method getNextGarageId()
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT MAX (garage_id) FROM t_garage";
                var res = sqlite.executeQuery(sql);
                var max = getResult1(res);
                return max == nil ? 1 : max + 1;
            }

            method isFailed(res)
            {
                return res != SQLITE_DONE;
            }

            function createOrderBy(order, by)
            {
                if (order == nil)
                    order = "name_EN";

                if (by == nil)
                    by = "ASC";

                if (order == "name_EN")
                {
                    if (main::pdiext::MProductInformation::GetGameRegionCode() == "jp" && main::pdistd::MLocale::getLanguage() == "JP")
                        order = "name_JP";
                }

                var by2 = by;
                if (order == "power" || order == "mass" || order == "year" || order == "pp" || order == "riding_order")
                {
                    if (by == "ASC")
                        by2 = "DESC";
                    else if (by == "DESC")
                        by2 = "ASC";
                }

                return "ORDER BY %{order} %{by2}, garage_id %{by}";
            }

            function createWhereAndParams(country, tuner_label, drive_train, with_favorite)
            {
                var params = [];
                var where = "";

                if (country != nil)
                {
                    where += "country = ? ";
                    params.push(country);
                }

                if (tuner_label != nil)
                {
                    where += params.size > 0 ? "AND " : "";
                    where += "tuner_label = ? ";
                    params.push(tuner_label);
                }

                if (drive_train != nil)
                {
                    where += params.size > 0 ? "AND " : "";
                    where += "drive_train = ? ";
                    params.push(drive_train);
                }

                if (with_favorite != nil)
                {
                    where += params.size > 0 ? "AND " : "";
                    where += "favorite = 1 ";
                }

                if (where != "")
                    where = "WHERE %s".format(where);

                return [where, params];
            }
        }
    }
}