//---------------------------------------------------------------------------------------
// ArcadeRoot.ad
//
// Arcade mode Pre-race Menu: Main menu
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module PROJECT::ROOT
{
	#include "../quick-share/icon.ad";
	#include "../quick-share/quick_tune.ad";

	var quick_work = main::menu::MQuickWork();
	
	// Handles the grid list
	for (var i = 1; i <= quick_work.numberOfEntries; i++)
	{
		var widget = ROOT["Grid" + i];
		setMoveActor(widget, 640 + (392 * 2 * i), 0, 0.15); // Original transition
	}

	function onInitialize(context)
	{
#ifndef GT4O_US_BETA
		context.transition = main::menu::MColorTransition();
#endif

		var quick_work = main::menu::MQuickWork();
	
		if (quick_work.canReplay == false)
		{
			Buttons::Replay.visible = false;
			Buttons::SaveReplay.visible = false;
		}
		else
		{
			Buttons::Replay.visible = true;
			Buttons::SaveReplay.visible = true;
		}
	
		if (quick_work.IsBSpec == false)
		{
			Buttons::Spectator.visible = false;
		}
		else
		{
			Buttons::Spectator.visible = true;
		}
	
#ifdef GT4O_US_BETA
		if (main::menu::MSystem::CanSave() == false)
		{
			Buttons::SaveReplay.visible = false;
		}
#endif
	
		ROOT::PS.text = main::menu::MUnit::GetUnitOfPower();
	
		for (var i = 0; i < quick_work.numberOfEntries; i++)
		{
			ROOT["Grid" + (i + 1)]["CarName"].text = quick_work.getGridCarName(i);
			ROOT["Grid" + (i + 1)]["CarName"].abbreviate();
			ROOT["Grid" + (i + 1)]["ColorChip"].setColor(quick_work.getColorChipInfo(i));
	
			if (quick_work.getPower(i) == 0)
			{
				ROOT["Grid" + (i + 1)]["PS"].text = "--";
			}
			else
			{
				ROOT["Grid" + (i + 1)]["PS"].text = quick_work.getPower(i);
			}
	
			ROOT["Grid" + (i + 1)]["KG"].text = quick_work.getWeight(i);
	
			setTireText(context, i, quick_work.getTireType(i));
		}
	
		for (var i = 1 <= quick_work.numberOfEntries; i++)
		{
			var widget = ROOT["Grid" + i];
			widget.actor.out = true;
			widget.actor.warp();
			widget.actor.out = false;
		}
	
		for (var i = quick_work.numberOfEntries + 1; i <= 6; i++)
		{
			ROOT["Grid" + i].visible = false;
		}
	
		if (quick_work.playerGridNumber >= 0)
		{
			var gnum = quick_work.playerGridNumber + 1;
	
			ROOT["Grid" + gnum]["CarName"].color = ROOT::Hidden::MyGridColor.color;
			ROOT["Grid" + gnum]["GridNumber"].color = ROOT::Hidden::MyGridColor.color;
			ROOT["Grid" + gnum]["PS"].color = ROOT::Hidden::MyGridColor.color;
			ROOT["Grid" + gnum]["KG"].color = ROOT::Hidden::MyGridColor.color;
		}
	
		var course_label = quick_work.courseLabel;
	
		Title.text = context.translate(ROOT, "CourseName", course_label);
	
		var unit = main::game.course_record.getUnit(course_label);
	
		Score.text = context.translate(ROOT, "BestScore").format(unit.best_score);
	
		main::sound.startStreamEx("pcm", "default_quick", -1, 1, main::game.option.menu_bgm_volume);
	
		updateMyCarInfo(context);
		setIconPosition(context);
		setDefaultIconFocus(context);
	}

	function onFinalize(context)
	{
	}

	static icon_name_tbl = [
		"Start",
		"Spectator",
		"Replay",
		"SaveReplay",
		"QuickTune",
		"Option",
		"Exit"
	];

	// Handles the UI positioning of Start, Replay, exit, etc.
	function setIconPosition(context)
	{
		var max = icon_name_tbl.size;
		var num = 0;
		var icon_w = 0;
	
		for (var i = 0; i < max; i++)
		{
			if (ROOT::Buttons[icon_name_tbl[i]].visible == true)
			{
				icon_w = ROOT::Buttons[icon_name_tbl[i]].w;
				num++;
			}
		}
	
		var screen_w = 640;
		var space = 4;
		var st = (screen_w - num * icon_w - space * (num - 1)) / 2;
	
		var c = 0;
		for (var i = 0; i < max; i++)
		{
			if (ROOT::Buttons[icon_name_tbl[i]].visible == true)
			{
				ROOT::Buttons[icon_name_tbl[i]].x = st + (icon_w + space) * c;
				c++;
			}
		}
	}


	function set_next_start_project()
	{
		main::game.next_menu_project = main::game.major_menu_project;
	}

	function hydeGrid(context)
	{
		Title.visible = false;
	
		var quick_work = main::menu::MQuickWork();
	
		for (var i = 1; i <= quick_work.numberOfEntries; i++)
		{
			ROOT["Grid" + i].visible = false;
		}
	}

	function dispGrid(context)
	{
		Title.visible = true;
	
		var quick_work = main::menu::MQuickWork();
	
		for (var i = 1; i <= quick_work.numberOfEntries; i++)
		{
			ROOT["Grid" + i].visible = true;
		}
	}

	function onCancel(context, event, item)
	{
		main::sound.play("cancel");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_EXIT";
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
	
		context.finish();
	
		return EVENTRESULT_FILTER;
	}

}

module PROJECT::ROOT::Buttons::Start
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_START";
		quick_work.cursorPosition = getIconIndex(context, "Start");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
		context.finish();
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Spectator
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_SPECTATOR";
		quick_work.cursorPosition = getIconIndex(context, "Spectator");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
		context.finish();
	
		return EVENTRESULT_FILTER;
	}

}

module PROJECT::ROOT::Buttons::QuickTune
{
	function onActivate(context)
	{
		main::sound.play("ok");
	
		var quick_work = main::menu::MQuickWork();
		quick_work.cursorPosition = getIconIndex(context, "QuickTune");
	
		QuickTunePopup::open(context);
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Replay
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_REPLAY";
		quick_work.cursorPosition = getIconIndex(context, "Replay");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		context.finish();
	
		return EVENTRESULT_FILTER;
	}
}


module PROJECT::ROOT::Buttons::SaveReplay
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_SAVE_REPLAY";
		quick_work.cursorPosition = getIconIndex(context, "SaveReplay");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		context.finish();
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Option
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_OPTION";
		quick_work.cursorPosition = getIconIndex(context, "Option");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
		context.finish();
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Exit
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_EXIT";
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
		context.finish();
	
		return EVENTRESULT_FILTER;
	}
}