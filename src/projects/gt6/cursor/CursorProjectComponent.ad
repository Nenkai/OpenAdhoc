module CursorProjectComponent::GTModeMenus::StartMenu
{
    static sInsensitiveMenus;

    method checkKeyPress(context, event)
    {
        if (event.keysym == CELL_PAD_CTRL_START)
        {
            LeaveDetectUtil::suspend(context);

            sound.play("ok");
            openAnimation();
            DialogUtil::setMyMenuCarSelectCB(context, reflectCurrentStatus);
            DialogUtil::setInsensitiveMenus(sInsensitiveMenus);
            DialogUtil::openMyMenuDialog(context);
            closeAnimation();

            LeaveDetectUtil::resume(context);
            return true;
        }

        return false;
    }

    method setInsensitiveMenus(insensitive_menus)
    {
        sInsensitiveMenus = insensitive_menus;
    }

    method reflectCurrentStatus(context)
    {
        var status = self.StatusClip::MoveBox::Status;
        var credits = GAME_STATUS.user_profile.cash;

        status.Credits.label.text = pdiext::MMisc::GetMoneyString(credits);

        var car_name = "--";
        var cp = GAME_STATUS.user_profile.garage.getRidingCar();
        if (cp != nil)
        {
            var car_code = cp.getCarCode();
            if (car_code != gtengine::MSpecDB::NO_CODE)
                car_name = gtengine::MSpecDB::getCarShortName(car_code);
        }

        status.RidingCar.label.text = car_name;
        reflectCurrentLoginBonus(context);
    }

    static LoginBonusMap = [
        110 : 1,
        130 : 2,
        150 : 3,
        170 : 4,
        200 : 5,
    ];

    method reflectCurrentLoginBonus(context)
    {
        var status = self.StatusClip::MoveBox::Status;

        var day = nil;
        var bonus = GAME_STATUS.user_profile.context.getBonusRatio();

        if (bonus != nil)
        {
            var bonus100 = (bonus * 100.0 + 0.5).toInt();
            var day = LoginBonusMap[bonus100];
        }

        if (day != nil)
        {
            status.Credits::Bonus::label.text = day;
            status.Credits::Bonus.visible = true;
        }
        else
            status.Credits::Bonus.visible = false;
    }

    method onInitialize(context)
    {
        sInsensitiveMenus = [];

        reflectCurrentStatus(context);

        var movebox = self.StatusClip::MoveBox;
        var movex = movebox.MoveX;
        movex.setStartValue(0, self.StatusClip.w);
        movex.setEndValue(0, self.StatusClip.w - movebox.w);
        movex.forward();
        movex.reset();

        if (self.display_status_always)
            movex.warp();

        closeAnimation(true);
        appear(true);
    }

    method onFinalize(context)
    {
        var status = self.StatusClip::MoveBox::Status;
        status.Credits::Bonus::label.text = "";
        status.Credits.label.text = "";
        status.RidingCar.label.text = "";
        sInsensitiveMenus = nil;
        DialogUtil::setInsensitiveMenus(nil);
    }

    method displayStatus(display, warp)
    {
        self.display_status_always = display;
        var movex = self.StatusClip::MoveBox::MoveX;

        if (display)
            movex.forward();
        else
            movex.backward();

        movex.start();
        if (warp == true)
            movex.warp();
    }

    method openAnimation(warp)
    {
        var fade = self.bg::Fade;
        fade.forward();
        fade.start();

        var stretch = self.Tab::StretchW;
        stretch.forward();
        stretch.start();

        var movex = self.StatusClip::MoveBox::MoveX;
        if (!self.display_status_always)
        {
            movex.forward();
            movex.start();
        }

        if (warp == true)
        {
            stretch.warp();
            fade.warp();
            movex.warp();
        }
    }

    method closeAnimation(warp)
    {
        var stretch = self.Tab::StretchW;
        stretch.backward();
        stretch.start();

        var fade = self.bg::Fade;
        fade.backward();
        fade.start();


        var movex = self.StatusClip::MoveBox::MoveX;
        if (!self.display_status_always)
        {
            movex.backward();
            movex.start();
        }

        if (warp == true)
        {
            stretch.warp();
            fade.warp();
            movex.warp();
        }
    }

    method appear(warp, start_delay)
    {
        var fade = self.Fade;
        fade.forward();

        fade.start_delay = start_delay != nil ? start_delay : 0.0;
        fade.start();

        if (warp == true)
            fade.warp();
    }

    method hide(warp, start_delay)
    {
        var fade = self.Fade;
        fade.backward();

        fade.end_delay = start_delay != nil ? start_delay : 0.0;
        fade.start();

        if (warp == true)
            fade.warp();
    }
}