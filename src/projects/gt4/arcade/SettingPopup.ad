module PROJECT::ROOT
{
    function setMoveActor(widget)
    {
        var actor = main::menu::MMoveActor(widget, widget.x, PS2_SCREEN_H_F);
        widget.actor = actor;
        widget.actor.ratio = 0.2;
    }

    function setFadeActorRoot()
    {
        var actor = main::menu::MFadeActor(ROOT, 1.0);
        actor.repeat = false;
        actor.period = 0.5;
        ROOT.actor = actor;
    }

    setMoveActor(Pane);
    setFadeActorRoot();
    static garage_car = nil;

    function openInGarage(context, gcar)
    {
        ROOT.setFocus(nil);
        Pane.actor.destinationY = PS2_SCREEN_H_F;
        Pane.actor.out = true;
        Pane.actor.warp();
        ROOT.actor.out = true;
        ROOT.actor.warp();
        garage_car = gcar;
        context.pushPage(ROOT);
        Pane.actor.out = false;
        ROOT.actor.out = false;
        ROOT.setFocus(Pane::Button::OK);
        CarRoot::CarFace.quality_level = 0;
    }

    function open(context)
    {
        ROOT.setFocus(nil);
        Pane.actor.destinationY = PS2_SCREEN_H_F;
        Pane.actor.out = true;
        Pane.actor.warp();
        ROOT.actor.out = true;
        ROOT.actor.warp();
        garage_car = nil;
        context.pushPage(ROOT);
        Pane.actor.out = false;
        ROOT.actor.out = false;
        ROOT.setFocus(Pane::Button::OK);
        CarRoot::CarFace.quality_level = 0;
    }

    function close(context)
    {
        CarRoot::CarFace.quality_level = 1;
        ROOT.setFocus(nil);
        Pane.actor.destinationY = PS2_SCREEN_H_F;
        Pane.actor.out = true;
        ROOT.actor.out = true;
        context.sync(0.25);
        context.closePage(ROOT);
        CarRoot::ColScroll.actor.out = false;

        if (main.defined("DEMO_ARCADE_SKIP_COLOR_SELECT"))
            CarRoot.setFocus(CarRoot::CarScroll::SelectBox);
    }

    function setupSlider(slider)
    {
        slider["label"].text = slider.index;
        var popup = slider["popup"];
        popup["pinch"]["value"].text = slider.index;
        popup["min"].adjustScale();
        popup["max"].adjustScale();
    }

    static mission_options = [];
    mission_options.push("AUTOMATIC");
    mission_options.push("MANUAL");

    static assist_options = [
        "None",
        "TCSOnly",
        "TCSAndASM"
    ];

    static tire_normal_options = [];
    tire_normal_options.push("tire_type_0");
    tire_normal_options.push("tire_type_1");
    tire_normal_options.push("tire_type_2");
    tire_normal_options.push("tire_type_3");
    tire_normal_options.push("tire_type_4");
    tire_normal_options.push("tire_type_5");

    static tire_racing_options = [];
    tire_racing_options.push("tire_type_6");
    tire_racing_options.push("tire_type_7");
    tire_racing_options.push("tire_type_8");
    tire_racing_options.push("tire_type_9");
    tire_racing_options.push("tire_type_10");

    static tire_dirt_options = [];
    tire_dirt_options.push("tire_type_11");

    static tire_snow_options = [];
    tire_snow_options.push("tire_type_12");

    static open_options = [];
    open_options.push("close");
    open_options.push("open");

    function initialize_optionmenu_onload(context, optionmenu, options)
    {
        var vbox = optionmenu["popup"]["vbox"];
        var num = options.size;

        for (var i = 0; i < num; i++)
        {
            var item = hidden::Item.doCopy();
            item["label"].text = context.translate(ROOT, options[i]);
            item.name = options[i];
            vbox.appendChild(item);
        }

        optionmenu.applyAppend(context);
    }

    function initialize_optionmenu(context, optionmenu, options)
    {
        var vbox = optionmenu["popup"]["vbox"];
        var num = options.size;

        for (var i = 0; i < num; i++)
        {
            var item = hidden::Item.doCopy();
            item["label"].text = context.translate(ROOT, options[i]);
            item["label"].adjustScale();
            item.name = options[i];
            vbox.appendChild(context, item);
        }

        optionmenu.applyAppend(context);
    }

    function onLoadInitialize(context)
    {
        initialize_optionmenu_onload(context, Pane::Mission::OptionMenu, mission_options);
        initialize_optionmenu_onload(context, Pane::Assist::OptionMenu, assist_options);
        initialize_optionmenu_onload(context, Pane::Open::OptionMenu, open_options);
    }

    function setFadeActor(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        widget.actor = actor;
        widget.actor.period = 1.0;
        widget.actor.out = true;
        widget.actor.warp();
    }

    Veil.visible = false;
    setFadeActor(Veil::bg);
    setFadeActor(Veil::Course);
    setFadeActor(Veil::Car);

    function get_tire_index()
    {
        var tire_idx = 0;

        if (CourseRoot::isDirt())
            tire_idx = 11;
        else
        {
            var offset = 0;
            if (!main::menu::MCarData::IsTireNormal(CarRoot::current_car))
                offset = 6;

            tire_idx = Pane::Tire::OptionMenu.index + offset;
        }

        return tire_idx;
    }

    static diff = ["EASY", "NORMAL", "HARD"];

    function apply_setting()
    {
        main::game.manual = Pane::Mission::OptionMenu.index == 1;

        if (garage_car == nil)
        {
            main::game.assist_asm = Pane::Assist::OptionMenu.index == 2;
            main::game.assist_tcs = Pane::Assist::OptionMenu.index > 0;
            main::game.tire_idx = get_tire_index();
        }

        main::game.car_garage = garage_car;

        if (Pane::Difficulty::slider.range == [-1, 1])
            main::game.difficulty = diff[Pane::Difficulty::slider.index + 1];
        else
            main::game.enemy_level = Pane::Difficulty::slider.index;

        var option = main::game.option;
        option.automatic_gear = 1 - Pane::Mission::OptionMenu.index;
        
        if (!CourseRoot::isDirt())
        {
            option.assist_asm = Pane::Assist::OptionMenu.index == 2;
            option.assist_tcs = Pane::Assist::OptionMenu.index > 0;
        }
    }

    function apply_setting2p()
    {
        main::game.manual_2p = Pane::Mission::OptionMenu.index == 1;

        if (garage_car == nil)
        {
            main::game.assist_asm_2p = Pane::Assist::OptionMenu.index == 2;
            main::game.assist_tcs_2p = Pane::Assist::OptionMenu.index > 0;
            main::game.tire_idx_2p = get_tire_index();
        }

        main::game.car_garage_2p = garage_car;
    }

    function notify_setting()
    {
        apply_setting();

        if (main::game.option.LAN_host)
            main::network.raceMasterNotifyRaceSetting(main::game.getBattleSettingRace());

        main::network.raceMenuNotifyEntrySetting(main::game.getBattleSettingEntry());
    }

    module CourseTypeIndex
    {
        static dry = 0;
        static wet = 1;
        static dirt = 2;
        static snow = 3;
    }

    function onInitialize(context)
    {
        hidden.visible = false;
        Pane.minimum_height = false;
        var cg = garage_car;

        if (cg == nil)
            cg = CarRoot::CarFace.car_data;

        var mission_selectable = !cg.isAutomaticOnly();

        if (mission_selectable)
        {
            Pane::Mission::OptionMenu.setIndex(context, 1 - main::game.option.automatic_gear);
            Pane::Mission::OptionMenu.insensitive = false;
        }
        else
        {
            Pane::Mission::OptionMenu.insensitive = true; // 18585
        }

        if (garage_car != nil || main::menu::MSystem::GetVersionBranch() == "nissan" || main::menu::MSystem::GetVersionBranch() == "vdim")
            Pane::Assist.visible = false;
        else
        {
            var index = 0;
            if (!CourseRoot::isDirt())
            {
                if (main::game.option.assist_tcs)
                {
                    index = 1;
                    if (main::game.option.assist_asm)
                        index = 2;
                }
                Pane::Assist::OptionMenu.insensitive = false;
            }
            else
                Pane::Assist::OptionMenu.insensitive = true;

            Pane::Assist::OptionMenu.setIndex(context, index);
        }

        Pane::Tire.visible = main::menu::MSystem::GetVersionBranch() != "vdim";

        if (CourseRoot::isDirt())
        {
            if (main::menu::MCourseData::GetType(CourseRoot::current_crs) == "dirt")
                initialize_optionmenu(context, Pane::Tire::OptionMenu, tire_dirt_options);
            else
                initialize_optionmenu(context, Pane::Tire::OptionMenu, tire_snow_options);

            Pane::Tire::OptionMenu.insensitive = true;
            Pane::Tire::OptionMenu.setIndex(context, 0);
        }
        else
        {
            Pane::Tire::OptionMenu.insensitive = false;
            
            var car = garage_car == nil ? CarRoot::current_car : garage_car.car_code;

            if (main::menu::MCarData::IsTireNormal(car))
            {
                initialize_optionmenu(context, Pane::Tire::OptionMenu, tire_normal_options);
                if (main::menu::MSystem::GetVersionBranch() == "vdim")
                    Pane::Tire::OptionMenu.setIndex(context, 1);
                else
                    Pane::Tire::OptionMenu.setIndex(context, 4);
            }
            else
            {
                initialize_optionmenu(context, Pane::Tire::OptionMenu, tire_racing_options);
                Pane::Tire::OptionMenu.setIndex(context, 1);
            }
        }

        if (GameRoot::current_game == "SingleRace" && !main::game.option.limit_enemies_to_favorite_car_only && main::game.option.special_arcade_tuner == "")
        {
            var crs = CourseRoot::getCurrentCourse();
            var ctype = main::menu::MCourseData::GetType(crs);
            var race_code = main::menu::MCarData::GetRaceCode(CarRoot::getCurrentCar(), CourseTypeIndex[ctype], main::game.difficulty);

            if (race_code != nil)
            {
                Pane::Difficulty::slider.range = [-1, 1];
                
                for (var i = 0; diff.size; i++)
                {
                    if (main::game.difficulty == diff[i])
                    {
                        Pane::Difficulty::slider.index = i - 1;
                        break;
                    }
                }
            }
            else
            {
                Pane::Difficulty::slider.range = [-10, 10];
                Pane::Difficulty::slider.index = main::game.enemy_level;
            }
            setupSlider(Pane::Difficulty::slider);
        }
        else
        {
            Pane::Difficulty.visible = false;
        }

        if (GameRoot::current_game == "SingleRace")
        {
            var crs = CourseRoot::getCurrentCourse();
            var max_entry = main::menu::MCourseData::GetMaxCarNum(crs);

            if (main::menu::MCarData::GetOpenModelType(CarRoot::current_car) == 1 && max_entry > 2)
            {
                Pane::Open.visible = true;
                Pane::Open::OptionMenu.setIndex(context, 0);
            }
            else
                Pane::Open.visible = false;
        }
        else
            Pane::Open.visible = false;

        if (mission_selectable)
            ROOT.setFocus(Pane::Mission::OptionMenu);
        else
            ROOT.setFocus(Pane::Assist::OptionMenu);
    }
        

    function onFinalize(context)
    {
        Pane::Tire::OptionMenu::popup::vbox.clearWindow(context);
        garage_car = nil;
    }

    function onCancel(context, event, item)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event) { return EVENTRESULT_CONTINUE; }


}

module PROJECT::ROOT::Pane::Mission::OptionMenu
{
    function onValueChanged(context, index) { }
}

module PROJECT::ROOT::Pane::Assist::OptionMenu
{
    function onValueChanged(context, index) { }
}

module PROJECT::ROOT::Pane::Tire::OptionMenu
{
    function onValueChanged(context, index) { }
}

module PROJECT::ROOT::Pane::Difficulty::slider
{
    function onValueChanged(context) 
    { 
        setupSlider(slider);
    }
}

module PROJECT::ROOT::Pane::Button::OK
{
    function onActivate(context, event, item)
    {
        if (GameRoot::current_game == "LANBattle")
        {
            main::sound.play("ok");
            notify_setting();
            start_page(context, PregridRoot);
        }
        else if (GameRoot::current_game == "SplitBattle")
        {
            main::sound.play("next");

            if (SplitRoot::now1p)
            {
                main::game.car_code = CarRoot::getCurrentCar();
                main::game.car_color = CarRoot::getCurrentColor();
                apply_setting();
            }
            else
            {
                main::game.car_code_2p = CarRoot::getCurrentCar();
                main::game.car_color_2p = CarRoot::getCurrentColor();
                apply_setting2p();
            }

            CarRoot::unset_col_select(context);
            start_page(context, SplitRoot);
        }
        else
        {
            main::sound.fadeOutMusic(1.0);
            main::sound.play("next");
            apply_setting();
            main::menu::MSystem::SetLoadingMode("capture");

            context.cursor_visible = false;
            Veil::Course.text = context.translate(ROOT, "CourseName", CourseRoot::getCurrentCourse());
            Veil::Car.text = CarRoot::CarFace.car_data.name;
            Veil::Car.adjustScale();
            Veil.visible = true;
            Veil::bg.actor.out = false;
            Veil::Course.actor.out = false;
            Veil::Car.actor.out = false;

            context.sync(1.0);
            CarRoot::CarFace.visible = false;
            GameRoot::doGame(context);
        }

        return EVENTRESULT_FILTER;
    }
}