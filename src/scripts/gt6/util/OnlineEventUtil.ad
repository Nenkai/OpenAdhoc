













module OnlineEventUtil
{
    module EVENT_TYPE
    {
        static A_SPEC = 0;
        static B_SPEC = 1;
        static REMOTE = 2;
        static TIME_TRIAL = 3;
        static DRIFT_TRIAL = 4;
        static SPECIAL = 5;
        static QUICK_MATCH = 6;
    }

    function parse(data)
    {
        var xml = pdistd::MXml();
        xml.parse(data);
        var dom = xml.result;

        var event_list_nodes = dom["event_list"];
        if (event_list_nodes == nil)
            return nil;

        var event_list_node = event_list_nodes[0];
        var event_nodes = event_list_node["event"];
        if (event_nodes == nil)
            return nil;

        var event_list = [];
        for (var i = 0; i < event_nodes.size; ++i)
        {
            var event = Map();
            var event_node = event_nodes[i];
            
            var title = parseLanguages(event_node["title"]);
            event["title"] = title;

            var description = parseLanguages(event_node["description"]);
            event["description"] = description;

            var one_line_title = parseLanguages(event_node["one_line_title"]);
            event["one_line_title"] = one_line_title;

            var ranking_list_nodes = event_node["ranking_list"];
            if (ranking_list_nodes == nil)
                continue;

            var ranking_list = [];

            var ranking_list_node = ranking_list_nodes[0];
            var ranking_nodes = ranking_list_node["ranking"];
            if (ranking_nodes != nil)
            {
                for (var j = 0; j < ranking_nodes.size; ++j)
                {
                    var ranking = Map();
                    
                    var ranking_node = ranking_nodes[j];

                    var board_id = parseValue(ranking_node["board_id"]);
                    ranking["board_id"] = board_id;

                    title = parseLanguages(ranking_node["title"]);
                    ranking["title"] = title;

                    ranking_list.push(ranking);
                }
            }   

            event["ranking_list"] = ranking_list;
            event["id"] = parseValue(event_node["id"]);
            event["voucher"] = parseValue(event_node["voucher"]);
            event["registration"] = parseValue(event_node["registration"]);
            event["bg_image"] = parseValue(event_node["bg_image"]);
            event["icon_image"] = parseValue(event_node["icon_image"]);
            event["begin_date"] = parseDateTime(event_node["begin_date"]);
            event["end_date"] = parseDateTime(event_node["end_date"]);
            event["new_date"] = parseDateTime(event_node["new_date"]);
            event["event_type"] = parseValue(event_node["event_type"]);
            event["gameitem_type"] = parseValue(event_node["gameitem_type"]);
            event["gameitem_category"] = parseValue(event_node["gameitem_category"]);
            event["gameitem_id"] = parseValue(event_node["gameitem_id"]);
            event["gameitem_value"] = parseValue(event_node["gameitem_value"]);
            event["dlc_flag"] = parseValue(event_node["dlc_flag"]);
            
            var event_id_list_csv = parseValue(event_node["event_id_list"]);
            event["event_id_list"] = event_id_list_csv.split(",");

            event_list.push(event);
        }

        return event_list;
    }

    function localize(data)
    {
        if (data == nil)
            return "NO ENTRY";

        var language = pdistd::MLocale::getLanguage();
        var result = data[language];
        if (result != nil && result != "")
            return unescape(result);

        return "NO TEXT";
    }

    function isRemoteRaceEvent(event)
    {
        return event["event_type"].toInt() == 2;
    }

    function getEstimateMinute(race_info_minute)
    {
        var base = 0;
        var minute = 0;
        
        if (race_info_minute > 0 && race_info_minute <= 60)
            base = 5;
        else if (race_info_minute > 60 && race_info_minute <= 90)
            base = 10;

        if (base == 0)
            return 0
        else
            return (((race_info_minute + base) - 1) / base) * base;
    }

    function getCreditText(online, credit)
    {
        if (online)
        {
            if (credit == 0)
                return "Cr. 0";
            else
                return "Cr. " + pdiext::MMisc::GetMoneyString(credit);
        }
        else
            return "Cr. --";
    }

    function unescape(s)
    {
        s.replaceAll("&amp;", "&");
        s.replaceAll("&lt;", "<");
        s.replaceAll("&gt;", ">");
        s.replaceAll("&quot;", "\"");
        s.replaceAll("&#39;", "'");
        return s;
    }

    function parseValue(node)
    {
        if (node == nil)
            return "";

        return node[0].value;
    }

    function parseLanguages(nodes)
    {
        var languages = ["JP", "US", "GB", "FR", "DE", "IT", "ES", "PT", "NL", "RU", "PL", "TR", "EL", "TW", "KR", "CZ", "HU", "BP", "MS"];
        var result = Map();

        if (nodes == nil)
        {
            foreach (var l in languages)
                result[l] = "";
        }
        else
        {
            var node = nodes[0];
            foreach (var l in languages)
            {
                result[l] = parseValue(node[l]);
            }
        }

        return result;
    }

    function parseDateTime(node)
    {
        var s = parseValue(node);
        var result = nil;

        |var date, var time| = s.split(" ");
        if (date != nil && time != nil)
        {
            |var year, var month, var day| = date.split("/");
            |var hour, var minute, var second| = time.split(":");

            if (year != nil && month != nil && day != nil && 
                hour != nil && minute != nil && second != nil)
            {
                var t = pdistd::MTime();
                
                t.year = year.toInt();
                t.month = month.toInt();
                t.day = day.toInt();
                t.hour = hour.toInt();
                t.minute = minute.toInt();
                t.second = second.toInt();
                result = t;
            }
        }

        return result;
    }

}