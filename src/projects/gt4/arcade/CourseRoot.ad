module PROJECT::ROOT
{
    static current_crslist = nil;
    static current_crs = nil;
    static current_crs_index = 0;
    static current_reverse = nil;
    static watcher = nil;

    function setFadeActor(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        widget.actor = actor;
        widget.actor.period = 1.0;
        widget.actor.out = false;
        widget.actor.warp();
    }

    function setFadeActor2(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        widget.actor = actor;
        widget.actor.period = 1.0;
        widget.actor.out = true;
        widget.actor.warp();
        widget.actor.out = false;
    }

    function setFadeActor3(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        widget.actor = actor;
        widget.actor.period = 0.5;
        widget.actor.repeat = true;
    }

    function setMoveActor(widget, x, y)
    {
        var actor = main::menu::MMoveActor(widget, widget.x + x, widget.y + y);
        widget.actor = actor;
        widget.actor.ratio = 0.2;
        widget.actor.out = true;
        widget.actor.warp();
    }

    function setMoveArrowActor(widget, y)
    {
        var actor = main::menu::MMoveActor(widget, widget.x, widget.y + y);
        widget.actor = actor;
        widget.actor.ratio = 0.2;
        widget.actor.out = false;
        widget.actor.warp();
    }

    setFadeActor(Name);
    setFadeActor(Caption);
    setFadeActor2(Course::Logo);
    setFadeActor2(Photo::Logo);
    setMoveActor(Map, 160.0, 0.0);
    setFadeActor3(CrsScroll::dec_arrow::bga);
    setFadeActor3(CrsScroll::inc_arrow::bga);
    setMoveActor(CrsScroll, 0.0, 250.0);
    setMoveActor(DirScroll, 0.0, 250.0);

    function buildFavoriteCourse()
    {
        var list = main::game.favorite_course.buildLabelList();
        var crs_list = [];

        for (var i = 0; i < list.size; i++)
        {
            crs_list.push(CourseData[list[i]]);
        }

        return crs_list;
    }

    function get_crslist(category, single_race, split_battle, member_num)
    {
        if (member_num == nil)
            member_num = 1;

        if (single_race)
            member_num = 2;

        var crslist = nil;

        if (category != "favorite")
            crslist = CourseData[category + "_crslist"];
        else
            crslist = buildFavoriteCourse();

        var all_num = 0;
        var new_list = [];
        var num = crslist.size;

        for (var i = 0; i < num; i++)
        {
            var crs = crslist[i];

            if (single_race && !crs.can_arcade) 
                continue;
            if (split_battle && !crs.can_splitbattle) 
                continue;
            
            var car_num = main::menu::MCourseData::GetMaxCarNum(crs.code);

            if (car_num < member_num) 
                continue;

            all_num++;

            if (!main::game.isCourseAvailable(crs.code))
                continue;

            new_list.push(crs);
        }

        return [new_list, all_num];
    }

    function getCourseNum(category, single_race, split_battle)
    {
        var [crslist, allnum] = get_crslist(category, single_race, split_battle, 1);

        return [crslist.size, allnum];
    }

    function setCourseList()
    {
        var category = nil;

        if (GameRoot::current_game == "PhotoMode")
            category = "photo";
        else if (GameRoot::current_game == "LANBattle" || main::game.option.limit_favorite_course_only)
            category = "favorite";
        else
            category = CategoryRoot::current_category;

        switch (GameRoot::current_game)
        {
            case "SingleRace":
                current_crslist = get_crslist(category, true, false, 1)[0];
                break;
            case "PhotoMode":
                current_crslist = get_crslist(category, false, false, 1)[0];
                break;
            case "LANBattle":
                current_crslist = get_crslist(category, false, false, main::network.getStyleNumLAN("play"))[0];
                break;
            case "TimeTrial":
                current_crslist = get_crslist(category, false, false, 1)[0];
                break;
            case "SplitBattle":
                current_crslist = get_crslist(category, false, true, 2)[0];
                break;
        }

        if (current_crslist.size == 0)
            current_crslist = CourseData::lan_crslist;

        return category;
    }

    function onInitialize(context)
    {
        GameRoot::initialize_race_setting();

        hidden.visible = false;
        context.cursor_visible = true;

        var category = setCourseList();

        if (main::menu::MSystem::GetVersionBranch() == "vdim")
        {
            Mpeg.visible = false;
            Course::hidemovie0.visible = false;
            Course::hidemovie1.visible = false;
            Course::hidemovie2.visible = false;
            Course::hidemovie3.visible = false;
        }
        else 
            BG.visible = false;

        ToolTip::tip.remove();

        if (GameRoot::current_game == "PhotoMode")
        {
            Mpeg.visible = false;
            Mpeg.interlace = false;
            Course.visible = false;
            Photo.visible = true;
            ToolTip::tip.key = "photomode_description";
        }
        else 
        {
            Mpeg.visible = true;
            Mpeg.interlace = true;
            Course.visible = true;
            Photo.visible = false;
            ToolTip::tip.value = "";

            Course::Header::real.visible = false;
            Course::Header::city.visible = false;
            Course::Header::dirt.visible = false;
            Course::Header::road.visible = false;
            Course::Header::favorite.visible = false;

            if (Course::Header.defined(category))
                Course::Header[category].visible = true;
        }

        var num = current_crslist.size;
        var initial_index = 0;

        for (var i = 0; i < num; i++)
        {
            var crs = current_crslist[i].code;
            var item = hidden::Item.doCopy();

            var path = "image/piece/crs_mini/" + crs + ".png";
            item["bg"].image_path = path;
            var crsname = context.translate(ROOT, "CourseNameShort", crs);
            item["label"].text = crsname;
            item.defineStatic("course", crs);

            CrsScroll::SelectBox.appendChild(context, item);
        }

        CrsScroll::SelectBox.index = current_crs_index;

        if (GameRoot::current_game == "LANBattle")
        {
            network.netSync();
            main::network.raceMenuNotifySequence(3);
            watcher = main::menu::MScriptWatcher(context, onTick);
            watcher.interval = 10;
            watcher.append();
        }

        DirScroll::SelectBox.index = 0;
        CrsScroll.actor.out = true;
        CrsScroll.actor.warp();
        CrsScroll.actor.out = false;
        DirScroll.actor.out = true;
        DirScroll.actor.warp();
        CrsScroll::SelectBox.callFocus(ROOT);
        DirScroll::SelectBox.outFocus(ROOT);
        
        set_crs(context);

        if (GameRoot::current_game == "SplitBattle")
            context.event_mask |= 2;
        else
            context.event_mask &= ~2;

        Course::Header::Result.visible = GameRoot::current_game == "SingleRace";
        
    }
    
    function onFinalize(context)
    {
        ROOT.setFocus(nil);
        CrsScroll::SelectBox.clearChildren(context);

        if (watcher != nil)
        {
            watcher.remove();
            watcher = nil;
        }

        current_crslist = nil;
    }

    function onTick(context)
    {
        import main::network;

        var member_num = network.raceMenuGamePlayers();
        var my_index = network.raceMenuMyIndex();

        for (var i = 0; i < member_num; i++)
        {
            if (i == my_index)
                continue;

            var style = network.raceMenuPeekStyle(i);

            if (style != "play")
                continue;

            var sequence = network.raceMenuPeekSequence(i);
            var cond = 0;

            if (network.amIhost())
                cond = sequence == 4;
            else
                cond = sequence >= 5;

            if (cond)
            {
                main::sound.play("ok");
                current_crs = network.raceMenuPeekCourse(i);
                main::network.raceMenuNotifyCourse(current_crs);
                goNext(context);
                break;
            }
        }

        MatchingRoot::checkDisconnection(context);
    }

    function set_info(context, crs)
    {
        if (GameRoot::current_game != "SingleRace")
            return;

        var unit = main::game.course_record.getUnit(crs);
        Course::Header::Result::Score.text = "%03d".format(unit.best_score);
    }

    function set_crs(context)
    {
        var photo_mode = GameRoot::current_game == "PhotoMode";
        var logo = nil;

        if (photo_mode)
            logo = Photo::Logo;
        else
            logo = Course::Logo;

        var index = CrsScroll::SelectBox.index;
        current_crs_index = index;
        current_crs = current_crslist[index].code;

        var name = current_crs;

        if (Mpeg.visible)
            Mpeg.movie_name = name;
        
        if (BG.visible)
        {
            BG.image_path = "image/arcade/crs/" + name + ".png";
            BG.doInitialize(context);
        }

        logo.actor.out = true;
        logo.actor.warp();
        logo.image_path = "image/piece/crs_logo/" + name + ".png";
        logo.doInitialize(context);

        var logo_cx = logo.x + (logo.w / 2.0);
        var logo_cy = logo.y + (logo.h / 2.0);
        logo.adjustSize();
        logo.x = logo_cx - (logo.w / 2.0);
        logo.y = logo_cy - (logo.h / 2.0);

        if (!photo_mode)
        {
            Map.visible = true;
            Map.actor.out = true;
            Map.actor.warp();
            Map.image_path = "image/piece/crs_map/" + name + ".png";
            Map.doInitialize(context);

            import main::menu::MUnit;

            if (main::menu::MSystem::GetVersionBranch() != "vdim")
            {
                var text = context.translate(ROOT, "course_spec");
                ToolTip::tip.value = text.format(MUnit::GetCourseLengthString(current_crslist[index].length), MUnit::GetCourseHeightString(current_crslist[index].height));
            }
            else
                ToolTip::tip.value = context.translate(ROOT, "doc_" + current_crslist[index].code);
        }
        else
            Map.visible = false;

        Name.text = context.translate(ROOT, "CourseNameTitle", name);
        Name.adjustScale();
        Name.actor.over = 2.0;
        Name.actor.out = false;
        Name.actor.warp();
        Name.actor.out = true;

        if (main::menu::MSystem::GetRegionCode() == "jp" || main::menu::MSystem::GetRegionCode() == "tw" || main::menu::MSystem::GetRegionCode() == "kr")
        {
            Caption.text = context.translate(ROOT, "CourseNameCaption", name);
            Caption.adjustScale();
            Caption.actor.over = 2.0;
            Caption.actor.out = false;
            Caption.actor.warp();
            Caption.actor.out = true;
        }
        else
            Caption.visible = false;

        logo.actor.out = false;

        if (!photo_mode)
            Map.actor.out = false;
    }

    function getCurrentCourse()
    {
        return current_crs;
    }
	
    // BUG: Redeclaration triggering the homebrew compiler.
    // Technically we should allow it, but honestly it's just a mistake from their side.
    // Added 'STUB_' prefix.
	function STUB_onKeyPress(context, event)
	{
		return EVENTRESULT_CONTINUE;
    }

    function onCancel(context, event, item)
    {
        if (GameRoot::current_game == "LANBattle")
            main::sound.play("disable");
        else if (GameRoot::current_game == "PhotoMode")
        {
            main::sound.play("cancel");
            context.transition.panOutIn(context);
            main::game.major_menu_page = "";
            main::game.menuPop();
            context.startPage(TopRoot, GameRoot);
        }
        else 
        {
            main::sound.play("cancel");
            current_crs_index = 0;
            current_crs = nil;

            if (main::game.option.limit_favorite_course_only)
            {
                context.transition.panOutIn(context);
                main::game.major_menu_page = "";
                main::game.menuPop();
                context.startPage(TopRoot, GameRoot);
            }
            else
                start_page(context, CategoryRoot);
        }

        return EVENTRESULT_FILTER;
    }

    function goNext(context)
    {
        if (GameRoot::current_game == "LANBattle")
        {
            if (main::network.amIhost())
            {
                main::network.raceMenuNotifyCourse(current_crs);
                main::network.raceMenuNotifySequence(5);
            }
        }

        if (GameRoot::current_game == "SplitBattle")
            start_page(context, SplitRoot);
        else if (GameRoot::isSkipMethod())
        {
            MethodRoot::current_method = "ByFavorite";
            start_page(context, CarRoot);
        }
        else if (main::game.option.special_arcade_tuner != "")
        {
            MethodRoot::current_method = "ByMaker";
            MakerRoot::selected_name = main::game.option.special_arcade_tuner;
            start_page(context, CarRoot);
        }
        else 
            start_page(context, MakerRoot);
    }

    function isDirt()
    {
        var ctype = main::menu::MCourseData::GetType(current_crs);
        return ctype == "dirt" || ctype == "snow";
    }

    function fixCourse(context)
    {
        if (GameRoot::current_game == "LANBattle")
        {
            if (main::network.amIhost())
                goNext(context);
            else 
            {
                main::network.raceMenuNotifyCourse(current_crs);
                main::network.raceMenuNotifySequence(4);
            }
        }
        else
            goNext(context);
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PS2_PAD_CTRL_L3_UP:
            case PS2_PAD_CTRL_L3_DOWN:
            case 0xFF09: // Unknown button
            case 0xFE20:
                return EVENTRESULT_FILTER;
                break;
        }
        return false;
    }
}

module PROJECT::ROOT::CrsScroll::SelectBox
{
    function onValueChanged(context, index)
    {
        set_crs(context);
        return EVENTRESULT_FILTER;
    }

    function onActivate(context, event, item)
    {
        main::sound.play("ok");

        CrsScroll.actor.out = true;

        if (current_crslist[SelectBox.index].has_reverse)
        {
            DirScroll.actor.out = false;
            CrsScroll::SelectBox.outFocus(ROOT);
            DirScroll::SelectBox.callFocus(ROOT);
        }
        else 
            fixCourse(context);

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::DirScroll::SelectBox
{
    function onValueChanged(context, index) { }

    function onCancel(context)
    {
        main::sound.play("cancel");
        DirScroll.actor.out = true;
        CrsScroll.actor.out = false;
        SelectBox.outFocus(ROOT);
        CrsScroll::SelectBox.callFocus(ROOT);

        return EVENTRESULT_FILTER;
    }

    function onActivate(context, event, item)
    {
        main::sound.play("ok");
        DirScroll.actor.out = true;

        if (SelectBox.index == 1)
            current_crs = "r_" + current_crs;

        fixCourse(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::DirScroll::SelectBox::Normal
{
    function onFocusEnter(context)
    {
        set_info(context, current_crs);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::DirScroll::SelectBox::Reverse
{
    function onFocusEnter(context)
    {
        set_info(context, "r_" + current_crs);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::hidden::Item
{
    function onFocusEnter(context)
    {
        var widget = ROOT.getFocusedWidget();

        if (widget == nil)
            return false;

        var crs = widget["course"];
        
        set_info(context, crs);
        return EVENTRESULT_FILTER;
    }
}