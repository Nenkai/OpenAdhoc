













module ROOT
{
    module MODE
    {
        static ARCADE = 0x01;
        static PASS_CAR_LIST = 0x80;
        static SKIP_COLOR_SELECT = 0x02;
    }

    attribute modal_page;
    attribute closed;
    attribute disable_cnt = 0;
    attribute mode;
    attribute result;
    attribute strategy;
    attribute passedCarList;
    attribute dirt_snow_course;
    attribute kart_course;
    attribute kart_useable_course;

    hidden.is_enable = false;

    method open(context, mode, carList, course_code)
    {
        self.mode = mode;
        self.closed = false;
        self.passedCarList = carList;

        if (course_code != nil)
        {
            var row = SPECDB.query1("SELECT KartOnly, Kart FROM COURSE WHERE ID=?", [course_code]);
            self.kart_course = row.KartOnly;
            self.kart_useable_course = row.Kart;
            self.dirt_snow_course = gtengine::MSpecDB::isDirtSnow(course_code);
        }
        else
        {
            self.kart_course = false;
            self.kart_useable_course = false;
            self.dirt_snow_course = false;
        }

        self.modal_page = main::SequenceUtil::ModalPage(context, ROOT);
        self.modal_page.open();
        
        var res = self.result;
        self.result = nil;
        return res;
    }

    method openSkipColorSelect(context, mode, carList, course_code)
    {
        return open(context, mode | ROOT::MODE::SKIP_COLOR_SELECT, carList, course_code);
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;
        
        self.OpenActor.on_effect_end = nil;

        PageUtil::visibleUnderPages(context, self);

        ROOT.setFocus(nil);

        var actor = self.CloseActor;
        actor.forward();
        actor.restart();

        if (self.modal_page != nil)
        {
            var delay_time = actor.Fade.total_time;
            self.modal_page.close(delay_time);
            self.modal_page = nil;
        }
    }

    method abort(context)
    {
        if (self.closed == nil || self.closed)
            return;

        self.closed = true;
        
        self.OpenActor.on_effect_end = nil;

        PageUtil::visibleUnderPages(context, self);

        if (self.modal_page != nil)
        {
            self.modal_page.close();
            self.modal_page = nil;
        }
    }

    class Strategy 
    {
        attribute column_widget;

        function createCategoryItems(context)
        {

        }

        function deleteCategoryItems(context)
        {

        }

        method updateList(context)
        {

        }

        method setButtonHelp(context)
        {

        }

        method onOutViewMode(context)
        {

        }

        method finalize()
        {

        }
    }

    class CarStrategy : Strategy
    {
        attribute category;

        method __init__()
        {
            self.column_widget = ListMenu::ListWindow::ColumnList::Car;
        }

        method updateList(context)
        {
            var carcode_list = [];
            var car_list = [];
            var carcode_list;

            if (CourseSelectRoot.mode & ROOT::MODE::PASS_CAR_LIST)
            {
                carcode_list = ROOT.passedCarList;
            }
            else if (CourseSelectRoot.mode & ROOT::MODE::ARCADE)
            {
                var where_clause = "";
                if (ROOT.kart_course)
                    where_clause = "WHERE SpecifyFlags1&%d".format(gtengine::GenericFlag::IS_RACING_KART);
                else if (ROOT.kart_useable_course)
                    where_clause = "WHERE Arcade=1 OR SpecifyFlags1&%d".format(gtengine::GenericFlag::IS_RACING_KART);
                else
                    where_clause = "WHERE Arcade=1 AND NOT (SpecifyFlags1 & %d)".format(gtengine::GenericFlag::IS_RACING_KART);


                carcode_list = SPECDB.executeQuery1C("SELECT ID FROM GENERIC_CAR %{where_clause}");
            }

            if (carcode_list != nil && carcode_list.size > 0)
            {
                var placeholders = [];
                for (var i = 0; i < carcode_list.size; i++)
                    placeholders.push("?");

                var placeholders_text = placeholders.join(",");
                car_list = SPECDB.queryList("SELECT ID, Label, Tuner, PP, DriveTypeName, MainColor FROM CAR_VIEW WHERE ID IN (%{placeholders_text}) ORDER BY PP",
                    carcode_list);
            }

            ListMenu::ListWindow.setList(context, car_list, hidden::CarItem);
        }

        method setButtonHelpOnList(context)
        {
            ButtonHelpGT6.setButtonSet(context, "onCarList");
        }
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }

    method onInitialize(context)
    {
        ContextMain.disableInput();

        var actor = self.OpenActor;
        actor.forward();
        actor.restart();

        actor.on_effect_end = function(context)
        {
            if (self.closed)
                return;

            actor.on_effect_end = nil;
            PageUtil::invisibleUnderPages(context, self);
            ContextMain.enableInput();
        };

        self.CloseActor.stop();

        ListMenu::Menus.shiftMainMenu(context, 'Main_TopMenu', true);

        ButtonHelpGT6.addButtonSet(context, "onMenus", [
            ["Enter"],
            ["Close"]
        ]);

        ButtonHelpGT6.addButtonSet(context, "onCarList", [
            ["Enter"],
            ["Back"]
        ]);

        ButtonHelpGT6.setButtonSet(context, "onMenus");
        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        PageUtil::visibleUnderPages(context, self);

        if (ROOT.strategy != nil)
        {
            ROOT.strategy.finalize();
            ROOT.strategy = nil;
        }

        self.mode = nil;
        self.closed = nil;
        self.disable_cnt = nil;
        self.strategy = nil;
        self.passedCarList = nil;
        self.dirt_snow_course = nil;
        self.kart_course = nil;
        self.kart_useable_course = nil;

        ContextMain.enableInput();
        return EVENTRESULT_FILTER;
    }

    method disableInput(context)
    {
        if (self.disable_cnt == nil)
            self.disable_cnt = 0;

        if (self.disable_cnt == 0)
        {
            context.event_mask = 5;
            context.disableInput();
            context.filterKeyEvent();
        }

        self.disable_cnt++;
    }

    method enableInput(context)
    {
        if (self.disable_cnt == nil)
            self.disable_cnt = 0;

        self.disable_cnt--;
        if (disable_cnt < 0)
            disable_cnt = 0;

        if (disable_cnt == 0)
        {
            context.event_mask = 5;
            context.enableInput();
        }
    }

    module ImportMenuCommons
    {
        attribute focus_;
        attribute active_;

        method setActiveMenu(a, w)
        {
            if (w != nil)
            {
                ListMenu::ListWindow::Head::Label.text = w.Label.text;
            }

            if (self.active_ == w)
                return false;

            if (self.active_ != nil)
            {
                self.active_.active = false;
                self.active_ = nil;
            }

            if (w != nil)
            {
                w.active = a;
                self.active_ = w;
                ListMenu::ListWindow::Head::Label.text = w.Label.text;
            }

            return true;
        }

        method _on_focus_CB(context)
        {
            var focus_w;
            if (self.active_ != nil)
            {
                focus_w = self.active_;
            }
            else if (self.defined('default_focus_') && self.default_focus_ != nil)
            {
                focus_w = self.default_focus_;
            }

            if (focus_w != nil)
            {
                if (self["ScrolledWindow"] != nil)
                    self.ScrolledWindow::clip.warp(focus_w);

                ROOT.setFocus(focus_w);

                if (focus_w.defined('onFocus_CB'))
                    focus_w['onFocus_CB'](context);
                
                if (self.defined('onFocus_CB'))
                    self['onFocus_CB'](context);
            }
        }

        method _leave_focus_CB(context)
        {
            if (self.defined('leaveFocus_CB'))
                self['leaveFocus_CB'](context);
        }
    }

    module ListMenu::Menus
    {
        attribute main_menu_;
        attribute sub_menu_;

        method onKeyPress(context, event)
        {
            if (event.keysym == CELL_PAD_CTRL_L3_RIGHT)
            {
                if (ListMenu::ListWindow.inViewMode(context, false, true))
                {
                    sound.play("cursor");
                    return EVENTRESULT_FILTER;
                }
            }

            return EVENTRESULT_CONTINUE;
        }

        method shiftMainMenu(context, main_menu, warp)
        {
            ROOT.disableInput(context);

            var sub_menu_w = self.sub_menu_ != nil ? ListMenu::Menus[self.sub_menu_] : nil;
            var main_menu_w = ListMenu::Menus[main_menu];
            if (main_menu_w != nil)
            {
                main_menu_w.x = 0.0;
                main_menu_w.visible = true;

                if (main_menu_w.defined("init_CB"))
                    main_menu_w.init_CB(context);
            }

            if (sub_menu_w != nil)
            {
                if (sub_menu_w.defined("_leave_focus_CB"))
                    sub_menu_w._leave_focus_CB(context);
            }

            if (main_menu_w != nil)
            {
                if (main_menu_w.defined("_on_focus_CB"))
                    main_menu_w._on_focus_CB(context);
            }

            self.MoveActor.reverse = false;
            self.MoveActor.start();

            self.MoveActor.on_effect_end = function(context)
            {
                if (sub_menu_w != nil)
                    sub_menu_w.visible = false;

                ListMenu::Menus::MoveActor.on_effect_end = nil;

                ROOT.enableInput(context);
            };

            if (warp == true)
                self.MoveActor.warp();

            self.main_menu_ = main_menu;
            self.sub_menu_ = nil;
        }

        method shiftSubMenu(context, sub_menu, warp)
        {
            ROOT.disableInput(context);

            var main_menu_w = self.main_menu_ != nil ? ListMenu::Menus[self.main_menu_] : nil;
            var sub_menu_w = ListMenu::Menus[sub_menu];
            if (sub_menu_w != nil)
            {
                sub_menu_w.x = 480.0;
                sub_menu_w.visible = true;

                if (sub_menu_w.defined("init_CB"))
                    sub_menu_w.init_CB(context);

                yield;
            }

            if (main_menu_w != nil)
            {
                if (main_menu_w.defined("_leave_focus_CB"))
                main_menu_w._leave_focus_CB(context);
            }

            if (sub_menu_w != nil)
            {
                if (sub_menu_w.defined("_on_focus_CB"))
                    sub_menu_w._on_focus_CB(context);
            }

            self.MoveActor.reverse = true;
            self.MoveActor.start();

            self.MoveActor.on_effect_end = function(context)
            {
                if (main_menu_w != nil)
                    main_menu_w.visible = false;

                ListMenu::Menus::MoveActor.on_effect_end = nil;

                ROOT.enableInput(context);
            };

            if (warp == true)
                self.MoveActor.warp();

            self.sub_menu_ = sub_menu;
        }

        method onInitialize(context)
        {
            for (var w = self.first; w != nil; w = w.next)
                w.visible = false;

            self.insensitive = false;
        }
    }

    module ListMenu::Menus::Main_TopMenu
    {
        import ImportMenuCommons::*;

        attribute default_focus_ = ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Car::VBox::All;

        method onFinalize(context)
        {
            self.setActiveMenu(false);
        }
    }

    module ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Car::VBox
    {
        attribute strategy = CarStrategy();

        method onInitialize(context)
        {
            
        }

        method onFinalize(context)
        {
            
        }

        method updateCarList(context, category)
        {
            var listbox = ListMenu.getListBox();
            listbox.visible = false;
            ROOT.strategy = self.strategy;
            ROOT.strategy.updateList(context);
            listbox.visible = true;
        }

        module All
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
                if (res)
                    updateCarList(context);
            }

            method onActivate(context)
            {
                sound.play("ok");
                self.onFocus_CB(context);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module hidden::CarItem
    {
        attribute value;
        attribute popup_opened;

        method onInitialize(context)
        {
            self.Number::Label.text = "";
            self.Thumbnail.image_path = "";
            self.Name::Label.text = "";
            self.Dealer::Label.text = "";
            self.PP::Label.text = "";
            self.Power::Label.text = "";
            self.Weight::Label.text = "";
            self.Drive::Label.text = "";
            self.Aspiration::Label.text = "";
            self.Year::Label.text = "";
            self.Disable.visible = false;

        }

        method on_activate(context)
        {
            if (self.Disable.visible)
            {
                main::sound.play("disable");
                return;
            }

            main::sound.play("ok");

            var info = self.value;
            var car_code = info.ID;

            var color = self.openColorSelect(context, car_code);
            if (color == nil)
                return;

            var cp = gtengine::MCarParameter(car_code);
            cp.color = color;
            cp.ownArcadePartsAll();

            ROOT.result = cp;
            ROOT.close(context);
        }

        method openColorSelect(context, car_code)
        {
            if (ROOT.mode & ROOT::MODE::SKIP_COLOR_SELECT)
            {
                return gtengine::MSpecDB::getCarVariationFlag(car_code, 1);
            }

            var res = self.ColorSelectPopup.open(context, car_code);
            ROOT.setFocus(self);
            return res;
        }

        method setInfo(context, num, info)
        {
            self.value = info;
            self.Number::Label.text = num;
            self.Thumbnail.image_path = "car/thumbnail_S/%s_%02d".format(info.Label, info.MainColor);
            self.Name::Label.text = gtengine::MSpecDB::getCarShortName(info.ID);
            self.Dealer::Label.text = manager.translate("TunerName", info.Tuner);
            self.PP::Label.text = info.PP.toInt();
            self.Drive::Label.text = manager.translate("DriveTrainName", info.DriveTypeName);

            var car_code = info.ID;
            var car_disable = false;

            if (ROOT.dirt_snow_course)
            {
                var having_dirt_tire = gtengine::MSpecDB::checkFlag(car_code, gtengine::GenericFlag::HAVE_DIRT_TIRE);
                if (!having_dirt_tire)
                    car_disable = true;
            }
            else if (ROOT.kart_course)
            {
                var is_racing_kart = gtengine::MSpecDB::checkFlag(car_code, gtengine::GenericFlag::IS_RACING_KART);
                if (!is_racing_kart)
                    car_disable = true;
            }

            self.Disable.visible = car_disable;
        }

        method onFocusEnter(context)
        {
            return EVENTRESULT_STOP;
        }

        module ColorSelectPopup
        {
            attribute car_code_;
            attribute variation_;
            attribute event_loop_;
            attribute result_;
            attribute created_items_ = false;

            method open(context, car_code)
            {
                self.car_code_ = car_code;
                self.variation_ = gtengine::MSpecDB::getCarVariation(car_code);
                if (self.variation_ == 1)
                    return EVENTRESULT_CONTINUE;

                self.result_ = nil;
                self.openPopup(context);
                self.event_loop_ = main::menu::EventLoop(context);
                self.event_loop_.enter();

                var res = self.result_;
                self.result_ = nil;
                return res;
            }

            method close(context)
            {
                if (self.event_loop_ != nil)
                {
                    self.event_loop_.leave();
                    self.event_loop_ = nil;
                }
            }

            method onInitialize(context)
            {
                self.popup.visible = true;
                self.popup::vbox.minimum_height = 0.0;
            }

            method createPulldownItems(context, car_code, focus_color)
            {
                if (focus_color == nil)
                    focus_color = gtengine::MSpecDB::getCarVariationFlag(car_code, 1);

                for (var i = 0; i < self.variation_; i++)
                {
                    var item = hidden::ColorItem.doCopy();
                    var color_name = gtengine::MSpecDB::getCarColorName(car_code, i);

                    item.label.text = color_name.trim() != "" ? color_name : "--";
                    item.label_i.text = item.label.text;
                    item.Chip::ColorChipFace.setCarColor(car_code, i);
                    self.popup::vbox.appendChild(context, item);
                }

                self.applyAppend(context);
                self.popup.minimum_height = 0.0;
                self.setIndex(context, focus_color);
                self.setIndex(context, focus_color); // PDI?
            }

            method onActivate(context)
            {
                if (self.is_popuped)
                {
                    sound.play("ok");
                    self.result_ = self.index;
                    close(context);
                }

                return EVENTRESULT_FILTER;
            }

            method onCancel(context)
            {
                if (self.is_popuped)
                {
                    sound.play("cancel");
                    self.result_ = nil;
                    close(context);
                }

                return EVENTRESULT_FILTER;
            }

            method onPopupOpen(context)
            {
                self.createPulldownItems(context, self.car_code_);
                return EVENTRESULT_STOP;
            }

            method onPopupClosed(context)
            {
                context.pushEvent(menu::MFunctionEvent(self.popup::vbox.clearChildren, context));
                return EVENTRESULT_STOP;
            }
        }
    }

    module ListMenu::ListWindow
    {
        module ITEM_STATE
        {
            static Blank = 1;
            static Selected = 2;
        }

        attribute data_list_;
        attribute item_state_list_;
        attribute prev_focus_w_;
        attribute prev_button_set_;
        attribute is_empty_;
        attribute in_view_;

        method setHeadListCount(context)
        {
            Head::ListCount.setText(self.data_list_.size);
        }

        method setList(context, data_list, template_item)
        {
            self.data_list_ = data_list;
            setHeadListCount(context);

            self.item_state_list_ = Array(self.data_list_.size);

            var listbox = ListMenu.getListBox();
            listbox.setItemTemplate(context, template_item);

            if (listbox.getItemCount() > 0)
            {
                listbox.setItemCount(0);
                listbox.postRedraw();
                context.wait();
            }

            if (data_list.size > 0)
            {
                listbox.setItemCount(data_list.size);
                listbox.focus_index = 0;
                self.is_empty_ = false;
                ListMenu.setDisplayEmpty(self.is_empty_);
            }
            else
            {
                self.is_empty_ = true;
                var nothing = "";
                ListMenu.setDisplayEmpty(self.is_empty_, nothing);
            }

            for (var w = ColumnList.first_window; w != nil; w = w.next_window)
                w.visible = false;

            ROOT.strategy.column_widget.visible = true;
        }

        method inViewMode(context, warp, no_move)
        {
            if (self.is_empty_ || self.in_view_)
                return false;

            var focus_w = ROOT.getFocusWidget();
            if (focus_w == nil)
                return false;

            self.prev_focus_w_ = focus_w;
            self.prev_button_set_ = ButtonHelpGT6.getCurrentButtonSetName();

            if (no_move == nil || !no_move)
            {
                ListMenu.MoveActor.reverse = false;
                ListMenu.MoveActor.start();

                if (warp == true)
                {
                    ListMenu.MoveActor.warp();
                }
            }
            
            ListMenu::Menus.insensitive = true;
            self.insensitive = false;

            clip::VScrollbar.display_policy = "automatic";

            ROOT.strategy.setButtonHelpOnList(context);
            ROOT.setFocus(ListMenu.getListBox());

            self.in_view_ = true;
            return true;
        }

        method outViewMode(context, warp)
        {
            if (!self.in_view_)
                return false;

            ListMenu.MoveActor.reverse = true;
            ListMenu.MoveActor.start();

            if (warp == true)
                ListMenu.MoveActor.warp();
            
            self.insensitive = true;
            ListMenu::Menus.insensitive = false;

            clip::VScrollbar.display_policy = "never";

            ROOT.setFocus(self.prev_focus_w_);
            self.prev_focus_w_ = nil;
            ButtonHelpGT6.setButtonSet(context, self.prev_button_set_);
            self.prev_button_set_ = nil;
            ROOT.strategy.onOutViewMode(context);

            self.in_view_ = false;
            return true;
        }

        method onInitialize(context)
        {
            self.is_empty_ = false;
            self.in_view_ = false;
            self.insensitive = true;

            ListMenu.MoveActor.forward();
            ListMenu.MoveActor.reset();

            clip::VScrollbar.display_policy = "never";
        }

        method onFinalize(context)
        {
            self.data_list_ = nil;
            self.item_state_list_ = nil;
            self.prev_focus_w_ = nil;
            self.prev_button_set_ = nil;
            self.is_empty_ = nil;
            self.in_view_ = nil;
        }

        method onKeyPress(context, event)
        {
            if (event.keysym == CELL_PAD_CTRL_L3_LEFT)
            {
                if (self.outViewMode(context))
                {
                    sound.play("cursor");
                    return EVENTRESULT_FILTER;
                }
            }

            return EVENTRESULT_CONTINUE;
        }

        method onActivate(context, event)
        {
            var listbox = ListMenu.getListBox();
            var item_index = listbox.focus_index;
            var item = listbox.getItemWidget(listbox.focus_index);
            var state = self.item_state_list_[item_index];

            if (state == ITEM_STATE::Blank)
            {
                sound.play("disable");
                return EVENTRESULT_FILTER;
            }

            item.on_activate(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            if (self.outViewMode(context))
            {
                sound.play("cancel");
            }

            return EVENTRESULT_FILTER;
        }

        method getFocusedItem()
        {
            var listbox = ListMenu.getListBox();
            return listbox.getItemWidget(listbox.focus_index);
        }

        method updateVisibleListItems(context)
        {
            var listbox = ListMenu.getListBox();
            for (var i = 0; i < listbox.getItemCount(); i++)
            {
                var item = listbox.getItemWidget(i);
                if (item != nil)
                    updateListItem(context, item, i);
            }
        }

        method updateListItem(context, item, item_index)
        {
            if (item_index < self.item_state_list_.size)
            {
                var state = self.item_state_list_[item_index];
                if (state == ITEM_STATE::Blank)
                    item.isBlank(true);
                else
                {
                    var num = item_index + 1;
                    item.setInfo(context, num, self.data_list_[item_index]);
                }
            }
        }

        module clip::ListBox
        {
            method onVisibleNotify(context, indexes)
            {
                foreach (var i in indexes)
                {
                    if (self.getItemVisible(i))
                    {
                        var w = self.getItemWidget(i);
                        if (w == nil)
                        {
                            var item = self.getItemWidget(i, context);
                            ListMenu::ListWindow.updateListItem(context, item, i);
                        }
                        else
                        {
                            self.setItemWidget(i, context, nil);
                        }
                    }
                }

                return EVENTRESULT_STOP;
            }
        }

        module Head::ListCount
        {
            method setText(a, b)
            {
                if (b == nil)
                {
                    ListCount::label_L.text = "";
                    ListCount::label_S.text = a;
                }
                else
                {
                    ListCount::label_L.text = a + "/";
                    ListCount::label_S.text = b;
                }
            }
        }
    }
}