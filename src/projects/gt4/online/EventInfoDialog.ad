module PROJECT::ROOT
{
	static result = nil;
	static limited_regulation = nil;
	static violated = nil;

	function setMoveActor(widget)
	{
		var actor = main::menu::MMoveActor(widget, widget.x, PS2_SCREEN_H_F);
		widget.actor = actor;
		widget.actor.ratio = 0.2;
	}
	
	function setFadeActorRoot()
	{
		var actor = main::menu::MFadeActor(EventInfoDialog, 1.0);
		actor.repeat = false;
		actor.period = 0.5;
		EventInfoDialog.actor = actor;
	}

	setMoveActor(Pane);
	setFadeActorRoot();
	
	module RegulationStringMap
	{
		static CARTYPE_NORMAL = "CarTypeSpec_1";
		static CARTYPE_RACING = "CarTypeSpec_2";
		static CARTYPE_OPEN = "CarTypeSpec_3";
		static DRIVETRAIN_FR = "DrivetrainSpec_1";
		static DRIVETRAIN_FF = "DrivetrainSpec_2";
		static DRIVETRAIN_4WD = "DrivetrainSpec_3";
		static DRIVETRAIN_MR = "DrivetrainSpec_4";
		static ASPIRATION_NATUNE = "AspirationSpec_1";
		static ASPIRATION_TURBO = "AspirationSpec_2";
		static ASPIRATION_SUPERCHARGER = "AspirationSpec_3";
	}

	Template.visible = false;

	function onInitialize(context)
	{
		Pane::VBox::RegulationHeader::label.adjustScale();
		var box = Pane::VBox::Regulation::clip::space;
		box.actor = main::menu::MMoveActor(box, 0.0, 0.0);
		box.actor.ratio = 0.2;
		box.actor.out = true;
		box.actor.warp();
		var stats = main::menu::MPlayerStats::unpack(main::network.accountGetStats());
		var regulation = getViolatedRegulationFromStructure(
			main::game.garage.riding_car,
			stats.point,
			limited_regulation
		);

		violated = regulation.violated;
		if (limited_regulation.cartype != nil)
		{
			add_regulation_row(
				context, box, "CarTypeSpec",
				context.translate(EventInfoDialog, RegulationStringMap["CARTYPE_" + limited_regulation.cartype]),
				regulation.cartype != nil
			);
		}

		if (limited_regulation.drivetrain != nil)
		{
			add_regulation_row(
				context, box, "DrivetrainSpec",
				context.translate(EventInfoDialog, RegulationStringMap["DRIVETRAIN_" + limited_regulation.drivetrain]),
				regulation.drivetrain != nil
			);
		}

		if (limited_regulation.aspiration != nil)
		{
			add_regulation_row(
				context, box, "AspirationSpec",
				context.translate(EventInfoDialog, RegulationStringMap["ASPIRATION_" + limited_regulation.aspiration]),
				regulation.aspiration != nil
			);
		}

		if (limited_regulation.tiretype != nil)
		{
			add_regulation_row(
				context, box, "TireRequired",
				context.translate(EventInfoDialog, "TireRequired_" + limited_regulation.tiretype),
				regulation.tiretype != nil
			);
		}

		if (limited_regulation.need_ps != nil)
		{
			var ps_string = "%d %s".format(
				main::menu::MUnit::GetPowerForDisplay(limited_regulation.need_ps).toInt(),
				main::menu::MUnit::GetUnitOfPower()
			);

			var doc = context.translate(EventInfoDialog, "NeedPowerDoc").format(ps_string);
			add_regulation_row(
				context, box, "NeedPower", doc,
				regulation.need_ps != nil
			);
		}

		if (limited_regulation.limit_ps != nil)
		{
			var ps_string = "%d %s".format(
				main::menu::MUnit::GetPowerForDisplay(limited_regulation.limit_ps).toInt(),
				main::menu::MUnit::GetUnitOfPower()
			);
			var doc = context.translate(EventInfoDialog, "LimitPowerDoc").format(ps_string);
			add_regulation_row(
				context, box, "LimitPower", doc,
				regulation.limit_ps != nil
			);
		}

		if (limited_regulation.need_price != nil)
		{
			add_regulation_row(
				context,box, "NeedPrice",
				context.translate(EventInfoDialog, "NeedPriceDoc").format(limited_regulation.need_price),
				regulation.need_price != nil
			);
		}

		if (limited_regulation.limit_weight != nil)
		{
			add_regulation_row(
				context, box, "LimitedWeight",
				context.translate(EventInfoDialog, "LimitedWeightDoc").format(limited_regulation.limit_weight),
				regulation.limit_weight != nil
			);
		}

		if (limited_regulation.need_weight != nil)
		{
			add_regulation_row(
				context, box, "NeedWeight",
				context.translate(EventInfoDialog, "NeedWeightDoc").format(limited_regulation.need_weight),
				regulation.need_weight != nil
			);
		}

		if (limited_regulation.length != nil)
		{
			add_regulation_row(
				context, box, "LimitedLength",
				context.translate(EventInfoDialog, "LimitedLengthDoc").format(limited_regulation.length),
				regulation.length != nil
			);
		}

		if (limited_regulation.country != nil)
		{
			var nation_list = "";
			var num = limited_regulation.country.size;
			for (var i = 0; i < num; i++) {
				var country = limited_regulation.country[i];
				nation_list += context.translate(EventInfoDialog, "NationName", country);
				if (i < num - 1) {
					nation_list += ",";
				}
			}

			add_regulation_row(
				context, box, "NeedNation", 
				context.translate(EventInfoDialog, "NeedNationDoc").format(nation_list),
				regulation.country != nil
			);
		}

		if (limited_regulation.year != nil)
		{
			|var min, var max| = limited_regulation.year;
			if (min > 0 || max > 0)
			{
				var doc = min > 0 ? context.translate(EventInfoDialog, "NeedYearDoc").format(min, max) : context.translate(EventInfoDialog, "NeedYearDocMax").format(max);
				add_regulation_row(
					context, box, "NeedYear", doc,
					regulation.year != nil
				);
			}
		}

		var carlist = limited_regulation.carlist;
		if (carlist != nil && carlist.size > 0)
		{
			var cars_allowed = "";
			var num = carlist.size <= 5 ? carlist.size : 5;
			for (var i = 0; i < num; i++) 
			{
				var cg = main::menu::MCarGarage(carlist[i]);
				var name = cg.short_name_no_year;
				if (name == nil || name == "")
					name = carlist[i];

				cars_allowed += name;
				if (i < num - 1)
					cars_allowed += "\n";
			}
			if (carlist.size > 5)
				cars_allowed += "\n" + context.translate(EventInfoDialog, "and the others");
				
			add_regulation_row(
				context, box, "CarsAllowed", cars_allowed,
				regulation.carlist != nil
			);
		}

		if (limited_regulation.need_point != nil)
		{
			add_regulation_row(
				context, box, "NeedPoint",
				context.translate(EventInfoDialog, "NeedPointDoc").format(limited_regulation.need_point),
				regulation.need_point != nil
			);
		}
	
		if (limited_regulation.hasNothing())
		{
			add_regulation_row(
				context, box, "NoLimit",
				context.translate(EventInfoDialog, "NoLimitDoc"), 0);
		}
		box.adjustSize();
		Pane::VBox::Regulation.updateGeometry();
	}

	function onFinalize(context)
	{
		Pane::VBox::Regulation::clip::space.clearChildren(context);
		Pane::VBox::Regulation::clip::space.actor = nil;
		violated = nil;
	}

	function add_regulation_row(context, target, header_key, text, violated)
	{
		var header = Template::RegHeader.doCopy();
		var desc = Template::RegDesc.doCopy();
		header["text"].text = context.translate(EventInfoDialog, header_key);
		header["text"].adjustScale();
	
		switch(violated)
		{
			case 0:
				desc["text"].visible = true;
				desc["textw"].visible = false;
				desc["textv"].visible = false;
				desc["text"].text = text;
				break;

			case 1:
				desc["text"].visible = false;
				desc["textw"].visible = false;
				desc["textv"].visible = true;
				var actor = main::menu::MFadeActor(desc["textv"], 1.0, 0.5);
				actor.repeat = true;
				actor.period = 0.1;
				desc["textv"].actor = actor;
				desc["textv"].text = text;
				break;

			case 2:
				desc["text"].visible = false;
				desc["textw"].visible = true;
				desc["textv"].visible = false;
				desc["textw"].text = text;
				break;
		}
		target.appendChild(context, header);
		target.appendChild(context, desc);
		return desc;
	}

	function open(context, limit)
	{
		limited_regulation = limit;
		context.cursor_visible = false;
		Pane.actor.destinationY = PS2_SCREEN_H_F;
		Pane.actor.out = true;
		Pane.actor.warp();
		EventInfoDialog.actor.out = true;
		EventInfoDialog.actor.warp();
		context.pushPage(EventInfoDialog);
		EventInfoDialog.setFocus(Pane::Buttons::OK);
		Pane.actor.out = false;
		EventInfoDialog.actor.out = false;
		context.sync(0.5);
		context.cursor_visible = true;
		context.getUpdateContext().enterEventLoop();
		return result;
	}

	function close(context)
	{
		EventInfoDialog.setFocus(nil);
		context.cursor_visible = false;
		if (result)
			Pane.actor.destinationY = -Pane.h;
		else
			Pane.actor.destinationY = PS2_SCREEN_H_F;
	
		Pane.actor.out = true;
		EventInfoDialog.actor.out = true;
	
		context.sync(0.2);
		context.closePage(EventInfoDialog);
	
		context.cursor_visible = true;
		context.getUpdateContext().leaveEventLoop();
	}

	function onCancel(context)
	{
		main::sound.play("cancel");
		result = false;
		close(context);
		return EVENTRESULT_FILTER;
	}

	function onKeyPress(context, event)
	{
		var box = Pane::VBox::Regulation::clip::space;
		var range = box.h - Pane::VBox::Regulation::clip.h;
		var y = box.actor.destinationY;
		var step = 40.0;
		switch (event.keysym)
		{
			case PS2_PAD_CTRL_L3_UP:
				y += step;
				if (y > 0.0)
					y = 0.0;
		
				if (box.actor.destinationY != y)
				{
					box.actor.destinationY = y;
					main::sound.play("cursor");
				}
				return EVENTRESULT_FILTER;

			case PS2_PAD_CTRL_L3_DOWN:
				y -= step;
				if (y < -range)
					y = -range;
		
				if (box.actor.destinationY != y)
				{
					box.actor.destinationY = y;
					main::sound.play("cursor");
				}
				
				return EVENTRESULT_FILTER;
		}

		return EVENTRESULT_CONTINUE;
	}
}

module PROJECT::ROOT::Pane::Buttons::Cancel
{
    function onActivate(context)
    {
        main::sound.play("cancel");
        result = false;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Buttons::OK
{
	function onActivate(context)
	{
		if (violated)
		{
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, context.translate(EventInfoDialog, "regulation violated"));
			return EVENTRESULT_FILTER;
		}
		main::sound.play("ok");
		if (limited_regulation.tiretype != nil)
		{
			var success, tire;
			|success, tire| = setLimitedTireFromTireType(main::game.garage.riding_car, limited_regulation.tiretype);
			if (tire != nil)
			{
				;
			}

			if (!success)
			{
				main::sound.play("disable");
				openConfirmDialog(context, DIALOG_ERROR, context.translate(EventInfoDialog, "regulation violated"));
				return EVENTRESULT_FILTER;
			}
		}

		result = true;
		close(context);
		return EVENTRESULT_FILTER;
	}
}