













module ROOT
{
    module EnumColorType
    {
        static Solid = 0;
        static Metallic = 1;
        static Pearl = 2;
        static ColorShift = 3;
        static Matte = 4;
        static Chrome = 5;
    }

    static sPriceFactor = [
        EnumColorType::Solid : 1.0,
        EnumColorType::Metallic : 1.25,
        EnumColorType::Pearl : 1.5,
        EnumColorType::ColorShift : 2.0,
        EnumColorType::Matte : 2.0,
        EnumColorType::Chrome : 2.5,
    ];

    hidden.visible = false;

    attribute modal_page;
    attribute riding_car;
    attribute paint_category;
    attribute current_paint_id;
    attribute need_save = false;
    attribute base_price = 0;

    method open(context, paint_category)
    {
        self.paint_category = paint_category;
        self.modal_page = main::SequenceUtil::ModalPage(context, ROOT);
        self.modal_page.open();
    }

    method close(context)
    {
        if (self.modal_page != nil)
        {
            ContextMain.disableInput();

            if (self.need_save)
            {
                SaveDataUtilGT6::saveEveryWhere(context);
                self.need_save = false;
            }

            GTAutoMenu::ListWindow::CarView.finalize(context);

            PageUtil::visibleUnderPages(context, self);

            menu::FrameInterval = 1;

            var actor = self.Fade;
            actor.backward();
            actor.start();

            var delay_time = actor.total_time;
            self.modal_page.close(delay_time);
            self.modal_page = nil;

            ContextMain.enableInput();
        }
    }

    function CheckDebugCommand(context)
    {
        if (!PROJECT::IsDevelop(context))
            return;

        var paint_id_list = [];
        var state = context.getUpdateContext().getPadButtonState(0);

        if (state & 0x800)
            paint_id_list = SPECDB.executeQuery1C("SELECT ID FROM PAINT_COLOR_INFO WHEE LabelJpn <> '' AND LabelEng <> '' AND Type <> 99 ORDER BY RANDOM () LIMIT 50");

        // Double, copy paste mistake from PDI
        if (state & 0x100)
            paint_id_list = SPECDB.executeQuery1C("SELECT ID FROM PAINT_COLOR_INFO WHERE LabelJpn <> '' AND LabelEng <> '' AND Type <> 99");

        if (state & 0x100)
            paint_id_list = SPECDB.executeQuery1C("SELECT ID FROM PAINT_COLOR_INFO WHERE LabelJpn <> '' AND LabelEng <> '' AND Type <> 99");

        if (paint_id_list.size > 0)
        {
            var progress = pdistd::MProgress();
            progress.value = 0.0;

            static abort = false;

            DialogUtil::setProgress(context, progress);
            DialogUtil::setProgressRawMode(context, true);
            DialogUtil::setProgressCancelCB(context, function(context) 
            {
                abort = true;
            });

            DialogUtil::openProgressDialog(context, "add paint colors.", "done!", "faild!", async function (context, args)
            {
                for (var i = 0; i < paint_id_list.size; i++)
                {
                    var num = (i + 1).toFloat();
                    progress.value = num / paint_id_list.size;

                    DialogUtil::setProgressLabel(context, "%d / %d".format(num, paint_id_list.size));

                    var paint_id = paint_id_list[i];

                    await GAME_STATUS.user_profile.item.paint.addItem(paint_id);

                    if (abort)
                        break;

                    yield;
                }

                return [true, true];
            });
        }
    }

    function getBodyPaint(cp)
    {
        var paint_id = cp.getPaintColor(0);
        if (paint_id == nil || paint_id < 0)
            paint_id = cp.getPaintID();

        return paint_id;
    }

    method setCurrentRidingCar(category, cp)
    {
        if (category == PAINT_CATEGORY::BODY)
        {
            self.current_paint_id = ROOT.getBodyPaint(cp);
        }
        else if (category == PAINT_CATEGORY::WHEEL)
        {
            self.current_paint_id = cp.getWheelPaintColor(0);
        }
        else if (category == PAINT_CATEGORY::BRAKE_CALIPER)
        {
            self.current_paint_id = cp.getBrakeCaliperPaintColor(0);
        }
        else if (category == PAINT_CATEGORY::CUSTOM_WING)
        {
            self.current_paint_id = cp.getWingPaintColor(0);
        }

        self.riding_car = cp;
    }

    method getPrice(color_type)
    {
        return (ROOT.base_price * sPriceFactor[color_type]).toInt();
    }

    method onInitialize(context)
    {
        if (self.category == PAINT_CATEGORY::BODY)
        {
            base_price = 400000 / 100;
        }
        else if (self.category == PAINT_CATEGORY::WHEEL)
        {
            base_price = 200000 / 100;
        }
        else if (self.category == PAINT_CATEGORY::BRAKE_CALIPER)
        {
            base_price = 100000 / 100;
        }
        else if (self.category == PAINT_CATEGORY::CUSTOM_WING)
        {
            base_price = 100000 / 100;
        }

        self.setCurrentRidingCar(self.paint_category, GAME_STATUS.user_profile.garage.getRidingCar());

        GTAutoMenu::ListWindow::CarView.initialize(context);
        GTAutoMenu::ListWindow::CarView.setCar(context, self.riding_car);

        ContextMain.disableInput();

        var actor = self.Fade;
        actor.forward();
        actor.restart();
        actor.on_effect_end = function(context)
        {
            actor.on_effect_end = nil;
            PageUtil::invisibleUnderPages(context, self);
            ContextMain.enableInput();
        };

        CheckDebugCommand(context);

        GTAutoMenu.initialize(context);
        self.Fade.forward();
        self.Fade.restart();

        menu::FrameInterval = 2;
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        if (CarPreview.full_view)
            return EVENTRESULT_CONTINUE;

        switch (event.keysym)
        {
            case CELL_PAD_CTRL_L1:
                if (GTAutoMenu::ListWindow::CarView.swapCamera_L1())
                    sound.play("cursor");

                return EVENTRESULT_FILTER;

            case CELL_PAD_CTRL_R1:
                if (GTAutoMenu::ListWindow::CarView.swapCamera_R1())
                    sound.play("cursor");

                return EVENTRESULT_FILTER;

            case CELL_PAD_CTRL_TRIANGLE:
                sound.play("ok");
                CarPreview.switchView(context);

                return EVENTRESULT_FILTER;
                break;

            case CELL_PAD_CTRL_START:
                var preopen_garage_id = GAME_STATUS.user_profile.garage.getRidingGarageId();

                if (CursorProject::StartMenuRoot::StartMenu.checkKeyPress(context, event))
                {
                    if (preopen_garage_id != GAME_STATUS.user_profile.garage.getRidingGarageId())
                    {
                        self.setCurrentRidingCar(self.paint_category, GAME_STATUS.user_profile.garage.getRidingCar());
                        GTAutoMenu::ListWindow::CarView.setCar(context, self.riding_car);

                        GTAutoMenu.updateList(context);
                    }
                }
                break;
        }

        return EVENTRESULT_CONTINUE;
    }

    function hasCustomWheel(car_code)
    {
        var wheel_info = SPECDB.query1("SELECT FrontMinDiameter, FrontMaxDiameter, RearMinDiameter, RearMaxDiameter FROM WHEEL WHERE CarCode=?", [car_code]);

        var default_f_inch = wheel_info.FrontMinDiameter;
        var default_r_inch = wheel_info.RearMinDiameter;
        var allowed_f_inch = wheel_info.FrontMaxDiameter;
        var allowed_r_inch = wheel_info.RearMaxDiameter;

        var allow_change_wheel = allowed_f_inch > 0 && allowed_r_inch > 0;
        if (!allow_change_wheel)
            return false;

        var inch_count = 3;

        for (var i = 0; i < inch_count; i++)
        {
            var inch_up = i * 10;
            var f_inch = default_f_inch + inch_up;
            var r_inch = default_r_inch + inch_up;

            if (allow_change_wheel)
            {
                if (f_inch <= allowed_f_inch && r_inch <= allowed_r_inch)
                {
                    var min_inch = f_inch < r_inch ? f_inch : r_inch;
                    var max_inch = f_inch > r_inch ? f_inch : r_inch;

                    var row_count = SPECDB.count("SELECT COUNT(ID) FROM WHEEL_EX WHERE MinDiameter <= ? AND ? <= MaxDiameter AND WheelType&1", [min_inch, max_inch]);
                    if (row_count > 0)
                        return true;
                }
            }
        }

        return false;
    }

    module GTAutoMenu
    {
        attribute active_w;

        method initialize(context)
        {
            var menus = [
                ["Solid", EnumColorType::Solid],
                ["Metallic", EnumColorType::Metallic],
                ["Pearl", EnumColorType::Pearl],
                ["ColorShift", EnumColorType::ColorShift],
                ["Matte", EnumColorType::Matte],
                ["Chrome", EnumColorType::Chrome],
                [nil, nil],
                ["Painting", nil],
            ];

            var focus_w = nil;
            var category_w = hidden::Category.doCopy();

            if (ROOT.paint_category == PAINT_CATEGORY::BODY)
            {
                category_w.setText(manager.translate("GTAuto", "Category_PaintBody"));
            }
            
            if (ROOT.paint_category == PAINT_CATEGORY::WHEEL)
            {
                category_w.setText(manager.translate("GTAuto", "Category_PaintWheel"));
            }

            if (ROOT.paint_category == PAINT_CATEGORY::BRAKE_CALIPER)
            {
                category_w.setText(manager.translate("GTAuto", "Category_PaintBrakeCaliper"));
            }

            if (ROOT.paint_category == PAINT_CATEGORY::CUSTOM_WING)
            {
                category_w.setText(manager.translate("GTAuto", "Category_PaintCustomWing"));
            }

            foreach (|var label, var color_type| in menus)
            {
                if (label != nil)
                {
                    var category_item_w = hidden::CategoryItem.doCopy();
                    category_item_w.value = color_type;

                    category_item_w.setText(manager.translate("GTAuto", "PaintType_" + label));
                    category_w.setCategoryItemComponent(context, category_item_w);

                    if (focus_w == nil)
                    {
                        focus_w = category_item_w;
                    }
                }
                else
                {
                    var h_bar = hidden::HBar.doCopy();
                    category_w.setCategoryItemComponent(context, h_bar);
                }
            }

            self.setCategoryComponent(context, category_w);
            self.setActive(context, focus_w);
            
            ROOT.setFocus(focus_w);
        }

        method onFinalize(context)
        {
            if (self.active_w != nil)
            {
                self.active_w.active = false;
                self.active_w = nil;
            }

            self.clearCategoryComponent(context);
        }

        method setActive(context, active_item)
        {
            if (self.active_w != nil)
            {
                self.active_w.active = false;
                self.active_w = nil;
            }

            active_item.active = true;
            self.active_w = active_item;

            self.updateList(context, active_item);
        }

        method updateList(context, item)
        {
            if (item == nil)
                item = self.active_w;

            GTAutoMenu::ListWindow::clip::ListBox.viewPaints(context, item.value);
        }
    }

    module GTAutoMenu::ListWindow::clip::ListBox
    {
        attribute color_type;
        attribute paint_list;
        attribute prev_focus_w_;
        attribute active_w_index = -1;

        method view_reset(context)
        {
            self.color_type = nil;
            self.paint_list = nil;
            self.active_w_index = -1;
            self.setItemCount(0);
            self.postRedraw();

            context.wait();
        }

        method viewPaints(context, color_type)
        {
            if (color_type != nil)
                self.viewPaints_ColorType(context, color_type);
            else
                self.viewPaints_PaintedCar(context);
        }

        method viewPaints_ColorType(context, color_type)
        {
            self.view_reset(context);

            self.setItemTemplate(context, hidden::ListItem);
            self.color_type = color_type;
            self.paint_list = GameItemUtil::getPaintListSimple(color_type);
            self.setItemCount(self.paint_list.size);
            self.focus_index = 0;
            
            var empty = self.paint_list.size > 0;
            self.insensitive = !empty;
            ListWindow::Empty.visible = !empty;
        }

        method viewPaints_PaintedCar(context)
        {
            self.view_reset(context);

            self.setItemTemplate(context, hidden::ListItem2);
            self.color_type = color_type;

            var cp = ROOT.riding_car;
            var paint_ids = [
                [PAINT_CATEGORY::BODY, ROOT.getBodyPaint(cp)],
                [PAINT_CATEGORY::WHEEL, cp.getWheelPaintColor(0)],
                [PAINT_CATEGORY::BRAKE_CALIPER, cp.getBrakeCaliperPaintColor(0)],
                [PAINT_CATEGORY::CUSTOM_WING, cp.getWingPaintColor(0)],
            ];

            self.setItemCount(paint_ids.size);

            for (var i = 0; i < self.getItemCount(); i++)
            {
                var w = self.getItemWidget(i, context);
                w.initialize(context, paint_ids[i][0], paint_ids[i][1]);
            }

            self.focus_index = 0;
            
            var empty = paint_ids.size > 0;
            self.insensitive = !empty;
            ListWindow::Empty.visible = !empty;
        }

        method reviewPaints_PaintedCar(context)
        {
            if (color_type == nil)
                viewPaints_PaintedCar(context);
        }

        method inFocus(context)
        {
            if (self.insensitive)
                return;

            var focus_w = ROOT.getFocusWidget();
            if (focus_w == nil)
                return;

            self.prev_focus_w_ = focus_w;
            ROOT.setFocus(self);
        }

        method outFocus(context)
        {
            if (self.prev_focus_w_ != nil)
            {
                ROOT.setFocus(self.prev_focus_w_);
                self.prev_focus_w_ = nil;
            }
        }

        method onActivate(context)
        {
            if (!GTAutoMenu::ListWindow::CarView.can_all_paint)
            {
                main::sound.play("disable");
                return EVENTRESULT_FILTER;
            }

            var w = self.getInitializedWidget(context, self.focus_index);
            if (w == nil)
                return EVENTRESULT_FILTER;

            if (w.invalid)
            {
                sound.play("disable");
                ERROR(context, "CommonGTMode", "ERROR_INVALID_VOUCHER_CAR");
                return EVENTRESULT_FILTER;
            }

            if (w.disable)
            {
                main::sound.play("disable");
                return EVENTRESULT_FILTER;
            }

            if (self.focus_index == self.active_w_index)
                return EVENTRESULT_FILTER;

            if (w.on_activate(context))
            {
                var prev_active_w = self.getItemWidget(self.active_w_index);
                if (prev_active_w != nil)
                    prev_active_w.set_active(false);

                self.active_w_index = self.focus_index;
                w.set_active(true);
            }

            return EVENTRESULT_FILTER;
        }

        method getInitializedWidget(context, i)
        {
            if (i < 0)
                return nil;

            var w = self.getItemWidget(i);
            if (w == nil)
                w = self.getItemWidget(i, context);

            if (!w.initialized)
            {
                if (self.color_type != nil)
                {
                    var paint_info = i < self.paint_list.size ? self.paint_list[i] : nil;
                    w.initialize(context, self.color_type, paint_info);
                }
            }

            return w;
        }

        method onKeyPress(context, event)
        {
            if (event.keysym == CELL_PAD_CTRL_L3_LEFT)
            {
                sound.play("cursor");
                GTAutoMenu::ListWindow::clip::ListBox.outFocus(context);
                return EVENTRESULT_FILTER;
            }

            return EVENTRESULT_CONTINUE;
        }

        method onFocusNotify(context, new_index, old_index)
        {
            if (new_index != nil)
            {
                var w = self.getItemWidget(new_index, context);
                if (w != nil && w.defined("on_focus_enter"))
                    w["on_focus_enter"](context);
            }

            if (old_index != nil)
            {
                var w = self.getItemWidget(old_index, context);
                if (w != nil && w.defined("on_focus_leave"))
                    w["on_focus_leave"](context);
            }

            return EVENTRESULT_STOP;
        }

        method onVisibleNotify(context, indices)
        {
            foreach (var i in indices)
            {
                if (self.getItemVisible(i))
                {
                    var w = self.getInitializedWidget(context, i);
                    if (i == self.active_w_index)
                        w.set_active(true);
                }
                else
                    self.setItemWidget(i, context, nil);
            }

            return EVENTRESULT_STOP;
        }
    }

    module GTAutoMenu::ListWindow::CarView
    {
        static sCameraScripts = [
            "GTAUTO_Parts_Paint_right",
            "GTAUTO_Parts_Paint_FR",
            "GTAUTO_Parts_Paint_front",
            "GTAUTO_Parts_Paint_FL",
            "GTAUTO_Parts_Paint_left",
            "GTAUTO_Parts_Paint_RL",
            "GTAUTO_Parts_Paint_rear",
            "GTAUTO_Parts_Paint_RR",
            "GTAUTO_Parts_Paint_topview",
        ];

        attribute preview_cp;
        attribute is_preview = false;
        attribute info;
        attribute can_all_paint = false;
        attribute item_w;
        attribute wages;
        attribute camera_point = 0;

        method initialize(context)
        {
            self.insensitive = true;
            
            var sbox = self.SBox;
            sbox.Name.text = "";
            sbox.CrPrice::Price.text = "--";
            sbox.Buy.insensitive = true;

            CarPreview::Footer::Preview::MoveY.forward();
            CarPreview::Footer::Preview::MoveY.reset();

            CarPreview::SceneFace.initialize(context);
        }

    
        method finalize(context)
        {
            CarPreview::SceneFace.finalize(context);
            self.preview_cp = nil;
            self.is_preview = false;
            self.info = nil;
            self.can_all_paint = false;
            self.item_w = nil;
            self.wages = nil;
        }

        method onFinalize(context)
        {
            self.finalize(context);
        }

        method setCar(context, cp)
        {
            self.finalize(context);
            self.insensitive = true;
            self.preview_cp = gtengine::MCarParameter();
            self.preview_cp.deepCopy(cp);
            GTAutoUtil::applyCarWashAndRepair(self.preview_cp);
            self.is_preview = false;

            if (ROOT.paint_category == PAINT_CATEGORY::BODY)
            {
                self.can_all_paint = gtengine::MSpecDB::checkFlag(cp.getCarCode(), gtengine::GenericFlag::CAN_ALL_PAINT);
                CarPreview::CannotPaint::HBox::Label.text = manager.translate("GTAuto", "Label_CannotPaintBody");
                CarPreview::CannotPaint.visible = !self.can_all_paint;
                CarPreview::Warning.visible = false;
            }
            else if (ROOT.paint_category == PAINT_CATEGORY::WHEEL)
            {
                self.preview_cp.setTarmacTiresWithTrunk();
                var car_label = cp.getCarLabel();
                var is_rm_car = car_label.endWith("_rm");
                var is_color_car = car_label.endWith("_color") && car_label != "m4_14_sp_color";

                if (car_label == "srt_st_vision_gt_35")
                    is_color_car = true;

                var has_custom_wheel = ROOT::hasCustomWheel(cp.getCarCode());
                var can_paint_wheel = has_custom_wheel;
                if (is_rm_car || is_color_car)
                    can_paint_wheel = true;

                CarPreview::CannotPaint::HBox::Label.text = manager.translate("GTAuto", "ThisCarCannotPaintWheel");
                CarPreview::CannotPaint.visible = !can_paint_wheel;

                var installed_custom_wheel = self.preview_cp.wheel > 0;
                if (is_rm_car || is_color_car)
                    installed_custom_wheel = true;

                CarPreview::Warning::HBox::Label.text = manager.translate("GTAuto", "PleaseInstallCustomWheel");
                CarPreview::Warning.visible = can_paint_wheel && !installed_custom_wheel;
                self.can_all_paint = can_paint_wheel && installed_custom_wheel;
            }
            else if (ROOT.paint_category == PAINT_CATEGORY::BRAKE_CALIPER)
            {
                var can_paint_caliper = SPECDB.executeQuery1R1C("SELECT CanCaliperPaint FROM GENERIC_CAR WHERE ID=?", [cp.getCarCode()]);
                CarPreview::CannotPaint::HBox::Label.text = manager.translate("GTAuto", "ThisCarCannotPaintCaliper");
                CarPreview::CannotPaint.visible = !can_paint_caliper;

                var installed_brake_kit = cp.getParts(gtengine::CarPartsType::BRAKE) == gtengine::PARTS_BRAKE::_4PISTON;
                CarPreview::Warning::HBox::Label.text = manager.translate("GTAuto", "PleaseInstallRacingBrakeKit");
                CarPreview::Warning.visible = can_paint_caliper && !installed_brake_kit;
                self.can_all_paint = can_paint_caliper && installed_brake_kit;
            }
            else if (ROOT.paint_category == PAINT_CATEGORY::CUSTOM_WING)
            {
                var current_customwing_index = ROOT.riding_car.wingFlapType;
                var can_paint_custom_wing = cp.isExistParts(gtengine::CarPartsType::WING, gtengine::PARTS_WING::CUSTOM);

                CarPreview::CannotPaint::HBox::Label.text = manager.translate("GTAuto", "ThisCarCannotPaintCustomWing");
                CarPreview::CannotPaint.visible = !can_paint_custom_wing;

                var installed_custom_wing = cp.getParts(gtengine::CarPartsType::WING) == gtengine::PARTS_WING::CUSTOM;
                if (cp.wingStayType >= 1 && cp.wingStayType <= 5)
                    installed_custom_wing = false;

                CarPreview::Warning::HBox::Label.text = manager.translate("GTAuto", "PleaseInstallCustomWing");
                CarPreview::Warning.visible = can_paint_custom_wing && !installed_custom_wing;
                self.can_all_paint = can_paint_custom_wing && installed_custom_wing;
            }

            CarPreview::SceneFace.initialize(context);
            CarPreview::SceneFace.loadCar(context, self.preview_cp);
            self.camera_point = 0;
            var sbox = self.SBox;
            sbox.Name.text = "";
            sbox.CrPrice::Price.text = "";
            sbox.Buy.insensitive = true;
            CarPreview::Footer::Preview::MoveY.backward();
            CarPreview::Footer::Preview::MoveY.start();
        }

        method startPreview(info, item_w, wages)
        {
            if (!self.can_all_paint)
                return false;

            self.info = info;
            self.is_preview = true;
            self.item_w = item_w;
            self.wages = wages;

            var sbox = self.SBox;
            sbox.Name.text = item_w.Name.text;
            sbox.CrPrice::Price.text = pdiext::MMisc::GetMoneyString(wages);

            var is_painting = info.paint_id == ROOT.current_paint_id;
            sbox.OwnFlag.visible = is_painting;
            sbox.Buy.insensitive = is_painting;

            CarPreview::SceneFace.resetCommandQueue();

            if (ROOT.paint_category == PAINT_CATEGORY::BODY)
            {
                CarPreview::SceneFace.execCommand("swapCarExtraColor %{info.paint_id} -1 -1 -1 car0");
            }
            else if (ROOT.paint_category == PAINT_CATEGORY::WHEEL)
            {
                CarPreview::SceneFace.execCommand("swapCarWheelExtraColor %{info.paint_id} -1 -1 -1 car0");
            }
            else if (ROOT.paint_category == PAINT_CATEGORY::BRAKE_CALIPER)
            {
                CarPreview::SceneFace.execCommand("swapCarBrakeCaliperExtraColor %{info.paint_id} -1 -1 -1 car0");
            }
            else if (ROOT.paint_category == PAINT_CATEGORY::CUSTOM_WING)
            {
                CarPreview::SceneFace.execCommand("swapCarWingExtraColor %{info.paint_id} -1 -1 -1 car0");
            }

            CarPreview::Footer::Preview::MoveY.forward();
            CarPreview::Footer::Preview::MoveY.start();

            self.insensitive = false;

            return true;
        }

        method endPreview()
        {
            if (!self.is_preview)
                return false;

            if (ROOT.paint_category == PAINT_CATEGORY::BODY)
            {
                var paint_id = self.preview_cp.getPaintColor(0);
                CarPreview::SceneFace.execCommand("swapCarExtraColor %{paint_id} -1 -1 -1 car0");
            }
            else if (ROOT.paint_category == PAINT_CATEGORY::WHEEL)
            {
                var paint_id = self.preview_cp.getWheelPaintColor(0);
                CarPreview::SceneFace.execCommand("swapCarWheelExtraColor %{paint_id} -1 -1 -1 car0");
            }
            else if (ROOT.paint_category == PAINT_CATEGORY::BRAKE_CALIPER)
            {
                var paint_id = self.preview_cp.getBrakeCaliperPaintColor(0);
                CarPreview::SceneFace.execCommand("swapCarBrakeCaliperExtraColor %{paint_id} -1 -1 -1 car0");
            }
            else if (ROOT.paint_category == PAINT_CATEGORY::CUSTOM_WING)
            {
                var paint_id = self.preview_cp.getWingPaintColor(0);
                CarPreview::SceneFace.execCommand("swapCarWingExtraColor %{paint_id} -1 -1 -1 car0");
            }

            var sbox = self.SBox;
            sbox.Name.text = "";
            sbox.CrPrice::Price.text = "";
            sbox.Buy.insensitive = true;
        
            CarPreview::Footer::Preview::MoveY.backward();
            CarPreview::Footer::Preview::MoveY.start();

            self.is_preview = false;
            self.info = nil;
            self.item_w = nil;
            self.wages = nil;
            self.insensitive = true;
            return true;
        }

        method resetCamera()
        {
            self.SceneFace.resetCommandQueue();
            SceneFaceUtil::loadScene(CarPreview::SceneFace, sCameraScripts[self.camera_point]);
        }

        method swapCamera_R1()
        {
            self.camera_point++;

            if (self.camera_point >= sCameraScripts.size)
                self.camera_point = 0;

            CarPreview::SceneFace.resetCommandQueue();
            SceneFaceUtil::loadScene(CarPreview::SceneFace, sCameraScripts[self.camera_point]);
            return true;
        }

        method swapCamera_L1()
        {
            self.camera_point--;

            if (self.camera_point < 0)
                self.camera_point = sCameraScripts.size - 1;

            CarPreview::SceneFace.resetCommandQueue();
            SceneFaceUtil::loadScene(CarPreview::SceneFace, sCameraScripts[self.camera_point]);
            return true;
        }

        method onActivate(context, event)
        {
            if (event.widget.name == "Buy")
            {
                if (!self.can_all_paint)
                {
                    sound.play("disable");
                }

                sound.play("ok");

                var res = QUERY(context, "GTAuto", "Query_PaintColor");
                if (!res)
                    return EVENTRESULT_FILTER;

                if (!main::GAME_STATUS.user_profile.payTuningCost(self.wages))
                {
                    sound.play("disable");
                    ERROR(context, "CommonGTMode", "Message_EnoughMoney");
                    return EVENTRESULT_FILTER;
                }

                
                Grim2Util::PUTLOG::CREDIT::withdraw("paint", self.wages, ROOT.paint_category, info.paint_id);
                
                CursorProject::StartMenuRoot::StartMenu.reflectCurrentStatus(context);
                ROOT.riding_car.setTarmacTiresWithTrunk();

                if (ROOT.paint_category == PAINT_CATEGORY::BODY)
                {
                    GTAutoUtil::applyCarWashAndRepair(ROOT.riding_car);
                    ROOT.riding_car.setPaintColor(0, info.paint_id);
                }
                else if (ROOT.paint_category == PAINT_CATEGORY::WHEEL)
                {
                    GTAutoUtil::applyCarWash(ROOT.riding_car);
                    ROOT.riding_car.setWheelPaintColor(0, info.paint_id);
                }
                else if (ROOT.paint_category == PAINT_CATEGORY::BRAKE_CALIPER)
                {
                    GTAutoUtil::applyCarWash(ROOT.riding_car);
                    ROOT.riding_car.setBrakeCaliperPaintColor(0, info.paint_id);
                }
                else if (ROOT.paint_category == PAINT_CATEGORY::CUSTOM_WING)
                {
                    GTAutoUtil::applyCarWash(ROOT.riding_car);
                    ROOT.riding_car.setWingPaintColor(0, info.paint_id);
                }
                
                GAME_STATUS.user_profile.garage.updateCar(ROOT.riding_car);
                ROOT.setCurrentRidingCar(ROOT.paint_category, GAME_STATUS.user_profile.garage.getRidingCar());
                self.preview_cp.deepCopy(ROOT.riding_car);

                var need_capture = true;

                PitWorkRoot.openModal(context, GAME_STATUS.user_profile.garage.getRidingGarageId(), need_capture);
                for (var i = 0; i < GTAutoMenu::ListWindow::clip::ListBox.getItemCount(); i++)
                {
                    var w = GTAutoMenu::ListWindow::clip::ListBox.getItemWidget(i);
                    if (w != nil)
                        w.OwnFlag.visible = false;
                }

                self.item_w.OwnFlag.visible = true;
                self.SBox::OwnFlag.visible = true;
                self.SBox::Buy.insensitive = true;

                GTAutoMenu::ListWindow::clip::ListBox.reviewPaints_PaintedCar(context);
            }

            return EVENTRESULT_FILTER;
        }

        module SceneFace
        {
            attribute current_cp;
            attribute thread;
            attribute finalized = false;

            method initialize(context)
            {
                GTAutoMenu::ListWindow::CarView::SceneCover::Fade.reset();

                self.finalized = false;
                self.visible = false;
            }

            method finalize(context)
            {
                self.clearCar(context);
                self.visible = false;

                ORG.setEnableStereoRendering(false);

                self.finalized = true;
            }
    
            method clearCar(context)
            {
                GTAutoMenu::ListWindow::CarView::SceneCover::Fade.reset();

                if (self.thread != nil)
                {
                    self.thread.terminate();
                    self.thread = nil;
                }
            
                if (self.current_cp != nil)
                {
                    self.execCommandImmidiate("clearEntity car0");
                    self.current_cp = nil;
                }
            }

            method loadCar(context, cp)
            {
                self.clearCar(context);
                self.setDefaultCarParameter(cp, 0);
                self.current_cp = cp;

                SceneFaceUtil::loadScene(self, "GTAUTO_Parts_Paint");
                self.saveCommandQueue();

                self.thread = Thread(function(context) 
                {
                    for (;;)
                    {
                        if (self.finalized)
                            return;
                
                        if (self.current_cp == nil)
                            return;

                        if (!self.isUnderSetup())
                        {
                            GTAutoMenu::ListWindow::CarView::SceneCover::Fade.start();
                            return;
                        }

                        Thread::Sleep(0.1);
                    }
                }, context);
            
                self.thread.start();
                ORG.setEnableStereoRendering(true);
                self.visible = true;
            }
        }
    }

    module CarPreview
    {
        attribute full_view = false;
        attribute focus_widget;

        method switchView(context)
        {
            if (!self.full_view)
            {
                self.ColorFace::FadeOut.reset();
                self.ColorFace.visible = true;

                context.sync();

                context.cursor_visible = false;

                self.focus_widget = ROOT.getFocusWidget();
                self.can_focus = true;

                ROOT.setFocus(self);

                self.minimum_width = 1920;
                self.minimum_height = 1080;

                GTAutoMenu.visible = false;

                CursorProject::StartMenuRoot::StartMenu.hide();

                self.Footer::ReducedScreenHelp.visible = false;
                self.Footer::FullScreenHelp.visible = true;
                self.full_view = true;

                SceneFaceUtil::loadScene(CarPreview::SceneFace, "GTAUTO_Parts_Paint_fullscreen");
                context.sync();

                self.ColorFace::FadeOut.start();
            }
            else
            {
                self.ColorFace::FadeOut.reset();
                self.ColorFace.visible = true;

                context.sync();

                GTAutoMenu.visible = true;

                CursorProject::StartMenuRoot::StartMenu.appear();

                self.minimum_width = 1440;
                self.minimum_height = 560;

                self.Footer::FullScreenHelp.visible = false;
                self.Footer::ReducedScreenHelp.visible = true;

                ROOT.setFocus(self.focus_widget);
                context.cursor_visible = true;

                self.can_focus = false;
                self.focus_widget = nil;
                self.full_view = false;
                self.SceneFace.setEntityRotateVelocityY("CAR", "car0", 0);

                GTAutoMenu::ListWindow::CarView.resetCamera();
                context.sync();

                self.ColorFace::FadeOut.start();
            }
        }

        method onInitialize(context)
        {
            self.ColorFace.visible = false;
            self.ColorFace::FadeOut.reset();

            self.Footer::FullScreenHelp.set(context, [
                ["L1", manager.translate("GTAuto", "Rotate_Left")],
                ["R1", manager.translate("GTAuto", "Rotate_Right")],
                ["Close"]
            ]);

            self.Footer::FullScreenHelp.visible = false;
            self.Footer::ReducedScreenHelp.visible = true;
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            self.switchView(context);

            return EVENTRESULT_FILTER;
        }

        method onKeyPress(context, event)
        {
            switch (event.keysym)
            {
                case CELL_PAD_CTRL_L1:
                    sound.play("cursor");

                    self.SceneFace.setEntityRotateVelocityY("CAR", "car0", 60, 90);
                    break;

                case CELL_PAD_CTRL_R1:
                    sound.play("cursor"); 

                    self.SceneFace.setEntityRotateVelocityY("CAR", "car0", -60, 90);
                    break;
            }

            return EVENTRESULT_CONTINUE;
        }

        method onKeyRelease(context, event)
        {
            switch (event.keysym)
            {
                case CELL_PAD_CTRL_L1:
                case CELL_PAD_CTRL_R1:
                    self.SceneFace.setEntityRotateVelocityY("CAR", "car0", 0);
                    break;
            }

            return EVENTRESULT_CONTINUE;
        }
    }

    module CarPreview::SceneFace
    {
        attribute current_cp;
        attribute thread;
        attribute finalized = false;

        method initialize(context)
        {
            CarPreview::SceneCover::Fade.reset();

            self.finalized = false;
            self.visible = false;
        }

        method finalize(context)
        {
            self.clearCar(context);
            self.visible = false;

            ORG.setEnableStereoRendering(false);
            self.finalized = true;
        }

        method clearCar(context)
        {
            CarPreview::SceneCover::Fade.reset();

            if (self.thread != nil)
            {
                self.thread.terminate();
                self.thread = nil;
            }
        
            if (self.current_cp != nil)
            {
                self.execCommandImmidiate("clearEntity car0");
                self.current_cp = nil;
            }
        }

        method loadCar(context, cp)
        {
            self.clearCar(context);
            self.setDefaultCarParameter(cp, 0);
            self.current_cp = cp;

            SceneFaceUtil::loadScene(self, "GTAUTO_Parts_Paint");
            self.saveCommandQueue();

            self.thread = Thread(function(context) 
            {
                for (;;)
                {
                    if (self.finalized)
                        return;
                
                    if (self.current_cp == nil)
                        return;

                    if (!self.isUnderSetup())
                    {
                        CarPreview::SceneCover::Fade.start();
                        return;
                    }

                    Thread::Sleep(0.1);
                }
            }, context);
        
            self.thread.start();
            ORG.setEnableStereoRendering(true);
            self.visible = true;
        }
    }

    module hidden::CategoryItem
    {
        method onActivate(context, event)
        {
            if (self == GTAutoMenu.active_w)
                return EVENTRESULT_FILTER;

            sound.play("ok");

            GTAutoMenu::ListWindow::CarView.endPreview();

            GTAutoMenu.setActive(context, event.widget);

            return EVENTRESULT_FILTER;
        }

        method onKeyPress(context, event)
        {
            if (event.keysym == CELL_PAD_CTRL_L3_RIGHT)
            {
                sound.play("cursor");
                GTAutoMenu::ListWindow::clip::ListBox.inFocus(context);

                return EVENTRESULT_FILTER;
            }

            return EVENTRESULT_CONTINUE;
        }
    }

    module hidden::ListItem
    {
        attribute color_type;
        attribute paint_info;
        attribute initialized = false;
        attribute invalid = false;
        attribute disable = false;

        method onInitialize(context)
        {
            self.Name.text = "";
            self.CrPrice::Price.text = "--";
            self.Checkbox::Check.active = false;
            self.OwnFlag.visible = false;
            self.Opacity.reset();
            self.setInvalid(false);
        }

        method setInvalid(invalid)
        {
            self.invalid = invalid;
            self.active2 = invalid;
        }

        method initialize(context, color_type, paint_info)
        {
            self.color_type = color_type;
            self.paint_info = paint_info;
            self.Name.text = paint_info.name;
            self.Chip::ColorChipFace.setPaintColorRGB(paint_info.ColorChip, paint_info.ColorChip2);
            self.CrPrice::Price.text = pdiext::MMisc::GetMoneyString(ROOT.getPrice(color_type));
            self.OwnFlag.visible = paint_info.paint_id == ROOT.current_paint_id;
            self.setInvalid(paint_info.invalid);
            self.Opacity.start();
            self.initialized = true;
        }

        method on_activate(context)
        {
            if (!self.initialized)
            {
                sound.play("disable");
                return false;
            }

            if (self.color_type == nil || self.paint_info == nil)
            {
                sound.play("disable");
                return false;
            }

            if (GTAutoMenu::ListWindow::CarView.startPreview(self.paint_info, self, ROOT.getPrice(self.color_type)))
                sound.play("ok");
            else
                sound.play("disable");

            return true;
        }

        method set_active(active)
        {
            if (GTAutoMenu::ListWindow::CarView.can_all_paint)
                self.Checkbox::Check.active = active;
        }
    }

    module hidden::ListItem2
    {
        attribute color_type;
        attribute paint_info;
        attribute initialized = false;
        attribute invalid = false;
        attribute disable = false;

        method onInitialize(context)
        {
            self.Category.text = "";
            self.Name.text = "";
            self.CrPrice::Price.text = "--";
            self.Checkbox::Check.active = false;
            self.OwnFlag.visible = false;
            self.Opacity.reset();
            self.setInvalid(false);
            self.setDisable(false);
            self.setNoPainting(false);
        }

        method setInvalid(invalid)
        {
            self.invalid = invalid;
            self.active3 = invalid;
        }

        method setDisable(disable)
        {
            self.disable = disable;
            self.Disable.visible = disable;
        }

        method setNoPainting(no_painting)
        {
            self.active2 = no_painting;
        }

        method initialize(context, paint_category, paint_id)
        {
            switch (paint_category)
            {
                case PAINT_CATEGORY::BODY:
                    Category.text = manager.translate("GTAuto", "PaintingColor_Body");
                    break;

                case PAINT_CATEGORY::WHEEL:
                    Category.text = manager.translate("GTAuto", "PaintingColor_Wheel");
                    break;

                case PAINT_CATEGORY::BRAKE_CALIPER:
                    Category.text = manager.translate("GTAuto", "PaintingColor_BrakeCaliper");
                    break;

                case PAINT_CATEGORY::CUSTOM_WING:
                    Category.text = manager.translate("GTAuto", "PaintingColor_CustomWing");
                    break;
            }

            var color_type = SPECDB.executeQuery1R1C("SELECT Type FROM PAINT_COLOR_INFO WHERE ID=?", [paint_id]);
            if (paint_category == PAINT_CATEGORY::BODY)
            {
                var is_aveilable_color_type = color_type != 99;
                if (!is_aveilable_color_type)
                {
                    self.Name.text = SpecDatabaseUtil::getCarColorName(ROOT.riding_car);
                    self.Chip::ColorChipFace.setCarParameter(ROOT.riding_car);
                    self.setDisable(true);
                    self.Opacity.start();
                    self.initialized = true;
                    return;
                }
            }
            else if (paint_id == nil || paint_id < 0)
            {
                self.setNoPainting(true);
                self.Opacity.start();
                self.initialized = true;
                return;
            }

            var paint_info = GAME_STATUS.user_profile.item.paint.getItemSimple(paint_id);
            if (paint_info == nil)
            {
                self.setDisable(true);
                self.Opacity.start();
                self.initialized = true;
                return;
            }

            self.color_type = color_type;
            self.paint_info = paint_info;
            self.Name.text = paint_info.name;
            self.Chip::ColorChipFace.setPaintColorRGB(paint_info.ColorChip, paint_info.ColorChip2);
            self.CrPrice::Price.text = pdiext::MMisc::GetMoneyString(ROOT.getPrice(color_type));
            self.OwnFlag.visible = paint_info.paint_id == ROOT.current_paint_id;
            self.setInvalid(paint_info.invalid);
            self.Opacity.start();
            self.initialized = true;
        }

        method on_activate(context)
        {
            if (!self.initialized)
            {
                sound.play("disable");
                return false;
            }

            if (self.color_type == nil || self.paint_info == nil)
            {
                sound.play("disable");
                return false;
            }

            if (GTAutoMenu::ListWindow::CarView.startPreview(self.paint_info, self, ROOT.getPrice(self.color_type)))
                sound.play("ok");
            else
                sound.play("disable");

            return true;
        }

        method set_active(active)
        {
            if (GTAutoMenu::ListWindow::CarView.can_all_paint)
                self.Checkbox::Check.active = active;
        }
    }
}