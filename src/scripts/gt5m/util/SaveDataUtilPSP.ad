//---------------------------------------------------------------------------------------
// SaveDataUtilPSP.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------


import main::DialogUtil;
import __projects__::CursorProject;

module SaveDataUtilPSP
{
    module MODE
    {
        static FIXED = 0;
        static AUTO = 1;
        static SILENT_AUTO = 2;
        static LIST = 3;
    }

    module RETCODE
    {
        static SUCCESS = 0;
        static CANCEL = 1;
        static ABORT = 2;
        static NO_MS = 3;
        static EJECT_MS = 4;
        static NOSPACE = 5;
        static PROTECTED = 6;
        static ACCESS_ERROR = 7;
        static DATA_BROKEN = 8;
        static NO_DATA = 9;
        static PARAM_ERROR = 10;
        static INTERNAL = 11;
        static NO_FILE = 12;
        static FATAL_ERROR = 13;
        static BIND_ERROR = 14;
    }

    class DataForSave
    {
        attribute firstCB = nil;
        attribute firstCBArg = nil;

        attribute mode = nil;
        attribute compress = nil;

        attribute buf = nil;
        attribute titleId = nil;
        attribute userId = nil;
        attribute fileName = nil;
        attribute title = nil;
        attribute savedataTitle = nil;
        attribute description = nil;
        attribute parentalLevel = nil;
        attribute userIdList = nil;
        attribute iconPngName = nil;
        attribute iconBuf = nil;
        attribute bgPngName = nil;
    }

    class DataForLoad
    {

        attribute mode = nil;
        attribute compress = nil;

        attribute buf = nil;
        attribute titleId = nil;
        attribute userId = nil;
        attribute fileName = nil;
        attribute bindCheck = nil;
        attribute userIdList = nil;
    }

    function InstallDataForSave()
    {
        var data = DataForSave();

        data.mode = MODE::SILENT_AUTO;
        data.compress = false;
        data.titleId = main::pdiext::MProductInformation::GetGameProductNumberShort();
        data.userId = main::pdiext::MProductInformation::GetProductInformationString("SaveDataUserIdForGameInstall");
        data.fileName = "CONTENTS.INF";
        data.parentalLevel = main::pdiext::MProductInformation::GetParentalLevel();
        data.buf = main::pdistd::MDynRes::importBlob("GAMEINST.SAVEDATA", "GAMEINST.SAVESIZE");

        data.iconPngName = "/icon/gt5m/psp_game_icon.png";
        data.bgPngName = "/icon/gt5m/psp_game_bg.png";
        return data;
    }

    function GameDataForLoad()
    {
        var data = DataForLoad();

        data.mode = MODE::SILENT_AUTO;
        data.compress = true;
        data.titleId = main::pdiext::MProductInformation::GetGameProductNumberShort();
        data.userId = "-GAMEDAT";
        data.fileName = "GAME.DAT";
        data.bindCheck = true;
        data.buf = ByteData();
        data.buf.size = 0x10000;
        return data;
    }

    function GameDataForSave()
    {
        var data = DataForSave();

        data.mode = MODE::AUTO;
        data.compress = false;
        data.titleId = main::pdiext::MProductInformation::GetGameProductNumberShort();
        data.userId = "-GAMEDAT";
        data.fileName = "GAME.DAT";

        data.parentalLevel = main::pdiext::MProductInformation::GetParentalLevel();

        data.iconPngName = "/icon/gt5m/psp_game_icon.png";
        data.bgPngName = "/icon/gt5m/psp_game_bg.png";
        return data;
    }

    function GameDataForSaveSilent()
    {
        var data = GameDataForSave();
        data.mode = MODE::SILENT_AUTO;
        return data;
    }

    function GhostDataForLoad(suffix)
    {
        var data = DataForLoad();
        data.mode = MODE::LIST;
        data.compress = true;
        data.titleId = main::pdiext::MProductInformation::GetGameProductNumberShort();
        data.userId = "RPLY-B%s00".format(suffix);
        data.fileName = "REPLAY.DAT";
        data.bindCheck = false;
        var data_num = 10;

        var userIdList = Array(data_num);
        for (var i = 0; i < data_num; ++i)
            userIdList[i] = "RPLY-B%s%02d".format(suffix, i);
        data.userIdList = userIdList;

        data.buf = ByteData();
        data.buf.size = 24 * 0x400;
        return data;
    }

    function GhostDataForSave(suffix)
    {
        var data = DataForSave();
        data.mode = MODE::LIST;
        data.compress = true;
        data.titleId = main::pdiext::MProductInformation::GetGameProductNumberShort();
        data.userId = "RPLY-B%s00".format(suffix);
        data.fileName = "REPLAY.DAT";

        data.parentalLevel = main::pdiext::MProductInformation::GetParentalLevel();
        var data_num = 10;

        var userIdList = Array(data_num);
        for (var i = 0; i < data_num; ++i)
            userIdList[i] = "RPLY-B%s%02d".format(suffix, i);
        data.userIdList = userIdList;

        data.iconPngName = "/icon/gt5m/replay_sr_icon.png";
        data.bgPngName = "/icon/gt5m/replay_sr_bg.png";
        return data;
    }

    function ReplayDataForLoad(suffix)
    {
        var data = DataForLoad();
        data.mode = MODE::LIST;
        data.compress = true;
        data.titleId = main::pdiext::MProductInformation::GetGameProductNumberShort();
        data.userId = "RPLY-F%s00".format(suffix);
        data.fileName = "REPLAY.DAT";
        data.bindCheck = false;

        var userIdList = Array(2 * 10);
        for (var i = 0; i < 10; ++i)
            userIdList[i] = "RPLY-F%s%02d".format(suffix, i);

        for (var i = 0; i < 10; ++i)
            userIdList[i + 10] = "RPLY-B%s%02d".format(suffix, i);
        
        data.userIdList = userIdList;
        data.buf = ByteData();
        data.buf.size = 0x200 * 0x400;
        return data;
    }

    function ReplayDataForSave(suffix)
    {
        var data = DataForSave();

        data.mode = MODE::LIST;
        data.compress = true;
        data.titleId = main::pdiext::MProductInformation::GetGameProductNumberShort();
        data.userId = "RPLY-F%s00".format(suffix);
        data.fileName = "REPLAY.DAT";

        data.parentalLevel = main::pdiext::MProductInformation::GetParentalLevel();
        var data_num = 10;

        var userIdList = Array(data_num);
        for (var i = 0; i < data_num; ++i)
            userIdList[i] = "RPLY-F%s%02d".format(suffix, i);
        data.userIdList = userIdList;

        data.iconPngName = "/icon/gt5m/replay_sr_icon.png";
        data.bgPngName = "/icon/gt5m/replay_sr_bg.png";
        return data;
    }

    function LicenseReplayDataForLoad(license_id)
    {
        var data = DataForLoad();
        data.mode = MODE::LIST;
        data.compress = true;
        data.titleId = main::pdiext::MProductInformation::GetGameProductNumberShort();
        data.userId = "LCNS%04d_00".format(license_id);
        data.fileName = "REPLAY.DAT";
        data.bindCheck = false;

        var userIdList = Array(10);
        for (var i = 0; i < 10; ++i)
            userIdList[i] = "LCNS%04d_%02d".format(license_id, i);
        data.userIdList = userIdList;

        data.buf = ByteData();
        data.buf.size = 0x200 * 0x400;
        return data;
    }

    function LicenseReplayDataForSave(license_id)
    {
        var data = DataForSave();
        data.mode = MODE::LIST;
        data.compress = true;
        data.titleId = main::pdiext::MProductInformation::GetGameProductNumberShort();
        data.userId = "LCNS%04d_00".format(license_id);
        data.fileName = "REPLAY.DAT";

        data.parentalLevel = main::pdiext::MProductInformation::GetParentalLevel();
        var data_num = 10;

        var userIdList = Array(data_num);
        for (var i = 0; i < data_num; ++i)
            userIdList[i] = "LCNS%04d_%02d".format(license_id, i);
        data.userIdList = userIdList;

        data.iconPngName = "/icon/gt5m/replay_sr_icon.png";
        data.bgPngName = "/icon/gt5m/replay_sr_bg.png";
        return data;
    }

    function _save(context, root, data)
    {
        if (data.firstCB != nil)
        {
            var success = data.firstCB(context, data);
            if (!success)
                return false;
        }


        var cooked_buf = data.buf;

        if (data.compress)
            cooked_buf = main::pdistd::Deflate(cooked_buf);
        
        cooked_buf = main::pdistd::MCipher::encrypt(cooked_buf);

        var icon_png = data.iconBuf;
        if (icon_png == nil)
            icon_png = context.getUpdateContext().loadFile(data.iconPngName);
        
        var bg_png = context.getUpdateContext().loadFile(data.bgPngName);

        var sdu = nil;
        var success = false;
        var loop = true;
        do
        {
            sdu = nil;
            sdu = main::pdiext::MSaveDataUtilPSP();
            var result = nil;

            switch (data.mode)
            {
                case MODE::FIXED:

                    result = sdu.fixedSave(data.titleId,
                                           data.userId,
                                           data.fileName,
                                           data.title,
                                           data.savedataTitle,
                                           data.description,
                                           data.parentalLevel,
                                           cooked_buf,
                                           nil,
                                           icon_png,
                                           bg_png);
                    break;


                case MODE::AUTO:

                    result = sdu.autoSave(data.titleId,
                                          data.userId,
                                          data.fileName,
                                          data.title,
                                          data.savedataTitle,
                                          data.description,
                                          data.parentalLevel,
                                          cooked_buf,
                                          nil,
                                          icon_png,
                                          bg_png);
                    break;


                case MODE::LIST:

                    result = sdu.listSave(data.titleId,
                                          data.userId,
                                          data.fileName,
                                          data.title,
                                          data.savedataTitle,
                                          data.description,
                                          data.parentalLevel,
                                          cooked_buf,
                                          data.userIdList,
                                          icon_png,
                                          bg_png);


                default:
                    break;
            }

            switch (result)
            {
                case RETCODE::SUCCESS:
                    success = true;
                    loop = false;
                    break;

                case RETCODE::CANCEL:
                    loop = false;
                    break;

                case RETCODE::ABORT:
                    loop = false;
                    break;

                case RETCODE::NO_MS:
                    if (data.mode == MODE::AUTO)
                    {
                        loop = false;
                        DialogUtil::openConfirmDialog(context, 2,
                                                      context.translate(root,
                                                                        "SaveDataPSP",
                                                                        "ERROR_SAVE_NO_MS"));
                        var res = DialogUtil::openConfirmDialog(context, 1,
                                                                context.translate(root,
                                                                                  "SaveDataPSP",
                                                                                  "DO_YOU_RETRY_TO_SAVE"));
                        if (!res)
                        {
                            loop = false;
                        }
                        else
                        {
                            loop = true;
                        }
                    }
                    else
                    {
                        loop = false;
                    }
                    break;

                case RETCODE::NOSPACE:
                    if (data.mode == MODE::AUTO)
                    {

                        var sdu2 = main::pdiext::MSaveDataUtilPSP();

                        var need_size_text = sdu2.getNeedSizeKB(data.titleId,
                                                                data.userId,
                                                                data.fileName,
                                                                data.title,
                                                                data.savedataTitle,
                                                                data.description,
                                                                data.parentalLevel,
                                                                cooked_buf,
                                                                nil,
                                                                icon_png,
                                                                bg_png);

                        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR,
                                                      context.translate(root,
                                                                        "SaveDataPSP",
                                                                        "ERROR_SAVE_NO_SPACE").build(need_size_text));
                    }
                    else
                    {
                        context.event_mask |= 1;
                    }


                    var res = DialogUtil::openConfirmDialog(context, DialogUtil::QUERY,
                                                            context.translate(root,
                                                                              "SaveDataPSP",
                                                                              "DO_YOU_DELETE_OTHER_FILES"));
                    if (!res)
                    {

                        var abort_to_save = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO,
                                                                          context.translate(root,
                                                                                            "SaveDataPSP",
                                                                                            "DO_YOU_ABORT_TO_SAVE"));
                        if (!abort_to_save)
                            res = true;
                    }
                    if (res)
                    {

                        var prev_transition = context.transition;

                        context.root_transition = main::menu::MRootTransition(CursorProject::ColorTransition);
                        context.root_transition.pageOut(context);
                        context.root_transition.syncOut(context);
                        res = sdu.listAllDelete();

                        context.root_transition.pageIn(context);
                        context.transition = prev_transition;


                        if (!res)
                            loop = false;
                    }
                    else
                        loop = false;
                    break;

                case RETCODE::PROTECTED:

                    if (data.mode == MODE::AUTO)
                    {
                        loop = false;
                        DialogUtil::openConfirmDialog(context, 2,
                                                      context.translate(root,
                                                                        "SaveDataPSP",
                                                                        "ERROR_SAVE_WRITE_PROTECT"));
                        var res = DialogUtil::openConfirmDialog(context, 1,
                                                                context.translate(root,
                                                                                  "SaveDataPSP",
                                                                                  "DO_YOU_RETRY_TO_SAVE"));
                        if (!res)
                        {
                            loop = false;
                        }
                        else
                        {
                            loop = true;
                        }
                    }
                    else
                    {

                        loop = false;
                    }
                    break;

                default:
                    if (data.mode != MODE::AUTO)
                    {
                        context.event_mask |= 1;
                    }

                    loop = false;
                    DialogUtil::openConfirmDialog(context, 2,
                                                  context.translate(root,
                                                                    "SaveDataPSP",
                                                                    "ERROR_SAVE_OTHER"));
                    var res = DialogUtil::openConfirmDialog(context, 1,
                                                            context.translate(root,
                                                                              "SaveDataPSP",
                                                                              "DO_YOU_RETRY_TO_SAVE"));
                    if (!res)
                    {
                        DialogUtil::openConfirmDialog(context, 0,
                                                      context.translate(root,
                                                                        "SaveDataPSP",
                                                                        "SAVE_NOT_DONE"));
                        loop = false;
                    }
                    else
                    {
                        loop = true;
                    }
                    break;
            }
        }
        while (loop);

        return success;
    }

    function _autoSave(context, args)
    {
        |var root, var data| = args;
        var success = _save(context, root, data);
        return success;
    }

    function save(context, data, root)
    {
        if (root == nil)
            root = context.getRootWindow();
        
        var res = false;

        if (data.mode == MODE::AUTO)
        {
            
            res = DialogUtil::openConfirmExecDialog(context,
                                                    nil,
                                                    context.translate(root, "SaveDataPSP", "NOW_SAVING"),
                                                    context.translate(root, "SaveDataPSP", "SAVE_DONE"),
                                                    context.translate(root, "SaveDataPSP", "SAVE_NOT_DONE"),
                                                    _autoSave,
                                                    [root, data]);
        }
        else
        {
            if (data.mode == MODE::SILENT_AUTO)
                data.mode = MODE::AUTO;

            res = _save(context, root, data);
        }

        return res;
    }

    static sLoadResult;

    function _load(context, root, data)
    {
        var sdu = nil;
        var success = false;
        var loop = true;
        do
        {
            sdu = nil;
            sdu = main::pdiext::MSaveDataUtilPSP();
            var result = 0;
            var dataSize = 0;

            switch (data.mode)
            {
                case MODE::FIXED:
                    [result, dataSize] = sdu.fixedLoad(data.titleId,
                                                       data.userId,
                                                       data.fileName,
                                                       data.bindCheck,
                                                       data.buf);
                    break;

                case MODE::AUTO:
                    [result, dataSize] = sdu.autoLoad(data.titleId,
                                                      data.userId,
                                                      data.fileName,
                                                      data.bindCheck,
                                                      data.buf);
                    break;

                case MODE::LIST:
                    [result, dataSize] = sdu.listLoad(data.titleId,
                                                      data.userId,
                                                      data.fileName,
                                                      data.bindCheck,
                                                      data.buf,
                                                      data.userIdList);
                    break;
            }


            switch (result)
            {
                case RETCODE::SUCCESS:
                    data.buf.size = dataSize;
                    data.buf = main::pdistd::MCipher::decrypt(data.buf);


                    if (data.compress)
                        data.buf = main::pdistd::Inflate(data.buf);

                    if (data.buf == nil)
                    {
                        if (data.mode != MODE::AUTO)
                        {
                            context.event_mask |= 1;
                        }

                        DialogUtil::openConfirmDialog(context, 2,
                                                      context.translate(root,
                                                                        "SaveDataPSP",
                                                                        "LOADED_DATA_WAS_WRONG"));
                        DialogUtil::openConfirmDialog(context, 0,
                                                      context.translate(root,
                                                                        "SaveDataPSP",
                                                                        "LOAD_NOT_DONE"));
                        sLoadResult = [nil, true, false, false, false];
                    }
                    else
                    {
                        sLoadResult = [data.buf, false, false, false, false];
                        success = true;
                    }
                    loop = false;
                    break;

                case RETCODE::CANCEL:
                    sLoadResult = [nil, false, false, false, false];
                    loop = false;
                    break;

                case RETCODE::ABORT:
                    sLoadResult = [nil, false, false, false, true];
                    loop = false;
                    break;

                case RETCODE::NO_MS:
                    if (data.mode == MODE::AUTO)
                    {
                        loop = false;
                        DialogUtil::openConfirmDialog(context, 2,
                                                      context.translate(root,
                                                                        "SaveDataPSP",
                                                                        "ERROR_SAVE_NO_MS"));
                        var res = DialogUtil::openConfirmDialog(context, 1,
                                                                context.translate(root,
                                                                                  "SaveDataPSP",
                                                                                  "DO_YOU_RETRY_TO_LOAD"));
                        if (!res)
                        {
                            loop = false;
                        }
                        else
                        {
                            loop = true;
                        }
                    }
                    else
                    {
                        loop = false;
                    }
                    break;

                case RETCODE::ACCESS_ERROR:
                case RETCODE::DATA_BROKEN:
                case RETCODE::PARAM_ERROR:
                case RETCODE::INTERNAL:
                case RETCODE::FATAL_ERROR:
                    sLoadResult = [nil, true, true, false, false];
                    loop = false;
                    break;

                case RETCODE::BIND_ERROR:

                    sLoadResult = [nil, true, false, true, false];
                    loop = false;
                    break;

                case RETCODE::NO_DATA:
                case RETCODE::NO_FILE:
                default:

                    sLoadResult = [nil, true, false, false, false];
                    loop = false;
                    break;
            }
        }
        while (loop);

        return success;
    }


    function _autoLoad(context, args)
    {
        |var root, var data| = args;
        var success = _load(context, root, data);
        return success;
    }

    function load(context, data)
    {
        var root = context.getRootWindow();
        var res = false;

        if (data.mode == MODE::AUTO)
        {
            res = DialogUtil::openConfirmExecDialog(context,
                                                    nil,
                                                    context.translate(root, "SaveDataPSP", "NOW_LOADING"),
                                                    context.translate(root, "SaveDataPSP", "LOAD_DONE"),
                                                    context.translate(root, "SaveDataPSP", "LOAD_NOT_DONE"),
                                                    _autoLoad,
                                                    [root, data]);
        }
        else
        {
            if (data.mode == MODE::SILENT_AUTO)
                data.mode = MODE::AUTO;

            res = _load(context, root, data);
        }

        var result = sLoadResult;
        sLoadResult = nil;

        return result;
    }

    function listDelete(context)
    {
        var sdu = main::pdiext::MSaveDataUtilPSP();
        sdu.listAllDelete();
    }
}