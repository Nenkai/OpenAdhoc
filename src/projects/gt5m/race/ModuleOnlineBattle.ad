//---------------------------------------------------------------------------------------
// ModuleOnlineBattle.ad (standalone script)
// Seemingly unused in favour of ModuleAdhocBattle, possibly GT5 or GT5P leftovers?
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

#ifndef PROJECT
    #define PROJECT RaceProject
#endif

#include "OnlineUtil.ad";

PROJECT.load("NetworkEvent");

function onLoad(update_context)
{
    var render_context = update_context.getRenderContext();
    if (main::GameSequence::getCurrentMode() == main::GameSequence::ONLINE_BATTLE)
    {
        gSequenceCondition.enable_restart = false;

        render_context.startPage(LoadingRoot);
        return;
    }

    gSequenceCondition.enable_restart = false;

    render_context.startPage(SelectNetworkRoot);
}

function onUnload(update_context)
{
    main::RaceOperator.checkOut();
    main::ORG.exitCourse();
    main::RaceOperator.destroyRace();
    main::RaceOperator.clearResource();
    OnlineUtil::endInternetSession();
    main::pdiext::MSystemUtility::disconnectAdHoc();
}

function onRaceRootInitialize(context)
{
    PROJECT::sNetworkDisconnectDialogOpening = false;
    PROJECT::setCurrentRootForNetworkEvent(RaceRoot);
}

function onRaceRootFinalize(context)
{
    PROJECT::setCurrentRootForNetworkEvent(nil);
}

function onGoToNextSequence(context)
{
    main::RaceOperator.checkOut();
    main::ORG.exitCourse();
    main::RaceOperator.destroyRace();
    main::RaceOperator.clearResource();
    OnlineUtil::endInternetSession();

    OnlineBattleRoot.open(context, !main::PDINetwork.isAdHocMatchingHost())
}

function onStartRaceFromPauseMenu(context) 
{
    if (!RaceMenuUtil::activated())
        return EVENTRESULT_FILTER;

    main::ORG.pauseHandleAvailable = false;

    main::sound.play("ok");

    main::ORG.startRaceRequest();

    RaceMenuUtil::closeAction(context);

    main::ORG.pauseRace = false;

    OnboardMeterRoot.appearPanel();

    var root = context.getCurrentPage();
    root.setFocus(nil);

    main::ORG.pauseHandleAvailable = true;

    return EVENTRESULT_FILTER;
}

function onCreatePauseMenu(context, icons)
{
    icons.push(RaceMenuUtil::Icon("START RACE", "icon_Q_restart.png", onStartRaceFromPauseMenu));
}

function onComplete(context, slot_id, result, is_forced, is_target)
{
    if (is_forced)
        return;

    var goalVisible = false;
    if (is_target && main::ORG.getEntryControlType(slot_id) == main::gtengine::ControlType::LOCAL) 
    {
        main::sound.play("ok");
        goalVisible = true;
    }

    RaceRoot::Info::Goal.visible = goalVisible;
    ActorUtil::ResetInterpolators(RaceRoot::Info::Goal::ImageFace, goalVisible);
    ActorUtil::ResetInterpolators(RaceRoot::Info::Goal::ImageFaceEffect, goalVisible);
}

function onExit(context)
{
    if (!RaceMenuUtil::activated())
    {
        main::sound.play("disable");
        return;
    }

    main::sound.play("ok");

    OnboardMeterRoot::RaceDisplayFace.toStop();

    RaceMenuUtil::closeAction(context);
    RaceRoot.quit(context);
}

function goOnlineRace(context)
{
    var cp = main::gtengine::MCarParameter("nsx_r_02");
    cp.target = true;

    var dp = main::gtengine::MCarDriverParameter();
    dp.setDefault();
    dp.setPlayer(0);

    if (main::RaceOperator.makeReservation(main::pdiext::MSystemUtility::getNickname(),
                                           main::pdistd::MLocale::getLanguage(),
                                           // Something commented out here?
                                           //
                                           cp,
                                           true,
                                           dp) < 0)
    {
        return false;
    }



    var done = main::RaceOperator.checkIn();

    {

        while (!main::ORG.hasLoadingCarDone())
        {
            print ".";
            main::pdistd::DelayThread(300000);
        }

        main::ORG.requestLoadingCourse();

        while (!main::ORG.canEnterCourse())
        {
            print ".";
            main::pdistd::DelayThread(300000);
        }
    }

    main::ORG.enterCourse();

    SequenceUtil::startPage(context, OnboardMeterRoot, RaceRoot);

    return true;
}