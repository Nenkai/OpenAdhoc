











#define USED_TABLE_NAME "t_usedcar"

module UsedCarUtil
{
    static TABLE_VERSION = 23;

    class USEDCAR
    {
        attribute usedcar_id;
        attribute car_code;
        attribute color;
        attribute odometer_min;
        attribute odometer_max;
        attribute odds_start;
        attribute odds_end;
        attribute price;
        attribute attr_map;

        method __init__()
        {
            self.usedcar_id = 0;
            self.car_code = "";
            self.color = 0;
            self.odometer_min = 0;
            self.odometer_max = 0;
            self.odds_start = 0;
            self.odds_end = 0;
            self.price = 0;
            self.attr_map = [:];

            foreach (|var a, var v| in USEDCAR)
            {
                if (v.is_attribute)
                    self.attr_map[a.toString()] = v;
            }
        }

        method __get_elem__(i)
        {
            return *(self.*attr_map[i]);
        }

        method __set_elem__(i, val)
        {
            self.*attr_map[i] = val;
        }

        function GetAttributeNames()
        {
            var attr_names = [];
            foreach (|var a, v| in GAMEITEM) // BUG?
            {
                if (a == "attr_map")
                    continue;

                if (v.is_attribute)
                {
                    attr_names.push(a.toString());
                }
            }

            return attr_names;
        }

        method setParam(columns, params)
        {
            for (var i = 0; i < columns.size; i++)
            {
                var column = columns[i];
                self.*attr_map[column] = params[i];
            }
        }
    }

    function initialize()
    {
        !createUsedCareDataTable();

        var count = getNum();
        if (count == 0)
            initUsedCar();
    }

    function createUsedCareDataTable()
    {
        DBUtil::initializeTable(USED_TABLE_NAME, TABLE_VERSION);
        var sql = "CREATE TABLE IF NOT EXISTS t_usedcar ("
                  "usedcar_id INTEGER NOT NULL PRIMARY KEY,"
                  " car_code TEXT NOT NULL,"
                  " color INTEGER NOT NULL,"
                  " odometer_min INTEGER NOT NULL,"
                  " odometer_max INTEGER NOT NULL,"
                  " odds_start INTEGER NOT NULL,"
                  " odds_end INTEGER NOT NULL,"
                  " price INTEGER NOT NULL)";

        var res = SQLITE.execute0(sql);
        return true;
    }

    function getNum()
    {
        var res = SQLITE.executeQuery("SELECT count(*) FROM t_usedcar");
        return res[0][0];
    }

    function getMinMax()
    {
        var res = SQLITE.executeQuery("SELECT MIN(usedcar_id), MAX(usedcar_id) FROM t_usedcar");
        return res[0];
    }

    function initUsedCar()
    {
        var init_insert_list = Array();
        var car_list = getInitUsedCarData();

        foreach (var car_data in car_list)
        {
            var sql = "INSERT INTO t_usedcar(car_code, color, odometer_min, odometer_max, odds_start, odds_end, price) VALUES (?, ?, ?, ?, ?, ?, ?)";
            init_insert_list.push([sql, [car_data[0], car_data[1], car_data[2], car_data[3], car_data[4].toInt(), car_data[5].toInt(), car_data[6].toInt()]])
        }

        var res = SQLITE.executeTransaction(init_insert_list);
        if (res != SQLITE_DONE)
            ;

    }

    function getUsedCarRecord(usedcar_id)
    {
        var res = SQLITE.executeQuery("SELECT * FROM t_usedcar WHERE usedcar_id=" + usedcar_id);
        var used_car = USEDCAR();
        used_car.setParam(["usedcar_id", "car_code", "color", "odometer_min", "odometer_max", "odds_start", "odds_end", "price"],
            [res[0][0], res[0][1], res[0][2], res[0][3], res[0][4], res[0][5], res[0][6], res[0][7]]);
        return used_car;
    }

    function getUsedCarRecordByOdds(odds)
    {
        var res = SQLITE.executeQuery("SELECT * FROM t_usedcar WHERE odds_start <=" + odds + " AND odds_end > " + odds + " order by usedcar_id limit 1");
        var used_car = USEDCAR();
        used_car.setParam(["usedcar_id", "car_code", "color", "odometer_min", "odometer_max", "odds_start", "odds_end", "price"],
            [res[0][0], res[0][1], res[0][2], res[0][3], res[0][4], res[0][5], res[0][6], res[0][7]]);
        return used_car;
    }

    function getUsedCarRecordListByOdds(odds)
    {
        var res = SQLITE.executeQuery("SELECT * FROM t_usedcar WHERE odds_start <=" + odds + " AND odds_end > " + odds + " order by usedcar_id ");
        var usedcar_list = Array();

        for (var i = 0; i < res.size; i++)
        {
            var used_car = USEDCAR();
            used_car.setParam(["usedcar_id", "car_code", "color", "odometer_min", "odometer_max", "odds_start", "odds_end", "price"],
                [res[i][0], res[i][1], res[i][2], res[i][3], res[i][4], res[i][5], res[i][6], res[i][7]]);
            usedcar_list.push(used_car);
        }

        return usedcar_list;
    }

    // Offline
    function addBuyList(seed, min_seed)
    {
        for (var i = 0; i < GLOBAL_STATUS.user_profile.context.used_car_buy_list.size; i++)
        {
            if (GLOBAL_STATUS.user_profile.context.used_car_buy_list[i] == 0)
            {
                GLOBAL_STATUS.user_profile.context.used_car_buy_list[i] = seed;
                return;
            }
        }

        var push_flag = true;
        for (var i = 0; i < GLOBAL_STATUS.user_profile.context.used_car_buy_list.size; i++)
        {
            if (GLOBAL_STATUS.user_profile.context.used_car_buy_list[i] < min_seed)
            {
                GLOBAL_STATUS.user_profile.context.used_car_buy_list[i] = 0;
                if (push_flag)
                {
                    GLOBAL_STATUS.user_profile.context.used_car_buy_list[i] = seed;
                    push_flag = false;
                }
            }
        }
    }

    function checkBuyList(seed)
    {
        foreach (var buy_seed in GLOBAL_STATUS.user_profile.context.used_car_buy_list)
        {
            if (buy_seed == 0)
                continue;

            if (seed == buy_seed)
                return false;
        }

        return true;
    }

    function checkNewFlagList(seed)
    {
        var new_flag = false;
        foreach (var new_seed in GLOBAL_STATUS.user_profile.context.used_car_new_list)
        {
            if (seed == new_seed)
            {
                new_flag = false;
                break;
            }
            
            new_flag = true;
        }

        return new_flag;
    }

    function updateNewFlagList(seed_list)
    {
        for (var i = 0; i < GLOBAL_STATUS.user_profile.context.used_car_new_list.size; i++)
        {
            GLOBAL_STATUS.user_profile.context.used_car_new_list[i] = seed_list[i];
        }
    }

    // Online
    function addBuyListOnline(id)
    {
        for (var i = 0; i < GLOBAL_STATUS.user_profile.context.online_used_car_buy_list.size; i++)
        {
            if (GLOBAL_STATUS.user_profile.context.online_used_car_buy_list[i] == 0)
            {
                GLOBAL_STATUS.user_profile.context.online_used_car_buy_list[i] = id;
                return;
            }
        }
    }

    function checkBuyListOnline(id, version)
    {
        var context_ = GLOBAL_STATUS.user_profile.context;
        if (context_.online_used_car_version < version)
        {
            for (var i = 0; i < context_.online_used_car_buy_list.size; i++)
                context_.online_used_car_buy_list[i] = 0;
            
            context_.online_used_car_version = version;
            return true;
        }

        foreach (var buy_id in context_.online_used_car_buy_list)
        {
            if (buy_id == 0)
                continue;

            if (id == buy_id)
                return false;
        }

        return true;
    }

    function checkNewFlagListOnline(id)
    {
        var new_flag = false;
        foreach (var new_seed in GLOBAL_STATUS.user_profile.context.online_used_car_new_list)
        {
            if (new_seed == id)
            {
                new_flag = false;
                break;
            }
            
            new_flag = true;
        }

        return new_flag;
    }

    function updateNewFlagListOnline(id_list)
    {
        for (var i = 0; i < GLOBAL_STATUS.user_profile.context.online_used_car_new_list.size; i++)
        {
            GLOBAL_STATUS.user_profile.context.online_used_car_new_list[i] = id_list[i];
        }
    }

    // Init
    function getInitUsedCarData()
    {
        var res = main::pdistd::ReadFile("textdata/gt5/usedcar.xml");
        var car_list = Array();

        if (res["result"] != main::pdistd::FileError::OK)
            return;
        else
        {
            var buf = res["buffer"];
            var xml = main::pdistd::MXml();
            xml.parse(buf);
            
            var dom = xml.result;
            var nodelist = dom["UsedCar"];
            if (nodelist == nil)
                return;

            var node = nodelist[0];
            var nodelist = node["car"];
            if (nodelist == nil)
                return;

            for (var i = 0; i < nodelist.size; i++)
            {
                var node = nodelist[i];
                var _car = [];
                var attr_map = node.getAttributeMap();

                _car = [
                    attr_map["code"],
                    attr_map["color"],
                    attr_map["odometer_min"],
                    attr_map["odometer_max"],
                    "0x" + attr_map["odds_start"],
                    "0x" + attr_map["odds_end"],
                    attr_map["price"],
                ];

                car_list.push(_car);
            }
        }

        return car_list;
    }
}