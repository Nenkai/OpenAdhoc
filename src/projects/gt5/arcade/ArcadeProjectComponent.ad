
module ArcadeProjectComponent::Buttons::oval
{
    method onFocusLeave(context)
    {
        var root = context.getRootWindow();
        return EVENTRESULT_FILTER;
    }
    
    method onFocusEnter(context)
    {
        var root = context.getRootWindow();
        return EVENTRESULT_FILTER;
    }
    
    SCALE_WIDGET_SDTV(label, 2.6);
    
    method decide(context)
    {
        var bgf = self.bgf;
        bgf.actor.period = 0.05;
        context.sync(0.5);
        bgf.actor.period = 0.25;
        bgf.actor.out = false;
        bgf.actor.warp();
    }
}


module ArcadeProjectComponent::Buttons::oval::bgf
{
    method __init__()
    {
        self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = 0.25;
        self.actor.repeat = true;
    }
}


module ArcadeProjectComponent::Tooltip::BalloonTip
{
    attribute duration_base;
    attribute current_widget;
    
    method initialize(context)
    {

        self.duration_base = self.Tip.VisibleEffect.getStartDuration(0);
        
        if (self['TIP_01'] == nil)
        {
            var tip01 = self.Tip.doCopy();
            tip01.name = "TIP_01";
            tip01.opacity = 0.0;
            self.appendChild(context, tip01);
        }
        
        if (self['TIP_02'] == nil)
        {
            var tip02 = self.Tip.doCopy();
            tip02.name = "TIP_02";
            tip02.opacity = 0.0;
            self.appendChild(context, tip02);
        }
        
        self.current_widget = self['TIP_01'];
    }
    
    
    
    method onInitialize(context)
    {
        self.Tip.visible = false;
        initialize(context);
    }
    
    method onFinalize(context)
    {
        self.current_widget = nil;
        self.duration_base = nil;
        
        if (self['TIP_01'] != nil)
        {
            self.removeChild(context, self['TIP_01']);
        }
        if (self['TIP_02'] != nil)
        {
            self.removeChild(context, self['TIP_02']);
        }
    }
    
    method set_value(context, widget, text, distance=0)
    {
        if (self.current_widget == nil)
            return;
        
        self.current_widget.reset();
        if (self.current_widget == self['TIP_02'])
            self.current_widget = self['TIP_01'];
        else
            self.current_widget = self['TIP_02'];
        self.current_widget.visible = true;
        self.current_widget.set_value(context, widget, text, distance);
    }
    
    method reset_value()
    {
        if (self.current_widget == nil)
            return;
        
        self.current_widget.reset();
    }
}


module ArcadeProjectComponent::Tooltip::BalloonTip::Tip
{
    static sDownTipHalfWidth = down_tip.w * 0.5;
    static sUpTipHalfWidth = up_tip.w * 0.5;
    
    attribute watcher;
    attribute widget;
    attribute minimum_w; attribute minimum_h;
    attribute distance;
    attribute origin_down_tip_h;
    attribute is_first_time;
    
    SCALE_WIDGET_SDTV(Text::TextFace, 2.6);
    
    function CreateWatcher(context, func, interval)
    {
        var watcher = main::menu::MScriptWatcher(context, func);
        if (interval == nil)
            interval = 1;
        watcher.interval = interval;
        watcher.append();
        return watcher;
    }
    
    method clear()
    {
        self.widget = nil;
        self.minimum_w = nil;
        self.minimum_h = nil;
        self.distance = nil;
        self.origin_down_tip_h = nil;
        
        if (self.watcher != nil)
        {
            self.watcher.remove();
            self.watcher = nil;
        }
    }
    
    method onFinalize(context)
    {
        clear();
    }
    
    method set_value(context, widget, text, distance)
    {
        self.opacity = 0.0;
        self.widget = widget;
        self.distance = distance;
        self.minimum_w = self.w;
        self.minimum_h = self.h;
        self.is_first_time = true;
        self.Text.TextFace.text = text;
        if (self.watcher == nil)
            self.watcher = CreateWatcher(context, wait_render_tick, 10);
        if (self.origin_down_tip_h == nil)
            self.origin_down_tip_h = self.down_tip.h;
    
    }
    
    method reset()
    {
        reset_arrow();
        clear();
        
        self.AppearEffect.reverse = false;
        self.AppearEffect.reset();
        self.VisibleEffect.reverse = false;
        self.VisibleEffect.reset();
        self.Text.TextFace.text = "";
        self.up_tip.visible = false;
        self.down_tip.visible = false;
        self.w = 0;
        self.h = 0;
    }
    
    method wait_render_tick(context)
    {
        if (self.widget == nil || self.widget.parent == nil)
        {
            reset();
            return;
        }
        
        if (set_value2(context))
        {
            if (self.watcher != nil)
            {
                self.watcher.remove();
                self.watcher = nil;
                self.reset();
            }
        }
    }
    
    method reset_arrow()
    {
        if (self.origin_down_tip_h != nil)
            self.down_tip.h = self.origin_down_tip_h;
    }
    method adjust_arrow()
    {
        if (self.origin_down_tip_h != nil)
            self.down_tip.h = self.origin_down_tip_h - 0.5;
    }
    method on_effect_end()
    {
        self.reset_arrow();
        self.AppearEffect.on_effect_end = nil;
    }

    method set_value2(context)
    {
        if (self.minimum_w == self.w && self.minimum_h == self.h)
        {
            return false;
        }

        var bbox = self.widget.getBoundingBox();

        var base_x = bbox.x + bbox.w * self.widget.cursor_align_x;
        var base_y = bbox.y + bbox.h * self.widget.cursor_align_y;

        var widget_top = (base_y - self.distance) - (self.Tip.h + self.down_tip.h);

        var disp_x;
        var disp_y;
        var tip_x;
        if (widget_top > 0 + 15)
        {
            self.up_tip.visible = false;
            self.down_tip.visible = true;
            disp_x = base_x - (self.w * 0.5);
            disp_y = widget_top;
            tip_x = base_x - disp_x - self.sDownTipHalfWidth;
        } 
        else
        {
            self.down_tip.visible = false;
            self.up_tip.visible = true;
            disp_x = base_x - (self.w * 0.5);
            disp_y = base_y + self.distance;
            tip_x = base_x - disp_x - self.sUpTipHalfWidth;
        }
        
        var viewport = context.getViewport();
        var display_area_L = viewport.x + 15;
        var display_area_R = viewport.x + viewport.w - 15;
        var adjust_x = 0;

        var left_x = disp_x;
        if (left_x < display_area_L)
            adjust_x = left_x - display_area_L;
        
        var right_x = disp_x + self.w;
        if (right_x > display_area_R)
            adjust_x = right_x - display_area_R;
        
        disp_x -= adjust_x;
        self.up_tip.x = tip_x + adjust_x;
        self.down_tip.x = tip_x + adjust_x;
        if (context.display_height < 1080 || context.display_margin < 1.0)
        {
            self.up_tip.translate_y = 1.0;
            self.down_tip.translate_y = -1.0;
        }

        self.sx = disp_x.toInt();
        self.sy = disp_y.toInt();

        if (self.opacity == 0)
            return true;

        if (self.is_first_time)
        {
            var scale_cx = 0.0;
            if (self.BalloonTip.w > 0.0)
                scale_cx = disp_x == 0.0 ? 0.0 : disp_x / self.BalloonTip.w;
            var scale_cy = 0.0;
            if (self.BalloonTip.h > 0.0)
                scale_cy = disp_y == 0.0 ? 0.0 : disp_y / self.BalloonTip.h;
            self.BalloonTip.center = [scale_cx, scale_cx];

            self.adjust_arrow();

            self.AppearEffect.reverse = false;
            self.AppearEffect.restart();
            self.AppearEffect.on_effect_end = self.on_effect_end;

            var duration = self.BalloonTip.duration_base;
            if (self.minimum_h > 0)
                duration += (self.h / self.minimum_h).toInt() * 2;
            self.VisibleEffect.setStartDuration(0, duration);

            self.VisibleEffect.reverse = false;
            self.VisibleEffect.restart();

            self.watcher.interval = 0.1;
            self.is_first_time = false;
        }
        return false;
    }
}



module ArcadeProjectComponent::Header::HeaderGT5
{
    attribute watcher_;

    method onInitialize(context)
    {
        refresh();

        self.watcher_ = CreateWatcher(context, refresh, 300);
    }

    method onFinalize(context)
    {
        if (self.watcher_ != nil)
        {
            self.watcher_.remove();
            self.watcher_ = nil;
        }
    }

    method refresh(context)
    {
        if (HBox::Clock.visible)
            HBox::Clock.refresh();
        if (HBox::Date.visible)
            HBox::Date.refresh();
        if (HBox::DLS.visible)
            HBox::DLS.refresh();
        if (HBox::Credits.visible)
            HBox::Credits.refresh();
        if (HBox::AspecLevel.visible)
            HBox::AspecLevel.refresh();
        if (HBox::BspecLevel.visible)
            HBox::BspecLevel.refresh();
    }

    function setImageShape(image_shape, items, base_x, base_y)
    {
        var seg7_texdata = [
            "0":  [  0,  0, 23, 32],
            "1":  [ 23,  0, 23, 32],
            "2":  [ 46,  0, 23, 32],
            "3":  [ 69,  0, 23, 32],
            "4":  [ 92,  0, 23, 32],
            "5":  [  0, 32, 23, 32],
            "6":  [ 23, 32, 23, 32],
            "7":  [ 46, 32, 23, 32],
            "8":  [ 69, 32, 23, 32],
            "9":  [ 92, 32, 23, 32],
            ":":  [115,  0, 10, 32],
            " ":  [115, 32, 10, 32],
            "  ": [115, 32, 23, 32],
        ];

        var ary_size = items.size * 4;
        var vertex = Array(ary_size);
        var texcode = Array(ary_size);
        var i = 0;
        var bx = base_x;
        var by = base_y;
        foreach (var item in items)
        {

            var data = seg7_texdata[item.toString()];
            if (data == nil)
                data = [0, 0, 0, 0];
            |var x, var y, var w, var h| = data;
            vertex[i  ] = [bx,   by  ];
            vertex[i+1] = [bx+w, by  ];
            vertex[i+2] = [bx+w, by+h];
            vertex[i+3] = [bx,   by+h];
            var u1 = x / 128.0;
            var u2 = (x + w) / 128.0;
            var v1 = y / 128.0;
            var v2 = (y + h) / 128.0;
            texcode[i  ] = [u1, v1];
            texcode[i+1] = [u2, v1];
            texcode[i+2] = [u2, v2];
            texcode[i+3] = [u1, v2];
            bx += w;
            i += 4;
        }
        image_shape.updateVT(vertex, texcode);
    }

    function CreateWatcher(context, func, interval)
    {
        var watcher = main::menu::MScriptWatcher(context, func);
        if (interval == nil)
            interval = 1;
        watcher.interval = interval;
        watcher.append();
        return watcher;
    }
}

module ArcadeProjectComponent::Header::HeaderGT5::HBox::AspecLevel
{
    static sBarSize = nil;
    attribute displayedValue;

    method onRealize(context)
    {
        sBarSize = Indicator::bar.w;
    }

    method onInitialize(context)
    {
        displayedValue = [nil, nil];
        refresh();
    }

    method refresh(context)
    {
        var level = GAME_STATUS.user_profile.getAspecLevel();
        var total_point = GAME_STATUS.user_profile.getAspecTotalPoint();
        if (level != self.displayedValue[0] || total_point != self.displayedValue[1])
        {
            self.Indicator::Level.text = level;
            var current_point = GAME_STATUS.user_profile.getAspecCurrentPoint();
            var need_point = GAME_STATUS.user_profile.getAspecPointForNextLevel();
            if (0 < current_point)
            {
                var bar_ratio = current_point.toFloat() / need_point;
                self.Indicator::bar.w = sBarSize * bar_ratio;
            } else {
                self.Indicator::bar.w = 0;
            }
            self.displayedValue = [level, total_point];
        }
    }
}

module ArcadeProjectComponent::Header::HeaderGT5::HBox::BspecLevel
{
    static sBarSize = nil;
    attribute displayedValue;

    method onRealize(context)
    {
        sBarSize = Indicator::bar.w;
    }

    method onInitialize(context)
    {
        displayedValue = [nil, nil];
        refresh();
    }

    method refresh(context)
    {
        var level = GAME_STATUS.user_profile.getBspecLevel();
        var current_point = GAME_STATUS.user_profile.getBspecCurrentPoint();
        if (level != self.displayedValue[0] || current_point != self.displayedValue[1])
        {
            self.Indicator::Level.text = level;
            var need_point = GAME_STATUS.user_profile.getBspecPointForNextLevel();
            if (0 < current_point)
            {
                var bar_ratio = current_point.toFloat() / need_point;
                self.Indicator::bar.w = sBarSize * bar_ratio;
            } else {
                self.Indicator::bar.w = 0;
            }
            self.displayedValue = [level, current_point];
        }
    }
}

module ArcadeProjectComponent::Header::HeaderGT5::HBox::UserName
{
    method onInitialize(context)
    {
        refresh();
    }

    method refresh(context)
    {
        self.label.text = main::PDINetwork.getClientName();
    }
}

module ArcadeProjectComponent::Header::HeaderGT5::HBox::Credits
{
    attribute displayedValue;

    method onInitialize(context)
    {
        displayedValue = nil;
        refresh();
    }

    method refresh(context)
    {
        var credits = GAME_STATUS.user_profile.cash;
        if (credits != displayedValue)
            self.label.text = pdiext::MMisc::GetMoneyString(credits);
    }
}

module ArcadeProjectComponent::Header::HeaderGT5::HBox::RidingCar
{
    method onInitialize(context)
    {
        refresh();
    }

    method refresh(context, cp)
    {
        var is_friend_car = false;
        if (cp == nil) 
        {
            cp = GAME_STATUS.user_profile.garage.getRidingCar();
            is_friend_car = GAME_STATUS.user_profile.garage.isRidingFriendCar();
        }
        
        if (nil != cp)
        {
            var car_name = main::gtengine::MSpecDB::getCarShortName(cp.getCarCode());
            self.label.text = car_name;
            self.labelRent.text = car_name;
        } 
        else 
        {
            self.label.text = "--";
            self.labelRent.text = "--";
        }
        self.ImageFace.visible = !is_friend_car;
        self.label.visible = !is_friend_car;
        self.ImageFaceRent.visible = is_friend_car;
        self.labelRent.visible = is_friend_car;
    }
}

module ArcadeProjectComponent::Header::HeaderGT5::HBox::Date
{
    attribute day_;

    method refresh()
    {
        var current_time = pdiext::getBetterTimeLocal();

        if (self.day_ == current_time.day)
            return;
        
        var month_text = ["Jan.", "Feb.", "Mar.", "Apr.", "May", "Jun.", "Jul.", "Aug.", "Sep.", "Oct.", "Nov.", "Dec."];
        month.text = month_text[current_time.month - 1];
        day.text = current_time.day;

        var youbi_text = ["Sun.", "Mon.", "Tue.", "Wed.", "Thu.", "Fri.", "Sat."];
        var t = [0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4];
        var y = current_time.year;
        var m = current_time.month;
        var d = current_time.day;
        if (m < 3)
            y--;
        var youbi_i = (y + (y / 4) - (y / 100) + (y / 400) + t[m - 1] + d) % 7;
        youbi.text = youbi_text[youbi_i];

        if (youbi_i == 0)
            youbi.text_color = main::menu::MColorObject(209.0 / 255.0, 75.0 / 255.0, 73.0 / 255.0);
        else if (youbi_i == 6)
            youbi.text_color = main::menu::MColorObject(80.0 / 255.0, 120.0 / 255.0, 233.0 / 255.0);
        else
            youbi.text_color = main::menu::MColorObject(135.0 / 255.0, 135.0 / 255.0, 135.0 / 255.0);
        
        self.day_ = current_time.day;
    }
}


module ArcadeProjectComponent::Header::HeaderGT5::HBox::Clock
{
    attribute displayedTime;

    method onInitialize(context)
    {
        TimeBase.image_path = "image/dev/img/paddock/7seg.dds";
        TimeBase.prim_mode = "quads";
        TimeBase.visible = true;
        setImageShape(TimeBase, ["8", "8", ":", "8", "8"], 0, 0);

        Time.image_path = "image/dev/img/paddock/7seg.dds";
        Time.prim_mode = "quads";
        Time.visible = true;

        
        Colon.image_path = "image/dev/img/paddock/7seg.dds";
        Colon.prim_mode = "quads";
        Colon.visible = true;
        setImageShape(Colon, ["  ", "  ", ":"], 0, 0);

        displayedTime = nil;

        refresh();
    }

    method refresh()
    {
        var current_time = pdiext::getBetterTimeLocal();
        var current_time_minute = current_time.getBySecond() / 60;
        if (current_time_minute != displayedTime) {
            var hour = current_time.hour;
            if (0) {
                if (12 < hour)
                {
                    hour -= 12;
                    am_pm.text = "PM";
                } else {
                    am_pm.text = "AM";
                }
            }

            var i = 0;
            var items = Array(5);
            items[i++] = (10 <= hour) ? (hour / 10).toInt() : "  ";
            items[i++] = hour % 10;
            items[i++] = " ";
            items[i++] = (current_time.minute / 10).toInt();
            items[i++] = (current_time.minute % 10);

            setImageShape(Time, items, 0, 0);

            displayedTime = current_time_minute;
        }

        day.text = current_time.day;
    }
}

module ArcadeProjectComponent::Header::HeaderGT5::HBox::DLS
{
    attribute displayedPercent = -1;

    method onInitialize(context)
    {
        ImageShapeBase.image_path = "image/dev/img/paddock/7seg.dds";
        ImageShapeBase.prim_mode = "quads";
        ImageShapeBase.visible = true;
        setImageShape(ImageShapeBase, ["8", "8", "8"], 0, 0);

        ImageShape.image_path = "image/dev/img/paddock/7seg.dds";
        ImageShape.prim_mode = "quads";
        
        ImageShape.visible = true;

        self.displayedPercent = -1;

        refresh();
    }

    method refresh()
    {
        var current_percent = 0;

        if (current_percent != displayedPercent) {
            var items = Array(3);
            var i = 0;
            if (current_percent == 0)
            {
                items[i++] = 0;
                items[i++] = 0;
                items[i++] = 0;
            }
            else if (current_percent == 100)
            {
                items[i++] = 1;
                items[i++] = 0;
                items[i++] = 0;
            }
            else
            {
                items[i++] = 0;
                items[i++] = (current_percent / 10).toInt();
                items[i++] = current_percent % 10;
            }

            setImageShape(ImageShape, items, 0, 0);

            self.displayedPercent = current_percent;
        }
    }
}

module ArcadeProjectComponent::FinderItem
{
    method _set_car_info(context, item_w, car, garage_id, car_image_size, tuner_logo_size)
    {
        var cp; var cpp; var car_code; var car_color;
        if (car.isInstanceOf(main::gtengine::MCarParameter) || car.isInstanceOf(main::gtengine::MCarThin))
        {
            
            cp = car;
            car_code = cp.getCarCode();
            car_color = cp.color;
        } 
        else 
        {
            if (car.isInstanceOf(Garage2::CarParameterProxy) ||
                car.isInstanceOf(CarData::CarParameterProxy) ||
                car.isInstanceOf(ImportGarage::CarParameterProxy))
            {
                cpp = car;
                car_code = cpp.car_code;
                car_color = cpp.color;

                if (car.isInstanceOf(Garage2::CarParameterProxy))
                    var garage_id = car.garage_id;
            } 
            else 
            {
                if (car.isInstanceOf(ULong) || car.isInstanceOf(Long))
                {
                    car_code = main::gtengine::MSpecDB::getCarCode(car);
                    var col = main::gtengine::MSpecDB::getCarVariationFlag(car_code, 1);
                    car_color = col == nil ? 0 : col;
                }
            }
        }

        if (car_code != nil && car_code != main::gtengine::MSpecDB::NO_CODE64)
        {
            var car_label = main::gtengine::MSpecDB::getCarLabel(car_code);
            if (item_w["car"] != nil && item_w["car"].visible)
            {
                var path = "";
                if (garage_id != nil)
                {
                    path = GarageUtil::getThumbnailPath(garage_id, car_image_size);
                }
                else
                {
                    path = GarageUtil::getThumbnailPath2(car_label, car_image_size, car_color);
                }

                if (pdistd::Exist(path))
                {
                    item_w.car.cache = false;
                    item_w.car.from_disk = true;
                    item_w.car.block = false;
                    item_w.car.image_path = path;
                }
                else
                {
                    item_w.car.cache = false;
                    item_w.car.from_disk = true;
                    item_w.car.block = false;
                    item_w.car.image_path = "car/thumbnail_%s/%s_%02d".format(car_image_size, car_label, car_color);
                }
            }

            var manufacturer = cpp != nil ? cpp.tuner_label : main::gtengine::MSpecDB::getTunerLabel(car_code);

            if (item_w["manufacturer_logo"] != nil && item_w["manufacturer_logo"].visible)
            {
                item_w.manufacturer_logo.cache = true;
                item_w.manufacturer_logo.image_path = "piece/tunner_logo_%{tuner_logo_size}/%{manufacturer}.img";
            }
            if (item_w["manufacturer_name"] != nil && item_w["manufacturer_name"].visible)
            {
                item_w.manufacturer_name.text = context.translate(context.getRootWindow(), "TunerName", manufacturer);
            }

            if (item_w["car_name"] != nil && item_w["car_name"].visible)
            {
                if (car_label == "x1_p_10" || car_label == "x1_f_10" || car_label == "x1_10")
                {
                    item_w.car_name.text = main::gtengine::MSpecDB::getCarShortName(car_code);
                }
                else
                {
                    item_w.car_name.text = cpp != nil ? cpp.short_name : main::gtengine::MSpecDB::getCarShortName(car_code);
                }
            }

            if (item_w["ps"] != nil && item_w["ps"].visible)
            {
                var max_power; var mass; var drivetrain; var pp;
                if (cpp != nil)
                {
                    max_power = cpp.getPsRpmString();
                    mass = cpp.getMassString();
                    drivetrain = context.translate(context.getRootWindow(), "DriveTrainName", cpp.drive_train);
                    pp = "%s %d".format(context.translate(context.getRootWindow(), "Unit", "PERFORMANCE_POINT"), cpp.pp);
                }
                else
                {
                    max_power = SpecDatabaseUtil::getCarMaxPowerText(context, car_code);
                    mass = SpecDatabaseUtil::getCarWeightText(context, car_code);
                    drivetrain = SpecDatabaseUtil::getCarDrivetrainText(context, car_code);
                    pp = "";
                }

                var format3 = context.translate(context.getRootWindow(), "SpecFormat", "FORMAT_3");
                item_w.ps.text = format3.build(max_power, mass, drivetrain, pp);
            }

            if (item_w["Spec"] != nil && item_w["Spec"].visible)
            {
                var max_power; var max_torque; var drivetrain; var weight;
                if (cpp != nil)
                {
                    max_power = cpp.getPsRpmString();
                    max_torque = SpecDatabaseUtil::getCarMaxTorqueText(context, car_code);
                    drivetrain = cpp.drive_train;
                    weight = SpecDatabaseUtil::getCarWeightText(context, car_code);
                } 
                else 
                {
                    max_power = SpecDatabaseUtil::getCarMaxPowerText(context, car_code);
                    max_torque = SpecDatabaseUtil::getCarMaxTorqueText(context, car_code);
                    drivetrain = SpecDatabaseUtil::getCarDrivetrainText(context, car_code);
                    weight = SpecDatabaseUtil::getCarWeightText(context, car_code);
                }

                var spec_format = context.translate(context.getRootWindow(), "SpecFormat", "car_spec_line_feed");
                item_w.Spec::label.text = spec_format.build(max_power, max_torque, drivetrain, weight);
            }

            if (item_w["ColorTip"] != nil && item_w["ColorTip"].visible)
            {
                if (item_w.ColorTip["ColorFace"] != nil)
                {
                    if (nil != cpp && cpp.paint_color >= 0)
                    {
                        item_w.ColorTip.ColorFace.setPaintColor(cpp.paint_color);
                    }
                    else
                    {
                        item_w.ColorTip.ColorFace.setCarColor(car_code, car_color);
                    }
                }
            }

            if (nil != item_w["type"] && item_w["type"].visible)
            {
                var is_premium = cpp != nil ? cpp.has_premium : gtengine::MSpecDB::checkGenericFlag("has_premium_model", car_code);

                item_w.type.Icon.TextFace.text = context.translate(context.getRootWindow(), "SpecFormat", is_premium ? "car_premium_short" : "car_standard_short");
                if (nil != item_w.type["TextFace"])
                {
                    item_w.type.TextFace.text = context.translate(context.getRootWindow(), "SpecFormat", is_premium ? "car_premium" : "car_standard");
                }
                item_w.type.visible = true;
            }
        }
    }

    method _reset_car_info(context, item_w)
    {
        if (item_w["car"] != nil)
            item_w.car.image_path = "";
        if (item_w["manufacturer_logo"] != nil)
            item_w.manufacturer_logo.image_path = "";
        if (item_w["car_name"] != nil)
            item_w.car_name.text = "";
        if (item_w["manufacturer_name"] != nil)
            item_w.manufacturer_name.text = "";
        if (item_w["ps"] != nil)
            item_w.ps.text = "";
        if (item_w["Spec"] != nil)
            item_w.Spec::label.text = "";
    }

    method _set_course_info(context, item_w, course, course_map_size, course_logo_size)
    {
        var course_code = main::gtengine::MSpecDB::getCourseCode(course);

        if (course_code != nil && course_code != main::gtengine::MSpecDB::NO_CODE64)
        {
            var course_info = CourseData::getCourseInfo(course_code);

            if (item_w["logo"] != nil)
                item_w.logo.image_path = "piece/course_logo_%{course_logo_size}/%{course_info.logo}.img";

            if (item_w["map"] != nil)
                item_w.map.image_path = "piece/course_map_%{course_map_size}/%{course_info.map}.img";
        }
    }

    method _set_weather_and_datetime(context, item_w, decisive_weather, datetime_hour)
    {
        if (item_w["weather"] != nil)
        {
            var is_day = true;
            if (datetime_hour != nil && datetime_hour > -1)
                is_day = 6 <= datetime_hour && datetime_hour < 18;

            var weather;
            switch (decisive_weather)
            {
                case gtengine::DecisiveWeather::RAINY:
                    weather = "rain";
                    break;
                case gtengine::DecisiveWeather::SNOWY:
                    weather = "snow";
                    break;
                case gtengine::DecisiveWeather::SUNNY:
                default:
                    weather = "fine";
                    break;
            }

            var weather_name = is_day ? "" : "night_";
            weather_name += weather;

            for (var it = item_w.weather.first; it != nil; it = it.next_widget)
            {
                it.visible = it.name == weather_name;
            }

            item_w.weather.visible = true;
        }
    }

    method _set_edit_course_info(context, item_w, edit_course_data)
    {
        if (edit_course_data == nil)
        {
            return;
        }

        if (item_w["map"] != nil)
        {
            item_w.map.image_path = edit_course_data.thumbnail_filename;
        }


        if (item_w["keyword1"] != nil)
        {
            var start_datetime = pdistd::MTime();
            start_datetime.setBySecond(edit_course_data.start_datetime);

            item_w.keyword1.visible = true;
            item_w.keyword1.TextFace.text = "%.02d:%02d".format(start_datetime.hour, start_datetime.minute);
        }
    }

    method _reset_course_info(context, item_w)
    {
        if (item_w["logo"] != nil)
            item_w.logo.image_path = "";
        if (item_w["map"] != nil)
            item_w.map.image_path = "";
    }

    method _set_info(item_w, header_text, title_text, body_text)
    {
        if (nil != header_text)
        {
            item_w.header.text = header_text;
        }
        if (nil != title_text)
        {
            item_w.title.text = title_text;
        }
        if (nil != body_text)
        {
            item_w.body.text = body_text;
        }
    }

    method _reset_info(item_w)
    {
        item_w.header.text = "";
        item_w.title.text = "";
        item_w.body.text = "";
    }
}

module ArcadeProjectComponent::FinderItem::Thumb
{
    attribute invalid;
}

module ArcadeProjectComponent::FinderItem::CarThumb
{
    attribute invalid;

    method setInfo(context, car, garage_id)
    {
        FinderItem._set_car_info(context, self, car, garage_id, "M", "S");
    }
    method resetInfo(context)
    {
        FinderItem._reset_car_info(context, self);
    }
}


module ArcadeProjectComponent::FinderItem::CourseThumb
{
    method setInfo(context, car, garage_id)
    {
        FinderItem._set_course_info(context, self, car, "M", "S");
    }

    method setEditCourseInfo(context, edit_course_data)
    {
        FinderItem._set_edit_course_info(context, self, edit_course_data);
    }

    method resetInfo(context)
    {
        FinderItem._reset_course_info(context, self);
    }

    method setWeatherAndDatetime(context, decisive_weather, datetime_hour)
    {
        FinderItem._set_weather_and_datetime(context, self, decisive_weather, datetime_hour);
    }
}

module ArcadeProjectComponent::ButtonHelp::ButtonHelpGT5
{
    module Pane::Buttons {
        SCALE_WIDGET_SDTV(Circle::label, 2.6);
        SCALE_WIDGET_SDTV(Circle::labeli, 2.6);
        SCALE_WIDGET_SDTV(Square::label, 2.6);
        SCALE_WIDGET_SDTV(Square::labeli, 2.6);
        SCALE_WIDGET_SDTV(Triangle::label, 2.6);
        SCALE_WIDGET_SDTV(Triangle::labeli, 2.6);
        SCALE_WIDGET_SDTV(Cross::label, 2.6);
        SCALE_WIDGET_SDTV(Cross::labeli, 2.6);
        SCALE_WIDGET_SDTV(R1::label, 2.6);
        SCALE_WIDGET_SDTV(R1::labeli, 2.6);
        SCALE_WIDGET_SDTV(L1::label, 2.6);
        SCALE_WIDGET_SDTV(L1::labeli, 2.6);
    }

    method clear()
    {
        for (var it = Pane::Buttons.first; it != nil; it = it.next_widget)
        {
            it.label.text = nil;
            it.label_i.text = nil;
        }
    }

    function getEnterButtonName()
    {
        var assign = main::pdiext::MSystemConfiguration::GetEnterButtonAssign();
        if (assign == "circle")
            return "Circle";
        else
            return "Cross";
    }


    function getCancelButtonName()
    {
        var assign = main::pdiext::MSystemConfiguration::GetEnterButtonAssign();
        if (assign == "circle")
            return "Cross";
        else
            return "Circle";
    }

    attribute is_appear = false;

    method set(context, set_list)
    {
        if (pdiext::MSystemConfiguration::isSDTV())
        {

            if (set_list.size > 0 && set_list[set_list.size - 1][0] != "R1")
            {
                set_list.push(["R1", context.translate(context.getCursorProject(), "Component", "Zoom")]);
            }


            var pad_left = set_list.size >= 6 ? -48 : 0;
            foreach (var w in ["Square", "Triangle", "Cross", "L1", "R1"])
            {
                Pane::Buttons[w].pack_pad_left = pad_left; 
            }
        }

        Pane::Buttons.visible = false;
        for (var it = Pane::Buttons.first; it != nil; it = it.next_widget)
        {
            it.visible = false;
        }
        var order_list = [];
        foreach (var set in set_list)
        {
            var button_name = set[0];
            var text = set[1];

            var button_w = Pane::Buttons[button_name];
            order_list.push(button_w);
            button_w["label"].text = text;
            button_w["label"].visible = true;
            button_w["label_i"].text = text;
            button_w["label_i"].visible = false;
            button_w.visible = true;
        }
        Pane::Buttons.reorderChild(order_list);
        Pane::Buttons.visible = true;

        appear();
    }

    method setLabel(context, button_name, text)
    {
        var button_w = Pane::Buttons[button_name];
        button_w["label"].text = text;
        button_w["label_i"].text = text;
    }

    method setInsensitive(button_name, insensitive)
    {
        var button_w = Pane::Buttons[button_name];
        if (button_w != nil)
        {
            button_w["label"].visible = !insensitive;
            button_w["label_i"].visible = insensitive;
        }
    }

    method appear()
    {
        self.FadeEffect.reverse = false;
        self.FadeEffect.start();
        self.is_appear = true;
    }

    method hide()
    {
        self.FadeEffect.reverse = true;
        self.FadeEffect.start();
        self.is_appear = false;
    }

    method appearIf()
    {
        if (!self.is_appear)
        {
            appear();
            return true;
        }
        return false;
    }

    method hideIf()
    {
        if (self.is_appear)
        {
            hide();
            return true;
        }
        return false;
    }
}

module ArcadeProjectComponent::Icon::Weather
{
    method onRealize(manager)
    {
        self.hidden.visible = false;
        self.weather_icon.image_path = "";
        self.datetime_icon.visible = false;
    }

    method setup_rp(context, rp)
    {
        var daynight = false; // actually means "is it daytime"
        if (rp.datetime.hour >= 6 && rp.datetime.hour < 18)
        {

            daynight = true;
        }

        if (rp.weather_no_precipitation == true)
            self.weather_icon.image_path = daynight ? "image/common/weather/day.dds" : "image/common/weather/night.dds";
        else if (rp.weather_prec_rain_only == true)
        {
            if (rp.weather_no_schedule)
                self.weather_icon.image_path = daynight ? "image/common/weather/random_day_rain.dds" : "image/common/weather/random_night_rain.dds";
            else
                self.weather_icon.image_path = daynight ? "image/common/weather/day_rain.dds" : "image/common/weather/night_rain.dds";
        }
        else if (rp.weather_prec_snow_only == true)
        {
            if (rp.weather_no_schedule)
                self.weather_icon.image_path = daynight ? "image/common/weather/random_day_snow.dds" : "image/common/weather/random_night_snow.dds";
            else
                self.weather_icon.image_path = daynight ? "image/common/weather/day_snow.dds" : "image/common/weather/night_snow.dds";
        }
        else
            self.weather_icon.image_path = daynight ? "image/common/weather/day.dds" : "image/common/weather/night.dds";
        
        if (rp.time_progress_speed != 0.0)
            self.datetime_icon.visible = true;
        
        self.visible = true;
    }


    method setup(context, gp, event_index)
    {
        self.datetime_icon.visible = false;
        var rp = gp.event.race_parameter;
        if (event_index != nil && event_index < gp.events.size)
        {
            rp = gp.events[event_index].race_parameter;
        }

        setup_rp(context, rp);
    }


    method setup_arcade(context, decisive_weather, datetime_hour, time_progress_speed, weather_random)
    {
        self.datetime_icon.visible = false;

        var daynight = false; // actually means "is it daytime"
        if (datetime_hour >= 6 && datetime_hour < 18)
        {

            daynight = true;
        }

        if (decisive_weather == gtengine::DecisiveWeather::SUNNY)
            self.weather_icon.image_path = daynight ? "image/common/weather/day.dds" : "image/common/weather/night.dds";
        else if (decisive_weather == gtengine::DecisiveWeather::RAINY)
        {
            if (weather_random == true)
                self.weather_icon.image_path = daynight ? "image/common/weather/random_day_rain.dds" : "image/common/weather/random_night_rain.dds";
            else
                self.weather_icon.image_path = daynight ? "image/common/weather/day_rain.dds" : "image/common/weather/night_rain.dds";
        }
        else if (decisive_weather == gtengine::DecisiveWeather::SNOWY)
        {
            if (weather_random == true)
                self.weather_icon.image_path = daynight ? "image/common/weather/random_day_snow.dds" : "image/common/weather/random_night_snow.dds";
            else
                self.weather_icon.image_path = daynight ? "image/common/weather/day_snow.dds" : "image/common/weather/night_snow.dds";
        }
        else
            self.weather_icon.image_path = daynight ? "image/common/weather/day.dds" : "image/common/weather/night.dds";

        if (time_progress_speed != 0.0)
            self.datetime_icon.visible = true;
        
        self.visible = true;
    }

    
    method setup_edit_course(context, edit_course_data)
    {
        var weather_change_fixed = edit_course_data.weather_accel == 0;

        var is_random = false;
        var is_rain = false;
        var is_snow = false;

        if (weather_change_fixed)
        {
            if (edit_course_data.genre == "template08")
            {
                if (edit_course_data.weather_value0 == -1.0)
                {
                    is_snow = true;
                }
                else if (edit_course_data.weather_value0 != 1.0)
                {
                    is_random = true;
                    is_snow = true;
                }
            }
            else if (edit_course_data.weather_value0 != 1.0)
            {
                is_random = edit_course_data.weather_value0 != -1.0;
                is_rain = true;
            }
        }
        else
        {
            is_random = true;
            is_snow = edit_course_data.genre == "template08";
            is_rain = !is_snow;
        }

        var random = is_random ? "random_" : "";
        var start_datetime = pdistd::MTime();
        start_datetime.setBySecond(edit_course_data.start_datetime);
        var is_day = 6 <= start_datetime.hour && start_datetime.hour < 18;
        var day_night = is_day ? "day" : "night";
        var rain_snow = is_rain ? "_rain" : (is_snow ? "_snow" : "");

        self.weather_icon.image_path = "image/common/weather/%{random}%{day_night}%{rain_snow}.dds";

        self.datetime_icon.visible = edit_course_data.genre != "template07";

        self.visible = true;
    }
}

module ArcadeProjectComponent::HDPulldown::OptionMenu
{
    method onRealize(manager)
    {
        self.copy_selected_item = false;
    }

    SCALE_WIDGET_SDTV(label, 2.6);
    SCALE_WIDGET_SDTV(labeli, 2.6);

    method pulldownValueChanged(context)
    {
        var current_item = self.getItem(self.index);
        if (current_item != nil)
        {
            self["label"].text = current_item["label"].text;
            self["label"].abbreviate = true;
            if (self.defined("labeli"))
            {
                self["labeli"].text = self["label"].text;
                self["labeli"].abbreviate = true;
            }
            if (self.defined("labela"))
            {
                self["labela"].text = self["label"].text;
                self["labela"].abbreviate = true;
            }
        }
    }

    method onValueChanged(context)
    {
        pulldownValueChanged(context);
    }
}

module ArcadeProjectComponent::HDPulldown::Item
{
    SCALE_WIDGET_SDTV(label, 2.6);
}