











#define TABLE_NAME "t_course_data"

module CourseData
{
    static TABLE_VERSION = 20_60;

    class Info_GT5
    {
        attribute id;
        attribute code;
        attribute name;
        attribute map;
        attribute logo;
        attribute has_reverse;
        attribute is_reverse;
        attribute direction;
        attribute category;
        attribute flag;
        attribute length;
        attribute elevation;
        attribute straight;
        attribute corner;
        attribute drift_ok;
        attribute kart_ok;
        attribute kart_only;
        attribute file_path;
        attribute edited_name;
        attribute is_standard;
        attribute online;
        attribute oval;
        attribute entry_max;
        attribute entry_max_3d;
        attribute rain_situation;
        attribute night_situation;
        attribute celsius_base0;
        attribute celsius_min0;
        attribute celsius_max0;
        attribute celsius_base1;
        attribute celsius_min1;
        attribute celsius_max1;
        attribute basetime_min;
        attribute basetime_max;
        attribute loading_bg;
        attribute base_name;
        attribute dlc;

        static attr_names;

        method __init__()
        {
            self.id = -1;
            self.code = gtengine::MSpecDB::NO_CODE64;
            self.name = "";
            self.map = "";
            self.logo = "";
            self.has_reverse = 0;
            self.is_reverse = 0;
            self.direction = "";
            self.drift_ok = 0;
            self.category = "";
            self.flag = "";
            self.length = 0;
            self.elevation = 0;
            self.straight = 0;
            self.corner = 0;
            self.kart_ok = 0;
            self.kart_only = 0;
            self.file_path = "";
            self.edited_name = "";
            self.is_standard = 0;
            self.online = 0;
            self.oval = 0;
            self.entry_max = 2;
            self.entry_max_3d = 2;
            self.rain_situation = 0;
            self.night_situation = 0;
            self.celsius_base0 = 0;
            self.celsius_min0 = 0;
            self.celsius_max0 = 0;
            self.celsius_base1 = 0;
            self.celsius_min1 = 0;
            self.celsius_max1 = 0;
            self.basetime_min = 0;
            self.basetime_max = 0;
            self.loading_bg = "";
            self.base_name = "";
            self.dlc = false;
        }

        function begin()
        {
            attr_names = [];

            foreach (|var a, var v| in Info_GT5)
            {
                if (v.is_attribute)
                    attr_names.push(a.toString());
            }
        }

        // Overload [];
        method __get_elem__(i)
        {
            return self.getObjectAttribute(i);
        }

        method __set_elem__(i, val)
        {
            self.setObjectAttribute(i, val);
        }

        function GetAttributeNames()
        {
            return attr_names;
        }

        method setParamFromXml(xml_attr_map)
        {
            self.code = xml_attr_map["code"] != nil ? gtengine::MSpecDB::getCourseCode(xml_attr_map["code"]) : gtengine::MSpecDB::NO_CODE64;
            self.name = xml_attr_map["name"] != nil ? xml_attr_map["name"] : "";
            self.logo = xml_attr_map["logo"] != nil ? xml_attr_map["logo"] : "";
            self.map = xml_attr_map["map"] != nil ? xml_attr_map["map"] : "";
            self.drift_ok = xml_attr_map["drift_ok"] != nil ? xml_attr_map["drift_ok"].toInt() : 0;
            self.category = xml_attr_map["category"] != nil ? xml_attr_map["category"] : "circuit";
            self.has_reverse = xml_attr_map["has_reverse"] != nil ? xml_attr_map["has_reverse"].toInt() : 0;
            self.direction = xml_attr_map["direction"] != nil ? xml_attr_map["direction"].toString() : "f";
            self.flag = xml_attr_map["flag"] != nil ? xml_attr_map["flag"] : "PDI";
            self.length = xml_attr_map["length"] != nil ? (xml_attr_map["length"].toFloat() * 1000).toInt() : -1;
            self.elevation = xml_attr_map["elevation"] != nil ? (xml_attr_map["elevation"].toFloat() * 1000).toInt() : -1;
            self.straight = xml_attr_map["straight"] != nil ? (xml_attr_map["straight"].toFloat() * 1000).toInt() : -1;
            self.corner = xml_attr_map["corner"] != nil ? xml_attr_map["corner"].toInt() : -1;
            self.kart_ok = xml_attr_map["kart_ok"] != nil ? xml_attr_map["kart_ok"].toInt() : 0;
            self.kart_only = xml_attr_map["kart_only"] != nil ? xml_attr_map["kart_only"].toInt() : 0;
            self.online = xml_attr_map["online"] != nil ? xml_attr_map["online"].toInt() : 0;
            self.oval = xml_attr_map["oval"] != nil ? xml_attr_map["oval"].toInt() : 0;
            self.entry_max = xml_attr_map["entry_max"] != nil ? xml_attr_map["entry_max"].toInt() : 2;
            self.entry_max_3d = xml_attr_map["entry_max_3d"] != nil ? xml_attr_map["entry_max_3d"].toInt() : 2;
            self.rain_situation = xml_attr_map["rain_situation"] != nil ? xml_attr_map["rain_situation"].toInt() : 2;
            self.night_situation = xml_attr_map["night_situation"] != nil ? xml_attr_map["night_situation"].toInt() : 2;
            self.celsius_base0 = xml_attr_map["celsius_base0"] != nil ? xml_attr_map["celsius_base0"].toInt() : 20;
            self.celsius_min0 = xml_attr_map["celsius_min0"] != nil ? xml_attr_map["celsius_min0"].toInt() : 3;
            self.celsius_max0 = xml_attr_map["celsius_max0"] != nil ? xml_attr_map["celsius_max0"].toInt() : 3;
            self.celsius_base1 = xml_attr_map["celsius_base1"] != nil ? xml_attr_map["celsius_base1"].toInt() : 20;
            self.celsius_min1 = xml_attr_map["celsius_min1"] != nil ? xml_attr_map["celsius_min1"].toInt() : 3;
            self.celsius_max1 = xml_attr_map["celsius_max1"] != nil ? xml_attr_map["celsius_max1"].toInt() : 3;

            {
                var datetime_str = xml_attr_map["basetime_min"];
                |var h, var m| = datetime_str.split(":");
                self.basetime_min = (h.toInt() * 3600) + (m.toInt() * 60);
            }

            {
                var datetime_str = xml_attr_map["basetime_max"];
                |var h, var m| = datetime_str.split(":");
                self.basetime_max = (h.toInt() * 3600) + (m.toInt() * 60);
            }

            self.is_standard = isPS2(self.code).toInt();
            self.is_reverse = CourseData::isReverse(self.code);

            self.loading_bg = xml_attr_map["loading_bg"] != nil ? xml_attr_map["loading_bg"] : "";
            self.base_name = xml_attr_map["base_name"] != nil ? xml_attr_map["base_name"] : "";
            self.dlc = xml_attr_map["dlc"] != nil ? xml_attr_map["dlc"].toBool() : false;
        }

        method setParam(columns, params)
        {
            for (var i = 0; i < columns.size; i++)
            {
                var column = columns[i];
                self.setObjectAttribute(column, params[i]);
                if (column == "code")
                    self.is_reverse = CourseData::isReverse(self.code);
            }
        }
    }

    Info_GT5::begin();
    static sEnableCourseList;

    function initialize()
    {
        var res = DBUtil::initializeTable(TABLE_NAME, TABLE_VERSION);
        if (res)
        {
            var result = createCourseDataTable();
            insertCourseDataFromXML("textdata/gt5/courselist.xml");
        }

        var rows = executeSelect(["code"]);
        if (rows.size == 0)
        {
            insertCourseDataFromXML("textdata/gt5/courselist.xml");
            rows = executeSelect(["code"]);

            DB_ASSERT(rows.size > 0, 0);
        }

        sEnableCourseList = Array(rows.size);
        for (var i = 0; i < rows.size; i++)
        {
            var row = rows[i];
            sEnableCourseList[i] = row[0];
        }
    }

    function insertCourseDataFromXML(file_path)
    {
        var res = main::pdistd::ReadFile(file_path);
        if (res["result"] != main::pdistd::FileError::OK)
            return;
        else
        {
            var buf = res["buffer"];
            var xml = main::pdistd::MXml();
            xml.parse(buf);

            var dom = xml.result;
            var nodelist = dom["CourseData"];
            if (nodelist == nil)
                return;

            var node = nodelist[0];
            nodelist = node["course"];
            if (nodelist == nil)
                return;

            SQLITE.begin();

            for (var i = 0; i < nodelist.size; i++)
            {
                node = nodelist[i];
                var attr_map = node.getAttributeMap();
                var course_label = attr_map["code"];
                var course_code = main::gtengine::MSpecDB::getCourseCode(course_label);
                if (course_code != main::gtengine::MSpecDB::NO_CODE64)
                {
                    var course_info = Info_GT5();
                    course_info.setParamFromXml(attr_map);
                    insertCourseInfo(course_info);
                }
            }

            SQLITE.commit();
        }
    }

    function createCourseDataTable()
    {
        var columns_str = "";
        var attribute_names = Info_GT5::GetAttributeNames();
        for (var i = 0; i < attribute_names.size; i++)
        {
            var column = attribute_names[i];
            var column_type = "";
            var course_info = Info_GT5();
            
            if (course_info[column].isInstanceOf(System::String))
                column_type = "TEXT";
            else
                column_type = "INTEGER";

            columns_str += "%s %s, ".format(column, column_type);
        }

        columns_str = columns_str.removeLastOf(", ");

        var query = "CREATE TABLE IF NOT EXISTS %{TABLE_NAME} (%s, PRIMARY KEY (id))".format(columns_str);
        return SQLITE.execute0(query);
    }

    function executeSelect(columns, conditional_query)
    {
        var columns_str = "";
        foreach (var column in columns)
            columns_str += "%s, ".format(column);

        columns_str = columns_str.removeLastOf(", ");

        if (conditional_query == nil)
            conditional_query = "";

        var select_query = "SELECT %s FROM %{TABLE_NAME} ".format(columns_str);
        var query = select_query + conditional_query;
        return SQLITE.executeQuery(query);
    }

    function insertCourseInfo(course_info)
    {
        var where_query = "WHERE code='%lu'".format(course_info.code);
        var rows = executeSelect(["code"], where_query);

        if (rows.size)
            return;

        var columns_str = "";
        var values_str = "";
        var params = [];
        var attribute_names = Info_GT5::GetAttributeNames();

        for (var i = 0; i < attribute_names.size; i++)
        {
            var column = attribute_names[i];
            if (column == "id")
                continue;

            var param = course_info[column];
            params.push(param);
            columns_str += "%s, ".format(column);
            values_str += "?, ";
        }

        columns_str = columns_str.removeLastOf(", ");
        values_str = values_str.removeLastOf(", ");
        var query = "INSERT INTO %{TABLE_NAME} (%s) VALUES (%s)".format(columns_str, values_str);
        var result = SQLITE.execute(query, params);
    }

    function getCourseInfo(course)
    {
        var course_code = main::gtengine::MSpecDB::getCourseCode(course);
        var course_info = Info_GT5();
        var rows = executeSelect(Info_GT5::GetAttributeNames(), "WHERE code='%lu'".format(course_code));
        if (rows.size > 0)
        {
            var params = rows[0];
            course_info.setParam(Info_GT5::GetAttributeNames(), params);
        }

        return course_info;
    }

    function getCourseInfoList(courseList, extraQuery)
    {
        var codes = "";
        foreach (var course in courseList)
            codes += (codes != "" ? "," : "") + "'%lu'".format(course);
        
        var sql = "WHERE code IN (%{codes}) " + (extraQuery != nil ? extraQuery : "");
        var rows = executeSelect(Info_GT5::GetAttributeNames(), sql);
        if (rows.size > 0)
        {
            var result = Array(rows.size);
            for (var i = 0; i < rows.size; i++)
            {
                result[i] = Info_GT5();
                result[i].setParam(Info_GT5::GetAttributeNames(), rows[i]);
            }

            return result;
        }

        return nil;
    }

    function isAvailableCourse(course)
    {
        if (course == nil)
            return false;

        var course_code = main::gtengine::MSpecDB::getCourseCode(course);
        if (sEnableCourseList.indexOf(course_code) > -1)
            return true;
        else
            return false;
    }

    function isPS2(course)
    {
        var course_label = main::gtengine::MSpecDB::getCourseLabel(course);
        course_label.trim();
        return course_label.endWith("_ps2");
    }

    function isReverse(course)
    {
        var course_label = main::gtengine::MSpecDB::getCourseLabel(course);
        course_label.trim();
        return course_label.beginWith("r_");
    }

    function hasReverse(course)
    {
        var course_info = getCourseInfo(course);
        if (course_info != nil)
            return course_info.has_reverse;
        else
            return false;
    }

    function getReverseCode(course)
    {
        if (main::gtengine::MSpecDB::getCourseCode(course) == main::gtengine::MSpecDB::NO_CODE64)
            return main::gtengine::MSpecDB::NO_CODE64;

        if (isReverse(course))
            return main::gtengine::MSpecDB::getCourseCode(course);

        if (hasReverse(course))
        {
            var normal_label = main::gtengine::MSpecDB::getCourseLabel(course);
            var reverse_label = "r_" + normal_label;
            return main::gtengine::MSpecDB::getCourseCode(reverse_label);
        }
        else
        {
            return nil;
        }
    }

    function getNormalCode(course)
    {
        if (main::gtengine::MSpecDB::getCourseCode(course) == main::gtengine::MSpecDB::NO_CODE64)
            return main::gtengine::MSpecDB::NO_CODE64;

        if (!isReverse(course))
            return main::gtengine::MSpecDB::getCourseCode(course);

        var reverse_label = main::gtengine::MSpecDB::getCourseLabel(course);
        var normal_label = reverse_label.substr("r_".size);
        return main::gtengine::MSpecDB::getCourseCode(normal_label); 
    }

    function getReverseLabel(course)
    {
        if (main::gtengine::MSpecDB::getCourseCode(course) == main::gtengine::MSpecDB::NO_CODE64)
            return "no such car";

        if (isReverse(course))
            return main::gtengine::MSpecDB::getCourseLabel(course);

        if (hasReverse(course))
        {
            var normal_label = main::gtengine::MSpecDB::getCourseLabel(course);
            var reverse_label = "r_" + normal_label;
            return reverse_label;
        }
        else
        {
            return nil;
        }
    }

    function getNormalLabel(course)
    {
        if (main::gtengine::MSpecDB::getCourseCode(course) == main::gtengine::MSpecDB::NO_CODE64)
            return "no such car";

        if (!isReverse(course))
            return main::gtengine::MSpecDB::getCourseLabel(course);

        var reverse_label = main::gtengine::MSpecDB::getCourseLabel(course);
        var normal_label = reverse_label.substr("r_".size);
        return normal_label;
    }

    function NormalCodeToReverseLabel(normal_course_code)
    {
        var reverse_course_code = getReverseCode(normal_course_code);
        if (reverse_course_code != nil)
            return main::gtengine::MSpecDB::getCourseLabel(reverse_course_code);
        else
            return nil;
    }

    function ReverseCodeToNormalLabel(reverse_course_code)
    {
        var normal_course_code = getNormalCode(reverse_course_code);
        if (normal_course_code != nil)
            return main::gtengine::MSpecDB::getCourseLabel(normal_course_code);
        else
            return nil;
    }

    function getDirectionText(context, root, course)
    {
        if (!isReverse(course))
            return context.translate(root, "CourseData", "direction_normal");
        else
            return context.translate(root, "CourseData", "direction_reverse");
    }

    function getCategoryText(context, root, info, course)
    {
        if (info == nil && course != nil)
            info = getCourseInfo(course);

        if (info != nil)
        {
            return context.translate(root, "CourseData", "category_" + info.category);
        }
        else
        {
            return "";
        }
    }

    function getCourseLengthText(context, root, info, course)
    {
        if (info == nil && course != nil)
            info = getCourseInfo(course);

        var length = "---";
        if (info.length != nil && info.length > -1)
            length = main::pdiext::MUnit::GetCourseLengthString(info.length * 0.001, true);
    
        return length;
    }

    function getCourseHeightText(context, root, info, course)
    {
        if (info == nil && course != nil)
            info = getCourseInfo(course);

        var elevation = "---";
        if (info.elevation != nil && info.elevation > -1)
            elevation = main::pdiext::MUnit::GetCourseHeightString(info.elevation * 0.001, true);
    
        return elevation;
    }

    function getCourseLongestStraightText(context, root, info, course)
    {
        if (info == nil && course != nil)
            info = getCourseInfo(course);

        var straight = "---";
        if (info.straight != nil && info.straight > -1)
            straight = main::pdiext::MUnit::GetCourseLengthString(info.straight * 0.001, true);
    
        return straight;
    }

    function getCourseCornerCountText(context, root, info, course)
    {
        if (info == nil && course != nil)
            info = getCourseInfo(course);

        var corner = "---";
        if (info.corner != nil && info.corner > -1)
            corner = info.corner;
    
        return corner;
    }

    function getCourseName(context, course_code)
    {
        var info = getCourseInfo(course_code);
        if (info.name == "")
            return gtengine::MSpecDB::getCourseLabel(course_code);
        else
        {
            var cursor_project = context.getCursorProject();
            var course_name = context.translate(cursor_project, "CourseName", info.name);
            return course_name
        }
    }

    function getCourseSpecText(context, root, course, detail = false)
    {
        var info = getCourseInfo(course);
        var course_label = main::gtengine::MSpecDB::getCourseLabel(course_code);
        var length = getCourseLengthText(context, root, info);
        var elevation = getCourseHeightText(context, root, info);
        var straight = getCourseLongestStraightText(context, root, info);
        var corner = getCourseCornerCountText(context, root, info);

        var course_name = context.translate(root, "CourseName", info.name);
        if (isReverse(course_code))
        {
            var reverse = context.translate(root, "CourseData", "direction_reverse");
            course_name = "%{course_name} / %{reverse}";
        }

        if (detail)
        {
            var key_guide = "guide_" + course_label;
            var guide = context.translate(root, "CourseData", key_guide);
            var format_txt = context.translate(root, "SpecFormat", "course_spec_ditail");
            var spec_txt = format_txt.build(course_name, length, elevation, straight, corner, guide);
            return spec_txt;
        }
        else
        {
            var format_txt = context.translate(root, "SpecFormat", "course_spec");
            var spec_txt = format_txt.build(course_name, length, elevation, straight, corner);
            return spec_txt;
        }
    }

    function haveDriftTrial(course)
    {
        var course_info = getCourseInfo(course);
        if (course_info != nil)
            return course_info.drift_ok.toBool();
        else
            return true;
    }

    function getCourseList(category, is_standard, is_reverse, drift_ok, kart_ok)
    {
        var query = "SELECT code FROM %{TABLE_NAME}";

        var conditions = [];
        if (category != nil)
            conditions.push("category='%s'".format(category));

         if (is_standard != nil)
            conditions.push("is_standard='%d'".format(is_standard.toInt()));

        if (is_reverse != nil)
            conditions.push("is_reverse='%d'".format(is_reverse.toInt()));

        if (drift_ok != nil)
            conditions.push("drift_ok='%d'".format(drift_ok.toInt()));

        if (kart_ok != nil)
            conditions.push("kart_ok='%d'".format(kart_ok.toInt()));

        if (conditions.size > 0)
            query += " WHERE " + conditions.join(" AND ");

        var rows = SQLITE.executeQuery(query);
        var result = Array(rows.size);
        for (var i = 0; i < rows.size; i++)
            result[i] = rows[i][0].toULong();
        
        return result;
    }

    function getCourseListWithinMaxEntry(max)
    {
        var res = [];
        for (var i = 0; i < sEnableCourseList.size; i++)
        {
            var course = sEnableCourseList[i];
            if (main::gtengine::MSpecDB::getCourseMaxEntry(course) < max)
                ;
            else
                res.push(course);
        }

        return res;
    }

    function getCourseSearch(where_query)
    {
        var rows = executeSelect(["code"], where_query);
        var result = Array(rows.size);
        for (var i = 0; i < rows.size; i++)
            result[i] = rows[i][0];

        return result;
    }

    function getCourseSearch2(column_name, value)
    {
        var rows = executeSelect(["code"], "WHERE %s='%s'".format(column_name.toString(), value.toString()));
        var result = Array(rows.size);
        for (var i = 0; i < rows.size; i++)
            result[i] = rows[i][0];

        return result;
    }

    function getCategoryList()
    {
        var query = "SELECT DISTINCT category FROM %{TABLE_NAME}";
        var rows = SQLITE.executeQuery(query);
        var result = Array(rows.size);
        for (var i = 0; i < rows.size; i++)
            result[i] = rows[i][0];

        return result;
    }

    static OnlineCourseListWithoutTemplate = 0;
    static OnlineCourseListWithTemplate = 1;
    static OnlineCourseListOnlyTemplate = 2;

    function getOnlineCourseList(sortKey, asc = true, selectMode = OnlineCourseListWithoutTemplate)
    {
        var template;
        switch (selectMode)
        {
            case OnlineCourseListWithoutTemplate:
                template = " AND category <> 'template' ";
                break;

            case OnlineCourseListOnlyTemplate:
                template = " AND category = 'template' ";
                break;

            case OnlineCourseListWithTemplate:
            default:
                template = "";
                break;
        }

        var sort = sortKey == nil ? "" : " ORDER BY %{sortKey}%s".format(asc ? "" : " DESC");
        var query = "SELECT DISTINCT code FROM %{TABLE_NAME} WHERE online='1' %{template} %{sort}";
        var rows = SQLITE.executeQuery(query);

        var result = Array(rows.size);
        for (var i = 0; i < rows.size; i++)
            result[i] = rows[i][0].toULong();

        return result;
    }

    function getEntryMax(course_code)
    {
        var course_info = CourseData::getCourseInfo(course_code);
        var entry_max = GLOBAL_STATUS.user_profile.option.monitor_use_parallax_view ? course_info.entry_max_3d : course_info.entry_max;
        if (entry_max == nil)
            entry_max = 1;

        return entry_max;
    }

    class CourseParameter
    {
        attribute course_code;
        attribute rain_situation;
        attribute night_situation;

        method __init__(course_code, rain_situation, night_situation)
        {
            self.course_code = course_code;
            self.rain_situation = rain_situation;
            self.night_situation = night_situation;
        }
    }

    function getCourseParameters(course_list, category, is_standard, is_reverse, drift_ok, kart_ok)
    {
        var query = "SELECT code rain_situation night_situation FROM %{TABLE_NAME}";
        var conditions = [];

        if (category != nil)
            conditions.push("category='%s'".format(category));

         if (is_standard != nil)
            conditions.push("is_standard='%d'".format(is_standard.toInt()));

        if (is_reverse != nil)
            conditions.push("is_reverse='%d'".format(is_reverse.toInt()));

        if (drift_ok != nil)
            conditions.push("drift_ok='%d'".format(drift_ok.toInt()));

        if (kart_ok != nil)
            conditions.push("kart_ok='%d'".format(kart_ok.toInt()));

        if (conditions.size > 0)
            query += " WHERE " + conditions.join(" AND ");

        var rows = SQLITE.executeQuery(query);
        var result = Array();
        for (var i = 0; i < rows.size; i++)
        {
            var course_code = rows[i][0].toULong();
            var rain_situation = rows[i][1].toBool();
            var night_situation = rows[i][2].toBool();

            result.push(CourseParameter(course_code, false, false));
            if (rain_situation)
                result.push(CourseParameter(course_code, true, false));

            if (night_situation)
                result.push(CourseParameter(course_code, false, true));
        }
        
        return result;
    }
}