module PROJECT::ROOT
{
    static current_unit = nil;
    static is_maxspeed = nil;

	// If you add more events to Power & Speed, you have to add them here
    module UnitData
    {
        static mt400_testcourse  = "0_400";
        static mt1000_testcourse = "0_1000";
        static mtmax_testcourse  = "MAXSPEED";
        static mt400_lasvegas    = "LASVEGAS";
    }

    function onInitialize(context)
    {
        hidden.visible = false;

        var quick_work = main::menu::MQuickWork();
        var crs = quick_work.courseLabel;
        var race_code = quick_work.raceLabel;
        var unit = main::game.machine_record.getMTUnit(UnitData[race_code]);
        if (unit == nil)
        {
            return;
        }
		
        current_unit = unit;
        is_maxspeed = (race_code == "mtmax_testcourse");
        Title::label.text = getTitleName(context, race_code, crs);
        Head::time.visible = !is_maxspeed;
        Head::speed.visible = is_maxspeed;
        refresh(context);
    }

    function onFinalize(context)
    {
        ScrollBox::SelectBox.clearWindow(context);
        current_unit = nil;
        is_maxspeed = nil;
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            default:
                return EVENTRESULT_CONTINUE;
        }
    }

    function onCancel(context, event, item)
    {
        main::sound.play("cancel");
        start_page(context, QuickRoot);
        return EVENTRESULT_FILTER;
    }

    function refresh(context)
    {
        var unit = current_unit;
		var rank_num = is_maxspeed ? unit.getRankNumMaxSpeed() : unit.getRankNum();

        var quick_work = main::menu::MQuickWork();
        var race_code = quick_work.raceLabel;
        ScrollBox::SelectBox.clearWindow(context);
        for (var i = 0; i < 10; i++)
        {
			var item = (i % 2) == 0 ? hidden::Item0.doCopy() : hidden::Item1.doCopy();
            item["rank"].text = (i + 1).toString();

            if (i < rank_num)
            {
                item["car"].text = unit.getCarName(i);
                item["car"].abbreviate();
                item["date"].text = unit.getDate(i);
                item["time"].text = is_maxspeed ? unit.getBestSpeed(i) : unit.getBestTime(i);
            }
            ScrollBox::SelectBox.appendChild(context, item);
        }
    }
}
  
module PROJECT::ROOT::ScrollBox::SelectBox
{
    function onValueChanged(context, index)
    {
    }

    function onActivate(context, event)
    {
        var unit = current_unit;
        var rank_num = is_maxspeed ? unit.getRankNumMaxSpeed() : unit.getRankNum();

        var index = SelectBox.index;
        if (index >= rank_num)
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        if (openConfirmDialog(context, DIALOG_QUERY, context.translate(ROOT, "do you remove?")))
        {
            if (is_maxspeed)
                unit.deleteEntryMaxSpeed(SelectBox.index);
            else
                unit.deleteEntry(SelectBox.index);

            ROOT.visible = false;
            SelectBox.outFocus(ROOT);
            refresh(context);
            SelectBox.callFocus(ROOT);
            ROOT.visible = true;
        }
        return EVENTRESULT_FILTER;
    }
}