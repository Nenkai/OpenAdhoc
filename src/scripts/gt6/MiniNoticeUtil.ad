

//---------------------------------------------------------------------------------------
// MiniNoticeUtil.ad
//
// Utility module
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module MiniNoticeUtil
{
    static sWidgetList = [];
    sWidgetList.reserve(10);
    static EmphasizeThreshold = 10;

    class NoticeData
    {
        attribute valid_;
        attribute title_;
        attribute value_;
        attribute unit_;

        method __init__()
        {
            invalidate();
        }

        method isValid()
        {
            return self.valid_;
        }

        method validate(title, value, unit)
        {
            self.title_ = title;
            self.value_ = value;
            self.unit_ = unit;
            self.valid_ = true;
        }

        method invalidate()
        {
            self.valid_ = false;
            self.title_ = "";
            self.value_ = "";
            self.unit_ = "";
        }

        method updateValue(value)
        {
            self.value_ = value;
        }

        method getDataArray()
        {
            return [self.title_, self.value_, self.unit_];
        }
    }

    static sNoticeData = NoticeData();

    function notify(context, title, value, unit)
    {
        sNoticeData.validate(title, value, unit);

        sWidgetList.each_all(widget => 
        {
            widget.set(context, title, value, unit);
            widget.appear(context);
        });
    }

    function hide(context)
    {
        sNoticeData.invalidate();

        sWidgetList.each_all(widget => 
        {
            widget.disappear(context);
        });
    }

    function updateValue(context, value)
    {
        sWidgetList.each_all(widget => 
        {
            widget.setValue(context, value);
        });

        sNoticeData.updateValue(value);
    }

    function createCountValueText(value, threshold = EmphasizeThreshold)
    {
        if (value == nil)
            return nil;

        var ret;
        if (value <= threshold)
        {
            ret = COLOR_RED + value.toString();
        }
        else
            ret = value.toString();

        return ret;
    }

    function registerWidget(widget, context)
    {
        for (var i = 0; i < sWidgetList.size; ++i)
        {
            if (sWidgetList[i] == widget)
                return;
        }

        sWidgetList.push(widget);
        if (sNoticeData.isValid())
        {
            |var title, var value, var unit| = sNoticeData.getDataArray();
            widget.set(context, title, value, unit);
            widget.appear(context);
        }
    }

    function unregisterWidget(widget)
    {
        for (var i = 0; i < sWidgetList.size; ++i)
        {
            if (sWidgetList[i] == widget)
            {
                sWidgetList.erase(i);
                break;
            }
        }
    } 
}
