













module CourseRoot
{
    hidden.visible = false;
    hidden::CourseThumb::map.from_disk = false;

    method open(context, from_prev_page)
    {
        var gp = gArcadeSequence.getGP();
        if (gp != nil)
        {
            var course_code = gp.event.track.course_code;
            if (course_code != main::gtengine::MSpecDB::NO_CODE64)
            {

                if (from_prev_page)
                {
                    foreach (var crs_param in gEnableCourses)
                    {
                        if (course_code == crs_param.course_code_)
                            gArcadeSequence.setSelectedCourse(crs_param, nil, nil);
                    }

                    gArcadeSequence.moveNextPage(context);
                } else {
                    gArcadeSequence.movePrevPage(context);
                }
                return false;

            }
        }

        context.pushPage(CourseRoot);
        return true;
    }


    method close(context)
    {
        LeaveDetectUtil::end(context);

        ArcadeProject::ignorePadEvent(true, true);

        self.FadeEffect.reverse = true;
        self.FadeEffect.on_effect_end = self.close_end;
        self.FadeEffect.start();
    }


    method close_end(context)
    {
        self.FadeEffect.reverse = false;
        self.FadeEffect.reset();
        context.closePage(self);

        ArcadeProject::ignorePadEvent(false);
    }

    method reset_widgets()
    {
        CourseMap::map.image_path = "";
        CourseMap::reflected_map.image_path = "";

        official_name.text = "";

        Info.reset();

        DetailBox.reset();
    }

    method onInitialize(context)
    {
        gArcadeSequence.setSelectedCourse(nil, nil, nil);

        CourseRoot.setFocus(nil);

        OverLapRoot.onCourseSelect(context);

        reset_widgets();

        self.FadeEffect.start();

        context.pushEvent(main::menu::MFunctionEvent(postInitialize, context));
    }

    method postInitialize(context)
    {
        CourseFinder.appear(true);

        self.insensitive = false;

        if (0 < ArcadeProject.gLeaveDetectTime)
        {
            LeaveDetectUtil::reset(context);
            LeaveDetectUtil::begin(context, ArcadeProject.gLeaveDetectTime, CourseRoot, ArcadeProject.onLeaveDetect, nil, true);
        }
    }


    method onFinalize(context)
    {}

    method onRealize(context)
    {

        Info::logo.image_path = "";
        CourseMap::map.image_path = "";
        CourseMap::reflected_map.image_path = "";
    }

    method onKeyPress(context, event)
    {
        LeaveDetectUtil::activated(context, event);
        return EVENTRESULT_CONTINUE;
    }


    function hasAvailableCars(course_code)
    {
        if ("demo" == GetVersionBranch())
            return true;

        if (main::GAME_STATUS.user_profile.option.limit_favorite_car_only &&
            main::GAME_STATUS.user_profile.option.hasFavoriteCar())
        {
            var cars = main::GAME_STATUS.user_profile.option.favorite_cars;
            var is_dirt = gtengine::MSpecDB::isDirtSnow(course_code) ? true : nil;

            var res = CarData::getCarList(nil, nil, is_dirt, nil);

            res.sort();

            var count = 0;
            foreach (var car_code in cars)
            {

                if (-1 < res.bsearch(car_code))
                {
                    count++;
                }
            }

            return 0 < count;
        }

        return true;
    }

    module CourseFinder
    {
        class TabClass
        {
            attribute id_;
            attribute tab_w_;
            attribute initial_data_;

            method __init__(id, tab_w)
            {
                self.id_ = id;
                self.tab_w_ = tab_w;
                self.initial_data_ = nil;

                if (!self.tab_w_.defined('id_'))
                    self.tab_w_.defineAttribute('id_');

                self.tab_w_.id_ = self.id_;
            }

            method set_finder(context, finder)
            {
                finder.replaceFolder(context, self.initial_data_);
            }
        }

        module TAB_TYPE 
        {
            static CIRCUIT = "circuit";
            static ORIGINAL = "original";
            static CITY = "city";
            static SNOW_DIRT = "snow_dirt";
            static EDIT = "edit";
            static KIOSK = "kiosk";
        }

        static sDuration;
        static sCurrentTab;
        static sFocusIndex;sFocusIndex = 0;
        attribute tabs_;
        attribute finder_;

        method change_tab(context, id, focus_index=0, on_initialize=false)
        {
            foreach (var tab in self.tabs_)
            {
                if (id == tab.id_)
                {
                    self.sCurrentTab = tab;
                    tab.tab_w_.active = true;
                } 
                else 
                {
                    tab.tab_w_.active = false;
                }
            }

            Body::empty_message::FadeEffect.reset();
            Body::empty_message.visible = false;

            self.sCurrentTab.initial_data_.focus_index_ = focus_index;
            self.sCurrentTab.set_finder(context, self.finder_);

            var item_count = self.finder_.getItemCount();
            if (item_coun> 0)
            {
                PictureFlowingLayer.setItemCount(context, item_count);
            
                Tabs.focus_navigate(true);
            
                if (!on_initialize)
                    context.pushEvent(main::menu::MFunctionEvent(self.finder_.onFocus, context, CourseRoot));
            }
            else
            {
                switch (id)
                {
                    case TAB_TYPE::EDIT:
                        Body::empty_message::FadeEffect.restart();
                        Body::empty_message.text = context.translate(CourseRoot, "MESSAGE_WHEN_EDIT_COURSES_ARE_EMPTY");
                        Body::empty_message.visible = true;
                        break;

                    default:
                        Body::empty_message::FadeEffect.restart();
                        Body::empty_message.text = context.translate(CourseRoot, "MESSAGE_WHEN_COURSES_ARE_EMPTY");
                        Body::empty_message.visible = true;
                        break;
                }

                PictureFlowingLayer.setItemCount(context, 0);
            }
        }

        method getTab(tab_id)
        {
            foreach (var tab in self.tabs_)
            {
                if (tab_id == tab.id_)
                    return tab;
            }
        }

        method appear(on_root_open=false) 
        {
            ArcadeProject::ignorePadEvent(true);

            var end_move = method(context) 
            {
                self.insensitive = false;
                context.pushEvent(main::menu::MFunctionEvent(self.finder_.onFocus, context, CourseRoot));
                ArcadeProject::ignorePadEvent(false);
                self.MoveEffect.on_effect_end = nil;
            }

            self.MoveEffect.reverse = false;

            if (on_root_open)
                self.MoveEffect.setStartDuration(0, self.sDuration);
            else
                self.MoveEffect.setStartDuration(0, 0.0);

            self.MoveEffect.on_effect_end = self.*end_move;
            self.MoveEffect.start();
        }

        method hide(context, warp)
        {
            self.insensitive = true;
            CourseRoot.setFocus(nil);

            BalloonTip.reset_value();

            if (warp)
            {
                self.MoveEffect.reverse = true;
                self.MoveEffect.start();
                self.MoveEffect.warp();
            } 
            else 
            {
                self.MoveEffect.reverse = true;
                self.MoveEffect.start();
            }
        }

        method onLoad(context)
        {
            self.sDuration = self.MoveEffect.getStartDuration(0);
        }
        
        method onUnLoad(context)
        {
            self.sDuration = nil;
        }

        method onInitialize(context)
        {

            if (main::GAME_STATUS.user_profile.option.limit_favorite_course_only &&
                main::GAME_STATUS.user_profile.option.hasFavoriteCourse())
            {
                self.tabs_ = [
                    TabClass(TAB_TYPE::KIOSK, Tabs::Kiosk)
                ];
            }
            else if ("demo" == GetVersionBranch())
            {
                self.tabs_ = 
                [
                    //TabClass(TAB_TYPE::ORIGINAL, Tabs::Original),
                    TabClass(TAB_TYPE::CIRCUIT, Tabs::Circuit)
                    //TabClass(TAB_TYPE::CITY, Tabs::City), 
                    //TabClass(TAB_TYPE::SNOW_DIRT, Tabs::SnowDirt), 
                    //TabClass(TAB_TYPE::EDIT, Tabs::Edit)
                ];
            }
            else
            {
                self.tabs_ = 
                [
                    TabClass(TAB_TYPE::ORIGINAL, Tabs::Original),
                    TabClass(TAB_TYPE::CIRCUIT, Tabs::Circuit), 
                    TabClass(TAB_TYPE::CITY, Tabs::City), 
                    TabClass(TAB_TYPE::SNOW_DIRT, Tabs::SnowDirt), 
                    TabClass(TAB_TYPE::EDIT, Tabs::Edit)
                ];
            }

            for (var it = Tabs.first; it != nil; it = it.next_widget)
            {
                if (!it.is_face)
                    it.visible = false;
            }

            foreach (var tab in self.tabs_)
            {
                var initial_data;
                if (tab.id_ == TAB_TYPE::EDIT)
                    initial_data = self.makeInitialDataForEditCourse(context);
                else
                    initial_data = self.makeInitialDataForCourse(context, tab.id_);

                tab.initial_data_ = initial_data;
            
                if (1 < self.tabs_.size)
                    tab.tab_w_.visible = true;
            }

            var dummy_initial_data = UIKitProject::FinderRoot.InitialData(UIKitProject::FinderRoot.makeCandidates([]));
            self.finder_ = UIKitProject::FinderRoot.setCopy(context, Body::Composite, dummy_initial_data, false);

            if (self.sCurrentTab == nil)
                self.sCurrentTab = self.tabs_[0];

            change_tab(context, self.sCurrentTab.id_, self.sFocusIndex, true);
            self.sFocusIndex = 0;

            hide(context, true);
        }

        method onFinalize(context)
        {
            context.removeTimeOut("change_course");
            context.removeTimeOut("change_edit_course");

            if (self.finder_ != nil)
            {
                var parent = self.finder_.parent;
                parent.removeChild(context, self.finder_);
                self.finder_ = nil;
            }
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            self.sCurrentTab = nil;
            self.sFocusIndex = 0;
            gArcadeSequence.movePrevPage(context);

            return EVENTRESULT_FILTER;
        }

        method set_course(context, crs_param)
        {
            var course_code = crs_param.course_code_;
            var course_info = CourseData::getCourseInfo(course_code);

            var delay_load_complete = method(context)
            {
                CourseMap.FadeActor.start();
            };

            CourseMap::map.on_delay_load_complete = self.*delay_load_complete;
            CourseMap::map.image_path = "piece/course_map_LL/%{course_info.map}.img";
            CourseMap::reflected_map.image_path = "piece/course_map_LL/%{course_info.map}.img";
            CourseMap.FadeActor.reset();

            var course_name_i18n = context.translate(CourseRoot, "CourseNameI18n", course_info.name).upcase();
            var is_reverse = CourseData::isReverse(course_code);
            if (is_reverse)
            {
                var reverse = context.translate(CourseRoot, "CourseData", "direction_reverse_not_asian_language").upcase();
                course_name_i18n += " / %{reverse}";
            }

            if (crs_param.weather_changeable_)
            {
                var change_weather = context.translate(CourseRoot, "CourseData", "track_change_weather_not_asian_language").upcase();
                course_name_i18n += " / %{change_weather}";
            }
            else if (crs_param.rain_situation_)
            {
                var rain = context.translate(CourseRoot, "CourseData", "track_condition_rain_not_asian_language").upcase();
                course_name_i18n += " / %{rain}";
            }
            else if (crs_param.snow_situation_)
            {
                var snow = context.translate(CourseRoot, "CourseData", "track_condition_snow_not_asian_language").upcase();
                course_name_i18n += " / %{snow}";
            }
            if (crs_param.time_progress_speed_ > 0)
            {
                var change_time = context.translate(CourseRoot, "CourseData", "track_change_time_not_asian_language").upcase();
                course_name_i18n += " / %{change_time}";
            }
            else if (!crs_param.is_day_)
            {
                var night = context.translate(CourseRoot, "CourseData", "track_condition_night_not_asian_language").upcase();
                course_name_i18n += " / %{night}";
            }

            official_name.text = course_name_i18n;
            official_name.TransientReset();

            Info.set(context, course_info);

            DetailBox.setCourse(context, course_info);
        }

        method cb_init_course(context, candidate_data, item_w, arg)
        {
            |var crs_param, var is_enable| = candidate_data.value_;
            var course_code = crs_param.course_code_;

            item_w.map.from_disk = true;
            item_w.setInfo(context, course_code);

            var icon_weather;
            if (crs_param.rain_situation_)
                icon_weather = gtengine::DecisiveWeather::RAINY;
            else if (crs_param.snow_situation_)
                icon_weather = gtengine::DecisiveWeather::SNOWY;
            else
                icon_weather = gtengine::DecisiveWeather::SUNNY;

            item_w.Icon::Weather.setup_arcade(context, icon_weather, crs_param.start_datetime_.hour, crs_param.time_progress_speed_, crs_param.weather_changeable_);
            item_w.disable.visible = !is_enable;
        }

        method cb_selected_course(context, folder_data, func_close, arg)
        {
            var candidate_data = folder_data.getItemData();
            |var crs_param, var is_enable| = candidate_data.value_;
            var course_code = crs_param.course_code_;

            if (!is_enable)
            {
                main::sound.play("disable");
                return;
            }

            if (!hasAvailableCars(course_code))
            {
                main::sound.play("disable");

                var msg = context.translate(CourseRoot, "Arcade", "cannot_select_in_this_version");
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
                return;
            }

            context.target_widget = nil;

            gArcadeSequence.setSelectedCourse(crs_param, nil, nil);

            self.sFocusIndex = candidate_data.item_index_;
            gArcadeSequence.moveNextPage(context);
        }


        method cb_focused_course(context, candidate_data, item_w, arg)
        {
            |var crs_param, var is_enable| = candidate_data.value_;
            var course_code = crs_param.course_code_;
            var course_info = CourseData::getCourseInfo(course_code);
            var is_reverse = course_info.is_reverse;

            var course_name = context.translate(CourseRoot, "CourseName", course_info.name);
            if (is_reverse)
            {
                var reverse = context.translate(CourseRoot, "CourseData", "direction_reverse");
                course_name += " / %{reverse}";
            }

            if (crs_param.weather_changeable_)
            {
                var change_weather = context.translate(CourseRoot, "CourseData", "track_change_weather");
                course_name += " / %{change_weather}";
            }
            else if (crs_param.rain_situation_)
            {
                var rain = context.translate(CourseRoot, "CourseData", "track_condition_rain");
                course_name += " / %{rain}";
            }
            else if (crs_param.snow_situation_)
            {
                var snow = context.translate(CourseRoot, "CourseData", "track_condition_snow");
                course_name += " / %{snow}";
            }

            if (crs_param.time_progress_speed_ > 0)
            {
                var change_time = context.translate(CourseRoot, "CourseData", "track_change_time");
                course_name += " / %{change_time}";
            }
            else if (!crs_param.is_day_)
            {
                var night = context.translate(CourseRoot, "CourseData", "track_condition_night");
                course_name += " / %{night}";
            }

            BalloonTip.set_value(context, item_w.map, course_name, 20);

            CourseRoot.reset_widgets();

            PictureFlowingLayer.setIndex(context, candidate_data.item_index_, course_code);

            context.addTimeOut("change_course", set_course, context, crs_param);
            context.setTimeOut("change_course", 0.5);
        }

        method cb_changed_course(context, candidate_data, item_w, old_candidate_data, old_item_w, arg)
        {
            PictureFlowingLayer::ListBox.interpolate_ratio = 0.2;
        }

        method makeInitialDataForCourse(context, tab_id)
        {
            var candidates = getCourseCandidates(context, tab_id);

            var initial_data = UIKitProject::FinderRoot.InitialData();
            initial_data.view_type_ = UIKitProject::FinderRoot::ViewType::SCROLL_H;
            initial_data.extended_item_ = hidden::CourseThumb;
            initial_data.candidates_ = candidates;
            initial_data.cb_init_item_ = self.cb_init_course;
            initial_data.cb_on_activate_ = self.cb_selected_course;
            initial_data.cb_focus_enter_ = self.cb_focused_course;
            initial_data.cb_change_focus_ = self.cb_changed_course;
            initial_data.h_scrollbar_ = Body::HScrollbar;

            initial_data.import_iconbox_parameter_ = Body::Composite::IconBox;
            return initial_data;
        }

        function getCourseCandidates(context, tab_id)
        {
            var courses = [];

            switch (tab_id)
            {
                case TAB_TYPE::CIRCUIT:
                case TAB_TYPE::ORIGINAL:
                case TAB_TYPE::CITY:
                case TAB_TYPE::SNOW_DIRT:
                    var category_courses = CourseData::getCourseList("%{tab_id}", nil, nil, nil, nil);
                    foreach (var crs_param in gEnableCourses)
                    {
                        if (0 > category_courses.indexOf(crs_param.course_code_))
                            continue;
                        
                        var course_label = main::gtengine::MSpecDB::getCourseLabel(crs_param.course_code_);
                        if (GAME_STATUS.user_profile.game_flags.getFlag("COURSE_AVAILABLE", course_label) == false)
                            continue;
                        
                        courses.push(crs_param);
                    }
                    break;

                case TAB_TYPE::KIOSK:

                    var favorite_courses = main::GAME_STATUS.user_profile.option.favorite_courses;
                    var course_codes = [];
                    foreach (var course_code in favorite_courses)
                    {
                        for (var i = 0; i < favorite_courses.size; i++)
                        {
                            if (course_code == gtengine::MSpecDB::NO_CODE64)
                                break;
                            course_codes.push(course_code);
                        }
                    }

                    foreach (var crs_param in gEnableCourses)
                    {
                        if (-1 < course_codes.indexOf(crs_param.course_code_))
                            courses.push(crs_param);
                    }

                    var cmp_by_corner = function(crs_param_a, crs_param_b) {
                        var crs_info_a = CourseData::getCourseInfo(crs_param_a.course_code_);
                        var crs_info_b = CourseData::getCourseInfo(crs_param_b.course_code_);
                        if (crs_info_a.corner < crs_info_b.corner)
                            return true;
                        else
                            return false;
                    }
                    courses.sort(cmp_by_corner);
                    break;
            }

            var drift_courseres = CourseData::getCourseList(nil, nil, nil, true, nil);
            var candidates = Array();
            foreach (var crs_param in courses)
            {
                var is_enable = true;
                if (ArcadeProject::ArcadeModeEnum::SINGLE_RACE == gArcadeSequence.getArcadeMode())
                {
                    var course_info = CourseData::getCourseInfo(crs_param.course_code_);
                    if (course_info.entry_max == 1)
                        is_enable = false;
                }

                if (ArcadeProject::ArcadeModeEnum::DRIFT_ATTACK == gArcadeSequence.getArcadeMode())
                {
                    var course_info = CourseData::getCourseInfo(crs_param.course_code_);
                    if (!course_info.drift_ok)
                        is_enable = false;
                }
                else if (ArcadeProject::ArcadeModeEnum::SPLIT_BATTLE == gArcadeSequence.getArcadeMode())
                {

                    if (crs_param.weather_changeable_ ||
                        crs_param.rain_situation_ ||
                        crs_param.snow_situation_)
                    {
                        is_enable = false;
                    }
                }

                candidates.push(UIKitProject::FinderRoot::CandidateData([crs_param, is_enable]));            
            }

            return candidates;
        }

        method set_edit_course(context, edit_course_data)
        {
            var delay_load_complete = method(context)
            {
                CourseMap.FadeActor.start();
            };
            CourseMap::map.on_delay_load_complete = self.*delay_load_complete;
            CourseMap::map.image_path = edit_course_data.thumbnail_L_filename;
            CourseMap::reflected_map.image_path = edit_course_data.thumbnail_L_filename;
            CourseMap.FadeActor.reset();

            var course_name_i18n = context.translate(CourseRoot, "CourseNameI18n", edit_course_data.genre);
            official_name.text = course_name_i18n;
            official_name.TransientReset();

            Info.set_edit_course(context, edit_course_data);

            DetailBox.setEditCourse(context, edit_course_data);
        }

        method cb_init_edit_course(context, candidate_data, item_w, arg)
        {
            |var edit_course_data, var course_pathway, var is_enable| = candidate_data.value_;

            item_w.map.from_disk = true;
            item_w.setEditCourseInfo(context, edit_course_data);
            item_w.Icon.Weather.setup_edit_course(context, edit_course_data);
            item_w.disable.visible = !is_enable;
        }

        method cb_selected_edit_course(context, folder_data, func_close, arg)
        {
            var candidate_data = folder_data.getItemData();
            |var edit_course_data, var course_pathway, var is_enable| = candidate_data.value_;
            var course_code = course_pathway.TemplateCourseCode;
            var course_label = main::gtengine::MSpecDB::getCourseLabel(course_code);

            if (!is_enable)
            {
                main::sound.play("disable");
                return;
            }

            gArcadeSequence.setSelectedCourse(nil, course_pathway, edit_course_data);

            self.sFocusIndex = candidate_data.item_index_;
            gArcadeSequence.moveNextPage(context);
        }

        method cb_focused_edit_course(context, candidate_data, item_w, arg)
        {
            |var edit_course_data, var course_pathway, var is_enable| = candidate_data.value_;
            var course_code = course_pathway.TemplateCourseCode;

            BalloonTip.set_value(context, item_w, edit_course_data.title, 20);

            CourseRoot.reset_widgets();

            PictureFlowingLayer.setIndex(context, candidate_data.item_index_, course_code);

            context.addTimeOut("change_edit_course", set_edit_course, context, edit_course_data);
            context.setTimeOut("change_edit_course", 0.5);
        }

        method cb_changed_edit_course(context, candidate_data, item_w, old_candidate_data, old_item_w, arg)
        {
            PictureFlowingLayer::ListBox.interpolate_ratio = 0.2;
        }

        method makeInitialDataForEditCourse(context, tab_id)
        {
            var data_list = CourseFileUtil::getFavoriteList();
            var values = Array(data_list.size);
            for (var i = 0; i < data_list.size; i++)
            {
                var edit_course_data = data_list[i];
                var st = main::pdistd::ReadFile(edit_course_data.filename);
                var buf = st["buffer"];
                var course_pathway = main::gtengine::MCoursePathway();
                course_pathway.deserialize(buf);

                var is_enable = true;

                if (ArcadeProject::ArcadeModeEnum::SPLIT_BATTLE == gArcadeSequence.getArcadeMode())
                {

                    if (edit_course_data.weather_value0 == 1.0 && edit_course_data.weather_accel == 0)
                        is_enable = true;
                    else
                        is_enable = false;
                }

                values[i] = [edit_course_data, course_pathway, is_enable];
            }

            var initial_data = UIKitProject::FinderRoot.InitialData();
            initial_data.view_type_ = UIKitProject::FinderRoot::ViewType::SCROLL_H;

            initial_data.extended_item_ = hidden::CourseThumb;
            initial_data.candidates_ = UIKitProject::FinderRoot.makeCandidates(values);
            initial_data.tint_visible_ = false;
            initial_data.cb_init_item_ = self.cb_init_edit_course;
            initial_data.cb_on_activate_ = self.cb_selected_edit_course;
            initial_data.cb_focus_enter_ = self.cb_focused_edit_course;
            initial_data.cb_change_focus_ = self.cb_changed_edit_course;
            initial_data.h_scrollbar_ = Body::HScrollbar;
            initial_data.import_iconbox_parameter_ = Body::Composite::IconBox;

            return initial_data;
        }
    }

    module CourseFinder::Tabs
    {
        attribute activate_tab_w_;


        method onActivate(context, event)
        {
            if (event.widget == CourseFinder.sCurrentTab.tab_w_)
                return EVENTRESULT_FILTER;

            main::sound.play("tab_switch");

            CourseFinder.change_tab(context, event.widget.id_);
            return EVENTRESULT_FILTER;
        }

        method focus_navigate(ON)
        {
            if (ON)
            {

                for (var it = self.first; it != nil; it = it.next_widget)
                {
                    if (!it.is_face && CourseFinder.sCurrentTab != nil)
                        it.insensitive = it != CourseFinder.sCurrentTab.tab_w_;
                }
            }
            else
            {

                for (var it = self.first; it != nil; it = it.next_widget)
                {
                    if (!it.is_face)
                        it.insensitive = false;
                }
            }
        }

        method onFocusLeave(context, event)
        {
            focus_navigate(true);
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context, event)
        {
            BalloonTip.reset_value();
            focus_navigate(false);
            return EVENTRESULT_FILTER;
        }
    }

    module Info
    {
        method set(context, course_info)
        {

            var categories_map = ["original": "CATEGORY_ORIGINAL",
                                  "city": "CATEGORY_CITY",
                                  "circuit": "CATEGORY_REAL_CIRCUIT",
                                  "snow_dirt": "SNOW_AND_DIRT",
                                  "kart": "CATEGORY_KART"];

            self.Info::category.text = context.translate(CourseRoot, "CourseData", "CATEGORY_UPCASE_%{course_info.category}");
            var delay_load_complete = method(context)
                {
                    self.Info::FadeEffect.start();
                };

            self.Info::logo.on_delay_load_complete = self.*delay_load_complete;
            self.Info::logo.image_path = "piece/course_logo_L/%{course_info.logo}.img";
            self.Info::flag.image_path = "piece/flag_menu/%{course_info.flag}.img";

            var is_ps3 = !CourseData::isPS2(course_info.code);
            self.Info::premium.visible = is_ps3;
            self.Info::standard.visible = !is_ps3;
            self.Info::FadeEffect.reset();
        }

        method set_edit_course(context, edit_course_data)
        {
            self.Info::category.text = context.translate(CourseRoot, "CourseData", "CATEGORY_UPCASE_course_maker");
            var delay_load_complete = method(context)
            {
                self.Info::FadeEffect.start();
            };

            self.Info::logo.on_delay_load_complete = nil;
            self.Info::logo.image_path = "";
            self.Info::flag.on_delay_load_complete = self.*delay_load_complete;
            self.Info::flag.image_path = "piece/flag_menu/PDI.img";

            var is_ps3 = !CourseData::isPS2(edit_course_data.genre);
            self.Info::premium.visible = is_ps3;
            self.Info::standard.visible = !is_ps3;
            self.Info::FadeEffect.reset();
        }

        method reset()
        {
            self.Info::logo.image_path = "";
            self.Info::flag.image_path = "";
            self.Info::category.text = "";
            self.Info::premium.visible = false;
            self.Info::standard.visible = false;
            self.Info::FadeEffect.reset();
        }
    }

    module DetailBox
    {
        function getDateTime(context, root, d)
        {
            var time = main::pdistd::MTime();
            time.setBySecond(d);
            var local_time = time.toLocal();
            return context.translate(root, "DateTime", "FORMAT_DATE_TIME").build(
                local_time.year,
                "%02d".format(local_time.month),
                "%02d".format(local_time.day),
                "%02d".format(local_time.hour),
                "%02d".format(local_time.minute));
        }

        method setCourse(context, course_info)
        {
            self.Straight.visible = true;
            self.Elevation.visible = true;
            self.Corner.visible = true;
            self.DateTime.visible = false;
            self.WeatherValue0.visible = false;
            self.InitialRetention.visible = false;
            self.WeatherAccel.visible = false;
            self.TimeProgressSpeed.visible = false;
            self.Author.visible = false;

            var end_fade = method(context) 
            {
                self.Length::value.text = CourseData::getCourseLengthText(context, CourseRoot, course_info);
                self.Length::value.TransientReset();
                
                self.Straight::value.text = CourseData::getCourseLongestStraightText(context, CourseRoot, course_info);
                self.Straight::value.TransientReset();
                
                self.Elevation::value.text = CourseData::getCourseHeightText(context, CourseRoot, course_info);
                self.Elevation::value.TransientReset();
                
                self.Corner::value.text = CourseData::getCourseCornerCountText(context, CourseRoot, course_info);
                self.Corner::value.TransientReset();
                
                self.FadeEffect.on_effect_end = nil;
            }

            self.FadeEffect.reset();
            self.FadeEffect.on_effect_end = self.*end_fade;
            self.FadeEffect.start();
        }

        method setEditCourse(context, edit_course_data)
        {
            self.DateTime.visible = true;
            self.WeatherValue0.visible = true;
            self.InitialRetention.visible = true;
            self.WeatherAccel.visible = true;
            self.TimeProgressSpeed.visible = true;
            self.Author.visible = edit_course_data.author != "";

            var end_fade = method(context)
            {
                self.Length::value.text = pdiext::MUnit::GetCourseLengthString(edit_course_data.length, true);
                self.Length::value.TransientReset();

                self.Straight::value.text = pdiext::MUnit::GetCourseLengthString(edit_course_data.straight, true);
                self.Straight::value.TransientReset();

                self.Elevation::value.text = pdiext::MUnit::GetCourseHeightString(edit_course_data.elevation, true);
                self.Elevation::value.TransientReset();

                self.Corner::value.text = edit_course_data.corner;
                self.Corner::value.TransientReset();

                self.DateTime.value.text = getDateTime(context, CourseRoot, edit_course_data.datetime);
                self.DateTime.value.TransientReset();

                self.WeatherValue0.value.text = ArcadeProject::Function::CourseMaker::getWeatherValue0DisplayString(context, CourseRoot, edit_course_data.weather_value0);
                self.WeatherValue0.value.TransientReset();

                self.InitialRetention.value.text = ArcadeProject::Function::CourseMaker::getInitialRetentionDisplayString(context, CourseRoot, edit_course_data.initial_retention);
                self.InitialRetention.value.TransientReset();

                self.WeatherAccel.value.text = ArcadeProject::Function::CourseMaker::getWeatherAccelDisplayValue(edit_course_data.weather_accel);
                self.WeatherAccel.value.TransientReset();

                self.TimeProgressSpeed.value.text = edit_course_data.time_progress_speed;
                self.TimeProgressSpeed.value.TransientReset();

                self.Author.value.text = edit_course_data.author;
                self.Author.value.TransientReset();

                self.FadeEffect.on_effect_end = nil;
            }
            self.FadeEffect.reset();
            self.FadeEffect.on_effect_end = self.*end_fade;
            self.FadeEffect.start();
        }

        method reset()
        {
            DetailBox::FadeEffect.on_effect_end = nil;
            DetailBox::FadeEffect.reset();
            DetailBox::Length::value.text = "";
            DetailBox::Straight::value.text = "";
            DetailBox::Elevation::value.text = "";
            DetailBox::Corner::value.text = "";
            DetailBox::DateTime::value.text = "";
            DetailBox::WeatherValue0.visible = false;
            DetailBox::WeatherValue0::value.text = "";
            DetailBox::InitialRetention.visible = false;
            DetailBox::InitialRetention::value.text = "";
            DetailBox::WeatherAccel.visible = false;
            DetailBox::WeatherAccel::value.text = "";
            DetailBox::TimeProgressSpeed.visible = false;
            DetailBox::TimeProgressSpeed::value.text = "";
            DetailBox::Author.visible = false;
            DetailBox::Author::value.text = "";
        }
    }

    module PictureFlowingLayer 
    {
        method setItemCount(context, item_count)
        {
            self.ListBox.setItemCount(0);
            self.ListBox.postRedraw();
            self.ListBox.setItemTemplate(context, hidden::Item);
            self.ListBox.setItemCount(item_count);
            self.ListBox.interpolate_ratio = 1.0;
        }

        method setIndex(context, index, course_code)
        {
            var course_img;
            var rows = CourseData::executeSelect(["map"], "WHERE code='%lu'".format(course_code));
            if (rows.size > 0)
                course_img = rows[0][0];
            else
                course_img = gtengine::MSpecDB::getCourseLabel(course_code);

            if (index < self.ListBox.getItemCount())
            {
                self.ListBox.focus_index = index;
                self.ListBox.append_pictures(context, index, course_img);
            }
        }

        method onFinalize(context)
        {
            self.ListBox.setItemCount(0);
        }

        module ListBox
        {
            method append_pictures(context, index, course_img)
            {
                var item = self.getItemWidget(index);
                if (item == nil)
                {
                    item = self.getItemWidget(index, context);

                    var pictureA = hidden::Picture.doCopy();
                    var pictureB = hidden::Picture.doCopy();
                    item.Area_A.appendChild(context, pictureA);
                    item.Area_B.appendChild(context, pictureB);
                    pictureA.initialize(context, course_img, 0);
                    pictureB.initialize(context, course_img, 1);
                }
            }

            method onVisibleNotify(context, indexes)
            {
                foreach (var i in indexes)
                {
                    if (!self.getItemVisible(i))
                    {
                        self.setItemWidget(i, context, nil);
                    }
                }
            }
        }
    }

    module hidden::Picture
    {
        attribute thread_;
        attribute target_area_;
        attribute course_img_;
        attribute picture_index_;

        method onInitialize(context)
        {
            self.ImageFace::ChaseActor.freeze();
            self.ImageFace::ChaseActor.target_x = self.ImageFace.x;
            self.ImageFace::ChaseActor.target_y = self.ImageFace.y;
            self.ImageFace::ChaseActor.reset();
        }

        method initialize(context, course_img, picture_index)
        {
            self.course_img_ = course_img;
            self.picture_index_ = picture_index;

            self.change_picture(picture_index);

            self.thread_ = Thread(self.chase_actor_change_target);
            self.thread_.start();

            return self;
        }

        method chase_actor_change_target(context)
        {
            while (true)
            {
                var target_x = pdistd::MRandom::GetValue(self.x, self.x + self.w);
                var target_y = pdistd::MRandom::GetValue(self.y, self.y + self.h);
                self.ImageFace.ChaseActor.target_x = target_x - self.ImageFace.w * 0.5;
                self.ImageFace.ChaseActor.target_y = target_y - self.ImageFace.h * 0.5;
                var sleep_time = 0.1 * pdistd::MRandom::GetValue(10, 20);
                Thread::Sleep(sleep_time);
            }
        }

        method start_animation()
        {
            self.ImageFace::FadeEffect.start();
            self.ImageFace::BlurX.restart();
            self.ImageFace::BlurY.restart();
        }

        method change_picture(picture_index)
        {

            var fade_start_delay = 0.1 * pdistd::MRandom::GetValue(30, 60);

            var scale = 0.01 * pdistd::MRandom::GetValue(50, 100);

            var velocity_x = pdistd::MRandom::GetValue(-50, 50);
            var velocity_y = pdistd::MRandom::GetValue(-50, 50);

            var blur_start_delay = 0.1 * pdistd::MRandom::GetValue(15, 45);

            var picture_paths = ["piece/course_img_01", "piece/course_img_02"];
            if (picture_index == nil)
                picture_index = pdistd::MRandom::GetValue(0, picture_paths.size);
            var picture_path = picture_paths[picture_index];

            self.ImageFace.scale = [scale, scale];
            self.ImageFace::FadeEffect.setStartDuration(1, fade_start_delay);
            self.ImageFace::FadeEffect.setInterpolationPeriod(1, fade_start_delay);
            self.ImageFace::FadeEffect.reset();

            self.ImageFace::ChaseActor.freeze();
            self.ImageFace::ChaseActor.velocity_x = velocity_x;
            self.ImageFace::ChaseActor.velocity_y = velocity_y;
            self.ImageFace::ChaseActor.restart();
            self.ImageFace::BlurX.setStartDuration(0, blur_start_delay);
            self.ImageFace::BlurY.setStartDuration(0, blur_start_delay);
            self.ImageFace::BlurX.reset();
            self.ImageFace::BlurY.reset();

            var fade_end = method(context)
            {
                self.ImageFace::FadeEffect.on_effect_end = nil;

                self.change_picture(self.picture_index_);
            }

            self.ImageFace::FadeEffect.on_effect_end = self.*fade_end;

            var delay_load_complete = method(context)
            {
                self.start_animation();

                self.ImageFace.on_delay_load_complete = nil;
            };

            var image_path = "%{picture_path}/%{self.course_img_}.img";
            if (self.ImageFace.image_path != image_path)
            {
                self.ImageFace.on_delay_load_complete = self.*delay_load_complete;
                self.ImageFace.image_path = image_path;
            }
            else
            {
                self.start_animation();
            }
        }

        method onFinalize(context)
        {
            if (self.thread_ != nil)
            {
                self.thread_.terminate();
                self.thread_ = nil;
            }
        }
    }
}