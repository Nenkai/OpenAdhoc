//---------------------------------------------------------------------------------------
// ConfirmDialog.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ROOT
{
    static sCurrentType = nil;
    static sResult = nil;
    static sCancelDisable = nil;
    static sEventLoop = nil;
    static sMessage = nil;
    static sTextRoot = nil;
    static sYesText = nil;
    static sNoText = nil;
    static sEqualized = nil;
    static sFocusWidget = nil;

    static sActivateSound = nil;
    static CursorVisibleWhenOpen = false;

    function open(context, type, message, title, root, yes_text, no_text, equalized = false)
    {
        CursorVisibleWhenOpen = context.cursor_visible;
        context.cursor_visible = true;

        sCurrentType = type;
        sMessage = message;
        sTextRoot = root;
        sYesText = yes_text;
        sNoText = no_text;
        sEqualized = equalized;

        context.pushPage(ROOT);
        if (sEventLoop != nil)
        {
            sEventLoop.leave();
            sEventLoop = nil;
        }
        
        sResult = nil;
        sEventLoop = main::menu::EventLoop(context);
        sEventLoop.enter();

        var res = sResult != false;
        sResult = nil;
        return res;
    }

    function close(context)
    {
        if (sEventLoop != nil)
        {
            sEventLoop.leave();
            sEventLoop = nil;
        }

        ROOT.actor.out = true;

        context.sync(0.5);
        context.cursor_visible = CursorVisibleWhenOpen;
        context.closePage(ROOT);
    }

    method onRealize(context)
    {
        ROOT.display_priority = 50;

        setFadeActorRoot(ROOT);
    }

    method setOnFocus(button)
    {
        if (button == "Yes" || button == "No")
        {
            Dialog::Buttons::YesNo.visible = true;
            Dialog::Buttons::OK.visible = false;
            Dialog::Buttons::Abort.visible = false;
            sFocusWidget = Dialog::Buttons::YesNo[button];
        }
        else if (button == "OK")
        {
            Dialog::Buttons::YesNo.visible = false;
            Dialog::Buttons::OK.visible = true;
            Dialog::Buttons::Abort.visible = false;
            sFocusWidget = Dialog::Buttons[button];
        }
        else if (button == "Abort")
        {
            Dialog::Buttons::YesNo.visible = false;
            Dialog::Buttons::OK.visible = false;
            Dialog::Buttons::Abort.visible = true;
            sFocusWidget = Dialog::Buttons[button];
            sResult = true;
        }
    }

    method onInitialize(context)
    {
        BalloonTip.initialize(context);

        {
            var yes_txt = nil;
            var no_txt = nil;
            sCancelDisable = false;

            if (sYesText != nil)
            {
                if (sTextRoot != nil)
                    yes_txt = context.translate(sTextRoot, sYesText);
                else
                    yes_txt = sYesText;
                sCancelDisable = true;
            }

            if (sNoText != nil)
            {
                if (sTextRoot != nil)
                    no_txt = context.translate(sTextRoot, sNoText);
                else
                    no_txt = sNoText;
                sCancelDisable = true;
            }

            switch (sCurrentType)
            {
                case 2:
                case 0:
                    if (yes_txt == nil)
                        yes_txt = context.translate(ROOT, "Close");
                    break;

                case 3:
                case 4:
                    if (yes_txt == nil)
                        yes_txt = context.translate(ROOT, "Yes");
                    if (no_txt == nil)
                        no_txt = context.translate(ROOT, "No");

                    break;

                case 1:
                    if (yes_txt == nil)
                        yes_txt = context.translate(ROOT, "OK");
                    if (no_txt == nil)
                        no_txt = context.translate(ROOT, "Cancel");

                    break;

                case 6:
                    break;
            }

            Dialog::Buttons::YesNo::Yes::label.text = yes_txt;
            Dialog::Buttons::YesNo::No::label.text = no_txt;
            Dialog::Buttons::OK::label.text = yes_txt;
        }

        var mf = Dialog::Message::message;
        mf.align = sEqualized ? -1 : 4;
        mf.equalized = sEqualized;
        mf.text = sMessage;

        switch (sCurrentType)
        {
            case 0:
                setOnFocus("OK");
                break;
            case 1:
                setOnFocus("Yes");
                break;
            case 2:
                setOnFocus("OK");
                break;
            case 3:
                setOnFocus("No");
                break;
            case 4:
                setOnFocus("Yes");
                break;
            case 6:
                setOnFocus("Abort");
                break;
        }


        var ratio = context.cursor_speed_ratio;
        ROOT.actor.period = 0.25 / ratio;
        ROOT.actor.on_effect_end = function (context)
        {
            ROOT.setFocus(sFocusWidget);
        }
        ROOT.actor.out = false;
        ROOT.actor.restart();

        ROOT.setFocus(sFocusWidget);

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        sCurrentType = nil;
        sCancelDisable = nil;
        sActivateSound = nil;
        sMessage = nil;
        sYesText = nil;
        sNoText = nil;
        sTextRoot = nil;
        sEqualized = nil;

        if (sEventLoop != nil)
        {
            sEventLoop.leave();
            sEventLoop = nil;
        }

        Dialog::Message::message.text = "";
        Dialog::Buttons::YesNo::Yes::label.text = "";
        Dialog::Buttons::YesNo::No::label.text = "";
        Dialog::Buttons::OK::label.text = "";
    }

    function forceCancel(context)
    {
        if (sEventLoop != nil && sResult == nil)
        {
            sResult = false;
            close(context);
        }
    }

    function onCancel(context)
    {
        if (sCancelDisable)
            return EVENTRESULT_FILTER;

        main::sound.play("cancel");

        if (Dialog::Buttons::YesNo.visible)
        {
            ROOT.setFocus(Dialog::Buttons::YesNo::No);
        }
        else if (Dialog::Buttons::Abort.visible)
        {
            ROOT.setFocus(Dialog::Buttons::Abort);
        }
        else
        {
            sResult = false;
            close(context);
        }

        return EVENTRESULT_FILTER;
    }


    function setActivateSound(name)
    {
        sActivateSound = name;
    }
}

module ROOT::Dialog::Buttons
{
    method onFocusEnter(context, event)
    {
        var w = event.widget;
        BalloonTip.set_value(context, w, w.label.text, 7.5);

        return EVENTRESULT_FILTER;
    }

    method onFocusLeave(context)
    {
        BalloonTip.reset_value();
        return EVENTRESULT_FILTER;
    }
}

module ROOT::Dialog::Buttons::OK
{
    function onActivate(context, event, item)
    {
        main::sound.play(sActivateSound != nil ? sActivateSound : "ok");
        sResult = true;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module ROOT::Dialog::Buttons::YesNo::Yes
{
    function onActivate(context, event, item)
    {
        main::sound.play(sActivateSound != nil ? sActivateSound : "ok");
        ROOT::sResult = true;

        Blink.ScalarInterpolator.on_effect_end = function (context)
        {
            ROOT.close(context);
        }
        Blink.ScalarInterpolator.restart();
        return EVENTRESULT_FILTER;
    }
}

module ROOT::Dialog::Buttons::YesNo::No
{
    function onActivate(context, event, item)
    {
        main::sound.play("ok");
        ROOT::sResult = false;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module ROOT::Dialog::Buttons::Abort
{
    function onActivate(context, event, item)
    {
        main::sound.play("ok");
        ROOT::sResult = false;
        close(context);
        return EVENTRESULT_FILTER;
    }
}