//---------------------------------------------------------------------------------------
// StatusRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ROOT
{
    static sLogMode;

    method onInitialize(context)
    {
        var my_cash = gGameStatus.user_profile.cash;
        Header::Cash::TextFace.text = main::pdiext::MMisc::GetMoneyString(my_cash);

        var game_day = gGameStatus.user_profile.calendar.getGameDay();
        Header::Date::TextFace.text = context.translate(ROOT, "Arcade", "GAME_DAY").build(game_day + 1);

        Box::LineA::own_cars::value.text = game_garage().getMyAllCarCount();

        var running_km = gGameStatus.user_profile.total_running_km;
        var unit_text;
        var km_mile;
        if (gGameStatus.user_profile.option.unit_velocity)
        {
            unit_text = context.translate(ROOT, "Unit", "LENGTH_MILE");
            km_mile = running_km / 1.6;
        }
        else
        {
            unit_text = context.translate(ROOT, "Unit", "LENGTH_KILOMETER");
            km_mile = running_km;
        }

        if (km_mile > 999999.9)
            km_mile = 999999.94;

        var km_mile_text = "%.1lf".format(km_mile);
        var running_text = km_mile_text + unit_text;


        Box::LineA::total_running::value.text = running_text;

        Box::LineB::total_cash::value.text = main::pdiext::MMisc::GetMoneyString(gGameStatus.user_profile.total_cash);

        Box::LineC::singlerace1st::value.text = gGameStatus.user_profile.singlerace_count_of_1st;
        Box::LineC::adhocbattle1st::value.text = gGameStatus.user_profile.adhocbattle_count_of_1st;

        {
            var start;
            var end;
            if (LicenseUtil::isFirstStageClear(gGameStatus))
            {
                start = LicenseUtil::getCategoryStartEnd(LicenseUtil::STAGE::FIRST)[0];
                end = LicenseUtil::getCategoryStartEnd(LicenseUtil::STAGE::SECOND)[1];
            } 
            else 
            {
                |start, end| = LicenseUtil::getCategoryStartEnd(LicenseUtil::STAGE::FIRST);
            }

            var cleared_mission = 0;
            for (var i = start, lid_base = 0; i <= end; i++)
            {
                var count = LicenseUtil::GetLicenseCountOfCategory(i);
                for (var ii = lid_base; ii < (lid_base + count); ii++)
                {
                    var result = game_record().licenses[ii].result;
                    if (result != LicenseUtil::PRIZE::NONE)
                        cleared_mission++;
                }
                lid_base += count;
            }
            var total_mission = LicenseUtil::LICENSE_COUNT::total(end);

            Box::LineD::achievement::value.text = cleared_mission + "/" + total_mission;
        }


        {
            var gold = 0; var silver = 0; var bronze = 0;
            for (var i = 0; i < LicenseUtil::LICENSE_COUNT::TOTAL; i++)
            {
                switch (game_record().licenses[i].result)
                {
                    case LicenseUtil::PRIZE::GOLD:
                        ++gold;
                        break;
                    case LicenseUtil::PRIZE::SILVER:
                        ++silver;
                        break;
                    case LicenseUtil::PRIZE::BRONZE:
                        ++bronze;
                        break;
                }
            }
            Box::LineD::Gold::value.text = gold;
            Box::LineD::Silver::value.text = silver;
            Box::LineD::Bronze::value.text = bronze;
        }


        {
            var rank_list = [0, 0, 0, 0, 0];
            foreach (var course_code in gCourseData.array)
            {
                var sr_rank = gGameStatus.user_profile.record.getBoardSR(course_code);
                if (sr_rank != nil)
                    ++rank_list[sr_rank.rank];

                var course_label = main::gtengine::MSpecDB::getCourseLabel(course_code);
                if (gCourseData.map[course_code]["has_reverse"] != "false")
                {
                    var r_course_code = main::gtengine::MSpecDB::getCourseCode("r_" + course_label);
                    sr_rank = gGameStatus.user_profile.record.getBoardSR(r_course_code);
                    if (sr_rank != nil)
                    {
                        ++rank_list[sr_rank.rank];
                    }
                }
            }

            Box::LineE::levelS::value.text = rank_list[0];
            Box::LineE::levelA::value.text = rank_list[1];
            Box::LineE::levelB::value.text = rank_list[2];
            Box::LineE::levelC::value.text = rank_list[3];
            Box::LineE::levelD::value.text = rank_list[4];
        }

        if (sLogMode != nil)
        {
            ROOT.setFocus(Logs);
            sLogMode = nil;
        }
    }

    method onPageInEnd(context)
    {

        BalloonTip.initialize(context);

        var focus_w = ROOT.getFocusWidget();
        if (focus_w != nil && focus_w['onFocusEnter'] != nil)
            focus_w.onFocusEnter(context);

        SoundUtil::BGMPlayGroup('menu', "menu");
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.setFocus(Exit);
        return EVENTRESULT_FILTER;
    }

    module CarCollection
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            CarRoot.setReturnPage(ROOT);
            CarRoot.setExtMode(nil, nil);
            CarRoot.setOpenMode(CarRoot::OPEN_MODE_ENUM::COLLECTION, false);
            BranchRoot.setFocusItem("car_collection");
            StartPageIn_XEffect(context, ROOT, CarRoot);
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            var balloon_text = context.translate(ROOT, "Arcade", "CAR_COLLECTION");
            BalloonTip.set_value(context, self, balloon_text, 12);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module Logs
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.sLogMode = true;
            StartPageIn_XEffect(context, ROOT, LogsRoot);
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            var balloon_text = context.translate(ROOT, "Arcade", "LOGS");
            BalloonTip.set_value(context, self, balloon_text, 12);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module Exit
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            StartPageOut_XEffect(context, ROOT, GTTopRoot);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            StartPageOut_XEffect(context, ROOT, GTTopRoot);
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            var balloon_text = context.translate(ROOT, "Arcade", "close");
            BalloonTip.set_value(context, self, balloon_text, 12);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }
}