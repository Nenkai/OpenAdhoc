













module GTTopProject
{
    PROJECT.load("/scripts/gt5/util/PatchLogic");
    PROJECT.load("/scripts/gt5/util/ProjectHistoryUtil");
    PROJECT.load("/scripts/gt5/util/EventPresentUtil");
    PROJECT.load("/scripts/gt5/util/Garage2Util");
    PROJECT.load("/scripts/gt5/util/ScrollNewsUtil");
    PROJECT.load("/scripts/gt5/util/DLCUtil");

    //if (GetVersionBranch() == "demo")
    //{
        PROJECT.load("/scripts/gt5/util/OnlineUtil");
        PROJECT.load("/scripts/gt5/util/OnlineEventUtil");
        PROJECT.load("/scripts/gt5/util/QuickMatchUtil");
    //}

    static additional_projects;
    static additional_sounds;

    function onLoad(update_context)
    {
        update_context.createRenderContext(1);
        var render_context = update_context.getRenderContext(0);

        main::CommandAlias::begin();

        ProjectHistoryUtil::DefineVariables(PROJECT, 
        [
            ['LastPageName', ""],
            ['GTTopRoot::FocusIndex', 0],
            ['GTTopRoot::SceneIndex', 0],
            ['CourseEditRoot::FocusIndex', 0],
            ['TheaterRoot::FocusIndex', 0],
            ['OnlineTopRoot::SelectIndex', 0],
            ['PhotoTravelRoot::FocusIndex', 0],
            ['isNeedVacuum', true],
        ]);

        SequenceUtil::setPageTransition(
            ["*,GTTopProject::GTTopRoot" : CursorProject::GTLogoTransition]
        );

        loadProjects();

        GLOBAL_STATUS.user_profile.context.last_saved_project = "";
        
        additional_sounds = [main::pdiext::MSoundEffect("sound_gt/se/gt5menu.sgd")];

        var start_page = "GTTopRoot";
        var last_page_name = PROJECT.history['LastPageName'];

        if (last_page_name != nil && last_page_name != "")
        {
            start_page = last_page_name;
            PROJECT.history['LastPageName'] = "";
        }
        
        PROJECT[start_page].open(render_context);
    }

    function onUnload(update_context)
    {
        var render_context = update_context.getRenderContext(0);
        render_context.disableInput();
        unloadProjects();
        main::CommandAlias::end();
    }

    function loadProjects()
    {
        additional_projects = Array();
        var projects =["news", "manual"];

        //if (GetVersionBranch() == "demo")
            projects.push("online");

        foreach (var project_name in projects)
        {
            var project = main::manager.loadProject("%{main::PROJECT_ROOT_DIR}/%{project_name}/%{project_name}");
            additional_projects.push(project);
        }
    }

    function unloadProjects()
    {
        foreach (var project in additional_projects)
            main::manager.unloadProject(project);

        additional_projects = nil;
    }

    function addProject(project_dir_name, project_widget_name)
    {
        if (!__projects__.defined(project_widget_name))
        {
            var project = main::manager.loadProject("%{main::PROJECT_ROOT_DIR}/%{project_dir_name}/%{project_dir_name}");
            additional_projects.push(project);
        }
        else
            ;
    }

    function removeProject(project_widget_name)
    {
        if (__projects__.defined(project_widget_name))
        {
            var keep_projects = [];
            foreach (var project in additional_projects)
            {
                if (project.name == project_widget_name)
                    main::manager.unloadProject(project);
                else
                    keep_projects.push(project);
            }

            additional_projects = keep_projects;
        }
        else
            ;
    }

    function isDemo()
    {
        return main::GetVersionBranch() == "demo";
    }

    function setCursor(context, state)
    {
        var page = context.getCommonPage("CursorRoot");
        if (page != nil)
            page["setCursor"](context, state)
    }

    function GetRidingCar()
    {
        if (main::GAME_STATUS.user_profile.option.kiosk_mode)
        {
            var game_context = main::GAME_STATUS.user_profile.context;
            var context_cp = main::gtengine::MCarParameter(game_context.getArcadeCar().getCarCode());
            context_cp.color = game_context.getCar().color;
            return context_cp;
        }
        else
        {
            return main::GAME_STATUS.user_profile.garage.getRidingCar();
        }
    }

    function ConfirmPatch(context, root, watcher)
    {
        var res = true;
        if (LoginUtil::isPatchExist())
        {
            var text = context.translate(root, "Network", "DO_YOU_DOWNLOAD_PATCH_WITH_SAVE");
            var res = DialogUtil::openConfirmDialog(context, DialogUtil::DEFAULT_NO, text);
            if (!res)
            {
                main::Grim2.setInitialize(false);
                return false;
            }

            if (watcher != nil)
                watcher.Suspend();

            Grim2Util::stopUpdater();
            main::PaceUtil::deactivate();

            res = PatchRoot.open(context);
            if (res)
                return false;
            else
                main::Grim2.setInitialize(false);

            if (watcher != nil)
                watcher.Resume();
        }

        if (res)
            Grim2Util::startUpdater();

        return res;
    }
}