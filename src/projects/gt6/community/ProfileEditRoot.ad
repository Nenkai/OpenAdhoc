













module ROOT
{
    attribute popup;
    attribute closed = false;
    attribute result;
    attribute photo;
    attribute original_comment;

    method open(context)
    {
        self.original_comment = "";
        self.photo = nil;
        self.result = false;
        self.closed = false;
        self.popup = SequenceUtil::ModalPage(context, ROOT);
        self.popup.open();
        return self.result;
    }

    method close(context)
    {
        UserProfile2.clearCallback();
        if (self.closed)
            return;

        self.closed = true;

        FadeActor.out = true;

        if (self.popup != nil)
        {
            self.popup.close(FadeActor.period);
            self.popup = nil;
        }

        self.photo = nil;
        self.original_comment = nil;
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        self.setFocus(ScrolledWindow::clip::space::VBox::About::Cancel);
        return EVENTRESULT_FILTER;
    }

    method onInitialize(context)
    {
        context.cursor_visible = false;

        ScrolledWindow::clip::space::VBox::Photo::SBox::ImageFace.image_path = "";
        ScrolledWindow::clip::space::VBox::Comment::VBox::InputTextBox::Text::input.value = "";
        ScrolledWindow::clip::space::VBox::Comment::VBox::InputTextBox::Text::input.setCount(context, 0);
        ScrolledWindow::clip::space::VBox::Message::VBox::CheckButton::Check.active = false;
        ScrolledWindow::clip::space::VBox::Public::VBox::CheckButton::Check.active = false;

        for (var i = 0; i < 6; ++i)
        {
            var w = ScrolledWindow::clip::space::VBox::Tag::VBox::MBox["Tag%{i + 1}"];
            w.tag_id = 0;
            w.label.text = manager.translate("CommunityTag", "CATEGORY_0");
        }

        var user_id = Grim2.getLoginUserId();
        var request = UserProfile2.requestUserProfile(user_id, function(args) {});
        if (Grim2Util::joinAwait(context, request))
        {
            var u = UserProfile2.decodeUserProfile(request);
            var profile_level = u["profile_level"];
            var comment = u["comment"];

            self.original_comment = comment;
            ScrolledWindow::clip::space::VBox::Comment::VBox::InputTextBox::Text::input.value = comment;
            ScrolledWindow::clip::space::VBox::Comment::VBox::InputTextBox::Text::input.setCount(context, comment.length);
            ScrolledWindow::clip::space::VBox::Message::VBox::CheckButton::Check.active = (profile_level & (1 << 1)) == 0;
            ScrolledWindow::clip::space::VBox::Public::VBox::CheckButton::Check.active = (profile_level & 1) == 0;

            setImage(ScrolledWindow::clip::space::VBox::Photo::SBox::ImageFace, u["photo_id_avatar"]);

            var tag_id_list = u["tag_id_list"];

            for (var i = 0; i < 6; ++i)
            {
                var w = ScrolledWindow::clip::space::VBox::Tag::VBox::MBox["Tag%{i + 1}"];
                if (i < tag_id_list.size)
                {
                    w.tag_id = tag_id_list[i];
                    w.label.text = manager.translate("CommunityTag", "CATEGORY_%d".format(tag_id_list[i]));
                }
            }
        }

        ROOT.setFocus(ScrolledWindow::clip::space::VBox::About::Cancel);
        context.pushEvent(menu::MFunctionEvent(postInitialize, context));
        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        return EVENTRESULT_FILTER;
    }

    method postInitialize(context)
    {
        CommunityRoot.visible = true;
        showTutorialIf(context, "mypage");
        context.cursor_visible = true;
    }

    method onUpdate(context)
    {
        if (self.closed)
            return;

        if (!LoginUtil::isOnline())
        {
            context.pushEvent(menu::MFunctionEvent(close, context));
        }
    }

    module ScrolledWindow::clip::space::VBox::About
    {
        method onCancel(context)
        {
            sound.play("cancel");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method onActivate(context)
        {
            sound.play("ok");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module ScrolledWindow::clip::space::VBox::Photo
    {
        method onActivate(context)
        {
            sound.play("ok");

            var photo = GTModeProject::ReplayListRoot.open(context, GTModeProject::ReplayListRoot::MODE::PHOTO);
            if (photo == nil)
                return EVENTRESULT_FILTER;

            ROOT.photo = photo;
            ScrolledWindow::clip::space::VBox::Photo::SBox::ImageFace.image_path = photo.filename_t;
            return EVENTRESULT_FILTER;
        }
    }

    module ScrolledWindow::clip::space::VBox::Comment::VBox::InputTextBox::Text::input
    {
        method setCount(context, count)
        {
            Comment::VBox::Count.text = "%d / %d".format(count, 140);
        }

        method onTextClose(context, event)
        {
            setCount(context, self.value.length);
            return EVENTRESULT_CONTINUE;
        }

        method onKeyRelease(context, event)
        {
            // Backspace, or delete
            if (event.keysym == CELL_PAD_CTRL_SQUARE || event.keysym == 0xFF08  || event.keysym == 0xFFFF)
            {
                setCount(context, self.value.length);
            }

            return EVENTRESULT_CONTINUE;
        }
    }

    module ScrolledWindow::clip::space::VBox::Tag::VBox::MBox
    {
        method tagSelect(context, target)
        {
            sound.play("ok");

            var tag_id_list = [];
            for (var i = 0; i < 6; ++i)
            {
                var w = target.parent["Tag%{i + 1}"];
                if (w == target)
                    continue;

                if (w.tag_id > 0)
                    tag_id_list.push(w.tag_id);
            }

            var tag_id = target.tag_id;
            var new_tag_id = TagSelectRoot.open(context, tag_id, tag_id_list);

            if (new_tag_id != nil)
            {
                target.tag_id = new_tag_id;
                target.label.text = manager.translate("CommunityTag", "CATEGORY_%d".format(new_tag_id));
            }

            return EVENTRESULT_FILTER;
        }

        module Tag1
        {
            attribute tag_id;

            method onActivate(context)
            {
                return tagSelect(context, self);
            }
        }

        module Tag2
        {
            attribute tag_id;

            method onActivate(context)
            {
                return tagSelect(context, self);
            }
        }

        module Tag3
        {
            attribute tag_id;

            method onActivate(context)
            {
                return tagSelect(context, self);
            }
        }

        module Tag4
        {
            attribute tag_id;

            method onActivate(context)
            {
                return tagSelect(context, self);
            }
        }

        module Tag5
        {
            attribute tag_id;

            method onActivate(context)
            {
                return tagSelect(context, self);
            }

            // BUG & COMPILER NOTE: 'tag_id' was being redefined here
            // The homebrew compiler does not allow that currently.
            //attribute tag_id;
        }

        module Tag6
        {
            attribute tag_id;

            method onActivate(context)
            {
                return tagSelect(context, self);
            }
        }
    }

    module ScrolledWindow::clip::space::VBox::Notice
    {
        method updatePhoto(context, photo)
        {
            if (!pdistd::Exist(photo.filename_t))
                return true;

            var jpg = pdistd::ReadFile(photo.filename_t);
            var request = main::Photo.requestUploadAvatarImage(jpg["buffer"], photo.title, "", "", function(args) {});
            var res = Grim2Util::joinAwait(context, request);
            return res;
        }

        method onActivate(context)
        {
            sound.play("ok");

            var comment = ScrolledWindow::clip::space::VBox::Comment::VBox::InputTextBox::Text::input.value;
            var profile_level = 0;

            if (!ScrolledWindow::clip::space::VBox::Message::VBox::CheckButton::Check.active)
            {
                profile_level |= 1 << 1;
            }

            if (!ScrolledWindow::clip::space::VBox::Public::VBox::CheckButton::Check.active)
            {
                profile_level |= 1;
            }

            var dummy_level = 0;
            var dummy_text = "";
            
            |var filter_res, var sanitized_text| = filterText(context, comment, true);
            if (!filter_res)
                return EVENTRESULT_FILTER;

            var tag_id_list = [];
            for (var i = 0; i < 6; ++i)
            {
                var w = ScrolledWindow::clip::space::VBox::Tag::VBox::MBox["Tag%{i + 1}"];
                if (w.tag_id != 0)
                    tag_id_list.push(w.tag_id);
            }

            tag_id_list.sort();

            var comment_changed = ROOT.original_comment != sanitized_text;
            var request = UserProfile2.requestUpdateOnlineProfile(profile_level, 
                sanitized_text, 
                comment_changed, 
                tag_id_list, 
                function(args) {});

            var updated = false;
            var res = false;
            if (Grim2Util::joinAwait(context, request))
            {
                updated = UserProfile2.decodeResult(request) > 0;
                res = true;
            }

            if (res && ROOT.photo != nil)
            {
                res = updatePhoto(context, ROOT.photo);
                if (res)
                    updated = true;
            }

            GENERIC_RESULT(context, res);

            if (res)
            {
                PUTLOG_LOCAL::profile("update", tag_id_list.join(","));
                ROOT.result = updated;
                ROOT.close(context);
            }
            else
            {
                checkGrimSession(context);
            }

            return EVENTRESULT_FILTER;
        }
    }
}