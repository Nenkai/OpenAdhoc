












/* Tire Tables */
#define PARTS_TYPE_FRONTTIRE 25
#define PARTS_TYPE_REARTIRE 26

module PROJECT::ROOT
{
    Pane.actor = main::menu::MMoveActor(Pane, Pane.x + PS2_SCREEN_W_F, Pane.y);

    function get_having_tire(tire)
    {
        var car = main::game.garage.riding_car;
        switch (tire)
        {
            case "normal_sports":
                if (car.isHavingParts(PARTS_TYPE_FRONTTIRE, 0)) // Normal Economy
                    return 0;
                
                if (car.isHavingParts(PARTS_TYPE_FRONTTIRE, 1)) // Normal Comfort
                    return 1;

                if (car.isHavingParts(PARTS_TYPE_FRONTTIRE, 2)) // Normal Street
                    return 2;

                if (car.isHavingParts(PARTS_TYPE_FRONTTIRE, 3)) // Sport Hard
                    return 3;

                if (car.isHavingParts(PARTS_TYPE_FRONTTIRE, 4)) // Sport Meds
                    return 4;

                if (car.isHavingParts(PARTS_TYPE_FRONTTIRE, 5)) // Sport Soft
                    return 5;

                break;
            case "racing":
                if (car.isHavingParts(PARTS_TYPE_FRONTTIRE, 6)) // Super Hard
                    return 6;

                if (car.isHavingParts(PARTS_TYPE_FRONTTIRE, 7)) // Hard
                    return 7;

                if (car.isHavingParts(PARTS_TYPE_FRONTTIRE, 8)) // Medium
                    return 8;

                if (car.isHavingParts(PARTS_TYPE_FRONTTIRE, 9)) // Soft
                    return 9;

                if (car.isHavingParts(PARTS_TYPE_FRONTTIRE, 10)) // Qualify
                    return 10;
                break;

            case "dirt":
                if (car.isHavingParts(PARTS_TYPE_FRONTTIRE, 11))
                    return 11;
                break;

            case "snow":
                if (car.isHavingParts(PARTS_TYPE_FRONTTIRE, 12))
                    return 12;
                break;
        }

        return nil;
    }

    function is_same_tire_frame(tire0, tire1)
    {
        if (tire0 == tire1)
            return true;

        if ((tire0 >= 6 && tire0 <= 10) && (tire1 >= 6 && tire1 <= 10)) // Racing
            return true;

        if ((tire0 >= 0 && tire0 <= 5) && (tire1 >= 0 && tire1 <= 5)) // Normal + Sport
            return true;

        return false;
    }

    function set_tire(context, tire)
    {
        var car = main::game.garage.riding_car;
        var equiped_tire = car.getEquipedParts(PARTS_TYPE_FRONTTIRE);

        if (!is_same_tire_frame(tire, equiped_tire))
        {
            car.loadPartsInfo();
            car.setParts(PARTS_TYPE_FRONTTIRE, tire);
            car.setParts(PARTS_TYPE_REARTIRE, tire);
            
            var tire_name = context.translate(TopRoot, "reguration_tire_%02d".format(tire));
            openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "you change tire").format(tire_name));
            car.syncWheel();
        }
    }

#ifdef GT4O_US_BETA
    static having_normal_sports;
    static having_racing;
    static having_dirt;
    static having_snow;
#else
    static having_normal_sports = nil;
    static having_racing  = nil;
    static having_dirt = nil;
    static having_snow = nil;
#endif



    function onInitialize(context)
    {
        Pane.actor.out = true;
        Pane.actor.warp();
        Pane.actor.out = false;

        having_normal_sports = get_having_tire("normal_sports");
        having_racing = get_having_tire("racing");
        having_dirt = get_having_tire("dirt");
        having_snow = get_having_tire("snow");

        Pane::Normal::bg.visible = having_normal_sports != nil;
        Pane::Normal::label.visible = having_normal_sports != nil;
        Pane::Normal::bgi.visible = having_normal_sports == nil;
        Pane::Normal::labeli.visible = having_normal_sports == nil;

        Pane::Racing::bg.visible = having_racing != nil;
        Pane::Racing::label.visible = having_racing != nil;
        Pane::Racing::bgi.visible = having_racing == nil;
        Pane::Racing::labeli.visible = having_racing == nil;

        Pane::Dirt::bg.visible = having_dirt != nil;
        Pane::Dirt::label.visible = having_dirt != nil;
        Pane::Dirt::bgi.visible = having_dirt == nil;
        Pane::Dirt::labeli.visible = having_dirt == nil;

        Pane::Snow::bg.visible = having_snow != nil;
        Pane::Snow::label.visible = having_snow != nil;
        Pane::Snow::bgi.visible = having_snow == nil;
        Pane::Snow::labeli.visible = having_snow == nil;
    }

    function onFinalize(context)
    {
        having_normal_sports = nil;
        having_racing = nil;
        having_dirt = nil;
        having_snow = nil;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        Pane.actor.out = true;
        context.sync(0.5);
        context.closePage(ROOT);

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Normal
{
    function onActivate(context)
    {
        if (having_normal_sports == nil)
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "no normal and sports tire"));
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");

        set_tire(context, having_normal_sports);
        WheelShopRoot::current_wheel_category = "NORMAL_SPORTS";
        start_page(context, WheelMakerRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Racing
{
    function onActivate(context)
    {
        if (having_racing == nil)
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "no racing tire"));
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");

        set_tire(context, having_racing);
        WheelShopRoot::current_wheel_category = "RACING";
        start_page(context, WheelMakerRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Dirt
{
    function onActivate(context)
    {
        if (having_dirt == nil)
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "no dirt tire"));
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");

        set_tire(context, having_dirt);
        WheelShopRoot::current_wheel_category = "DIRT";
        start_page(context, WheelMakerRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Snow
{
    function onActivate(context)
    {
        if (having_snow == nil)
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "no snow tire"));
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");

        set_tire(context, having_snow);
        WheelShopRoot::current_wheel_category = "SNOW";
        start_page(context, WheelMakerRoot);
        return EVENTRESULT_FILTER;
    }
}