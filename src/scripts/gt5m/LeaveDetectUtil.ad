//---------------------------------------------------------------------------------------
// LeaveDetectUtil.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module LeaveDetectUtil
{
    import main::WatcherUtil;

    static sSuspender = nil;
    static sLeaveDetectSecond = nil;
    static sLeaveDetectRoot = nil;
    static sLeaveDetectMehtod = nil; // typo in original
    static sActivateDetectMehtod = nil; // typo in original
    static sLeaveDetectWatcher = nil;
    static sActivated = nil;

    function on_tick(context)
    {
        if (sSuspender.isSuspend())
            return;
        
        if (context.time_after_last_input > sLeaveDetectSecond.toFloat())
        {
            if (sActivated)
            {
                (sLeaveDetectRoot.*sLeaveDetectMehtod)(context);
                sActivated = false;
            }
        }
    }

    function begin(context, leave_second, root, leave_method, activate_method)
    {
        sSuspender = WatcherUtil::Suspender();
        sLeaveDetectSecond = leave_second;
        sLeaveDetectRoot = root;
        sLeaveDetectMehtod = leave_method;
        sActivateDetectMehtod = activate_method;
        sLeaveDetectWatcher = WatcherUtil::Create(context, on_tick);
        sActivated = true;
    }

    function end(context)
    {
        sActivated = nil;
        if (sLeaveDetectWatcher != nil)
        {
            WatcherUtil::Delete(sLeaveDetectWatcher);
            sLeaveDetectWatcher = nil;
        }
        sActivateDetectMehtod = nil;
        sLeaveDetectMehtod = nil;
        sLeaveDetectRoot = nil;
        sLeaveDetectSecond = nil;
        sSuspender = nil;
    }

    function activated(context, event)
    {
        if (sLeaveDetectWatcher == nil)
            return false;

        if (event.keysym == 0xFFD6) // could be PSP_PAD_CTRL_R?
            return false;

        if (!sActivated)
        {
            (sLeaveDetectRoot.*sActivateDetectMehtod)(context);
            sActivated = true;
            return true;
        }

        return false;
    }

    function suspend(context)
    {
        if (sSuspender != nil)
            sSuspender.Suspend();
    }

    function resume(context)
    {
        if (sSuspender != nil)
        {
            context.time_after_last_input = 0;
            sSuspender.Resume();
        }
    }

    function isActivated()
    {
        return sActivated;
    }

    function reset(context)
    {
        context.time_after_last_input = 0;
        sActivated = false;
    }
}