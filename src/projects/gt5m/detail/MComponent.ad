
module MComponent::DetailPopup::Pane
{
    method initialize(context, header)
    {
        self.Setting::Header::TextFace.text = header;
    }
}


module MComponent::Tooltip::BalloonTip
{
    attribute duration_base = nil;
    attribute current_widget = nil;

    method initialize(context)
    {

        self.duration_base = self.Tip.VisibleEffect.getStartDuration(0);

        self.Tip.visible = true;

        if (self['TIP_01'] == nil)
        {
            var tip01 = self.Tip.doCopy();
            tip01.name = "TIP_01";
            self.appendChild(context, tip01);
        }

        if (self['TIP_02'] == nil)
        {
            var tip02 = self.Tip.doCopy();
            tip02.name = "TIP_02";
            self.appendChild(context, tip02);
        }

        self.current_widget = self['TIP_01'];

        self.Tip.visible = false;
    }

    method onFinalize(context)
    {
        self.current_widget = nil;
        self.duration_base = nil;

        if (self['TIP_01'] != nil)
        {
            self.removeChild(context, self['TIP_01']);
        }
        if (self['TIP_02'] != nil)
        {
            self.removeChild(context, self['TIP_02']);
        }
    }

    method set_value(context, widget, text, distance = 0)
    {
        if (self.current_widget == nil)
            return;

        self.current_widget.reset();
        if (self.current_widget == self['TIP_02'])
            self.current_widget = self['TIP_01'];
        else
            self.current_widget = self['TIP_02'];
        self.current_widget.set_value(context, widget, text, distance);
    }

    method reset_value()
    {
        if (self.current_widget == nil)
            return

        self.current_widget.reset();
    }
}


module MComponent::Tooltip::BalloonTip::Tip
{
    attribute watcher = nil;
    attribute widget = nil;
    attribute minimum_w = nil; attribute minimum_h = nil;
    attribute distance = nil;
    attribute origin_down_tip_h = nil;

    function CreateWatcher(context, func, interval)
    {
        var watcher = main::menu::MScriptWatcher(context, func);
        if (interval == nil)
            interval = 1;

        watcher.interval = interval;
        watcher.append();
        return watcher;
    }

    method clear()
    {
        self.widget = nil;
        self.minimum_w = nil;
        self.minimum_h = nil;
        self.distance = nil;
        self.origin_down_tip_h = nil;

        if (self.watcher != nil)
        {
            self.watcher.remove();
            self.watcher = nil;
        }
    }

    method onFinalize(context)
    {
        clear();
    }

    method set_value(context, widget, text, distance)
    {
        self.opacity = 0.0;
        self.widget = widget;
        self.distance = distance;
        self.minimum_w = self.w;
        self.minimum_h = self.h;
        self.Text.TextFace.text = text;
        if (self.watcher == nil)
            self.watcher = CreateWatcher(context, wait_render_tick, 10);
        if (self.origin_down_tip_h == nil)
            self.origin_down_tip_h = self.down_tip.h;
        return;
    }

    method reset()
    {
        reset_arrow();
        clear();

        self.AppearEffect.reverse = false;
        self.AppearEffect.reset();
        self.VisibleEffect.reverse = false;
        self.VisibleEffect.reset();
        self.Text.TextFace.text = "";
        self.up_tip.visible = false;
        self.down_tip.visible = false;
        self.w = 0;
        self.h = 0;
    }

    method wait_render_tick(context)
    {
        if (self.widget == nil)
        {
            reset();
            return;
        }

        if (set_value2(context))
        {
            if (self.watcher != nil)
            {
                self.watcher.remove();
                self.watcher = nil;
            }
        }
    }

    method reset_arrow()
    {
        if (self.origin_down_tip_h != nil)
            self.down_tip.h = self.origin_down_tip_h;
    }
    method adjust_arrow()
    {
        if (self.origin_down_tip_h != nil)
            self.down_tip.h = self.origin_down_tip_h - 0.5;
    }
    method on_effect_end()
    {
        self.reset_arrow();
        self.AppearEffect.on_effect_end = nil;
    }

    method set_value2(context) // NOTE: The original version of this function has several extra LEAVE instructions in it not reproduced here
    {
        if (self.minimum_w == self.w && self.minimum_h == self.h)
            return false;

        var base_x = self.widget.sx + (self.widget.w * self.widget.cursor_align_x);
        var base_y = self.widget.sy + (self.widget.h * self.widget.cursor_align_y);
        var disp_x;
        var disp_y;

        var widget_top = (base_y - self.distance) - (self.Tip.h + self.down_tip.h);

        {
            if (widget_top > 0 + 6)
            {

                self.up_tip.visible = false;
                self.down_tip.visible = true;
                disp_x = base_x - (self.w * 0.5);
                disp_y = widget_top;
                self.down_tip.x = (base_x - disp_x) - (self.up_tip.w * 0.5);
            }
            else 
            {
                self.down_tip.visible = false;
                self.up_tip.visible = true;
                disp_x = base_x - (self.w * 0.5);
                disp_y = base_y + self.distance;
                self.up_tip.x = (base_x - disp_x) - (self.down_tip.w * 0.5);
            }
        }


        {
            var adjust_x = 0;
            {
                var left_x = disp_x;
                if (left_x < 0 + 12)
                    adjust_x = left_x - (0 + 12);
            }
            {
                var right_x = disp_x + self.w;
                if (right_x > 480 - 12)
                    adjust_x = right_x - (480 - 12);
            }

            disp_x -= adjust_x;
            self.up_tip.x += adjust_x;
            self.down_tip.x += adjust_x;
        }


        self.sx = disp_x.toInt();
        self.sy = disp_y.toInt();




        {
            var scale_cx = disp_x == 0 ? 0 : disp_x / BalloonTip.w;
            var scale_cy = disp_y == 0 ? 0 : disp_y / BalloonTip.h;
            BalloonTip.center = [scale_cx, scale_cx]; // in original

            self.adjust_arrow();

            self.AppearEffect.reverse = false
            self.AppearEffect.restart();
            self.AppearEffect.on_effect_end = self.on_effect_end;
        }

        {
            var duration = BalloonTip.duration_base;
            if (self.minimum_h > 0)
                duration += ((self.h / self.minimum_h).toInt() * 2);
            self.VisibleEffect.setStartDuration(0, duration);

            self.VisibleEffect.reverse = false;
            self.VisibleEffect.restart();
        }

        return true;
    }
}

module MComponent::Pulldown::OptionMenu
{
    method onRealize(manager)
    {
        self.copy_selected_item = false;
    }

    method initialize(context, root, item_template, options, rtextpage, raw_text)
    {
        var vbox = self["popup"]["vbox"];

        var num = options.size;
        for (var i = 0; i < num; i++)
        {
            var item = item_template.doCopy();
            if (nil != raw_text && raw_text)
            {
                item["label"].text = options[i];
            }
            else
            {
                if (rtextpage == nil)
                    item["label"].text = context.translate(root, options[i]);
                else
                    item["label"].text = context.translate(root, rtextpage, options[i]);
            }
            item["label"].adjustScale();
            item["labelf"].text = item["label"].text;
            item["labelf"].adjustScale();
            item.name = options[i];

            var even = i % 2 == 0;
            if (item.defined("bg0"))
                item["bg0"].visible = even;

            if (item.defined("bg1"))
                item["bg1"].visible = !even;

            vbox.appendChild(context, item);
        }
        self.applyAppend(context);
    }

    method setStripe(context)
    {
        var vbox = self["popup"]["vbox"];

        for (var i = 0; i < self.Count(); i++)
        {
            var item = self.getItem(i);
            var even = i % 2 == 0;
            if (item.defined("bg0"))
                item["bg0"].visible = even;

            if (item.defined("bg1"))
                item["bg1"].visible = !even;
        }
    }




    method finalize(context)
    {
        self.label.text = nil;
        if (self.defined("labeli"))
            self.labeli.text = nil;

        self.popup.vbox.clearWindow(context);
    }

    method pulldownValueChanged(context)
    {
        var current_item = self.getItem(self.index);
        if (current_item != nil)
        {
            self["label"].text = current_item["label"].text;
            self["label"].adjustScale();
            if (self.defined("labeli"))
            {
                self["labeli"].text = self["label"].text;
                self["labeli"].adjustScale();
            }
        }
    }

    method onValueChanged(context)
    {
        pulldownValueChanged(context);
    }
}


module MComponent::Slider::slider
{
    function default_format_function(value, scale, range, format, zero_text)
    {
        var v = scale * value;
        if (v == 0 && zero_text != nil)
            return zero_text;
        return format.format(v);
    }

    attribute arg = nil;
    attribute bias = nil;
    attribute zero_text = nil;
    attribute unit_text = nil;
    attribute decide_cb = nil;
    attribute initialized = nil;
    attribute step_thr = nil;
    attribute format_function = nil;
    attribute format_string = nil;

    method onInitialize(context)
    {
        if (!self.defined("initialized"))
            return;

        self.bias = 1;
        self.zero_text = nil;
        self.unit_text = nil;
        self.decide_cb = nil;
        self.step_thr = nil;
        self.format_function = nil;
        self.format_string = nil;
        self.initialized = true;
    }

    method onFinalize(context)
    {
        if (!self.defined("initialized"))
            return;

        self.initialized = nil;
        self.bias = nil;
        self.zero_text = nil;
        self.unit_text = nil;
        self.decide_cb = nil;
        self.step_thr = nil;
        self.format_function = nil;
        self.format_string = nil;
    }

    method onPopupOpen(context)
    {
        if (self.initialized != nil)
            self.sliderPopupOpen(context);
    }

    method onPopupClosed(context)
    {
        if (self.initialized != nil)
            self.sliderPopupClosed(context);
    }

    method onValueChanged(context)
    {
        if (self.initialized != nil)
            self.sliderValueChanged(context);
    }

    method onStepChanged(context)
    {
        if (self.step_thr != nil)
            self.on_step_changed();
    }

    method on_step_changed()
    {
        var x = self.value - self.repeat_start;
        x /= 4.0;
        if (x < 0.0)
            x = -x;
        if (x < 1.0)
            x = 1.0;
        if (x > self.step_thr)
            x = self.step_thr;
        self.step = x;
    }

    method callFormatFunction(value)
    {
        return self.format_function(value, self.bias, [self.min, self.max], self.format_string, self.zero_text);
    }

    method setup(context, bias = 1, zero_text, unit_text, bar_on = true, step_thr)
    {
        self.bias = bias;
        self.zero_text = zero_text;
        self.unit_text = unit_text;
        self.step_thr = step_thr;
        if (self.format_function == nil)
            self.format_function = default_format_function;
        if (self.format_string == nil)
            self.format_string = "%d";

        var pup = self["popup"];
        var base = pup["base"];
        base.bar.bar.visible = bar_on;

        base.min.label.text = callFormatFunction(self.min);
        base.max.label.text = callFormatFunction(self.max);

        self.reflect(context);
    }

    method reflect(context)
    {
        if (self.zero_text != nil && self.index == 0)
        {
            self.label.text = self.zero_text;
        }
        else
        {
            self.label.text = callFormatFunction(self.index);

            if (self.unit_text != nil)
                self.label.text += self.unit_text;
        }
        
        if (self.defined("labeli"))
            self.labeli.text = self.label.text;
    }

    method sliderValueChanged(context)
    {


        var pup = self["popup"];
        var base = pup["base"];
        var ratio = 0.0;
        var range = self.display_max - self.display_min;
        var bar_w = self.index - self.display_min;

        if (bar_w != 0 && range != 0)
            ratio = bar_w.toFloat() / range.toFloat();
        base.bar.bar.w = base.bar.bg0.w * ratio;

        base.value.label.text = callFormatFunction(self.index);

        self.doInitialize(context);
    }

    method sliderPopupOpen(context)
    {
        self.sliderValueChanged(context);

        var pup = self["popup"];
        var bar = pup["base"]["bar"];

        bar.pinch.x = (bar.bar.x + bar.bar.w) - (bar.pinch.w / 2);
        bar.curval.x = (bar.bar.x + bar.bar.w) - (bar.curval.w / 2);
    }

    method sliderPopupClosed(context)
    {
        if (!self.cancel)
        {
            self.reflect(context);

            if (self.decide_cb != nil)
                self.decide_cb(context, self.index, self);
        }
    }
}