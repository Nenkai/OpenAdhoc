module PROJECT::ROOT
{
	static sServerFocused = nil;
	static sProgress = nil;
	static sServerDoc = nil;
	static sActiveStep = nil;
	static sActivePane = nil;
	static sAgreement = nil;
	static sNews = nil;
	static sSex = nil;
	static sAge = nil;
	static sUniverseName = nil;
	static sMUMList = nil;
	hidden.visible = false;
	static sTargetServerItem = nil;

	function onLoad(context)
	{
		setDialogMoveActorH(ServerPane);
		setDialogMoveActorH(LoginPane);
		setDialogMoveActorH(RegisterPane);
		setDialogMoveActorH(AgreementPane);
		setDialogMoveActorH(NewsPane);
	
		setBlinkActor(NewsPane::Buttons::OK::bgf);
		setBlinkActor(hidden::ServerItem::button::bgf);
		setBlinkActor(LoginPane::Buttons::OK::bgf);
		setBlinkActor(LoginPane::Regist::OK::bgf);
		setBlinkActor(AgreementPane::Buttons::No::bgf);
		setBlinkActor(AgreementPane::Buttons::Yes::bgf);
		setBlinkActor(RegisterPane::Buttons::OK::bgf);
	}

	function onInitialize(context)
	{
		if (!main::network.isRTIMEInitialized())
		{
			main::network.initializeRTIME(gNetMode);
		}
	
		ServerPane.visible = false;
		LoginPane.visible = false;
		RegisterPane.visible = false;
		AgreementPane.visible = false;
		NewsPane.visible = false;
	
		LoginPane::refresh(context);
		ServerPane::refresh(context);
	
		start_pane(context, "Server");
	}

	function onFinalize(context)
	{
		ServerPane.clear(context);
		sServerDoc = nil;
		sProgress = nil;
		sActiveStep = nil;
		sActivePane = nil;
		sAgreement = nil;
		sNews = nil;
		sSex = nil;
		sAge = nil;
		sUniverseName = nil;
		sTargetServerItem = nil;
		sMUMList = nil;
	}

	function onCancel(context)
	{
		main::sound.play("cancel");
	
		var result = openConfirmDialog(context, DIALOG_QUERY, context.translate(EntryRoot, "DO_YOU_QUIT"));
		if (result)
			quit(context);
	
		return EVENTRESULT_FILTER;
	}

	function start_pane(context, step_name, reverse)
	{
		if (sActivePane != nil)
		{
			if (reverse != nil && reverse)
				sActivePane.actor.destinationX = 640.0 + sActivePane.w;
			else
				sActivePane.actor.destinationX = -sActivePane.w;
	
			sActivePane.actor.out = true;
		}
	
		var step = StepPane[step_name];
		if (step != nil)
			sActiveStep = step;
		sActiveStep.active = true;
	
		var pane = EntryRoot[step_name + "Pane"];
		pane.visible = true;
		pane.actor.out = false;
	
		context.sync(0.25);
	
		if (sActivePane != nil)
			sActivePane.visible = false;
	
		sActivePane = pane;
		sActivePane.call_focus(context);
	}

	function update_config(context)
	{
		var cnode = getGameConfig(context);
		var value = 0;
		switch (cnode.getAttribute("profile-location-condition", "rw"))
		{
			case "rw":
				value = 0;
				break;
			
			case "ro":
				value = 1;
				break;
			
			case "hidden":
				value = 2;
				break;
		}
		
		main::ProfileLocationCondition.value = value;
		value = 0;
		
		switch (cnode.getAttribute("profile-nickname-condition", "rw"))
		{
			case "rw":
				value = 0;
				break;
			
			case "ro":
				value = 1;
				break;
			
			case "hidden":
				value = 2;
				break;
		}

		main::ProfileNicknameCondition.value = value;
		
		main::KickOutThreasholdAvg.value = cnode.getAttribute("kickout-threshold-avg", 500).toInt();
		main::KickOutThreasholdMin.value = cnode.getAttribute("kickout-threshold-min", 65).toInt();
		main::KickOutThreasholdMax.value = cnode.getAttribute("kickout-threshold-max", 500).toInt();
	
		main::ShowDebugInfoOnNetObject.value = cnode.getAttribute("show-debug-info-on-net-object", 0).toInt();
	
		main::NotifyNewInfoNews.value = cnode.getAttribute("notify-new-info-news", 0).toInt();
		main::NotifyNewInfoQA.value   = cnode.getAttribute("notify-new-info-qa", 0).toInt();
		main::NotifyNewInfoTC.value   = cnode.getAttribute("notify-new-info-tc", 0).toInt();
		main::NotifyNewInfoPR.value   = cnode.getAttribute("notify-new-info-pr", 0).toInt();
		main::NotifyNewInfoTA.value   = cnode.getAttribute("notify-new-info-ta", 0).toInt();
	}

	function update_news(context)
	{
		var news = context.translate(EntryRoot, "NO_NEWS_FOUND");
	
		var announce_list = main::network.getAnnounce("all");
	
		if (announce_list != nil)
		{
			if (announce_list.size > 0)
			{
				news = "";
				for (var i = 0; i < announce_list.size; i++)
				{
					var column = announce_list[i];
					news += column[1] + "";
				}
			}
		}
	
		sNews = news;
	}
}

module PROJECT::ROOT::ServerPane
{
	function call_focus(context)
	{
		if (sServerFocused != nil)
			EntryRoot.setFocus(sServerFocused);
	
		if (isAutoMenu())
		{
			var event = main::menu::MScriptEvent(context, hidden::ServerItem::button, "onActivate");
			context.pushEvent(event);
		}
	}

	function refresh(context)
	{
		userIP.text = main::network.getWorkingIP();
		ToolTip::tip.remove();
		context.pushEvent(main::menu::MScriptEvent(context, ServerPane, "onRefresh"));
	}

	method get_information(context, args)
	{
		var list = main::network.getUniverseInformation(main::game.option.entrance_addr, main::game.option.entrance_port);
		return list;
	}
	
	method onRefresh(context)
	{
		main::network.setCallbackModule(nil);
		clear(context);
	
		var list = openProcessDialog(context, context.translate(EntryRoot, "OnlineMessage", "NOW_UPDATING_INFORMATION"), get_information);
		if (list == nil || list.size == 0)
		{
			var res = openOnlineErrorDialog(context, 1);
			if (res)
				restart(context);
			else
			{
				res = openConfirmDialog(context, DIALOG_QUERY, context.translate(EntryRoot, "DO_YOU_QUIT"));
				if (res)
					quit(context);
				else
					restart(context);
			}

			return;
		}
	
		sServerDoc = [];
		var next;
		for (var w = self.first_window; w != nil; w = next)
		{
			next = w.next_window;
	
			if (w["universe_id"] != nil)
				self.removeChild(w);
		}
	
		main::network.setCallbackModule(NetworkProject);
	
		var news = main::network.getUniverseNews();
	
		if (news != "")
			ToolTip::tip.value = news;
		else
			ToolTip::tip.value = context.translate(EntryRoot, "TOOLTIP|server");
	
		sMUMList = [];
		var first_item = nil;
		for (var i = 0; i < list.size; i++)
		{
			var item = hidden::ServerItem.doCopy();
	
			var columns = list[i];
			var id = columns[0];
			item.defineStatic("universe_id", id);
			item.defineStatic("universe_addr", columns[2]);
			item.defineStatic("universe_port", columns[3]);
	
			var universe_name = columns[1];
			item.defineStatic("universe_name", universe_name);
			item.label0.text = universe_name;
	
			var status = columns[5];
			item.defineStatic("status", status);
			item["bad"].visible = (status != 1);
	
			item.label1.text = "%d/%d".format(columns[6], columns[7]);
	
			item.defineStatic("extended_info", columns[10]);
			item.defineStatic("svo_url", columns[11]);
			item.defineStatic("isNGS", columns[12]);
	
			item.button.defineStatic("mum_idx", i);
	
			self.appendChild(context, item);
			sMUMList.push(item);
			sServerDoc.push(columns[4]);
	
			if (first_item == nil)
			{
				first_item = item;
				sTargetServerItem = item;
			}
		}
	
		self.doColorize();
	
		if (first_item != nil)
			EntryRoot.setFocus(first_item.button);
	}

	method clear(context)
	{
		var it = self.first_window;
		while (it != nil)
		{
			if (it.__prototype__ == MComponent::SetupPanel::Vacant)
				self.removeChild(context, it);
	
			it = it.next_window;
		}
	
		sServerDoc = nil;
		sProgress = nil;
	}
}

module PROJECT::ROOT::LoginPane
{
	function refresh(context)
	{
		ToolTip::tip.attach();
	
		Username::Input::input.value = main::game.account;
		Password::Input::input.value = main::game.password;
	
		Remember::OptionMenu.setIndex(context, 1);
	
		Regist.visible = !main::network.isNGSNow;
	}
	
	function call_focus(context)
	{
		EntryRoot.setFocus(Buttons::OK);
	
		if (isAutoMenu())
		{
			var event = main::menu::MScriptEvent(context, Buttons::OK, "onActivate");
			context.pushEvent(event);
		}
	}
	
	function onCancel(context)
	{
		main::sound.play("cancel");
		start_pane(context, "Server", 1);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::LoginPane::Password::Input::input
{
	function onFocusEnter(context, event)
	{
		ToolTip.tip.value = context.translate(EntryRoot, "OnlineMessage", "TOOLTIP|PASSWORD_INPUT");
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::LoginPane::Buttons::OK
{
	#include "../share/online_util.ad"

	function login(context, args)
	{
		main::network.beginEnableAbort(context);
	
		var res = main::network.login(main::game.account, main::game.password);
		if (!res)
		{
			openOnlineErrorDialog(context);
	
			if (wasErrorOther())
			{
				res = main::network.logout();
				restart(context);
			}
	
			return false;
		}
	
		main::network.endEnableAbort();
	
		res = main::network.beginMGCL();
		if (!res)
		{
			openOnlineErrorDialog(context);
	
			var error_code = main::network.getLastErrorCode();
			if (error_code == "0:0:0:14:0")
			{
				res = main::network.logout();
				restart(context);
			}
			else
			{
				main::network.setSystemEventEnable(0);
				restart(context);
			}
	
			return false;
		}
	
		var stats = main::menu::MPlayerStats::unpack(main::network.accountGetStats());
	
		var message = "LOGGEDIN?uid=%d&name=%s&point=%d&won=%d&game=%d".format(
			main::network.my_id,
			main::network.my_name,
			stats.point,
			stats.num_win,
			stats.num_game
		);
	
		main::network.postDebugInfo(message);
	
		sSex = stats.sex;
		sAge = stats.age;
	
		if (!stats.isCurrentVersion() || stats.point < 0)
		{
			main::network.accountUpdateStats(main::menu::MPlayerStats().pack());
			sSex = 0;
			sAge = 0;
		}
	
		updateMyCarCode(context);
		update_config(context);
		AgreementPane::refresh(context);
		update_news(context);
		return true;
	}

	function end_func(context, res)
	{
		main::sound.play("ok");
	
		if (res)
		{
			openConfirmDialog(context, DIALOG_OK, context.translate(EntryRoot, "MemoryCard", "save_done"));
			start_pane(context, "Agreement");
		}
		else
		{
			main::network.logout();
			restart(context);
		}
	
		main::network.setSystemEventEnable(1);
	}

	function login_and_save_proc(context)
	{
		main::network.setSystemEventEnable(0);
		main::sound.play("ok");
	
		var res = openProcessDialog(
			context,
			context.translate(EntryRoot, "WAIT_FOR_LOGIN"),
			login, nil, 1);
		if (!res)
			return;
	
		main::sound.play("ok");
	
		var valid = main::menu::MMemoryCardManager::getExistValidGameData();
		if (!valid)
		{
			main::sound.play("disable");
	
			openConfirmDialog(context, 2, context.translate(EntryRoot, "OnlineMessage", "ALLOWED_OVERWIRTE_ONLY"));
		}
		else
		{
			clearAutoSaveDisabled();
			main::sound.play("ok");
			saveAuto(context, EntryRoot, end_func);
		}
	}

	function login_proc(context)
	{
		main::network.setSystemEventEnable(0);
		main::sound.play("ok");
	
		var res = openProcessDialog(context, context.translate(EntryRoot, "WAIT_FOR_LOGIN"), login, nil, 1);
		if (res)
			start_pane(context, "Agreement");
	
		main::network.setSystemEventEnable(1);
	}

	function onActivate(context)
	{
		var username = Username::Input::input.value;
		if (username == "")
		{
			main::sound.play("disable");
			openConfirmDialog(
				context, DIALOG_ERROR,
				context.translate(EntryRoot, "NO_NAME"));
			return EVENTRESULT_FILTER;
		}
	
		var password = Password::Input::input.value;
		if (password == "")
		{
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, context.translate(EntryRoot, "NO_PASSWORD"));
			return EVENTRESULT_FILTER;
		}
	
		main::game.account = username;
		main::game.password = password;
	
		if (Remember::OptionMenu.index == 0)
			login_and_save_proc(context);
		else
			login_proc(context);
		
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::LoginPane::Regist::OK
{
	function onActivate(context)
	{
		main::sound.play("ok");
		RegisterPane::refresh(context);
		start_pane(context, "Register");
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::RegisterPane
{
	function refresh(context)
	{
		ToolTip::tip.attach();
		Username::Input::input.value = "";
		Password::Input::input.value = "";
		PasswordAgain::Input::input.value = "";
	}
	
	function call_focus(context)
	{
		EntryRoot.setFocus(Username::Input::input);
	}
	
	function onCancel(context)
	{
		main::sound.play("cancel");
		start_pane(context, "Login", 1);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::RegisterPane::Password::Input::input
{
	function onFocusEnter(context, event)
	{
		ToolTip.tip.value = context.translate(EntryRoot, "OnlineMessage", "TOOLTIP|PASSWORD_INPUT");
		return EVENTRESULT_FILTER;
	}
}

// Repeat the password to confirm
module PROJECT::ROOT::RegisterPane::PasswordAgain::Input::input
{
	function onFocusEnter(context, event)
	{
		ToolTip.tip.value = context.translate(EntryRoot, "OnlineMessage", "TOOLTIP|PASSWORD_INPUT");
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::RegisterPane::Buttons::OK
{
	function regist(context, args)
	{
		|var username, var password| = args;
		var res = main::network.adduser(username, password);
		if (!res)
			return false;
	}

	function onActivate(context)
	{
		var username = Username::Input::input.value;
		username = main::menu::MUtility::CutHeadTailSpace(username);
	
		if (username == "")
		{
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, context.translate(EntryRoot, "NO_NAME"));
			return EVENTRESULT_FILTER;
		}
	
		if (!main::menu::MUtility::IsOKAccountString(username))
		{
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, context.translate(EntryRoot, "ILLEGAL_USERNAME"));
			return EVENTRESULT_FILTER;
		}
	
		var password = Password::Input::input.value;
		if (password == "")
		{
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, context.translate(EntryRoot, "NO_PASSWORD"));
			return EVENTRESULT_FILTER;
		}
	
		if (!main::menu::MUtility::IsOKPasswordString(password))
		{
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, context.translate(EntryRoot, "OnlineMessage", "ILLEGAL_PASSWORD"));
			return EVENTRESULT_FILTER;
		}
	
		var password2 = PasswordAgain::Input::input.value;
		if (password != password2)
		{
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, context.translate(EntryRoot, "DIFFERENT_PASSWORD"));
			return EVENTRESULT_FILTER;
		}
	
		main::sound.play("ok");
	
		var res = openProcessDialog(context, context.translate(EntryRoot, "REGIST_ACCOUNT").build(username), regist, [username, password]);
	
		if (!res)
		{
			openOnlineErrorDialog(context);
			return EVENTRESULT_FILTER;
		}
	
		main::sound.play("ok");
	
		openConfirmDialog(context, DIALOG_OK, context.translate(EntryRoot, "REGISTER_DONE").build(username));
	
		main::game.account = username;
		main::game.password = password;
	
		LoginPane::refresh(context);
		LoginPane::Remember::OptionMenu.setIndex(context, 0);
		start_pane(context, "Login");
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::AgreementPane
{
	function onKeyPress(context, event)
	{
		switch (event.keysym)
		{
			case PS2_PAD_CTRL_R3_UP:
			case PS2_PAD_CTRL_L3_UP:
				if (Agreement.manualTargetIncY(168.0))
					main::sound.play("cursor");

				return EVENTRESULT_FILTER;
		
			case PS2_PAD_CTRL_R3_DOWN:
			case PS2_PAD_CTRL_L3_DOWN:
				if (Agreement.manualTargetIncY(-168.0))
					main::sound.play("cursor");
				else
				{
					Buttons::Yes.insensitive = false;
					EntryRoot.setFocus(Buttons::Yes);
				}

				return EVENTRESULT_FILTER;
		}

		return EVENTRESULT_CONTINUE;
	}

	function refresh(context)
	{
		ToolTip::tip.attach();
	
		var policy = main::network.getPolicy("usage");
	
		if (policy == nil)
		{
			openOnlineErrorDialog(context);
			restart(context);
			return;
		}
	
		var info_text = Agreement::clip::space::Info::label;
		info_text.text = policy;
	
		|var w, var h| = info_text.getTextSize();
		h *= 1.02;
	
		Buttons::Yes.insensitive = true;
	
		if (h > Agreement::clip.h)
		{
			Agreement::vbar.visible = true;
			Agreement::clip::space.h = h;
			Agreement::clip::space::Info.h = h;
		}
		else
		{
			Agreement::vbar.visible = false;
			Buttons::Yes.insensitive = false;
		}
	
		Agreement.updateGeometry();
	
		var page_num = (h / hidden::AgrBG0.h).toInt() + 1;
		for (var i = 0; i < page_num; i++)
		{
			var bgitem = (i & 1) == 0 ? hidden::AgrBG0.doCopy() : hidden::AgrBG1.doCopy();
	
			Agreement::clip::space::Info::bg.appendChild(context, bgitem);
		}
	}

	function call_focus(context)
	{
		EntryRoot.setFocus(Buttons::No);
	
		if (isAutoMenu())
		{
			var event = main::menu::MScriptEvent(context, Buttons::Yes, "onActivate");
			context.pushEvent(event);
		}
	}
}

module PROJECT::ROOT::AgreementPane::Buttons::No
{
	function onActivate(context)
	{
		main::sound.play("ok");
	
		var res = openConfirmDialog(context, DIALOG_QUERY, context.translate(EntryRoot, "DISAGREE_QUIT"));
		if (res)
		{
			main::network.logout();
			quit(context);
		}
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::AgreementPane::Buttons::Yes
{
	function onActivate(context)
	{
		main::sound.play("ok");
	
		NewsPane::refresh(context);
		start_pane(context, "News");
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::NewsPane
{
	function onKeyPress(context, event)
	{
		switch(event.keysym)
		{
			case PS2_PAD_CTRL_R3_UP:
			case PS2_PAD_CTRL_L3_UP:
				if (News.manualTargetIncY(24.0))
					main::sound.play("cursor");
		
				return EVENTRESULT_FILTER;
		
			case PS2_PAD_CTRL_R3_DOWN:
			case PS2_PAD_CTRL_L3_DOWN:
				if (News.manualTargetIncY(-24.0))
					main::sound.play("cursor");
		
				return EVENTRESULT_FILTER;

		}
		return EVENTRESULT_CONTINUE;
	}

	function refresh(context)
	{
		ToolTip::tip.attach();
	
		Done::label.text = context.translate(EntryRoot, "YOU_HAVE_LOGGED_IN").build(main::game.account, sUniverseName);
	
		var info_text = News::clip::space::Info::label;
		info_text.text = sNews;
	
		|var w, var h| = info_text.getTextSize();
		h *= 1.1;
	
		if (h > News::clip.h)
		{
			News::vbar.visible = true;
			News::clip::space.h = h;
			News::clip::space::Info.h = h;
		}
		else
			News::vbar.visible = false;
	
		News.updateGeometry();
	}
	
	function call_focus(context)
	{
		EntryRoot.setFocus(Buttons::OK);
	
		if (isAutoMenu())
		{
			var event = main::menu::MScriptEvent(context, Buttons::OK, "onActivate");
			context.pushEvent(event);
		}
	}
}

module PROJECT::ROOT::NewsPane::Buttons::OK
{
	function onActivate(context)
	{
		if (sSex == 0 || sAge == 0)
		{
			main::sound.play("ok");
	
			ToolTip::tip.remove();
			ToolTip.tip.value = context.translate(EntryRoot, "TOOLTIP|PROFILE_INPUT");
	
			sActivePane.actor.destinationX = -sActivePane.w;
			sActivePane.actor.out = true;
	
			if (!ProfileDialog::open(context))
			{
				restart(context);
				return EVENTRESULT_FILTER;
			}
	
			sActivePane.actor.out = false;
	
			sSex = -1;
			sAge = -1;
			return EVENTRESULT_FILTER;
		}
	
		main::sound.play("next");
		main::game.next_menu_project = main::game.major_menu_project;
		start_page(context, nil);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::hidden::ServerItem::button
{
	function onInstall(context)
	{
		var r = gHttp.HasError();
		gHttp.close();
	
		if (r)
		{
			gHttp.Response();
			closeProgressDialog(context);
			openConfirmDialog(context, DIALOG_ERROR, context.translate(EntryRoot, "DOWNLOAD_FAILED"));
			restart(context);
			return;
		}
	
		var size = gHttp.GetEntitySize();
		var ksize = (size + 0x3FF) / 0x400;
	
		var dnas = main::menu::MDnasInst();
		r = dnas.Initialize();
		if (r < 0)
		{
			gHttp.Response();
			closeProgressDialog(context);
			openConfirmDialog(context, DIALOG_ERROR, context.translate(EntryRoot, "DOWNLOAD_FAILED"));
			return;
		}
	
		size = dnas.Personalize(gHttp.GetMHttp());
		closeProgressDialog(context);

		if (size < 0)
		{
			openConfirmDialog(context, DIALOG_ERROR, context.translate(EntryRoot, "DOWNLOAD_FAILED"));
			return;
		}
	
		ksize = (size + 0x3FF) / 0x400;
	
		r = openConfirmDialog(context, DIALOG_QUERY, context.translate(EntryRoot, "SAVE_CONFIRM"));
		if (r == nil || !r)
			return;
	
		main::sound.play("ok");
		var res = SavePatch(context, dnas, size);
		main::sound.play("ok");
	
		if (res)
		{
			openConfirmDialog(context, DIALOG_OK, context.translate(EntryRoot, "SAVE_DONE"));
			downNetwork();
			main::menu::MSystem::Reboot();
		}
		else
			openConfirmDialog(context, DIALOG_ERROR, context.translate(EntryRoot, "SAVE_FAILED"));
	}

	function onTickDownload(context)
	{
		if (gHttp.IsDone())
		{
			DeleteWatcher();
	
			var event = main::menu::MScriptEvent(context, EntryRoot::hidden::ServerItem::button, "onInstall");
			context.pushEvent(event);
		}
		else
		{
			var total = gHttp.GetContentLength();
			if (!total)
			{
				sProgress.value = 0.0;
			}
			else
			{
				var current = gHttp.GetEntitySize();
				sProgress.value = current.toFloat() / total.toFloat();
			}
		}
	}

	function update_program(context, elf)
	{
		if (!gHttp.AsyncGet(elf))
		{
			openConfirmDialog(context, DIALOG_ERROR, context.translate(EntryRoot, "DOWNLOAD_FAILED"));
			return EVENTRESULT_FILTER;
		}
	
		sProgress = main::menu::MProgress();
		sProgress.value = 0.0;
		setProgress(context, sProgress);
		openProgressDialog(context, context.translate(EntryRoot, "DOWNLOADING"), nil);
		CreateWatcher(context, onTickDownload, 2);
	}

	function onActivate(context, event)
	{
		var item = nil;
	
		if (isAutoMenu())
		{
			item = sTargetServerItem;
		}
		else
		{
			sServerFocused = event.widget;
			item = sMUMList[event.widget.mum_idx];
		}
	
		if (item["status"].toInt() != 1)
		{
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, context.translate(EntryRoot, "SERVER_NOT_AVAILABLE"));
			return EVENTRESULT_FILTER;
		}
	
		main::sound.play("ok");
	
		var need_update = false;
		var exinfo = item.extended_info;
		var elf = "";
		if (exinfo.size)
		{
			var array = exinfo.split(" ");
			if (array.size >= 2)
			{
				var ver = array[0];
				elf = array[1];
				need_update = (ver != main::menu::MSystem::GetVersionString());
			}
		}
	
		if (need_update)
		{
			var res = openConfirmDialog(context, DIALOG_QUERY, context.translate(EntryRoot, "UPDATE_FOUND"));
			if (res != nil && res)
				update_program(context, elf);

			return EVENTRESULT_FILTER;
		}
	
		main::network.svo_url = item.svo_url;
		main::network.setAuthAddr(item.universe_addr, item.universe_port);
		sUniverseName = item.universe_name;
		main::network.isNGSNow = item.isNGS;
	
		LoginPane::refresh(context);
		start_pane(context, "Login");
	
		return EVENTRESULT_FILTER;
	}
}