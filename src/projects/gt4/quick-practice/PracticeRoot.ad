module PROJECT::ROOT
{
	#include "../quick-share/icon.ad";
	
	var quick_work = main::menu::MQuickWork();
	
	// Handles the grid list
	for (var i = 1; i <= 6; i++)
	{
		var widget = ROOT["Grid" + i];
		setMoveActor(widget, 640 + (392 * 2 * i), 0, 0.15); // Original transition
	}

	function onInitialize(context)
	{
		var quick_work = main::menu::MQuickWork();
	
		if (quick_work.canReplay == false)
		{
			Buttons::Replay.visible = false;
			Buttons::SaveReplay.visible = false;
		}
		else
		{
			Buttons::Replay.visible = true;
			Buttons::SaveReplay.visible = true;
		}
	
		for (var i = 0; i < quick_work.numberOfEntries; i++)
		{
			ROOT["Grid" + (i + 1)]["CarName"].text = quick_work.getGridCarName(i);
			ROOT["Grid" + (i + 1)]["CarName"].abbreviate();
			ROOT["Grid" + (i + 1)]["ColorChip"].setColor(quick_work.getColorChipInfo(i));
		}
	
		for (var i = 1; i <= 6; i++)
		{
			var widget = ROOT["Grid" + i];
			rewindMoveActor(widget);
		}
	
		for (var i = quick_work.numberOfEntries + 1; i <= 6; i++)
		{
			ROOT["Grid" + i].visible = false;
		}
	
		if (quick_work.playerGridNumber >= 0)
		{
			var gnum = quick_work.playerGridNumber + 1;
			ROOT["Grid" + gnum]["CarName"].color = ROOT::Hidden::MyGridColor.color;
			ROOT["Grid" + gnum]["GridNumber"].color = ROOT::Hidden::MyGridColor.color;
		}
	
		var course_label = quick_work.courseLabel;
		Title.text = context.translate(ROOT, "CourseName", course_label);
	
		main::sound.startStreamEx("pcm", "default_quick", -1, 1, main::game.option.menu_bgm_volume);
	
		setIconPosition(context);
		setDefaultIconFocus(context);
	}

	function set_next_start_project()
	{
		main::game.next_menu_project = main::game.major_menu_project;
	}

	static icon_name_tbl = [
		"Start",
		"Replay",
		"SaveReplay",
		"Setting",
		"Option",
		"Exit"
	];

	// Recommended to replace this with the superior version from quick-arcade for modding purposes
	// quick-arcade's preserves the UI spacing of the buttons when they are resized for aspect ratio corrections
	function setIconPosition(context)
	{
		var max = icon_name_tbl.size;
		var num = 0;
	
		for (var i = 0; i < max; i++)
		{
			if (ROOT::Buttons[icon_name_tbl[i]].visible == 1)
				num++;
		}
	
		var screen_w = 640;
		var icon_w = 72;
		var space = 4;
	
		var st = (screen_w - num * icon_w - space * (num - 1)) / 2;
		var c = 0;
	
		for (var i = 0; i < max; i++)
		{
			if (ROOT::Buttons[icon_name_tbl[i]].visible == 1)
			{
				ROOT::Buttons[icon_name_tbl[i]].x = st + (icon_w + space) * c;
				c++;
			}
		}
	}

	function onCancel(context, event, item)
	{
		main::sound.play("cancel");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_EXIT";
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
	
		context.finish();
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Start
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_START"; // STRING_CONST: COMMAND
		quick_work.cursorPosition = getIconIndex(context, "Start"); // STRING_CONST:
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		context.finish();
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Replay
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_REPLAY"; // STRING_CONST: COMMAND
		quick_work.cursorPosition = getIconIndex(context, "Replay"); // STRING_CONST:
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		context.finish();
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::SaveReplay
{

	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_SAVE_REPLAY";
		quick_work.cursorPosition = getIconIndex(context, "SaveReplay");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		context.finish();
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Setting
{

	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_SETTINGS";
		quick_work.cursorPosition = getIconIndex(context, "Setting");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
		context.finish();
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Option
{

	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_OPTION";
		quick_work.cursorPosition = getIconIndex(context, "Option");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
		context.finish();
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Exit
{

	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_EXIT";
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
		context.finish();
		return EVENTRESULT_FILTER;
	}
}