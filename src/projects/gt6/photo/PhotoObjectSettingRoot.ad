











module ROOT
{
    static sFirstScrollItem = nil;
    static sLastScrollItem = nil;

    hidden.visible = false;

    attribute openSimply_result;

    method _openSimply_activated()
    {
        self.openSimply_result = true;
    }

    method _openSimply_closed()
    {
        if (self.openSimply_result == nil)
            self.openSimply_result = false;
    }

    class Data
    {
        attribute scene;
        attribute base_root;
        attribute view_point_index;
        attribute car_num;
        attribute garage_ids;
        attribute activate_sound;
        attribute cb_closed;
        attribute cb_instance;
        attribute modal_page;
        attribute result;

        method __init__(scene, base_root, view_point_index, car_num, garage_id_array)
        {
            self.scene = scene;
            self.base_root = base_root;
            self.activate_sound = "ok";
            self.view_point_index = view_point_index;
            self.car_num = car_num;
            self.garage_ids = garage_id_array;
        }

        method open(context)
        {
            self.result = false;
            self.modal_page = SequenceUtil::ModalPage(context, ROOT);
            self.modal_page.open();
        }

        method close(context)
        {
            if (self.cb_closed != nil)
                (self.cb_instance.*self.cb_closed)(context, self.result);

            if (self.modal_page != nil)
            {
                self.modal_page.close();
                self.modal_page = nil;
            }
        }
    }

    attribute sData;

    method open(context, data)
    {
        self.sData = *data;
        ROOT::FadeActor.out = true;
        ROOT::FadeActor.warp();

        ROOT.setFocus(DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip::space::Car0.vbox.Button);

        self.sData.open(context);
    }

    method close(context)
    {
        context.target_widget = nil;

        ROOT.setFocus(nil);
        ROOT::FadeActor.out = true;

        self.sData.close(context);
    }

    method abort(context)
    {
        if (self.sData != nil)
        {
            self.close(context);
            self.sData = nil;
        }
    }

    method execCommand(command)
    {
        ROOT.sData.scene.execCommand(command);
    }

    method startSwitchingFade(context)
    {
        ROOT.sData.base_root.startSwitchingFade(context, true);
    }

    method endSwitchingFade(context)
    {
        ROOT.sData.base_root.endSwitchingFade(context, true);
    }

    method isUnderSetup()
    {
        return ROOT.sData.base_root.isUnderSetup();
    }

    method isAvatarAvailable()
    {
        var avatar_count = ROOT.sData.scene.getReserveCount("avatar");
        if (avatar_count > 0)
            return true;
        else
            return false;
    }

    static sGarageProject;

    static sCarSelectWidget = [
        DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip::space::Car0,
        DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip::space::Car1
    ];

    method onInitialize(context)
    {
        sGarageProject = PROJECT.LoadProject("garage", "GarageProject");

        ROOT.navigate_insensitive = true;

        OptionMenuUtil::initialize(context, ROOT, DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip::space::Avatar::OptionMenu, hidden::Item,
            ["OFF", "ON"], "TrialSetting");

        self.reflect(context);
        DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip.scroll_mode = 0;
        DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip.space.y = 0.0;
        DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip.updateGeometry();

        DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip::space::Avatar.visible = isAvatarAvailable();

        var child_cnt = DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip::space.countChild();

        for (var i = 0; i < child_cnt; i++)
        {
            var w = DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip::space.getChild(i);
            if (w.visible)
            {
                var s = nil;
                if (w.defined('slider'))
                    s = w['slider'];

                if (w.defined('OptionMenu'))
                    s = w['OptionMenu'];

                if (w.defined('Button'))
                    s = w['Button'];

                if (self.sFirstScrollItem == nil)
                    ROOT::sFirstScrollItem = s;

                    ROOT::sLastScrollItem = s;
            }
        }
    }

    method onFinalize(context)
    {
        OptionMenuUtil::finalize(context, DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip::space::Avatar::OptionMenu);
        PROJECT.UnloadProject(sGarageProject);
    }

    method reflect(context)
    {
        for (var i = 0; i < 2; i++)
        {
            var w = sCarSelectWidget[i];
            if (ROOT.sData.garage_ids[i] != nil)
            {
                var garage_car_ref = GAME_STATUS.user_profile.garage.referGarageCar(ROOT.sData.garage_ids[i]);
                w.vbox.Button.label.text = gtengine::MSpecDB::getCarShortName(garage_car_ref.car_code);
            }
            else
            {
                w.vbox.Button.label.text = context.translate(ROOT, "PhotoProject::PhotoObjectSettingRoot", "PLEASE_SELECT_CAR");
            }
        }

        if (main::GAME_STATUS.user_profile.option.photo_avatar_visible)
            DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip::space::Avatar::OptionMenu.setIndex(context, 1);
        else
            DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip::space::Avatar::OptionMenu.setIndex(context, 0);
    }

    method apply(context)
    {
    }

    method onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case CELL_PAD_CTRL_TRIANGLE:
                main::sound.play("cancel");
                ROOT.apply(context);
                ROOT.close(context);
                return EVENTRESULT_FILTER;

            break;
        }

        return EVENTRESULT_CONTINUE;
    }

    method onChangeCar(context, idx)
    {
        var w = sCarSelectWidget[idx];
        var garage_id = GarageProject::CarSelectPopup.openCarPickup(context, ROOT.sData.garage_ids);
        if (garage_id == nil)
            return EVENTRESULT_FILTER;

            ROOT.sData.garage_ids[idx] = garage_id;

        var cp = GAME_STATUS.user_profile.garage.getCar(ROOT.sData.garage_ids[idx]);
        w.vbox.Button.label.text = gtengine::MSpecDB::getCarShortName(cp.getCarCode());

        ROOT.startSwitchingFade(context);

        ROOT.sData.scene.setDefaultCarParameter(cp, idx);

        var cmd = "changeCar _default%d car%d".format(idx, idx);
        execCommand(cmd);

        var target_array = [
            main::gtengine::PlaceType::CAR0,
            main::gtengine::PlaceType::CAR1,
            main::gtengine::PlaceType::CAR2,
            main::gtengine::PlaceType::CAR3,
        ];

        cmd = "setEntityToReservePlace %d %d car%d true".format(target_array[idx], ROOT.sData.view_point_index, idx);
        execCommand(cmd);

        var location_code = PhotoTravelRoot::sLocationData[PhotoTravelRoot::sLocationIndex]["base_code"];
        location_code += "_AFTER_CHANGE_CAR";

        var script_code = main::CommandAlias::get(location_code);
        if (script_code != nil)
            execCommand(script_code);

        PhotoTravelRoot::sCarIsStandard[idx] = gtengine::MSpecDB::isStandardModel(cp.getCarCode());

        while (ROOT.isUnderSetup())
            pdiext::ProcessUpdateIteration();

        ROOT.endSwitchingFade(context);
        context.filterKeyEvent();
    }

    method onDeleteCar(context, idx)
    {
        var w =  sCarSelectWidget[idx];
        w.vbox.Button.label.text ="----";

        ROOT.startSwitchingFade(context);

        var cmd = "setVisible false car%d".format(idx);
        execCommand(cmd);

        var cnt = 0;
        var found_id = nil;

        foreach (var id in ROOT.sData.garage_ids)
        {
            if (id != nil && found_id == nil)
            {
                cmd = "setCurrentModel  car%d".format(cnt);
                execCommand(cmd);
                found_id = cnt;
            }

            cnt++;
        }

        if (found_id == nil && main::GAME_STATUS.user_profile.option.photo_avatar_visible)
        {
            execCommand("setCurrentModel  driver0");
        }

        ROOT.sData.garage_ids[idx] = nil;

        while (ROOT.isUnderSetup())
            pdiext::ProcessUpdateIteration();

        ROOT.endSwitchingFade(context);
        context.filterKeyEvent();
    }

    module DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip::space::Car0::vbox::Button
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            onChangeCar(context, 0);
            return EVENTRESULT_FILTER;
        }
    }

    module DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip::space::Car1::vbox::Button
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            onChangeCar(context, 1);
            return EVENTRESULT_FILTER;
        }
    }

    module DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip::space::Avatar::OptionMenu
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);

            if (self.index == 0)
                main::GAME_STATUS.user_profile.option.photo_avatar_visible = false;
            else
                main::GAME_STATUS.user_profile.option.photo_avatar_visible = true;

            startSwitchingFade(context);

            if (!main::GAME_STATUS.user_profile.option.photo_avatar_visible)
            {
                execCommand("setVisible false driver0");
                execCommand("setVisible false driver0_met");
                execCommand("setPhotoCollisionType none driver0");
            }
            else
            {
                execCommand("setVisible true driver0");
                execCommand("setVisible true driver0_met");
                execCommand("setPhotoCollisionType circle driver0");
            }

            while (isUnderSetup())
                pdiext::ProcessUpdateIteration();

            context.filterKeyEvent();
            endSwitchingFade(context);

            return EVENTRESULT_FILTER;
        }
    }


    module DialogFrame::Pane::Body::Message::ScrolledWindow::ScrollClip::space::Car1Del::vbox::Button
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            onDeleteCar(context, 1);
            return EVENTRESULT_FILTER;
        }
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.apply(context);
        ROOT.close(context);
        return EVENTRESULT_FILTER;
    }
}