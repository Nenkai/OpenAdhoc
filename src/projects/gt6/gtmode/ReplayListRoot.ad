













module ROOT
{
    module MODE
    {
        static REPLAY = 0x01;
        static MOVIE = 0x10;
        static PHOTO = 0x100;
        static MUSIC = 0x1000;
        static COURSE = 0x10000;
        static ALL = 0x11111;
    }

    attribute modal_page;
    attribute closed;
    attribute disable_cnt = 0;
    attribute mode;
    attribute result;
    attribute strategy;
    attribute cancel;
    attribute in_music_preview;
    attribute args;

    hidden.is_enable = false;

    class Strategy
    {
        attribute current_mode;
        attribute column_widget;
        attribute option_widget;
        attribute editmenu_data;

        method updateList(context) { }

        method initEditMenu() { }

        method setButtonHelp(context) { }

        method onOutViewMode(context) { }

        method finalize()
        {
            self.current_mode = nil;
            self.column_widget = nil;
            self.option_widget = nil;
            self.editmenu_data = nil;
        }
    }

    class ReplayLibraryStrategy : Strategy
    {
        method __init__()
        {
            self.current_mode = MODE::REPLAY;
            self.column_widget = ListMenu::ListWindow::ColumnList::Replay;
            self.option_widget = ListMenu::ListWindow::ListOption::Replay;
            
            self.editmenu_data = [ListMenu::EditMenu::Group(manager.translate(ROOT, "Label_FileOperation"),
            [
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_AddFavorite"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [ReplayFunction::setFavorite, true]),
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_ExportFile"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [ReplayFunction::export]),
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_RemoveFile"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [ReplayFunction::remove]),
            ])];
        }

        method getCourseCodeList()
        {
            return ReplayFileUtil::getSceneryCodeList(false);
        }

        method getTitleList(course_code)
        {
            return ReplayFileUtil::getTitleList(course_code, false);
        }

        method updateList(context) 
        { 
            var replay = ListMenu::ListWindow::ListOption::Replay;
            var course_code = replay.FilterCourse::OptionMenu.getSelectedCourse();
            var game_mode = replay.FilterGameMode::OptionMenu.getSelectedGameMode();
            var replay_list = ReplayFileUtil::getList(game_mode, course_code);
            ListMenu::ListWindow.setList(context, replay_list, hidden::ReplayItem);
        }

        method setButtonHelpOnList(context)
        {
            ButtonHelpGT6.setButtonSet(context, "onReplayList");
        }
    }

    class ReplayFavoriteStrategy : Strategy
    {
        method __init__()
        {
            self.current_mode = MODE::REPLAY;
            self.column_widget = ListMenu::ListWindow::ColumnList::Replay;
            self.option_widget = ListMenu::ListWindow::ListOption::Replay;
            
            self.editmenu_data = [ListMenu::EditMenu::Group(manager.translate(ROOT, "Label_FileOperation"),
            [
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_RemoveFavorite"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [ReplayFunction::setFavorite, false]),
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_ExportFile"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [ReplayFunction::export]),
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_RemoveFile"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [ReplayFunction::remove]),
            ])];
        }

        method getCourseCodeList()
        {
            return ReplayFileUtil::getSceneryCodeList(true);
        }

        method getTitleList(course_code)
        {
            return ReplayFileUtil::getTitleList(course_code, true);
        }

        method updateList(context) 
        { 
            var replay = ListMenu::ListWindow::ListOption::Replay;
            var course_code = replay.FilterCourse::OptionMenu.getSelectedCourse();
            var game_mode = replay.FilterGameMode::OptionMenu.getSelectedGameMode();
            var replay_list = ReplayFileUtil::getFavoriteList(game_mode, course_code);
            ListMenu::ListWindow.setList(context, replay_list, hidden::ReplayItem);
        }

        method setButtonHelpOnList(context)
        {
            ButtonHelpGT6.setButtonSet(context, "onReplayList");
        }
    }

    class PhotoLibraryStrategy : Strategy
    {
        method __init__()
        {
            self.current_mode = MODE::PHOTO;
            self.column_widget = ListMenu::ListWindow::ColumnList::Photo;
            self.option_widget = ListMenu::ListWindow::ListOption::Photo;
            
            self.editmenu_data = [ListMenu::EditMenu::Group(manager.translate(ROOT, "Label_FileOperation"),
            [
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_AddFavorite"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [PhotoFunction::setFavorite, true]),
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_ExportFile"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [PhotoFunction::export]),
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_RemoveFile"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [PhotoFunction::remove]),
            ])];
        }

        method getTitleList()
        {
            return PhotoFileUtil::getTitleList(false);
        }

        method getIs3DList(location)
        {
            return PhotoFileUtil::getIs3DList(location, false);
        }

        method updateList(context) 
        { 
            var photo = ListMenu::ListWindow::ListOption::Photo;
            var location = photo.FilterLocation::OptionMenu.getSelectedLocation();
            var format = photo.FilterFormat::OptionMenu.getSelectedFormat();
            var photo_list = PhotoFileUtil::getList2(location, format);
            ListMenu::ListWindow.setList(context, photo_list, hidden::PhotoItem);
        }

        method setButtonHelpOnList(context)
        {
            ButtonHelpGT6.setButtonSet(context, "onPhotoList");
        }
    }

    class PhotoFavoriteStrategy : Strategy
    {
        method __init__()
        {
            self.current_mode = MODE::PHOTO;
            self.column_widget = ListMenu::ListWindow::ColumnList::Photo;
            self.option_widget = ListMenu::ListWindow::ListOption::Photo;
            
            self.editmenu_data = [ListMenu::EditMenu::Group(manager.translate(ROOT, "Label_FileOperation"),
            [
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_RemoveFavorite"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [PhotoFunction::setFavorite, false]),
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_ExportFile"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [PhotoFunction::export]),
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_RemoveFile"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [PhotoFunction::remove]),
            ])];
        }

        method getTitleList()
        {
            return PhotoFileUtil::getTitleList(true);
        }

        method getIs3DList(location)
        {
            return PhotoFileUtil::getIs3DList(location, true);
        }

        method updateList(context) 
        { 
            var photo = ListMenu::ListWindow::ListOption::Photo;
            var location = photo.FilterLocation::OptionMenu.getSelectedLocation();
            var format = photo.FilterFormat::OptionMenu.getSelectedFormat();
            var photo_list = PhotoFileUtil::getFavoriteList(location, format);
            ListMenu::ListWindow.setList(context, photo_list, hidden::PhotoItem);
        }

        method setButtonHelpOnList(context)
        {
            ButtonHelpGT6.setButtonSet(context, "onPhotoList");
        }
    }

    class MusicLibraryStrategy : Strategy
    {
        method __init__()
        {
            self.current_mode = MODE::MUSIC;
            self.column_widget = ListMenu::ListWindow::ColumnList::Music;
            self.option_widget = ListMenu::ListWindow::ListOption::Music;
            
            self.editmenu_data = [ListMenu::EditMenu::Group(manager.translate(ROOT, "Label_FileOperation"),
            [
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_AddRaceBGM"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [MusicFunction::setRaceBgm, true]),
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_AddMenuBGM"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [MusicFunction::setMenuBgm, true]),
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_AddSlideshowBGM"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [MusicFunction::setSlideShowBgm, true]),
            ])];
        }

        method getArtistList()
        {
            var params = Map();
            return MusicFileUtil::getArtistList(params);
        }

        method getGenreList(artist)
        {
            var params = Map();
            return MusicFileUtil::getGenreList(artist, params);
        }

        method updateList(context) 
        { 
            var music = ListMenu::ListWindow::ListOption::Music;
            music.Header2.visible = false;
            music.SetDefault.visible = false;
            var artist = music.FilterArtist::OptionMenu.getSelectedArtist();
            var genre = music.FilterGenre::OptionMenu.getSelectedGenre();
            var music_list = MusicFileUtil::getLibraryList(artist, genre, "genre");
            ListMenu::ListWindow.setList(context, music_list, hidden::MusicItem);
        }

        method setButtonHelpOnList(context)
        {
            ButtonHelpGT6.setButtonSet(context, "onMusicList");
        }

        method onOutViewMode(context)
        {
            SoundUtil::ApplyPlaylist();
        }

        method setDefault(context)
        {

        }
    }

    class MusicRaceBGMStrategy : Strategy
    {
        method __init__()
        {
            self.current_mode = MODE::MUSIC;
            self.column_widget = ListMenu::ListWindow::ColumnList::Music;
            self.option_widget = ListMenu::ListWindow::ListOption::Music;
            
            self.editmenu_data = [ListMenu::EditMenu::Group(manager.translate(ROOT, "Label_FileOperation"),
            [
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_RemoveRaceBGM"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [MusicFunction::setRaceBgm, false]),
            ])];
        }

        method getArtistList()
        {
            var params = [
                "race" : true
            ];

            return MusicFileUtil::getArtistList(params);
        }

        method getGenreList(artist)
        {
            var params = [
                "race" : true
            ];
            return MusicFileUtil::getGenreList(artist, params);
        }

        method updateList(context) 
        { 
            var music = ListMenu::ListWindow::ListOption::Music;
            music.Header2.visible = true;
            music.SetDefault.visible = true;
            var artist = music.FilterArtist::OptionMenu.getSelectedArtist();
            var genre = music.FilterGenre::OptionMenu.getSelectedGenre();
            var music_list = MusicFileUtil::getRaceBgmList(artist, genre, "genre");
            ListMenu::ListWindow.setList(context, music_list, hidden::MusicItem);
        }

        method setButtonHelpOnList(context)
        {
            ButtonHelpGT6.setButtonSet(context, "onMusicList");
        }

        method onOutViewMode(context)
        {
            SoundUtil::ApplyPlaylist();
        }

        method setDefault(context)
        {
            var list = MusicFileUtil::getRaceBgmList();
            var id_list = [];

            foreach (var i in list)
                id_list.push(i.id);

            MusicFileUtil::setRaceBgmByList(id_list, false);


            list = MusicFileUtil::getDefaultRaceBgmList();
            id_list = [];
            
            foreach (var i in list)
                id_list.push(i.id);
            MusicFileUtil::setRaceBgmByList(id_list, true);  
        }
    }

    class MusicMenuBGMStrategy : Strategy
    {
        method __init__()
        {
            self.current_mode = MODE::MUSIC;
            self.column_widget = ListMenu::ListWindow::ColumnList::Music;
            self.option_widget = ListMenu::ListWindow::ListOption::Music;
            
            self.editmenu_data = [ListMenu::EditMenu::Group(manager.translate(ROOT, "Label_FileOperation"),
            [
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_RemoveMenuBGM"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [MusicFunction::setMenuBgm, false]),
            ])];
        }

        method getArtistList()
        {
            var params = [
                "menu" : true
            ];

            return MusicFileUtil::getArtistList(params);
        }

        method getGenreList(artist)
        {
            var params = [
                "menu" : true
            ];
            return MusicFileUtil::getGenreList(artist, params);
        }

        method updateList(context) 
        { 
            var music = ListMenu::ListWindow::ListOption::Music;
            music.Header2.visible = true;
            music.SetDefault.visible = true;
            var artist = music.FilterArtist::OptionMenu.getSelectedArtist();
            var genre = music.FilterGenre::OptionMenu.getSelectedGenre();
            var music_list = MusicFileUtil::getMenuBgmList(artist, genre, "genre");
            ListMenu::ListWindow.setList(context, music_list, hidden::MusicItem);
        }

        method setButtonHelpOnList(context)
        {
            ButtonHelpGT6.setButtonSet(context, "onMusicList");
        }

        method onOutViewMode(context)
        {
            SoundUtil::ApplyPlaylist();
        }

        method setDefault(context)
        {
            var list = MusicFileUtil::getMenuBgmList();
            var id_list = [];

            foreach (var i in list)
                id_list.push(i.id);

            MusicFileUtil::setMenuBgmByList(id_list, false);


            list = MusicFileUtil::getDefaultMenuBgmList();
            id_list = [];
            
            foreach (var i in list)
                id_list.push(i.id);
            MusicFileUtil::setMenuBgmByList(id_list, true);  
        }
    }

    class MusicSlideShowBGMStrategy : Strategy
    {
        method __init__()
        {
            self.current_mode = MODE::MUSIC;
            self.column_widget = ListMenu::ListWindow::ColumnList::Music;
            self.option_widget = ListMenu::ListWindow::ListOption::Music;
            
            self.editmenu_data = [ListMenu::EditMenu::Group(manager.translate(ROOT, "Label_FileOperation"),
            [
                ListMenu::EditMenu::Button(manager.translate(ROOT, "Label_RemoveSlideshowBGM"), true, ListMenu::ListWindow.MultiSelectCallbackOnce, [MusicFunction::setSlideShowBgm, false]),
            ])];
        }

        method getArtistList()
        {
            var params = [
                "slideshow" : true
            ];

            return MusicFileUtil::getArtistList(params);
        }

        method getGenreList(artist)
        {
            var params = [
                "slideshow" : true
            ];
            return MusicFileUtil::getGenreList(artist, params);
        }

        method updateList(context) 
        { 
            var music = ListMenu::ListWindow::ListOption::Music;
            music.Header2.visible = true;
            music.SetDefault.visible = true;
            var artist = music.FilterArtist::OptionMenu.getSelectedArtist();
            var genre = music.FilterGenre::OptionMenu.getSelectedGenre();
            var music_list = MusicFileUtil::getSlideShowBgmList(artist, genre, "genre");
            ListMenu::ListWindow.setList(context, music_list, hidden::MusicItem);
        }

        method setButtonHelpOnList(context)
        {
            ButtonHelpGT6.setButtonSet(context, "onMusicList");
        }

        method onOutViewMode(context)
        {
            SoundUtil::ApplyPlaylist();
        }

        method setDefault(context)
        {
            var list = MusicFileUtil::getSlideShowBgmList();
            var id_list = [];

            foreach (var i in list)
                id_list.push(i.id);

            MusicFileUtil::setSlideShowBgmByList(id_list, false);


            list = MusicFileUtil::getDefaultSlideShowBgmList();
            id_list = [];
            
            foreach (var i in list)
                id_list.push(i.id);
            MusicFileUtil::setSlideShowBgmByList(id_list, true);  
        }
    }

    class MovieLibraryStrategy : Strategy
    {
        method __init__()
        {
            self.current_mode = MODE::MOVIE;
            self.column_widget = ListMenu::ListWindow::ColumnList::Movie;
            self.option_widget = ListMenu::ListWindow::ListOption::Movie;
        }

        method updateList(context) 
        { 
            var movie_list0 = MENUDB.queryList("SELECT * FROM t_movie WHERE StreamID IN (10006, 10017) ORDER BY StreamID");
            var movie_list = [];
            var is_ending = KeyValueUtil::getFlag_NotNil("career", "play_ending");
            if (is_ending)
                movie_list = movie_list0;
            else
                movie_list = [movie_list0[0]];

            var movie_list1 = MENUDB.queryList("SELECT * FROM t_movie WHERE StreamID IN (10032) ORDER BY StreamID");
            movie_list.append(movie_list1);
            
            ListMenu::ListWindow.setList(context, movie_list, hidden::MovieItem);
        }

        method setButtonHelpOnList(context)
        {
            ButtonHelpGT6.setButtonSet(context, "onMovieList");
        }
    }

    class CourseLibraryStrategy : Strategy
    {
        method __init__()
        {
            self.current_mode = MODE::COURSE;
            self.column_widget = ListMenu::ListWindow::ColumnList::Course;
            self.option_widget = ListMenu::ListWindow::ListOption::Course;
        }

        method updateList(context) 
        {
            var course_list = [];
            var user_id = Grim2.getLoginUserId();

            var request = main::Course.requestList(user_id, function(args) {});
            if (Grim2Util::joinAwait(context, request))
                course_list = main::Course.decodeCourseList(request);

            var course_list0 = [];
            var exist_course = false;

            foreach (var course in course_list)
            {
                var skip = false;
                var status = course["status"];
                if (ROOT.mode == MODE::ALL)
                    skip = status == 0;
                else if (ROOT.mode == MODE::COURSE)
                {
                    skip = true;
                    foreach (var s in ROOT.args)
                    {
                        if (s == status)
                            skip = false;
                    }
                }

                if (status > 0)
                    exist_course = true;

                if (skip)
                    ;
                else
                    course_list0.push(course);
            }

            ListMenu::ListWindow.setList(context, course_list0, hidden::CourseItem, exist_course ? "NoSavedCourse" : "NoCourse");
        }

        method setButtonHelpOnList(context)
        {
            ButtonHelpGT6.setButtonSet(context, "onCourseList");
        }
    }

    class CourseSampleStrategy : Strategy
    {
        method __init__()
        {
            self.current_mode = MODE::COURSE;
            self.column_widget = ListMenu::ListWindow::ColumnList::Course;
            self.option_widget = ListMenu::ListWindow::ListOption::Course;
        }

        method updateList(context) 
        {
            var course_list = CourseMakerUtil::getSampleCourseList(context);
            ListMenu::ListWindow.setList(context, course_list, hidden::CourseItem);
        }

        method setButtonHelpOnList(context)
        {
            ButtonHelpGT6.setButtonSet(context, "onCourseList");
        }
    }

    function checkLogin(context)
    {
        var res = LoginUtil::makeSureLogin(context, true);
        LoginUtil::setPresence(res);
        return res;
    }

    module ReplayFunction
    {
        module Impl
        {
            #include "ReplayFunction.ad";
        }

        method setFavorite(context, replay_list, args, state_ref_list)
        {
            if (replay_list.size == 0)
            {
                OK(context, "Gallery", "MSG_NO_SELECTED_ITEM");
                return;
            }

            Impl::setFavorite(context, replay_list, args);
            if (args)
                return;

            foreach (var state_ref in state_ref_list)
            {
                *state_ref = ListMenu::ListWindow::ITEM_STATE::Blank;
            }
        }

        method export(context, replay_list, args, state_ref_list)
        {
            if (replay_list.size == 0)
            {
                OK(context, "Gallery", "MSG_NO_SELECTED_ITEM");
                return;
            }

            Impl::export(context, replay_list);
        }

        method remove(context, replay_list, args, state_ref_list)
        {
            if (replay_list.size == 0)
            {
                OK(context, "Gallery", "MSG_NO_SELECTED_ITEM");
                return;
            }

            var res = Impl::remove(context, replay_list);
            if (!res)
                return;

            foreach (var state_ref in state_ref_list)
            {
                *state_ref = ListMenu::ListWindow::ITEM_STATE::Blank;
            }
        }

        method importFrom(context)
        {
            var res = Impl::importFrom(context);
            if (res)
            {
                ROOT.strategy.updateList(context);
            }
        }
    }

    module PhotoFunction
    {
        module Impl
        {
            #include "PhotoFunction.ad"
        }

        method setFavorite(context, photo_list, args, state_ref_list)
        {
            if (photo_list.size == 0)
            {
                OK(context, "Gallery", "MSG_NO_SELECTED_ITEM");
                return;
            }

            Impl::setFavorite(context, photo_list, args);
            if (args)
                return;

            foreach (var state_ref in state_ref_list)
            {
                *state_ref = ListMenu::ListWindow::ITEM_STATE::Blank;
            }
        }

        method export(context, photo_list, args, state_ref_list)
        {
            if (photo_list.size == 0)
            {
                OK(context, "Gallery", "MSG_NO_SELECTED_ITEM");
                return;
            }

            Impl::export(context, photo_list);
        }

        method remove(context, photo_list, args, state_ref_list)
        {
            if (photo_list.size == 0)
            {
                OK(context, "Gallery", "MSG_NO_SELECTED_ITEM");
                return;
            }

            var res = Impl::remove(context, photo_list);
            if (!res)
                return;

            foreach (var state_ref in state_ref_list)
            {
                *state_ref = ListMenu::ListWindow::ITEM_STATE::Blank;
            }
        }

        method setOnline(context, photo_list, args, state_ref_list)
        {
            if (photo_list.size == 0)
            {
                OK(context, "Gallery", "MSG_NO_SELECTED_ITEM");
                return;
            }

            Impl::setOnline(context, photo_list, args);
        }
    }

    module MusicFunction
    {
        module Impl
        {
            #include "MusicFunction.ad"
        }

        method updateStateIf(args, state_ref_list)
        {
            if (args)
                return;

            foreach (var state_ref in state_ref_list)
            {
                *state_ref = ListMenu::ListWindow::ITEM_STATE::Blank;
            }
        }

        method setRaceBgm(context, music_list, args, state_ref_list)
        {
            if (music_list.size == 0)
            {
                OK(context, "Gallery", "MSG_NO_SELECTED_ITEM");
                return;
            }

            Impl::setRaceBgm(context, music_list, args);
            updateStateIf(args, state_ref_list);
        }

        method setMenuBgm(context, music_list, args, state_ref_list)
        {
            if (music_list.size == 0)
            {
                OK(context, "Gallery", "MSG_NO_SELECTED_ITEM");
                return;
            }

            Impl::setMenuBgm(context, music_list, args);
            updateStateIf(args, state_ref_list);
        }

        method setSlideShowBgm(context, music_list, args, state_ref_list)
        {
            if (music_list.size == 0)
            {
                OK(context, "Gallery", "MSG_NO_SELECTED_ITEM");
                return;
            }

            Impl::setSlideShowBgm(context, music_list, args);
            updateStateIf(args, state_ref_list);
        }

        method play(context, music)
        {
            Impl::play1(context, music, MusicFunction);
        }

        method stop(context)
        {
            Impl::stop(context);
        }

        function onPlayCallback(context, music, callback)
        {
            var strategy = ROOT.strategy;
            if (strategy == nil)
                return;

            if (strategy.current_mode != MODE::MUSIC)
                return;

            var listbox = ListMenu.getListBox();
            for (var i = 0; i < listbox.getItemCount(); ++i)
            {
                var item = listbox.getItemWidget(i);
                if (item == nil || item.value == nil)
                    continue;

                var music0 = item.value;
                if (music0.code == music.code)
                {
                    var playing = callback == Impl::MusicPlayer::CALLBACK_BEGIN;
                    item.PlayPause::ImageFacePlay.visible = !playing;
                    item.PlayPause::ImageFacePause.visible = playing;
                }
            }
        }

        function setDefault(context)
        {
            var res = QUERY(context, "Gallery", "QUERY_SET_PLAYLIST_TO_DEFAULT");
            if (!res)
                return false;

            ROOT.strategy.setDefault(context);
            SoundUtil::ApplyPlaylist();
            SoundUtil::MenuBGMPlayGroupCue("menu", 1.0, ["duration" : 0, "interval" : 0]);

            OK(context, "Gallery", "MSG_SET_PLAYLIST_TO_DEFAULT");
            ROOT.strategy.updateList(context);
        }
    }

    method open(context, mode, args)
    {
        self.mode = mode;
        self.args = args;
        self.closed = true;
        self.cancel = false;
        self.in_music_preview = false;

        self.modal_page = main::SequenceUtil::ModalPage(context, ROOT);
        self.modal_page.open();

        var res = self.result;
        self.result = nil;
        return res;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;
        PageUtil::visibleUnderPages(context, self);
        ROOT.setFocus(nil);

        var actor = self.CloseActor;
        actor.forward();
        actor.restart();

        if (self.modal_page != nil)
        {
            var delay_time = actor.Fade.total_time;
            self.modal_page.close(delay_time);
            self.modal_page = nil;
        }
    }

    method cancel_close(context)
    {
        ROOT.cancel = true;
        self.close(context);
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        cancel_close(context);
        return EVENTRESULT_FILTER;
    }

    method onInitialize(context)
    {
        ContextMain.disableInput();

        var actor = self.OpenActor;
        actor.forward();
        actor.restart();
        actor.on_effect_end = function(context)
        {
            actor.on_effect_end = nil;
            PageUtil::invisibleUnderPages(context, self);
            ContextMain.enableInput();
            ROOT.closed = false;
        }

        self.CloseActor.stop();

        ListMenu::Menus.insensitive = false;
        ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Replay.visible = false;
        ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Movie.visible = false;
        ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Photo.visible = false;
        ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Music.visible = false;
        ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Course.visible = false;

        var target = nil;
        if (self.mode & MODE::REPLAY)
        {
            ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Replay.visible = true;
            if (target == nil)
                target = ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Replay::VBox::Library;
        }

        if (self.mode & MODE::MOVIE)
        {
            ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Movie.visible = true;
            if (target == nil)
                target = ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Movie::VBox::Library;
        }

        if (self.mode & MODE::PHOTO)
        {
            ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Photo.visible = true;
            if (target == nil)
                target = ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Photo::VBox::Library;
        }

        if (self.mode & MODE::MUSIC)
        {
            ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Music.visible = true;
            if (target == nil)
                target = ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Music::VBox::Library;
        }

        if (self.mode & MODE::COURSE)
        {
            ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Course.visible = true;
            if (target == nil)
                target = ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Course::VBox::Library;
        }

        if (target != nil)
            ListMenu::Menus::Main_TopMenu.default_focus_ = target;

        ListMenu::Menus.shiftMainMenu(context, 'Main_TopMenu', true);

        ButtonHelpGT6.addButtonSet(context, "onMenus", [
            ["Enter"], 
            ["Close"]
        ]);

        ButtonHelpGT6.addButtonSet(context, "onReplayList", [
            ["Enter", manager.translate(ROOT, "Label_OpenDetail")], 
            ["Select", manager.translate(ROOT, "Label_Edit")], 
            ["Back"], 
        ]);

        ButtonHelpGT6.addButtonSet(context, "onPhotoList", [
            ["Enter", manager.translate(ROOT, "Label_OpenDetail")], 
            ["Select", manager.translate(ROOT, "Label_Edit")], 
            ["Back"], 
        ]);

        ButtonHelpGT6.addButtonSet(context, "onMusicList", [
            ["Enter", manager.translate(ROOT, "Label_OpenDetail")], 
            ["Select", manager.translate(ROOT, "Label_Edit")], 
            ["Back"], 
        ]);

        ButtonHelpGT6.addButtonSet(context, "onMovieList", [
            ["Enter", manager.translate(ROOT, "Label_OpenDetail")], 
            ["Back"], 
        ]);

        ButtonHelpGT6.addButtonSet(context, "onCourseList", [
            ["Enter", manager.translate(ROOT, "Label_OpenDetail")], 
            ["Back"], 
        ]);

        ButtonHelpGT6.addButtonSet(context, "EditMode", [
            ["Enter", manager.translate(ROOT, "Label_EditSelect")], 
            ["Triangle", manager.translate(ROOT, "Label_EditSelectAll")], 
            ["Back"], 
        ]);

        ButtonHelpGT6.setButtonSet(context, "onMenus");
        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        PageUtil::visibleUnderPages(context, self);
        if (ROOT.strategy != nil)
        {
            ROOT.strategy.finalize();
            ROOT.strategy = nil;
        }

        PhotoFunction::Impl::finalize();
        MusicFunction::Impl::finalize();

        if (self.mode == MODE::ALL)
        {
            if (ROOT.cancel && ROOT.in_music_preview)
                SoundUtil::MenuBGMPlayGroupCue("menu", 1.0, ["duration" : 0, "interval" : 0]);

            SoundUtil::ResumeMenuSEVolume();
        }

        return EVENTRESULT_FILTER;
    }

    method disableInput(context)
    {
        if (self.disable_cnt == 0)
        {
            context.event_mask = 5;
            context.disableInput();
            context.filterKeyEvent();
        }

        self.disable_cnt++;
    }

    method enableInput(context)
    {
        self.disable_cnt--;

        if (disable_cnt < 0)
            disable_cnt = 0;

        if (disable_cnt == 0)
        {
            context.event_mask = 5;
            context.enableInput();
        }
    }

    module ImportMenuCommons
    {
        attribute focus_;
        attribute active_;

        method setActiveMenu(a, w)
        {
            if (w != nil)
            {
                ListMenu::ListWindow::Head::Label.text = w.Label.text;
            }

            if (self.active_ == w)
                return false;

            if (self.active_ != nil)
            {
                self.active_.active = false;
                self.active_ = nil;
            }

            if (w != nil)
            {
                w.active = a;
                self.active_ = w;
                ListMenu::ListWindow::Head::Label.text = w.Label.text;
            }

            return true;
        }

        method _on_focus_CB(context)
        {
            var focus_w;
            if (self.active_ != nil)
            {                
                focus_w = self.active_;
            }
            else if (self.defined('default_focus_') && self.default_focus_ != nil)
            {
                focus_w = self.default_focus_;
            }

            if (focus_w != nil)
            {
                if (self["ScrolledWindow"] != nil)
                {
                    self.ScrolledWindow::clip.warp(focus_w);
                }

                ROOT.setFocus(focus_w);
                if (focus_w.defined('onFocus_CB'))
                {
                    focus_w['onFocus_CB'](context);
                }

                if (self.defined('onFocus_CB'))
                {
                    self['onFocus_CB'](context);
                }
            }
        }

        method _leave_focus_CB(context)
        {
            if (self.defined('leaveFocus_CB'))
            {
                self['leaveFocus_CB'](context);
            }
        }
    }

    module ListMenu::Menus
    {
        attribute main_menu_;
        attribute sub_menu_;

        method onKeyPress(context, event)
        {
            if (event.keysym == CELL_PAD_CTRL_L3_RIGHT)
            {
                var no_move = ROOT.strategy.current_mode == MODE::MOVIE ||
                ROOT.strategy.current_mode == MODE::COURSE;

                if (ListMenu::ListWindow.inViewMode(context, false, no_move))
                {
                    sound.play("cursor");
                    return EVENTRESULT_FILTER;
                }
            }

            return EVENTRESULT_CONTINUE;
        }

        method shiftMainMenu(context, main_menu, warp)
        {
            ROOT.disableInput(context);

            var sub_menu_w = self.sub_menu_ != nil ? ListMenu::Menus[self.sub_menu_] : nil;
            var main_menu_w = ListMenu::Menus[main_menu];
            if (main_menu_w != nil)
            {
                main_menu_w.x = 0.0;
                main_menu_w.visible = true;
                if (main_menu_w.defined("init_CB"))
                    main_menu_w.init_CB(context);
            }

            if (sub_menu_w != nil)
            {
                if (sub_menu_w.defined("_leave_focus_CB"))
                sub_menu_w._leave_focus_CB(context);
            }

            if (main_menu_w != nil)
            {
                if (main_menu_w.defined("_on_focus_CB"))
                    main_menu_w._on_focus_CB(context);
            }

            self.MoveActor.reverse = false;
            self.MoveActor.start();
            self.MoveActor.on_effect_end = function(context)
            {
                if (sub_menu_w != nil)
                {
                    sub_menu_w.visible = false;
                }

                ListMenu::Menus::MoveActor.on_effect_end = nil;
                ROOT.enableInput(context);
            }

            if (warp == true)
                self.MoveActor.warp();

            self.main_menu_ = main_menu;
            self.sub_menu_ = nil;
        }

        method shiftSubMenu(context, sub_menu, warp)
        {
            ROOT.disableInput(context);

            var main_menu_w = self.main_menu_ != nil ? ListMenu::Menus[self.main_menu_] : nil;
            var sub_menu_w = ListMenu::Menus[sub_menu];

            if (sub_menu_w != nil)
            {
                sub_menu_w.x = 480.0;
                sub_menu_w.visible = true;
                if (sub_menu_w.defined("init_CB"))
                    sub_menu_w.init_CB(context);

                yield;
            }

            if (main_menu_w != nil)
            {
                if (main_menu_w.defined("_leave_focus_CB"))
                    main_menu_w._leave_focus_CB(context);
            }

            if (sub_menu_w != nil)
            {
                if (sub_menu_w.defined("_on_focus_CB"))
                sub_menu_w._on_focus_CB(context);
            }

            self.MoveActor.reverse = true;
            self.MoveActor.start();
            self.MoveActor.on_effect_end = function(context)
            {
                if (main_menu_w != nil)
                {
                    main_menu_w.visible = false;
                }

                ListMenu::Menus::MoveActor.on_effect_end = nil;
                ROOT.enableInput(context);
            }

            if (warp == true)
                self.MoveActor.warp();

            self.sub_menu_ = sub_menu;
        }

        method onInitialize(context)
        {
            for (var w = self.first; w != nil; w = w.next)
            {
                w.visible = false;
            }
        }
    }

    module ListMenu::Menus::Main_TopMenu
    {
        import ImportMenuCommons::*;

        attribute default_focus_ = ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Replay::VBox::Library;

        method onFinalize(context)
        {
            self.setActiveMenu(false);
        }
    }

    module ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Replay::VBox
    {
        method updateReplayList(context, new_strategy)
        {
            var listbox = ListMenu.getListBox();
            listbox.visible = false;

            if (ROOT.strategy != nil)
                ROOT.strategy.finalize();

            ROOT.strategy = new_strategy;

            ListMenu::ListWindow::ListOption::Replay::FilterCourse::OptionMenu.refresh(context);
            ListMenu::ListWindow::ListOption::Replay::FilterGameMode::OptionMenu.refresh(context);
            ROOT.strategy.updateList(context);
            listbox.visible = true;
        }

        module Library
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
                if (res)
                {
                    updateReplayList(context, ReplayLibraryStrategy());
                }
            }

            method onActivate(context)
            {
                sound.play("ok");
                self.onFocus_CB(context);
                return EVENTRESULT_FILTER;
            }
        }

        module Favorite
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
                if (res)
                {
                    updateReplayList(context, ReplayFavoriteStrategy());
                }
            }

            method onActivate(context)
            {
                sound.play("ok");
                self.onFocus_CB(context);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Photo::VBox
    {
        method updatePhotoList(context, new_strategy)
        {
            var listbox = ListMenu.getListBox();
            listbox.visible = false;

            if (ROOT.strategy != nil)
                ROOT.strategy.finalize();

            ROOT.strategy = new_strategy;

            ListMenu::ListWindow::ListOption::Photo::FilterLocation::OptionMenu.refresh(context);
            ListMenu::ListWindow::ListOption::Photo::FilterFormat::OptionMenu.refresh(context);

            ROOT.strategy.updateList(context);

            listbox.visible = true;
        }

        module Library
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
                if (res)
                {
                    updatePhotoList(context, PhotoLibraryStrategy());
                }
            }

            method onActivate(context)
            {
                sound.play("ok");
                self.onFocus_CB(context);
                return EVENTRESULT_FILTER;
            }
        }

        module Favorite
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
                if (res)
                {
                    updatePhotoList(context, PhotoFavoriteStrategy());
                }
            }

            method onActivate(context)
            {
                sound.play("ok");
                self.onFocus_CB(context);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Music::VBox
    {
        method updateMusicList(context, new_strategy)
        {
            var listbox = ListMenu.getListBox();
            listbox.visible = false;

            if (ROOT.strategy != nil)
                ROOT.strategy.finalize();

            ROOT.strategy = new_strategy;

            ListMenu::ListWindow::ListOption::Music::FilterArtist::OptionMenu.refresh(context);
            ListMenu::ListWindow::ListOption::Music::FilterGenre::OptionMenu.refresh(context);

            ROOT.strategy.updateList(context);

            listbox.visible = true;
        }

        module Library
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
                if (res)
                {
                    updateMusicList(context, MusicLibraryStrategy());
                }
            }

            method onActivate(context)
            {
                sound.play("ok");
                self.onFocus_CB(context);
                return EVENTRESULT_FILTER;
            }
        }

        module PlayList
        {
            method onFocus_CB(context)
            {
                ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
            }

            method onActivate(context)
            {
                sound.play("ok");
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);

                ListMenu::Menus.shiftSubMenu(context, "Sub_GroupByMusic");
                return EVENTRESULT_FILTER;
            }
        }
    }

    module ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Movie::VBox
    {
        module Library
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
                if (res)
                {
                    if (ROOT.strategy != nil)
                        ROOT.strategy.finalize();

                    ROOT.strategy = MovieLibraryStrategy();
                    ROOT.strategy.updateList(context);
                }
            }

            method onActivate(context)
            {
                sound.play("ok");
                self.onFocus_CB(context);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module ListMenu::Menus::Sub_GroupByMusic
    {
        import ImportMenuCommons::*;

        attribute default_focus_ = ListMenu::Menus::Sub_GroupByMusic::ScrolledWindow::clip::space::Race;

        method onFinalize(context)
        {
            self.setActiveMenu(false);
        }

        method onActivate(context)
        {
            sound.play("ok");

            var w = ROOT.getFocusWidget();
            if (w.defined("onFocus_CB"))
                w.onFocus_CB(context);

            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            sound.play("cancel");
            ListMenu::Menus.shiftMainMenu(context, 'Main_TopMenu', false);
            return EVENTRESULT_FILTER;
        }

        method init_CB(context)
        {
            self.active_ = nil;
            ListMenu::Menus::Sub_GroupByMusic::ScrolledWindow::clip::space::Race.active = false;
            ListMenu::Menus::Sub_GroupByMusic::ScrolledWindow::clip::space::Menu.active = false;
            ListMenu::Menus::Sub_GroupByMusic::ScrolledWindow::clip::space::Slideshow.active = false;
        }
    }

    module ListMenu::Menus::Sub_GroupByMusic::ScrolledWindow::clip::space
    {
        method updateMusicList(context, new_strategy)
        {
            var listbox = ListMenu.getListBox();
            listbox.visible = false;

            if (ROOT.strategy != nil)
                ROOT.strategy.finalize();

            ROOT.strategy = new_strategy;

            ListMenu::ListWindow::ListOption::Music::FilterArtist::OptionMenu.refresh(context);
            ListMenu::ListWindow::ListOption::Music::FilterGenre::OptionMenu.refresh(context);

            ROOT.strategy.updateList(context);

            listbox.visible = true;
        }

        module Race
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Sub_GroupByMusic.setActiveMenu(true, self);
                if (res)
                {
                    updateMusicList(context, MusicRaceBGMStrategy());
                }
            }
        }

        module Menu
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Sub_GroupByMusic.setActiveMenu(true, self);
                if (res)
                    updateMusicList(context, MusicMenuBGMStrategy());
            }
        }

        module Slideshow
        {
            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Sub_GroupByMusic.setActiveMenu(true, self);
                if (res)
                    updateMusicList(context, MusicSlideShowBGMStrategy());
            }
        }
    }

    module ListMenu::Menus::Main_TopMenu::ScrolledWindow::clip::space::Course::VBox
    {
        module Library
        {
            method onFocus_CB(context)
            {
                if (!checkLogin(context))
                    return;

                
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
                if (res)
                {
                    if (ROOT.strategy != nil)
                    ROOT.strategy.finalize();

                    ROOT.strategy = CourseLibraryStrategy();
                    ROOT.strategy.updateList(context);
                } 
            }

            method onActivate(context)
            {
                sound.play("ok");
                self.onFocus_CB(context);
                return EVENTRESULT_FILTER;
            }
        }

        module Sample
        {
            method onInitialize(context)
            {
                self.visible = ROOT.mode == MODE::ALL;
            }

            method onFocus_CB(context)
            {
                var res = ListMenu::Menus::Main_TopMenu.setActiveMenu(true, self);
                if (res)
                {
                    if (ROOT.strategy != nil)
                    ROOT.strategy.finalize();

                    ROOT.strategy = CourseSampleStrategy();
                    ROOT.strategy.updateList(context);
                } 
            }

            method onActivate(context)
            {
                sound.play("ok");
                self.onFocus_CB(context);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module hidden::ReplayItem
    {
        method on_activate(context)
        {
            main::sound.play("ok");
            var replay = self.value;

            var removed = false;
            var on_favorite_list = ROOT.strategy.isInstanceOf(ROOT::ReplayFavoriteStrategy);

            var res = ReplayDetailRoot.open(context, replay, &removed, on_favorite_list);
            if (res)
            {
                if (removed)
                {
                    var index = ListMenu.getListBox().focus_index;
                    ListMenu::ListWindow.item_state_list_[index] = ListMenu::ListWindow::ITEM_STATE::Blank;
                }
            }

            ListMenu::ListWindow.updateVisibleListItems(context);

            var play_replay = ReplayDetailRoot.play_replay;
            if (play_replay != nil && play_replay)
            {
                var gp = GameParameterUtil::createReplayWithPath(replay.filename);
                if (gp != nil)
                {
                    GameParameterUtil::execute(context, gp);
                    ROOT.close(context);
                }
                else
                {
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, manager.translate("SaveData", "LOADED_REPLAY_WAS_WRONG"));
                }
            }

            return EVENTRESULT_FILTER;
        }
    }

    module hidden::MovieItem
    {
        method on_activate(context)
        {
            main::sound.play("ok");
            
            var movie = self.value;
            if (movie != nil)
            {
                SequenceUtil::startProject(context, "play_movie", movie.Name);
                ROOT.close(context);
            }

            return EVENTRESULT_FILTER;
        }
    }

    module hidden::PhotoItem
    {
        method on_activate(context)
        {
            main::sound.play("ok");
            
            var mode = ROOT.mode;

            if (mode == MODE::ALL)
            {
                var photo_list = ListMenu::ListWindow.data_list_;
                var photo = self.value;
                var removed = false;
                var on_favorite_list = ROOT.strategy.isInstanceOf(ROOT::PhotoFavoriteStrategy);

                var res = PhotoViewerRoot.open(context, photo_list, photo, &removed, on_favorite_list);
                if (res)
                {
                    if (removed)
                    {
                        var index = ListMenu.getListBox().focus_index;
                        ListMenu::ListWindow.item_state_list_[index] = ListMenu::ListWindow::ITEM_STATE::Blank;    
                    }
                }

                ListMenu::ListWindow.updateVisibleListItems(context);
            }
            else
            {
                var photo = self.value;
                ROOT.result = photo;
                ROOT.close(context);
            }

            return EVENTRESULT_FILTER;
        }
    }

    module hidden::MusicItem
    {
        method on_activate(context)
        {
            var music = self.value;


            if (SoundUtil::BGMIsPlaying(music.code))
            {
                MusicFunction::stop(context);
                SoundUtil::ResumeMenuSEVolume();
                main::sound.play("ok");
            }
            else
            {
                MusicFunction::play(context, music);
                SoundUtil::SuspendMenuSEVolume();
                ROOT.in_music_preview = true;
            }

            return EVENTRESULT_FILTER;
        }
    }

    module hidden::CourseItem
    {
        method on_activate(context)
        {
            main::sound.play("ok");

            var course = self.value;
            var show_detail = ROOT.mode == MODE::ALL;

            if (ROOT.mode == MODE::COURSE)
            {
                if (ROOT.args.size > 1)
                    show_detail = true;
            }

            if (show_detail)
            {
                if (!CourseMakerUtil::isSampleCourse(course["course_id"]))
                {
                    if (!checkLogin(context))
                        return EVENTRESULT_FILTER;
                }

                var removed = false;
                var res = CourseDetailRoot.open(context, course, &removed);

                if (res)
                {
                    if (removed)
                    {
                        var index = ListMenu.getListBox().focus_index;
                        ListMenu::ListWindow.item_state_list_[index] = ListMenu::ListWindow::ITEM_STATE::Blank;    
                    }
                }

                ListMenu::ListWindow.updateVisibleListItems(context);

                var play_course = CourseDetailRoot.play_course;
                if (play_course == nil || !play_course)
                    return EVENTRESULT_FILTER;

                var ted_path = CourseMakerUtil::getTedPath(context, course);
                if (!pdistd::Exist(ted_path))
                    return EVENTRESULT_FILTER;

                var fst = pdistd::ReadFile(ted_path);
                var course_code = gtengine::MSpecDB::getCourseCode("coursemaker");
                var gp = GameParameterUtil::createFreeRun(course_code);
                var event = gp.events[0];
                var rp = event.race_parameter;
                rp.course_maker_source_type = gtengine::CourseMakerSourceType::TED;

                if (course["one_way"])
                {
                    rp.start_type = gtengine::StartType::GRID;
                    rp.complete_type = gtengine::CompleteType::BYLAPS;
                }
                else
                {
                    rp.start_type = gtengine::StartType::ATTACK;
                    rp.complete_type = gtengine::CompleteType::NONE;
                }

                event.race_parameter = rp;
                var track = event.track;
                track.course_code = course_code;

                var data = CourseMakerUtil::decrypt(fst["buffer"]);
                track.edit_data = data;
                track.generated_course_id = course["course_id"];
                GAME_STATUS.user_profile.context.coursemaker_course_id = course["course_id"];
                GAME_STATUS.user_profile.context.coursemaker_user_id = course["user_id"];

                var gd = ORG.setGenerateData(data);
                rp.course_code = gd;

                var lang = pdistd::Language[pdistd::MLocale::getLanguage()];
                event.information.title.setText(lang, course["title"]);

                LaunchRaceUtil::setupWeatherFix(rp);

                if (ROOT.in_music_preview)
                    MusicFunction::stop(context);

                GameParameterUtil::executeEvent(context, gp, GAME_STATUS);
                ROOT.close(context);
            }
            else
            {
                ROOT.result = course;
                ROOT.close(context);
            }

            return EVENTRESULT_FILTER;
        }
    }

    module ListMenu::ListWindow
    {
        module ITEM_STATE
        {
            static Blank = 1;
            static Selected = 2;
        }

        attribute data_list_;
        attribute item_state_list_;
        attribute prev_focus_w_;
        attribute prev_button_set_;
        attribute is_empty_;
        attribute in_view_;
        attribute in_edit_;

        method setHeadListCount(context)
        {
            if (self.in_edit_)
            {
                var select_count = 0;
                foreach (var state in self.item_state_list_)
                {
                    if (state == ITEM_STATE::Selected)
                        ++select_count;
                }

                Head::ListCount.setText(select_count, self.data_list_.size);
            }
            else
            {
                Head::ListCount.setText(self.data_list_.size);
            }
        }

        method setList(context, data_list, template_item, args)
        {
            self.data_list_ = data_list;
            setHeadListCount(context);
            
            self.item_state_list_ = Array(self.data_list_.size);
            var listbox = ListMenu.getListBox();
            listbox.setItemTemplate(context, template_item);
            listbox.setItemCount(0);
            listbox.postRedraw();

            yield;

            if (data_list.size > 0)
            {
                listbox.setItemCount(data_list.size);
                listbox.focus_index = 0;
                self.is_empty_ = false;
                ListMenu.setDisplayEmpty(self.is_empty_);
            }
            else
            {
                self.is_empty_ = true;

                var nothing = "";
                if (ROOT.strategy.current_mode == MODE::REPLAY)
                {
                    nothing = context.translate(ROOT, "Label_NoReplay");
                }
                else if (ROOT.strategy.current_mode == MODE::REPLAY)
                {
                    nothing = context.translate(ROOT, "Label_NoPhoto");
                }
                else if (ROOT.strategy.current_mode == MODE::COURSE)
                {
                    var key = args != nil ? "Label_%{args}" : "Label_NoCourse";
                    nothing = context.translate(ROOT, key);
                }

                ListMenu.setDisplayEmpty(self.is_empty_, nothing);
            }

            for (var w = ColumnList.first_window; w != nil; w = w.next_window)
                w.visible = false;

            for (var w = ListOption.first_window; w != nil; w = w.next_window)
                w.visible = false;

            ROOT.strategy.column_widget.visible = true;
            ROOT.strategy.option_widget.visible = true;
        }

        method inViewMode(context, warp, no_move)
        {
            if (self.is_empty_ || self.in_view_ || self.in_edit_)
                return false;

            var focus_w = ROOT.getFocusWidget();
            if (focus_w == nil)
                return false;

            self.prev_focus_w_ = focus_w;
            self.prev_button_set_ = ButtonHelpGT6.getCurrentButtonSetName();

            if (no_move == nil || !no_move)
            {
                ListMenu.MoveActor.reverse = false;
                ListMenu.MoveActor.start();

                if (warp == true)
                    ListMenu.MoveActor.warp();
            }

            ListMenu::Menus.insensitive = true;
            self.insensitive = false;
            clip::VScrollbar.display_policy = "automatic";
            ROOT.strategy.setButtonHelpOnList(context);
            ROOT.setFocus(ListMenu.getListBox());
            
            self.in_view_ = true;
            return true;
        }

        method outViewMode(context, warp)
        {
            if (!self.in_view_ || self.in_edit_)
                return false;

            ListMenu.MoveActor.reverse = true;
            ListMenu.MoveActor.start();

            if (warp == true)
                ListMenu.MoveActor.warp();

            self.insensitive = true;
            ListMenu::Menus.insensitive = false;
            clip::VScrollbar.display_policy = "never";

            ROOT.setFocus(self.prev_focus_w_);
            self.prev_focus_w_ = nil;

            ButtonHelpGT6.setButtonSet(context, self.prev_button_set_);
            self.prev_button_set_ = nil;

            ROOT.strategy.onOutViewMode(context);

            self.in_view_ = false;
            return true;
        }

        method inEditMode(context, warp)
        {
            if (!self.in_view_ || self.in_edit_)
                return false;

            if (ROOT.strategy.editmenu_data == nil)
                return false;

            ListMenu::EditMenu.initialize(context, ROOT.strategy.editmenu_data);
            ListMenu::EditMenu.appear(warp);
            ListOption.insensitive = true;
            ButtonHelpGT6.setButtonSet(context, "EditMode");

            self.in_edit_ = true;

            self.updateVisibleListItems(context);
            return true;
        }

        method outEditMode(context, warp)
        {
            if (!self.in_view_ || !self.in_edit_)
                return false;

            ListMenu::EditMenu.hide(warp);
            ListOption.insensitive = false;

            var listbox = ListMenu.getListBox();
            for (var i = 0; i < listbox.getItemCount(); i++)
            {
                var w = listbox.getItemWidget(i);
                if (w != nil)
                    w.visibleCheckbox(false);
            }

            ROOT.strategy.setButtonHelpOnList(context);

            self.in_edit_ = false;

            self.updateVisibleListItems(context);
            return true;
        }

        method setEditModeItems_AllSelect_or_AllCancel()
        {
            if (!self.in_view_ || !self.in_edit_)
                return false;

            var is_all_selected = true;
            foreach (var state in item_state_list_)
            {
                if (state == ITEM_STATE::Blank)
                    continue;

                if (state != ITEM_STATE::Selected)
                {
                    is_all_selected = false;
                    break;
                }
            }

            var listbox = ListMenu.getListBox();
            for (var i = 0; i < listbox.getItemCount(); i++)
            {
                var state_ref = &self.item_state_list_[i];
                if (*state_ref == ITEM_STATE::Blank)
                    continue;

                var w = listbox.getItemWidget(i);
                if (is_all_selected)
                {
                    if (*state_ref == ITEM_STATE::Selected)
                    {
                        *state_ref = nil;
                        if (w != nil)
                            w.activeCheckbox(false);
                    }
                }
                else
                {
                    if (*state_ref != ITEM_STATE::Selected)
                    {
                        *state_ref = ITEM_STATE::Selected;
                        if (w != nil)
                            w.activeCheckbox(true);
                    }
                }
            }

            return true;
        }

        method onInitialize(context)
        {
            self.is_empty_ = false;
            self.in_view_ = false;
            self.in_edit_ = false;
            self.insensitive = true;
            ListMenu.MoveActor.forward();
            ListMenu.MoveActor.reset();
            clip::VScrollbar.display_policy = "never";
        }

        method onKeyPress(context, event)
        {
            if (event.keysym == CELL_PAD_CTRL_L3_LEFT)
            {
                if (self.outViewMode(context))
                {
                    sound.play("cursor");
                    return EVENTRESULT_FILTER;
                }
            }
            else if (event.keysym == CELL_PAD_CTRL_SQUARE)
            {
                if (!self.in_edit_)
                    ;
            }
            else if (event.keysym == CELL_PAD_CTRL_TRIANGLE)
            {
                if (self.setEditModeItems_AllSelect_or_AllCancel())
                {
                    sound.play("checkbox");
                    setHeadListCount(context);
                    return EVENTRESULT_FILTER;
                }
            }
            else if (event.keysym == CELL_PAD_CTRL_SELECT)
            {
                if (self.inEditMode(context))
                {
                    sound.play("ok");
                    setHeadListCount(context);
                    return EVENTRESULT_FILTER;
                }
            }

            return EVENTRESULT_CONTINUE;
        }

        method onActivate(context, event)
        {
            var listbox = ListMenu.getListBox();
            var item_index = listbox.focus_index;
            var item = listbox.getItemWidget(listbox.focus_index);
            var state = self.item_state_list_[item_index];

            if (state == ITEM_STATE::Blank)
            {
                sound.play("disable");
                return;
            }

            if (self.in_edit_)
            {
                var is_selected = state == ITEM_STATE::Selected;
                is_selected = !is_selected;

                if (item.activeCheckbox(is_selected))
                {
                    sound.play("checkbox");
                    self.item_state_list_[item_index] = is_selected ? ITEM_STATE::Selected : nil;
                }
                else
                {
                    sound.play("disable");
                }

                setHeadListCount(context);
            }
            else
            {
                ROOT.setFocus(item);
                item.on_activate(context);
            }

            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            if (self.in_edit_)
            {
                if (self.outEditMode(context))
                {
                    sound.play("cancel");
                    setHeadListCount(context);
                }
            }
            else
            {
                if (self.outViewMode(context))
                    sound.play("cancel");
            }

            return EVENTRESULT_FILTER;
        }

        method getFocusedItem()
        {
            var listbox = ListMenu.getListBox();
            return listbox.getItemWidget(listbox.focus_index);
        }

        method updateVisibleListItems(context)
        {
            var listbox = ListMenu.getListBox();
            for (var i = 0; i < listbox.getItemCount(); i++)
            {
                var item = listbox.getItemWidget(i);
                if (item != nil)
                {
                    updateListItem(context, item, i);
                }
            }
        }

        method updateListItem(context, item, item_index)
        {
            if (item_index < self.item_state_list_.size)
            {
                var state = self.item_state_list_[item_index];
                if (state == ITEM_STATE::Blank)
                {
                    item.isBlank(true);
                    if (self.in_edit_)
                    {
                        item.visibleCheckbox(true);
                        item.insensitiveCheckbox(true);
                        item.activeCheckbox(false);
                    }
                }
                else
                {
                    item.setInfo(context, self.data_list_[item_index]);
                    if (self.in_edit_)
                    {
                        item.visibleCheckbox(true);
                        item.insensitiveCheckbox(false);
                        item.activeCheckbox(state == ITEM_STATE::Selected);
                    }
                }
            }
        }

        method MultiSelectCallback(context, args)
        {
            for (var i = 0; i < self.item_state_list_.size; i++)
            {
                var state = self.item_state_list_[i];
                if (state == ITEM_STATE::Selected)
                {
                    var edit_func = args[0];
                    var args2 = args.size > 1 ? args[1] : nil;
                    var state_ref = &self.item_state_list_[i];
                    edit_func(context, self.data_list_[i], args2, state_ref);
                }
            }

            self.updateVisibleListItems(context);
        }

        method MultiSelectCallbackOnce(context, args)
        {
            var select_data_list = [];
            var state_ref_list = [];

            for (var i = 0; i < self.item_state_list_.size; i++)
            {
                var state = self.item_state_list_[i];
                if (state == ITEM_STATE::Selected)
                {
                    select_data_list.push(self.data_list_[i]);
                    var state_ref = &self.item_state_list_[i];
                    state_ref_list.push(state_ref);
                }
            }

            var edit_func = args[0];
            var args2 = args.size > 1 ? args[1] : nil;
            edit_func(context, select_data_list, args2, state_ref_list);
            self.updateVisibleListItems(context);
        }

        module clip::ListBox
        {
            method onVisibleNotify(context, indexes)
            {
                foreach (var i in indexes)
                {
                    if (self.getItemVisible(i))
                    {
                        var w = self.getItemWidget(i);
                        if (w == nil)
                        {
                            var item = self.getItemWidget(i, context);
                            ListMenu::ListWindow.updateListItem(context, item, i);
                        }
                        else if (w.value == nil)
                        {
                            ListMenu::ListWindow.updateListItem(context, w, i);
                        }
                    }
                    else
                    {
                        self.setItemWidget(i, context, nil);
                    }
                }
            }
        }

        module Head::ListCount
        {
            method setText(a, b)
            {
                if (b == nil)
                {
                    ListCount::label_L.text = "";
                    ListCount::label_S.text = a;
                }
                else
                {
                    ListCount::label_L.text = a + "/";
                    ListCount::label_S.text = b;
                }
            }
        }

        module ListOption
        {
            method onKeyPress(context, event)
            {
                if (event.keysym == CELL_PAD_CTRL_L3_LEFT)
                {
                    sound.play("cursor");
                    var listbox = ListMenu.getListBox();
                    ROOT.setFocus(listbox);

                    return EVENTRESULT_FILTER;
                }
                else if (event.keysym == CELL_PAD_CTRL_SELECT)
                {
                    if (ListMenu::ListWindow.inEditMode(context))
                    {
                        sound.play("ok");
                        var listbox = ListMenu.getListBox();
                        ROOT.setFocus(listbox);
    
                        return EVENTRESULT_FILTER;
                    }
                }

                return EVENTRESULT_CONTINUE;
            }

            module Replay::FilterCourse::OptionMenu
            {
                attribute created_items = false;
                attribute previous_index = 0;
                attribute course_code_list;

                method getSelectedCourse()
                {
                    if (self.course_code_list == nil)
                        return nil;

                    return self.course_code_list[self.index];
                }

                method onInitialize(context)
                {
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, [manager.translate("Component", "Label_All")]);
                    self.setIndex(context, 0);
                }

                method onFinalize(context)
                {
                    OptionMenuUtil::finalize(context, self);
                }

                method refresh(context)
                {
                    OptionMenuUtil::finalize(context, self);
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, [manager.translate("Component", "Label_All")]);
                    self.setIndex(context, 0);
                    self.created_items = false;
                }

                method createPopupItems(context)
                {
                    var course_code_list = ROOT.strategy.getCourseCodeList();
                    var where_clause = "";
                    var where_conditions = [];
                    var params = [];

                    foreach (var course_code in course_code_list)
                    {
                        where_conditions.push("ID = ?");
                        params.push(course_code);
                    } 

                    where_clause = "WHERE " + where_conditions.join(" OR ");
                    var course_info_list = SPECDB.queryList("SELECT ID, Name, Reverse FROM COURSE %{where_clause}", params);

                    var pair_list = Array(course_info_list);
                    for (var i = 0; i < course_info_list.size; i++)
                    {
                        var course_info = course_info_list[i];
                        var course_name = manager.translate("CourseName", course_info.Name);
                        if (course_info.Reverse)
                            course_name += " / " + manager.translate("CourseData", "direction_reverse");

                        pair_list[i] = [course_name, course_info.ID];
                    }

                    pair_list.sort(function(a, b) { return a[0] < b[0]; });

                    var course_name_list = [manager.translate("Component", "Label_All")];
                    self.course_code_list = [nil];

                    foreach (|var course_name, var course_code| in pair_list)
                    {
                        course_name_list.push(course_name);
                        self.course_code_list.push(course_code);
                    }

                    OptionMenuUtil::finalize(context, self);
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, course_name_list);
                    self.setIndex(context, 0);
                    self.created_items = true;
                }

                method onPopupOpen(context)
                {
                    if (!self.created_items)
                        self.createPopupItems(context);

                    self.previous_index = self.index;
                }

                method onValueChanged(context, index)
                {
                    __prototype__::onValueChanged(context);
                    if (self.previous_index != index)
                    {
                        Replay::FilterGameMode::OptionMenu.createPopupItems(context);
                        ROOT.strategy.updateList(context);
                    }

                    return EVENTRESULT_CONTINUE;
                }
            }

            module Replay::FilterGameMode::OptionMenu
            {
                attribute created_items = false;
                attribute previous_index = 0;
                attribute game_mode_list;

                method getSelectedGameMode()
                {
                    if (self.game_mode_list == nil)
                        return nil;

                    if (self.index == 0)
                        return nil;

                    return self.game_mode_list[self.index];
                }

                method onInitialize(context)
                {
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, [manager.translate("Component", "Label_All")]);
                    self.setIndex(context, 0);
                }

                method onFinalize(context)
                {
                    OptionMenuUtil::finalize(context, self);
                }

                method refresh(context)
                {
                    OptionMenuUtil::finalize(context, self);
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, [manager.translate("Component", "Label_All")]);
                    self.setIndex(context, 0);
                    self.created_items = false;
                }

                method createPopupItems(context)
                {
                    self.game_mode_list = [manager.translate("Component", "Label_All")];

                    var selected_course_code = Replay::FilterCourse::OptionMenu.getSelectedCourse();
                    self.game_mode_list += ROOT.strategy.getTitleList(selected_course_code);

                    OptionMenuUtil::finalize(context, self);
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, game_mode_list, "GameModeName");
                    self.setIndex(context, 0);
                    self.created_items = true;
                }

                method onPopupOpen(context)
                {
                    if (!self.created_items)
                        self.createPopupItems(context);

                    self.previous_index = self.index;
                }

                method onValueChanged(context, index)
                {
                    __prototype__::onValueChanged(context);
                    if (self.previous_index != index)
                    {
                        ROOT.strategy.updateList(context);
                    }

                    return EVENTRESULT_CONTINUE;
                }
            }

            module Replay::ImportFile
            {
                method onActivate(context)
                {
                    if (SaveDataUtil::isBackgroundSaveRunning())
                    {
                        sound.play("disable");
                        return EVENTRESULT_FILTER;
                    }

                    sound.play("ok");
                    ReplayFunction::importFrom(context);

                    return EVENTRESULT_FILTER;
                }
            }

            module Photo::FilterLocation::OptionMenu
            {
                attribute created_items = false;
                attribute previous_index = 0;
                attribute title_list;

                method getSelectedLocation()
                {
                    if (self.title_list == nil)
                        return nil;

                    return self.title_list[self.index];
                }

                method onInitialize(context)
                {
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, [manager.translate("Component", "Label_All")]);
                    self.setIndex(context, 0);
                }

                method onFinalize(context)
                {
                    OptionMenuUtil::finalize(context, self);
                }

                method refresh(context)
                {
                    OptionMenuUtil::finalize(context, self);
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, [manager.translate("Component", "Label_All")]);
                    self.setIndex(context, 0);
                    self.created_items = false;
                }

                method createPopupItems(context)
                {
                    var location_list = [manager.translate("Component", "Label_All")];
                    self.title_list = [nil];

                    var list = ROOT.strategy.getTitleList();
                    foreach (|var genre, var title| in list)
                    {
                        location_list.push(PhotoFileUtil::getTitleText(context, genre, title));
                        self.title_list.push(title);
                    }

                    OptionMenuUtil::finalize(context, self);
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, location_list);
                    self.setIndex(context, 0);
                    self.created_items = true;
                }

                method onPopupOpen(context)
                {
                    if (!self.created_items)
                        self.createPopupItems(context);

                    self.previous_index = self.index;
                }

                method onValueChanged(context, index)
                {
                    __prototype__::onValueChanged(context);
                    if (self.previous_index != index)
                    {
                        Photo::FilterFormat::OptionMenu.createPopupItems(context);
                        ROOT.strategy.updateList(context);
                    }

                    return EVENTRESULT_CONTINUE;
                }
            }

            module Photo::FilterFormat::OptionMenu
            {
                attribute created_items = false;
                attribute previous_index = 0;
                attribute is_3d_list;

                method getSelectedFormat()
                {
                    if (self.is_3d_list == nil)
                        return nil;

                    return self.is_3d_list[self.index];
                }

                method onInitialize(context)
                {
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, [manager.translate("Component", "Label_All")]);
                    self.setIndex(context, 0);
                }

                method onFinalize(context)
                {
                    OptionMenuUtil::finalize(context, self);
                }

                method refresh(context)
                {
                    OptionMenuUtil::finalize(context, self);
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, [manager.translate("Component", "Label_All")]);
                    self.setIndex(context, 0);
                    self.created_items = false;
                }

                method createPopupItems(context)
                {
                    var format_list = [manager.translate("Component", "Label_All")];
                    self.is_3d_list = [nil];

                    var selected_location = Photo::FilterLocation::OptionMenu.getSelectedLocation();

                    var list = ROOT.strategy.getIs3DList(selected_location);
                    foreach (var is_3d in list)
                    {
                        self.is_3d_list.push(is_3d);
                        if (is_3d == 0)
                            format_list.push("JPEG");
                        else if (is_3d == 1)
                            format_list.push("MPO");
                    }

                    OptionMenuUtil::finalize(context, self);
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, format_list);
                    self.setIndex(context, 0);
                    self.created_items = true;
                }

                method onPopupOpen(context)
                {
                    if (!self.created_items)
                        self.createPopupItems(context);

                    self.previous_index = self.index;
                }

                method onValueChanged(context, index)
                {
                    __prototype__::onValueChanged(context);
                    if (self.previous_index != index)
                    {
                        ROOT.strategy.updateList(context);
                    }

                    return EVENTRESULT_CONTINUE;
                }
            }

            module Photo::SlideShow
            {
                method onActivate(context)
                {
                    sound.play("ok");
                    var params = [
                        "style" : 2,
                        "interval" : 5,
                        "transition" : 5,
                        "imagetype" : 0,
                        "bgm" : 1,
                        "repeat" : 1,
                        "shuffle" : 1
                    ];

                    var photo_list = ListMenu::ListWindow.data_list_;
                    SoundUtil::ResumeMenuSEVolume();
                    SlideShowRoot.open(context, photo_list, params);

                    return EVENTRESULT_FILTER;
                }
            }

            module Music::FilterArtist::OptionMenu
            {
                attribute created_items = false;
                attribute previous_index = 0;
                attribute artist_list;

                method getSelectedArtist()
                {
                    if (self.artist_list == nil)
                        return nil;

                    if (self.index == 0)
                        return nil;

                    return self.artist_list[self.index];
                }

                method onInitialize(context)
                {
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, [manager.translate("Component", "Label_All")]);
                    self.setIndex(context, 0);
                }

                method onFinalize(context)
                {
                    OptionMenuUtil::finalize(context, self);
                }

                method refresh(context)
                {
                    OptionMenuUtil::finalize(context, self);
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, [manager.translate("Component", "Label_All")]);
                    self.setIndex(context, 0);
                    self.created_items = false;
                }

                method createPopupItems(context)
                {
                    self.artist_list = [manager.translate("Component", "Label_All")];
                    self.artist_list += ROOT.strategy.getArtistList();

                    OptionMenuUtil::finalize(context, self);
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, self.artist_list);
                    self.setIndex(context, 0);
                    self.created_items = true;
                }

                method onPopupOpen(context)
                {
                    if (!self.created_items)
                        self.createPopupItems(context);

                    self.previous_index = self.index;
                }

                method onValueChanged(context, index)
                {
                    __prototype__::onValueChanged(context);
                    if (self.previous_index != index)
                    {
                        Music::FilterGenre::OptionMenu.createPopupItems(context);
                        ROOT.strategy.updateList(context);
                    }

                    return EVENTRESULT_CONTINUE;
                }
            }

            module Music::FilterGenre::OptionMenu
            {
                attribute created_items = false;
                attribute previous_index = 0;
                attribute genre_list;

                method getSelectedGenre()
                {
                    if (self.genre_list == nil)
                        return nil;

                    if (self.index == 0)
                        return nil;

                    return self.genre_list[self.index];
                }

                method onInitialize(context)
                {
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, [manager.translate("Component", "Label_All")]);
                    self.setIndex(context, 0);
                }

                method onFinalize(context)
                {
                    OptionMenuUtil::finalize(context, self);
                }

                method refresh(context)
                {
                    OptionMenuUtil::finalize(context, self);
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, [manager.translate("Component", "Label_All")]);
                    self.setIndex(context, 0);
                    self.created_items = false;
                }

                method createPopupItems(context)
                {
                    self.genre_list = [manager.translate("Component", "Label_All")];

                    var selected_artist = Music::FilterArtist::OptionMenu.getSelectedArtist();
                    self.genre_list += ROOT.strategy.getGenreList(selected_artist);

                    OptionMenuUtil::finalize(context, self);
                    OptionMenuUtil::initialize(context, ROOT, self, hidden::PulldownItem, self.genre_list);
                    self.setIndex(context, 0);
                    self.created_items = true;
                }

                method onPopupOpen(context)
                {
                    if (!self.created_items)
                        self.createPopupItems(context);

                    self.previous_index = self.index;
                }

                method onValueChanged(context, index)
                {
                    __prototype__::onValueChanged(context);
                    if (self.previous_index != index)
                    {
                        ROOT.strategy.updateList(context);
                    }

                    return EVENTRESULT_CONTINUE;
                }
            }

            module Music::SetDefault
            {
                method onActivate(context)
                {
                    sound.play("ok");
                    MusicFunction::setDefault(context);
                    return EVENTRESULT_FILTER;
                }
            }
        }
    }

    module ListMenu::EditMenu
    {
        class Group
        {
            method __init__(label, contents)
            {
                self.label = label;
                self.contents = contents;
            }

            attribute label;
            attribute contents;
        }

        class Content
        {
            method __init__(templete_item, label, enable, callback, args)
            {
                self.templete_item = templete_item;
                self.label = label;
                self.enable = enable != false;
                self.callback = callback;
                self.args = args;
            }

            attribute templete_item;
            attribute label;
            attribute enable;
            attribute callback;
            attribute args;
        }

        class Button : Content
        {
            method __init__(label, enable, callback, args)
            {
                __super__::__init__(hidden::EditButtonItem, label, enable, callback, args);
            }
        }

        method appear(warp)
        {
            self.insensitive = false;
            self.MoveActor.forward();
            self.MoveActor.start();

            if (warp == true)
                self.MoveActor.warp();
        }

        method hide(warp)
        {
            self.insensitive = true;
            self.MoveActor.backward();
            self.MoveActor.start();

            if (warp == true)
                self.MoveActor.warp();
        }

        method createContents(context, append_parent, contents)
        {
            foreach (var content in contents)
            {
                var w = content.templete_item.doCopy();
                w.label.text = content.label;
                w.label_i.text = content.label;
                w.insensitive = !content.enable;
                w.defineAttribute("data", content);
                append_parent.appendChild(context, w);
            }
        }

        method deleteContents(context)
        {
            ListMenu::EditMenu::ScrolledWindow::clip::space.clearChildren(context);
        }

        method initialize(context, data_list)
        {
            self.deleteContents(context);

            foreach (var data in data_list)
            {
                if (data.isInstanceOf(Group))
                {
                    var group = data;
                    var g = hidden::EditGroupItem.doCopy();
                    g.GroupHeader::label.text = group.label;
                    g.defineAttribute("data", group);
 
                    self.createContents(context, g.VBox, group.contents);
                    ListMenu::EditMenu::ScrolledWindow::clip::space.appendChild(context, g);
                }
                else if (data.isInstanceOf(Content))
                {
                    self.createContents(context, ListMenu::EditMenu::ScrolledWindow::clip::space, data);

                }
            }
        }

        method onInitialize(context)
        {
            self.hide(true);
        }

        method onFinalize(context)
        {
            self.deleteContents(context);
        }

        method onActivate(context, event)
        {
            if (SaveDataUtil::isBackgroundSaveRunning())
            {
                sound.play("disable");
                return EVENTRESULT_FILTER;
            }

            var w = event.widget;
            if (w.data.callback != nil)
            {
                sound.play("ok");
                w.data.callback(context, w.data.args);
            }

            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            if (ListMenu::ListWindow.outEditMode(context))
            {
                var listbox = ListMenu.getListBox();
                ROOT.setFocus(listbox);
                ListMenu::ListWindow.setHeadListCount(context);
                sound.play("cancel");
            }

            return EVENTRESULT_FILTER;
        }
    }
}