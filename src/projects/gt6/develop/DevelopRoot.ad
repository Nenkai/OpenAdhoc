









static saved_menu_se_volume = 0f;

module ROOT
{
    method open(context)
    {
        SettingFrame.appear();
        SequenceUtil::pushPage(context, self);
    }

    method close(context)
    {
        var delay_time = SettingFrame.hide();
        SequenceUtil::popPage(context, self, delay_time);
        main::sound.menu_se_volume = saved_menu_se_volume;
    }

    method reflect(context)
    {
        var option = main::GAME_STATUS.user_profile.option;
        var availables = [
            "JP", "US", "GB", "FR", "DE", "IT", "ES", "NL", "PT", "PL", "RU", "TR", "EL", "CZ", "HU", "BP", "MS", "TW", "KR"
        ];

        var use_lang = main::pdistd::MLocale::getLanguage();
        var focus_index = 0;

        for (var i = 0; i < availables.size; i++)
        {
            var item = hidden::PulldownItem.doCopy();
            item.label.text = availables[i];

            SettingFrame::Pane::ScrolledBody::clip::space::Text::PackingSpace::vbox::Language::OptionMenu::popup::vbox.appendChild(context, item);
            if (use_lang == availables[i])
                focus_index = i;
        }

        SettingFrame::Pane::ScrolledBody::clip::space::Text::PackingSpace::vbox::Language::OptionMenu.applyAppend(context);
        SettingFrame::Pane::ScrolledBody::clip::space::Text::PackingSpace::vbox::Language::OptionMenu.setIndex(context, focus_index);
        SettingFrame::Pane::ScrolledBody::clip::space::Text::PackingSpace::vbox::RTextDebug::vbox::CheckButton.active = option.rtext_debug;
        SettingFrame::Pane::ScrolledBody::clip::space::Network::PackingSpace::vbox::ServerSpecialValue::Text::input.value = option.server_special_value;
        SettingFrame::Pane::ScrolledBody::clip::space::NissanVersion::vbox::Enable.active = option.isLimitedTuner("nissan");
        SettingFrame::Pane::ScrolledBody::clip::space::ToggleDisplay::vbox::SingleRace.active = option.visible_icon_singlerace;
    
        var reflect_sound_pulldown = function (context, optionmenu, code)
        {
            if (main::sound.code_map == nil)
                main::sound.code_map = Map();

            var codes = main::sound.getEffectCodeList();
            var current = main::sound.code_map[code];
            if (current == nil)
                current = code;

            var focus_index = 0;
            for (var i = 0; i < codes.size; i++)
            {
                var item = hidden::PulldownItem.doCopy();
                item.label.text = codes[i];
                optionmenu.popup.vbox.appendChild(context, item);
                if (current == codes[i])
                    focus_index = i;
            }

            optionmenu.applyAppend(context);
            optionmenu.setIndex(context, focus_index);
        };

        foreach (var c in SettingFrame::Pane::ScrolledBody::clip::space::Sound::PackingSpace::vbox.getChildList())
        {
            foreach (var w in c.getChildList())
            {
                if (w.name == "OptionMenu")
                    reflect_sound_pulldown(context, w, c.name);
            }
        }

        SettingFrame::Pane::ScrolledBody::clip::space::Preorder::PackingSpace::vbox::AlwaysEnable::vbox::CheckButton::Check.active = DLCUtil::isAvailableAnyTime();
        SettingFrame::Pane::ScrolledBody::clip::space::Unlock::PackingSpace::vbox::m3_gt2_11_color::vbox::CheckButton.active = KeyValueUtil::isCarUnlock("m3_gt2_11_color");
        SettingFrame::Pane::ScrolledBody::clip::space::Unlock::PackingSpace::vbox::goodwood_fos_2012::vbox::CheckButton.active = KeyValueUtil::isCourseUnlock("goodwood_fos");
        SettingFrame::Pane::ScrolledBody::clip::space::Unlock::PackingSpace::vbox::andalusia_01::vbox::CheckButton.active = KeyValueUtil::isCourseUnlock("andalusia_01");
        SettingFrame::Pane::ScrolledBody::clip::space::Misc::PackingSpace::vbox::AcademyMode::vbox::CheckButton.active = option.academy_mode;

        A_FixedBetterTime::reflect(context);
    }

    method apply(context)
    {
        var option = main::GAME_STATUS.user_profile.option;
        
        option.rtext_debug = SettingFrame::Pane::ScrolledBody::clip::space::Text::PackingSpace::vbox::RTextDebug::vbox::CheckButton.active;
        var ss_value = SettingFrame::Pane::ScrolledBody::clip::space::Network::PackingSpace::vbox::ServerSpecialValue::Text::input.value;
        option.server_special_value = ss_value;

        Grim2.setSpecialRequestHeader("X-gt-special", ss_value);
        option.apply();

        var focused_item = SettingFrame::Pane::ScrolledBody::clip::space::Text::PackingSpace::vbox::Language::OptionMenu.getItem();
        var next_lang = focused_item.label.text;
        main::pdistd::SetLanguage(main::pdistd::Language[next_lang]);

        if (GetVersionBranch() != "demo")
            Grim2.setLanguage(next_lang.downcase());

        LangUtil::apply(context);

        option.visible_icon_singlerace = SettingFrame::Pane::ScrolledBody::clip::space::ToggleDisplay::vbox::SingleRace.active;
        
        var apply_sound_pulldown = function(context, optionmenu, code)
        {
            var select = optionmenu.getItem(optionmenu.index).label.text;
            var current = main::sound.code_map[code];
            if (select != current)
                main::sound.code_map[code] = select;
        };

        foreach (var c in SettingFrame::Pane::ScrolledBody::clip::space::Sound::PackingSpace::vbox.getChildList())
        {
            foreach (var w in c.getChildList())
            {
                if (w.name == "OptionMenu")
                    apply_sound_pulldown(context, w, c.name);
            }
        }

        DLCUtil::setAvailableAnyTime(SettingFrame::Pane::ScrolledBody::clip::space::Preorder::PackingSpace::vbox::AlwaysEnable::vbox::CheckButton::Check.active);
        KeyValueUtil::setCarUnlock("m3_gt2_11_color", SettingFrame::Pane::ScrolledBody::clip::space::Unlock::PackingSpace::vbox::m3_gt2_11_color::vbox::CheckButton.active);
        KeyValueUtil::setCourseUnlock("goodwood_fos", SettingFrame::Pane::ScrolledBody::clip::space::Unlock::PackingSpace::vbox::goodwood_fos_2012::vbox::CheckButton.active);
        KeyValueUtil::setCourseUnlock("andalusia_01", SettingFrame::Pane::ScrolledBody::clip::space::Unlock::PackingSpace::vbox::andalusia_01::vbox::CheckButton.active);

        if (!KeyValueUtil::isCourseUnlock("andalusia_01"))
            KeyValueUtil::set("information", "andalusia_01", false);

        option.academy_mode = SettingFrame::Pane::ScrolledBody::clip::space::Misc::PackingSpace::vbox::AcademyMode::vbox::CheckButton.active;
        A_FixedBetterTime::apply(context);
    }

    method onInitialize(context)
    {
        var cashier_slider = SettingFrame::Pane::ScrolledBody::clip::space::Cashier::vbox::slider;
        cashier_slider.format_callback = (context, value) => 
        {
            var scale = 100000;
            return "Cr." + pdiext::MMisc::GetMoneyString(value * scale);
        };
        cashier_slider.setup(context);
        var garage_settings = SettingFrame::Pane::ScrolledBody::clip::space::Garage::PackingSpace::vbox;
        garage_settings.NumOfOwned.reflectCurrentStatus();
        
        var at_random_slider = garage_settings.AtRandom::vbox::slider;
        at_random_slider.format_callback = (context, value) => manager.translate("Unit", "CARS").build(value.toInt());
        at_random_slider.setup(context);

        self.reflect(context);

        ROOT.setFocus(SettingFrame::Pane::ScrolledBody::clip::space::Cashier::vbox::slider);

        var cb = function(context, index, optionmenu)
        {
            main::sound.menu_se_volume = 0f;
            main::sound.play(optionmenu.getItem(index).label.text, saved_menu_se_volume);
        };

        foreach (var c in SettingFrame::Pane::ScrolledBody::clip::space::Sound::PackingSpace::vbox.getChildList())
        {
            foreach (var w in c.getChildList())
            {
                if (w.name == "OptionMenu")
                    w.decide_callback = cb;

                if (w.name == "label")
                    w.text = "\"%{c.name}\" >>";
            }
        }

        saved_menu_se_volume = main::sound.menu_se_volume;
        ROOT.Unveil(context, true);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        self.apply();
        self.close(context);
        return EVENTRESULT_FILTER;
    }

    function Veil(context, warp)
    {
        veil::FadeActor.reverse = false;
        veil::FadeActor.start();

        if (warp == true)
            veil::FadeActor.warp();

        context.cursor_visible = false;
    }

    function Unveil(context, warp)
    {
        veil::FadeActor.reverse = true;
        veil::FadeActor.start();

        if (warp == true)
            veil::FadeActor.warp();

        context.cursor_visible = true;
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::RemoveSaveData::vbox::Exec
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.Veil(context);

            SaveDataUtil::listDelete(context);

            ROOT.Unveil(context);
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Text::PackingSpace::vbox::RTextReload::vbox::Exec
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            
            LangUtil::reload();
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE!");
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Tutorial
    {
        function getTutorialList()
        {
            var list = [];
            foreach (|var key, var value| in TutorialUtil::key_map)
            {
                list.push(key);
            }

            return list;
        }

        module PackingSpace::vbox::OpenAll
        {
            method onActivate(context)
            {
                sound.play("ok");

                var list = getTutorialList();
                foreach (var key in list)
                    GAME_STATUS.user_profile.tutorial.done("gttop", key);
                
                DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE!");
                return EVENTRESULT_FILTER;
            }
        }

        module PackingSpace::vbox::CloseAll
        {
            method onActivate(context)
            {
                sound.play("ok");

                var list = getTutorialList();
                foreach (var key in list)
                    TutorialUtil::clear("gttop", key);
                
                TutorialUtil::begin("gttop", "get_first_car");
                KeyValueUtil::set("career", "play_ending", 0);

                DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE!");
                return EVENTRESULT_FILTER;
            }
        }

        module PackingSpace::vbox::CloseOnlyX2014
        {
            method onActivate(context)
            {
                sound.play("ok");

                var list = ["goto_only_x", "x2014_welcome", "x2014_kart", "x2014_x_intro", "x2014_x3", "x2014_x2", "x2014_x1"];
                foreach (var key in list)
                    TutorialUtil::clear("gttop", key);
                
                var present_list = ["present_x2014_kart01", "present_x2014_x3", "present_x2014_x2", "present_x2014_vettel", "x2014_x1_monza",
                                    "x2014_x1_spa", "x2014_x1_suzuka", "x2014_end_message", "play_ending_x2014_x2", "play_ending_x2014_vettel"];
                                  
                foreach (var key in present_list)
                    KeyValueUtil::set("career", key, false);

                var folder_id_list = [132, 133, 134, 135, 136, 1000295];
                foreach (var folder in folder_id_list)
                    GAME_STATUS.user_profile.record.event_record.updateResultOnly(folder, -1);

                TutorialUtil::begin("gttop", "x2014_welcome");
                
                DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE!");
                return EVENTRESULT_FILTER;
            }
        }

        module PackingSpace::vbox::CloseOnlyAcademy2014Final
        {
            method onActivate(context)
            {
                sound.play("ok");

                KeyValueUtil::set("career", "academy_2014_menter", false);

                DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE!");
                return EVENTRESULT_FILTER;
            }
        }

        module PackingSpace::vbox::CloseOnlySenna
        {
            method onActivate(context)
            {
                var event_id_list = [1000473, 1000474, 1000475, 1000476];
                foreach (var event_id in event_id_list)
                    GAME_STATUS.user_profile.record.event_record.updateResultOnly(event_id, -1);

                TutorialUtil::clear("gttop", "senna_tribute");
                
                DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE!");
                return EVENTRESULT_FILTER;
            }
        }

        module PackingSpace::vbox::CloseOnlySierra
        {
            method onActivate(context)
            {
                var time_rally_events = [1000557, 1000558, 1000559, 1000698];
                foreach (var event_id in time_rally_events)
                {
                    GAME_STATUS.user_profile.record.event_record.updateResultOnly(event_id, -1);
                    GAME_STATUS.user_profile.record.event_record.updateResult(event_id, -1, gtengine::EvalType::DRIFT, -1, 0);
                    KeyValueUtil::set("sierra_timerally_present", event_id, false);
                }
                KeyValueUtil::set("sierra_new_flag", 1000698, true);

                var practice_events = [1000560, 1000561, 1000562, 1000563];
                foreach (var event_id in practice_events)
                    KeyValueUtil::set("sierra_new_flag", event_id, true);

                KeyValueUtil::set("sierra_timerally", "completed_ss", 0);
                KeyValueUtil::set("sierra_timerally", "completed_message", 0);
                KeyValueUtil::set("sierra_timerally", "showed_tutorial", false);
                KeyValueUtil::setCourseUnlock("andalusia_01", false);

                DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE!");
                return EVENTRESULT_FILTER;
            }
        }

        module PackingSpace::vbox::CloseOnlyCommunity
        {
            method onActivate(context)
            {
                foreach (var key in ["mypage", "timeline", "club", "friend", "photostream", "message", "news"])
                    TutorialUtil::clear("community", key)

                DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE!");
                return EVENTRESULT_FILTER;
            }
        }

        module PackingSpace::vbox::UnreadUpdateDetails
        {
            method onActivate(context)
            {
                sound.play("ok");

                KeyValueUtil::set("information", "update_details", 100);
                var vgt_list = [
                    "astonmartin_vision_gt_14",
                    "nissan_vision_gt_14",
                    "toyota_vision_gt_14",
                    "subaru_vision_gt_14",
                    "chaparral_vision_gt_14",
                    "infiniti_vision_gt_14",
                    "mazda_lm55_vision_gt_14",
                    "mini_vision_gt_14",
                    "lf_lc_gt_vision_gt_15",
                    "alpine_vision_gt_14",
                    "alpine_vision_gt_14_blue",
                    "vw1_vision_gt_15",
                    "peugeot_vision_gt_14",
                    "srt_st_vision_gt_35",
                    "srt_tr_vision_gt_35",
                    "srt_lr_vision_gt_35",
                ];

                foreach (var vgt in vgt_list)
                    KeyValueUtil::set("information", vgt, false);

                KeyValueUtil::set("information", "present_srt_suit", false);
                DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE!");
                return EVENTRESULT_FILTER;
            }
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Cashier::vbox::Exec
    {
        method onActivate(context)
        {
            main::sound.play("buy_shop");
            var prev_cash = GAME_STATUS.user_profile.cash;
            var target_cash = vbox::slider.value * 100000;
            GAME_STATUS.user_profile.addCash(context, target_cash - prev_cash, false);

            DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE!");
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Garage::PackingSpace::vbox
    {
        module NumOfOwned
        {
            method reflectCurrentStatus()
            {
                var num_of_owned = GAME_STATUS.user_profile.garage.getCount();
                var garage_max = GAME_STATUS.user_profile.garage.getMax();
                Text::label.text = manager.translate("Unit", "CARS").build(num_of_owned + "/" + garage_max);
            }
        }

        module Edit::vbox::Add
        {
            method onActivate(context)
            {
                sound.play("ok");
                AdditionalCarRoot.open(context);
                NumOfOwned.reflectCurrentStatus();
                return EVENTRESULT_FILTER;
            }
        }

        module Edit::vbox::Remove
        {
            method onActivate(context)
            {
                sound.play("ok");
                GAME_STATUS.user_profile.garage.clear();

                DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE!");
                return EVENTRESULT_FILTER;
            }
        }

        module AtRandom::vbox::Exec
        {
            method onActivate(context)
            {
                sound.play("ok");
    
                if (DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, "yes no ?"))
                {
                    var car_count = AtRandom::vbox::slider.index;
                    var car_list = SPECDB.queryList("SELECT ID FROM GENERIC_CAR "
                                                    "WHERE SpecifyFlags1 & ? AND CarLabel <> 'car_color_sample' AND CarLabel <> 'wheel_color_sample' "
                                                    "ORDER BY RANDOM() LIMIT ?", [gtengine::GenericFlag::USE_PREMIUM_MODEL, car_count]);
    
                    var progress = pdistd::MProgress();
                    progress.value = 0f;
    
                    static abort = false;
                    DialogUtil::setProgress(context, progress);
                    DialogUtil::setProgressCancelCB(context, (context) => { abort = true; });
                    DialogUtil::openProgressDialog(context, "add cars.", "done!", "faild!", async (context, args) => 
                    {
                        for (var i = 0; i < car_list.size; i++)
                        {
                            var garage = GAME_STATUS.user_profile.garage;
                            if (garage.getCount() == garage.getMax())
                            {
                                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, "garage is full");
                                break;
                            }
    
                            var car_no = (i + 1).toFloat();
                            progress.value = car_no / car_list.size;
                            var car = car_list[i];
    
                            DialogUtil::setProgressLabel(context, "%d / %d".format(car_no, car_list.size));
    
                            if (await gtengine::MSpecDB::isUnderDevelopmentCar(car.ID))
                                continue;
    
                            var cp = await gtengine::MCarParameter(car.ID);
                            var garage_id = await GAME_STATUS.user_profile.garage.addCar(cp);
    
                            if (i & 1)
                            {
                                var ref_garage_car = GAME_STATUS.user_profile.garage.referGarageCar(garage_id);
                                ref_garage_car.favorite = true;
                            }
    
                            if (garage.getRidingCarId() == gtengine::MSpecDB::NO_CODE)
                                garage.rideCar(garage_id);
    
                            if (abort)
                                break;
                            
                            yield;
                        }

                        return [true, true];
                    });
    
                    NumOfOwned.reflectCurrentStatus();
                    return EVENTRESULT_FILTER;
                }
            }
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Network::PackingSpace::vbox
    {

    }

    module SettingFrame::Pane::ScrolledBody::clip::space::NissanVersion
    {
        method setNissanVersion(context)
        {
            var option = GAME_STATUS.user_profile.option;
            option.kiosk_mode = true;
            option.kiosk_limit_car = true;
    
            var def_limit_car_list = ["sls_amg_gt3_11"];
            option.setLimitCars(def_limit_car_list);
            option.setLimitDemoCars(def_limit_car_list);
            option.setLimitEnemiesCars(def_limit_car_list);
    
            option.kiosk_limit_course = true;
    
            var def_limit_course_list = [
                "silverstone",
                "silverstone_national",
                "silverstone_international",
                "matterhorn_C",
                "wls_big_willow",
                "mini",
                "r_autumn",
                "r_grandvalley_east",
                "suzuka_east",
            ];
            option.setLimitCourses(def_limit_course_list);
        }

        method clearNissanVersion(context)
        {
            var option = GAME_STATUS.user_profile.option;
            option.kiosk_limit_tuner = gtengine::MSpecDB::NO_CODE;
            option.academy_mode = false;
            
            if (GetVersionBranch() == "demo")
            {
                option.kiosk_limit_car = true;

                var def_limit_car_list = [
                    "deltawing_12",
                    "r8_lms_ultra_12",
                    "z4_gt3_11",
                    "sls_amg_gt3_11",
                    "gtr_nismo_gt3_13",
                    "x_bow_r_12",
                    "corvette_c7_14",
                    "tesla_model_s_sig_perf_12",
                    "tz3_stradale_11",
                    "quattro_s1_86",
                    "rocket_07",
                    "countach_lp400_74_prm",
                    "alpine_a110_1600s_68",
                    "dino_246gt_69",
                    "_370z_08_t_eu_ac13",
                    "_458_italia_09",
                    "acura_nsx_91",
                    "ford_gt_06",
                    "mp4_12c_10",
                    "toyota_86_12",
                ];
                option.setLimitCars(def_limit_car_list);

                option.kiosk_limit_democar = true;
                var def_limit_democar_list = [
                    "deltawing_12",
                    "r8_lms_ultra_12",
                    "z4_gt3_11",
                    "sls_amg_gt3_11",
                    "gtr_nismo_gt3_13",
                    "x_bow_r_12",
                    "corvette_c7_14",
                    "tesla_model_s_sig_perf_12",
                    "tz3_stradale_11",
                    "quattro_s1_86",
                    "rocket_07",
                    "countach_lp400_74_prm",
                    "alpine_a110_1600s_68",
                    "dino_246gt_69",
                    "_370z_08_eu_ac13",
                    "_370z_08_t_eu_ac13",
                    "_458_italia_09",
                    "acura_nsx_91",
                    "ford_gt_06",
                    "mp4_12c_10",
                    "toyota_86_12",
                    "leaf_g_11_ac13",
                ];
                option.setLimitDemoCars(def_limit_democar_list);

                option.kiosk_limit_course = true;
                var def_limit_course_list = [
                    "silverstone",
                    "silverstone_national",
                    "silverstone_international",
                    "matterhorn_C",
                    "wls_big_willow",
                    "mini",
                    "r_autumn",
                    "r_grandvalley_east",
                    "suzuka_east",
                ];
                
                option.setLimitCourses(def_limit_course_list);
            }
            else
            {
                option.kiosk_limit_car = true;
                option.kiosk_limit_democar = false;
                option.kiosk_limit_course = false;
            }
        }

        module vbox::Enable
        {
            method onValueChanged(context)
            {
                if (self.active)
                    setNissanVersion(context);
                else
                    clearNissanVersion(context);
            }
        }

        module vbox::Create
        {
            method onActivate(context)
            {
                if (DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, manager.translate("OptionProject::OptionRoot", "QUESTION_CREATE_SPECIAL_SAVEDATA")))
                {
                    CursorUtil::setCursor(ContextMain, "wait");

                    setNissanVersion(context);
                    SaveDataUtilGT6::saveSpecialEveryWhere(context);

                    CursorUtil::setCursor(ContextMain, "cursor_chrome");

                    DialogUtil::openConfirmDialog(context, DialogUtil::OK, manager.translate("OptionProject::OptionRoot", "MESSAGE_FINISHED_CREATING_SPECIAL_SAVEDATA"));
                }

                return EVENTRESULT_FILTER;
            }
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Sound::PackingSpace::vbox::ResetMusicPlaylist::vbox::Exec
    {
        method onActivate(context)
        {
            main::sound.play("next");
            SoundUtil::InitializePlaylist();
            SoundUtil::BGMFadeout(3f);
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE!");
            SoundUtil::MenuBGMCrossfadeGroup("menu");
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Preorder::PackingSpace::vbox::Car
    {
        method onActivate(context)
        {
            sound.play("ok");

            var list = [
                "alpine_a110_1600s_68_15anv",
                "cizeta_v16t_94_prm_15anv",
                "cobra_coupe_64_15anv",
                "corvette_c7_14_15anv",
                "corvette_coupe_63_prm_15anv",
                "europa_s2_68_15anv",
                "focus_st_13_15anv",
                "gt40_mk1_66_15anv",
                "gtr_nismo_gt3_13_15anv",
                "huayra_11_15anv",
                "is_f_racing_concept_08_15anv",
                "megane_trophy_09_15anv",
                "mustang_shelby_gt500_13_15anv",
                "quattro_s1_86_15anv",
                "r18_tdi_11_15anv",
                "r8_lms_ultra_12_15anv",
                "scirocco_gt24_08_15anv",
                "sls_amg_gt3_11_15anv",
                "stratos_73_prm_15anv",
                "tesla_model_s_sig_perf_12_15anv",
                "toyota_86_12_15anv",
                "viper_gts_13_15anv",
                "weider_hsv_010_11_15anv",
                "x_bow_r_12_15anv",
                "z8_01_15anv",
            ];

            foreach (var car_label in list)
            {
                var car_code = gtengine::MSpecDB::getCarCode(car_label);
                var have = GAME_STATUS.user_profile.garage.hasDLCExpended(car_code);
                if (have)
                {
                    GAME_STATUS.user_profile.garage.setInvalid(car_code, false);
                }
                else
                {
                    var cp = gtengine::MCarParameter(car_code);
                    cp.color = 0;
                    GAME_STATUS.user_profile.garage.addCar(cp, true);
                }
            }

            DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE");
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Preorder::PackingSpace::vbox::Avatar
    {
        method onActivate(context)
        {
            sound.play("ok");

            var list = [38];
            var type = "AVATAR_SET";
            
            foreach (var avatar_id in list)
            {
                var have = GAME_STATUS.user_profile.item.racing_gear.hasItem(type, avatar_id);
                if (have)
                    GAME_STATUS.user_profile.item.racing_gear.setInvalid(type, avatar_id, false);
                else
                {
                    GAME_STATUS.user_profile.item.racing_gear.addItem(type, avatar_id);
                }
            }

            DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE");
            return EVENTRESULT_FILTER;

        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Preorder::PackingSpace::vbox::Paint
    {
        method onActivate(context)
        {
            sound.play("ok");
    
            var list = [
                "3772","3773","3774","3775","3776","3777","3778","3779","3780","3781",
                "3782","3783","3784","3785","3786","3787","3788","3789","3790","3791",
                "3792","3793","3794","3795","3796","3797","3798","3799","3800","3801",
                "3802","3803","3804","3805","3806","3807","3808","3809","3810","3811",
                "3812","3813","3814","3815","3816","3817","3818","3819","3820","3821",
                "3822","3823","3824","3825","3826","3827","3828","3829","3830","3831",
                "3832","3833","3834","3835","3836","3837","3838","3839","3840","3841",
                "3842","3843","3844","3845","3846","3847","3848","3849","3850","3851",
                "3852","3853","3854","3855","3856","3857","3858","3859","3860","3861",
                "3862","3863","3864","3865","3866","3867","3868","3869","3870","3871",
            ];
    
            foreach (var paint_id in list)
            {
                var have = GAME_STATUS.user_profile.item.paint.hasItem(paint_id);
                if (have)
                    GAME_STATUS.user_profile.item.paint.setInvalid(paint_id, false);
                else
                {
                    var category = 1;
                    GAME_STATUS.user_profile.item.paint.addItem(paint_id, category);
                }
            }
    
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE");
            return EVENTRESULT_FILTER;
        }
    }

    
    module SettingFrame::Pane::ScrolledBody::clip::space::Preorder::PackingSpace::vbox::GTR
    {
        method onActivate(context)
        {
            sound.play("ok");

            KeyValueUtil::set("special_present", "CAR_0001", "");

            DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE");
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Preorder::PackingSpace::vbox::BMW_M4
    {
        method onActivate(context)
        {
            sound.play("ok");

            KeyValueUtil::set("special_present", "CAR_0002", "");

            DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE");
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Preorder::PackingSpace::vbox::GT5_FINAL
    {
        method onActivate(context)
        {
            sound.play("ok");

            KeyValueUtil::set("special_present", "CAR_0003", "");
            KeyValueUtil::set("special_present", "CAR_0004", "");
            KeyValueUtil::set("special_present", "CAR_0005", "");
            KeyValueUtil::set("special_present", "CAR_0006", "");
            KeyValueUtil::set("special_present", "CAR_0007", "");

            DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE");
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Preorder::PackingSpace::vbox::GTR_NISMO_14
    {
        method onActivate(context)
        {
            sound.play("ok");

            KeyValueUtil::set("special_present", "CAR_0008", "");

            DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE");
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::LoginBonus::PackingSpace::vbox
    {
        module FactorIndex::vbox::Exec
        {
            static PrizeFactorTable = [
                1.1f,
                1.3f,
                1.5f,
                1.7f,
                2f
            ];

            method onActivate(context)
            {
                sound.play("ok");
                if (DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, "yes no ?"))
                {
                    var _factor_index = FactorIndex::vbox::slider.index;
                    GAME_STATUS.user_profile.context.exp_factor = PrizeFactorTable[_factor_index - 1];
                }
                
                return EVENTRESULT_FILTER;
            }
        }

        module DaysAgo::vbox::Exec
        {
            method onActivate(context)
            {
                sound.play("ok");
                if (DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, "yes no ?"))
                {
                    var _daysago = DaysAgo::vbox::slider.index;
                    GAME_STATUS.user_profile.context.last_login = GAME_STATUS.user_profile.context.last_login - (_daysago * 86400);
                }
                
                return EVENTRESULT_FILTER;
            }
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Misc::PackingSpace::vbox::GT5Paint
    {
        method onActivate(context)
        {
            sound.play("ok");
    
            var list = [
                "3206","3208","3209","3210","3211","3212","3213","3193","3214","3215",
                "3250","3251","3252","3253","3254","3204","3205","3218","3223","3224",
                "3207","3216","3217","3219","3220","3221","3225","3227","3229","3231",
                "3232","3233","3234","3235","3236","3237","3239","3243","3247","3248",
                "3226","3228","3230","3238","3249","3240","3255","3256","3257","3259",
                "3241","3242","3244","3245","3246","3222","3258","3260","3262","3263",
                "3280","3282","3284","3285","3287","3288","3289","3290","3291","3292",
                "3265","3267","3268","3269","3270","3272","3275","3276","3277","3279",
                "3194","3195","3196","3197","3198","3199","3200","3201","3202","3203",
                "3261","3264","3266","3271","3273","3274","3278","3281","3283","3286",
            ];
    
            foreach (var paint_id in list)
            {
                var have = GAME_STATUS.user_profile.item.paint.hasItem(paint_id);
                if (have)
                    GAME_STATUS.user_profile.item.paint.setInvalid(paint_id, false);
                else
                {
                    var category = 1;
                    GAME_STATUS.user_profile.item.paint.addItem(paint_id, category);
                }
            }
    
            DialogUtil::openConfirmDialog(context, DialogUtil::OK, "DONE");
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Misc::PackingSpace::vbox::AddAllPaints
    {
        method onActivate(context)
        {
            sound.play("ok");
    
            var paint_id_list = [];
            var state = context.getUpdateContext().getPadButtonState(0);

            paint_id_list = SPECDB.executeQuery1C("SELECT ID FROM PAINT_COLOR_INFO WHERE LabelJpn <> '' AND LabelEng <> '' AND Type <> 99 AND ID NOT BETWEEN 3772 AND 3871");
            if (paint_id_list.size > 0)
            {
                var progress = pdistd::MProgress();
                progress.value = 0f;

                DialogUtil::setProgress(context, progress);
                DialogUtil::setProgressRawMode(context, true);
                DialogUtil::openProgressDialog(context, "add paint colors.", "done", "faild!", (context, args) => 
                {
                    for (var i = 0; i < paint_id_list.size; i++)
                    {
                        var num = (i + 1).toFloat();
                        progress.value = num / paint_id_list.size;
                        DialogUtil::setProgressLabel(context, "%d / %d".format(num, paint_id_list.size));

                        var paint_id = paint_id_list[i];
                        GAME_STATUS.user_profile.item.paint.addItem(paint_id);
                    }

                    return [true, true];
                });
            }

            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Misc::PackingSpace::vbox::AddAllRacingGears
    {
        method onActivate(context)
        {
            sound.play("ok");

            var item_list = [];
            var total = 0;
            foreach (var type in ["AVATAR_MET", "AVATAR_SUIT", "AVATAR_SET"])
            {
                var item_id_list = SPECDB.executeQuery1C("SELECT ID FROM %{type} WHERE 0 < Price");
                total += item_id_list.size;
                item_list.push([type, item_id_list]);
            }

            if (item_list.size > 0)
            {
                var progress = pdistd::MProgress();
                progress.value = 0f;
                DialogUtil::setProgress(context, progress);
                DialogUtil::setProgressRawMode(context, true);
                DialogUtil::openProgressDialog(context, "add paint colors.", "done", "faild!", (context, args) => 
                {
                    var num = 1;
                    foreach (|var type, var item_id_list| in item_list)
                    {
                        foreach (var item_id in item_id_list)
                        {
                            progress.value = num / total;
                            DialogUtil::setProgressLabel(context, "%d / %d".format(num, total));
                            num++;

                            GAME_STATUS.user_profile.item.racing_gear.addItem(type, item_id);
                        }
                    }

                    return [true, true];
                });
            }

            return EVENTRESULT_FILTER;
        }
    }

    module A_FixedBetterTime
    {
        method reflect(context)
        {
            var mtime = pdistd::MTime();
            var sec = pdiext::MGrim2::getFixedBetterTimeSecond();

            if (sec > 0)
            {
                A_CheckButton.active = true;
                A_InputText.insensitive = false;
                mtime.setBySecond(sec);
                mtime = mtime.toLocal();
                A_input.value = mtime;
            }
            else
            {
                A_CheckButton.active = false;
                A_InputText.insensitive = true;
                A_input.value = pdiext::getBetterTimeLocal();
            }
        }

        method apply(context)
        {
            if (A_CheckButton.active)
            {
                var mtime = pdistd::MTime(A_input.value);
                mtime = mtime.toGMT();
                pdiext::MGrim2::setFixedBetterTimeSecond(mtime.getBySecond());
            }
            else
            {
                pdiext::MGrim2::setFixedBetterTimeSecond(0);
            }
        }

        module A_CheckButton
        {
            method onValueChanged(context)
            {
                A_InputText.insensitive = !self.active;
            }
        }
    }
}