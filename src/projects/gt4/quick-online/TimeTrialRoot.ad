module PROJECT::ROOT
{
	#include "../quick-share/icon.ad"
	#include "../quick-share/quick_tune.ad"

	var entryNum = 1;
	for (var i = 1; i <= entryNum; i++)
	{
		var widget = ROOT["Grid" + i];
		setMoveActor(widget, 640 + (392 * 2 * i), 0, 0.15);
		widget.actor.out = false;
	}

	function onInitialize(context)
	{
	    CreateWatcher(context, onTick, 10);

	    var quick_work = main::menu::MQuickWork();

	    ROOT::PS.text = main::menu::MUnit::GetUnitOfPower();

	    var entryNum = 1;
	    for (var i = 0; i < entryNum; i++)
	    {
	        ROOT["Grid" + (i + 1)]["CarName"].text = quick_work.getGridCarName(i);
	        ROOT["Grid" + (i + 1)]["CarName"].abbreviate();

	        ROOT["Grid" + (i + 1)]["ColorChip"].setColor(
	            quick_work.getColorChipInfo(i)
	        );

	        if (quick_work.getPower(i) == 0)
	        {
	            ROOT["Grid" + (i + 1)]["PS"].text = "--";
	        }
	        else
	        {
	            ROOT["Grid" + (i + 1)]["PS"].text = quick_work.getPower(i);
	        }

	        ROOT["Grid" + (i + 1)]["KG"].text = quick_work.getWeight(i);
			setTireText(context, i, quick_work.getTireType(i));
	    }

	    entryNum = 1;
	    for (var i = 1; i <= entryNum; i++)
	    {
	        var widget = ROOT["Grid" + i];

	        widget.actor.out = true;
	        widget.actor.warp();
	        widget.actor.out = false;
	    }

	    if (quick_work.playerGridNumber >= 0)
	    {
	        var gnum = quick_work.playerGridNumber + 1;

	        ROOT["Grid" + gnum]["CarName"].color = ROOT::Hidden::MyGridColor.color;
	        ROOT["Grid" + gnum]["GridNumber"].color = ROOT::Hidden::MyGridColor.color;
	        ROOT["Grid" + gnum]["PS"].color = ROOT::Hidden::MyGridColor.color;
			ROOT["Grid" + gnum]["KG"].color =  ROOT::Hidden::MyGridColor.color;
	    }

	    var course_label = quick_work.courseLabel;
	    Title.text = context.translate(ROOT, "CourseName", course_label);

	    var session_best_time = main::menu::MUtility::GetTimeString(quick_work.BestTime);

	    if (!quick_work.canSaveGhost)
	    {
	        var max_lap_time = main::menu::MUtility::GetTimeString();

	        if (max_lap_time != session_best_time)
	        {
	            var red = main::menu::MColorObject(1.0, 0.0, 0.0, 1.0);
	            Sessionbest_Time.text_color = red;
	        }
	    }

	    Sessionbest_Time.text = session_best_time;

	    ToolTip_Upper::Year.text = getCarYearStrings(context, quick_work, ROOT);
	    ToolTip_Upper::Year.adjustScale();

	    ToolTip_Upper::DriveTrain.text = getDrivetrainStrings(context, quick_work, ROOT);
	    ToolTip_Upper::DriveTrain.adjustScale();

	    ToolTip_Upper::Power.text = getPowerStrings(context, quick_work, ROOT);
	    ToolTip_Upper::Power.adjustScale();

	    ToolTip_Upper::Torque.text = getTorqueStrings(context, quick_work, ROOT);
	    ToolTip_Upper::Torque.adjustScale();

	    CarCategory.text = getCarCategoryStrings(context, quick_work, ROOT);

	    main::sound.startStreamEx("pcm", "default_quick", -1, 1, main::game.option.menu_bgm_volume);

	    setDefaultIconFocus(context);
	    updateMyCarInfo(context);
	    setIconPosition(context);
	}

	function onFinalize(context)
	{
		DeleteWatcher();
	}

	static icon_name_tbl = ["Start", "Ranking", "Exit"];
	
	function onKeyPress(context, event)
	{
		if (event.keysym == PS2_PAD_CTRL_L3_UP || event.keysym == PS2_PAD_CTRL_L3_DOWN)
			return true;
	
		return false;
	}

	function setIconPosition(context)
	{
		var max = icon_name_tbl.size;
		var num = 0;
	
		for (var i = 0; i < max; i++)
		{
			if (ROOT::Buttons[icon_name_tbl[i]].visible == true)
				num++;
		}
	
		var screen_w = 640;
		var icon_w = 60;
		var space = 0;
	
		if (num >= 10)
			space = -4;
	
		var st = (screen_w - (num * icon_w) - (space * (num - 1))) / 2;
		var c = 0;
	
		for (var i = 0; i < max; i++)
		{
			if (ROOT::Buttons[icon_name_tbl[i]].visible == true)
			{
				ROOT::Buttons[icon_name_tbl[i]].x = st + (icon_w + space) * c;
				c++;
			}
		}
	}

	function set_next_start_project()
	{
		main::game.next_menu_project = main::game.major_menu_project;
	}

	function exit_impl(context)
	{
		main::sound.stopStream();
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_EXIT";
		context.transition.panOut(context);
		context.transition.syncOut(context);
		set_next_start_project();
		context.finish();
	}

	function exit(context)
	{
		var quick_work = main::menu::MQuickWork();
		var text = "";
	
		if (quick_work.canSaveGhost)
			text = context.translate(ROOT, "DO_YOU_QUIT_AND_UPLOAD_YOUR_DATA_TO_THE_RANKINGS");
		else
			text = context.translate(ROOT, "DO_YOU_QUIT");
	
		var res = openConfirmDialog(context, DIALOG_DEFAULT_NO, text);
	
		if (!res)
			return;
	
		exit_impl(context);
	}

	function onTick(context)
	{
		var limit = main::network.timeLimit - main::network.gameTime();
	
		if (limit < 0) {
			main::sound.play("cancel");
	
			var event = main::menu::MScriptEvent(context, ROOT, "exit_impl");
			context.pushEvent(event);
		}
	
		limit /= 1000;
	
		var text = "";
	
		if (limit > 180)
		{
			text = context.translate(ROOT, "TIME_LIMIT_MIN").build(limit / 60);
		}
		else 
		{
			if (limit < 10)
			{
				var red = main::menu::MColorObject(1.0, 0.0, 0.0, 1.0);
				Timelimit_Label.text_color = red;
				Timelimit_Time.text_color = red;
			}

			text = context.translate(ROOT, "TIME_LIMIT_SEC").build(limit);
		}

		Timelimit_Time.text = text;
	}

	function onCancel(context, event, item)
	{
		main::sound.play("cancel");
		event = main::menu::MScriptEvent(context, ROOT, "exit");
		context.pushEvent(event);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Start
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_START";
		quick_work.cursorPosition = getIconIndex(context, "Start");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
		context.finish();
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Ranking
{
	function onActivate(context)
	{
		main::sound.play("ok");
	
		var quick_work = main::menu::MQuickWork();
	
		if (quick_work.canSaveGhost)
		{
			var title = context.translate(ROOT, "TITLE|NOTICE");
			var message = context.translate(ROOT, "DO_YOU_AGREE_RANKING_INFO_BECOMES_INVALID");
	
			var res = openConfirmDialog(context, DIALOG_QUERY, message, title);
			if (!res)
				return EVENTRESULT_FILTER;
		}
	
		main::sound.stopStream();
	
		quick_work.selectedCommand = "COMMAND_DOWNLOAD_BESTLAP_REPLAY";
		quick_work.cursorPosition = getIconIndex(context, "Ranking");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
	
		context.finish();
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Exit
{
	function onActivate(context)
	{
		main::sound.play("ok");
		var event = main::menu::MScriptEvent(context, ROOT, "exit");
		context.pushEvent(event);
		return EVENTRESULT_FILTER;
	}
}