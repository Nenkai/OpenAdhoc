
//---------------------------------------------------------------------------------------
// ModuleReplay.ad (standalone script)
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

#ifndef PROJECT
    #define PROJECT RaceProject
#endif

module UtilEntry
{
}

function onLoad(update_context)
{
    main::RaceOperator.allocateResource();
}

function onUnload(update_context)
{
    main::RaceOperator.checkOut();
    main::ORG.exitCourse();
    main::RaceOperator.destroyRace();
    main::RaceOperator.clearResource();
}

function getReplayInfo()
{
    var buf = main::ORG.getReplayBuffer();
    if (buf == nil)
        return nil;

    var info = main::gtengine::MReplayInfo();
    var success = info.initialize(buf);
    if (!success)
        return nil;

    return info;
}

function isValidReplay()
{
    var info = getReplayInfo();
    if (info == nil)
        return false;

    if (info.total_frame_num < 600) // 10 seconds
        return false;

    return true;
}

function isCompleteReplay()
{
    var info = getReplayInfo();
    if (info == nil)
        return false;

    if (!info.race_complete)
        return false;

    return true;
}

function canStartReplay()
{
    return isValidReplay();
}

function doStartReplay(context)
{
    var root = context.getCurrentPage();
    if (!canStartReplay())
    {
        main::sound.play("cancel");
        var text = context.translate(root, "QuickMenu", "NO_REPLAY_TO_START");
        LeaveDetectUtil::suspend(context);
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, text);
        LeaveDetectUtil::resume(context);
        return;
    }

    var res = main::ORG.startReplayWithCurrentRace();
    if (!res)
    {
        main::sound.play("cancel");
        var text = context.translate(root, "QuickMenu", "NO_REPLAY_TO_START");
        LeaveDetectUtil::suspend(context);
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, text);
        LeaveDetectUtil::resume(context);
        return;
    }
    main::sound.play("ok");

    gSequenceCondition.is_buffer_replay_mode = true;
    main::ORG.setApplicationTimeLimitNoStopAtPause(false);
    SequenceUtil::startPage(context, OnboardMeterRoot, RaceRoot);

    SoundUtil::BGMFadeout(1.0);
    main::ORG.getRaceSound().start = false;
}

function canSaveReplay()
{
    return isValidReplay();
}

function doSaveReplay(context)
{
    var root = context.getCurrentPage();
    if (!canSaveReplay())
    {
        main::sound.play("cancel");
        var text = context.translate(root, "QuickMenu", "NO_REPLAY_TO_SAVE");
        LeaveDetectUtil::suspend(context);
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, text);
        LeaveDetectUtil::resume(context);
        return;
    }

    var buf = main::ORG.getReplayBuffer();
    main::sound.play("ok");

    LeaveDetectUtil::suspend(context);

    UtilEntry.load("/scripts/gt5m/util/SaveDataUtilPSP");
    self finally {
        UtilEntry.clearStatic();
    };

    |var subtitle, var description| = PluginModule::createReplaySaveDataDescription(context);

    var suffix = getGhostReplaySuffix();

    var data = UtilEntry::SaveDataUtilPSP::ReplayDataForSave(suffix);

    data.title = context.translate(root, "SaveDataPSP", "GAME_TITLE_WITHIN_128BYTES");
    data.savedataTitle = subtitle;
    data.description = description;
    data.buf = buf;

    UtilEntry::SaveDataUtilPSP::save(context, data);

    LeaveDetectUtil::resume(context);
}

function getGhostReplayInfo()
{
    var buf = main::ORG.getSaveGhostBuffer();
    if (buf == nil)
        return nil;

    var info = main::gtengine::MReplayInfo();
    var success = info.initialize(buf);
    if (!success)
        return nil;

    return info;
}

function isValidGhostReplay()
{
    var info = getGhostReplayInfo();
    if (info == nil)
        return false;

    return true;
}

function canSaveGhost()
{
    return isValidGhostReplay();
}

function getGhostReplaySuffix()
{
    var crc = main::gtengine::MSpecDB::getCodeHash(getCurrentCourse());
    return "%08X".format(crc);
}

function doSaveGhostReplay(context)
{
    var root = context.getCurrentPage();
    if (!canSaveGhost())
    {
        main::sound.play("cancel");
        var text = context.translate(root, "QuickMenu", "NO_REPLAY_TO_SAVE");
        LeaveDetectUtil::suspend(context);
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, text);
        LeaveDetectUtil::resume(context);
        return;
    }

    var buf = main::ORG.getSaveGhostBuffer();
    main::sound.play("ok");

    LeaveDetectUtil::suspend(context);

    UtilEntry.load("/scripts/gt5m/util/SaveDataUtilPSP");
    self finally {
        UtilEntry.clearStatic();
    };

    var subtitle = context.translate(root, "SaveDataGT5M", "BEST_SUBTITLE_WITHIN_128BYTES");

    if (gSequenceCondition.game_mode == main::gtengine::GameMode::TIME_ATTACK)
        subtitle = subtitle + context.translate(root, "GameModeNameGT5P", "TIME_ATTACK");
    else if (gSequenceCondition.game_mode == main::gtengine::GameMode::FREE_RUN)
        subtitle = subtitle + context.translate(root, "GameModeNameGT5P", "FREE_RUN");
    else
    {
        subtitle = subtitle + "";
    }

    var description = context.translate(root, "SaveDataGT5M", "BEST_DESCRIPTION_WITHIN_1024BYTES");

    {
        var course_code = getCurrentCourse();
        var course_label = main::gtengine::MSpecDB::getCourseLabel(course_code);
        var layout = "LAYOUT_NORMAL";
        if (course_label.beginWith("r_"))
        {
            course_label = course_label.substr(2);
            layout = "LAYOUT_REVERSE";
        }
        var coursename = "%s / %s".format(context.translate(root, "CourseName", course_label),
                                          context.translate(root, "TrialSetting", layout));
                                        
        var time_str = "";
        {
            var info = main::gtengine::MReplayInfo();
            var success = info.initialize(buf);
            if (!success)
                return;

            time_str = main::pdiext::GetRaceTimeString(info.getBestTime());
        }

        var cp = getPlayerCar();
        var dp = getPlayerDriver();
        
        var sim_str = context.translate(root, "TrialSetting", dp.physics_pro ? "PhysicsPro" : "PhysicsNormal");
        var tire_str = getTireString2(context, root, cp, course_code);
    
        description = description.build(coursename,
                                        main::gtengine::MSpecDB::getCarName(cp.getCarCode()),
                                        time_str,
                                        sim_str,
                                        tire_str);
    }

    var suffix = getGhostReplaySuffix();
    var data = UtilEntry::SaveDataUtilPSP::GhostDataForSave(suffix);

    data.title = context.translate(root, "SaveDataPSP", "GAME_TITLE_WITHIN_128BYTES");
    data.savedataTitle = subtitle;
    data.description = description;
    data.buf = buf;

    UtilEntry::SaveDataUtilPSP::save(context, data);

    LeaveDetectUtil::resume(context);
}

function doLoadGhostReplay(context)
{
    main::sound.play("ok");

    UtilEntry.load("/scripts/gt5m/util/SaveDataUtilPSP");
    self finally {
        UtilEntry.clearStatic();
    };

    var root = context.getCurrentPage();

    var suffix = getGhostReplaySuffix();
    var data = UtilEntry::SaveDataUtilPSP::GhostDataForLoad(suffix);

    var load_result = UtilEntry::SaveDataUtilPSP::load(context, data);

    if (load_result == nil)
        return false;

    var buf = load_result[0];
    if (buf == nil)
        return false;

    var success = main::ORG.checkReplayBuffer(buf);
    if (!success)
    {
        main::sound.play("cancel");

        var text = context.translate(root, "SaveDataPSP", "LOADED_DATA_WAS_WRONG");
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, text);
        return false;
    }

    var info = main::gtengine::MReplayInfo();
    success = info.initialize(buf);
    if (!success)
    {
        main::sound.play("cancel");

        var text = context.translate(root, "SaveDataPSP", "LOADED_DATA_WAS_WRONG");
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, text);
        return false;
    }

    if (!loadGhostReplayData(context, buf, info))
    {
        main::sound.play("cancel");
        return false;
    }

    return true;
}

function loadGhostReplayData(context, replay_data, replay_info)
{
    if (context == nil || replay_data == nil || replay_info == nil)
        return false;

    var rp = replay_info.getRaceParameter();
    if (rp == nil || rp.course_code != getCurrentCourse())
        return false;

    return main::RaceOperator.loadGhostReplay(0, replay_info, replay_data);
}

function doSaveLicenseReplay(context)
{
    var root = context.getCurrentPage();
    if (!canSaveReplay())
    {
        main::sound.play("cancel");
        var text = context.translate(root, "QuickMenu", "NO_REPLAY_TO_SAVE");
        LeaveDetectUtil::suspend(context);
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, text);
        LeaveDetectUtil::resume(context);
        return;
    }

    var buf = main::ORG.getReplayBuffer();

    main::sound.play("ok");

    LeaveDetectUtil::suspend(context);

    UtilEntry.load("/scripts/gt5m/util/SaveDataUtilPSP");
    self finally {
        UtilEntry.clearStatic();
    };

    |var subtitle, var description| = PluginModule::createReplaySaveDataDescription(context);

    var data = UtilEntry::SaveDataUtilPSP::LicenseReplayDataForSave(main::GlobalStatus::game_context.license_id);

    data.title = context.translate(root, "SaveDataPSP", "GAME_TITLE_WITHIN_128BYTES");
    data.savedataTitle = subtitle;
    data.description = description;
    data.buf = buf;

    if (main::pdiext::MProductInformation::GetVersionEnvironment() != "product")
    {
        var dir = "/preview/psp/replay/" + main::pdistd::MNetworkInterface::getMacAddress().split(":").join("_");

        var exist_dir = main::pdistd::Exist(dir);
        if (!exist_dir)
        {
            main::pdistd::MakeDirectory(dir);
            exist_dir = main::pdistd::Exist(dir);
        }

        if (exist_dir)
        {
            var time = main::pdistd::MTime::getCurrentTime();
            var file = "/%04d_%02d_%02d_%02d_%02d_%02d__license%03d.dat".format(time.year, time.month,
                                                                                time.day, time.hour,
                                                                                time.minute, time.second,
                                                                                main::GlobalStatus::game_context.license_id);
            var path = dir + file;


            buf = main::pdistd::Deflate(buf);
            buf = main::pdistd::MCipher::encrypt(buf);
            var st_result = main::pdistd::WriteFile(path, buf);
            st_result != 0; // Something half commented out?
        }
    }

    UtilEntry::SaveDataUtilPSP::save(context, data);

    LeaveDetectUtil::resume(context);
}