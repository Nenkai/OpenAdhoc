

//---------------------------------------------------------------------------------------
// ThumbnailUtil.ad
//
// Utility module for taking car thumbnails, getting paths
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module ThumbnailUtil
{
    function captureSettings(context, sceneface)
    {

    }

    class SceneParam
    {
        attribute capture_w;
        attribute capture_h;
        attribute trim_x;
        attribute trim_y;
        attribute trim_w;
        attribute trim_h;
        attribute use_lod;
        attribute cmd;
        attribute mask_cmd;

        method __init__(attribute_map)
        {
            if (attribute_map != nil)
            {
                foreach (|var key, var value| in attribute_map)
                    self[key] = value;
            }
        }
    
        method __set_elem__(i, val)
        {
            self.setObjectAttribute(i, val);
        }
    }

    function paramCarThumbL(cp)
    {
        var param = SceneParam([
            "capture_w" : 452,
            "capture_h" : 254,
            "trim_x" : 33,
            "trim_y" : 37,
            "trim_w" : 384,
            "trim_h" : 216,
            "use_lod" : false,
            "cmd" : [
                "setDefaultSceneParameter",
                "setEffectParameter colorcorrect[0].enable 1",
                "setEffectParameter colorcorrect[0].gain 1.5 1.5 1.5",
                "setEffectParameter colorcorrect[0].env 1  ",
                "setEnvironmentParameter light.worldLight.enableAmbientScale 1",
                "setEnvironmentParameter light.worldLight.scale.v[3] 1",
                "setEffectParameter colorcorrect[1].enable 1",
                "setEffectParameter colorcorrect[1].gain 2 2 2",
                "setLightDir -0.344 0.889 -0.302",
                "setLightDiffuse    1 1 1",
                "setPerspective 5 0 0.1 1000",
                "setCameraPosition -10 0.6 -26",
                "setCameraLookat    0.1 0.98 0",
                "setGlobalAmbient 0 0 0",
                "setEnvironmentParameter light.worldLight.ambientCube.master 0.4",
                "setGridDisp 0",
                "setAAMode     best",
                "setScreenShotDivision 1 1",
                "loadModel code:bg016%env   env1 false true",
                "setBGColor 0.0 0.0 0.0",
                "setGain 1.5",
                "setCarSteer -21.29",
            ],
            "mask_cmd" : [
                "setBGColor 1.0 1.0 1.0",
                "setGain 0.003",
                "setEffectParameter colorcorrect[0].enable 1",
                "setEffectParameter colorcorrect[0].gain   1 1 1",
                "setEffectParameter colorcorrect[0].bias   0 0 0",
                "setEffectParameter colorcorrect[0].gamma 3 3 3",
                "setEffectParameter colorcorrect[0].chroma 0",
                "setEffectParameter colorcorrect[0].env    0",
                "setEffectParameter colorcorrect[0].postDynamicrangeCorrect 0",
                "setEffectParameter colorcorrect[1].enable 0",
                "setEffectParameter colorcorrect[2].enable 0",
                "setLightDiffuse  0 0 0 0",
                "setLightSpecular 0 0 0 0",
                "setAmbientCubeXp 0 0 0 0",
                "setAmbientCubeXm 0 0 0 0",
                "setAmbientCubeYp 0 0 0 0",
                "setAmbientCubeYm 0 0 0 0",
                "setAmbientCubeZp 0 0 0 0",
                "setAmbientCubeZm 0 0 0 0",
            ],
        ]);

        var big_cars = [
            "tank_car_03",
            "ram_1500_hemi_4cab_04",
            "typ2_t1_sambabus_62",
            "lunar_roving_vehicle_71",
        ];

        var deltawing = [
            "deltawing_12",
            "panoz_deltawing_13",
        ];

        var camera_param;
        if (big_cars.indexOf(cp.getCarLabel()) > -1)
        {
            camera_param = [
                "setPerspective 6.3 0 0.1 1000",
                "setCameraPosition -10 0.82 -26",
                "setCameraLookat    0.1 1.20 0",
            ];
        }
        else if (gtengine::MSpecDB::checkFlag(cp.getCarCode(), gtengine::GenericFlag::IS_RACING_KART))
        {
            camera_param = [
                "setPerspective 3.8 0 1 1000",
                "setCameraPosition -10 0.38 -26",
                "setCameraLookat    0.1 0.76 0",
            ];
        }
        else if (deltawing.indexOf(cp.getCarLabel()) > -1)
        {
            camera_param = [
                "setPerspective 5 0 0.1 1000",
                "setCameraPosition -10 0.6 -26",
                "setCameraLookat    -0.15 0.98 0.1",
            ];
        }
        else
        {
            camera_param = [
                "setPerspective 5 0 0.1 1000",
                "setCameraPosition -10 0.6 -26",
                "setCameraLookat    0.1 0.98 0",
            ];
        }

        param.cmd += camera_param;
        return param;
    }

    function paramCarThumbS(cp)
    {
        var param = SceneParam([
            "capture_w" : 240,
            "capture_h" : 135,
            "trim_x" : 0,
            "trim_y" : 33,
            "trim_w" : 240,
            "trim_h" : 80,
            "use_lod" : false,
            "cmd" : [
                "setDefaultSceneParameter",
                "setCameraMotionEnable 1",
                "setSceneMotionEnable 1",
                "setEnvClearMode 1",
                "setDynamicRangeCompress 1.0",
                "setDynamicRangeCompressEnv 2.0",
                "setLightDir -0.5 1.0 0.0",
                "setLightColor 2.0 2.0 2.0",
                "setSpecularColor 1.00 1.00 1.00",
                "setAmbientCubeYp 1.00 1.00 1.00",
                "setAmbientCubeYm 1.00 1.00 1.00",
                "setAmbientCubeXp 1.50 1.50 1.50",
                "setAmbientCubeZp 1.00 1.00 1.00",
                "setAmbientCubeXm 1.50 1.50 1.50",
                "setAmbientCubeZm 1.00 1.00 1.00",
                "setGridDisp 0",
                "setCameraUp 0 1 0",
                "setPerspective 18 1.0 0.5 10000",
                "setCameraPosition 0 0.67 -14.24",
                "setCameraLookAt 0 1.18 0.02",
                "setCameraFovY 16",
                "setAAMode 0",
                "setCurrentModel car0",
                "setModelTranslation 0 0 0",
                "setModelRotation 0 -90 0",
                "loadModel	code:bg016%env 	env1	false true",
                "setBGColor 0.0 0.0 0.0",
                "setGain 1.5",
            ],
            "mask_cmd" : [
                "setBGColor 1.0 1.0 1.0",
                "setGain 0.003",
                "setLightDiffuse  0 0 0 0",
                "setLightSpecular 0 0 0 0",
                "setAmbientCubeXp 0 0 0 0",
                "setAmbientCubeXm 0 0 0 0",
                "setAmbientCubeYp 0 0 0 0",
                "setAmbientCubeYm 0 0 0 0",
                "setAmbientCubeZp 0 0 0 0",
                "setAmbientCubeZm 0 0 0 0",
            ],
        ]);

        return param;
    }

    function captureIcon(context, sceneface, cp, size, path, use_lod_model)
    {
        var free_size_byte = pdistd::GetDiskFreeSize("/APP_DATA");
        var threshold = 32 * 1024 * 1024;

        if (free_size_byte < threshold)
            return;

        var sf = sceneface;
        sf.iconCaptureBegin();

        var sf_visible = sf.visible;
        if (sf.visible == false)
            sf.visible = true;

        var sf_param;
        if (size == "L")
            sf_param = paramCarThumbL(cp);
        else
            sf_param = paramCarThumbS(cp);

        sf.w = sf_param.capture_w;
        sf.h = sf_param.capture_h;
        sf.setDefaultCarParameter(cp);
        sf.setClearColorBuffer(true);

        var cmd = [];
        cmd.push("clearAllModel");
        
        if (use_lod_model == true || sf_param.use_lod)
            cmd.push("changeLodCar _default car0");
        else
            cmd.push("changeCar _default car0");

        cmd += sf_param.cmd;

        foreach (var c in cmd)
            sf.execCommand(c);
        
        context.wait(0.1);

        var counter = 0;
        for (;;)
        {
            if (sf.isUnderSetup())
                context.wait(0.3);

            if (++counter > 50)
                return; // Assume stuck
        }

        sf.iconShotImage();
        sf.waitTickEntry();

        var mask_cmd = sf_param.mask_cmd;
        foreach (var c in mask_cmd)
            sf.execCommand(c);

        sf.saveCommandQueue();
        context.wait(0.1);
        sf.iconShotMask();
        sf.waitTickEntry();

        path -= ".png";
        pdistd::MakeDirectoryForFile(path);

        sf.iconCompositeSave(path, sf_param.trim_x, sf_param.trim_y, sf_param.trim_w, sf_param.trim_h, 0.0, 255.0);
        sf.visible = sf_visible;
        sf.iconCaptureEnd();
    }

    function captureFinalize(context, sceneface)
    {
        var sf = sceneface;
        sf.execCommand("clearAllModel");
        context.wait(0.3);
    }

    function captureIconImpl(context, sceneface, cp, large, path, use_lod_model)
    {
        var sf = sceneface;
        captureSettings(context, sceneface);
        captureIcon(context, sceneface, cp, large, path, use_lod_model);
        captureFinalize(context, sceneface, cp, large, path);
    }

    module Avatar
    {
        module Genre
        {
            static SIMPLE = 0;
            static SETUP = 1;
            static COMBO = 2;
        
            function getString(genre)
            {
                switch (genre)
                {
                    case SIMPLE:
                        return "simple";

                    case SETUP:
                        return "setup";

                    case COMBO:
                    default:
                        return "combo";
                }
            }
        }

        module Type
        {
            static MET = 0;
            static SUITS = 1;
            static MET_SUITS = 2;
        
            function getString(type)
            {
                switch (type)
                {
                    case MET:
                        return "met";
                    
                    case SUITS:
                        return "suits";
                
                    case MET_SUITS:
                    default:
                        return "met_suits";
                }
            }
        }

        function getImagePathImpl(genre, type, size_str, met_id, met_color, suits_id, suits_color)
        {
            var file_name;
            if (type == Type::MET_SUITS)
                file_name = "%03d_%02d_%03d_%02d.png".format(met_id, 0, suits_id, 0);
            else
            {
                var id = 0;
                var color = 0;

                if (type == Type::MET)
                {
                    id = met_id;
                    color = met_color;
                }
                else
                {
                    id = suits_id;
                    color = suits_color;
                }

                file_name = "%03d_%02d.png".format(id, color);
            }

            return "%{Genre::getString(genre)}/%{size_str}/%{Type::getString(type)}/%{file_name}";
        }

        function getImagePath(genre, type, size_str, met_id, met_color, suits_id, suits_color)
        {
            var path = getImagePathImpl(genre, type, size_str, met_id, met_color, suits_id, suits_color);
            path -= ".png";
            return "character/thumbnail/%{path}";
        }

        function getImagePathForDevelopment(dir, genre, type, size_str, met_id, met_color, suits_id, suits_color)
        {
            var path = getImagePathImpl(genre, type, size_str, met_id, met_color, suits_id, suits_color);
            return "%{dir}/%{path}";
        }

        function getImagePathGT6(genre, type, met_id, met_color, suits_id, suits_color)
        {
            var genre_dir = Genre::getString(genre);
            var file_name = "";

            switch (type)
            {
                case Type::MET:
                    file_name = "m%03d_%02d".format(met_id, met_color);
                    break;

                case Type::SUITS:
                    file_name = "s%03d_%02d".format(suits_id, suits_color);
                    break;

                case Type::MET_SUITS:
                    file_name = "ms%03d_%02d".format(met_id, met_color);
                    break;

            }

            return "character/thumbnail/%{genre_dir}/%{file_name}";
        }

        module Capture { } // Empty, but attributes loaded from util script
        function loadAvatarUtil()
        {
            Capture.load("/scripts/gt6/util/ThumbnailAvatarUtil");
        }

        function unloadAvatarUtil()
        {
            Capture.clearStatic();
        }
    }

    function copyThumbnailFromPieceToAppData(car_label, car_color, garage_id)
    {
        var src = "/piece/gt6/car_thumb/%s_%02d_cmp.img".format(car_label, car_color);
        var dst = GarageUtil::Thumbnail::getPath(garage_id, GarageUtil::Thumbnail::Type::Garage, GarageUtil::Thumbnail::Size::S);

        pdistd::MakeDirectoryForFile(dst);
        var res = pdistd::CopyFile(src, dst);

        return res == pdistd::FileError::OK;
    }
}