














function boot_sequence_academy(context)
{
    boot_sequence_common(context, "academy");
}

function display_sequence_academy(context, pc, initialize_thread)
{
    presents_sequence_common(context);


    while (!boot_state.init_save_data_done)
        yield;

    
    if (boot_state.is_new_game)
    {
        var option = GAME_STATUS.user_profile.option;
        var config = option.key_config.getConfig(0);
        var play_config = config[main::gtengine::InputMode::PLAY_NORMAL];
        var key_assign_play_normal = [KeyConfig::AnalogAssign("SIXAXIS", "PRESS_CIRCLE", "INVALID")];
        
        KeyConfig::SetPlayNormal(key_assign_play_normal);
    }


    while (boot_state.is_new_game && !boot_state.eula_done)
        yield;

    if (boot_state.is_new_game)
    {
        var langs = pdistd::MLocale::getOutOfSystemLanguages();
        if (langs.size > 0)
        {
            LanguageSelectRoot.open(context, langs);
            while (!LanguageSelectRoot.isFinished())
                yield;
        }

        if (!AdjustScreenRoot.isDone())
        {
            AdjustScreenRoot.open(context);
            while (!AdjustScreenRoot.isDone())
                yield;
        }
    }

    while (!boot_state.sequence_done)
        yield;

    
    if (GAME_STATUS.user_profile.option.extra_language != pdistd::Language::SYSTEM &&
        LoginUtil::isOnline())
    {
        log("[" + __FILE__ + ":" + __LINE__ + "]:" + "change grim-language for extra language");
        var request = Grim2.requestSetLanguage(pdiext::MProductInformation::GetGameRegionCode(), 
            pdistd::MLocale::getLanguage(), function(args) { });
        if (Grim2Util::join(context, request, true))
        {
            var language = main::Grim2.decodeResultString(request);
            Grim2.setLanguage(language);
        }
    }

    log("[" + __FILE__ + ":" + __LINE__ + "]:" + "applySaveData");
    yield;
    applySaveData();
}

function start_project_academy(context)
{
    if (TutorialUtil::isBegin("gttop", "introduction") && !AppOpt.defined("skip_tutorial"))
    {
        var fst = pdistd::ReadFile("/game_parameter/gt6/event/tutorial.xml");
        var xml_data = fst["buffer"];
        if (xml_data != nil) {
            var gp_list = GameParameterUtil::parseXML(xml_data);
            var gp = gp_list[0];
            var entry0 = gp.event.entry_set.entries[0];
            entry0.driver_parameter = main::Residence::create_player(false, 0);
            GameParameterUtil::executeEvent(context, gp, GAME_STATUS);
        }
        else
        {
            SequenceUtil::startProject(context, "gtmode");
        }
    }
    else
    {
        TutorialUtil::done("gttop", "introduction");
        if (!TutorialUtil::isDone("gttop", "after_tutorial"))
            TutorialUtil::begin("gttop", "after_tutorial");
        SequenceUtil::startProject(context, "gtmode");
    }
}