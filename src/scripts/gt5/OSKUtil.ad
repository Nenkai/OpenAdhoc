

//---------------------------------------------------------------------------------------
// OSKUtil.ad
//
// Utility module for the console's native On-Screen-Keyboard.
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module OSKUtil
{
    static sResult = nil;
    static sWidget = nil;
    static sEnterCB = nil;
    static sEventLoopLevel = nil;

    function on_osk_event(context, status, text)
    {
        var result = nil;

        switch (status)
        {
            case menu::OSKStatus::LOADED:
                break;
            
            case menu::OSKStatus::FINISHED:
                result = menu::MSystemOSK::end();
                context.leaveEventLoop(sEventLoopLevel);
                break;

            case menu::OSKStatus::UNLOADED:
                break;

            case menu::OSKStatus::EXITGAME:
                menu::MSystemOSK::abort();
                result = menu::MSystemOSK::end();
                break;

            case menu::OSKStatus::DRAWING_BEGIN:
                break;

            case menu::OSKStatus::DRAWING_END:
                break;

            case menu::OSKStatus::INPUT_ENTERED:
                if (sEnterCB != nil)
                    sEnterCB(context, status, text);
                else
                    result = menu::MSystemOSK::end();
                break;

            case menu::OSKStatus::INPUT_CANCELED:
                menu::MSystemOSK::abort();
                result = menu::MSystemOSK::end();
                break;

            case menu::OSKStatus::INPUT_DEVICE_CHANGED:
                break;

            case menu::OSKStatus::DISPLAY_CHANGED:
                break;

            default:
                break;
        }

        if (result != nil)
        {
            if (sWidget == nil)
                ;
            else
                sResult = result;
        }
    }

    function open(context, initial_text, widget, config)
    {
        if (sWidget != nil)
            return nil;

        var config_map = [
            "enter_cb" : nil,
            "password_mode" : false,
            "separate_mode" : false,
            "continuous_mode" : 0,
            "limit_length" : 128,
        ];

        if (config != nil)
        {
            foreach (|var key, var value| in config)
                config_map[key] = value;
        }

        sWidget = widget;
        sEnterCB = config_map["enter_cb"];
        menu::MSystemOSK::open(context, initial_text, widget, on_osk_event, config_map);
        context.enterEventLoop(&sEventLoopLevel);

        var result = nil;
        if (sEnterCB == nil)
        {
            result = sResult;
            sResult = nil;
        }

        sWidget = nil;
        sEnterCB = nil;
        return result;
    }

    function abort()
    {
        if (sWidget != nil)
        {
            menu::MSystemOSK::abort();
        }
    }

    function OSKCallback(context, status)
    {
        if (status == "close")
            closeChatDialog(context);
    }

    static sEventLoop = nil;

    function openChatDialog(context, widget, separate)
    {
        closeChatDialog(context);

        var config = [
            "widget" : widget,
            "separate_mode" : separate,
            "limit_length" : 128,
            "background_trans" : 0f,
            "sync_mode" : false,
            "event_callback" : OSKCallback,
            "no_return" : true,
        ];

        context.openOSK(config);
        sEventLoop = main::menu::EventLoop(context);
        sEventLoop.enter();

        return nil;
    }

    function closeChatDialog(context)
    {
        if (sEventLoop != nil)
        {
            sEventLoop.leave();
            sEventLoop = nil;
        }

        if (context.closeOSK())
            return true;

        return false;
    }
}