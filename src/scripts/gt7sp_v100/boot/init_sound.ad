//---------------------------------------------------------------------------------------
// init_sound.ad
//
// (ä¾‹)
// init_sound.ad
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// function
//---------------------------------------------------------------------------------------

module ::main 
{
    static sound_context;
    static race_sound;
    static drc_preset;
    static sound_runtime_parameter;
    static system_soundeffect;
    static sound_tmnoise_name = "mission_race3";
    static resource_bin_holder = [];

    module SpeakerBits
    {
        static L_R = (1 << 0) | (1 << 1);
        static C = (1 << 2);
        static LS_RS = (1 << 3) | (1 << 4);
        static LB_RB = (1 << 5) | (1 << 6);
        static CB = (1 << 7);
        static LFE = (1 << 8);
    }

    module CarSound
    {
        static sound_id_volume = [
            [1.0, 1.0],
            [1.26, 1.26],
            [1.58, 1.58],
            [2.0, 2.0]
        ];

        class RoadAttributeSoundParameter
        {
            attribute effects;
            
            method __init__(_effects)
            {
                self.effects = _effects;
            }
        }

        class SoundEffectAppearance
        {
            attribute instrument;
            attribute category;
            attribute category_name;

            method __init__(_instrument, _category, _catname)
            {
                self.instrument = _instrument;
                self.category = _category;
                self.category_name = _catname;
            }
        }

        class SoundEffect
        {
            attribute appearances;
            attribute controls;

            method __init__(_appearances, _ctrls)
            {
                self.appearances = _appearances;
                self.controls = _ctrls;
            }

            method set(s)
            {
                self.appearances = s.appearances;
                self.controls = s.controls;
            }
        }

        class SoundEffectInstrument
        {
            attribute type;
            attribute name;
            attribute pitch;
            attribute gain;
            attribute gain_hf;

            method __init__(_type, _name, _pitch, _gain, _gain_hf)
            {
                self.type = _type;
                self.name = _name;
                self.pitch = _pitch;
                self.gain = _gain;
                self.gain_hf = _gain_hf;
            }
        }

        class SoundEffectControl
        {
            attribute graph;
            attribute graph_size;
            attribute type;
            attribute extrapolate;
            attribute input;
            attribute output;

            method __init__(_graph, _graph_size, _type, _extrapolate, _input, _output)
            {
                self.graph = _graph;
                self.graph_size = _graph_size;
                self.type = _type;
                self.extrapolate = _extrapolate;
                self.input = _input;
                self.output = _output;
            }
        }
    
        static road_attribute_sound_parameter = Array(16);
        static tarmac_tire_sound_parameter = Array(4);

        function InitializeRoadAttributeSoundParameter()
        {
            function set_string(refobj, name, str)
            {
                var n = refobj.getArraySize(name);
                var len = str.length;
                for (var i = 0; i < n; i++)
                {
                    var c = i < len ? str.at(i) : 0;
                    refobj.getMember(name, i).setValue(c);
                }
            }

            function setSoundEffectFromAdhoc(pseudo_obj, adhoc_obj)
            {
                var orasp = pseudo_obj;
                var irasp = adhoc_obj;

                ASSERT(orasp.getArraySize ("effects_") == irasp.effects.size);

                for (var ch = 0; ch < orasp.getArraySize("effects_"); ch++)
                {
                    var oe = orasp.getMember("effects_", ch);
                    var ie = irasp.effects[ch];

                    ASSERT(oe.getArraySize ("appearances_") == ie.appearances.size);
                    ASSERT(oe.getArraySize ("controls_") == ie.controls.size);

                    for (var i = 0; i < oe.getArraySize("appearances_"); i++)
                    {
                        var oa = oe.getMember("appearances_", i);
                        var ia = ie.appearances[i];

                        var oi = oa.getMember("instrument_");
                        var ii = ia.instrument;

                        set_string(oi, "name_", ii.name);
                        oi.getMember("flag_").setValue(ii.type);
                        oi.getMember("pitch_").setValue(ii.pitch);
                        oi.getMember("gain_").setValue(ii.gain);
                        oi.getMember("gain_hf_").setValue(ii.gain_hf);
                        set_string(oa, "category_name_", ia.category_name);
                    }

                    for (var cch = 0; cch < oe.getArraySize("controls_"); cch++)
                    {
                        var oc = oe.getMember("controls_", cch);
                        var ic = ie.controls[cch];

                        var og = oc.getMember("graph_");
                        var ig = ic.graph;

                        var n1 = ig.size;
                        var n2 = og.getArraySize("points_");
                        var n = n1 < n2 ? n1 : n2;

                        og.getMember("point_max_").setValue(n - 1);
                        og.getMember("type_").setValue(ic.type);
                        og.getMember("extrapolate_type_").setValue(ic.extrapolate);

                        for (var i = 0; i < n; i++)
                        {
                            var point = og.getMember("points_", i);

                            point.getMember("x_").setValue(ig[i][0]);
                            point.getMember("y_").setValue(ig[i][1]);
                        }

                        oc.getMember("input_").setValue(ic.input);
                        oc.getMember("output_").setValue(ic.output);
                    }
                }
            }

            for (var attr_index = 0; attr_index < road_attribute_sound_parameter.size; attr_index++)
            {
                var rasp = road_attribute_sound_parameter[attr_index];

                for (var ch = 0; ch < rasp.effects.size; ch++)
                {
                    var e = rasp.effects[ch];
                    var app = e.appearances;
                    var ctrls = e.controls;

                    PUT_HERE(app);
                    PUT_HERE(ctrls);

                    gtengine::MRaceSound::setRoadAttributeSoundParameter(attr_index, ch, app, ctrls);
                }
            }

            var csgp = gtengine::MRaceSound::getCarSoundGlobalParameter();
            for (var attr_index = 0; attr_index < tarmac_tire_sound_parameter.size; attr_index++)
            {
                var orasp = csgp.getMember("tarmac_tire_sound_parameter_", attr_index);
                if (orasp == nil)
                    continue;

                var irasp = tarmac_tire_sound_parameter[attr_index];

                setSoundEffectFromAdhoc(orasp, irasp);
            }

        }

        function _min(a, b)
        {
            return a < b ? a : b;
        }

        async function ReflectRoadAttributeSoundParameter()
        {
            function to_string(refobj, name)
            {
                var n = refobj.getArraySize(name);
                var str = "";
                for (var i = 0; i < n; i++)
                {
                    var c = refobj.getMember(name, i).getValue().toByte();
                    if (c == 0)
                        break;
                    str += "%c".format(c);
                }
                return str;
            }

            function setSoundEffectToAdhoc(adhoc_obj, pseudo_obj)
            {
                var orasp = adhoc_obj;
                var irasp = pseudo_obj;

                ASSERT(orasp.effects.size == irasp.getArraySize ("effects_"));

                for (var ch = 0; ch < orasp.effects.size; ch++)
                {
                    var ie = irasp.getMember("effects_", ch);
                    var oe = orasp.effects[ch];

                    for (var i = 0; i < oe.appearances.size; i++)
                    {
                        var ia = ie.getMember("appearances_", i);
                        var oa = oe.appearances[i];

                        {
                            var ii = ia.getMember("instrument_");
                            var oi = oa.instrument;
                            oi.name = to_string(ii, "name_");
                            oi.type = ii.getMember("flag_").getValue();
                            oi.pitch = ii.getMember("pitch_").getValue();
                            oi.gain = ii.getMember("gain_").getValue();
                            oi.gain_hf = ii.getMember("gain_hf_").getValue();
                        }

                        oa.category_name = to_string(ia, "category_name_");
                    }

                    for (var cch = 0; cch < oe.controls.size; cch++)
                    {
                        var ic = ie.getMember("controls_", cch);
                        var oc = oe.controls[cch];

                        var ig = ic.getMember("graph_");
                        var og = oc.graph;

                        var n1 = ig.getArraySize("points_");
                        var n2 = og.size;
                        var n3 = ig.getMember("point_max_").getValue() + 1;
                        var n = _min(n1, _min(n2, n3));

                        oc.graph_size = n;
                        oc.type = ig.getMember("type_").getValue();
                        oc.extrapolate = ig.getMember("extrapolate_type_").getValue();

                        og.resize(n);
                        for (var i = 0; i < n; i++)
                        {
                            var point = ig.getMember("points_", i);

                            og[i][0] = point.getMember("x_").getValue();
                            og[i][1] = point.getMember("y_").getValue();
                        }

                        oc.input = ic.getMember("input_").getValue();
                        oc.output = ic.getMember("output_").getValue();
                    }
                }
            }

            var o = gtengine::MRaceSound::getCarSoundGlobalParameter();

            await AwaitTask(function()
            {
                for (var attr_index = 0; attr_index < road_attribute_sound_parameter.size; attr_index++)
                {
                    var irasp = o.getMember("road_attribute_sound_parameter_", attr_index);
                    var orasp = road_attribute_sound_parameter[attr_index];

                    setSoundEffectToAdhoc(orasp, irasp);
                }
            });

            await AwaitTask(function()
            {
                for (var attr_index = 0; attr_index < tarmac_tire_sound_parameter.size; attr_index++)
                {
                    var irasp = o.getMember("tarmac_tire_sound_parameter_", attr_index);
                    if (irasp == nil)
                        continue; 
                    var orasp = tarmac_tire_sound_parameter[attr_index];

                    setSoundEffectToAdhoc(orasp, irasp);
                }
            });
        }

        // Code in module
        var tmp_graph = [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0]];
        var tmp_control = SoundEffectControl(tmp_graph, tmp_graph.size, 0, 2, 0, 0);
        var tmp_controls = Array(8);
        for (var i = 0; i < tmp_controls.size; i++)
            tmp_controls[i] = tmp_control.getDeepCopy();
        var tmp_appearance = SoundEffectAppearance(SoundEffectInstrument(0, "", 1.0, 1.0, 1.0), 0, "");
        var tmp_appearances = Array(2);
        for (var i = 0; i < tmp_appearances.size; i++)
            tmp_appearances[i] = tmp_appearance.getDeepCopy();
        var tmp_soundeffect = SoundEffect(tmp_appearances, tmp_controls);
        var tmp_soundeffect_list = [tmp_soundeffect.getDeepCopy(), tmp_soundeffect.getDeepCopy(), tmp_soundeffect.getDeepCopy()];

        var template = RoadAttributeSoundParameter(tmp_soundeffect_list);
        for (var i = 0; i < road_attribute_sound_parameter.size; i++)
            road_attribute_sound_parameter[i] = template.getDeepCopy();

        for (var i = 0; i < tarmac_tire_sound_parameter.size; i++)
            tarmac_tire_sound_parameter[i] = template.getDeepCopy();

    }

    function dbtoa(db)
    {
        return 10.0 ** (db.toFloat() / 20.0);
    }
    
    function atodb_round(x)
    {
        return x <= 0.0 ? -120.0 : Math::round(Math::log10(x) * 20.0 * 10.0) / 10.0;
    }
    
    async function LoadSoundEffectMasterParameterJSON(path)
    {
        var results = await pdistd::ReadFile(path);
        if (results["result"] != 0)
            return 1;
    
        var jsondata = results["buffer"];
        var category_count = gtengine::MRaceSound::getCategoryCount();
        var category_list = Array(category_count);
    
        for (var i = 0; i < category_count; i++)
            category_list[i] = gtengine::MRaceSound::getCategoryName(i);
    
        var json_map = await pdistd::MPjson::Decode(jsondata);
        if (json_map == nil)
            return 2;
    
        var view_names = [
            "VIEW_REPLAY",
            "VIEW_DRIVER_TARGET_CAR",
            "VIEW_DRIVER_OTHER_CAR",
            "VIEW_CHASE_TARGET_CAR",
            "VIEW_CHASE_OTHER_CAR",
            "VIEW_ONBOARD_TARGET_CAR",
            "VIEW_ONBOARD_OTHER_CAR",
            "VIEW_COCKPIT_TARGET_CAR",
            "VIEW_COCKPIT_OTHER_CAR",
        ];
    
        await AwaitTask(function() 
        {
            var master = gtengine::MRaceSound::getGlobalSoundEffectMasterParameter();
            var views = json_map["views"];
            foreach (var view_map in views)
            {
                var view_name = view_map["name"];
                var view_id = view_names.indexOf(view_name);
                var view_row = master.getMember("view_rows", view_id);
                
                if (view_row == nil)
                {
                    PUT_HERE("%{view_id} : %{view_name} is out of range");
                    continue;
                }
            
                var sources = view_map["sources"];
                foreach (var source_map in sources)
                {
                    var source_name = source_map["name"];
                    var source_id = category_list.indexOf(source_name);
                    if (source_id < 0)
                    {
                        source_id = gtengine::MRaceSound::getCategoryID(source_name);
                        PUT_HERE("new ID: %{source_name} -  %{source_id}");
                    }
                
                    var col = view_row.getMember("columns", source_id);
                    foreach (var prop in source_map)
                    {
                        var pname = prop[0];
                        if (col.getMember(pname) == nil)
                        {
                            if (pname != "name" && pname != "REM")
                                PUT_HERE("Unknown property '%{pname}'");
                        
                            continue;
                        }
                    
                        var nd = col.getArraySize(pname);
                        if (nd > 0)
                        {
                            var a = prop[1];
                            if (a.isInstanceOf(Array))
                            {
                                var n = nd > a.size ? nd : a.size;    
                                for (var i = 0; i < n; i++)
                                {
                                    var member = col.getMember(pname, i);
                                    member.setValue(a[i]);
                                }                        
                            }
                            else if (a.isInstanceOf(String))
                            {
                                var n = nd - 1 < a.size ? nd - 1 : a.size;
                                for (var i = 0; i < n; i++)
                                {
                                    var member = col.getMember(pname, i);
                                    member.setValue(a.at(i));
                                } 

                                var member = col.getMember(pname, n);
                                member.setValue(0);
                            }
                            else
                            {
                                PUT_HERE("[%{view_id},%{source_id}] : '%{pname}' is array, but input is not array (%{a})");
                            }
                        }
                        else
                        {
                            var v = prop[1];
                            switch (pname)
                            {
                                case "gain":
                                case "gain_hf":
                                case "direct_gain":
                                case "direct_gain_hf":
                                case "aux_gain":
                                case "aux_gain_hf":
                                case "cone_outer_gain":
                                case "cone_outer_gain_hf":
                                case "max_gain":
                                case "priority":
                                    v = dbtoa(v);
                            }
                        
                            var member = col.getMember(pname);
                            member.setValue(v);
                        }
                    }
                }
            }
        });
    
        return 0;
    }
}

async function init_bgm_context()
{
    AwaitTask(function() 
    {
        var bgmlib_name = "GT7SP.lib";

        var branch = main::GetVersionBranch();
        if (branch == "demo" || branch == "beta")
            bgmlib_name = "DEMO.lib";

        var bgmlib_opt = main::AppOpt["bgmlib"];
        if (GetVersionBuild() == "debug" && bgmlib_opt != nil)
            bgmlib_name = bgmlib_opt;

        var bgmlib_path = "/sound_gt/library/" + bgmlib_name;
        var result = pdistd::MMusic::loadBgmLibraryFile(bgmlib_path);
        if (!result)
            BREAK_HERE("Load failed: " + bgmlib_path);
    });

    var st = STStructure("Impl");
    st.define("playing_code", STString(32));
    st.define("next_play_code", STString(32));
    st.define("playing_title", STString(384 + 1));
    st.define("playing_artist", STString(384 + 1));
    st.define("repeat", STByte());
    st.define("paused", STByte());
    st.define("playing_scene", STByte());
    st.define("sysbgm_enable", STByte());
    st.define("playing_sysbgm", STByte());
    st.define("bgm_last_play_time", STLong());
    st.define("bgm_cue_counter", STInt());
    st.define("bgm_interval", STFloat());
    st.define("default_index", STInt());
    main::SoundUtil::context = st();
    main::SoundUtil::context.playing_code = "";
    main::SoundUtil::context.next_play_code = "";
    main::SoundUtil::context.repeat = main::SoundUtil::REPEAT_OFF;
    main::SoundUtil::context.paused = false;
    main::SoundUtil::context.playing_scene = -1;
    main::SoundUtil::context.sysbgm_enable = false;
    main::SoundUtil::context.playing_sysbgm = -1;
    main::SoundUtil::context.bgm_last_play_time = 0L;
    main::SoundUtil::context.bgm_cue_counter = 0;
    main::SoundUtil::context.bgm_interval = 2.0;
    main::SoundUtil::context.default_index = 0;

    main::SoundUtil::bgm_group_info = Map();
    main::SoundUtil::mmusic = nil;
    main::SoundUtil::stream_mmusic = main::sound.stream;
    main::SoundUtil::sysbgm_mmusic = pdistd::MMusic();
    main::SoundUtil::sysbgm_mmusic.load("system");
    main::SoundUtil::stream_player = pdiext::MStreamPlayer();
    main::SoundUtil::bgm_callback = Array();
    var music = main::SoundUtil::stream_mmusic;
    music.load("pcm");
    music.volume = 1.0;
    music.number = -1;
    music.repeat = false;
    main::sound.default = music;
}

async function initSound()
{
    TASK_LOG("initSound");

    init_bgm_context();

    pdistd::MDynRes::setInt32("SoundDebugMode", main::AppOpt.defined("sounddebug") ? main::AppOpt["sounddebug"].toInt() : 0);

    main::sound_runtime_parameter = NewSoundRuntimeParameter();

    var demo_boost = false;
    main::sound_context = pdiext::MSoundContext(1024, 128);

    main::drc_preset = 
    [
        [
            'bgm_master_volume' : dbtoa(-9.0 + (demo_boost ? 7.0 : 0.0)),
            'menu_se_master_volume' : dbtoa(0.0 + (demo_boost ? 3.0 : 0.0)),
            'music_player_master_volume' : dbtoa(0.0 + (demo_boost ? 3.0 : 0.0)),
            'movie_master_volume' : dbtoa(0.0 + (demo_boost ? 3.0 : 0.0)),
            'na_master_volume' : dbtoa(0.0 + (demo_boost ? 3.0 : 0.0)),

            'race_bgm_gain' : dbtoa(0.0),
            'race_se_gain' : dbtoa(-1.5 + (demo_boost ? 7.0 : 0.0)),
            'replay_bgm_gain' : dbtoa(0.0),
            'replay_se_gain' : dbtoa(-1.5 + (demo_boost ? 7.0 : 0.0)),
        ],
        [   
            'bgm_master_volume' : dbtoa(-6.2),
            'menu_se_master_volume' : dbtoa(0.0),
            'music_player_master_volume' : dbtoa(0.0),
            'movie_master_volume' : dbtoa(0.0),
            'na_master_volume' : dbtoa(0.0),

            'race_bgm_gain' : dbtoa(0.0),
            'race_se_gain' : dbtoa(-1.5),
            'replay_bgm_gain' : dbtoa(0.0),
            'replay_se_gain' : dbtoa(-1.5),
        ],
        [   
            'bgm_master_volume' : dbtoa(-6.2),
            'menu_se_master_volume' : dbtoa(0.0),
            'music_player_master_volume' : dbtoa(0.0),
            'movie_master_volume' : dbtoa(0.0),
            'na_master_volume' : dbtoa(0.0),

            'race_bgm_gain' : dbtoa(0.0),
            'race_se_gain' : dbtoa(-1.5),
            'replay_bgm_gain' : dbtoa(0.0),
            'replay_se_gain' : dbtoa(-1.5),
        ]
    ];

    var ctx = main::sound_context;
    ctx.reverb_master = 1.0;
    ctx.late_reverb_master = dbtoa(-12.0);
    ctx.interior_pan_distance = 2.5;
    ctx.sound_driver_volume_scale = dbtoa(-20.0);
    ctx.reference_sound_level = -100.0;
    ctx.distance_filter_type = 12;
    ctx.object_audio_gain = dbtoa(20.0);

    RaceInterface.SoundContext = sound_context;

    function load_resource_bin(path, name)
    {
        var results = pdistd::ReadFile(path);
        if (results["result"] == 0)
        {
            var blob = results["buffer"];
            var result = pdiext::MSoundContext::addResource(blob, name);
            if (!result)
                PUT_HERE("load_resource_bin(%{path}, %{name}): addResource(%{name}) failed(%{result})");
            
            if (result)
                resource_bin_holder.push(blob);
        }
        else
        {
            PUT_HERE("load_resource_bin(%{path}, %{name}): ReadFile failed");
        }
    }

    AwaitTask(function()
    {
        main::race_sound = gtengine::MRaceSound();

        system_soundeffect = [pdiext::MSoundEffect("/sound_gt/se/gtssys.sxd")];

        var result = pdiext::MSoundContext::loadSndxIRFile("/sound_gt/etc/world_aux0.irf", "IR_Reverb_aux0");
        PUT_HERE("loadSndxIRFile: %{result}");

        var irf_list = [
            "int_normal_01",
            "int_normal_02",
            "int_normal_03",
            "int_normal_04",
            "int_normal_05",
            "int_normal_06",
            "ext_normal_01",
            "ext_normal_02",
            "ext_normal_03",
        ];

        foreach (var i in irf_list)
        {
            load_resource_bin("/sound_gt/etc/" + i + ".irf", i);
        }
    });
    
    RaceInterface.RaceSound = race_sound;
    main::sound.code_map = [
        "ok" : "decide_16",
        "cancel" : "cancel_09",
        "cursor" : "cursor_07",
        "ok_next" : "decide_16",
        "ok_mid" : "decide_16",
        "disable" : "disable_10",
        "return" : "return_01",
        "overlay_open" : "decide_16",
        "overlay_close" : "cancel_09",
        "popup_open" : "popupmenu_op_01",
        "popup_close" : "popupmenu_close_01",
        "tab_switch" : "tab_switch_01",
        "checkbox" : "checkbox_01",
        "param" : "param_03",
        "system_message" : "system_message_01",
        "like_on" : "like_on_01",
        "like_off" : "like_off_01",
        "shutter" : "shutter_01",
        "error" : "error_01",
        "credit" : "decide_02",
        "chat_send" : "disable_09",
        "chat_recv" : "tab_switch_02",
        "chat_sys" : "system_message_02",
        "correct" : "correct_03",
        "non_correct" : "non_correct_01",
    ];

    var results = await pdistd::ReadFile("sound_gt/etc/se_master.pmf");
    if (results["result"] == 0)
    {
        var master = gtengine::MRaceSound::getGlobalSoundEffectMasterParameter();
        var bytedata = results["buffer"];
        master.setPmfByteData(bytedata);
    }

    results = await pdistd::ReadFile("sound_gt/etc/car_sound_gt7.pmf");
    if (results["result"] == 0)
    {
        var master = gtengine::MRaceSound::getCarSoundGlobalParameter();
        var bytedata = results["buffer"];
        master.setPmfByteData(bytedata);
    }

    main::CarSound::ReflectRoadAttributeSoundParameter();

    var result = await LoadSoundEffectMasterParameterJSON("sound_gt/etc/gts_mix.json");
    PUT_HERE("Load gts_mix.json (%{result})");
    if (result != 0)
        BREAK_HERE("gts_mix.json parse error (%0)".format(result));
    
    gtengine::MRaceSound::initializeGlobalParameter();

    PUT_HERE(GetVersionEnvironment());

    if (GetVersionEnvironment().find("develop") < 0)
        main::CarSound.clearStatic();

    main::SoundUtil::SetSystemBGMEnable(nil, true);
    SoundUtil::Initialize();
}

function CreateSoundRuntimeParameterStructure()
{
    var st = STStructure("Impl");

    st.define("menu_bgm", STByte());
    st.define("menu_se", STByte());
    st.define("race_bgm", STByte());
    st.define("race_se", STByte());
    st.define("replay_bgm", STByte());
    st.define("replay_se", STByte());
    st.define("sound_dynamic_range", STByte());


    st.define("menu_bgm_volume", STUByte());
    st.define("menu_se_volume", STUByte());
    st.define("race_bgm_volume", STUByte());
    st.define("race_se_volume", STUByte());
    st.define("replay_bgm_volume", STUByte());
    st.define("replay_se_volume", STUByte());
    st.define("user_bgm_volume", STUByte());


    st.define("menu_bgm_gain", STFloat());
    st.define("menu_se_gain", STFloat());
    st.define("race_bgm_gain", STFloat());
    st.define("race_se_gain", STFloat());
    st.define("replay_bgm_gain", STFloat());
    st.define("replay_se_gain", STFloat());
    st.define("user_bgm_gain", STFloat());
    st.define("music_player_gain", STFloat());
    st.define("movie_gain", STFloat());
    st.define("na_gain", STFloat());
    st.define("jingle_gain", STFloat());
    st.define("carstart_gain", STFloat());


    st.define("scene", STByte());
    return st;
}

function InitializeSoundRuntimeParameter(p)
{
    p.menu_bgm = 1;
    p.menu_se = 1;
    p.race_bgm = 1;
    p.race_se = 1;
    p.replay_bgm = 1;
    p.replay_se = 1;
    p.sound_dynamic_range = 0;

    p.menu_bgm_volume = 100;
    p.menu_se_volume = 100;
    p.race_bgm_volume = 100;
    p.race_se_volume = 100;
    p.replay_bgm_volume = 100;
    p.replay_se_volume = 100;
    p.user_bgm_volume = 100;

    p.menu_bgm_gain = 1.0;
    p.menu_se_gain = 1.0;
    p.race_bgm_gain = 1.0;
    p.race_se_gain = 1.0;
    p.replay_bgm_gain = 1.0;
    p.replay_se_gain = 1.0;
    p.user_bgm_gain = 1.0;
    p.music_player_gain = 1.0;
    p.movie_gain = 1.0;
    p.na_gain = 1.0;
    p.jingle_gain = 1.0;
    p.carstart_gain = dbtoa(-3.0);

    p.scene = -1;
}

function NewSoundRuntimeParameter()
{
    var st = CreateSoundRuntimeParameterStructure();
    var instance = st();
    InitializeSoundRuntimeParameter(instance);
    return instance;
}