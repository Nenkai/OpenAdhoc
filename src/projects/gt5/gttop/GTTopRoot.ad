













module GTTopRoot
{
    #include "TopNews.ad"

    hidden.visible = false;

    static suspender;
    static suspend_lock = false;
    static wait_autodemo_thread;
    static leave_detect_time = 10.0; // 10 Seconds

    method open(context)
    {
        SequenceUtil::startPage(context, self);
    }

    method onLoad(context)
    {
        main::ORG.applyGameResolution();
        Upper::WED.visible = false;
    }

    method onInitialize(context)
    {
        context.cursor_visible = false;
        
        ROOT::ButtonHelpGT5.set(context, [
            [ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "Component", "Enter")],
            [ButtonHelpGT5.getCancelButtonName(), context.translate(ROOT, "Component", "Cancel")],
        ]);

        setupSceneFace(context);

        ActorUtil::ResetInterpolators(Upper, false, true);
        ActorUtil::ResetInterpolators(Lower, false, true);

        Menus::MainMenu.createMainMenu(context);
        Menus::MainMenu::ListBox.focus_index = PROJECT.history['GTTopRoot::FocusIndex'];
        PROJECT.history['GTTopRoot::FocusIndex'] = 0;

        welcome_message::FadeActor.reset();
        welcome_message.visible = false;

        News.initialize();
        News.off(context);

        if (!EventPresentUtil::getWelcomeMessageFlag() || GAME_STATUS.user_profile.option.kiosk_mode)
            LeaveDetectUtil::begin(context, ROOT.leave_detect_time, self, onLeaveDetect, onActivateDetect);

        LeaveDetectUtil::suspend(context);
        Grim2Util::startUpdater();

        SoundUtil::SetupSound(SoundUtil::SCENE_MENU);
        SoundUtil::SetSystemBGMEnable(context, true);
        SceneFace.setSoundFader(false);

        var time = main::pdistd::MTime::getCurrentTime();
        var code = (time.month == 12 && time.day >= 23 && time.day <= 25) ? "christmas" : "menu";
        SoundUtil::MenuBGMCrossfadeGroup(code, 0.0, 3.0);
        //setFrameInterval(context, 2);

        context.pushEvent(menu::MFunctionEvent(postInitialize, context));
        BalloonTip.visible = false;
        
        var news_enable = LoginUtil::isOnline() && Grim2Util::News::isEnable();
        PopupNews.visible = news_enable;
        PopupNews::ParallelActor.out = !news_enable;
        PopupNews.initialize(context);
    }

    method postInitialize(context)
    {
        LeaveDetectUtil::suspend(context);

        /*
        if (pdistd::MNetworkInterface::isUp() && !GAME_STATUS.config.no_request_NP_sign_in)
            LoginUtil::tryLogin(context);
        */

        if (EventPresentUtil::getWelcomeMessageFlag() && !GAME_STATUS.user_profile.option.kiosk_mode)
        {
            welcome_message.visible = true;
            welcome_message::FadeActor.start();

            EventPresentUtil::setWelcomeMessageFlag();
            GAME_STATUS.user_profile.context.need_save = SaveDataUtilGT5::STATUSCODE::NEED_SAVE;
        }

        var res = SaveDataUtilGT5::checkSaveEveryWhere(context);
        if (!res)
            GAME_STATUS.user_profile.context.need_save == SaveDataUtilGT5::STATUSCODE::CHECK_SAVE; // BUG?
        else
            GAME_STATUS.user_profile.context.need_save = SaveDataUtilGT5::STATUSCODE::NO_NEED;

        context.cursor_visible = true;
        ROOT.setFocus(Menus::MainMenu::ListBox);
        
        LeaveDetectUtil::resume(context);
    }

    method onPageInEnd(context)
    {
        BalloonTip.visible = true;
        
        var focus_w = ROOT.getFocusWidget();
        context.pushEvent(menu::MFocusEnterEvent(context, focus_w));

        LeaveDetectUtil::resume(context);
    }

    method onFinalize(context)
    {
        News2.clearCallback();
        LeaveDetectUtil::end(context);

        end_wait_autodemo();
        Menus::MainMenu::ListBox.setItemCount(0);
        SceneFaceUtil::SetWaitSceneFace(context, nil);
        Grim2Util::stopUpdater();
        //setFrameInterval(context, 1);
    }

    method onCancel(context)
    {
        LeaveDetectUtil::suspend(context);
        main::sound.play("cancel");

        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "DO_YOU_START_DEMO"));
        if (res)
            goAutoDemo(context);

        LeaveDetectUtil::resume(context);
        return EVENTRESULT_FILTER;
    }

    function setFrameInterval(context, val)
    {
        menu::FrameInterval = val;
        context.getUpdateContext().cursor_speed_ratio = val;
    }

    method wait_autodemo(context)
    {
        for (;;)
        {
            var autodemo_sec = main::GAME_STATUS.user_profile.option.autodemo_start_interval;
            var last_input = context.time_after_last_input - ROOT.leave_detect_time;

            if (autodemo_sec > 0 && last_input > autodemo_sec)
            {
                if (LoginUtil::isOnline())
                {
                    if (News::sNewsObserver == News::OBS_Enum::NEWS_OBS_SLEEP)
                        News::sNewsObserver = News::OBS_Enum::NEWS_OBS_WAIT_NEWS;
                }
                else
                    News::sNewsObserver = News::OBS_Enum::NEWS_OBS_END_NEWS;

                if (News::OBS_Enum::NEWS_OBS_END_NEWS)
                    goAutoDemo(context);
            }

            Thread::Sleep(0.1);
        }
    }

    method start_wait_autodemo(context)
    {
        self.wait_autodemo_thread = Thread(wait_autodemo, context);
        self.wait_autodemo_thread.start();

        return self.wait_autodemo_thread;
    }

    method end_wait_autodemo(context)
    {
        if (self.wait_autodemo_thread != nil)
        {
            self.wait_autodemo_thread.terminate();
            self.wait_autodemo_thread = nil;
        }
    }

    attribute prev_focus_;

    method onLeaveDetect(context)
    {
        PopupNews::ParallelActor.out = true;
        Menus::MainMenu::ParallelActor.out = true;
        Menus::SideMenu::ParallelActor.out = true;
        ButtonHelpGT5.hide();

        context.cursor_visible = false;
        News.on(context);

        start_wait_autodemo(context);

        ROOT.prev_focus_ = ROOT.getFocusWidget();
        ROOT.can_focus = true;
        ROOT.setFocus(ROOT);
    }

    method onActivateDetect(context)
    {
        if (LoginUtil::isOnline() && Grim2Util::News::isEnable())
        {
            PopupNews.visible = true;
            PopupNews::ParallelActor.out = false;
        }
        else
        {
            PopupNews.visible = false;
        }

        Menus::MainMenu::ParallelActor.out = false;
        Menus::SideMenu::ParallelActor.out = false;
        ButtonHelpGT5.appear();

        context.cursor_visible = true;
        News.off(context);

        end_wait_autodemo(context);

        ROOT.can_focus = false;
        ROOT.setFocus(ROOT.prev_focus_);
        ROOT.prev_focus_ = nil;
    }

    method goAutoDemo(context)
    {
        SequenceUtil::startProject(context, "leavedemo");
    }

    function setupSceneFace(context)
    {
        var cp = GAME_STATUS.user_profile.garage.getRidingCar();
        var garage_empty = !GAME_STATUS.user_profile.game_flags.getFlag("USER_STATUS", "GET_FIRST_CAR") ||
                            GAME_STATUS.user_profile.garage.riding_id < 0;

        var use_favorite_car = main::GAME_STATUS.user_profile.option.limit_favorite_car_only && 
                               main::GAME_STATUS.user_profile.option.hasFavoriteCar();

        var scene_alias;
        if (!GAME_STATUS.user_profile.option.kiosk_mode)
        {
            if (garage_empty)
                scene_alias = "grandtop_intro";
            else
            {
                if (!GAME_STATUS.user_profile.game_flags.getFlag("TOP_SCENES", "allavt_topdemo"))
                {
                    scene_alias = "allavt_topdemo";
                    GAME_STATUS.user_profile.game_flags.setFlag("TOP_SCENES", "allavt_topdemo", true);
                }
            }
        }

        if (GetVersionBranch() == "demo")
        {
            scene_alias = nil;
            if (GAME_STATUS.user_profile.option.demo_version_code == "wed")
                scene_alias = "top_wed_sangimi";

            if (GAME_STATUS.user_profile.option.demo_version_code == "gps")
                scene_alias = "top_garage";

            if (GAME_STATUS.user_profile.option.demo_version_code == "tms" ||
                GAME_STATUS.user_profile.option.demo_version_code == "scion" ||
                GAME_STATUS.user_profile.option.demo_version_code == "86gp_final")
            {
                var scene_list = [
                    "top_garage",
                    "top_bern",
                    "top_campo",
                    "top_galgano",
                    "top_luzern",
                    "top_sangimi",
                    "top_shirakawa",
                ];

                var ref_scene_index = &PROJECT.history['GTTopRoot::SceneIndex'];
                if (scene_list.size <= *ref_scene_index)
                    *ref_scene_index = 0;

                var scene_alias = scene_list[*ref_scene_index];
                *ref_scene_index++;
            }
        }
        else if (GetVersionBranch() == "gps")
        {
            scene_alias = "top_garage";
        }

        if (scene_alias == nil)
        {
            var scene_list = [];
            if (!use_favorite_car)
            {
                var top_scenes_all = [
                    "top_redbullhangar7",
                    "top_shirakawa",
                    "top_GTR_engine",
                    "photo_galgano",
                    "top_ahrweiler01",
                    "top_DarkHangar01",
                    "top_new_nur",
                    "top_DarkSmoke_01",
                    "top_new_bonn",
                    "top_kiritooshi_new",
                    "top_whiteTown",
                    "top_ahrweiler02",
                    "top_ahrweiler03",
                    "top_shorenin",
                    "top_bern",
                    "photo_luzern",
                    "top_campo",
                    "top_sangimi",
                    "tourDeItalia_bern",
                    "tourDeItalia_Luzern",
                    "tourDeItalia_Siena",
                    "tourDeItalia_Sangimi",
                    "tourDeItalia_galgano",
                    "X-1challenge_intro",
                    "NASCAR_school_intro",
                    "loeb_Rally_Challenge",
                    "Topgear_intro",
                    "X1_delivery",
                    "allavt_topdemo",
                ];

                if (Garage2Util::Premium::getCount() > 0)
                    top_scenes_all += ["top_garage", "top_garage", "top_garage"];

                foreach (var scene in top_scenes_all)
                {
                    if (GAME_STATUS.user_profile.game_flags.getFlag("TOP_SCENES", scene))   
                        scene_list.push(scene);
                }
            }
            else
            {
                scene_list = [
                    "top_redbullhangar7",
                    "top_shirakawa",
                    "photo_galgano",
                    "top_ahrweiler01",
                    "top_new_nur",
                    "top_new_bonn",
                    "top_kiritooshi_new",
                    "top_ahrweiler02",
                    "top_ahrweiler03",
                    "top_shorenin",
                    "top_bern",
                    "photo_luzern",
                    "top_campo",
                    "top_sangimi",
                    "top_garage",
                ];
            }

            if (scene_list.size > 0)
            {
                var n = scene_list.size;
                var sequence = Array(n);

                for (var i = 0; i < n; i++)
                    sequence[i] = i;

                var time = pdistd::MTime::getCurrentTime();
                var sec = time.getBySecond();
                sec -= 60 * 60 * 5;
                time.setBySecond(sec);

                var seed = time.day;
                sequence.randomShuffle(seed);

                var index = GAME_STATUS.user_profile.context.top_scene_index;
                index = (index + 1) % n;
                GAME_STATUS.user_profile.context.top_scene_index = index;
                scene_alias = scene_list[sequence[index]];
            }
            else
            {
                scene_alias = "grandtop_intro";
            }
        }

        if (use_favorite_car)
        {
            var favorite_cars = main::GAME_STATUS.user_profile.option.favorite_cars;
            var cars = [];

            for (var i = 0; i < favorite_cars.size; i++)
            {
                var car_code = favorite_cars[i];
                if (car_code == main::gtengine::MSpecDB::NO_CODE64)
                    ;
                else
                    cars.push(car_code);
            }

            cars.randomShuffle();
            var i = pdistd::MRandom::GetValue(0, cars.size);
            var car_code = cars[i];
            var col_num = gtengine::MSpecDB::getCarVariation(car_code);
            var cp = gtengine::MCarParameter(car_code);
            cp.color = pdistd::MRandom::GetValue(0, col_num);
        }
        else
        {
            if (scene_alias == "top_garage")
            {
                var cars = Garage2Util::Premium::RandomPickup(1);
                var cpp = cars[0];
                var cp = cpp.getCP();
                var car_label = cp.getCarLabel();

                if (car_label.beginWith("nascar_"))
                    scene_alias = "top_garage_NASCAR";
            }
        }

        var dp = GAME_STATUS.user_profile.residence.getPlayer(0);
        SceneFaceUtil::loadScene(SceneFace, scene_alias, cp, dp, false);

        if (scene_alias == "color_select")
        {
            var xes_scenes = [
                "color_select_white",
                "color_select_day",
                "color_select_morning",
                "color_select_night",
            ];

            var i = pdistd::MRandom::GetValue(0, xes_scenes.size);
            SceneFaceUtil::loadScene(SceneFace, xes_scenes[i]);
        }

        SceneFace.execCommand("setsounddirectparam 0");
    }

    function unloadSceneFace(context)
    {
        ROOT.SceneFace.execCommand("clearAllModel");
        context.wait(5.0);
    }

    function inquiryOnlineRaceEnable(context)
    {
        LeaveDetectUtil::suspend(context);

        if (!Grim2Util::OnlineRace::isEnable())
        {
            sound.play("disable");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(PROJECT, "OnlineMessage", "THIS_CANNOT_BE_SELECTED"));
            LeaveDetectUtil::resume(context);
            return false;
        }

        LeaveDetectUtil::resume(context);
        return true;
    }

    function begin_osd(context)
    {

    }

    function end_osd(context)
    {

    }

    function callMakeSureLogin(context)
    {
        LeaveDetectUtil::suspend(context);

        |var result, var ignore_error| = LoginUtil::makeSureLogin(context, begin_osd, end_osd);
        if (!result)
        {
            LeaveDetectUtil::resume(context);
            return false;
        }

        if (!PROJECT::ConfirmPatch(context, ROOT))
        {
            LeaveDetectUtil::resume(context);
            return false;
        }

        LeaveDetectUtil::resume(context);
        return true;
    }

    function executeGameParameter(context, gp)
    {
        var cp = GAME_STATUS.user_profile.garage.getRidingCar();
        var dp = GAME_STATUS.user_profile.residence.getPlayer(0);
        
        GameParameterUtil::begin();
        GameParameterUtil::execute(context, gp, [cp], [dp]);
        GameParameterUtil::end();
    }

    // Mode Selection
    function onArcade(context)
    {
        sound.play("ok");

        Menus::MainMenu.saveFocusPosition();
        PROJECT.history['LastPageName'] = ROOT.name;
        SequenceUtil::startProject(context, "arcade", "gttop");
        return EVENTRESULT_FILTER;
    }

    function onGTMode(context)
    {
        if (!GAME_STATUS.user_profile.option.visible_icon_gtmode)
        {
            sound.play("disable");
            var msg = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
            return EVENTRESULT_FILTER;
        }

        sound.play("ok");

        if (pdistd::MNetworkInterface::isUp() && !GAME_STATUS.config.no_request_NP_sign_in)
            LoginUtil::tryLogin(context);

        Menus::MainMenu.saveFocusPosition();
        PROJECT.history['LastPageName'] = ROOT.name;
        SequenceUtil::startProject(context, "gtmode", "gttop");
    }

    // No login check
    function onGTMode2(context)
    {
        if (!GAME_STATUS.user_profile.option.visible_icon_gtmode)
        {
            var msg = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
            sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        sound.play("ok");

        Menus::MainMenu.saveFocusPosition();
        PROJECT.history['LastPageName'] = ROOT.name;
        SequenceUtil::startProject(context, "gtmode", "");
    }

    function onRanking(context)
    {
        sound.play("ok");
    }

    function onTheater(context)
    {
        sound.play("ok");
        Menus::MainMenu.saveFocusPosition();
    }

    function onGTTV(context)
    {
        if (!GAME_STATUS.user_profile.option.visible_icon_gttv)
        {
            var msg = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
            sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        sound.play("ok");

        var ignore_error = true;
        var network_is_up = pdistd::MNetworkInterface::isUp();

        if (network_is_up)
        {
            |var result, ignore_error| = LoginUtil::makeSureLogin(context, begin_osd, end_osd);
            if (result)
            {
                if (!ConfirmPatch(context, ROOT, nil))
                    return;

                if (ignore_error)
                {
                    if (Grim2Util::TV::isEnable())
                        ;
                }
            }
        }

        CursorProject::GTLogoTransition.sMessage = context.translate(ROOT, "GTTV", "WAIT_FOR_UPDATE");
        Menus::MainMenu.saveFocusPosition();
        PROJECT.history['LastPageName'] = ROOT.name;
        SequenceUtil::startProject(context, "gttv", "gttop");
    }

    // gttv2 (offline version)
    function onGTTV2(context)
    {
        if (!GAME_STATUS.user_profile.option.visible_icon_gttv)
        {
            var msg = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
            sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        sound.play("ok");

        if (pdistd::MNetworkInterface::isUp())
            LoginUtil::tryLogin(context);

        Menus::MainMenu.saveFocusPosition();
        PROJECT.history['LastPageName'] = ROOT.name;
        SequenceUtil::startProject(context, "gttv2", "gttop");
    }

    function onCrsEdit(context)
    {
        if (!GAME_STATUS.user_profile.option.visible_icon_coursemaker)
        {
            var msg = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
            sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        sound.play("ok");
        Menus::MainMenu.saveFocusPosition();

        var course_code = gtengine::MSpecDB::getCourseCode("template01");
        var cp = gtengine::MCarParameter("impreza_wrc_08");
        GAME_STATUS.user_profile.context.setArcadeCar(cp);

        GameParameterUtil::begin();
        var gp = GameParameterUtil::createSingleRace(course_code, 1, 1);
        gp.event.game_mode = gtengine::GameMode::COURSE_EDIT;
        gp.event.race_parameter.start_type = gtengine::StartType::GRID;
        GameParameterUtil::executeArcade(context, gp, GAME_STATUS);
        GameParameterUtil::end();
    }

    function onPhotoTravel(context)
    {
        if (GetVersionBranch() == "demo" && GAME_STATUS.user_profile.option.demo_version_code == "wed")
        {
            sound.play("ok");
            main::GameSequence::setArgumentObject("wed_sangimi");
            Menus::MainMenu.saveFocusPosition();
            PROJECT.history['LastPageName'] = ROOT.name;
            SequenceUtil::startProject(context, "photo", "gttop");
        }
        else
        {
            sound.play("disable");
        }
    }

    function onGpsReplay(context)
    {
        sound.play("ok");
        Menus::MainMenu.saveFocusPosition();
        PROJECT.history['LastPageName'] = ROOT.name;
        SequenceUtil::startProject(context, "gps_replay", "gttop");
        return EVENTRESULT_FILTER;
    }

    static LOUNGE_MODE_OPEN_LOBBY = 0;
    static LOUNGE_MODE_MY_LOUNGE = 1;
    static LOUNGE_MODE_FRIEND_LOUNGE = 2;
    static LOUNGE_MODE_EDIT_MY_LOUNGE = 3;
    static LOUNGE_MODE_LAN_BATTLE = 4;
    static LOUNGE_MODE_QUICK_MATCH = 5;
    static LOUNGE_MODE_EDIT_GUEST_NAME = 99;
    static LOUNGE_MODE_EDIT_GUEST_REGION = 98;
    static sSpecialInputMode = LOUNGE_MODE_EDIT_GUEST_NAME;

    function cbInitItemForLoungeSelect(context, item, data)
    {
        item.label.text = data[1];
    }

    method onTextInput(context, event)
    {
        if (event.text != "")
        {
            GAME_STATUS.user_profile.option.special_guest = true;
            if (sSpecialInputMode == LOUNGE_MODE_EDIT_GUEST_NAME)
                GAME_STATUS.user_profile.option.special_guest_name = event.text;
            else if (sSpecialInputMode == LOUNGE_MODE_EDIT_GUEST_REGION)
                GAME_STATUS.user_profile.option.special_guest_region = event.text;

            SaveDataUtilGT5::saveEveryWhere(context);
        }
    }

    function onLounge(context)
    {
        sound.play("ok");

        var list = [
            [LOUNGE_MODE_QUICK_MATCH, "Quick Match"],
            [LOUNGE_MODE_OPEN_LOBBY, "Open Lobby"],
            [LOUNGE_MODE_LAN_BATTLE, "LAN Battle"],
            [LOUNGE_MODE_EDIT_GUEST_NAME, "Edit Name" + (GAME_STATUS.user_profile.option.special_guest ? 
                                          " [%{GAME_STATUS.user_profile.option.special_guest_name}]" : "")],
            [LOUNGE_MODE_EDIT_GUEST_REGION, "Edit Region" + (GAME_STATUS.user_profile.option.special_guest ? 
                                          " [%{GAME_STATUS.user_profile.option.special_guest_region}]" : "")],
        ];

        var data = UIKitProject::SelectRoot::Data();
        data.title_ = "";
        data.translate_page_ = ROOT;
        data.candidates_ = list;
        data.enable_multi_ = false;
        data.cb_init_item_ = cbInitItemForLoungeSelect;
        data.window_w_ = 600;

        var result = UIKitProject::SelectRoot.open(context, data);
        if (result == nil || result.size == 0)
            return EVENTRESULT_FILTER;

        var index = list[result[0]][0];
        if (index == LOUNGE_MODE_EDIT_GUEST_NAME)
        {
            main::sound.play("ok");
            sSpecialInputMode = LOUNGE_MODE_EDIT_GUEST_NAME;
            OSKUtil::openChatDialog(context, ROOT, false);
            return EVENTRESULT_FILTER;
        }

        if (index == LOUNGE_MODE_EDIT_GUEST_REGION)
        {
            main::sound.play("ok");
            sSpecialInputMode = LOUNGE_MODE_EDIT_GUEST_REGION;
            OSKUtil::openChatDialog(context, ROOT, false);
            return EVENTRESULT_FILTER;
        }

        if (index != LOUNGE_MODE_LAN_BATTLE)
        {
            if (pdistd::MNetworkInterface::isUp())
                LoginUtil::tryLogin(context);

            if (!LoginUtil::isOnline())
            {
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "Network", "CANNOT_CONNECT_SERVER"));
                return EVENTRESULT_FILTER;
            }
        }

        switch (index)
        {
            case LOUNGE_MODE_OPEN_LOBBY:
                if (AppOpt.defined("lanmode"))
                {
                    AppOpt.removeStatic("lanmode");
                    OnlineUtility.setIsLanMode(false);
                }

                PROJECT.history['LastPageName'] = ROOT.name;
                SequenceUtil::startProject(context, "online", "gttop");
                break;

            case LOUNGE_MODE_MY_LOUNGE:
                break;

            case LOUNGE_MODE_FRIEND_LOUNGE:
                break;

            case LOUNGE_MODE_EDIT_MY_LOUNGE:
                var res = OnlineUtil::editPrivateRoom(context, Grim2.getLoginUserId(), OnlineProject::RoomConfigRoot);
                if (res)
                    DialogUtil::openConfirmDialog(context, DialogUtil::OK, "Done");
                break;

            case LOUNGE_MODE_LAN_BATTLE:
                if (!AppOpt.defined("lanmode"))
                {
                    AppOpt.defineStatic("lanmode");
                    OnlineUtility.setIsLanMode(true);
                }

                OnlineProject::RoomRoot.open(context, nil, nil, nil, true);
                break;

            case LOUNGE_MODE_QUICK_MATCH:
                quickMatchTest(context);
                break;
        }

        return EVENTRESULT_FILTER;
    }

    function quickMatchTest(context)
    {
        if (!OnlineUtil::initializeLobby(context, true))
            return;

        var worldList = Lobby.getWholeWorldList();
        var world;
        foreach (var w in worldList)
        {
            if (w["worldNumber"] == 10)
            {
                world = w;
                break;
            }
        }

        if (world == nil)
            return;

        var worldId = world["worldId"];
        var event_list = QuickMatchUtil::getEventList(context);

        if (event_list.size == 0)
            return;

        var lobbyNumber = 1;
        var lobbyList = Lobby.getLobbyList(worldId, lobbyNumber, 20);
        var list = [];

        foreach (var event in event_list)
        {
            event["currentRoomNum"] = 0;
            foreach (var lobby in lobbyList)
            {
                if (lobby["lobbyNumber"] == event["lobbyNumber"])
                {
                    event["currentRoomNum"] = lobby["roomMemberNum"];
                    break;
                } 
            }

            list.push([event["id"], "%s".format(OnlineEventUtil::localize(event["title"]))]);
        }

        var data = UIKitProject::SelectRoot::Data();
        data.title_ = "";
        data.translate_page_ = ROOT;
        data.candidates_ = list;
        data.enable_multi_ = false;
        data.cb_init_item_ = cbInitItemForLoungeSelect;
        data.window_w_ = 600;

        var result = UIKitProject::SelectRoot.open(context, data);
        if (result == nil || result.size == 0)
            return;

        var eventId = list[result[0]][0];
        var event;
        event;
        
        foreach (var e in event_list)
        {
            if (e["id"] == eventId)
            {
                event = e;
                break;
            }
        }

        var gpList = QuickMatchUtil::getGPList(context, eventId);
        if (gpList.size < 1)
            return;

        var list = [];
        var index = 1;
        var currentNum;
        foreach (var gp in gpList)
        {
            var currentNum = 0;
            foreach (var lobby in lobbyList)
            {
                if (lobby["lobbyNumber"] == index)
                {
                    currentNum = lobby["memberNum"];
                    break;
                }
            }

            list.push([gp, "%s %dLap(s) [%d]".format(
                CourseData::getCourseName(context, gp.event.track.course_code),
                gp.event.race_parameter.race_limit_laps,
                currentNum)]);
            ++index;
        }

        data = UIKitProject::SelectRoot::Data();
        data.title_ = "";
        data.translate_page_ = ROOT;
        data.candidates_ = list;
        data.enable_multi_ = false;
        data.cb_init_item_ = cbInitItemForLoungeSelect;
        data.window_w_ = 600;

        var result = UIKitProject::SelectRoot.open(context, data);
        if (result == nil || result.size == 0)
            return;

        event["gp"] = list[result[0]][0];
        event["lobbyNumber"] = result[0] + 1;

        QuickMatchUtil::join(context, event);
    }

    function enableTRUE()
    {
        return true;
    }

    function enableFALSE()
    {
        return false;
    }

    function getIconVisible(context, icon)
    {
        return GAME_STATUS.user_profile.option["visible_icon_" + icon];
    }

    static sSecretCommandCount = 0;
    static sSecretCommand = [
        CELL_PAD_CTRL_L3_UP,
        CELL_PAD_CTRL_L3_DOWN,
        CELL_PAD_CTRL_L3_UP,
        CELL_PAD_CTRL_L3_DOWN,
        CELL_PAD_CTRL_START
    ];

    function secretCommand(context, event)
    {
        var success = false;
        var state = context.getUpdateContext().getPadButtonState(0);

        if ((state & 0x100) != 0 && (state & 0x200) != 0)
        {
            if (sSecretCommandCount < sSecretCommand.size)
            {
                if (event.keysym == sSecretCommand[sSecretCommandCount])
                    sSecretCommandCount++;
                else
                    sSecretCommandCount = 0;

                if (sSecretCommandCount >= sSecretCommand.size)
                {
                    sound.play("return");
                    sSecretCommandCount = 0;
                    context.wait(0.25);
                    success = true;
                }
            }
        }
        else
        {
            sSecretCommandCount = 0;
        }

        return success;
    }

    method onKeyPress(context, event)
    {
        if (LeaveDetectUtil::activated(context, event))
            return EVENTRESULT_FILTER;

        if (secretCommand(context, event))
        {
            GAME_STATUS.user_profile.option.visible_icon_option = !GAME_STATUS.user_profile.option.visible_icon_option;
            SequenceUtil::startProject(context, "gttop");
            return EVENTRESULT_FILTER;
        }

        if (/*pdiext::isQABuild() && */ event.keysym == CELL_PAD_CTRL_SELECT)
        {
            LeaveDetectUtil::suspend(context);
            DebugMenuPopup.open(context);
            LeaveDetectUtil::resume(context);
            return EVENTRESULT_FILTER;
        }
        else if (event.keysym == CELL_PAD_CTRL_START)
        {
            var message = "Thanks for playing this mod!\n"
                          "If you have an interest in modding or would like to know more, feel free to join on the GT modding community discord!\n"
                          "https://nenkai.github.io/gt-modding-hub/\n"
                          "\n"
                          "[Creator]\n"
                          "Mod by Nenkai!\n"
                          "Github: Nenkai\n"
                          "GTP: Nenkai\n"
                          "\n"
                          "[Mod Link]\n"
                          "gtplanet.net/forum/threads/395844/\n"
                          "\n"
                          "[Additional Credits]\n"
                          "It's by crediting and acknowledging other individuals and effort that the modding community can advance!\n"
                          "- Polyphony Digital (PDI) / Amazing games and tech\n"
                          "- ddm / All Arcade Mode improvements\n"
                          "- LukeGB / GT5 GTMode decompilation\n"
                          "- Klitlika / Added cars to arcade and recommended, course list changes, UCD cars to dealership & restored & fixed cut events\n"
                          "- Shy_Doge / Making the missing PS2 tracks maps and logos.\n"
                          "- Jonny_0093 / PS2 tracks arcade previews\n"
                          "- Goongumps / Online Mode car category changes"
                          "- xFileFIN / Tools, helping me get started in Gran Turismo internals\n"
                          "- Xenn / Easter Egg\n"
                          "- Paiky (GT Archive) & Dezent / Contributing and getting GT5 QA Build which allowed content to be ported over to GT5.\n"
                          "- Content Creators / DoVe_7, DustinEden, Paiky/GT Archive, Gustingorriz, ThunderTHR, Grand Prix, R4BBIT G4MING, ...\n"
                          "- More at https://nenkai.github.io/gt-modding-hub/credits/\n"
                          "\n"
                          "You, for playing this! :D\n";

            DialogUtil::openInformationDialog(context, 
                message, "Gran Turismo 5 Master Mod");
        }

        return EVENTRESULT_CONTINUE;
    }
}

module GTTopRoot::Menus::MainMenu
{
    static sMainMenuIcons; 
    if (GetVersionBranch() == "demo" || GetVersionBranch() == "gps")
    {
        sMainMenuIcons = [];
        sMainMenuIcons += [
            // GT Mode
            [
                "icon" : "gtmode",
                'localize_key' : "ICON_MYHOME",
                "board" : "bord_race",
                "on_activate_func" : onGTMode,
                "is_enable_func" : getIconVisible,
            ],

            // Arcade
            [
                "icon" : "arcade",
                'localize_key' : "ICON_ARCADE",
                "board" : "bord_race",
                "on_activate_func" : onArcade,
                "is_enable_func" : getIconVisible,
            ],
        ];

        // Online Lounge/LAN
        if (GAME_STATUS.user_profile.option.visible_icon_lounge)
        {
            sMainMenuIcons += [
                "icon" : "online",
                'localize_key' : "ICON_ONLINE",
                "board" : "bord_race",
                "on_activate_func" : onLounge,
                "is_enable_func" : enableTRUE,
            ];
        }

        // GPS Replay
        if (GAME_STATUS.user_profile.option.visible_icon_replay)
        {
            sMainMenuIcons += [
                "icon" : "photo",
                'localize_key' : "ICON_GPS_REPLAY",
                "board" : "bord",
                "on_activate_func" : onGpsReplay,
                "is_enable_func" : enableTRUE,
            ];
        }

        sMainMenuIcons += [
            // Course Maker
            [
                "icon" : "coursemaker",
                'localize_key' : "ICON_CRSEDIT",
                "board" : "bord_race",
                "on_activate_func" : nil, // Not available in demo
                "is_enable_func" : getIconVisible,
            ],

            // GT TV
            [
                "icon" : "gttv",
                'localize_key' : "ICON_GTTV",
                "board" : "bord",
                "on_activate_func" : nil, // Not available in demo
                "is_enable_func" : getIconVisible,
            ],
        ];
    }
    else
    {
        sMainMenuIcons = [];
        sMainMenuIcons += [
            // GT Mode
            [
                "icon" : "gtmode",
                'localize_key' : "ICON_MYHOME",
                "board" : "bord_race",
                "on_activate_func" : onGTMode,
                "is_enable_func" : getIconVisible,
            ],

            // Arcade
            [
                "icon" : "arcade",
                'localize_key' : "ICON_ARCADE",
                "board" : "bord_race",
                "on_activate_func" : onArcade,
                "is_enable_func" : getIconVisible,
            ],

            [
                "icon" : "photo",
                'localize_key' : "ICON_GPS_REPLAY",
                "board" : "bord",
                "on_activate_func" : onGpsReplay,
                "is_enable_func" : enableTRUE,
            ],

            // Online Lounge/LAN
            [
                "icon" : "online",
                'localize_key' : "ICON_ONLINE",
                "board" : "bord_race",
                "on_activate_func" : onLounge,
                "is_enable_func" : enableTRUE,
            ],


            // Course Maker
            [
                "icon" : "coursemaker",
                'localize_key' : "ICON_CRSEDIT",
                "board" : "bord_race",
                "on_activate_func" : onCrsEdit,
                "is_enable_func" : getIconVisible,
            ],

            // GT TV
            [
                "icon" : "gttv",
                'localize_key' : "ICON_GTTV",
                "board" : "bord",
                "on_activate_func" : onGTTV2,
                "is_enable_func" : getIconVisible,
            ],
        ];
    }

    function createMainMenu(context)
    {
        Menus::MainMenu::ListBox.setItemTemplate(context, hidden::Item);
        Menus::MainMenu::ListBox.setItemCount(sMainMenuIcons.size);
        
        var listbox_total_space = Menus::MainMenu::ListBox.spacing * (sMainMenuIcons.size - 1);
        var item_total_width = hidden::Item.w * sMainMenuIcons.size;
        Menus::MainMenu.minimum_width = item_total_width + listbox_total_space;

        for (var i = 0; i < Menus::MainMenu::ListBox.getItemCount(); i++)
        {
            var w = Menus::MainMenu::ListBox.getItemWidget(i, context);
            var icon_data = sMainMenuIcons[i];
            var icon = icon_data['icon'];
            var board_name = icon_data['board'];

            var localize_key = icon_data['localize_key'];
            if (!w.defined('localize_key'))
                w.defineAttribute('localize_key');
            w.localize_key = localize_key;

            var is_enable_func = icon_data['is_enable_func'];
            if (!w.defined('is_enable_func'))
                w.defineAttribute('is_enable_func');
            w.is_enable_func = is_enable_func;

            var on_activate_func = icon_data['on_activate_func'];
            if (!w.defined('on_activate_func'))
                w.defineAttribute('on_activate_func');
            w.on_activate_func = on_activate_func;

            w.name = icon;

            var r_body = w.Icon::Body;
            if (is_enable_func(context, icon))
                r_body.icon.image_path = "image/gt5/icon/top_%{icon}.dds";
            else
                r_body.icon.image_path = "image/gt5/icon/top_%{icon}_g.dds";

            r_body.board.image_path = "image/gt5/icon/%{board_name}.dds";
            r_body.board_i.image_path = "image/gt5/icon/%{board_name}_i.dds";
            r_body.Effect.reverse = false;
            r_body.Effect.reset();

            var r_shadow = w.Icon::Shadow;
            r_shadow.Effect.reverse = false;
            r_shadow.Effect.reset();
        }
    }

    method saveFocusPosition()
    {
        PROJECT.history['GTTopRoot::FocusIndex'] = self.ListBox.focus_index;
    }

    module ListBox
    {
        method onInitialize()
        {
            self.h_adjustment = menu::MAdjustment();
            HArrow.adjustment = self.h_adjustment;
        }

        method onActivate(context, event)
        {
            var w = event.widget;
            if (w.defined('is_enable_func') && w.is_enable_func != nil)
            {
                var enable = w.is_enable_func(context, w.name);
                if (enable)
                {
                    if (w.on_activate_func != nil)
                    {
                        LeaveDetectUtil::suspend(context);
                        w.on_activate_func(context);
                        LeaveDetectUtil::resume(context);
                    }
                }
                else
                {
                    sound.play("disable");
                    var msg = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
                }
            }

            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context, event)
        {
            var w = self.getItemWidget(self.focus_index, context);
            ROOT.setFocus(w);

            var tip = context.translate(ROOT, w.localize_key);
            BalloonTip.set_value(context, w.Icon, tip, 38);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }

        method onFocusNotify(context, new_index, old_index)
        {
            var new_w = self.getItemWidget(new_index, context);
            if (new_w != nil)
                ROOT.setFocus(new_w);

            return EVENTRESULT_FILTER;
        }
    }
}

module GTTopRoot::Menus::SideMenu
{
    method onFocusLeave(context, event)
    {
        BalloonTip.reset_value();
        return EVENTRESULT_STOP;
    }
}

module GTTopRoot::Menus::SideMenu::DLC
{
    method onLoad()
    {
        if (GetVersionBranch() == "demo")
            self.visible = false;
    }

    method onInitialize(context)
    {
        self.visible = GAME_STATUS.user_profile.option.visible_icon_dlc;
    }

    method onFocusEnter(context, event)
    {
        var caption = context.translate(ROOT, "ICON_DLC");
        BalloonTip.set_value(context, self, caption, 12);
        return EVENTRESULT_STOP;
    }

    method doDLCPopup(context)
    {
        LeaveDetectUtil::suspend(context);

        //setFrameInterval(context, 1);
        DLCPopup.open(context);
        //setFrameInterval(context, 2);

        LeaveDetectUtil::resume(context);
    }

    method onActivate(context)
    {
        main::sound.play("ok");

        /*
        if (Grim2.isOutOfService())
        {
            doDLCPopup(context);
            return EVENTRESULT_FILTER;
        }

        if (pdistd::MNetworkInterface::isUp())
        {
            LeaveDetectUtil::suspend(context);
            var result = LoginUtil::tryLogin(context);
            LeaveDetectUtil::resume(context);

            if (!result)
                return EVENTRESULT_FILTER;
        }

        if (!LoginUtil::isOnline())
        {
            LeaveDetectUtil::suspend(context);
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "Network", "CANNOT_CONNECT_SERVER"));
            LeaveDetectUtil::resume(context);
            return EVENTRESULT_FILTER;
        }
        */

        doDLCPopup(context);
        return EVENTRESULT_FILTER;
    }
}

module GTTopRoot::Menus::SideMenu::Manual
{
    method onInitialize(context)
    {
        self.active = GAME_STATUS.user_profile.option.visible_icon_manual;
    }

    method onFocusEnter(context, event)
    {
        var caption = context.translate(ROOT, "ICON_MANUAL");
        BalloonTip.set_value(context, self, caption, 0);
        return EVENTRESULT_FILTER;
    }

    function onActivate(context)
    {
        if (!GAME_STATUS.user_profile.option.visible_icon_manual)
        {
            sound.play("disable");
            var msg = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
            return EVENTRESULT_FILTER;
        }

        sound.play("ok");

        Menus::MainMenu.saveFocusPosition();

        LeaveDetectUtil::suspend(context);

        //setFrameInterval(context, 1);
        ManualProject::ManualPopup.open(context);
        //setFrameInterval(context, 2);

        LeaveDetectUtil::resume(context);

        return EVENTRESULT_FILTER;
    }
}

module GTTopRoot::Menus::SideMenu::Option
{
    method onInitialize(context)
    {
        self.active = GAME_STATUS.user_profile.option.visible_icon_option;
    }

    method onFocusEnter(context, event)
    {
        var caption = context.translate(ROOT, "ICON_OPTIONS");
        BalloonTip.set_value(context, self, caption, 0);
        return EVENTRESULT_FILTER;
    }

    method onActivate(context)
    {
        if (!GAME_STATUS.user_profile.option.visible_icon_option)
        {
            sound.play("disable");
            var msg = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
            return EVENTRESULT_FILTER;
        }

        sound.play("ok");

        context.cursor_visible = false;
        PROJECT.history['GTTopRoot::FocusIndex'] = 0;
        PROJECT.history['LastPageName'] = ROOT.name;
        SequenceUtil::startProject(context, "option", "gttop");

        return EVENTRESULT_FILTER;
    }
}

module GTTopRoot::Menus::SideMenu::Save
{
    method onInitialize(context)
    {
        self.active = GAME_STATUS.user_profile.option.visible_icon_save;
    }

    method onFocusEnter(context, event)
    {
        var caption = context.translate(ROOT, "Arcade", "SAVE");
        BalloonTip.set_value(context, self, caption, 0);
        return EVENTRESULT_STOP;
    }

    method onActivate(context)
    {
        if (!GAME_STATUS.user_profile.option.visible_icon_save)
        {
            sound.play("disable");
            var msg = context.translate(ROOT, "Arcade", "cannot_select_in_this_version");
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg);
            return EVENTRESULT_FILTER;
        }

        sound.play("ok");

        LeaveDetectUtil::suspend(context);
        SaveDataUtilGT5::saveAutoForGame(context);
        LeaveDetectUtil::resume(context);

        return EVENTRESULT_FILTER;
    }
}

// News Panel
module GTTopRoot::PopupNews
{
    attribute news_id_list_list;
    attribute news_list;
    attribute ref_count;

    method initialize(context)
    {
        if (!LoginUtil::isOnline() || !Grim2Util::News::isEnable())
            return;

        var update_scroll_news = ScrollNewsUtil::isEmpty();
        var me = self;

        News2.requestCategoryRoot(function(args)
        {
            |var context, var request| = args;
            if (!request.isDone())
                return;

            var category_root_list = News2.decodeCategoryRoot(request);
            if (category_root_list.size == 0)
                return;

            var category_root_list0 = [];
            foreach (var category_root in category_root_list)
            {
                if (category_root["category_id2"] == 0)
                    category_root_list0.push(category_root);
            }

            var last_category_root = category_root_list0[category_root_list0.size - 1];
            me.news_id_list_list = [];
            
            var me2 = me;
            PopupNews.ref_count = 0;

            // HACK: update_scroll_news is reused in the second nested callback, then treated as a static
            // FIXME: Compiler currently doesn't capture it (two levels up) from the function body
            // doing this so it's captured inside requestNewsIdList's callback as a local
            update_scroll_news;

            foreach (var category_root in category_root_list0)
            {
                var category_id1 = category_root["category_id1"];
                var category_id2 = category_root["category_id2"];

                ++PopupNews.ref_count;

                News2.requestNewsIdList(category_id1, category_id2, function(args)
                {
                    |var context, var request| = args;
                    if (request.isDone())
                    {
                        var news_id_list = News2.decodeNewsIdList(request);
                        if (update_scroll_news)
                            ScrollNewsUtil::addNewsIdList(news_id_list);

                        me2.news_id_list_list.push(news_id_list);
                    }

                    --PopupNews.ref_count;
                    if (PopupNews.ref_count == 0)
                        me2.initialize2(context);
                });
            }
        });
    }

    method initialize2(context)
    {
        var POPUP_COUNT = 2; // Show max 2 news entries
        var target_news_id_list = [];

        foreach (var news_id_list in self.news_id_list_list)
        {
            for (var i = 0; i < POPUP_COUNT && i < news_id_list.size; ++i)
                target_news_id_list.push(news_id_list[i]);
        }

        self.news_id_list_list = [];
        if (target_news_id_list.size == 0)
            return;

        var last_news_id = target_news_id_list[target_news_id_list.size - 1];
        self.news_list = [];
        var me = self;

        PopupNews.ref_count = 0;

        foreach (var news_id in target_news_id_list)
        {
            ++PopupNews.ref_count;

            News2.requestNews(news_id, function(args)
            {
                |var context, var request| = args;
                if (request.isDone())
                {
                    var news = News2.decodeNews(request);
                    if (!ScrollNewsUtil::isInvalidNews(context, news, false))
                        me.news_list.push(news);
                }

                --PopupNews.ref_count;
                if (PopupNews.ref_count == 0)
                    me.initialize3(context);
            });
        }
    }

    method initialize3(context)
    {
        news_list.sort(function(a, b) {
            if (a["category_id1"] == b["category_id1"])
                return a["news_time"].getBySecond() > b["news_time"].getBySecond();

            return a["category_id1"] < b["category_id1"];
        });

        foreach (var news in self.news_list)
        {
            var item = GTTopRoot::hidden::ItemNews.doCopy();
            GTTopRoot::PopupNews::VBox::VBox.appendChild(item);
            item.doInitialize(context);
            item.initialize(context, news);
        }

        self.news_list = [];
    }

    method onFocusEnter(context, event)
    {
        if (LeaveDetectUtil::isSuspend() == false)
            LeaveDetectUtil::suspend(context);

        return EVENTRESULT_FILTER;
    }

    method onFocusLeave(context, event)
    {
        if (!ROOT.focus_widget.name.beginWith("ItemNews"))
            LeaveDetectUtil::resume(context);

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context, event)
    {
        GTTopRoot::PopupNews::VBox::VBox.clearChildren(context);
        News2.clearCallback();
    }

    method onKeyPress(context, event)
    {
        if (event.keysym == CELL_PAD_CTRL_L3_LEFT)
        {
            if (Menus::SideMenu::DLC.visible)
                ROOT.setFocus(Menus::SideMenu::DLC);
            else
                ROOT.setFocus(Menus::SideMenu::Save);

            return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }

    module VBox
    {
        module VBox
        {
            function removeTimeOut(context) { 

            }

            function onBeginScroll(context, widget)
            {
                widget.ToolTipFace.velocity = 1.0;
                widget.ToolTipFace.resetAction();
                context.setTimeOut(widget.name + "E", 0.0);
                widget.animation = true;
            }

            function onEndScroll(context, widget)
            {
                widget.ToolTipFace::ScalarInterpolator.on_effect_end = function(context)
                {
                    widget.ToolTipFace::ScalarInterpolator.on_effect_end = nil;
                    widget.ToolTipFace.velocity = 0.0;
                    widget.ToolTipFace.resetAction();
                    widget.ToolTipFace::ScalarInterpolator.reverse = true;
                    widget.ToolTipFace::ScalarInterpolator.start();
                };

                widget.ToolTipFace::ScalarInterpolator.reverse = false;
                widget.ToolTipFace::ScalarInterpolator.start();

                context.setTimeOut(widget.name + "L", 0.0);
            }

            method onFocusEnter(context, event)
            {
                var w = event.widget;
                if (!w.animation)
                {
                    context.setTimeOut(w.name + "L", 0.0);

                    context.addTimeOut(w.name + "E", onBeginScroll, context, w);
                    context.setTimeOut(w.name + "E", 0.5);
                }

                return EVENTRESULT_FILTER;
            }

            method onFocusLeave(context, event)
            {
                var w = event.widget;
                context.setTimeOut(w.name + "E", 0.0);

                if (w.animation && w.ToolTipFace.isScrolling())
                {
                    context.addTimeOut(w.name + "L", onEndScroll, context, w);
                    context.setTimeOut(w.name + "L", 0.1);
                    w.animation = false;
                }

                return EVENTRESULT_FILTER;
            }
        }

        module News
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                if (pdistd::MNetworkInterface::isUp())
                    LoginUtil::tryLogin(context);

                if (!LoginUtil::isOnline())
                {
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "Network", "CANNOT_CONNECT_SERVER"));
                    PopupNews::ParallelActor.out = true;
                    context.sync(0.5);
                    PopupNews.visible = false;
                    ROOT.setFocus(Menus::MainMenu::ListBox);

                    return EVENTRESULT_FILTER;
                }

                //setFrameInterval(context, 1);
                LeaveDetectUtil::suspend(context);

                var go_gttv = NewsProject::GTNewsPopup.open(context);
                LeaveDetectUtil::resume(context);
                setFrameInterval(context, 2);

                if (go_gttv)
                    onGTTV2(context);

                return EVENTRESULT_FILTER;
            }
        }
    }
}

module GTTopRoot::hidden
{
    module ItemNews
    {
        attribute news;
        attribute animation = false;

        method initialize(context, news)
        {
            self.news = news;

            if (news["headline"] == "")
                self.ToolTipFace.value = news["title"];
            else
                self.ToolTipFace.value = context.translate(ROOT, "News", "POPUP_NEWS_FORMAT").build(news["title"], news["headline"]);

            self.ToolTipFace.remove();
            self.ToolTipFace.action_type = 5;
            self.ToolTipFace.show_once = true;
            self.ToolTipFace.scroll_nowait = true;
            self.ToolTipFace.velocity = 0.0;
            self.ToolTipFace.resetAction();
        }

        method onActivate(context)
        {
            main::sound.play("ok");

            if (pdistd::MNetworkInterface::isUp())
                LoginUtil::tryLogin(context);

            if (!LoginUtil::isOnline())
            {
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "Network", "CANNOT_CONNECT_SERVER"));
                PopupNews::ParallelActor.out = true;
                context.sync(0.5);
                PopupNews.visible = false;
                ROOT.setFocus(Menus::MainMenu::ListBox);

                return EVENTRESULT_FILTER;
            }

            //setFrameInterval(context, 1);
            var go_gttv = NewsProject::GTNewsDetailPopup.open(context, self.news["category_id1"], [self.news["news_id"]], 0);
            //setFrameInterval(context, 2);

            if (go_gttv)
                onGTTV2(context);

            return EVENTRESULT_FILTER;
        }

        module ToolTipFace
        {
            method onPhase12End(context)
            {
                self.parent.animation = false;
                var me = self;

                me.ScalarInterpolator.on_effect_end = function(context)
                {
                    me.ScalarInterpolator.on_effect_end = nil;
                    me.velocity = 0.0;
                    me.resetAction();
                    me.ScalarInterpolator.reverse = true;
                    me.ScalarInterpolator.start();
                };

                self.ScalarInterpolator.reverse = false;
                self.ScalarInterpolator.start();

            }
        }
    }
}
