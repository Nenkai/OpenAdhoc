













module ROOT
{
    attribute modal_page;
    attribute closed;
    attribute invisible_pages;
    attribute cursor_visible;

    SCALE_WIDGET_SDTV(hidden::TextItem, 2.4);

    method open(context)
    {
        self.cursor_visible = context.cursor_visible;
        context.cursor_visible = true;

        self.closed = false;

        self.modal_page = main::SequenceUtil::ModalPage(context, ROOT);
        self.modal_page.open();

        return true;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;

        PageUtil::visibleOtherPages(context, self);

        context.cursor_visible = self.cursor_visible;
        self.cursor_visible = nil;

        ROOT.setFocus(nil);

        var actor = self.CloseActor;
        actor.forward();
        actor.restart();

        if (self.modal_page != nil)
        {
            var delay_time = actor.Fade.total_time;
            self.modal_page.close(delay_time);
            self.modal_page = nil;
        }
    }

    method onInitialize(context)
    {
        ContextMain.disableInput();

        var actor = self.OpenActor;
        actor.forward();
        actor.restart();

        actor.on_effect_end = (context) => 
        {
            actor.on_effect_end = nil;
            PageUtil::invisibleUnderPages(context, self);
            ContextMain.enableInput();
        };

        self.CloseActor.stop();

        var adj = main::menu::MAdjustment();
        HScroller::HScrollArrow.adjustment = adj;
        HScroller::clip.h_adjustment = adj;

        var ver_str = pdiext::MProductInformation::GetDisplayVersion();
        if (pdiext::isQABuild())
            ver_str = ver_str + ".qa";

        Version.text = "Ver. " + ver_str;
        
        var focus_target = HScroller::clip::space::About;
        ROOT.setFocus(focus_target);
        HScroller::clip.warp(focus_target);
    }

    method onFinalize(context)
    {
        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        self.close(context);

        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case CELL_PAD_CTRL_R1:
                var w = event.widget.next;
                if (w != nil && w.visible)
                {
                    sound.play("cursor");
                    ROOT.setFocus(w);
                }

                return EVENTRESULT_FILTER;

            case CELL_PAD_CTRL_L1:
                var w = event.widget.prev;
                if (w != nil && w.visible)
                {
                    sound.play("cursor");
                    ROOT.setFocus(w);
                }

                return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }

    module HScroller::clip::space
    {
        method onFocusEnter(context, event)
        {
            var list = [];

            if (event.widget.prev != nil && event.widget.prev.visible)
            {
                list.push(["L1", manager.translate("Component", "Label_Prev")]);
            }

            if (event.widget.next != nil && event.widget.next.visible)
            {
                list.push(["R1", manager.translate("Component", "Label_Next")]);
            }

            list.push(["Close"]);

            ButtonHelpGT6.set(context, list);

            return EVENTRESULT_STOP;
        }
    }    

    module HScroller::clip::space::KeyAssign
    {
        method onInitialize(context)
        {
            SBox::Title.text = manager.translate("ManualGT6", "Ctrl_Cap_03");
            SBox::SubTitle.text = manager.translate("ManualGT6", "Ctrl_Cap_01");
            SBox::PSinfo.text = manager.translate("ManualGT6", "Ctrl_Cap_02");
            SBox::PS.text = manager.translate("ManualGT6", "Ctrl_Cap_02");

            var key_assign_pair = [
                ["Up", "Ghost"],
                ["Down", nil],
                ["Right", "Steer"],
                ["Left", "Steer"],
                ["Circle", "SideBrake"],
                ["Triangle", "Reverse"],
                ["Square", "Brake"],
                ["Cross", "Accel"],
                ["R_Analog", "AccBrk"],
                ["L_Analog", "Steer"],
                ["Select", "PlayView"],
                ["Start", "Pause"],
                ["R1", "Lights"],
                ["R2", "ShiftUp"],
                ["R3", nil],
                ["L1", "BackView"],
                ["L2", "ShiftDown"],
                ["L3", ""],
                ["PS", "PSFunction"],
                ["Port", nil]
            ];

            foreach (|var key, var fn| in key_assign_pair)
            {
                var w;
                if (SBox::R.defined(key))
                    w = SBox::R[key];
                else if (SBox::L.defined(key))
                    w = SBox::L[key];
                else if (SBox.defined(key))
                    w = SBox[key];

                if (w == nil)
                    ;
                else
                {
                    w.text = manager.translate("ManualGT6", "Ctrl_Key_%{key}");
                    if (fn != nil)
                        w.text += " : " + manager.translate("ManualGT6", "Fn_%{fn}");
                }
            }
        }
    }

    module HScroller::clip::space::Credits
    {
        method onInitialize(context)
        {
            if (GetVersionBranch() == "demo")
            {
                self.visible = false;
                return;
            }

            var clip = VScroller::clip;
            var space = clip.space;
            var adj = main::menu::MAdjustment();
            VScroller::VScrollbar.adjustment = adj;
            clip.v_adjustment = adj;
            clip.scroll_mode = SCROLL_MODE_MANUAL;
            clip.space.y = 0.0;
            clip.manual_target_y = 0.0;

            var credits_keys = [
                ["Legal_Title", "TitleItem"],
                ["Legal_Text_01", "TextItem"],
                ["Legal_Text_02", "TextItem"],
                ["Legal_Text_03", "TextItem"],
                ["Legal_Text_04", "TextItem"],
                ["Legal_Text_05", "TextItem"],
                ["Legal_Text_06", "TextItem"],
                ["Legal_Text_07", "TextItem"],
                ["Legal_Text_08", "TextItem"],
                ["Legal_Text_09", "TextItem"],
                ["Legal_Text_10", "TextItem"],
                ["Legal_Text_Logo_01", "LogoItem"],
            ];

            var psn_version = !pdiext::MSystemConfiguration::bootFromDisc();
            if (pdiext::MProductInformation::GetGameRegionCode() == "scej")
            {
                if (psn_version || gtengine::isDevelopVersion())
                {
                    credits_keys.push([nil, "InfoSCEJ"]);
                }
            }

            space.clearChildren(context);

            foreach (|var key, var item_name| in credits_keys)
            {
                var w = hidden[item_name].doCopy();
                if (key != nil)
                {
                    var s = manager.translate("ManualCreditGT6", key);
                    w.text = s.replaceAll("&amp;", "&");
                }

                space.appendChild(context, w);
            }
        }

        method onKeyPress(context, event)
        {
            var ratio = 1;
            var pad = context.getUpdateContext().getPadButtonState(0);
            if (pad & 0x200)
                ratio = 2;
            else if (pad & 0x1000)
                ratio = 4;

            var line_height = hidden::TextItem.line_height * ratio;
            switch (event.keysym)
            {
                case CELL_PAD_CTRL_L3_UP:
                    VScroller::clip.manualTargetIncY(line_height);
                    return EVENTRESULT_FILTER;

                case CELL_PAD_CTRL_L3_DOWN:
                    VScroller::clip.manualTargetIncY(-line_height);
                    return EVENTRESULT_FILTER;
            }

            return EVENTRESULT_CONTINUE;
        }
    }

    module HScroller::clip::space::PDI
    {
        method onInitialize(context)
        {
            if (GetVersionBranch() == "demo")
            {
                self.visible = false;
                return;
            }
    
            var clip = VScroller::clip;
            var space = clip.space;
            var adj = main::menu::MAdjustment();
            VScroller::VScrollbar.adjustment = adj;
            clip.v_adjustment = adj;
            clip.scroll_mode = SCROLL_MODE_MANUAL;
            clip.space.y = 0.0;
            clip.manual_target_y = 0.0;

            var credits_keys = [
                ["PDI_Title", "TitleItem"],
                ["PDI_Text_01", "TextItem_pdi"],
                ["PDI_Text_02", "TextItem_pdi"],
                ["PDI_Text_03", "TextItem_pdi"],
            ];

            space.clearChildren(context);

            foreach (|var key, var item_name| in credits_keys)
            {
                var w = hidden[item_name].doCopy();
                if (key != nil)
                {
                    var s = manager.translate("ManualCreditGT6", key);
                    w.text = s.replaceAll("&amp;", "&");
                }

                space.appendChild(context, w);
            }
        }
        
        method onKeyPress(context, event)
        {
            var line_height = hidden::TextItem.line_height;
            switch (event.keysym)
            {
                case CELL_PAD_CTRL_L3_UP:
                    VScroller::clip.manualTargetIncY(line_height);
                    return EVENTRESULT_FILTER;
    
                case CELL_PAD_CTRL_L3_DOWN:
                    VScroller::clip.manualTargetIncY(-line_height);
                    return EVENTRESULT_FILTER;
            }
    
            return EVENTRESULT_CONTINUE;
        }
    }

    module HScroller::clip::space::SpecialThanks
    {
        method onInitialize(context)
        {
            if (GetVersionBranch() == "demo")
            {
                self.visible = false;
                return;
            }
    
            var clip = VScroller::clip;
            var space = clip.space;
            var adj = main::menu::MAdjustment();
            VScroller::VScrollbar.adjustment = adj;
            clip.v_adjustment = adj;
            clip.scroll_mode = SCROLL_MODE_MANUAL;
            clip.space.y = 0.0;
            clip.manual_target_y = 0.0;

            var credits_keys = [
                ["SpecialThanks_Title", "TitleItem"],
                ["SpecialThanks_Text_01", "TextItem_pdi"],
            ];

            space.clearChildren(context);

            foreach (|var key, var item_name| in credits_keys)
            {
                var w = hidden[item_name].doCopy();
                if (key != nil)
                {
                    var s = manager.translate("ManualCreditGT6", key);
                    w.text = s.replaceAll("&amp;", "&");
                }

                space.appendChild(context, w);
            }
        }
        
        method onKeyPress(context, event)
        {
            var line_height = hidden::TextItem.line_height;
            switch (event.keysym)
            {
                case CELL_PAD_CTRL_L3_UP:
                    VScroller::clip.manualTargetIncY(line_height);
                    return EVENTRESULT_FILTER;
    
                case CELL_PAD_CTRL_L3_DOWN:
                    VScroller::clip.manualTargetIncY(-line_height);
                    return EVENTRESULT_FILTER;
            }
    
            return EVENTRESULT_CONTINUE;
        }
    }
}