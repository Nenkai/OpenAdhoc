#include "demo_2010_e3.ad"
#include "OnlineRaceFunction.ad"
#include "../include/GTTVOffline.ad"

module PresentFunction
{
    #include "PresentFunction.ad"
}

#define CHECK_NOT_DEMO() \
    if (GetVersionBranch() == "demo") \
    { \
        main::sound.play("disable"); \
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "Arcade", "cannot_select_in_this_version")); \
        return EVENTRESULT_FILTER; \
    }

#define CHECK_GARAGE_NOT_EMPTY() \
    if (!GAME_STATUS.user_profile.game_flags.getFlag("USER_STATUS", "GET_FIRST_CAR") || GAME_STATUS.user_profile.garage.riding_id < 0) \
    { \
        DialogUtil::openInformationDialog(context, context.translate(ROOT, "MESSAGE_WHEN_GARAGE_IS_EMPTY")); \
        return EVENTRESULT_FILTER; \
    }

#define CHECK_ONLINE_PROMPT() \
    if (!LoginUtil::isOnline()) \
    { \
        main::sound.play("disable"); \
        var msg = (NP.isOnline() && PDINetwork.isChatRestricted()) ? \
            context.translate(ROOT, "MyHome", "ERROR_CHAT_RESTRICTED") : \
            context.translate(ROOT, "Network", "ERROR_ONLINE_FUNCTION"); \
        \
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, msg); \
        return EVENTRESULT_FILTER; \
    }

#define CHECK_CAN_ONLINE_CHAT() \
    if (PDINetwork.isChatRestricted()) \
    { \
        main::sound.play("disable"); \
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "OnlineMessage", "UNABLE_TO_CHAT_DUE_TO_RESTRICTION")); \
        return EVENTRESULT_FILTER; \
    }

#define CHECK_ONLINE_GRANDTOP() \
    if (GTModeProject::is_online_on_load && !LoginUtil::isOnline()) \
    { \
        ERROR(context, ROOT, "GOTO_GRANDTOP_IF"); \
        Grim2.setInitialize(false); \
        SequenceUtil::startProject(context, "gttop"); \
        return EVENTRESULT_FILTER; \
    }

#define CHECK_CAR_NOT_ONEMAKE_ONLY() \
    var cp = main::GAME_STATUS.user_profile.garage.getRidingCar(); \
    if (main::gtengine::MSpecDB::checkGenericFlag("one_make_only", cp.getCarCode())) \
    { \
        main::sound.play("disable"); \
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "MyHome", "CANNOT_ENTER_ASPEC_BSPEC_EVENT")); \
        return EVENTRESULT_FILTER; \
    }

#define CHECK_CAR_NOT_KART() \
    var cp = main::GAME_STATUS.user_profile.garage.getRidingCar(); \
    if (main::gtengine::MSpecDB::checkGenericFlag("is_racing_kart", cp.getCarCode())) \
    { \
        main::sound.play("disable"); \
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "MyHome", "CANNOT_ENTER_ASPEC_BSPEC_EVENT_FOR_KART")); \
        return EVENTRESULT_FILTER; \
    }

#define CHECK_CAR_NOT_FRIEND() \
    if (GAME_STATUS.user_profile.garage.isRidingFriendCar()) \
    { \
        main::sound.play("disable"); \
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "MyHome", "ERROR_NOT_ENTER_BY_FRIEND_CAR")); \
        return EVENTRESULT_FILTER; \
    }

#define CHECK_DATAINSTALL_OR_PERFORM() \
    if (DataInstallUtil::isRecommended()) \
    { \
        if (DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "MyHome", "DATAINSTALL_IS_STRONGLY_RECOMMENDED"))) \
        { \
            if (!DataInstallUtil::execute(context, ROOT, "OptionProject::MiscRoot")) \
                return EVENTRESULT_FILTER; \
        } \
    }

#define CHECK_TIMEOUT() \
    { \
        var usec = ROOT.keep_interval_usec; \
        var now = pdistd::GetSystemTimeMicroSecond(); \
        if (now - usec < 800000) \
            return EVENTRESULT_FILTER; \
        else \
            ROOT.keep_interval_usec = now; \
    }

module GTModeRoot
{
    // Current selected online friend
    attribute active_friend;

    // Current pane
    attribute active_pane;
    attribute myhome_setting_level_on_start;
    attribute beeped_once;
    attribute keep_interval_usec = pdistd::GetSystemTimeMicroSecond();
    attribute extend_watcher;

    module Master
    {
        function getMenuColorList()
        {
            return GAME_STATUS.user_profile.context.getMenuColorList();
        }

        function getMenuColor(index)
        {
            return GAME_STATUS.user_profile.context.getMenuColor(index);
        }

        function getWallpaperList()
        {
            return [
                "image/gt5/bg/custom_01.dds",
                "image/gt5/bg/custom_02.dds",
                "image/gt5/bg/custom_03.dds",
                "image/gt5/bg/custom_04.dds",
                "image/gt5/bg/custom_05.dds",
                "image/gt5/bg/custom_06.dds",
                "image/gt5/bg/custom_07.dds",
                "image/gt5/bg/custom_08.dds",
                "image/gt5/bg/custom_09.dds",
                "image/gt5/bg/custom_10.dds",
                "image/gt5/bg/custom_11.dds",
                "image/gt5/bg/custom_12.dds",
                "image/gt5/bg/custom_13.dds",
                "image/gt5/bg/custom_14.dds",
                "image/gt5/bg/custom_15.dds",
                "image/gt5/bg/custom_16.dds",
                "image/gt5/bg/custom_17.dds",
                "image/gt5/bg/custom_18.dds",
                "image/gt5/bg/custom_19.dds",
                "image/gt5/bg/custom_20.dds",
                "image/gt5/bg/custom_21.dds",
                "image/gt5/bg/custom_22.dds",
                "image/gt5/bg/custom_23.dds",
                "image/gt5/bg/custom_24.dds",
            ];
        }

        function getWallpaperPath(index)
        {
            var list = getWallpaperList();
            return list[index];
        }
    }

    module __BalloonTarget__
    {
        method onFocusEnter(context, event)
        {
            var w = event.widget;
            var localized_text = context.translate(ROOT, w.name.upcase());
            BalloonTip.set_value(context, w, localized_text, 0);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module __FinderTarget__
    {
        attribute finder;
        attribute view_mode = 1;

        method finalizeFinder(context)
        {
            if (self.finder != nil)
            {
                self.List.removeChild(context, self.finder);
                self.finder = nil;
            }
        }

        method isListMode()
        {
            return self.view_mode == 1;
        }

        method changeViewMode(context, _view_mode)
        {
            if (self.view_mode == _view_mode)
                return;

            finalizeFinder(context);
            self.view_mode = _view_mode;
            self["initializeFinder"](context);
        }
    }

    function filterPresent(context, item_list)
    {
        var item_list2 = [];
        var skip_itembox_id_list = [];
        var skip_flag = false;

        foreach (var item in item_list)
        {
            var type = item["type"];
            skip_flag = false;

            if (item["type"] == gtengine::GameItemType::MUSEUMCARD)
            {
                var gameitem = gtengine::MGameItem();
                var buf = pdistd::Inflate(item["stats"]);
                gameitem.deserialize(buf);

                var museum_id = gameitem.f_name;
                if (!MuseumFileUtil::isAvailable(museum_id))
                {
                    skip_itembox_id_list.push(item["itembox_id"]);
                    skip_flag = true;
                }
            }

            if (!skip_flag)
                item_list2.push(item);
        }

        if (skip_itembox_id_list.size > 0)
            ItemBox.requestReceiveItem(skip_itembox_id_list, function(args) {});

        return item_list2;
    }

    function extendSessionIf(context)
    {
        if (!LoginUtil::isOnline())
            return;

        var lastextendsession = PROJECT.history['GTModeRoot::lastextendsession'];
        var now = pdistd::MTime::getCurrentTime();
        if (lastextendsession != nil)
        {
            if (now.getBySecond() - lastextendsession < 60 * 30)
                return;
        }

        var success = false;
        var request = Grim2.requestExtendSession(function(args) {});
        if (Grim2Util::__deprecated__join__(context, request))
        {
            if (Grim2.decodeResult(request))
            {
                PROJECT.history['GTModeRoot::lastextendsession'] = now.getBySecond();
                success = true;
            }
        }

        if (!success)
        {
            Grim2.setInitialize(false);
            context.pushEvent(main::menu::MFunctionEvent(function(context) 
            {
                LoginUtil::tryLogin(context);
                FriendList::Body::Buttons::Friend_A.setList(context);
            }, context));
        }
    }

    function showHeader(context, show)
    {
        HeaderGT5::HBox::AspecLevel.visible = show;
        HeaderGT5::HBox::BspecLevel.visible = show;
        HeaderGT5::HBox::Credits.visible = show;
        HeaderGT5::HBox::RidingCar.visible = show;
    }

    // Opens a user modal with user information.
    function showProfileIf(context, user_id)
    {
        var pdinetwork_user_id = nil;
        if (user_id == Grim2.getLoginUserId())
            pdinetwork_user_id = PDINetwork.getMyUserId();
        else
        {
            pdinetwork_user_id = PDINetwork.getFriendList(user_id);
            if (pdinetwork_user_id == nil)
            {
                if (NP.initializeLookup())
                    pdinetwork_user_id = NP.lookupNpId(user_id);
                NP.finalizeLookup();
            }
        }

        if (pdinetwork_user_id != nil)
            UserProfileProject::ProfilePopup.open(context, pdinetwork_user_id);
        else
            main::sound.play("disable");
    }

    // Checks if the current user has entitlement to the corvette c7 proto (server special status check) and gives it.
    function checkCorvetteC7Proto(context)
    {
        if (GAME_STATUS.user_profile.context.corvette_c7_proto_bm > 0)
            return;

        var registration = 1001; // ID sent to server
        var request = UserProfile2.requestSpecialStatus(registration, function(args) {});
        if (!Grim2Util::__deprecated__join__(context, request))
            return;

        var res = UserProfile2.decodeResult(request);
        if (res > 0)
            GAME_STATUS.user_profile.context.corvette_c7_proto_bm = 1;
    }

    // Main root methods here.
    function open(context)
    {
        SequenceUtil::startPage(context, ROOT);
    }

    method onLoad(context)
    {
        main::ORG.applyGameResolution();
    }

    function close(context)
    {
        PROJECT.history['GTModeRoot::FocusWidgetName'] = "";
        PROJECT.history['GTModeRoot::lounge_name'] = "";
        SequenceUtil::startProject(context, "gttop");
    }

    method onCancel(context)
    {
        if (self.active_friend == nil)
        {
            main::sound.play("cancel");
            ROOT.setFocus(Title::MyHome::Exit);
        }
        else
        {
            Title::Friend::MyHome.goMyHome(context, "cancel");
        }

        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            default:
                ; // Fallthrough
        }

        return EVENTRESULT_CONTINUE;
    }

    method onInitialize(context)
    {
        if (PROJECT.history['GTModeRoot::outofservice'])
        {
            if (Grim2.isOutOfService())
            {
                CourseFileUtil::setForceOffline();
                PhotoFileUtil::setForceOffline();
                GAME_STATUS.user_profile.garage.setForceOffline();
                GAME_STATUS.user_profile.residence.setForceOffline();
            }

            PROJECT.history['GTModeRoot::outofservice'] = false;
            checkCorvetteC7Proto(context);
        }

        // Setup online session extension check for every 10 hours
        if (self.extend_watcher == nil)
            self.extend_watcher = WatcherUtil::Create(context, onTickExtend, 10 * 60 * 60);

        // Set 60FPS (top menu was most likely set to 30FPS)
        main::menu::FrameInterval = 1;

        self.hidden.visible = false;
        self.hidden.ItemBbs::New.visible = false;
        self.hidden.ItemBbs::TextFace.text = "";
        self.hidden.ItemBbs::Info::TextFace.text = "";
        self.hidden.ItemBbs::Info::DateTime::TextFaceDate.text = "";
        self.hidden.ItemBbs::Info::DateTime::TextFaceTime.text = "";

        self.hidden.ItemGTMail::New.visible = false;
        self.hidden.ItemGTMail::TextFace.text = "";
        self.hidden.ItemGTMail::Info::TextFace.text = "";
        self.hidden.ItemGTMail::Info::DateTime::TextFaceDate.text = "";
        self.hidden.ItemGTMail::Info::DateTime::TextFaceTime.text = "";

        self.hidden.ItemActionLog::DateTime::TextFaceDate.text = "";
        self.hidden.ItemActionLog::DateTime::TextFaceTime.text = "";
        
        Menu::Friend::Tab::GTUniverse.insensitive = true;
        Menu::Friend::Buttons::Garage.insensitive = true;
        Menu::Friend::Buttons::Music.insensitive = true;
        Menu::Friend::Buttons::Replay.insensitive = true;
        Menu::Friend::Buttons::Item.insensitive = true;
        Menu::Friend::Buttons::Driver.insensitive = true;
        Menu::Friend::Buttons::Museum.insensitive = true;

        // Museum unsupported in chinese
        if (pdiext::MProductInformation::GetGameRegionCode() == "tw")
        {
            Menu::MyHome::Buttons::Museum.insensitive = true;
            Menu::Friend::Buttons::Museum.insensitive = true;
            Menu::MyHome::Buttons::Museum::iconI.visible = false;
            Menu::Friend::Buttons::Museum::iconI.visible = false;
        }

        extendSessionIf(context);

        FriendList::Body::Buttons::Friend_A.active = true;

        HeaderGT5::HBox::RidingCar.visible = true;

        GTUniversePane::ButtonHelpGT5.set(context, [
            [GTUniversePane::ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "Arcade", "accept")],
            [GTUniversePane::ButtonHelpGT5.getCancelButtonName(), context.translate(ROOT, "Arcade", "cancel")],
        ]);

        PrivateLoungePane::ButtonHelpGT5.set(context, [
            [GTUniversePane::ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "Arcade", "accept")],
            ["Triangle", context.translate(ROOT, "MyHome", "BUTTON_HELP_MENU")],
            [GTUniversePane::ButtonHelpGT5.getCancelButtonName(), context.translate(ROOT, "Arcade", "cancel")],
        ]);
        PrivateLoungePane::ButtonHelpGT5.setInsensitive("Triangle", true);

        StatusPane::ButtonHelpGT5.set(context, [
            [GTUniversePane::ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "Arcade", "accept")],
            [GTUniversePane::ButtonHelpGT5.getCancelButtonName(), context.translate(ROOT, "Arcade", "cancel")],
        ]);

        GTUniversePane.insensitive = true;
        PrivateLoungePane.insensitive = true;
        StatusPane.insensitive = true;

        var user_id = pdistd::getPlayerName();
        Menu::MyHome::UserProfile::OnlineId.text = user_id;

        updateAvatarPhoto(context);

        var lounge_name = PROJECT.history['GTModeRoot::lounge_name'];
        if (lounge_name == "" || user_id == lounge_name)
        {
            FriendList.visible = false;
            Title::MyHome.visible = true;
            Menu::MyHome.visible = true;
            Title::Friend.visible = false;
            Menu::Friend.visible = false;

            changeToMyHome(context, GTUniversePane);

            if (PROJECT.history['GTModeRoot::PrivateLounge'])
            {
                PROJECT.history['GTModeRoot::PrivateLounge'] = false;
                PrivateLoungePane.open(context, Grim2.getLoginUserId(), true, false);
            }
        }
        else
        {
            var friend_list = OnlineUtility.getFriendPresenceList();
            foreach (var friend in friend_list)
            {
                if (friend["id"].toString() == lounge_name)
                {
                    Title::MyHome.visible = false;
                    Menu::MyHome.visible = false;
                    Title::Friend.visible = true;
                    Menu::Friend.visible = true;
                    break;
                }
            }

            FriendList.visible = false;
            Title::MyHome.visible = true;
            Menu::MyHome.visible = true;
            Title::Friend.visible = false;
            Menu::Friend.visible = false;

            changeToMyHome(context, GTUniversePane);
        }

        var adj = main::menu::MAdjustment();
        FriendList::Body::List.v_adjustment = adj;
        FriendList::Body::VScrollbar.adjustment = adj;

        // Sync up friend list from NP
        if (LoginUtil::isOnline())
        {
            var friend_count = PROJECT.history['GTModeRoot::friend_count'];
            var friend_list = NP.getFriendList();
            if (friend_list.size != friend_count)
            {
                var friend_list_csv = friend_list.join(",");
                UserProfile2.requestUpdateFriendList(friend_list_csv, function(args) {});
                PROJECT.history['GTModeRoot::friend_count'] = friend_list.size;
            }
        }
        FriendList::Body::Buttons::Friend_A.setList(context);

        if (ROOT.active_friend == nil)
        {
            Menu::MyHome::Tab::GTUniverse::ImageFaceA2::ScalarInterpolator.start();
            Menu::MyHome::Tab::PrivateLounge::ImageFaceA2::ScalarInterpolator.start();
            Menu::MyHome::Tab::Status::ImageFaceA2::ScalarInterpolator.start();
        }

        GameItemUtil::horn_format_no = context.translate(ROOT, "Number", "FORMAT_NO");

        // Set cursor position to last state
        var focus_widget_name = PROJECT.history['GTModeRoot::FocusWidgetName'];
        var focus_widget = focus_widget_name != "" ? ROOT.getModuleAttribute(focus_widget_name) : nil;
        PROJECT.history['GTModeRoot::FocusWidgetName'] = "";
        ROOT.setFocus(focus_widget != nil ? focus_widget : ROOT::Menu::MyHome::Tab::GTUniverse);

        context.pushEvent(main::menu::MFunctionEvent(checkInformation, context));
        context.pushEvent(menu::MScriptEvent(context, ROOT, "postInitialize"));

        SoundUtil::SetSystemBGMEnable(context, true);
        SoundUtil::MenuBGMCrossfadeGroup("menu", 0.0, 3.0, true);
        self.beeped_once = false;
    }

    method postInitialize(context)
    {
        SaveDataUtilGT5::checkSaveEveryWhere(context);
    }

    method onFinalize(context)
    {
        main::Course.clearCallback();
        main::EventRace2.clearCallback();
        main::Bbs2.clearCallback();
        main::GTMail.clearCallback();
        main::ActionLog.clearCallback();
        main::UserProfile2.clearCallback();
        main::ItemBox.clearCallback();
        main::Photo.clearCallback();
        main::Museum2.clearCallback();
        main::OnlineBSpec.clearCallback();
        main::Grim2.clearCallback();

        DialogUtil::cancelConfirmDialog(context);

        if (self.extend_watcher != nil)
        {
            WatcherUtil::Delete(self.extend_watcher);
            self.extend_watcher = nil;
        }

        GameItemUtil::horn_format_no = nil;
    }

    method onTickExtend(context)
    {
        Grim2.requestExtendSession(function(args) {});
    }

    method updateAvatarPhoto(context)
    {
        var avatar_photo_id = GLOBAL_STATUS.user_profile.context.avatar_photo_id;
        if (avatar_photo_id != 0)
        {
            var photo = PhotoFileUtil::get(avatar_photo_id);
            if (photo != nil)
                Menu::MyHome::UserProfile::Id::ImageFace.image_path = photo.filename_t;
        }
        else
            Menu::MyHome::UserProfile::Id::ImageFace.image_path = "";
    }

    // Updates server with current home profile status
    method sendMyHomeProfile(context, trophy_achieve_rate)
    {
        if (!LoginUtil::isOnline())
            return;

        var previous_exp = PROJECT.history['GTModeRoot::exp'];
        var previous_cash = PROJECT.history['GTModeRoot::cash'];
        var current_exp = GAME_STATUS.user_profile.getAspecCurrentPoint() + GAME_STATUS.user_profile.getBspecCurrentPoint();
        var current_cash = GAME_STATUS.user_profile.cash;

        if (previous_exp != current_exp || previous_cash != current_cash)
        {
            PROJECT.history['GTModeRoot::exp'] = current_exp;
            PROJECT.history['GTModeRoot::cash'] = current_cash;
            
            var win_count = GAME_STATUS.user_profile.total_aspec_win + GAME_STATUS.user_profile.total_bspec_win;
            var odometer = GAME_STATUS.user_profile.total_aspec_running_km + GAME_STATUS.user_profile.total_bspec_running_km;
            var license = LicenseUtil::getString();
            var license_level = license == "" ? -1 : LicenseUtil::CATEGORY[license];
            |var license_gold, var license_silver, var license_bronze| = LicenseUtil::getCountOfResult();

            UserProfile2.requestUpdateMyHomeProfile(GAME_STATUS.user_profile.getAspecLevel(),
                GAME_STATUS.user_profile.getAspecCurrentPoint(),
                GAME_STATUS.user_profile.getBspecLevel(),
                GAME_STATUS.user_profile.getBspecCurrentPoint(),
                GAME_STATUS.user_profile.record.getAchievement(),
                GAME_STATUS.user_profile.cash,
                win_count,
                GAME_STATUS.user_profile.garage.getCount(),
                trophy_achieve_rate,
                odometer,
                license_level,
                license_gold,
                license_silver,
                license_bronze,
                function(args) {}
            );
        }

        if (PROJECT.history['GTModeRoot::updateDriverItem'])
        {
            var aspec_dp = GAME_STATUS.user_profile.residence.referPlayer();
            UserProfile2.requestUpdateHelmet(aspec_dp.head_code, aspec_dp.head_color_code, function(args) {});
            UserProfile2.requestUpdateWear(aspec_dp.body_code, aspec_dp.body_color_code, function(args) {});
            UserProfile2.clearMe();
            PROJECT.history['GTModeRoot::updateDriverItem'] = false;

            Grim2Util::PUTLOG::ITEM::have();
        }
    }

    method checkInformation(context)
    {
        var trophy_achieve_rate = -1;
        trophy_achieve_rate = PDINetwork.getTrophyAchievementRate();
        sendMyHomeProfile(context, trophy_achieve_rate);

        BalloonTip.reset_value();

        var focus_widget = ROOT.getFocusWidget();
        ROOT.setFocus(nil);

        self.myhome_setting_level_on_start = GLOBAL_STATUS.user_profile.context.myhome_setting_level;
        checkMyHomeSetting(context);

        var result1 = PresentFunction::checkFirstOfAll(context);
        var result2 = PresentFunction::checkUnLock(context);

        if (result1 || result2)
        {
            GTUniversePane::Tranpo.update(context);
            SaveDataUtilGT5::saveEveryWhere(context);
        }

        var result3 = PresentFunction::checkEnding1(context);
        if (result3)
            return;

        var result4 = PresentFunction::checkEnding2(context);
        if (result4)
            return;

        PresentFunction::checkEnding1BonusMusic(context);
        PresentFunction::checkTrophy(context);
        PresentFunction::checkGreeting(context);

        ROOT.setFocus(focus_widget);
    }

    // Attempts to update home color/wallpaper on the server, returns whether successful
    method tryUpdateMyHomeDesign(context, result)
    {
        if (!LoginUtil::isOnline())
            return false;

        var request = GrimFacade::UserProfile::requestUpdateMyHomeDesign(context, result["color"], result["wallpaper"], function(args) {});
        if (request == nil)
            return false;

        return Grim2Util::__deprecated__join__(context, request) && UserProfile2.decodeResult(request);
    }

    // Brings GTMode's initial dialogs for setup
    method checkMyHomeSetting(context)
    {
        var myhome_setting_level = GLOBAL_STATUS.user_profile.context.myhome_setting_level;
        if (myhome_setting_level == 0)
        {
            INTRODUCTION(context, ROOT, "MYHOME_DRIVER");

            GLOBAL_STATUS.user_profile.context.myhome_setting_level = 1;
            checkMyHomeSetting(context);
            INTRODUCTION(context, ROOT, "MYHOME_FINISH");
        }
        else if (myhome_setting_level == 1 || (myhome_setting_level == 2 && LoginUtil::isOnline()))
        {
            INTRODUCTION(context, ROOT, "MYHOME_THEME");

            var result = SettingMyHomeDesignDialog.open(context, Master::getMenuColorList(), Master::getWallpaperList(), Title::MyHome::Setting::onChangeMyHomeDesign);
            if (result == nil)
            {
                Grim2.setInitialize(false);
                return;
            }

            GLOBAL_STATUS.user_profile.context.myhome_color_id = result["color"];
            GLOBAL_STATUS.user_profile.context.myhome_wallpaper_id = result["wallpaper"];

            updateAvatarPhoto(context);

            if (LoginUtil::isOnline())
            {
                ActionLogUtil::newGame();
                
                var aspec_dp = GAME_STATUS.user_profile.residence.referPlayer();
                UserProfile2.requestUpdateHelmet(aspec_dp.head_code, aspec_dp.head_color_code, function(args) {});
                UserProfile2.requestUpdateWear(aspec_dp.body_code, aspec_dp.body_color_code, function(args) {});
            }

            if (tryUpdateMyHomeDesign(context, result))
            {
                GLOBAL_STATUS.user_profile.context.myhome_setting_level = 3;
                GAME_STATUS.user_profile.context.need_save = SaveDataUtilGT5::STATUSCODE::NEED_SAVE;
                ROOT.checkMyHomeSetting(context);
            }
            else
            {
                Grim2.setInitialize(false);
                GLOBAL_STATUS.user_profile.context.myhome_setting_level = 2;
                saveNow(context);
            }
        }
        else if (myhome_setting_level == 3)
        {
            if (!LoginUtil::isOnline())
                return;

            INTRODUCTION(context, ROOT, "MYHOME_PROFILE");

            var res = SettingOnlineProfileDialog.open(context);
            if (res)
            {
                GLOBAL_STATUS.user_profile.context.myhome_setting_level = 4;
                GAME_STATUS.user_profile.context.need_save = SaveDataUtilGT5::STATUSCODE::NEED_SAVE;
                checkMyHomeSetting(context);
            }
        }
        else if (myhome_setting_level == 4)
        {
            // Useless step?
            GLOBAL_STATUS.user_profile.context.myhome_setting_level = 5;
            checkMyHomeSetting(context);
        }
        else if (myhome_setting_level == 5)
        {
            GLOBAL_STATUS.user_profile.context.myhome_setting_level = 6;
            saveNow(context);
            UserProfile2.clearMe();
        }
        else
            ;
    }

    // Applies background color
    function setMenuColor(context, color_id)
    {
        |var r, var g, var b| = Master::getMenuColor(color_id);

        // Setup fade from top (black) to bottom (user specified color)
        ROOT.bg.color.face_color = [
            [0x00, 0x00, 0x00, 0xFF], // Top Left (black)
            [0x00, 0x00, 0x00, 0xFF], // Top Right (black)
            [   r,    g,    b, 0xFF], // Bottom Left (user color)
            [   r,    g,    b, 0xFF], // Bottom Right (user color)
        ];

        var color = main::menu::MColorObject(r / 255.0, g / 255.0, b / 255.0);
        if (ROOT.active_friend != nil)
        {
            Menu::Friend::UserProfile::Id::bg.setColor(color);
        }
        else
        {
            Menu::MyHome::UserProfile::Id::bg.setColor(color);
        }

        ROOT.PrivateLoungePane::Buttons::Focus::Paddock::bg.setColor(color);
    }

    // Applies background wallpaper
    function setWallpaper(context, wallpaper_id)
    {
        ROOT.bg.ImageFace.image_path = Master::getWallpaperPath(wallpaper_id);
    }

    // Applies background color & wallpaper
    function setThemeImageColor(context, color_id, wallpaper_id, sakura_status_path)
    {
        setMenuColor(context, color_id);
        setWallpaper(context, wallpaper_id);
    }

    // Switch to self profile view
    function changeToMyHome(context, pane, friend)
    {
        if (ROOT.active_pane != nil && ROOT.active_friend == nil)
            return;

        context.disableInput();

        var base_time = pdistd::GetSystemTimeMicroSecond();
        var need_update = false;
        var a_flag = ROOT.active_friend != nil;

        if (ROOT.active_friend != nil)
        {
            fire(true, Menu::MyHome, Title::ImageFace, Title::MyHome);
            fire(false, Title::Friend, Menu::Friend);
            need_update = true;
        }

        if (ROOT.active_pane != nil && pane != ROOT.active_pane)
        {
            ROOT.active_pane.close(context);
        }

        ROOT.active_friend = nil;
        ROOT::bg::ScalarInterpolator.on_effect_end = function(context)
        {
            ROOT::bg::ScalarInterpolator.on_effect_end = nil;

            {
                var sakura = SAKURA_DATA[0];
                setThemeImageColor(context, 
                    GLOBAL_STATUS.user_profile.context.myhome_color_id,
                    GLOBAL_STATUS.user_profile.context.myhome_wallpaper_id, 
                    sakura["status"]);

                var image_path = Menu::MyHome::UserProfile::Id::ImageFace.image_path;
                PrivateLoungePane::Buttons::Focus::Paddock::ImageFace.image_path = image_path;
                PrivateLoungePane::Children::TextFaceUserId.text = Grim2.getLoginUserId();
            }

            fire(true, ROOT::bg);

            if (ROOT.active_pane == pane)
            {
                var show_header = pane != PrivateLoungePane;
                showHeader(context, show_header);
            }
        }

        fire(false, ROOT::bg);
        pane.open(context, nil, false, false);

        if (need_update)
        {
            Menu::MyHome::ScalarInterpolator.on_effect_end = nil;
            Title::MyHome.visible = true;
            Menu::MyHome.visible = true;
        }

        var wait_time = 500000 - (pdistd::GetSystemTimeMicroSecond() - base_time);
        if (wait_time > 0)
            pdistd::DelayThread(wait_time);

        if (a_flag)
        {
            Title::Friend.visible = false;
            Menu::Friend.visible = false;
        }

        context.enableInput();
    }

    // Setup friend profile information
    function showFriend(context, user_profile, sakura)
    {
        setThemeImageColor(context, user_profile["menu_color"], user_profile["menu_matiere"], sakura["status"]);
        setPhotoImage(context, user_profile["photo_id_avatar"], Menu::Friend::UserProfile::Id::ImageFace);
        setPhotoImage(context, user_profile["photo_id_avatar"], PrivateLoungePane::Buttons::Focus::Paddock::ImageFace);

        fire(true, ROOT::bg);

        showHeader(context, false);

        Menu::Friend::Message::SBox::ToolTipFace.remove();
        Menu::Friend::Message::SBox::ToolTipFace.action_type = 1;
        Menu::Friend::Message::SBox::ToolTipFace.resetAction();

        var message = user_profile["welcomemessage"];
        Menu::Friend::Message::SBox::ToolTipFace.value = message;

        if (message != "")
            Menu::Friend::Message::ScalarInterpolator.restart();
        else
            Menu::Friend::Message::ScalarInterpolator.reset();

        Menu::Friend::Buttons::Photo.insensitive = true;
        Menu::Friend::Buttons::Course.insensitive = true;

        var user_id = user_profile["user_id"];
        Photo.requestList(user_id, function(args)
        {
            |var context, var request| = args;
            if (request.isDone())
            {
                var photo_list = Photo.decodePhotoList(request);
                if (photo_list.size > 0)
                    Menu::Friend::Buttons::Photo.insensitive = false;
            }
        });

        Course.requestList(user_id, function(args)
        {
            |var context, var request| = args;
            if (request.isDone())
            {
                var course_list = Course.decodeCourseList(request);
                if (course_list.size > 0)
                    Menu::Friend::Buttons::Course.insensitive = false;
            }
        });
    }

    // Switch to friend profile view
    function changeToFriend(context, friend, pane)
    {
        if (ROOT.active_friend == friend)
            return;

        context.disableInput();

        var base_time = pdistd::GetSystemTimeMicroSecond();
        var friend_to_friend = false;
        var a_flag = ROOT.active_friend == nil;

        if (ROOT.active_friend == nil)
        {
            fire(true, Menu::Friend, Title::Friend);
            fire(false, Title::ImageFace, Title::MyHome, Menu::MyHome);
        }
        else
        {
            friend_to_friend = true;
        }

        if (!friend_to_friend && ROOT.active_pane != nil && pane != ROOT.active_pane)
            ROOT.active_pane.close(context);

        ROOT.active_friend = friend;
        ROOT::bg::ScalarInterpolator.on_effect_end = function(context)
        {
            ROOT::bg::ScalarInterpolator.on_effect_end = nil;

            if (friend["user_profile"] != nil)
            {
                var u = friend["user_profile"];
                Menu::Friend::UserProfile::OnlineId.text = u["user_id"];
                PrivateLoungePane::Children::TextFaceUserId.text = u["user_id"];
                var sakura = friend["sakura"];
                showFriend(context, u, sakura);
            }
            else
            {
                UserProfile2.requestUserProfile(friend["id"].toString(), function(args) 
                {
                    |var context, var request| = args;
                    if (request.isDone())
                    {
                        var u = UserProfile2.decodeUserProfile(request);
                        var index = pdistd::MRandom::GetValue(0, 8);
                        var sakura = SAKURA_DATA[index];
                        showFriend(context, u, sakura);
                    }
                });
            }
        }

        fire(false, ROOT::bg);
        pane.open(context, friend, false, friend_to_friend);

        if (!friend_to_friend)
        {
            Title::Friend::ScalarInterpolator.on_effect_end = nil;
            Title::Friend.visible = true;
            Menu::Friend.visible = true;
        }

        var wait_time = 500000 - (pdistd::GetSystemTimeMicroSecond() - base_time);
        if (wait_time > 0)
            pdistd::DelayThread(wait_time);

        if (a_flag)
        {
            Title::MyHome.visible = false;
            Menu::MyHome.visible = false;
        }

        context.enableInput();
    }

    // BBS Stuff
    function createSampleBbs(context, gt_friend_list)
    {
        var need_create = PROJECT.history['GTModeRoot::createSampleBbs'];
        if (need_create == nil || !need_create)
            return;

        GAME_STATUS.user_profile.bbs.removeSample();

        var N = 10;
        var BASE = 100001;
        var SAMPLE_MAX_MASATSUNA = 58;
        var SAMPLE_MAX_YAMAUCHI = 40;
        var SAMPLE_MAX = SAMPLE_MAX_MASATSUNA + SAMPLE_MAX_YAMAUCHI;

        var sample_list = Array(SAMPLE_MAX);
        for (var i = 0; i < SAMPLE_MAX_MASATSUNA; ++i)
            sample_list[i] = context.translate(ROOT, "SampleTextBBS", "BBS%03d".format(i + 1));

        for (var i = 0; i < SAMPLE_MAX_YAMAUCHI; ++i)
            sample_list[i + SAMPLE_MAX_MASATSUNA] = context.translate(ROOT, "SampleTextBBS", "BBS1%04d".format(i + 1));

        sample_list.randomShuffle();

        var friend_list = Array(gt_friend_list.size);
        var bbs_board_id_list = Array(gt_friend_list.size);

        for (var i = 0; i < gt_friend_list.size; ++i)
        {
            var user_id = gt_friend_list[i]["id"].toString();
            var request = UserProfile2.requestUserProfile(user_id, function(args) {});
            var bbs_board_id = 0;

            if (Grim2Util::__deprecated__join__(context, request))
            {
                var u = UserProfile2.decodeUserProfile(request);
                bbs_board_id = u["user_number"];
            }

            friend_list[i] = ["user_id" : user_id];
            bbs_board_id_list[i] = bbs_board_id;
        }

        var index = 0;
        foreach (var gt_friend in gt_friend_list)
        {
            var comment_id = BASE + (index * N);
            var user_id = gt_friend["id"];
            var bbs_board_id = bbs_board_id_list[index];

            var create_time = Array(N);
            var now = pdiext::getBetterTime().getBySecond();
            var range = 60 * 60 * 24 * 3;
            for (var i = 0; i < N; ++i)
            {
                var datetime = pdistd::MTime();
                datetime.setBySecond(now - pdistd::MRandom::GetValue(0, range));
                create_time[i] = datetime;
            }

            create_time.sort();
            friend_list.randomShuffle();
    
            var bbs_comment_list = Array(N);
            for (var i = 0; i < N; ++i)
            {
                var friend = friend_list[i % friend_list.size];
                var bbs_comment = [
                    "comment_id" : comment_id++,
                    "board_id" : bbs_board_id,
                    "user_id" : friend["user_id"],
                    "comment" : sample_list[(i + (index * N)) % SAMPLE_MAX],
                    "create_time" : create_time[i]
                ];
    
                bbs_comment_list[i] = bbs_comment;
            }
    
            var res = GAME_STATUS.user_profile.bbs.addSample(bbs_comment_list);
            ++index;
        }

        PROJECT.history['GTModeRoot::createSampleBbs'] = false;
    }

    function getUserProfileList(context, order2)
    {
        if (!LoginUtil::isOnline())
            return nil;

        var key = "GTModeRoot::gt_friend_list_%{order2}";
        if (PROJECT.history[key] != nil)
            return PROJECT.history[key];
        else
        {
            var request = UserProfile2.requestSimpleFriendList(order2, function(args) {});
            if (Grim2Util::__deprecated__join__(context, request))
            {
                var user_profile_list = UserProfile2.decodeUserProfileList(request);
                var list = Array();
                foreach (var u in user_profile_list)
                {
                    list.push([
                        "user_id" : u["user_id"]
                    ]);
                }

                PROJECT.history[key] = list;
                return list;
            }

            return nil;
        }
    }

    function initializeFriendList(context, order, listbox)
    {
        listbox.order = nil;
        listbox.order = order;

        var user_id = Grim2.getLoginUserId();
        var current_user = user_id;

        if (ROOT.active_friend != nil)
            current_user = ROOT.active_friend["id"].toString();

        listbox.setItemCount(0);
        listbox.setItemTemplate(context, hidden::ItemFriend);
        listbox.gt_friend_list = nil;
        listbox.insensitive = true;

        var order2 = order == "ID" ? "A" : order;
        var np_friend_list = OnlineUtility.getFriendPresenceList();
        var user_profile_list = getUserProfileList(context, order2);

        if (user_profile_list != nil)
        {
            var gt_friend_list = Array();
            var focus_index = 0;
            var index = 0;
            if (order == "ID")
            {
                np_friend_list.sort(function(a, b) 
                {
                    var presenceA = a["presenceState"] == pdistd::PresenceState::SameContext ? 0 : 1;
                    var presenceB = b["presenceState"] == pdistd::PresenceState::SameContext ? 0 : 1;

                    if (presenceA == presenceB)
                        return a["id"].toString().upcase() < b["id"].toString().upcase();
                    else
                        return presenceA < presenceB;
                });

                np_friend_list.unshift([
                    "id" : user_id
                ]);

                foreach (var f in np_friend_list)
                {
                    foreach (var user_profile in user_profile_list)
                    {
                        if (f["id"].toString() == user_profile["user_id"])
                        {
                            gt_friend_list.push(f);
                            if (current_user == f["id"].toString())
                                focus_index = index;

                            ++index;
                            break;
                        }
                    }
                }
            }
            else
            {
                np_friend_list.unshift([
                    "id" : user_id
                ]);

                foreach (var user_profile in user_profile_list)
                {
                    foreach (var f in np_friend_list)
                    {
                        if (f["id"].toString() == user_profile["user_id"])
                        {
                            gt_friend_list.push(f);
                            if (current_user == user_profile["user_id"])
                                focus_index = index;

                            ++index;
                            break;
                        }
                    }
                }
            }
            
            listbox.insensitive = false;
            listbox.gt_friend_list = gt_friend_list;
            listbox.setItemCount(gt_friend_list.size);
            listbox.focus_index = focus_index;
            listbox.active_index = focus_index;
        }
    }

    // Beep with mail receive notification sound
    method beepAtOnce()
    {
        if (self.beeped_once != true)
        {
            self.beeped_once = true;
            main::sound.play("mail_receive");
        }
    }

    module Title
    {
        import __BalloonTarget__::*;

        // Left side bar with buttons (News/Save/Settings/Exit)
        module MyHome
        {
            module News
            {
                method onActivate(context)
                {
                    CHECK_NOT_DEMO();
                    CHECK_ONLINE_PROMPT();
                    
                    main::sound.play("ok");

                    var project = main::manager.loadProject("%{main::PROJECT_ROOT_DIR}/news/news");
                    self finally 
                    { 
                        main::manager.unloadProject(project); 
                    }

                    NewsProject::GTNewsPopup.open(context);
                    return EVENTRESULT_FILTER;
                }
            }

            module Save
            {
                method onActivate(context)
                {
                    CHECK_NOT_DEMO();

                    sound.play("ok");

                    SaveDataUtilGT5::saveAutoForGame(context);
                    return EVENTRESULT_FILTER;
                }
            }

            module Setting
            {
                function onChangeMyHomeDesign(context, category, value)
                {
                    if (category == "color")
                        setMenuColor(context, value);
                    else if (category == "wallpaper")
                        setWallpaper(context, value);
                }

                method onSettingMyHomeDesign(context, args)
                {
                    CHECK_ONLINE_GRANDTOP();

                    var result = SettingMyHomeDesignDialog.open(context, 
                        Master::getMenuColorList(), 
                        Master::getWallpaperList(), 
                        onChangeMyHomeDesign);

                    UserProfile2.clearMe();

                    if (result == nil)
                    {
                        setMenuColor(context, GLOBAL_STATUS.user_profile.context.myhome_color_id);
                        setWallpaper(context, GLOBAL_STATUS.user_profile.context.myhome_wallpaper_id);
                    }
                    else 
                    {
                        var need_update = GLOBAL_STATUS.user_profile.context.myhome_color_id != result["color"] ||
                            GLOBAL_STATUS.user_profile.context.myhome_wallpaper_id != result["wallpaper"];

                        if (need_update)
                        {
                            GLOBAL_STATUS.user_profile.context.myhome_color_id = result["color"];
                            GLOBAL_STATUS.user_profile.context.myhome_wallpaper_id = result["wallpaper"];

                            saveNow(context);

                            if (LoginUtil::isOnline())
                            {
                                UserProfile2.requestUpdateMyHomeDesign(result["color"], result["wallpaper"], function(args)
                                {
                                    |var context, var request| = args;
                                    if (request.isDone() && UserProfile2.decodeResult(request))
                                        OK(context, ROOT, "MSG_UPLOAD_SUCCESS");
                                    else
                                        ERROR(context, ROOT, "MSG_UPLOAD_FAILED");
                                });
                            }
                        }
                        else if (result["need_update"])
                        {
                            OK(context, ROOT, "MSG_UPLOAD_SUCCESS");
                        }
                    }

                    ROOT.updateAvatarPhoto(context);
                }

                method onSettingMyLounge(context, args)
                {
                    CursorUtil::setCursor(context, "wait");
                    
                    var user_id = Grim2.getLoginUserId();
                    var project = main::manager.loadProject("%{main::PROJECT_ROOT_DIR}/online/online");
                    self finally 
                    { 
                        main::manager.unloadProject(project); 
                    }

                    var res = OnlineUtil::editPrivateRoom(context, user_id, OnlineProject::RoomConfigRoot);
                    if (res)
                        OK(context, ROOT, "MSG_UPLOAD_SUCCESS");
                }

                method onSettingAutoMessage(context, args)
                {
                    var result = SettingAutoMessageDialog.open(context);
                    if (result)
                    {
                        saveNow(context);
                        OK(context, ROOT, "MSG_UPLOAD_SUCCESS");
                        UserProfile2.clearMe();
                    }
                }

                method onSettingOnlineProfile(context, args)
                {
                    var result = SettingOnlineProfileDialog.open(context);
                    if (result)
                    {
                        saveNow(context);
                        OK(context, ROOT, "MSG_UPLOAD_SUCCESS");
                        UserProfile2.clearMe();
                    }
                }

                method onGotoOption(context)
                {
                    PROJECT.history['LastPageName'] = ROOT.name;
                    SequenceUtil::startProject(context, "option", "gtmode");
                }

                method onActivate(context)
                {
                    main::sound.play("ok");

                    var online = LoginUtil::isOnline();
                    
                    var data_list = [
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "MYHOME_DESIGN_SETTING"), true, onSettingMyHomeDesign, nil),
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "MYLOUNGE_SETTING"), online, onSettingMyLounge, nil),
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "AUTO_MESSAGE_SETTING"), online, onSettingAutoMessage, nil),
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "ONLINE_PROFILE_SETTING"), online, onSettingOnlineProfile, nil),
                        nil,
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "OPTION"), true, onGotoOption, nil),
                        nil,
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "CANCEL"), true, function(context) {}, nil),
                    ];

                    var title = nil;
                    var x = self.sx + (self.w * self.cursor_align_x);
                    var y = self.sy + (self.h * self.cursor_align_y);

                    UIKitProject::ContextMenuPopup.open(context, x, y, title, data_list);
                    return EVENTRESULT_FILTER;
                }
            }
            
            module Manual
            {
                method onActivate(context)
                {
                    CHECK_NOT_DEMO();

                    main::sound.play("ok");
                    var project = main::manager.loadProject("%{main::PROJECT_ROOT_DIR}/manual/manual");
                    self finally 
                    { 
                        main::manager.unloadProject(project); 
                    }

                    ManualProject::ManualPopup.open(context, "GTmode");
                    menu::FrameInterval = 1;

                    return EVENTRESULT_FILTER;
                }
            }

            module Exit
            {
                method onActivate(context)
                {
                    main::sound.play("ok");
                    close(context);
                    return EVENTRESULT_FILTER;
                }
            }
        }

        module Friend
        {
            module MyHome
            {
                method goMyHome(context, sound)
                {
                    CHECK_ONLINE_GRANDTOP();

                    main::sound.play(sound);

                    ROOT::HeaderGT5::HBox::RidingCar.refresh(context);
                    ROOT.changeToMyHome(context, ROOT.active_pane);

                    FriendList::Body::List.focus_changed_by_script = true;
                    var active_index = FriendList::Body::List.active_index;
                    var item = FriendList::Body::List.getItemWidget(active_index);
                    if (item != nil)
                        fire(false, item.Image.ColorFaceF);

                    var index = 0;
                    var me = Grim2.getLoginUserId();
                    var gt_friend_list = FriendList::Body::List.gt_friend_list;

                    for (index = 0; index < gt_friend_list.size; ++index) // redeclaration of index
                    {
                        var friend = gt_friend_list[index];
                        if (me == friend["id"].toString())
                            break;
                    }

                    FriendList::Body::List.active_index = index;
                    FriendList::Body::List.focus_index = index;

                    ROOT.setFocus(FriendList::Body::List);
                }

                method onActivate(context)
                {
                    goMyHome(context, "ok");
                    return EVENTRESULT_FILTER;
                }
            }
        }
    }
    
    // Left Pane, with buttons (profile avatar, gt life/profile/community & 8 buttons)
    module Menu
    {
        import __BalloonTarget__::*;

        module MyHome
        {
            module UserProfile::Id
            {
                method onActivate(context)
                {
                    CHECK_ONLINE_GRANDTOP();

                    main::sound.play("ok");
                    MyHomeProfilePopup.open(context);
                    return EVENTRESULT_FILTER;
                }
            }

            module Tab
            {
                module GTUniverse
                {
                    method onActivate(context)
                    {
                        if (ROOT.active_pane != GTUniversePane)
                        {
                            main::sound.play("ok");
                            GTUniversePane.open(context);
                        }

                        return EVENTRESULT_FILTER;
                    }
                }

                module PrivateLounge
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
    
                        if (ROOT.active_pane != PrivateLoungePane)
                        {
                            main::sound.play("ok");
    
                            CHECK_ONLINE_PROMPT();
    
                            PrivateLoungePane.open(context, Grim2.getLoginUserId(), true, false);
                        }
    
                        return EVENTRESULT_FILTER;
                    }
                }

                module Status
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        if (ROOT.active_pane != StatusPane)
                        {
                            main::sound.play("ok");
                            StatusPane.open(context, Grim2.getLoginUserId(), true, false);
                        }
                     
                        return EVENTRESULT_FILTER;
                    }
                }
            }
            
            // 8 buttons
            module Buttons
            {
                method onFocusEnter(context, event)
                {
                    fire(true, event.widget.focusLight);
                    return EVENTRESULT_CONTINUE;
                }

                method onFocusLeave(context, event)
                {
                    fire(false, event.widget.focusLight);
                    return EVENTRESULT_CONTINUE;
                }

                method onInitialize(context)
                {
                    fire(true, Garage, Item, Photo, Music, Replay, Course, Driver, Museum);
                }

                module Garage
                {
                    method getGarageIdList(is_online)
                    {
                        if (is_online)
                            return Garage2Util::Online::getGarageIdList();
                        else
                            return Garage2Util::Favorite::getGarageIdList();
                    }

                    method hasChanged(a, b)
                    {
                        if (a.size != b.size)
                            return true;

                        for (var i = 0; i < a.size; ++i)
                        {
                            if (a[i] != b[i])
                                return true;
                        }

                        return false;
                    }

                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        main::sound.play("ok");

                        var is_online = LoginUtil::isOnline();

                        var previous_garage_id_list;
                        if (ROOT.active_pane == StatusPane)
                            previous_garage_id_list = getGarageIdList(is_online);
                        
                        GaragePopup.open(context, nil, nil, false);
                        ROOT::HeaderGT5::HBox::RidingCar.refresh(context);

                        if (ROOT.active_pane == StatusPane)
                        {
                            StatusPane::Children::Log::Credit::TextFace.text = pdiext::MMisc::GetMoneyString(GAME_STATUS.user_profile.cash);
                            var current_garage_id_list = getGarageIdList(is_online);

                            if (hasChanged(previous_garage_id_list, current_garage_id_list))
                            {
                                if (is_online)
                                {
                                    var car_list = Garage2Util::Online::getCarList("garage_id", "asc");
                                    StatusPane::Children::Car.initialize(context, car_list, false);
                                }
                                else
                                {
                                    var car_list = Garage2Util::Favorite::getCarList("garage_id", "asc");
                                    StatusPane::Children::Car.initialize(context, car_list, false);
                                }
                            }
                        }

                        return EVENTRESULT_FILTER;
                    }
                }

                module Item
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        CHECK_NOT_DEMO();
                        CHECK_GARAGE_NOT_EMPTY();

                        main::sound.play("ok");
                        ItemPopup.open(context, ItemPopup::Mode::ALL);

                        return EVENTRESULT_FILTER;
                    }
                }

                module Photo
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        main::sound.play("ok");
                        PhotoPopup.open(context, pdistd::getPlayerName(), PhotoPopup::Mode::FINDER);
                        ROOT.updateAvatarPhoto(context);
                        return EVENTRESULT_FILTER;
                    }
                }

                module Music
                {
                    method onActivate(context)
                    {
                        main::sound.play("ok");
                        MusicPopup.open(context);
                        return EVENTRESULT_FILTER;
                    }
                }

                module Course
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
    
                        main::sound.play("ok");
                        CoursePopup.open(context, pdistd::getPlayerName());
                        return EVENTRESULT_FILTER;
                    }
                }

                module Replay
                {
                    method onActivate(context)
                    {
                        main::sound.play("ok");
                        ReplayPopup.open(context);
                        return EVENTRESULT_FILTER;
                    }
                }

                module Driver
                {
                    method hasChanged(a, b)
                    {
                        if (a.size != b.size)
                            return true;

                        for (var i = 0; i < a.size; ++i)
                        {
                            if (a[i] != b[i])
                                return true;
                        }

                        return false;
                    }

                    method getResidenceIdList(is_online)
                    {
                        var driver_list;
                        if (is_online)
                            driver_list = GAME_STATUS.user_profile.residence.getOnlineDriverList();
                        else
                            driver_list = GAME_STATUS.user_profile.residence.getContractDriverList();

                        var list = [];
                        foreach (var d in driver_list)
                        {
                            list.push(d[0]);
                        }

                        return list;
                    }

                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        CHECK_NOT_DEMO();

                        main::sound.play("ok");

                        var is_online = LoginUtil::isOnline();

                        var previous_residence_id_list;
                        if (ROOT.active_pane == StatusPane)
                            previous_residence_id_list = getResidenceIdList(is_online);
                        
                        var mode = UserProfileProject::DriverPopup::Mode::FINDER;
                        var mode_params = Map();
                        var res = UserProfileProject::DriverPopup.open(context, mode, mode_params);

                        PresentFunction::checkUnLock(context);
                        if (ROOT.active_pane == StatusPane)
                        {
                            var current_residence_id_list = getResidenceIdList(is_online);
                            if (hasChanged(previous_residence_id_list, current_residence_id_list))
                            {
                                if (is_online)
                                {
                                    var user_id = Grim2.getLoginUserId();
                                    OnlineBSpec.requestDriverList(user_id, function(args) 
                                    {
                                        |var context, var request| = args;
                                        if (request.isDone())
                                        {
                                            var driver_list = OnlineBSpec.decodeDriverList(request);
                                            StatusPane::Children::Driver.initialize(context, driver_list, true);
                                        }
                                    });
                                }
                                else
                                {
                                    var driver_list = GAME_STATUS.user_profile.residence.getContractDriverList();
                                    StatusPane::Children::Driver.initialize(context, driver_list, false);
                                }
                            }
                        }

                        return EVENTRESULT_FILTER;
                    }
                }

                module Museum
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        CHECK_NOT_DEMO();
                        CHECK_ONLINE_PROMPT();

                        main::sound.play("ok");

                        if (Grim2Util::Museum::isEnable())
                            MuseumRoot.open(context);
                        else
                            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "OnlineMessage", "THIS_CANNOT_BE_SELECTED"));

                        return EVENTRESULT_FILTER;
                    }
                }
            }
        }

        module Friend
        {
            module UserProfile::Id
            {
                method onActivate(context)
                {
                    CHECK_ONLINE_GRANDTOP();

                    main::sound.play("ok");
                    var user_id = ROOT.active_friend["id"].toString();
                    MyHomeProfilePopup.open(context, user_id);
                    return EVENTRESULT_FILTER;
                }
            }

            module Tab
            {
                module PrivateLounge
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        
                        if (ROOT.active_pane != PrivateLoungePane)
                        {
                            main::sound.play("ok");
                            PrivateLoungePane.open(context, ROOT.active_friend, true, false);
                        }
                        
                        return EVENTRESULT_FILTER;
                    }
                }

                module Status
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        
                        if (ROOT.active_pane != StatusPane)
                        {
                            main::sound.play("ok");
                            StatusPane.open(context, ROOT.active_friend, true, false);
                        }
                        return EVENTRESULT_FILTER;
                    }
                }
            }

            module Buttons
            {
                method onInitialize(context)
                {
                    fire(true, Garage, Item, Photo, Music, Replay, Course, Driver, Museum);
                }

                method onFocusEnter(context, event)
                {
                    fire(true, event.widget.focusLight);
                    return EVENTRESULT_CONTINUE;
                }

                method onFocusLeave(context, event)
                {
                    fire(false, event.widget.focusLight);
                    return EVENTRESULT_CONTINUE;
                }

                module Photo
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        main::sound.play("ok");
                        PhotoPopup.open(context, ROOT.active_friend["id"].toString(), PhotoPopup::Mode::FINDER);
                        return EVENTRESULT_FILTER;
                    }
                }

                module Course
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        main::sound.play("ok");
                        CoursePopup.open(context, ROOT.active_friend["id"].toString());
                        return EVENTRESULT_FILTER;
                    }
                }
            }
        }
    }

    // Friend pane (when in community)
    module FriendList
    {
        module Body
        {
            // Filters (at the top)
            module Buttons
            {
                import __BalloonTarget__::*;

                method setActive(id, a, b)
                {
                    startActors(Friend_ID.ColorFaceA, !id, false);
                    startActors(Friend_A.ColorFaceA, !a, false);
                    startActors(Friend_B.ColorFaceA, !b, false);

                    Friend_ID.active = id;
                    Friend_A.active = a;
                    Friend_B.active = b;
                }

                module Friend_ID
                {
                    method setList(context)
                    {
                        setActive(true, false, false);
                        initializeFriendList(context, "ID", List);
                    }

                    method onActivate(context, event, silent = false)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        
                        main::sound.play("ok");
                        if (!self.active)
                            setList(context);

                        return EVENTRESULT_FILTER;
                    }
                }

                module Friend_A
                {
                    method setList(context)
                    {
                        setActive(false, true, false);
                        initializeFriendList(context, "A", List);
                    }

                    method onActivate(context, event)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        
                        main::sound.play("ok");
                        if (!self.active)
                            setList(context);

                        return EVENTRESULT_FILTER;
                    }
                }

                module Friend_B
                {
                    method setList(context)
                    {
                        setActive(false, false, true);
                        initializeFriendList(context, "B", List);
                    }

                    method onActivate(context, event)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        
                        main::sound.play("ok");
                        if (!self.active)
                            setList(context);

                        return EVENTRESULT_FILTER;
                    }
                }
            }

            // Actual friend list container
            module List
            {
                attribute gt_friend_list;
                attribute active_index = 0;
                attribute order = "ID";
                attribute focus_changed_by_script = false;

                method onVisibleNotify(context, indices)
                {
                    foreach (var i in indices)
                    {
                        if (self.getItemVisible(i))
                        {
                            var item = self.getItemWidget(i);
                            if (item == nil)
                            {
                                item = self.getItemWidget(i, context);
                                item.initialize(context, i, self.gt_friend_list[i], order);
                                if (self.active_index == i)
                                {
                                    startActors(item.Image.ColorFaceF, false);
                                }
                            } 
                        }
                        else
                            self.setItemWidget(i, context, nil);
                    }
                }

                method onActivate(context)
                {
                    CHECK_ONLINE_GRANDTOP();

                    main::sound.play("ok");

                    if (self.active_index != self.focus_index)
                    {
                        var old_item = self.getItemWidget(self.active_index);
                        if (old_item != nil)
                            fire(false, old_item.Image.ColorFaceF);

                        self.active_index = self.focus_index;
                        var new_item = self.getItemWidget(self.focus_index);
                        if (new_item != nil)
                            fire(true, new_item.Image.ColorFaceF);
                    }

                    var friend = self.gt_friend_list[self.focus_index];
                    var myself = friend["id"].toString() == Grim2.getLoginUserId();

                    if (myself)
                    {
                        changeToMyHome(context, ROOT.active_pane, friend);
                    }
                    else
                    {
                        var friendList = OnlineUtility.getFriendPresenceList();
                        foreach (var f in friendList)
                        {
                            if (f["id"].toString() == friend["id"].toString())
                            {
                                foreach (|var key, var value| in f)
                                    friend[key] = value;
                                break;
                            }
                        }

                        changeToFriend(context, friend, ROOT.active_pane);
                    }

                    return EVENTRESULT_FILTER;
                }

                method onFocusNotify(context, new_index, old_index)
                {
                    var new_item = self.getItemWidget(new_index);
                    if (new_item != nil)
                    {
                        var id = new_item.id;
                        BalloonTip.set_value(context, new_item, id, 0);
                        fire2(true, new_item.Image);

                        if (self.focus_changed_by_script)
                        {
                            self.active_index = new_index;
                            fire(true, new_item.Image.ColorFaceF);
                        }
                    }

                    var old_item = self.getItemWidget(old_index);
                    if (old_item != nil)
                    {
                        if (!self.focus_changed_by_script)
                        {
                            fire2(false, old_item.Image);
                        }
                        else
                        {
                            fire(false, old_item.Image.ColorFaceF);
                            self.focus_changed_by_script = false;
                        }
                    }

                    return EVENTRESULT_FILTER;
                }

                method onFocusEnter(context, event)
                {
                    var item = self.getItemWidget(self.focus_index);
                    if (item != nil)
                    {
                        var id = item.id;
                        BalloonTip.set_value(context, item, id, 0);
                        startActors(item.Image, false);
                    }

                    var item_a = self.getItemWidget(self.active_index);
                    if (item_a != nil)
                    {
                        startActors(item_a.Image.ColorFaceF, false);
                    }

                    return EVENTRESULT_FILTER;
                }

                method onFocusLeave(context, event)
                {
                    BalloonTip.reset_value();

                    var item = self.getItemWidget(self.focus_index);
                    if (item != nil)
                    {
                        startActors(item.Image, true);
                    }

                    return EVENTRESULT_FILTER;
                }
            }
        }
    }

    // Third left panel (seasonals, online car dealer, etc)
    module GTUniversePane
    {
        method open(context)
        {
            if (ROOT.active_pane != nil)
                ROOT.active_pane.close(context);

            if (ROOT.active_pane != nil && ROOT.active_pane != self)
            {
                ROOT::FriendList::Body::ParallelActor.on_effect_end = function(context) 
                {
                    ROOT::FriendList::Body::ParallelActor.on_effect_end = nil;
                    ROOT::FriendList.visible = false;
                };

                ROOT::FriendList.insensitive = true;
                fire2(false, ROOT::FriendList::Body);
            }

            self.ScalarInterpolator.on_effect_end = nil;
            fire(true, self);

            self.insensitive = false;
            
            showHeader(context, true);

            Menu::MyHome::Tab::GTUniverse.active = true;
            Menu::MyHome::Tab::PrivateLounge.active = false;
            Menu::MyHome::Tab::Status.active = false;

            ROOT.active_pane = self;
        }

        method close(context)
        {
            self.ScalarInterpolator.on_effect_end = function(context) 
            {
                GTUniversePane.ScalarInterpolator.on_effect_end = nil;
            }

            self.insensitive = true;
            fire(false, self);
        }

        method onInitialize(context)
        {
            var event_categories = ["BEGINNER", "AMATEUR", "PROFESSIONAL", "EXPERT", "EXTREME", "ENDURANCE"].reverse();
            foreach (var category in event_categories)
            {
                var need_level = ABspecUtil::getMinimumNeedLevel(ABspecUtil::ASPEC_CATEGORY[category], false);
                if (GAME_STATUS.user_profile.getAspecLevel() >= need_level)
                {
                    var image_path = "image/gt5/myhome/world_aspec_%s.dds".format(category.downcase());
                    self.Mode::Mode_Aspec::ImageFace.image_path = image_path;
                    self.Mode::Mode_Aspec::ImageFaceF.image_path = image_path;
                    break;
                }
            }

            foreach (var category in event_categories)
            {
                var need_level = ABspecUtil::getMinimumNeedLevel(ABspecUtil::BSPEC_CATEGORY[category], true);
                if (GAME_STATUS.user_profile.getBspecLevel() >= need_level)
                {
                    var image_path = "image/gt5/myhome/world_bspec_%s.dds".format(category.downcase());
                    self.Mode::Mode_Bspec::ImageFace.image_path = image_path;
                    self.Mode::Mode_Bspec::ImageFaceF.image_path = image_path;
                    break;
                }
            }

            Tranpo.update(context);
        }

        module Mode
        {
            method onFocusEnter(context, event)
            {
                var w = event.widget;
                var localized_text = context.translate(ROOT, "BALLOON_" + w.name.upcase());
                BalloonTip.set_value(context, w, localized_text, 0);
                return EVENTRESULT_FILTER;
            }

            method onFocusLeave(context)
            {
                BalloonTip.reset_value();
                return EVENTRESULT_FILTER;
            }

            module Mode_Aspec
            {
                method onActivate(context)
                {
                    CHECK_NOT_DEMO();
                    CHECK_GARAGE_NOT_EMPTY();
                    CHECK_CAR_NOT_ONEMAKE_ONLY();
                    CHECK_CAR_NOT_KART();

                    main::sound.play("ok");

                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);
                    ABspecEventRoot.open(context, false);
                    return EVENTRESULT_FILTER;
                }
            }

            module Mode_Bspec
            {
                method onActivate(context)
                {
                    CHECK_NOT_DEMO();
                    CHECK_GARAGE_NOT_EMPTY();
                    CHECK_CAR_NOT_ONEMAKE_ONLY();
                    CHECK_CAR_NOT_KART();

                    if (GLOBAL_STATUS.user_profile.residence.getContractDriverCount() == 0)
                    {
                        DialogUtil::openInformationDialog(context, context.translate(ROOT, "MESSAGE_MY_DRIVERS_INTRODUCTION"));
                        return;
                    }

                    main::sound.play("ok");

                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);
                    ABspecEventRoot.open(context, true);
                    return EVENTRESULT_FILTER;
                }
            }

            module Mode_Dealer
            {
                method onActivate(context)
                {
                    CHECK_NOT_DEMO();

                    main::sound.play("ok");

                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);
                    CarDealerRoot.open(context);
                    return EVENTRESULT_FILTER;
                }
            }

            module Mode_License
            {
                method onActivate(context)
                {
                    CHECK_NOT_DEMO();
                    CHECK_GARAGE_NOT_EMPTY();

                    main::sound.play("ok");

                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);
                    LicenseRoot.open(context);
                    return EVENTRESULT_FILTER;
                }
            }

            module Mode_UsedCar
            {
                method onActivate(context)
                {
                    CHECK_NOT_DEMO();

                    main::sound.play("ok");

                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);
                    UsedCarDealerRoot.open(context, false);
                    SoundUtil::BGMFadeout(3.0);
                    return EVENTRESULT_FILTER;
                }
            }

            module Mode_Special
            {
                method onActivate(context)
                {
                    if (GAME_STATUS.user_profile.option.demo_version_code != "school_record")
                    {
                        CHECK_NOT_DEMO();
                    }

                    CHECK_GARAGE_NOT_EMPTY();

                    main::sound.play("ok");

                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);
                    SpecialEventRoot.open(context);
                    return EVENTRESULT_FILTER;
                }
            }

            module Mode_GTAuto
            {
                method onActivate(context)
                {
                    CHECK_NOT_DEMO();
                    CHECK_GARAGE_NOT_EMPTY();
                    CHECK_CAR_NOT_FRIEND();

                    main::sound.play("ok");

                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);
                    SequenceUtil::startProject(context, "gtauto", "workshop");
                    SoundUtil::BGMFadeout(3.0);
                    return EVENTRESULT_FILTER;
                }
            }

            module Mode_Photo
            {
                method onActivate(context)
                {
                    CHECK_GARAGE_NOT_EMPTY();

                    var cp = main::GAME_STATUS.user_profile.garage.getRidingCar();
                    if (gtengine::MSpecDB::isStandardModel(cp.getCarCode()))
                    {
                        main::sound.play("disable");
                        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "MESSAGE_CAN_NOT_ENTER_PHOTO_MODE_BY_STANDARD_CAR"));
                        return EVENTRESULT_FILTER;
                    }

                    main::sound.play("ok");

                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);
                    PhotoTravelRoot.open(context);
                    return EVENTRESULT_FILTER;
                }
            }

            module Mode_Practice
            {
                method onActivate(context)
                {
                    CHECK_NOT_DEMO();
                    CHECK_GARAGE_NOT_EMPTY();

                    main::sound.play("ok");

                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);
                    FreeRunRoot.open(context);
                    return EVENTRESULT_FILTER;
                }
            }

            module Mode_Store
            {
                method onActivate(context)
                {
                    CHECK_NOT_DEMO();
                    CHECK_GARAGE_NOT_EMPTY();
                    CHECK_CAR_NOT_FRIEND();

                    main::sound.play("ok");

                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);
                    SequenceUtil::startProject(context, "gtauto", "store");
                    return EVENTRESULT_FILTER;
                }
            }

            module Mode_SpeedTest
            {
                method onInitialize(context)
                {
                    self.visible = GAME_STATUS.user_profile.game_flags.getFlag("COURSE_AVAILABLE", "routex_oval");
                }

                method onActivate(context)
                {
                    CHECK_NOT_DEMO();
                    CHECK_GARAGE_NOT_EMPTY();
    
                    main::sound.play("ok");
                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);

                    var file = "/textdata/gt5/speed_test.xml";
                    var fst = pdistd::ReadFile(file);
                    var buf = fst["buffer"];
                    if (buf != nil)
                    {
                        var gp_list = GameParameterUtil::parseXML(buf);
                        if (gp_list.size > 0)
                        {
                            var gp = gp_list[0];
                            GameParameterUtil::executeEvent(context, gp, GAME_STATUS);
                        }
                    }

                    return EVENTRESULT_FILTER;
                }
            }
        }

        // Second panel (online stuff) - Seasonal Events/Online Dealer, etc
        module Event
        {
            import __BalloonTarget__::*;

            module OpenLounge
            {
                attribute ignoreDataInstall = false;

                method onActivate(context)
                {
                    CHECK_ONLINE_GRANDTOP();
                    CHECK_NOT_DEMO();
                    main::sound.play("ok");

                    CHECK_CAR_NOT_FRIEND();
                    CHECK_ONLINE_PROMPT();
                    CHECK_GARAGE_NOT_EMPTY();

                    if (!self.ignoreDataInstall)
                    {
                        CHECK_DATAINSTALL_OR_PERFORM();
                    }
                    else
                    {
                        self.ignoreDataInstall = false;
                    }

                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);
                    OpenLoungeRoot.open(context);
                    return EVENTRESULT_FILTER;
                }
            }

            module SeasonalEvents
            {
                attribute max_new_date_sec;

                method onInitialize(context)
                {
                    self.max_new_date_sec = 0L;
                    self.New.visible = false;

                    if (LoginUtil::isOnline())
                    {
                        var me = self;
                        EventRace2.requestOnlineEventList(function(args) 
                        {
                            |var context, var request| = args;
                            if (request.isDone())
                            {
                                var xml = EventRace2.getOnlineEventList();
                                var event_list = OnlineEventUtil::parse(xml);
                                var is_new = false;

                                foreach (var event in event_list)
                                {
                                    if (event["voucher"] != "" && !GAME_STATUS.entitlement.has(gtengine::EntitlementType::EVENT, event["voucher"]))
                                        continue;

                                    if (event["event_type"].toInt() == 2)
                                        continue;

                                    var new_date = event["new_date"];
                                    if (new_date == nil)
                                        continue;

                                    var new_date_sec = new_date.getBySecond();
                                    if (me != nil && me.max_new_date_sec != nil && me.max_new_date_sec < new_date_sec)
                                        me.max_new_date_sec = new_date_sec;
                                }

                                if (me != nil && me.max_new_date_sec != nil && GAME_STATUS.user_profile.context.seasonal_event_new_date < me.max_new_date_sec)
                                {
                                    var now_sec = pdiext::getBetterTime().getBySecond();
                                    if (now_sec < me.max_new_date_sec)
                                        me.New.visible = true;
                                }
                            }
                        });
                    }

                    return EVENTRESULT_FILTER;
                }

                method onActivate(context)
                {
                    CHECK_ONLINE_GRANDTOP();
                    CHECK_ONLINE_PROMPT();
                    CHECK_GARAGE_NOT_EMPTY();

                    main::sound.play("ok");

                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);
                    SeasonalEventsRoot.open(context);

                    if (self.max_new_date_sec > GAME_STATUS.user_profile.context.seasonal_event_new_date)
                        GAME_STATUS.user_profile.context.seasonal_event_new_date = self.max_new_date_sec;

                    return EVENTRESULT_FILTER;
                }
            }

            module OnlineUsedCarDealer
            {
                attribute max_new_date_sec;

                method onInitialize(context)
                {
                    self.max_new_date_sec = 0L;
                    self.New.visible = false;

                    if (LoginUtil::isOnline())
                    {
                        var me = self;
                        Grim2.requestUsedCarList(function(args) 
                        {
                            |var context, var request| = args;
                            if (request.isDone())
                            {
                                var used_car_list = Grim2.decodeUsedCarList(request);
                                var new_date = used_car_list["new_date"];
                                
                                var new_date_sec = new_date.getBySecond();
                                if (me != nil && me.max_new_date_sec != nil)
                                {
                                    me.max_new_date_sec = new_date_sec;
                                    if (GAME_STATUS.user_profile.context.hotcar_dealer_new_date < me.max_new_date_sec)
                                    {
                                        var now_sec = pdiext::getBetterTime().getBySecond();
                                        if (now_sec < me.max_new_date_sec)
                                            me.New.visible = true;
                                    }
                                }
                            }
                        });
                    }

                    return EVENTRESULT_FILTER;
                }

                method onActivate(context)
                {
                    CHECK_ONLINE_GRANDTOP();
                    CHECK_ONLINE_PROMPT();

                    main::sound.play("ok");
                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);
                    UsedCarDealerRoot.open(context, true);

                    if (self.max_new_date_sec > GAME_STATUS.user_profile.context.hotcar_dealer_new_date)
                        GAME_STATUS.user_profile.context.hotcar_dealer_new_date = self.max_new_date_sec;

                    return EVENTRESULT_FILTER;
                }
            }

            module OfficialEvents
            {
                method onActivate(context)
                {
                    CHECK_ONLINE_GRANDTOP();
                    CHECK_NOT_DEMO();
                    CHECK_ONLINE_PROMPT();
                    CHECK_GARAGE_NOT_EMPTY();

                    main::sound.play("ok");

                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);

                    if (pdiext::isQABuild())
                        OfficialEventsRoot.open(context);
                    else
                        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "THIS_CANNOT_BE_SELECTED"));

                    return EVENTRESULT_FILTER;
                }
            }
        }

        module Tranpo
        {
            import __BalloonTarget__::*;

            method onActivate(context)
            {
                CHECK_NOT_DEMO();

                var tickets = GameItemUtil::ItemBox::getPresentCarTicket();
                if (tickets.size == 0)
                {
                    main::sound.play("disable");
                    OK(context, ROOT, "NO_PRESENT_CAR_TICKET");
                }
                else
                {
                    main::sound.play("ok");
                    GTUniversePane::ButtonHelpGT5.hide();
                    PROJECT.history['GTModeRoot::FocusWidgetName'] = self.getNodePath(PROJECT::ROOT);
                    
                    var res = TranpoPopup.open(context);
                    if (!res)
                    {
                        PROJECT.history['GTModeRoot::FocusWidgetName'] = "";
                    }

                    ROOT::HeaderGT5::HBox::RidingCar.refresh(context);
                    update(context);
                    GTUniversePane::ButtonHelpGT5.appear();
                }

                return EVENTRESULT_FILTER;
            }

            method update(context)
            {
                var tickets = GameItemUtil::ItemBox::getPresentCarTicket();
                self.New.visible = tickets.size > 0;
                self.New::TextFace.text = tickets.size;
            }
        }
    }

    // Main center/right pane
    module PrivateLoungePane
    {
        attribute active_child_pane;

        method buttonHelpOn(context)
        {
            ButtonHelpGT5.setInsensitive("Triangle", false);
        }

        method buttonHelpOff(context)
        {
            ButtonHelpGT5.setInsensitive("Triangle", true);
        }

        method onCancel(context)
        {
            buttonHelpOff(context);
            return EVENTRESULT_CONTINUE;
        }

        method setButtonState(context)
        {
            var myhome_mode = ROOT.active_friend == nil;
            Buttons::Active::GTMail.visible = myhome_mode;
            Buttons::Focus::GTMailSend.visible = !myhome_mode;
            Buttons::Active::Present.visible = myhome_mode;
            Buttons::Focus::PresentSend.visible = !myhome_mode;
            Buttons::Focus::InstantRace.visible = true;

            if (myhome_mode)
            {
                Buttons::Focus::CurrentSessionPaddock.visible = false;
            }
            else
            {
                var visible = getRoomTypeString(context, ROOT.active_friend["roomType"]) != "";
                if (ROOT.active_friend["roomType"] == gtengine::RoomType::PRIVATE_LOUNGE &&
                    !ROOT.active_friend["canJoinLounge"])
                    visible = false;

                Buttons::Focus::CurrentSessionPaddock.visible = visible;
            }
        }

        method open(context, friend, change_tab, friend_to_friend)
        {
            var default_page = PDINetwork.isChatRestricted() ? Children::ActionLogChildPane : Children::BbsChildPane;
            var skip = nil;
            if (change_tab)
            {
                if (ROOT.active_pane != nil)
                    ROOT.active_pane.close(context);
                
                if (ROOT.active_pane == GTUniversePane)
                {
                    GTModeRoot::FriendList::Body::ParallelActor.on_effect_end = nil;
                    fire2(true, ROOT::FriendList::Body);
                    ROOT::FriendList.insensitive = false;
                    ROOT::FriendList.visible = true;
                }

                setButtonState(context);

                self.ScalarInterpolator.on_effect_end = nil;
                fire(true, self, self.bg);
                self.insensitive = false;
            }
            else if (friend_to_friend)
            {
                var target = self.active_child_pane;
                target.ScalarInterpolator.on_effect_end = function(context) 
                {
                    target.ScalarInterpolator.on_effect_end = nil;
                    if (target == Children::GTMailChildPane || target == Children::PresentChildPane)
                        fire(true, default_page);
                    else
                        fire(true, target);
                };
                fire(false, target);
            }
            else
            {
                var skip = true;
                var me = self;
                self.ScalarInterpolator.on_effect_end = function(context) 
                {
                    me.ScalarInterpolator.on_effect_end = nil;
                    me.setButtonState(context);
                    fire(true, me, me.bg, me.active_child_pane);
                    me.active_child_pane.initializeFinder(context);
                    me.active_child_pane.visible = true;
                };
                fire(false, self, self.bg);
                self.active_child_pane.finalizeFinder(context);
            }

            showHeader(context, false);
            if (ROOT.active_friend == nil)
            {
                Menu::MyHome::Tab::GTUniverse.active = false;
                Menu::MyHome::Tab::PrivateLounge.active = true;
                Menu::MyHome::Tab::Status.active = false;
            }
            else
            {
                Menu::Friend::Tab::PrivateLounge.active = true;
                Menu::Friend::Tab::Status.active = false;
            }

            ROOT.active_pane = self;

            var child_pane = self.active_child_pane;
            if (child_pane == nil)
                child_pane = default_page;
            else if (child_pane == Children::GTMailChildPane || child_pane == Children::PresentChildPane)
                child_pane = default_page;
            child_pane.open(context, skip);
        }
        
        method close(context)
        {
            self.ScalarInterpolator.on_effect_end = function(context) 
            {
                PrivateLoungePane.ScalarInterpolator.on_effect_end = nil;
            };

            self.insensitive = true;
            fire(false, self.bg, self);
        }

        method onInitialize(context)
        {
            Children::BbsChildPane.visible = false;
            Children::GTMailChildPane.visible = false;
            Children::PresentChildPane.visible = false;
            Children::ActionLogChildPane.visible = false;
            PrivateLoungePane::Buttons::Active::GTMail::New.visible = false;
            PrivateLoungePane::Buttons::Active::Present::New.visible = false;
            Menu::MyHome::Tab::New.visible = false;

            if (LoginUtil::isOnline())
            {
                var me = self;
                var mail_id = GAME_STATUS.user_profile.mail.getReceiveMaxMailId();

                GTMail.requestReceiveMailList(mail_id, function(args) 
                {
                    var maxid0 = GAME_STATUS.user_profile.mail.getReceiveMaxMailId();
                    |var context, var request| = args;
                    if (request.isDone())
                    {
                        var mail_list = GTMail.decodeMailList(request);
                        var res = GAME_STATUS.user_profile.mail.addReceive(mail_list);
                    }

                    var count = GAME_STATUS.user_profile.mail.getReceiveNewCount();
                    if (count > 0)
                    {
                        PrivateLoungePane::Buttons::Active::GTMail::New.visible = true;
                        PrivateLoungePane::Buttons::Active::GTMail::New::TextFace.text = count;
                        Menu::MyHome::Tab::New.visible = true;
                        var maxid1 = GAME_STATUS.user_profile.mail.getReceiveMaxMailId();
                        if (maxid1 > maxid0)
                            ROOT.beepAtOnce();
                    }
                });

                var itembox_id = GameItemUtil::ItemBox::getMaxItemBoxId();
                ItemBox.requestItemList(itembox_id, function(args) 
                {
                    var maxid0 = GameItemUtil::ItemBox::getMaxItemBoxId();
                    |var context, var request| = args;
                    if (request.isDone())
                    {
                        var item_list = ItemBox.decodeItemList(request);
                        var item_list2 = filterPresent(context, item_list);
                        GameItemUtil::ItemBox::insertGrimData(item_list2);
                    }

                    var count = GameItemUtil::ItemBox::getPresentBoxListCount();
                    if (count > 0)
                    {
                        PrivateLoungePane::Buttons::Active::Present::New.visible = true;
                        PrivateLoungePane::Buttons::Active::Present::New::TextFace.text = count;
                        Menu::MyHome::Tab::New.visible = true;
                        var maxid1 = GameItemUtil::ItemBox::getMaxItemBoxId();
                        if (maxid1 > maxid0)
                            ROOT.beepAtOnce();
                    }
                });
            }
        }

        method changeChildPane(context, child_pane, skip)
        {
            if (self.active_child_pane != nil && child_pane == self.active_child_pane)
            {
                if (skip == nil)
                {
                    child_pane.ScalarInterpolator.on_effect_end = function(context) 
                    {
                        child_pane.ScalarInterpolator.on_effect_end = nil;
                        fire(true, child_pane);
                        child_pane.initializeFinder(context);
                    };
                    fire(false, child_pane);
                    child_pane.finalizeFinder(context);
                }
            }
            else 
            {
                if (self.active_child_pane != nil)
                {
                    self.active_child_pane.insensitive = true;
                    self.active_child_pane.close(context);
                }

                self.active_child_pane = child_pane;
                if (skip == nil)
                {
                    fire(true, child_pane);
                    child_pane.initializeFinder(context);
                    child_pane.visible = true;
                }

                self.active_child_pane.insensitive = false;
            }

            setButtonState(context);
        }

        function onFocusEnterCallback(context, candidate_data, item_w, arg)
        {
            if (item_w["ImageFaceF"] != nil)
                startActors(item_w.ImageFaceF, false, false);

            if (PrivateLoungePane.active_child_pane == PrivateLoungePane::Children::ActionLogChildPane)
            {
                var action_log = candidate_data.value_;
                var value1 = action_log["value1"];
                if (value1 == "RE")
                    PrivateLoungePane.buttonHelpOn(context);
                else
                    PrivateLoungePane.buttonHelpOff(context);
            }
            else
                PrivateLoungePane.buttonHelpOn(context);
        }

        function onFocusLeaveCallback(context, candidate_data, item_w, arg)
        {
            if (item_w["ImageFaceF"] != nil)
                fire(false, item_w.ImageFaceF);
        }

        function onFocusNotifyCallback(context, candidate_data, item_w, old_candidate_data, old_item_w, arg)
        {
            if (item_w != nil)
                fire(true, item_w.ImageFaceF);

            if (old_item_w != nil)
                fire(false, old_item_w.ImageFaceF);
        }

        module Buttons
        {
            method onFocusEnter(context, event)
            {
                var w = event.widget;
                var key = w.name.upcase();
                if (key == "PADDOCK" && ROOT.active_friend != nil)  
                    key = "LOUNGE";

                var localized_text = context.translate(ROOT, key);
                BalloonTip.set_value(context, w, localized_text, 0);
                PrivateLoungePane.buttonHelpOff(context);
                return EVENTRESULT_FILTER;
            }

            method onFocusLeave(context)
            {
                BalloonTip.reset_value();
                return EVENTRESULT_FILTER;
            }

            module Active
            {
                module Bbs
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        CHECK_TIMEOUT();
                        CHECK_CAN_ONLINE_CHAT();

                        main::sound.play("ok");

                        Children::BbsChildPane.open(context);
                        return EVENTRESULT_FILTER;
                    }
                }

                module GTMail
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        CHECK_TIMEOUT();
                        CHECK_CAN_ONLINE_CHAT();

                        main::sound.play("ok");

                        Children::GTMailChildPane.open(context);
                        return EVENTRESULT_FILTER;
                    }
                }

                module Present
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        CHECK_TIMEOUT();

                        main::sound.play("ok");

                        Children::PresentChildPane.open(context);
                        return EVENTRESULT_FILTER;
                    }
                }

                module ActionLog
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        CHECK_TIMEOUT();

                        main::sound.play("ok");

                        Children::ActionLogChildPane.open(context);
                        return EVENTRESULT_FILTER;
                    }
                }
            }

            module Focus
            {
                method onFocusEnter(context, event)
                {
                    startActors(event.widget.ColorFaceA, false);
                    return EVENTRESULT_CONTINUE;
                }

                method onFocusLeave(context, event)
                {
                    startActors(event.widget.ColorFaceA, true);
                    return EVENTRESULT_CONTINUE;
                }

                module GTMailSend
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        
                        if (PDINetwork.isChatRestricted())
                        {
                            main::sound.play("disable");
                            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "OnlineMessage", "UNABLE_TO_CHAT_DUE_TO_RESTRICTION"));
                        }
                        else
                        {
                            main::sound.play("ok");

                            var user_id = ROOT.active_friend["id"].toString();
                            var result = UserProfileProject::GTMailPopup.open(context, UserProfileProject::GTMailPopup::MODE_NEW, user_id);
                        }

                        return EVENTRESULT_FILTER;
                    }
                }

                module PresentSend
                {
                    function onCallbackGarage(context, args)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        var present_to = args;
                        GaragePopup.open(context, present_to);
                    }

                    function onCallbackItem(context, args)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        var present_to = args;
                        ItemPopup.open(context, ItemPopup::Mode::PRESENT, ["present_to" : present_to]);
                    }

                    function onCallbackMuseum(context, args)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        |var dealer, var present_to| = args;
                        if (Grim2Util::Museum::isEnable())
                            MuseumPopup.open(context, dealer, present_to);
                        else
                            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "OnlineMessage", "THIS_CANNOT_BE_SELECTED"));
                    }

                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        
                        main::sound.play("ok");

                        var present_to = ROOT.active_friend["id"].toString();
                        var can_museum = pdiext::MProductInformation::GetGameRegionCode() != "tw";

                        var data_list = [
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "GARAGE"), true, onCallbackGarage, present_to),
                            UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "ITEM"), true, onCallbackItem, present_to),
                        ];

                        if (can_museum)
                        {
                            var dealer_list = MuseumFileUtil::getDealerList();
                            var dealer_list2 = Array();

                            foreach (var dealer in dealer_list)
                            {
                                var count = MuseumFileUtil::getMuseumCountIhave(dealer);
                                if (count > 0)
                                    dealer_list2.push(dealer);
                            }

                            var museum_cascade = Array();
                            foreach (var dealer in dealer_list2)
                            {
                                var dealer2 = context.translate(ROOT, "TunerName", dealer);
                                museum_cascade.push(UIKitProject::ContextMenuPopup::Data(dealer2, true, onCallbackMuseum, [dealer, present_to]));
                            }

                            data_list.push(UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MUSEUM"), dealer_list2.size > 0, nil, nil, museum_cascade));
                        }

                        var title = nil;
                        var x = self.sx + (self.w / 2);
                        var y = self.sy + (self.h / 2);
                        UIKitProject::ContextMenuPopup.open(context, x, y, title, data_list);

                        return EVENTRESULT_FILTER;
                    }
                }

                module Paddock
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        CHECK_GARAGE_NOT_EMPTY();
                        CHECK_CAR_NOT_FRIEND();

                        main::sound.play("ok");

                        CHECK_DATAINSTALL_OR_PERFORM();

                        var user_id = nil;
                        |var r, var g, var b| = GAME_STATUS.user_profile.context.getMenuColor(0);

                        if (ROOT.active_friend == nil)
                        {
                            var user_id = Grim2.getLoginUserId();
                            var color_index = GAME_STATUS.user_profile.context.myhome_color_id;
                            |r, g, b| = GAME_STATUS.user_profile.context.getMenuColor(color_index);
                        }
                        else
                        {
                            var user_id = ROOT.active_friend["id"].toString();
                            var user_profile = ROOT.active_friend["user_profile"];
                            if (user_profile != nil)
                            {
                                var color_index = user_profile["menu_color"];
                                |r, g, b| = GAME_STATUS.user_profile.context.getMenuColor(color_index);
                            }
                        }

                        GLOBAL_STATUS.user_profile.context.theme_color[0] = r;
                        GLOBAL_STATUS.user_profile.context.theme_color[1] = g;
                        GLOBAL_STATUS.user_profile.context.theme_color[2] = b;
                        goToLounge(context, user_id);

                        return EVENTRESULT_FILTER;
                    }
                }

                module CurrentSessionPaddock
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        CHECK_GARAGE_NOT_EMPTY();
                        CHECK_CAR_NOT_FRIEND();

                        main::sound.play("ok");

                        if (ROOT.active_friend != nil)
                            joinCurrentSession(context, ROOT.active_friend);

                        return EVENTRESULT_FILTER;
                    }
                }

                module InstantRace
                {
                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();
                        CHECK_GARAGE_NOT_EMPTY();

                        main::sound.play("ok");

                        if (ROOT.active_friend != nil)
                        {
                            var user_id = ROOT.active_friend["id"].toString();
                            OnlineBSpec.requestRaceResultSummaryList(user_id, function(args) 
                            {
                                |var context, var request| = args;
                                if (request.isDone())
                                {
                                    var summary_list = OnlineBSpec.decodeResultSummaryList(request);
                                    if (summary_list.size > 0)
                                        UserProfileProject::RemoteRaceResultListPopup.open(context, summary_list, user_id);
                                    else
                                        OK(context, ROOT, "MSG_REMOTERACE_NO_RESULT");
                                }
                                else
                                    ERROR(context, ROOT, "MSG_REMOTERACE_NO_RESULT");
                            });
                        }
                        else
                        {
                            var driver_list = [];

                            var request = OnlineBSpec.requestDriverList(Grim2.getLoginUserId(), function(args) {});
                            if (Grim2Util::__deprecated__join__(context, request))
                            {
                                driver_list = OnlineBSpec.decodeDriverList(request);
                            }
                            else
                            {
                                ERROR(context, ROOT, "GOTO_GRANDTOP_IF");
                                Grim2.setInitialize(false);
                                SequenceUtil::startProject(context, "gttop");
                                return EVENTRESULT_FILTER;
                            }

                            if (driver_list.size == 0)
                            {
                                ERROR(context, ROOT, "MSG_REMOTERACE_NO_MY_DRIVER");
                            }
                            else
                            {
                                PROJECT.history['GTModeRoot::PrivateLounge'] = true;
                                SequenceUtil::startProject(context, "online_bspec", "gtmode");
                            }
                        }

                        return EVENTRESULT_FILTER;
                    }
                }
            }
        }

        // Community windows/panels
        module Children
        {
            function setActive(context, target)
            {
                var bbs = target == "Bbs";
                var mail = target == "GTMail";
                var present = target == "Present";
                var log = target == "ActionLog";
               
                fire(true, Buttons::Active[target].ColorFaceA);

                Buttons::Active::Bbs.active = bbs;
                Buttons::Active::GTMail.active = mail;
                Buttons::Active::Present.active = present;
                Buttons::Active::ActionLog.active = log;
            }

            // Community pane/window
            module BbsChildPane
            {
                import __FinderTarget__::*;

                attribute bbs_board_id;
                attribute initialized;

                method open(context, skip)
                {
                    PrivateLoungePane.changeChildPane(context, self, skip);
                    setActive(context, "Bbs");
                    self.initialized = false;
                }

                method close(context)
                {
                    self.bbs_board_id = nil;
                    self.initialized = nil;
                    
                    var me = self;
                    self.ScalarInterpolator.on_effect_end = function(context) 
                    {
                        me.visible = false;
                        me.finalizeFinder(context);
                        me.ScalarInterpolator.on_effect_end = nil;
                    };

                    fire(false, me);
                }

                method onFinalize(context)
                {
                    finalizeFinder(context);
                }

                function onInitItem(context, candidate_data, item_w, arg)
                {
                    var bbs = candidate_data.value_;
                    item_w.Info.TextFace.text = bbs[2];

                    var comment = bbs[3];
                    item_w.TextFace.text = nl2space(comment);

                    var create_time = pdistd::MTime();
                    create_time.setBySecond(bbs[4]);

                    |var date, var time| = PROJECT::createDateTimeText2(context, ROOT, create_time);
                    item_w.Info.DateTime.TextFaceDate.text = date;
                    item_w.Info.DateTime.TextFaceTime.text = time;
                    item_w.Info.DateTime.TextFaceTime.visible = time != "";

                }

                function onActivateItem(context, folder_data, func_close, arg)
                {
                    if (!BbsChildPane.initialized)
                        return;

                    var candidate_data = folder_data.getItemData();
                    var index = candidate_data.item_index_;
                    
                    ButtonHelpGT5.hide();
                    BbsDetailPopup.open(context, BbsChildPane.bbs_board_id, index);
                    ButtonHelpGT5.appear();
                }

                method reload(context)
                {
                    if (self.bbs_board_id == nil)
                        return;

                    var me = self;
                    var comment_id = GAME_STATUS.user_profile.bbs.getMaxCommentId(self.bbs_board_id);

                    Bbs2.requestCommentList(self.bbs_board_id, comment_id, function(args) 
                    {
                        |var context1, var request| = args;
                        var refresh = false;

                        if (request.isDone())
                        {
                            var comment_list = Bbs2.decodeCommentList(request);
                            var res = GAME_STATUS.user_profile.bbs.add(comment_list);
                            refresh = comment_list.size > 0;
                        }
                        else
                            me.List::Zero.visible = true;

                        if (me.initialized == nil)
                        {
                            me.List::Zero.visible = true;
                            return;
                        }

                        if (!me.initialized || refresh)
                        {
                            if (me.finder != nil && me.bbs_board_id != nil)
                            {
                                me.initialized = true;
                                
                                var comment_list = GAME_STATUS.user_profile.bbs.getList(me.bbs_board_id);
                                me.List::Zero.visible = comment_list.size == 0;

                                var candidates = UIKitProject::FinderRoot.makeCandidates(comment_list);
                                me.finder.replaceCurrentFolderCandidates(context, candidates, 0);
                            }
                        }
                    });
                }

                method initializeFinder(context)
                {
                    self.List::Zero.visible = false;
                    Input::InputTextFace.value = "";
                    Input::TextFace.visible = true;

                    var initial_data = hidden::ItemBbs::makeInitialData(context, onInitItem, onActivateItem, VScrollbar);
                    initial_data.cb_focus_enter_ = onFocusEnterCallback;
                    initial_data.cb_focus_leave_ = onFocusLeaveCallback;
                    initial_data.cb_change_focus_ = onFocusNotifyCallback;

                    self.finder = UIKitProject::FinderRoot.setCopy(context, self.List, initial_data, false);

                    var user_id = Grim2.getLoginUserId();
                    if (ROOT.active_friend != nil)
                    {
                        var user_id = ROOT.active_friend["id"].toString();
                        var me = self;

                        UserProfile2.requestUserProfile(user_id, function(args) 
                        {
                            |var context, var request| = args;
                            if (request.isDone())
                            {
                                var u = UserProfile2.decodeUserProfile(request);
                                me.bbs_board_id = u["user_number"];
                                me.reload(context);
                            }
                        });
                    }
                    else
                    {
                        self.bbs_board_id = Grim2.getLoginUserNumber();
                        self.reload(context);
                    }
                }

                module Input
                {
                    method onInitialize(context)
                    {
                        TextFace.text = context.translate(ROOT, "BBS_DEFAULT_COMMENT").build(140);
                    }

                    module InputTextFace
                    {
                        method onFocusEnter(context)
                        {
                            Input::TextFace.visible = false;
                            PrivateLoungePane.buttonHelpOff(context);
                            return EVENTRESULT_CONTINUE;
                        }

                        method onFocusLeave(context)
                        {
                            if (self.value.size == 0)
                            {
                                Input::TextFace.visible = true;
                            }

                            return EVENTRESULT_CONTINUE;
                        }

                        method onActivate(context)
                        {
                            if (self.value.size > 0)
                            {
                                ROOT.setFocus(Submit);
                                return EVENTRESULT_FILTER;
                            }

                            return EVENTRESULT_CONTINUE;
                        }
                    }

                    module Submit
                    {
                        import __BalloonTarget__::*;

                        method onActivate(context)
                        {
                            CHECK_ONLINE_GRANDTOP();

                            var text = Input::InputTextFace.value;
                            if (BbsChildPane.bbs_board_id == nil || text == "")
                            {
                                main::sound.play("disable");
                            }
                            else
                            {
                                main::sound.play("ok");

                                VulgarityFilterUtil::begin();
                                |var res, var sanitized_text| = VulgarityFilterUtil::check(text);
                                VulgarityFilterUtil::end();

                                if (res)
                                {
                                    var request = GrimFacade::Bbs::requestUpdateComment(context, BbsChildPane.bbs_board_id, sanitized_text, function(args) {});
                                    if (Grim2Util::__deprecated__join__(context, request))
                                    {
                                        if (Bbs2.decodeResult(request))
                                        {
                                            OK(context, ROOT, "MSG_SEND_SUCCESS");
                                            BbsChildPane.reload(context);
                                            Input::InputTextFace.value = "";
                                        }
                                        else
                                        {
                                            ERROR(context, ROOT, "MSG_UPLOAD_FAILED");
                                        }
                                    }
                                }
                                else
                                {
                                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "Network", "ERROR_ONLINE_FUNCTION"));
                                }
                            }

                            return EVENTRESULT_FILTER;
                        }

                        method onCancel(context)
                        {
                            ROOT.setFocus(InputTextFace);
                            return EVENTRESULT_FILTER;
                        }
                    }
                }

                module List
                {
                    function showDetailCallback(context, index)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        ButtonHelpGT5.hide();
                        BbsDetailPopup.open(context, BbsChildPane.bbs_board_id, index);
                        ButtonHelpGT5.appear();
                    }

                    function showProfileCallback(context, bbs)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        var user_id = bbs[2];
                        ButtonHelpGT5.hide();
                        showProfileIf(context, user_id);
                        ButtonHelpGT5.appear();
                    }

                    function replyCallback(context, bbs)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        var user_id = bbs[2];
                        var comment = bbs[3];

                        var reply = context.translate(ROOT, "MyHome", "FORMAT_BBS_REPLY").build(user_id, comment);
                        Input::InputTextFace.value += reply;
                        Input::TextFace.visible = false;
                    }

                    function deleteCallback(context, bbs)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        if (!QUERY(context, ROOT, "QUERY_DELETE"))
                            return;

                        var comment_id = bbs[0];

                        var request = GrimFacade::Bbs::requestRemoveComment(context, comment_id, function(args) {});
                        if (Grim2Util::__deprecated__join__(context, request))
                        {
                            OK_AUTO_CLOSE(context, ROOT, "MSG_DELETE");
                            GAME_STATUS.user_profile.bbs.remove(comment_id);
                            BbsChildPane.initialized = false;
                            BbsChildPane.reload(context);
                        }
                        else
                        {
                            ERROR(context, ROOT, "MSG_UPLOAD_FAILED");
                        }
                    }

                    method onKeyPress(context, event)
                    {
                        if (!BbsChildPane.initialized)
                            return EVENTRESULT_CONTINUE;

                        if (event.keysym == CELL_PAD_CTRL_TRIANGLE)
                        {
                            var focus_index = BbsChildPane.finder.getFocusIndex(context);
                            var widget = BbsChildPane.finder.getItemWidget(focus_index);
                            if (widget == nil)
                                return EVENTRESULT_CONTINUE;
                            
                            var x = widget.sx + (widget.w * widget.cursor_align_x);
                            var y = widget.sy + (widget.h * widget.cursor_align_y);

                            var candidate_data = BbsChildPane.finder.getItemData(context, focus_index);
                            var bbs = candidate_data.value_;
                            var data_list = [];
                            data_list.push(UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "REPLY"), true, replyCallback, bbs));
                            data_list.push(UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "SHOW_DETAIL"), true, showDetailCallback, focus_index));
                            data_list.push(UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "SHOW_PROFILE"), true, showProfileCallback, bbs));

                            var user_id = bbs[2];
                            if (ROOT.active_friend == nil || user_id == Grim2.getLoginUserId())
                            {
                                data_list.push(nil);
                                data_list.push(UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "DELETE"), true, deleteCallback, bbs));
                            }

                            var title = nil;
                            UIKitProject::ContextMenuPopup.open(context, x, y, title, data_list);
                            return EVENTRESULT_FILTER;
                        }

                        return EVENTRESULT_CONTINUE;
                    }
                }
            }

            // Mail pane/window
            module GTMailChildPane
            {
                import __FinderTarget__::*;

                attribute receive_mode;

                method open(context, skip)
                {
                    if (self.receive_mode == nil)
                        self.receive_mode = true;

                    PrivateLoungePane.changeChildPane(context, self, skip);
                    setActive(context, "GTMail");
                }

                method close(context)
                {                    
                    var me = self;
                    self.ScalarInterpolator.on_effect_end = function(context) 
                    {
                        me.visible = false;
                        me.finalizeFinder(context);
                        me.ScalarInterpolator.on_effect_end = nil;
                    };

                    fire(false, self);
                }

                method onFinalize(context)
                {
                    finalizeFinder(context);
                }

                function updateCount(context)
                {
                    var count = GAME_STATUS.user_profile.mail.getReceiveNewCount();
                    PrivateLoungePane::Buttons::Active::GTMail::New::TextFace.text = count;
                    PrivateLoungePane::Buttons::Active::GTMail::New.visible = count > 0;

                    if (count > 0)
                        Menu::MyHome::Tab::New.visible = true;
                    else
                    {
                        var count2 = GameItemUtil::ItemBox::getPresentBoxListCount();
                        Menu::MyHome::Tab::New.visible = count2 > 0;
                    }
                }

                function onInitItem(context, candidate_data, item_w, arg)
                {
                    var gtmail = candidate_data.value_;
                    item_w.Info.TextFace.text = gtmail[1];

                    var subject = gtmail[2];
                    if (subject == "")
                        subject = context.translate(ROOT, "MyHome", "SUBJECT_IS_EMPTY");

                    item_w.TextFace.text = subject;

                    var create_time = pdistd::MTime();
                    create_time.setBySecond(gtmail[4]);

                    |var date, var time| = PROJECT::createDateTimeText2(context, ROOT, create_time);
                    item_w.Info.DateTime.TextFaceDate.text = date;
                    item_w.Info.DateTime.TextFaceTime.text = time;
                    item_w.Info.DateTime.TextFaceTime.visible = time != "";

                    if (GTMailChildPane.receive_mode && gtmail.size > 5 && gtmail[5])
                        item_w.New.visible = true;
                }

                function onActivateItem(context, folder_data, func_close, arg)
                {
                    CHECK_ONLINE_GRANDTOP();

                    var candidate_data = folder_data.getItemData();
                    var index = candidate_data.item_index_;
                    
                    ButtonHelpGT5.hide();
                    var mode = GTMailChildPane.receive_mode ? UserProfileProject::GTMailPopup::MODE_VIEW_RECEIVE : UserProfileProject::GTMailPopup::MODE_VIEW_SEND;
                    var result = UserProfileProject::GTMailPopup.open(context, mode, index);
                    if (result)
                    {
                        GTMailChildPane.reload(context);
                    }
                    else if (mode == UserProfileProject::GTMailPopup::MODE_VIEW_RECEIVE)
                    {
                        saveNow(context);

                        var mail_list = GAME_STATUS.user_profile.mail.getReceiveList();
                        var candidates = UIKitProject::FinderRoot.makeCandidates(mail_list);
                        folder_data.setCandidates(candidates);
                        GTMailChildPane.updateStatus(context);
                    }

                    updateCount(context);

                    ButtonHelpGT5.appear();
                }

                method initializeFinder(context)
                {
                    self.List::Zero.visible = false;

                    var initial_data = hidden::ItemGTMail::makeInitialData(context, onInitItem, onActivateItem, VScrollbar);
                    initial_data.cb_focus_enter_ = onFocusEnterCallback;
                    initial_data.cb_focus_leave_ = onFocusLeaveCallback;
                    initial_data.cb_change_focus_ = onFocusNotifyCallback;

                    self.finder = UIKitProject::FinderRoot.setCopy(context, self.List, initial_data, false);
                    Buttons::Receive.active = self.receive_mode;
                    Buttons::Send.active = !self.receive_mode;

                    var me = self;

                    if (self.receive_mode)
                    {
                        var mail_id = GAME_STATUS.user_profile.mail.getReceiveMaxMailId();
                        GTMail.requestReceiveMailList(mail_id, function(args)
                        {
                            |var context, var request| = args;
                            if (request.isDone())
                            {
                                var mail_list = GTMail.decodeMailList(request);
                                var res = GAME_STATUS.user_profile.mail.addReceive(mail_list);
                            }

                            if (me.finder != nil)
                            {
                                var mail_list = GAME_STATUS.user_profile.mail.getReceiveList();
                                me.List::Zero.visible = mail_list.size == 0;
                                
                                var candidates = UIKitProject::FinderRoot.makeCandidates(mail_list);
                                me.finder.replaceCurrentFolderCandidates(context, candidates, 0);
                                me.finder.onFocus(context);
                            }
                        });
                    }
                    else
                    {
                        var mail_id = GAME_STATUS.user_profile.mail.getSendMaxMailId();
                        GTMail.requestSendMailList(mail_id, function(args)
                        {
                            |var context, var request| = args;
                            if (request.isDone())
                            {
                                var mail_list = GTMail.decodeMailList(request);
                                var res = GAME_STATUS.user_profile.mail.addSend(mail_list);
                            }

                            if (me.finder != nil)
                            {
                                var mail_list = GAME_STATUS.user_profile.mail.getSendList();
                                me.List::Zero.visible = mail_list.size == 0;
                                
                                var candidates = UIKitProject::FinderRoot.makeCandidates(mail_list);
                                me.finder.replaceCurrentFolderCandidates(context, candidates, 0);
                                me.finder.onFocus(context);
                            }
                        });
                    }
                }

                method reload(context)
                {
                    finalizeFinder(context);
                    initializeFinder(context);
                }

                method updateStatus(context)
                {
                    var size = self.finder.getItemCount(context);
                    for (var index = 0; index < 0; ++index)
                    {
                        var item = self.finder.getItemWidget(index);
                        if (item == nil)
                            continue;

                        var data = self.finder.getItemData(context, index);
                        var gtmail = data.value_;
                        item.New.visible = gtmail[5] != 0;
                    }
                }

                module Buttons
                {
                    module New
                    {
                        method onActivate(context)
                        {
                            CHECK_ONLINE_GRANDTOP();

                            var gt_friend_list = ROOT::FriendList::Body::List.gt_friend_list;
                            var friend_list = [];

                            if (gt_friend_list != nil)
                            {
                                for (var i = 0; i < gt_friend_list.size; ++i)
                                {
                                    var user_id = gt_friend_list[i]["id"];
                                    if (user_id.toString() != Grim2.getLoginUserId())
                                        friend_list.push(user_id.name);
                                }
                            }

                            if (friend_list.size == 0)
                            {
                                main::sound.play("disable");
                            }
                            else
                            {
                                main::sound.play("ok");
                                var friend = UserProfileProject::FriendListPopup.open(context, friend_list);
                                if (friend != nil)
                                {
                                    var result = UserProfileProject::GTMailPopup.open(context, UserProfileProject::GTMailPopup::MODE_NEW, friend);
                                    if (result && !GTMailChildPane.receive_mode)
                                        GTMailChildPane.reload(context);
                                }
                            }

                            return EVENTRESULT_FILTER;
                        }
                    }

                    module Receive
                    {
                        method onActivate(context)
                        {
                            CHECK_ONLINE_GRANDTOP();

                            main::sound.play("ok");

                            GTMailChildPane.receive_mode = true;
                            GTMailChildPane.finalizeFinder(context);
                            GTMailChildPane.initializeFinder(context);
                            return EVENTRESULT_FILTER;
                        }
                    }

                    module Send
                    {
                        method onActivate(context)
                        {
                            CHECK_ONLINE_GRANDTOP();

                            main::sound.play("ok");

                            GTMailChildPane.receive_mode = false;
                            GTMailChildPane.finalizeFinder(context);
                            GTMailChildPane.initializeFinder(context);
                            return EVENTRESULT_FILTER;
                        }
                    }
                }

                
                module List
                {
                    function showDetailCallback(context, index)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        ButtonHelpGT5.hide();

                        var mode = GTMailChildPane.receive_mode ? UserProfileProject::GTMailPopup::MODE_VIEW_RECEIVE : UserProfileProject::GTMailPopup::MODE_VIEW_SEND;
                        var result = UserProfileProject::GTMailPopup.open(context, mode, index);
                        if (result)
                            GTMailChildPane.reload(context);

                        ButtonHelpGT5.appear();
                    }

                    function showProfileCallback(context, gtmail)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        var user_id = gtmail[1];
                        ButtonHelpGT5.hide();
                        showProfileIf(context, user_id);
                        ButtonHelpGT5.appear();
                    }

                    function deleteCallback(context, gtmail)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        if (!QUERY(context, ROOT, "QUERY_DELETE"))
                            return;

                        var mail_id = gtmail[0];

                        if (GTMailChildPane.receive_mode)
                        {
                            var request = GrimFacade::GTMail::requestDeleteByTo(context, mail_id, function(args) {});
                            if (Grim2Util::__deprecated__join__(context, request))
                            {
                                OK_AUTO_CLOSE(context, ROOT, "MSG_DELETE");
                                GAME_STATUS.user_profile.mail.removeReceive(mail_id);
                                GTMailChildPane.reload(context);
                            }
                            else
                            {
                                ERROR(context, ROOT, "MSG_UPLOAD_FAILED");
                            }
                        }
                        else
                        {
                            var request = GrimFacade::GTMail::requestDeleteByFrom(context, mail_id, function(args) {});
                            if (Grim2Util::__deprecated__join__(context, request))
                            {
                                OK_AUTO_CLOSE(context, ROOT, "MSG_DELETE");
                                GAME_STATUS.user_profile.mail.removeSend(mail_id);
                                GTMailChildPane.reload(context);
                            }
                            else
                            {
                                ERROR(context, ROOT, "MSG_UPLOAD_FAILED");
                            }
                        }

                        GTMailChildPane.updateCount(context);

                    }

                    method onKeyPress(context, event)
                    {
                        if (event.keysym == CELL_PAD_CTRL_TRIANGLE)
                        {
                            var focus_index = GTMailChildPane.finder.getFocusIndex(context);
                            var widget = GTMailChildPane.finder.getItemWidget(focus_index);
                            if (widget != nil)
                            {
                                var x = widget.sx + (widget.w * widget.cursor_align_x);
                                var y = widget.sy + (widget.h * widget.cursor_align_y);

                                var candidate_data = GTMailChildPane.finder.getItemData(context, focus_index);
                                var gtmail = candidate_data.value_;
                                var data_list = [];
                                data_list.push(UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "SHOW_DETAIL"), true, showDetailCallback, focus_index));
                                data_list.push(UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "SHOW_PROFILE"), true, showProfileCallback, gtmail));
                                data_list.push(nil);
                                data_list.push(UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "DELETE"), true, deleteCallback, gtmail));

                                var title = nil;
                                UIKitProject::ContextMenuPopup.open(context, x, y, title, data_list);
                            }

                            return EVENTRESULT_FILTER;
                        }

                        return EVENTRESULT_CONTINUE;
                    }
                }
            }

            // Gift/Present pane/window
            module PresentChildPane
            {
                import __FinderTarget__::*;
        
                method open(context, skip)
                {
                    PrivateLoungePane.changeChildPane(context, self, skip);
                    setActive(context, "Present");
                }
        
                method close(context)
                {                    
                    var me = self;
                    self.ScalarInterpolator.on_effect_end = function(context) 
                    {
                        me.visible = false;
                        me.finalizeFinder(context);
                        me.ScalarInterpolator.on_effect_end = nil;
                    };
        
                    fire(false, self);
                }
        
                method onInitialize(context)
                {
                    hidden::ItemPresent.h = hidden::ItemPresent::header.h;
                }

                method onFinalize(context)
                {
                    finalizeFinder(context);
                }

                function updateCount(context)
                {
                    var count = GameItemUtil::ItemBox::getPresentBoxListCount();
                    PrivateLoungePane::Buttons::Active::Present::New::TextFace.text = count;
                    PrivateLoungePane::Buttons::Active::Present::New.visible = count > 0;

                    if (count > 0)
                    {
                        Menu::MyHome::Tab::New.visible = true;
                    }
                    else
                    {
                        var count2 = GAME_STATUS.user_profile.mail.getReceiveNewCount();
                        Menu::MyHome::Tab::New.visible = count2 > 0;
                    }
                }

                function onInitItem(context, candidate_data, item_w, arg)
                {
                    var game_item_record = candidate_data.value_;

                    var create_time = pdistd::MTime();
                    create_time.setBySecond(game_item_record.create_date);
        
                    var sender = game_item_record.sender;
                    if (sender == "")
                        sender = "Gran Turismo";
                        
                    item_w.header.title.text = sender;

                    |var date, var time| = PROJECT::createDateTimeText2(context, ROOT, create_time);
                    item_w.DateTime.TextFaceDate.text = date;
                    item_w.DateTime.TextFaceTime.text = time;
                    item_w.DateTime.TextFaceTime.visible = time != "";
        
                    var comment = game_item_record.comment;
                    if (comment == "")
                        comment = context.translate(ROOT, "MyHome", "COMMENT_IS_EMPTY");
                    item_w.header.comment.text = comment;

                    var category_name = "";
                    var item_name = "";
                    var type_id = game_item_record.type_id;

                    switch (type_id)
                    {
                        case gtengine::GameItemType::TUNEPARTS:
                            var gameitem_id = game_item_record.argument4;
                            var item = GameItemUtil::getItemByID(gameitem_id);
                            category_name = GameItemUtil::getCategoryName(item.category_id);
                            if (game_item_record.category_id == gtengine::GameItemCategory::HORN)
                            {
                                var format = context.translate(ROOT, "Number", "FORMAT_NO");
                                var horn_id = game_item_record.argument1;
                                item_name = format.build(horn_id);
                            }
                            else
                            {
                                item_name = item.item_name;
                            }

                            item_w.body.ImageFace.from_disk = true;
                            item_w.body.ImageFace.image_path = "piece/tuningitem_M/%{item.item_code}.img";
                            break;

                        case gtengine::GameItemType::OTHERPARTS:
                            var gameitem_id = game_item_record.argument4;
                            var item = GameItemUtil::getItemByID(gameitem_id);
                            category_name = GameItemUtil::getCategoryName(item.category_id);
                            var color = game_item_record.argument1;
                            if (main::pdistd::MLocale::getLanguage() == "JP")
                                item_name = gtengine::MSpecDB::getPaintColorName_J(color);
                            else
                                item_name = gtengine::MSpecDB::getPaintColorName_A(color);


                            item_w.body.ImageFace.image_path = "piece/tuningitem_M/%{item.item_code}.img";
                            item_w.body.ColorTip.visible = true;
                            item_w.body.ColorTip::ColorFace.setPaintColor(color);
                            break;

                        case gtengine::GameItemType::MUSEUMCARD:
                            category_name = context.translate(ROOT, "GameItemCategory", "MUSEUM CARD");
                            var museum_id = game_item_record.code;
                            var museum = MuseumFileUtil::getMuseum(museum_id);
                            if (museum != nil)
                            {
                                item_name = "%s %s".format(context.translate(ROOT, "TunerName", museum.dealer),
                                    context.translate(ROOT, "Number", "FORMAT_NO").build(museum.dealer_id));
                            }
                            else
                            {
                                Museum2.requestMuseum(museum_id, function(args) 
                                {
                                    |var context, var request| = args;
                                    if (request.isDone())
                                    {
                                        var museum = Museum2.decodeMuseum(request);
                                        MuseumFileUtil::updateMuseum(museum);
                                        item_w.body.TextFace2.text = "%s %s".format(context.translate(ROOT, "TunerName", museum["dealer"]),
                                            context.translate(ROOT, "Number", "FORMAT_NO").build(museum["dealer_id"]));
                                    }
                                });
                            }
                            
                            item_w.body.ImageFace.image_path = "piece/ticket/museum_card.img";
                            break;

                        case gtengine::GameItemType::SPECIAL:
                            var gameitem_id = game_item_record.argument4;
                            var item = GameItemUtil::getItemByID(gameitem_id);
                            if (item != nil)
                                category_name = GameItemUtil::getCategoryName(item.category_id);
                            else
                                category_name = GameItemUtil::getCategoryName(gtengine::GameItemCategory::PRESENTCAR_TICKET);
                            
                            var car_label = game_item_record.code;
                            if (item != nil)
                            {
                                var name = item.item_name;
                                if (car_label != "")
                                {
                                    name += " ";
                                    name += gtengine::MSpecDB::getCarShortName(car_label);

                                    var blob = game_item_record.blob;
                                    var zero_blob = pdistd::MBlob("0");
                                    if (zero_blob != blob && blob != "")
                                    {
                                        var cp = gtengine::MCarParameter();
                                        cp.deserialize(blob);
                                        item_w.body.ColorTip.visible = true;
                                        item_w.body.ColorTip::ColorFace.setCarParameter(cp);
                                    }
                                    else
                                    {
                                        var color_index = game_item_record.argument1;
                                        if (color_index > gtengine::MSpecDB::getCarVariation(car_label) - 1)
                                            color_index = 0;

                                        item_w.body.ColorTip.visible = true;
                                        item_w.body.ColorTip::ColorFace.setCarColor(car_label, color_index);
                                    }
                                }

                                item_name = name;
                                item_w.body.ImageFace.from_disk = true;
                                item_w.body.ImageFace.image_path = "piece/ticket/thumb_white.img";
                            }
                            else
                                ;

                            break;

                        case gtengine::GameItemType::DRIVER_ITEM:
                            var gameitem_id = game_item_record.argument4;
                            var item = GameItemUtil::getItemByID(gameitem_id);
                            item.argument1 = game_item_record.argument1;

                            category_name = GameItemUtil::getCategoryName(item.category_id);
                            item_name = GameItemUtil::getItemText(item)[0];
                            var code = item.value;
                            var color_code = game_item_record.argument1;
                            var image_path = "";

                            if (item.category_id == gtengine::GameItemCategory::DRIVER_HEAD)
                            {
                                image_path = ThumbnailUtil::Avatar::getImagePath(ThumbnailUtil::Avatar::Genre::SIMPLE, ThumbnailUtil::Avatar::Type::MET, "M",
                                    code, color_code, 0, 0);
                            }
                            else if (item.category_id == gtengine::GameItemCategory::DRIVER_BODY)
                            {
                                image_path = ThumbnailUtil::Avatar::getImagePath(ThumbnailUtil::Avatar::Genre::SIMPLE, ThumbnailUtil::Avatar::Type::SUITS, "M",
                                    0, 0, code, color_code);
                            }
                            else if (item.category_id == gtengine::GameItemCategory::DRIVER_SET)
                            {
                                image_path = ThumbnailUtil::Avatar::getImagePath(ThumbnailUtil::Avatar::Genre::SETUP, ThumbnailUtil::Avatar::Type::MET_SUITS, "M",
                                    code, color_code, code, color_code);
                            }

                            item_w.body.ImageFace.from_disk = true;
                            item_w.body.ImageFace.image_path = image_path;
                            break;

                        default:
                            break;
                    }

                    item_w.body.TextFace1.text = category_name;
                    item_w.body.TextFace2.text = item_name;
                }
        
                function onActivateItem(context, folder_data, func_close, arg)
                {
                    CHECK_ONLINE_GRANDTOP();

                    var candidate_data = folder_data.getItemData();
                    var game_item_record = candidate_data.value_;
                    
                    var message = game_item_record.type_id == gtengine::GameItemType::MUSEUMCARD ? "QUERY_GET_GIFT_MUSEUM" : "QUERY_GET_GIFT";
                    if (!QUERY(context, ROOT, message))
                        return;

                        PresentChildPane.receivePresents(context, [game_item_record]);
                }
        
                method initializeFinder(context)
                {
                    self.List::Zero.visible = false;
        
                    var initial_data = hidden::ItemPresent::makeInitialData(context, onInitItem, onActivateItem, VScrollbar);
                    initial_data.cb_focus_enter_ = onFocusEnterCallback;
                    initial_data.cb_focus_leave_ = onFocusLeaveCallback;
                    initial_data.cb_change_focus_ = onFocusNotifyCallback;
        
                    self.finder = UIKitProject::FinderRoot.setCopy(context, self.List, initial_data, false);
        
                    ItemBox.requestIdList(function (args) 
                    {
                        |var context, var request| = args;
                        if (request.isDone())
                        {
                            var id_list = ItemBox.decodeIdLList(request) // TYPO: decodeIdLList (still correct)
                            GameItemUtil::ItemBox::checkIdList(id_list);
                        }
                    });
                    
                    var me = self;
                    var itembox_id = GameItemUtil::ItemBox::getMaxItemBoxId();

                    ItemBox.requestItemList(itembox_id, function(args) 
                    {
                        |var context, var request| = args;
                        if (request.isDone())
                        {
                            var item_list = ItemBox.decodeItemList(request);
                            var item_list2 = filterPresent(context, item_list);
                            GameItemUtil::ItemBox::insertGrimData(item_list2);
                        }

                        if (me.finder != nil)
                        {
                            var item_list = GameItemUtil::ItemBox::getPresentBoxList();
                            me.List::Zero.visible = item_list.size == 0;
                            me.Buttons::ReceiveAll.insensitive = item_list.size == 0;
                            
                            var candidates = UIKitProject::FinderRoot.makeCandidates(item_list);
                            me.finder.replaceCurrentFolderCandidates(context, candidates, 0);
                            me.finder.onFocus(context);
                            me.finder.IconBox.v_magnify = 240 / 112.0;
                        }
                    });
                }

                method putActionLog(context, itembox_list)
                {
                    foreach (var game_item_record in itembox_list)
                    {
                        switch (game_item_record.type_id)
                        {
                            case gtengine::GameItemType::TUNEPARTS:
                                var gameitem_id = game_item_record.argument4;
                                var horn_id = "";
                                if (game_item_record.category_id == gtengine::GameItemCategory::HORN)
                                    horn_id = game_item_record.argument1;
                                ActionLogUtil::giftTuneParts(gameitem_id, horn_id);
                                break;

                            case gtengine::GameItemType::OTHERPARTS:
                                var gameitem_id = game_item_record.argument4;
                                var color = game_item_record.argument1;
                                ActionLogUtil::giftPaint(gameitem_id, color);
                                break;

                            case gtengine::GameItemType::MUSEUMCARD:
                                var museum_id = game_item_record.code;
                                ActionLogUtil::giftMuseum(museum_id);
                                break;

                            case gtengine::GameItemType::SPECIAL:
                                var gameitem_id = game_item_record.argument4;
                                var car_label = game_item_record.code;
                                ActionLogUtil::giftCarTicket(gameitem_id, car_label);
                                break;

                            case gtengine::GameItemType::DRIVER_ITEM:
                                var gameitem_id = game_item_record.argument4;
                                var code = game_item_record.argument2;
                                var color_code = game_item_record.argument1;

                                ActionLogUtil::giftDriverItem(gameitem_id, code, color_code);
                                break;

                            default:
                                break;
                        }
                    }
                }

                method reload(context)
                {
                    finalizeFinder(context);
                    initializeFinder(context);
                }

                method receivePresents(context, itembox_list)
                {
                    var itembox_id_list = [];

                    foreach (var item in itembox_list)
                        itembox_id_list.push(item.presentbox_itembox_id);

                    if (GameItemUtil::ItemBox::checkMaxItemBox(itembox_list))
                    {
                        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "MyHome", "MAX_ITEMBOX"));
                        return;
                    }

                    var request = GrimFacade::ItemBox::requestReceiveItem(context, itembox_id_list, function(args) {});
                    if (Grim2Util::__deprecated__join__(context, request))
                    {
                        if (ItemBox.decodeResult(request))
                        {
                            foreach (var itembox_id in itembox_id_list)
                                GameItemUtil::ItemBox::getPresent(context, itembox_id);

                            saveNow(context);
                            self.putActionLog(context, itembox_list);

                            SoundUtil::PlayStreamSE("/sound_gt/se/gt5_present_open");
                            OK_AUTO_CLOSE(context, ROOT, "MSG_RECEIVE_SUCCESS");

                            self.reload(context);
                            PresentChildPane.updateCount(context);
                        }
                    }
                    else
                    {
                        ERROR(context, ROOT, "MSG_UPLOAD_FAILED");
                    }
                }

                module Buttons
                {
                    module ReceiveAll
                    {
                        method onActivate(context)
                        {
                            CHECK_ONLINE_GRANDTOP();

                            var item_list = GameItemUtil::ItemBox::getPresentBoxList();
                            if (item_list.size > 0)
                            {
                                main::sound.play("ok");
                                PresentChildPane.receivePresents(context, item_list);
                            }
                            else
                            {
                                main::sound.play("disable");
                            }

                            return EVENTRESULT_FILTER;
                        }
                    }
                }

                module List
                {
                    function deleteCallback(context, gameitem_record)
                    {
                        CHECK_ONLINE_GRANDTOP();
        
                        if (!QUERY(context, ROOT, "QUERY_DELETE_PRESENT"))
                            return;
        
                        var itembox_id_list = [gameitem_record.presentbox_itembox_id];
        
                        var request = GrimFacade::ItemBox::requestReceiveItem(context, itembox_id_list, function(args) {});
                        if (Grim2Util::__deprecated__join__(context, request))
                        {
                            if (ItemBox.decodeResult(request))
                            {
                                GameItemUtil::ItemBox::delete2(gameitem_record);
                                saveNow(context);

                                OK_AUTO_CLOSE(context, ROOT, "MSG_DELETE");
                                PresentChildPane.open(context);
                                PresentChildPane.updateCount(context);
                            }
                            else
                            {
                                ERROR(context, ROOT, "MSG_UPLOAD_FAILED");
                            }
                        }
                    }

                    function showProfileCallback(context, gameitem_record)
                    {
                        CHECK_ONLINE_GRANDTOP();
        
                        var user_id = gameitem_record.sender;
                        ButtonHelpGT5.hide();
                        showProfileIf(context, user_id);
                        ButtonHelpGT5.appear();
                    }

                    method onKeyPress(context, event)
                    {
                        if (event.keysym == CELL_PAD_CTRL_TRIANGLE)
                        {
                            var focus_index = PresentChildPane.finder.getFocusIndex(context);
                            var widget = PresentChildPane.finder.getItemWidget(focus_index);
                            if (widget == nil)
                                return EVENTRESULT_CONTINUE;
                            
                            var x = widget.sx + (widget.w * widget.cursor_align_x);
                            var y = widget.sy + (widget.h * widget.cursor_align_y);
        
                            var candidate_data = PresentChildPane.finder.getItemData(context, focus_index);
                            var gameitem_record = candidate_data.value_;
                            var data_list = [];

                            if (gameitem_record.sender != "")
                            {
                                data_list += [
                                    UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "SHOW_PROFILE"), true, showProfileCallback, gameitem_record),
                                    nil
                                ];
                            }
                            data_list += UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "DELETE"), true, deleteCallback, gameitem_record);
                            
        
                            var title = nil;
                            UIKitProject::ContextMenuPopup.open(context, x, y, title, data_list);
                            return EVENTRESULT_FILTER;
                        }
        
                        return EVENTRESULT_CONTINUE;
                    }
                }
            }

            // Player logs pane/window
            module ActionLogChildPane
            {
                import __FinderTarget__::*;
                
                method open(context, skip)
                {
                    PrivateLoungePane.changeChildPane(context, self, skip);
                    setActive(context, "ActionLog");
                }
        
                method close(context)
                {                    
                    var me = self;
                    self.ScalarInterpolator.on_effect_end = function(context) 
                    {
                        me.visible = false;
                        me.finalizeFinder(context);
                        me.ScalarInterpolator.on_effect_end = nil;
                    };
        
                    fire(false, self);
                }
        
                method onFinalize(context)
                {
                    finalizeFinder(context);
                }

                function onInitItem(context, candidate_data, item_w, arg)
                {
                    var action_log = candidate_data.value_;
                    var create_time = action_log["create_time"];
                    var value1 = action_log["value1"];
                    var value2 = action_log["value2"];
                    var value3 = action_log["value3"];
                    var value4 = action_log["value4"];
                    var value5 = action_log["value5"];
                    var text = "";

                    switch (value1)
                    {
                        case "NG":
                            text = context.translate(ROOT, "ActionLog", "NEW_GAME");
                            break;

                        case "CB":
                            text = context.translate(ROOT, "ActionLog", "CAR_BUY").build(gtengine::MSpecDB::getCarShortName(value2));
                            break;

                        case "CR":
                            text = context.translate(ROOT, "ActionLog", "CAR_RIDE").build(gtengine::MSpecDB::getCarShortName(value2));
                            break;

                        case "FR":
                            text = context.translate(ROOT, "ActionLog", "FRIENDCAR_RIDE").build(value3, gtengine::MSpecDB::getCarShortName(value2));
                            break;

                        case "LL":
                            text = context.translate(ROOT, "ActionLog", "LICENSE_LEVEL").build(value2);
                            break;

                        case "LE":
                            var license_id = value2;
                            var license_index = LicenseUtil::GetIndexByLicenseId(license_id.toInt());
                            |var category_id, var category_index| = LicenseUtil::GetCategoryIdAndCategoryIndex(license_index);
                            var category = LicenseUtil::CategoryString[category_id];
                            var title = context.translate(ROOT, "LicenseGT5", "%03dt".format(license_id));
                            var rank = ["1": "GOLD", "2": "SILVER", "3": "BRONZE"][value3.toInt()];
                            text = context.translate(ROOT, "ActionLog", "LICENSE_EVENT_%{rank}").build(category, category_index + 1, title);
                            break;

                        case "AL":
                            text = context.translate(ROOT, "ActionLog", "ASPEC_LEVEL").build(value2);
                            break;

                        case "AE":
                            var game_id = value2;
                            var course_label = value3;
                            if (game_id < 0)
                            {
                                text = context.translate(ROOT, "ActionLog", "ASPEC_EVENT").build(context.translate(ROOT, "MyHome", "SEASONALEVENTS"),
                                    context.translate(ROOT, "CourseName", course_label));
                            }
                            else
                            {
                                text = context.translate(ROOT, "ActionLog", "ASPEC_EVENT").build(context.translate(ROOT, "AspecEventInfoGT5", "r%{game_id}t"),
                                    context.translate(ROOT, "CourseName", course_label));
                            }
                            break;
                            
                        case "BL":
                            text = context.translate(ROOT, "ActionLog", "BSPEC_LEVEL").build(value2);
                            break;

                        case "BE":
                            var game_id = value2;
                            var course_label = value3;
                            if (game_id < 0)
                            {
                                text = context.translate(ROOT, "ActionLog", "BSPEC_EVENT").build(context.translate(ROOT, "MyHome", "SEASONALEVENTS"),
                                    context.translate(ROOT, "CourseName", course_label));
                            }
                            else
                            {
                                text = context.translate(ROOT, "ActionLog", "BSPEC_EVENT").build(context.translate(ROOT, "BspecEventInfoGT5", "r%{game_id}t"),
                                    context.translate(ROOT, "CourseName", course_label));
                            }
                            break;

                        case "SE":
                            var event_id = value2.toInt();
                            var course_label = value3;
                            var rank = ["1": "GOLD", "2": "SILVER", "3": "BRONZE"][value4.toInt()];
                            var title = SpecialEventUtil::GetEventTitleJ(context, ROOT, event_id).split("\n").join(" ");
                            text = context.translate(ROOT, "ActionLog", "SPECIAL_EVENT_%{rank}").build(title, 
                                SpecialEventUtil::GetEventSubtitle(context, ROOT, event_id),
                                context.translate(ROOT, "CourseName", course_label));
                            break;

                        case "DC":
                            text = context.translate(ROOT, "ActionLog", "DRIVER_CLASS").build(value2, value3);
                            break;

                        case "GS":
                            var gameitem_id = value2;
                            var car_label = value3;
                            var item = GameItemUtil::getItemByID(gameitem_id);
                            var name = "";
                            if (car_label != "")
                                name = gtengine::MSpecDB::getCarShortName(car_label);
                            else if (item != nil)
                                name = item.item_name;

                            var category_id = gtengine::GameItemCategory::PRESENTCAR_TICKET;
                            if (item != nil)
                                category_id = item.category_id;
                            else
                                ;

                            text = context.translate(ROOT, "ActionLog", "GIFT_SPECIAL").build(GameItemUtil::getCategoryName(category_id), name);
                            break;

                        case "GM":
                            var museum_id = value2;
                            var dealer = value3;
                            var dealer_id = value4;
                            var detail = "%s %s".format(context.translate(ROOT, "TunerName", dealer),
                                context.translate(ROOT, "Number", "FORMAT_NO").build(dealer_id));
                            text = context.translate(ROOT, "ActionLog", "GIFT_MUSEUMCARD").build(context.translate(ROOT, "GameItemCategory", "MUSEUM CARD"), detail);
                            break;

                        case "GT":
                            var gameitem_id = value2;
                            var horn_id = value3;
                            var item = GameItemUtil::getItemByID(gameitem_id);
                            var name = "";
                            if (item.category_id == gtengine::GameItemCategory::HORN)
                                name = context.translate(ROOT, "Number", "FORMAT_NO").build(horn_id);
                            else
                                name = item.item_name;

                            text = context.translate(ROOT, "ActionLog", "GIFT_TUNEPARTS").build(GameItemUtil::getCategoryName(item.category_id), name);
                            break;

                        case "GO":
                            var gameitem_id = value2.toInt();
                            var color = value3.toInt();
                            var item = GameItemUtil::getItemByID(gameitem_id);
                            var color_name = "";
                            if (pdistd::MLocale::getLanguage() == "JP")
                                color_name = gtengine::MSpecDB::getPaintColorName_J(color);
                            else 
                                color_name = gtengine::MSpecDB::getPaintColorName_A(color);

                            text = context.translate(ROOT, "ActionLog", "GIFT_SPECIAL").build(item.item_name, color_name);
                            break;

                        case "GD":
                            var gameitem_id = value2;
                            var code = value3;
                            var color_code = value4;
                            var item = GameItemUtil::getItemByID(gameitem_id);

                            text = context.translate(ROOT, "ActionLog", "GIFT_DRIVER_ITEM").build(GameItemUtil::getCategoryName(item.category_id), item.item_name);
                            break;

                        case "TU":
                            var pair = gtengine::TrophyType.find_static(function(pair) { return value2 == 1 });
                            if (pair != nil)
                            {
                                var type = pair[0][0];
                                text = context.translate(ROOT, "ActionLog", "TROPHY_UNLOCK").build(context.translate(ROOT, "Trophy", "NAME_%{type}"));
                            }
                            break;

                        case "RB":
                            text = context.translate(ROOT, "ActionLog", "REMOTE_RACE_BEGIN").build(value2, value3);
                            break;

                        case "RE":
                            text = context.translate(ROOT, "ActionLog", "REMOTE_RACE_END").build(value2, value3, value4);
                            break;
                    }
        
                    item_w.body.TextFace.text = text;
        
                    |var date, var time| = PROJECT::createDateTimeText2(context, ROOT, create_time);
                    item_w.DateTime.TextFaceDate.text = date;
                    item_w.DateTime.TextFaceTime.text = time;
                    item_w.DateTime.TextFaceTime.visible = time != "";

                    item_w.ImageFaceF.visible = value1 == "RE";
        
                }
        
                function onActivateItem(context, folder_data, func_close, arg)
                {
                    var candidate_data = folder_data.getItemData();
                    var action_log = candidate_data.value_;
                    
                    if (action_log["value1"] == "RE")
                        showRemoteRaceResult(context, action_log);
                }
        
                function showRemoteRaceResult(context, action_log)
                {
                    var value5 = action_log["value5"];
                    var user_id = action_log["value2"];
                    var summary_list = [ ["summary_id": value5] ];
                    UserProfileProject::RemoteRaceResultPopup.open(context, summary_list, user_id, 0, false);
                }

                method requestActionLogList(user_number)
                {
                    var me = self;
                    
                    ActionLog.requestActionLogList2(user_number, function(args) 
                    {
                        |var context, var request| = args;
                        if (request.isDone())
                        {
                            var log_list = [];
                            var path = ActionLog.getActionLogListPath(user_number);
                            var st = pdistd::ReadFile(path);
                            var buf = st["buffer"];
                            if (buf != nil)
                            {
                                // Ah yes... Time to parse xml with regex
                                var buf2 = buf.toString();
                                var lines = buf2.split("\n");
                                var re4 = System::Regexp();
                                var re5 = System::Regexp();
                                re4.compile("<actionlog create_time=\"([^\"]*)\" value1=\"([^\"]*)\" value2=\"([^\"]*)\" value3=\"([^\"]*)\" value4=\"([^\"]*)\"/>");
                                re5.compile("<actionlog create_time=\"([^\"]*)\" value1=\"([^\"]*)\" value2=\"([^\"]*)\" value3=\"([^\"]*)\" value4=\"([^\"]*)\" value5=\"([^\"]*)\"/>");

                                foreach (var l in lines)
                                {
                                    if (re4.match(l) && re4.size > 5)
                                    {
                                        var data = ["create_time": Grim2.getDateTime(re4[1]), "value1": re4[2], "value2": re4[3], "value3": re4[4], "value4": re4[5], "value5": ""];
                                        log_list.unshift(data);
                                    }
                                    else if (re5.match(l) && re5.size > 6)
                                    {
                                        var data = ["create_time": Grim2.getDateTime(re5[1]), "value1": re5[2], "value2": re5[3], "value3": re5[4], "value4": re5[5], "value5": re5[6]];
                                        log_list.unshift(data);
                                    }
                                }
                            }

                            if (me.finder != nil)
                            {
                                me.List::Zero.visible = log_list.size == 0;
                                var candidates = UIKitProject::FinderRoot.makeCandidates(log_list);
                                me.finder.replaceCurrentFolderCandidates(context, candidates, 0);
                            }
                        }
                    });
                }

                method initializeFinder(context)
                {
                    self.List::Zero.visible = false;
        
                    var initial_data = hidden::ItemActionLog::makeInitialData(context, onInitItem, onActivateItem, VScrollbar);
                    initial_data.cb_focus_enter_ = onFocusEnterCallback;
                    initial_data.cb_focus_leave_ = onFocusLeaveCallback;
        
                    self.finder = UIKitProject::FinderRoot.setCopy(context, self.List, initial_data, false);
        
                    if (ROOT.active_friend == nil)
                    {
                        var user_number = Grim2.getLoginUserNumber();
                        requestActionLogList(user_number);
                    }
                    else
                    {
                        var me = self;
                        var user_id = ROOT.active_friend["id"].toString();

                        UserProfile2.requestUserProfile(user_id, function(args) 
                        {
                            |var context, var request| = args;
                            if (request.isDone())
                            {
                                var u = UserProfile2.decodeUserProfile(request);
                                var user_number = u["user_number"];
                                me.requestActionLogList(user_number);
                            }
                        });
                    }
                }
        
                module List
                {
                    function showRemoteRaceResultCallback(context, action_log)
                    {
                        ActionLogChildPane::showRemoteRaceResult(context, action_log);
                    }
        
                    method onKeyPress(context, event)
                    {
                        if (event.keysym == CELL_PAD_CTRL_TRIANGLE)
                        {
                            var focus_index = ActionLogChildPane.finder.getFocusIndex(context);
                            var widget = ActionLogChildPane.finder.getItemWidget(focus_index);
                            if (widget == nil)
                                return EVENTRESULT_CONTINUE;
                            
                            var candidate_data = ActionLogChildPane.finder.getItemData(context, focus_index);
                            var action_log = candidate_data.value_;

                            if (action_log["value1"] != "RE")
                                return EVENTRESULT_CONTINUE;

                            var data_list = [
                                UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "SHOW_REMOTE_RACE_RESULT"), true, showRemoteRaceResultCallback, action_log)
                            ];

                            var title = nil;
                            var x = widget.sx + (widget.w * widget.cursor_align_x);
                            var y = widget.sy + (widget.h * widget.cursor_align_y);
                            UIKitProject::ContextMenuPopup.open(context, x, y, title, data_list);
                            return EVENTRESULT_FILTER;
                        }
        
                        return EVENTRESULT_CONTINUE;
                    }
                }
            }
        }
    }

    // Pane for profile view (when PrivateLoungePane is hidden)
    module StatusPane
    {
        method open(context, friend, change_tab, friend_to_friend)
        {
            self.x = LoginUtil::isOnline() ? 0 : -100;
            if (change_tab)
            {
                if (ROOT.active_pane != nil)
                    ROOT.active_pane.close(context);
                
                if (ROOT.active_pane == GTUniversePane && LoginUtil::isOnline())
                {
                    GTModeRoot::FriendList::Body::ParallelActor.on_effect_end = nil;
                    fire2(true, ROOT::FriendList::Body);
                    ROOT::FriendList.insensitive = false;
                    ROOT::FriendList.visible = true;
                }

                self.ScalarInterpolator.on_effect_end = nil;
                updateStatus(context);
                fire(true, self);
                self.insensitive = false;
            }
            else if (friend_to_friend)
            {
                var target = self.Children;
                target.ScalarInterpolator.on_effect_end = function(context) 
                {
                    target.ScalarInterpolator.on_effect_end = nil;
                    StatusPane.updateStatus(context);
                    fire(true, target);
                };
                fire(false, target);
            }
            else
            {
                self.ScalarInterpolator.on_effect_end = function(context) 
                {
                    StatusPane.ScalarInterpolator.on_effect_end = nil;
                    StatusPane.updateStatus(context);
                    fire(true, StatusPane);
                };
                fire(false, self);
            }

            var show_header = ROOT.active_friend == nil;
            showHeader(context, show_header);
            if (ROOT.active_friend == nil)
            {
                Menu::MyHome::Tab::GTUniverse.active = false;
                Menu::MyHome::Tab::PrivateLounge.active = false;
                Menu::MyHome::Tab::Status.active = true;
            }
            else
            {
                Menu::Friend::Tab::PrivateLounge.active = false;
                Menu::Friend::Tab::Status.active = true;
            }

            ROOT.active_pane = self;
        }

        method close(context)
        {
            self.ScalarInterpolator.on_effect_end = function(context) 
            {
                StatusPane.ScalarInterpolator.on_effect_end = nil;
            }

            self.insensitive = true;
            fire(false, self);
        }

        method updateStatus(context)
        {
            Children::Log.user_profile = nil;
            Children::Driver::Dummy.clearChild(context);
            Children::Car::Dummy.clearChild(context);
            Children::Driver::ListBox.setItemCount(0);
            Children::Car::ListBox.setItemCount(0);

            if (ROOT.active_friend == nil)
                updateStatusAsOffline(context);
            else
                updateStatusAsOnline(context, ROOT.active_friend["id"].toString());
        }

        method updateStatusAsOnline(context, user_id)
        {
            Children::License::Gold::TextFace.text = -1;
            Children::License::Silver::TextFace.text = -1;
            Children::License::Bronze::TextFace.text = -1;
            Children::License::Class::license.image_path = "piece/license_icon/none.img";

            UserProfile2.requestUserProfile(user_id, function(args) 
            {
                |var context, var request| = args;
                if (request.isDone())
                {
                    var u = UserProfile2.decodeUserProfile(request);
                    Children::Log.user_profile = u;
                    Children::Log::AspecLevel::TextFace.text = u["aspec_level"];
                    Children::Log::BspecLevel::TextFace.text = u["bspec_level"];
                    Children::Log::Achievement::TextFace.text = "%d %%".format(u["achievement"]);
                    Children::Log::Credit::TextFace.text = pdiext::MMisc::GetMoneyString(u["credit"]);
                    Children::Log::CountOfWin::TextFace.text = u["win_count"];
                    Children::Log::CountOfCar::TextFace.text = u["car_count"];
                    Children::Log::Trophy::TextFace.text = "%d %%".format(u["trophy"]);
                    Children::Log::Distance::TextFace.text = getDistanceText(context, u["odometer"]);

                    Children::License::Gold::TextFace.text = u["license_gold"];
                    Children::License::Silver::TextFace.text = u["license_silver"];
                    Children::License::Bronze::TextFace.text = u["license_bronze"];

                    var license_level = u["license_level"];
                    var label = "";
                    if (license_level == -1)
                        label = "none";
                    else
                    {
                        label = ["B", "A", "IC", "IB", "IA", "S"][license_level];
                        label = label.downcase();
                    }
                    Children::License::Class::license.image_path = "piece/license_icon/%{label}.img";
                }
            });

            OnlineBSpec.requestCarList(user_id, function(args) 
            {
                |var context, var request| = args;
                if (request.isDone())
                {
                    var car_list = OnlineBSpec.decodeCarList(request);
                    Children::Car.initialize(context, car_list, true);
                }
            });

            OnlineBSpec.requestDriverList(user_id, function(args) 
            {
                |var context, var request| = args;
                if (request.isDone())
                {
                    var driver_list = OnlineBSpec.decodeDriverList(request);
                    Children::Driver.initialize(context, driver_list, true);
                }
            });
        }

        function synchronizeServerCar(context, online_car_list)
        {
            var garage = GAME_STATUS.user_profile.garage;
            var row_list = Garage2Util::Online::getCarList("garage_id", "asc", true);
            var local_car_list = Array(row_list.size);

            var i = 0;
            foreach (var row in row_list)
            {
                var cpp = GAME_STATUS.user_profile.garage.convertRow2Cpp(row);
                local_car_list[i++] = cpp;
            }

            foreach (var local_car in local_car_list)
            {
                var find = false;
                foreach (var online_car in online_car_list)
                {
                    if (local_car.grim_car_id == online_car["car_id"])
                    {
                        find = true;
                        break;
                    }
                }

                if (!find)
                {
                    garage.setOnline(local_car.garage_id, false);
                }
            }

            foreach (var online_car in online_car_list)
            {
                var find = false;
                foreach (var local_car in local_car_list)
                {
                    if (local_car.grim_car_id == online_car["car_id"])
                    {
                        find = true;
                        break;
                    }
                }

                if (!find)
                {
                    OnlineBSpec.requestPopCar(online_car["car_id"], function(args) {});
                }
            }
        }

        function synchronizeServerDriver(context, online_driver_list)
        {
            var residence = GAME_STATUS.user_profile.residence;
            var local_driver_list = GAME_STATUS.user_profile.residence.getOnlineDriverList();

            foreach (var local_driver in local_driver_list)
            {
                var find = false;
                foreach (var online_driver in online_driver_list)
                {
                    var grim_driver_id = local_driver[4];

                    if (grim_driver_id == online_driver["driver_id"])
                    {
                        find = true;
                        break;
                    }
                }

                if (!find)
                {
                    var residence_id = local_driver[0];
                    residence.setOnline(residence_id, 0, 0);
                }
            }

            foreach (var online_driver in online_driver_list)
            {
                var find = false;
                foreach (var local_driver in local_driver_list)
                {
                    var grim_driver_id = local_driver[4];

                    if (grim_driver_id == online_driver["driver_id"])
                    {
                        find = true;
                        break;
                    }
                }

                if (!find)
                {
                    OnlineBSpec.requestPopDriver(online_driver["driver_id"], function(args) {});
                }
            }
        }

        method updateStatusAsOffline(context)
        {
            
            Children::Log::AspecLevel::TextFace.text = GAME_STATUS.user_profile.getAspecLevel();
            Children::Log::BspecLevel::TextFace.text = GAME_STATUS.user_profile.getBspecLevel();
            Children::Log::Achievement::TextFace.text = "%d %%".format(GAME_STATUS.user_profile.record.getAchievement());
            Children::Log::Credit::TextFace.text = pdiext::MMisc::GetMoneyString(GAME_STATUS.user_profile.cash);

            var count_of_win = GAME_STATUS.user_profile.total_aspec_win + GAME_STATUS.user_profile.total_bspec_win;
            Children::Log::CountOfWin::TextFace.text = count_of_win;
            Children::Log::CountOfCar::TextFace.text = GAME_STATUS.user_profile.garage.getCount();
            Children::Log::Trophy::TextFace.text = "%d %%".format(PDINetwork.getTrophyAchievementRate());

            var running_km = GAME_STATUS.user_profile.total_aspec_running_km + GAME_STATUS.user_profile.total_bspec_running_km;
            Children::Log::Distance::TextFace.text = getDistanceText(context, running_km);

            var results = LicenseUtil::getCountOfResult();
            var license = LicenseUtil::getString();
            Children::License::Gold::TextFace.text = results[0];
            Children::License::Silver::TextFace.text = results[1];
            Children::License::Bronze::TextFace.text = results[2];

            var label = license.downcase();
            if (label == "")
                label = "none";
            
            Children::License::Class::license.image_path = "piece/license_icon/%{label}.img";
                
            if (LoginUtil::isOnline())
            {
                var user_id = Grim2.getLoginUserId();
                OnlineBSpec.requestCarList(user_id, function(args) 
                {
                    |var context, var request| = args;
                    if (request.isDone())
                    {
                        var online_car_list = OnlineBSpec.decodeCarList(request);
                        synchronizeServerCar(context, online_car_list);

                        var car_list = Garage2Util::Online::getCarList("garage_id", "asc");
                        Children::Car.initialize(context, car_list, false);
                    }
                });

                OnlineBSpec.requestDriverList(user_id, function(args) 
                {
                    |var context, var request| = args;
                    if (request.isDone())
                    {
                        var online_driver_list = OnlineBSpec.decodeDriverList(request);
                        synchronizeServerDriver(context, online_driver_list);

                        var driver_list = GAME_STATUS.user_profile.residence.getOnlineDriverList();
                        Children::Driver.initialize(context, driver_list, false);
                    }
                });
            }
            else
            {
                var car_list = Garage2Util::Favorite::getCarList("garage_id", "asc");
                Children::Car.initialize(context, car_list, false);

                var driver_list = GAME_STATUS.user_profile.residence.getContractDriverList();
                Children::Driver.initialize(context, driver_list, false);
            }
        }

        method onFinalize(context)
        {
            Children::Driver::Dummy.clearChild(context);
            Children::Car::Dummy.clearChild(context);
        }

        module Children
        {
            module Log
            {
                attribute user_profile;

                method onFocusLeave(context)
                {
                    BalloonTip.reset_value();
                    return EVENTRESULT_FILTER;
                }

                function setBalloon(context, widget, current, total)
                {
                    var text = "";
                    if (current > -1)
                    {
                        text = "%s %s / %s".format(context.translate(ROOT, "Unit", "EXP"), current, total);
                    }
                    else
                    {
                        var max = GAME_STATUS.user_profile.getPointForNextLevel(GAME_STATUS.user_profile.getLevelMax() - 1);
                        text = "%s %s / %s".format(context.translate(ROOT, "Unit", "EXP"), max, max);
                    }

                    BalloonTip.set_value(context, widget, text, 0);
                }

                module AspecLevel
                {
                    method onFocusEnter(context, event)
                    {
                        var u = Log.user_profile;
                        var current = 0;
                        var total = 0;

                        if (u != nil)
                        {
                            current = u["aspec_exp"];
                            total = GAME_STATUS.user_profile.getPointForNextLevel(u["aspec_level"]);
                        }
                        else
                        {
                            current = GAME_STATUS.user_profile.getAspecCurrentPoint();
                            total = GAME_STATUS.user_profile.getAspecPointForNextLevel();
                        }

                        setBalloon(context, event.widget, current, total);
                        return EVENTRESULT_FILTER;
                    }
                }

                module BspecLevel
                {
                    method onFocusEnter(context, event)
                    {
                        var u = Log.user_profile;
                        var current = 0;
                        var total = 0;

                        if (u != nil)
                        {
                            current = u["bspec_exp"];
                            total = GAME_STATUS.user_profile.getPointForNextLevel(u["bspec_level"]);
                        }
                        else
                        {
                            current = GAME_STATUS.user_profile.getBspecCurrentPoint();
                            total = GAME_STATUS.user_profile.getBspecPointForNextLevel();
                        }

                        setBalloon(context, event.widget, current, total);
                        return EVENTRESULT_FILTER;
                    }
                }
            }

            module Driver
            {
                method initialize(context, driver_list, online)
                {
                    if (online)
                    {
                        foreach (var driver in driver_list)
                        {
                            var dp = gtengine::MCarDriverParameter();
                            var blob = pdistd::MBlob(driver["driver_parameter"]);
                            blob = pdistd::Inflate(blob);
                            dp.deserialize(blob);
                            driver["dp"] = dp;
                        }
                    }

                    ListBox.setItemCount(0);
                    ListBox.setItemTemplate(context, ROOT::hidden::ItemStatusDriver);
                    ListBox.driver_list = driver_list;
                    ListBox.setItemCount(driver_list.size);
                    Children::Driver::Dummy.clearChild(context);

                    var dummy_count = driver_list.size - 6;
                    for (var i = 0; i < dummy_count; ++i)
                    {
                        Children::Driver::Dummy.appendChild(context, hidden::ImageFaceBrankDriver.doCopy());
                    }

                    ListBox.can_focus = driver_list.size > 0;
                }

                method onInitialize(context)
                {
                    var adj = menu::MAdjustment();
                    ListBox.h_adjustment = HScrollbar.adjustment = adj;
                }

                method onFinalize(context)
                {
                    ListBox.setItemCount(0);
                }

                module ListBox
                {
                    attribute driver_list;

                    method onVisibleNotify(context, indexes)
                    {
                        foreach (var i in indexes)
                        {
                            if (self.getItemVisible(i))
                            {
                                var item = self.getItemWidget(i);
                                if (item == nil)
                                {
                                    item = self.getItemWidget(i, context);
                                    item.initialize(context, driver_list[i]);
                                }
                            }
                        }
                    }

                    method onFocusNotify(context, new_index, old_index)
                    {
                        var new_item = self.getItemWidget(new_index);
                        if (new_item != nil)
                        {
                            ROOT.setFocus(new_item);
                            new_item.showBalloon(context);
                        }

                        return EVENTRESULT_CONTINUE;
                    }

                    method onFocusEnter(context, event)
                    {
                        var item = self.getItemWidget(self.focus_index);
                        if (item != nil)
                        {
                            ROOT.setFocus(item);
                            item.showBalloon(context);
                        }

                        return EVENTRESULT_CONTINUE;
                    }

                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        main::sound.play("ok");

                        var item = self.getItemWidget(self.focus_index);
                        if (item != nil)
                        {
                            var driver = item.driver_info;
                            if (driver.isInstanceOf(System::Array))
                            {
                                UserProfileProject::DriverDetailPopup.open(context, driver, true);
                            }
                            else
                            {
                                var dp = item.dp;
                                var grim_driver_id = item.driver_info["driver_id"];
                                var driver = [-1, dp, false, true, grim_driver_id];
                                UserProfileProject::DriverDetailPopup.open(context, driver, true);
                            }
                        }

                        return EVENTRESULT_FILTER;
                    }
                }
            }

            module Car
            {
                method initialize(context, car_list, online)
                {
                    if (online)
                    {
                        foreach (var car in car_list)
                        {
                            var cp = gtengine::MCarParameter();
                            var blob = pdistd::MBlob(car["car_parameter"]);
                            blob = pdistd::Inflate(blob);
                            cp.deserialize(blob);
                            car["cp"] = cp;
                        }
                    }
                    else
                    {
                        foreach (var param in car_list)
                        {
                            var row = param[3];
                            var cpp = GAME_STATUS.user_profile.garage.convertRow2Cpp(row);
                            param[1] = cpp;
                            param[3] = nil;
                        }
                    }

                    ListBox.setItemCount(0);
                    ListBox.setItemTemplate(context, ROOT::hidden::ItemStatusCar);
                    ListBox.car_list = car_list;
                    ListBox.setItemCount(car_list.size);
                    Children::Car::Dummy.clearChild(context);

                    var dummy_count = car_list.size - 6;
                    for (var i = 0; i < dummy_count; ++i)
                    {
                        Children::Car::Dummy.appendChild(context, hidden::ImageFaceBrankCar.doCopy());
                    }

                    ListBox.can_focus = car_list.size > 0;
                }

                method onInitialize(context)
                {
                    var adj = menu::MAdjustment();
                    ListBox.h_adjustment = HScrollbar.adjustment = adj;
                }

                method onFinalize(context)
                {
                    ListBox.setItemCount(0);
                }

                module ListBox
                {
                    attribute car_list;

                    method onVisibleNotify(context, indexes)
                    {
                        foreach (var i in indexes)
                        {
                            if (self.getItemVisible(i))
                            {
                                var item = self.getItemWidget(i);
                                if (item == nil)
                                {
                                    item = self.getItemWidget(i, context);
                                    item.initialize(context, car_list[i]);
                                }
                            }
                        }
                    }

                    method onFocusNotify(context, new_index, old_index)
                    {
                        var new_item = self.getItemWidget(new_index);
                        if (new_item != nil)
                        {
                            ROOT.setFocus(new_item);
                            new_item.showBalloon(context);
                        }

                        return EVENTRESULT_CONTINUE;
                    }

                    method onFocusEnter(context, event)
                    {
                        var item = self.getItemWidget(self.focus_index);
                        if (item != nil)
                        {
                            ROOT.setFocus(item);
                            item.showBalloon(context);
                        }

                        return EVENTRESULT_CONTINUE;
                    }

                    method onActivate(context)
                    {
                        CHECK_ONLINE_GRANDTOP();

                        main::sound.play("ok");

                        var item = self.getItemWidget(self.focus_index);
                        if (item != nil)
                        {
                            var car = item.car_info;
                            if (car.isInstanceOf(System::Array))
                            {
                                |var garage_id, var cpp, var is_riding_car| = car;
                                var cp = GAME_STATUS.user_profile.garage.getCar(garage_id);
                                if (cp != nil)
                                {
                                    CarDetailPopup.open(context, cpp, garage_id, LoginUtil::isOnline(), false, ROOT.active_friend);
                                }
                            }
                            else
                            {
                                var cp = item.cp;
                                if (cp.getCarCode() == gtengine::MSpecDB::NO_CODE64)
                                    ;
                                else
                                {
                                    CarDetailPopup.open(context, cp, -1, true, false, ROOT.active_friend);
                                }
                            }
                        }

                        return EVENTRESULT_FILTER;
                    }
                }
            }
        }
    }

    // Widget templates
    module hidden
    {
        function makeInitialDataList(context, cb_init_item, cb_on_activate)
        {
            var Finder = UIKitProject::FinderRoot;
            var candidates = Finder.makeCandidates(Array(0));
            
            var initial_data = Finder.InitialData(candidates);
            initial_data.view_type_ = Finder.ViewType::SCROLL_V;
            initial_data.cb_init_item_ = cb_init_item;
            initial_data.cb_on_activate_ = cb_on_activate;
            return initial_data;
        }

        function makeInitialDataIcon(context, cb_init_item, cb_on_activate)
        {
            var Finder = UIKitProject::FinderRoot;
            var candidates = Finder.makeCandidates(Array(0));
            
            var initial_data = Finder.InitialData(candidates);
            initial_data.view_type_ = Finder.ViewType::SCROLL_V;
            initial_data.cb_init_item_ = cb_init_item;
            initial_data.cb_on_activate_ = cb_on_activate;
            initial_data.h_item_count_ = 4;
            return initial_data;
        }

        module Item
        {
            function makeInitialData(context, cb_init_item, cb_on_activate)
            {
                var initial_data = hidden::makeInitialDataList(context, cb_init_item, cb_on_activate);
                initial_data.extended_item_ = hidden::Item;
                return initial_data;
            }
        }

        module ItemL
        {
            function makeInitialData(context, cb_init_item, cb_on_activate)
            {
                var initial_data = hidden::makeInitialDataList(context, cb_init_item, cb_on_activate);
                initial_data.extended_item_ = hidden::ItemL;
                return initial_data;
            }
        }

        module ItemIcon
        {
            function makeInitialData(context, cb_init_item, cb_on_activate)
            {
                var initial_data = hidden::makeInitialDataIcon(context, cb_init_item, cb_on_activate);
                initial_data.extended_item_ = hidden::ItemIcon;
                return initial_data;
            }
        }

        module ItemFriend
        {
            attribute id;
            attribute info;
            attribute order;

            method setInfo(context, friend)
            {
                self.TextFace.text = self.id;
                self.status_off.visible = true;
                self.status.visible = friend["presenceState"] == pdistd::PresenceState::SameContext;

                var u = friend["user_profile"];
                if (u != nil)
                {
                    if (self.order == "A")
                    {
                        self.Level::TextFace.text = u["aspec_level"];
                        self.Level.visible = true;
                    }
                    else if (self.order == "B")
                    {
                        self.Level::TextFace.text = u["bspec_level"];
                        self.Level.visible = true;
                    }
                }
            }

            method initialize(context, index, friend, order)
            {
                self.order = order;
                var user_id = friend["id"].toString();

                self.me.visible = user_id == Grim2.getLoginUserId();
                if (friend["user_profile"] != nil)
                {
                    var u = friend["user_profile"];
                    self.id = friend["id"];
                    self.info = u;
                    self.Image.bg.setColor(friend["color"]);
                    setInfo(context, friend);

                    if (user_id == Grim2.getLoginUserId())
                    {
                        var photo = PhotoFileUtil::get(GLOBAL_STATUS.user_profile.context.avatar_photo_id);
                        if (photo != nil)
                            self.Image.ImageFace.image_path = photo.filename_t;
                    } 
                    else
                        setPhotoImage(context, u["photo_id_avatar"], self.Image.ImageFace);
                }
                else
                {
                    var me = self;

                    UserProfile2.requestUserProfile(user_id, function(args) 
                    {
                        |var context, var request| = args;
                        if (request.isDone())
                        {
                            var u = UserProfile2.decodeUserProfile(request);
                            me.info = u;
                            me.id = friend["id"];
                            friend["user_profile"] = u;

                            var data = SAKURA_DATA[index % 8];
                            friend["sakura"] = data;

                            |var r, var g, var b| = Master::getMenuColor(u["menu_color"]);
                            var color = main::menu::MColorObject(r / 255.0, g / 255.0, b / 255.0, 1.0);
                            friend["color"] = color;
                            me.Image.bg.setColor(color);
                            me.setInfo(context, friend);
                            setPhotoImage(context, u["photo_id_avatar"], me.Image.ImageFace);
                        }
                    });
                }
            }
        }

        module ItemBbs
        {
            function makeInitialData(context, cb_init_item, cb_on_activate, vscrollbar)
            {
                var initial_data = hidden::makeInitialDataList(context, cb_init_item, cb_on_activate);
                initial_data.extended_item_ = hidden::ItemBbs;
                initial_data.v_scrollbar_ = vscrollbar;
                initial_data.import_iconbox_parameter_ = hidden::IconBoxBbs;
                return initial_data;
            }
        }

        module ItemActionLog
        {
            function makeInitialData(context, cb_init_item, cb_on_activate, vscrollbar)
            {
                var initial_data = hidden::makeInitialDataList(context, cb_init_item, cb_on_activate);
                initial_data.extended_item_ = hidden::ItemActionLog;
                initial_data.v_scrollbar_ = vscrollbar;
                initial_data.import_iconbox_parameter_ = hidden::IconBoxActionLog;
                return initial_data;
            }
        }

        module ItemGTMail
        {
            function makeInitialData(context, cb_init_item, cb_on_activate, vscrollbar)
            {
                var initial_data = hidden::makeInitialDataList(context, cb_init_item, cb_on_activate);
                initial_data.extended_item_ = hidden::ItemGTMail;
                initial_data.v_scrollbar_ = vscrollbar;
                initial_data.import_iconbox_parameter_ = hidden::IconBoxMail;
                return initial_data;
            }
        }

        module ItemPresent
        {
            function makeInitialData(context, cb_init_item, cb_on_activate, vscrollbar)
            {
                var initial_data = hidden::makeInitialDataList(context, cb_init_item, cb_on_activate);
                initial_data.extended_item_ = hidden::ItemPresent;
                initial_data.v_scrollbar_ = vscrollbar;
                initial_data.import_iconbox_parameter_ = hidden::IconBoxPresent;
                return initial_data;
            }
        }

        module ItemBspec
        {
            function makeInitialData(context, cb_init_item, cb_on_activate, hscrollbar)
            {
                var initial_data = hidden::makeInitialDataList(context, cb_init_item, cb_on_activate);
                var Finder = UIKitProject::FinderRoot;

                initial_data.view_type_ = Finder.ViewType::SCROLL_H;
                initial_data.extended_item_ = hidden::ItemBspec;
                initial_data.h_scrollbar_ = hscrollbar;
                return initial_data;
            }
        }

        module ItemStatusCar
        {
            attribute car_info;
            attribute cp;

            method initialize(context, car)
            {
                self.car_info = car;
                if (car.isInstanceOf(System::Array))
                {
                    |var garage_id, var cpp| = car;
                    var image_size = "M";
                    var path = GarageUtil::getThumbnailPath(garage_id, image_size);
                    if (!pdistd::Exist(path))
                    {
                        var car_code = cpp.car_code;
                        var car_label = main::gtengine::MSpecDB::getCarLabel(car_code);
                        var col = main::gtengine::MSpecDB::getCarVariationFlag(car_code, 1);
                        var car_color = col == nil ? 0 : col;
                        path = "car/thumbnail_%s/%s_%02d".format(image_size, car_label, car_color);
                    }

                    self.car.image_path = path;

                    var manufacturer = cpp.tuner_label;
                    self.manufacturer_logo.image_path = "piece/tunner_logo_S/%{manufacturer}.img";
                }
                else
                {
                    var thumbnail_photo_id = car["thumbnail_photo_id"];
                    if (thumbnail_photo_id != "")
                    {
                        var image_path = OnlineBSpec.getCarThumbnailPath(thumbnail_photo_id);
                        if (pdistd::Exist(image_path))
                        {
                            self.car.image_path = image_path;
                        }
                        else
                        {
                            var me = self;
                            OnlineBSpec.requestCarThumbnail(thumbnail_photo_id, function(args) 
                            {
                                |var context, var request| = args;
                                if (request.isDone())
                                {
                                    if (pdistd::Exist(image_path))
                                    {
                                        me.car.image_path = image_path;
                                    }
                                }
                            });
                        }
                    }

                    var car_label = car["car_label"];
                    var tuner_label = gtengine::MSpecDB::getTunerLabel(car_label);
                    self.manufacturer_logo.image_path = "piece/tunner_logo_S/%{tuner_label}.img";

                    self.cp = car["cp"];
                }
            }

            method getCarName()
            {
                var car_label = "";
                if (self.car_info.isInstanceOf(System::Array))
                {
                    |var garage_id, var cpp| = self.car_info;
                    car_label = main::gtengine::MSpecDB::getCarLabel(cpp.car_code);
                }
                else
                {
                    car_label = self.car_info["car_label"];
                }

                return gtengine::MSpecDB::getCarShortName(car_label);
            }

            method showBalloon(context)
            {
                var car_name = getCarName();
                if (car_name != "")
                    BalloonTip.set_value(context, self, car_name, 0);
            }
        }

        module ItemStatusDriver
        {
            attribute driver_info;
            attribute dp;
            attribute credit;

            method onRealize(context)
            {
                Level::Value::TextFace.text = "";
            }

            method setAvatar(context, head_code, head_color_code, body_code, body_color_code)
            {
                var me = self;
                self.ImageFaceCombo::Head.on_delay_load_complete = function(context) 
                {
                    me.ImageFaceCombo::Head.on_delay_load_complete = nil;
                    if (me.ImageFaceCombo::Body.on_delay_load_complete == nil)
                    {
                        me.ImageFaceCombo::FadeActor.start();
                    }
                }

                self.ImageFaceCombo::Body.on_delay_load_complete = function(context)
                {
                    me.ImageFaceCombo::Body.on_delay_load_complete = nil;
                    if (me.ImageFaceCombo::Head.on_delay_load_complete == nil)
                    {
                        me.ImageFaceCombo::FadeActor.start();
                    }
                }

                self.ImageFaceCombo::Head.image_path = ThumbnailUtil::Avatar::getImagePath(
                    ThumbnailUtil::Avatar::Genre::COMBO, ThumbnailUtil::Avatar::Type::MET, "M",
                    head_code, head_color_code, body_code, body_color_code
                );

                self.ImageFaceCombo::Body.image_path = ThumbnailUtil::Avatar::getImagePath(
                    ThumbnailUtil::Avatar::Genre::COMBO, ThumbnailUtil::Avatar::Type::SUITS, "M",
                    head_code, head_color_code, body_code, body_color_code
                );
            }

            method initialize(context, driver)
            {
                self.driver_info = driver;

                if (driver.isInstanceOf(System::Array))
                {
                    |var residence_id, var dp, var used, var online, var grim_driver_id| = driver;
                    setAvatar(context, dp.head_code, dp.head_color_code, dp.body_code, dp.body_color_code);
                    
                    self.Level::Value::TextFace.text = dp.growth_parameter.lv;
                    self.credit = -1;

                    if (grim_driver_id > 0 && LoginUtil::isOnline())
                    {
                        var me = self;

                        OnlineBSpec.requestDriver(grim_driver_id, function(args) 
                        {
                            |var context, var request| = args;
                            if (request.isDone())
                            {
                                var bspec_driver = OnlineBSpec.decodeDriver(request);
                                me.credit = bspec_driver["online_credit"];
                                me.Level::Credit.setCredit(context, me.credit);
                            }
                        });
                    }
                    else
                    {
                        self.Level::Credit.visible = false;
                    }
                }
                else
                {
                    setAvatar(context, driver["helmet"], driver["helmet_color"], driver["wear"], driver["wear_color"]);
                    self.Level::Value::TextFace.text = driver["level"];

                    self.dp = driver["dp"];
                    self.credit = driver["online_credit"];
                    self.Level::Credit.setCredit(context, self.credit);
                }
            }

            method getDriverName()
            {
                var _dp = nil;
                if (self.driver_info.isInstanceOf(System::Array))
                {
                    |var residence_id, var _dp| = self.driver_info;
                }
                else
                {
                    _dp = self.dp;
                }

                return _dp == nil ? "" : _dp.display_name;
            }

            method showBalloon(context)
            {
                var driver_name = getDriverName();
                if (driver_name != "")
                {
                    BalloonTip.set_value(context, self, driver_name, 0);
                }
            }
        }
    }
}