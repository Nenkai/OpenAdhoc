module ROOT
{
    attribute cp_;
    attribute garage_id_;
    attribute popup_;
    attribute invisible_pages_;
    attribute cursor_visible_;
    attribute caller_root_;
    attribute enable_input_;
    attribute invalid_car;

    method open(context, cp, garage_id, invalid_car)
    {
        self.cp_ = cp;
        self.garage_id_ = garage_id;
        self.invalid_car = invalid_car;
        SequenceUtil::startPage(context, ROOT);
    }

    method modal_open(context, cp, garage_id)
    {
        self.cp_ = cp;
        self.garage_id_ = garage_id;
        self.caller_root_ = context.getRootWindow();
        self.popup_ = main::SequenceUtil::ModalPage(context, ROOT);
        self.popup_.open();

        SoundUtil::MenuBGMCrossfadeGroup("menu", 0.0, 3.0);
    }

    method close(context)
    {
        PROJECT::ignorePadEvent(true);

        if (self.invisible_pages_ != nil)
        {
            foreach (var page in self.invisible_pages_)
                page.visible = true;

            self.invisible_pages_ = nil;
        }

        var effect_end2 = method (context)
        {
            PROJECT::ignorePadEvent(false);

            if (self.popup_ != nil)
            {
                self.popup_.close();
                self.popup_ = nil;
            }
        }

        var effect_end = method(context)
        {
            SaveDataUtilGT5::saveEveryWhere(context);
            captureThumbnail(context);

            self.CarName::FadeActor.reverse = false;
            self.CarName::FadeActor.reset();

            self.ChangeCarMessage::FadeActor.reverse = false;
            self.ChangeCarMessage::FadeActor.reset();

            self.SceneFace.visible = false;

            if (self.popup_ != nil)
            {
                self.FadeActor.reverse = true;
                self.FadeActor.on_effect_end = self.*effect_end2;
                self.FadeActor.start();
            }
            else
            {
                PROJECT::ignorePadEvent(false);
                SequenceUtil::startPage(context, GTModeRoot);
            }

            self.Cover::FadeActor.on_effect_end = nil;
        }

        self.Cover::FadeActor.reverse = false;
        self.Cover::FadeActor.on_effect_end = self.*effect_end;
        self.Cover::FadeActor.start();
    }

    method onInitialize(context)
    {
        PROJECT::ignorePadEvent(true);

        self.enable_input_ = false;
        self.cursor_visible_ = context.cursor_visible;
        context.cursor_visible = false;

        self.CarName::FadeActor.reverse = false;
        self.CarName::FadeActor.reset();

        self.ChangeCarMessage::FadeActor.reverse = false;
        self.ChangeCarMessage::FadeActor.reset();

        self.GetCarMessage.visible = false;

        self.Cover::FadeActor.reverse = true;
        self.Cover::FadeActor.reset();

        if (self.popup_ != nil)
        {
            self.FadeActor.reverse = true;
            self.FadeActor.reset();
            startSceneScript();
        }
        else
        {
            self.FadeActor.reverse = false;
            self.FadeActor.reset();
            self.SceneFace.visible = false;

            context.pushEvent(main::menu::MFunctionEvent(postInitialize, context));
        }

        SoundUtil::BGMFadeout(1.0);
    }

    method postInitialize(context)
    {
        var effect_end = method (context)
        {
            if (self.popup_ != nil)
            {
                self.invisible_pages_ = [];
                var page_list = context.getPageList();

                foreach (var page in page_list)
                {
                    if (self != page && page.visible)
                    {
                        page.visible = false;
                        self.invisible_pages_.push(page);
                    }
                }
            }

            startSceneScript();
            self.FadeActor.on_effect_end = nil;
        }

        self.FadeActor.on_effect_end = self.*effect_end;
        self.FadeActor.start();
    }

    method startSceneScript()
    {
        self.CarName::name.text = gtengine::MSpecDB::getCarShortName(self.cp_.getCarCode());
        self.CarName::color.text = Garage2Util::getColorName(self.cp_);

        var bgm_code = gtengine::MSpecDB::checkGenericFlag("has_premium_model", self.cp_.getCarCode()) ? "buy_car2" : "buy_car";

        self.SceneFace.visible = true;
        self.SceneFace.startSceneScript("menu_gift_car01", self.cp_, onSceneCommandEnd, [bgm_code]);
    }

    method onSceneCommandEnd(context, args)
    {
        context.addTimeOut("enable_input", self.onEnableInput, context);
        context.setTimeOut("enable_input", 7.0);

        self.Cover.FadeActor.start();

        SoundUtil::MenuBGMCrossfadeGroup(args[0], 0.0, 1.0, SoundUtil::REPEAT_OFF);

        PROJECT::ignorePadEvent(false);
    }

    method onEnableInput(context)
    {
        self.enable_input_ = true;
        context.setTimeOut("enable_input", 0.0);

        self.CarName.visible = true;
        self.CarName::FadeActor.start();

        context.wait(1.0);

        var car_year = gtengine::MSpecDB::getCarYear(self.cp_.getCarCode());

        if (car_year >= 1900 && car_year < 1960)
            PDINetwork.unlockTrophyAsync(gtengine::TrophyType::OBTAIN_BEFORE50S_CAR);

        var ride_car = false;
        var first_car = false;

        if (!self.invalid_car)
        {
            if (!GAME_STATUS.user_profile.game_flags.getFlag("USER_STATUS", "GET_FIRST_CAR") || 
                GAME_STATUS.user_profile.garage.getCount() == 1)
            {
                ride_car = true;
                var first_car = true;

                DialogUtil::openInformationDialog(context, context.translate(ROOT, "MESSAGE_GET_FIRST_CAR"));
                GAME_STATUS.user_profile.game_flags.setFlag("USER_STATUS", "GET_FIRST_CAR", true);
                GAME_STATUS.user_profile.garage.rideCar(self.garage_id_);
            }
            else
            {
                var change_car = ChangeCarMessage.open(context);
                if (change_car)
                {
                    ride_car = true;

                    GAME_STATUS.user_profile.garage.rideCar(self.garage_id_);

                    if (self.caller_root_ != nil && self.caller_root_["HeaderGT5"] != nil)
                        self.caller_root_.HeaderGT5::HBox::RidingCar.refresh(context);

                    SoundUtil::PlayCarStartSound(GAME_STATUS.user_profile.garage.getRidingCar());
                }
            }
        }

        context.wait(1.5);

        GameItemUtil::putPaintItem(self.cp_.getPaintID(), context, ROOT);

        if (ride_car)
        {
            var cp = GAME_STATUS.user_profile.garage.getRidingCar();
            ActionLogUtil::rideCar(cp.getCarLabel());
        }

        var car_label = self.cp_.getCarLabel();

        var strlog;
        if (first_car)
            strlog = "GF=%s:GC=%s:GU=%s".format(car_label, car_label, main::PDINetwork.getClientName());
        else
            strlog = "GC=%s:GU=%s".format(car_label, main::PDINetwork.getClientName());

        main::Grim2.requestPutLog(strlog);

        self.close(context);
    }

    method captureThumbnail(context)
    {
        SceneFaceDummy.visible = true;
        ThumbnailUtil::captureIconForGarage(context, SceneFaceDummy, self.garage_id_, self.cp_, ["M", "L"]);
        SceneFaceDummy.visible = false;
    }

    method onFinalize(context)
    {
        context.removeTimeOut("enable_input");

        if (self.invisible_pages_ != nil)
        {
            foreach (var page in self.invisible_pages_)
                page.visible = true;

            self.invisible_pages_ = nil;
        }

        context.cursor_visible = self.cursor_visible_;
        self.cursor_visible_ = nil;
    }
}

module ROOT::SceneFace
{
    attribute command_end_func_;
    attribute command_end_func_args_;

    method startSceneScript(scene_script, cp, command_end_func, command_end_func_args)
    {
        self.command_end_func_ = command_end_func;
        self.command_end_func_args_ = command_end_func_args;
        SceneFaceUtil::loadScene(self, scene_script, cp);

        SceneFaceUtil::SetSignalHandler(self, SceneFaceUtil::HandleType::SCENE_START, self.on_signal);
    }

    method on_signal(context, enum, param)
    {
        if (enum == SceneFaceUtil::HandleType::SCENE_START)
        {
            if (self.command_end_func_ != nil)
            {
                self.command_end_func_(context, self.command_end_func_args_);
                self.command_end_func_ = nil;
            }

            self.command_end_func_args_ = nil;
        }
    }

    method onFinalize(context)
    {
        self.command_end_func_ = nil;
        self.command_end_func_args_ = nil;
    }
}

module ROOT::ChangeCarMessage
{
    attribute result
    attribute event_loop

    method open(context)
    {
        self.visible = true;

        ROOT.setFocus(self.YesNo::Yes);

        self.FadeActor.reverse = false;
        self.FadeActor.start();

        context.cursor_visible = true;
        self.result = nil;

        self.event_loop = main::menu::EventLoop(context);
        self.event_loop.enter();

        var res = self.result;
        if (res == nil)
            res = false;

        self.result = nil;
        self.FadeActor.reverse = true;
        self.FadeActor.start();

        context.cursor_visible = false;

        return res;
    }

    method onActivate(context, event)
    {
        if (!ROOT.enable_input_)
        {
            ROOT.onEnableInput(context);
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");

        if (event.widget == self.YesNo::Yes)
            self.result = true;

        if (self.event_loop != nil)
        {
            self.event_loop.leave();
            self.event_loop = nil;
        }

        return EVENTRESULT_FILTER;
    }

    method onCancel(context, event)
    {
        if (!ROOT.enable_input_)
        {
            ROOT.onEnableInput(context);
            return EVENTRESULT_FILTER;
        }

        main::sound.play("cancel");
        ROOT.setFocus(self.YesNo::No);

        return EVENTRESULT_FILTER;
    }
}