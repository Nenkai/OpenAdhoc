













module ROOT
{
    hidden.visible = false;

    method open(context)
    {
        SettingFrame.appear();
        SequenceUtil::pushPage(context, self);
    }

    method close(context)
    {
        var delay_time = SettingFrame.hide();
        SequenceUtil::popPage(context, self, delay_time);
    }

    method onInitialize(context)
    {
        SettingFrame::Pane::ScrolledBody::clip::space::IsPremiumOnly.active = true;
        SettingFrame::Pane::ScrolledBody::clip::space::Manufacturer.setupOptionMenu(context);
    }

    method onCancel(context)
    {
        sound.play("cancel");
        self.close(context);
        return EVENTRESULT_FILTER;
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::IsPremiumOnly
    {
        function onValueChanged(context)
        {
            SettingFrame::Pane::ScrolledBody::clip::space::Manufacturer.setupOptionMenu(context);
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Manufacturer
    {
        method setupOptionMenu(context)
        {
            OptionMenu::popup::vbox.clearChildren(context);
            var w = hidden::PulldownItem.doCopy();
            w.defineAttribute("code", gtengine::MSpecDB::NO_CODE);
            w.label.text = context.translate(ROOT, "Debug_All");
            OptionMenu::popup::vbox.appendChild(context, w);

            var lang = main::pdistd::MLocale::getLanguage();
            var orderby_clause = "ORDER BY %{lang}";
            var tuner_list = SPECDB.queryList("SELECT ID, TunerString FROM TUNER %{orderby_clause}");
            foreach (var tuner_info in tuner_list)
            {
                w = hidden::PulldownItem.doCopy();
                w.defineAttribute("code", tuner_info.ID);
                w.label.text = context.translate(ROOT, "TunerName", tuner_info.TunerString);
                OptionMenu::popup::vbox.appendChild(context, w);
            }

            OptionMenu.applyAppend(context);
            OptionMenu.setIndex(context, 0);
        }

        method getTunerCode(context)
        {
            var w = OptionMenu.getItem(OptionMenu.index, context);
            return w.code;
        }

        method onFinalize(context)
        {
            OptionMenu::popup::vbox.clearChildren(context);
        }

        module OptionMenu
        {
            method onValueChanged(context)
            {
                var w = self.getItem(self.index, context);
                SettingFrame::Pane::ScrolledBody::clip::space::Car.setupOptionMenu(context, w.code);
                __prototype__::onValueChanged(context);
            }
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Car
    {
        method setupOptionMenu(context, tuner_code)
        {
            OptionMenu::popup::vbox.clearChildren(context);
            if (tuner_code != gtengine::MSpecDB::NO_CODE)
            {
                var w = hidden::PulldownItem.doCopy();
                w.defineAttribute("code", gtengine::MSpecDB::NO_CODE);
                w.label.text = context.translate(ROOT, "Debug_All");
                OptionMenu::popup::vbox.appendChild(context, w);

                var query_str = "SELECT ID, NumColor FROM GENERIC_CAR";
                var params = [];
                var where_added = false;

                if (SettingFrame::Pane::ScrolledBody::clip::space::IsPremiumOnly.active)
                {
                    if (!where_added)
                    {
                        query_str += " WHERE ";
                        where_added = true;
                    }
                    else
                        query_str += "AND ";

                    query_str += "SpecifyFlags1 & ?";
                    params.push(gtengine::GenericFlag::USE_PREMIUM_MODEL);
                }

                if (tuner_code != gtengine::MSpecDB::NO_CODE)
                {
                    if (!where_added)
                    {
                        query_str += " WHERE ";
                        where_added = true;
                    }
                    else
                        query_str += "AND ";

                    query_str += "Tuner=?";
                    query_str += " ORDER BY Tuner, PP, Year";
                    params.push(tuner_code);
                }

                var car_list = SPECDB.executeQuery1C(query_str, params);
                foreach (var car_code in car_list)
                {
                    w = hidden::PulldownItem.doCopy();
                    w.defineAttribute("code", car_code);
                    w.label.text = gtengine::MSpecDB::getCarShortName(car_code);
                    OptionMenu::popup::vbox.appendChild(context, w);
                }

                OptionMenu.applyAppend(context);
                OptionMenu.setIndex(context, 0);
                OptionMenu.insensitive = false;
            }
            else
            {
                var w = hidden::PulldownItem.doCopy();
                w.defineAttribute("code", gtengine::MSpecDB::NO_CODE);
                w.label.text = "---";

                OptionMenu::popup::vbox.appendChild(context, w);
                OptionMenu.applyAppend(context);
                OptionMenu.setIndex(context, 0);
                OptionMenu.insensitive = true;
            }
        }

        method getCarCode(context)
        {
            var w = OptionMenu.getItem(OptionMenu.index, context);
            return w.code;
        }

        method onFinalize(context)
        {
            OptionMenu::popup::vbox.clearChildren(context);
        }

        module OptionMenu
        {
            method onValueChanged(context)
            {
                var w = self.getItem(self.index, context);
                SettingFrame::Pane::ScrolledBody::clip::space::Color.setupOptionMenu(context, w.code);
                __prototype__::onValueChanged(context);
            }
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Color
    {
        static INDEX_MAIN_COLOR = -1;
        static INDEX_ALL = -2;

        method setupOptionMenu(context, car_code)
        {
            OptionMenu::popup::vbox.clearChildren(context);
            var w = hidden::PulldownItem.doCopy();
            w.defineAttribute("index", INDEX_ALL);
            w.label.text = context.translate(ROOT, "Debug_All");
            OptionMenu::popup::vbox.appendChild(context, w);

            if (car_code != gtengine::MSpecDB::NO_CODE)
            {
                var res = SPECDB.query1("SELECT NumColor, MainColor FROM GENERIC_CAR WHERE ID=?", [car_code]);
                for (var i = 0; i < res.NumColor; i++)
                {
                    w = hidden::PulldownItem.doCopy();
                    w.defineAttribute("index", i);
                    var color_name = gtengine::MSpecDB::getCarColorName(car_code, i).trim();
                    w.label.text = color_name != "" ? color_name : "---";
                    OptionMenu::popup::vbox.appendChild(context, w);
                }

                OptionMenu.applyAppend(context);
                OptionMenu.setIndex(context, 1 + res.MainColor);
            }
            else
            {
                w = hidden::PulldownItem.doCopy();
                w.defineAttribute("index", INDEX_MAIN_COLOR);
                w.label.text = context.translate(ROOT, "Debug_MainColor");
                OptionMenu::popup::vbox.appendChild(context, w);
                OptionMenu.applyAppend(context);
                OptionMenu.setIndex(context, 1);
            }
        }

        method getColorIndex(context)
        {
            var w = OptionMenu.getItem(OptionMenu.index, context);
            return w.index;
        }

        method onFinalize(context)
        {
            OptionMenu::popup::vbox.clearChildren(context);
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Exec
    {
        async method addCar(context, car_code, color)
        {
            var garage = GAME_STATUS.user_profile.garage;
            if (garage.getCount() == garage.getMax())
            {
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, "garage is full");
                return false;
            }

            var cp = await gtengine::MCarParameter(car_code);
            if (color != nil)
                cp.color = color;

            var garage_id = await GAME_STATUS.user_profile.garage.addCar(cp);
            if (garage.getRidingGarageId() == gtengine::MSpecDB::NO_CODE)
                garage.rideCar(garage_id);

            return true;
        }

        method onActivate(context)
        {
            sound.play("ok");
            if (DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, "yes no ?"))
            {
                var tuner_code = SettingFrame::Pane::ScrolledBody::clip::space::Manufacturer.getTunerCode(context);
                var car_code = SettingFrame::Pane::ScrolledBody::clip::space::Car.getCarCode(context);
                var color = SettingFrame::Pane::ScrolledBody::clip::space::Color.getColorIndex(context);

                var query_str = "SELECT ID, NumColor FROM GENERIC_CAR";
                var params = [];
                var where_added = false;

                if (SettingFrame::Pane::ScrolledBody::clip::space::IsPremiumOnly.active)
                {
                    if (!where_added)
                    {
                        query_str += " WHERE ";
                        where_added = true;
                    }
                    else
                        query_str += "AND ";

                    query_str += "SpecifyFlags1 & ?";
                    params.push(gtengine::GenericFlag::USE_PREMIUM_MODEL);
                }

                if (car_code != gtengine::MSpecDB::NO_CODE)
                {
                    if (!where_added)
                    {
                        query_str += " WHERE ";
                        where_added = true;
                    }
                    else
                        query_str += "AND ";

                    query_str += "ID=?";
                    params.push(car_code);
                }
                else if (tuner_code != gtengine::MSpecDB::NO_CODE)
                {
                    if (!where_added)
                    {
                        query_str += " WHERE ";
                        where_added = true;
                    }
                    else
                        query_str += "AND ";

                    query_str += "Tuner=?";
                    params.push(tuner_code);
                }

                var car_list = SPECDB.queryList(query_str, params);
                var progress = pdistd::MProgress();
                progress.value = 0.0;
                
                static abort = false;

                DialogUtil::setProgress(context, progress);
                DialogUtil::setProgressCancelCB(context, function(context) { abort = true; });
                DialogUtil::openProgressDialog(context, "add cars.", "done!", "faild!", async function(context, args)
                {
                    for (var i = 0; i < car_list.size; i++)
                    {
                        var car_no = (i + 1).toFloat();
                        progress.value = car_no / car_list.size;
                        var car = car_list[i];

                        DialogUtil::setProgressLabel(context, "%d / %d".format(car_no, car_list.size));

                        if (await gtengine::MSpecDB::isUnderDevelopmentCar(car.ID))
                            continue;

                        if (color == SettingFrame::Pane::ScrolledBody::clip::space::Color::INDEX_ALL)
                        {
                            for (var ci = 0; ci < car.NumColor; ci++)
                            {
                                if (!addCar(context, car.ID, ci))
                                    break;

                                if (abort)
                                    break;

                                yield;
                            }
                        }
                        else if (color == SettingFrame::Pane::ScrolledBody::clip::space::Color::INDEX_ALL) // BUG: This is supposed to be INDEX_MAIN_COLOR
                        {
                            var main_color = SPECDB.executeQuery1R1C("SELECT MainColor FROM GENERIC_CAR WHERE ID=?", [car_code]);
                            if (!addCar(context, car.ID, main_color))
                                break;
                            
                            if (abort)
                                break;
                            
                            yield;
                        }
                        else
                        {
                            if (!addCar(context, car.ID))
                                break;
                            
                            if (abort)
                                break;
                            
                            yield;
                        }
                    }

                    return [true, true];
                });
            }
        }
    }
}