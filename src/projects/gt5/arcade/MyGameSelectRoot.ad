













module MyGameSelectRoot
{
    hidden.visible = false;

    attribute gp_list_;
    attribute finder_;

    method open(context, from_prev_page)
    {
        context.pushPage(MyGameSelectRoot);
        return true;
    }

    method close(context)
    {
        ArcadeProject::ignorePadEvent(true, true);

        self.FadeEffect.reverse = true;
        self.FadeEffect.on_effect_end = self.close_end;
        self.FadeEffect.start();
    }


    method close_end(context)
    {
        self.FadeEffect.reverse = false;
        self.FadeEffect.reset();
        context.closePage(self);

        ArcadeProject::ignorePadEvent(false);
    }

    method getGP(idx)
    {
        return self.gp_list_[idx];
    }

    method onInitialize(context)
    {
        ModeName.text = "";
        EventTitle.text = "";
        self.gp_list_ = Array();

        EventSelector.initialize(context, self.gp_list_);

        ListBox.initialize(context, self.gp_list_);

        self.insensitive = true;

        EventInfo::ToolTip.remove();
        EventInfo::ToolTip.action_type = 3;

        context.pushEvent(main::menu::MFunctionEvent(self.postInitialize, context));
    }


    method postInitialize(context)
    {
        self.FadeEffect.start();
        self.insensitive = false;

        EventSelector.appear(context, false, true);
    }

    method onFinalize(context)
    {
        gp_list_ = nil;
    }
}

module MyGameSelectRoot::EventSelector
{
    static sDuration;
    attribute finder_;

    method initialize(context, gp_list)
    {
        var initial_data = self.getInitialData(context, gp_list);
        self.finder_ = UIKitProject::FinderRoot.setCopy(context, self, initial_data, false);



        hide(context, true);
    }

    method appear(context, warp, on_root_open)
    {
        if (warp)
        {
            self.MoveEffect.reverse = false;
            self.MoveEffect.setStartDuration(0, 0.0);
            self.MoveEffect.start();
            self.MoveEffect.warp();
        } 
        else 
        {
            self.MoveEffect.reverse = false;


            if (on_root_open)
                self.MoveEffect.setStartDuration(0, self.sDuration);
            else
                self.MoveEffect.setStartDuration(0, 0.0);

            self.MoveEffect.start();
        }
        self.insensitive = false;

        context.pushEvent(main::menu::MFunctionEvent(self.finder_.onFocus, context, MyGameSelectRoot));
    }

    method hide(context, warp)
    {
        BalloonTip.reset_value();

        if (warp)
        {
            self.MoveEffect.reverse = true;
            self.MoveEffect.setStartDuration(0, 0.0);
            self.MoveEffect.start();
            self.MoveEffect.warp();
        } 
        else 
        {
            self.MoveEffect.reverse = true;
            self.MoveEffect.setStartDuration(0, 0.0);
            self.MoveEffect.start();
        }
        self.insensitive = true;
    }

    method onLoad(context)
    {
        self.sDuration = self.MoveEffect.getStartDuration(0);
    }

    method onUnLoad(context)
    {
        self.sDuration = nil;
    }

    method onFinalize(context)
    {
        if (self.finder_ != nil)
        {
            var parent = self.finder_.parent;
            parent.removeChild(context, self.finder_);
            self.finder_ = nil;
        }
    }


    method cb_on_activate(context, folder_data, func_close, arg)
    {
        main::sound.play("ok");

        var candidate_data = folder_data.getItemData();
        var event_idx = candidate_data.value_;
        var gp = MyGameSelectRoot.getGP(event_idx);

        if (gp.event.game_mode == gtengine::GameMode::SINGLE_RACE)
        {
            main::GAME_STATUS.user_profile.context.arcade_difficulty = ArcadeProject::DifficultyEnum::NORMAL;

            var pair_list = gp.event.information.flier_other_info.split(",");
            foreach (var pair_str in pair_list)
            {
                var pair = pair_str.split(":");
                if (pair[0] == "difficulty")
                    main::GAME_STATUS.user_profile.context.arcade_difficulty = pair[1];
            }
        }
        else
        {
            main::GAME_STATUS.user_profile.context.arcade_difficulty = ArcadeProject::DifficultyEnum::NONE;
        }



        gArcadeSequence.setGP(gp);
        gArcadeSequence.moveNextPage(context);
    }

    method cb_on_cancel(context, finder_data, func_popup_close)
    {
        gArcadeSequence.movePrevPage(context);
    }

    method cb_init_item(context, candidate_data, item_w, arg)
    {
        var event_idx = candidate_data.value_;
        var gp = MyGameSelectRoot.getGP(event_idx);
        item_w.init(context, event_idx, gp);
    }

    method cb_focus_enter(context, candidate_data, item_w, old_candidate_data, old_item_w, arg)
    {
        var event_idx = candidate_data.value_;
        ListBox.focus_index = event_idx;
        var gp = MyGameSelectRoot.getGP(event_idx);
        EventTitle.text = gp.event.information.title.getText();
        EventTitle::FadeEffect.restart();
        EventInfo::ToolTip.value = "";
        EventInfo::ToolTip.value = gp.event.information.description.getText();
        BalloonTip.set_value(context, item_w, gp.event.information.one_line_title.getText(), 24);
        switch (gp.event.game_mode)
        {
            case gtengine::GameMode::SINGLE_RACE:
                ModeName.text = context.translate(RaceModeRoot, "E_LABEL_SINGLE_RACE");
                break;
            case gtengine::GameMode::TIME_ATTACK:
                ModeName.text = context.translate(RaceModeRoot, "E_LABEL_TIME_ATTACK");
                break;
            case gtengine::GameMode::DRIFT_ATTACK:
                ModeName.text = context.translate(RaceModeRoot, "E_LABEL_DRIFT_ATTACK");
                break;
        }
        ModeName.TransientReset();
    }

    method getInitialData(context, gp_list)
    {
        var candidates = Array(gp_list.size);
        for (var i = 0; i < candidates.size; i++)
        {
            candidates[i] = UIKitProject::FinderRoot.CandidateData(i);
        }

        var initial_data = UIKitProject::FinderRoot.InitialData();
        initial_data.view_type_ = UIKitProject::FinderRoot::ViewType::SCROLL_H;
        initial_data.item_type_ = UIKitProject::FinderRoot::ItemType::COMMON_THUMB_S;
        initial_data.candidates_ = candidates;
        initial_data.translate_page_ = MyGameSelectRoot;
        initial_data.load_image_from_disk_ = false;
        initial_data.cb_init_item_ = self.cb_init_item;
        initial_data.cb_on_activate_ = self.cb_on_activate;
        initial_data.cb_on_cancel_ = self.cb_on_cancel;
        initial_data.cb_focus_enter_ = self.cb_focus_enter;
        initial_data.focus_index_ = 0;
        initial_data.extended_item_ = hidden::Thumb;
        initial_data.import_iconbox_parameter_ = self.IconBox;

        return initial_data;
    }
}

module MyGameSelectRoot::hidden::Icon
{
    method init(context, i, gp)
    {
        self.TextFace.text = i;

        var color_obj = nil;

        if (gp.event.information.flier_other_info != "")
        {
            var pair_list = gp.event.information.flier_other_info.split(",");
            foreach (var pair_str in pair_list)
            {
                var pair = pair_str.split(":");
                if (pair[0] == "color")
                {
                    color_obj = menu::MColorObject(pair[1]);

                }
                else if (pair[0] == "color_index")
                {
                    var color_widget = "color_%02d".format(pair[1].toInt());
                    if (color_widget == nil)
                        color_widget = "color_unknown";
                
                    if (hidden::ColorSet[color_widget] != nil)
                        color_obj = hidden::ColorSet[color_widget].getColor(0);
                }
            }
        }
        else
        {
            if (hidden::ColorSet["color_unknown"] != nil)
                color_obj = hidden::ColorSet["color_unknown"].getColor(0);
        }

        if (color_obj != nil)
        {
            self.TextFace.text_color = color_obj;
        }
    }
}



module MyGameSelectRoot::hidden::Thumb
{
    method init(context, i, gp)
    {
        if (gp.event.information.flier_other_info != "")
        {
            var pair_list = gp.event.information.flier_other_info.split(",");
            foreach (var pair_str in pair_list)
            {
                var pair = pair_str.split(":");
                if (pair[0] == "difficulty")
                {
                    switch (pair[1])
                    {
                        case ArcadeProject::DifficultyEnum::EASY:
                            self.ImageFace.image_path = "image/gt5/test/thumb_cstm_nascar01.dds";
                            break;
                        case ArcadeProject::DifficultyEnum::NORMAL:
                            self.ImageFace.image_path = "image/gt5/test/thumb_cstm_nascar02.dds";
                            break;
                        case ArcadeProject::DifficultyEnum::PRO:
                            self.ImageFace.image_path = "image/gt5/test/thumb_cstm_nascar03.dds";
                            break;
                    }
                }

                if (pair[0] == "sub_image_path")
                {
                    self.ImageFace.image_path = pair[1];
                }
            }
        }
    }
}

module MyGameSelectRoot::ListBox
{
    method get_item(context, idx)
    {
        if (idx < 0)
            return nil;

        var item = self.getItemWidget(idx);
        if (item == nil)
        {
            item = self.getItemWidget(idx, context);
            item.init(context, MyGameSelectRoot.getGP(idx));
        }
        return item;
    }

    method initialize(context, gp_list)
    {
        self.setItemTemplate(context, hidden::FlyerV2);
        self.setItemCount(gp_list.size);

        for (var i = 0; i < self.getItemCount(); i++)
        {
            self.setItemInsensitive(i, true);
        }
    }

    method onFocusEnter(context)
    {
        var item = self.getItemWidget(self.focus_index);
        if (item == nil)
        {
            item = self.getItemWidget(self.focus_index, context);
            item.init(context);
        }
        MyGameSelectRoot.setFocus(item["OK"]);
    }

    method onFocusChanged(context, new_index, old_index)
    {
        if (-1 < new_index)
            self.setItemInsensitive(new_index, false);

        if (-1 < old_index)
            self.setItemInsensitive(old_index, true);
    }


    method onVisibleNotify(context, indexes)
    {
        foreach (var i in indexes)
        {
            if (self.getItemVisible(i))
            {
                get_item(context, i);
            }
        }
    }


    method onKeyPress(context, event)
    {
        if (event.keysym == CELL_PAD_CTRL_R3_UP)
            return EVENTRESULT_CONTINUE;

        return EVENTRESULT_FILTER;
    }
}

module MyGameSelectRoot::hidden::Flyer
{
    method onInitialize(context)
    {
        self.ImageCourse.image_path = "";
        self.ImageCourseMap.image_path = "";
    }

    method init(context, gp)
    {
        if (1 == gp.event.constraint.cars.size)
        {
            var car_label = gp.event.constraint.cars[0].getCarLabel();

            self.ImageCar.image_path = "";
            self.ImageCarCover.image_path = "";

            var car_name = main::gtengine::MSpecDB::getCarShortName(car_label);
            self.CarName.text = car_name;
            self.ImageCarDummy.visible = false;
        } 
        else 
        {
            self.ImageCar.visible = false;
            self.ImageCarCover.visible = false;
            self.CarName.text = "--";
        }

        if (main::gtengine::MSpecDB::NO_CODE64 != gp.event.track.course_code)
        {
            var course_info = CourseData::getCourseInfo(gp.event.track.course_code);
            var course_label = main::gtengine::MSpecDB::getCourseLabel(gp.event.track.course_code);

            self.ImageCourse.image_path = "piece/course_logo_L/%{course_info.logo}.img";
            self.ImageCourseMap.image_path = "piece/course_map_LL/%{course_info.map}.img";
            self.CourseName.text = context.translate(MyGameSelectRoot, "CourseName", course_label);
            self.ImageCourseDummy.visible = false;
        } 
        else 
        {
            self.ImageCourse.visible = false;
            self.ImageCourseMap.visible = false;
            self.CourseName.text = "--";
        }

        self.Title.text = gp.event.information.title.getText();
        self.BG.image_path = gp.event.information.flier_image_path;

        var color_obj = nil;
        if (gp.event.information.flier_other_info != "")
        {
            var pair_list = gp.event.information.flier_other_info.split(",");
            foreach (var pair_str in pair_list)
            {
                var pair = pair_str.split(":");
                if (pair[0] == "color")
                {
                    color_obj = menu::MColorObject(pair[1]);

                }
                else if (pair[0] == "color_index")
                {
                    var color_widget = "color_%02d".format(pair[1].toInt());
                    if (color_widget == nil)
                        color_widget = "color_unknown";

                    if (hidden::ColorSet[color_widget] != nil)
                        color_obj = hidden::ColorSet[color_widget].getColor(0);
                }
            }
        }
        else
        {
            if (hidden::ColorSet["color_unknown"] != nil)
                color_obj = hidden::ColorSet["color_unknown"].getColor(0);
        }

        if (color_obj != nil)
        {
            self.Title.text_color = color_obj;
            self.Belt.setColor(color_obj);
            self.BeltReflection.setColor(color_obj);
            self.SpotLight.setColor(color_obj);
        }
    }
}

module MyGameSelectRoot::hidden::FlyerV2
{
    method onInitialize(context)
    {
        self.ImageFace.image_path = "";
    }

    method init(context, gp)
    {
        self.ImageFace.image_path = gp.event.information.flier_image_path;

        if (main::gtengine::MSpecDB::NO_CODE64 != gp.event.track.course_code)
        {
            var course_info = CourseData::getCourseInfo(gp.event.track.course_code);
            var course_label = main::gtengine::MSpecDB::getCourseLabel(gp.event.track.course_code);
            self.CourseLogo.image_path = "piece/course_logo_M/%{course_info.logo}.img";
        }
    }
}