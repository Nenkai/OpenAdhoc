module PROJECT::ROOT
{
    function open(context)
    {
        start_page(context, ROOT);
    }

    function close(context)
    {
        start_page(context, OptionRoot);
    }

    function reflect(context)
    {
        Pane::ScrollBox::SelectBox.clearWindow(context);

        var list = CourseData::all_crslist;

        for (var i = 0; i < list.size; i++)
        {
            var crs = list[i].code;

            if (!main::game.isCourseAvailable(crs))
                continue;

            if (!list[i].can_arcade)
                continue;

            var item = hidden::Item.doCopy();
            var course_name = context.translate(ROOT, "CourseNameCaption", crs);

            var member_max = main::menu::MCourseData::GetMaxCarNum(crs);
            var split_text = context.translate(ROOT, list[i].can_splitbattle ? "enable" : "disable");
            item["label"].text = course_name;
            item["label"].adjustScale();
            item["labela"].text = course_name; // Label A then Label 0?
            item["labela"].adjustScale();
            item["label0"].text = member_max.toString();
            item["labela0"].text = member_max.toString();
            item["label1"].text = split_text;
            item["labela1"].text = split_text;

            item.defineStatic("course_code", crs);

            Pane::ScrollBox::SelectBox.appendChild(context, item);

            if (main::game.favorite_course.has(crs))
                item.active = true;
        }
    }

    function apply(context)
    {
        main::game.setNeedSave();
    }

    function onInitialize(context)
    {
        hidden.visible = false;

        reflect(context);
        Pane::ScrollBox::SelectBox.callFocus(ROOT);
        ToolTip::tip.remove();
        ToolTip::tip.value = context.translate(ROOT, "tooltip");
    }

    function onFinalize(context)
    {
        Pane::ScrollBox::SelectBox.clearWindow(context);
    }

    function onCancel(context, event, item)
    {
        var ret = decide(context, false);
        main::sound.play("cancel");

        return ret;
    }

    function decide(context, playok)
    {
        if (main::game.favorite_course.getSize() <= 0)
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "course at least one"));
            return EVENTRESULT_FILTER;
        }
        else 
        {
            var multi_enable = false;
            var split_enable = false;
            var list = main::game.favorite_course.buildLabelList();

            for (var i = 0; i < list.size; i++)
            {
                var crs = list[i];

                if (main::menu::MCourseData::GetMaxCarNum(crs) >= 2)
                    multi_enable = true;

                if (CourseData[crs].can_splitbattle)
                    split_enable = true;

                if (multi_enable && split_enable)
                    break;
            }

            if (!multi_enable)
            {
                main::sound.play("disable");
                openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "multi player course at least one"));
                return EVENTRESULT_FILTER;
            }

            if (!split_enable)
            {
                main::sound.play("disable");
                openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "split course at least one"));
                return EVENTRESULT_FILTER;
            }
        }

        if (playok)
            main::sound.play("ok");

        apply(context);
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::ScrollBox::SelectBox
{
    function onValueChanged(context)
    {

    }
}

module PROJECT::ROOT::OK
{
    function onActivate(context)
    {
        return decide(context, true);
    }
}

module PROJECT::ROOT::hidden::Item
{
    function onActivate(context, event)
    {
        var widget = event.widget;
        var crs = widget["course_code"];

        if (main::game.favorite_course.has(crs))
        {
            main::sound.play("cancel");
            main::game.favorite_course.remove(crs);
        }
        else if (main::game.favorite_course.isFull())
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "course full"));
        }
        else
        {   
            main::sound.play("ok");
            main::game.favorite_course.append(crs);
        }
        
        widget.active = main::game.favorite_course.has(crs);

        return EVENTRESULT_FILTER;
    }
}