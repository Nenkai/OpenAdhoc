//---------------------------------------------------------------------------------------
// PrizeRootImpl.ad (standalone script)
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module PrizeRoot
{
    function GetMoneyString(num, useZero = true)
    {
        var str = main::pdiext::MMisc::GetMoneyString(num);
        if (str == "--" && useZero)
        {
            str = "0";
        }

        return str;
    }

    function GetCourseText(context, courseCode)
    {
        var label = main::gtengine::MSpecDB::getCourseLabel(courseCode);
        var layoutKey = "NORMAL";
        if (label.beginWith("r_"))
        {
            label = label.substr(2);
            layoutKey = "REVERSE";
        }

        var layout = context.translate(PrizeRoot, "TrialSetting", "LAYOUT_" + layoutKey);
        return "%s %s".format(context.translate(PrizeRoot, "CourseName", label), layout);
    }

    function GetOrderText(context, order)
    {
        var orderMap = [ 0 : "ordinal_st",
                         1 : "ordinal_nd",
                         2 : "ordinal_rd",
                         3 : "ordinal_th" ];

        return context.translate(PrizeRoot, "Number", orderMap[order]).build(order + 1);
    }

    function UpdateCourseRank(context, order)
    {
        var result = -1;

        if (order < 0)
            return result;

        var course_code = getCurrentCourse();
        var sr_rank = gSequenceCondition.game_status.user_profile.record.getBoardSR(course_code);

        if (sr_rank != nil)
        {
            var experience_point = sr_rank.addExperiencePoint(1);
            var old_rank = sr_rank.rank;
            var corrected_race_difficulty = 4 - main::GlobalStatus::game_context.race_difficulty;

            if (old_rank < corrected_race_difficulty)
                return result;

            var point = [15, 8, 5, 0][order];
            var current_point = sr_rank.addPoint(point);
            var new_rank = sr_rank.rank;

            if (new_rank < old_rank)
            {
                gSequenceCondition.game_status.user_profile.calendar.putRunCourseEvent(
                    0,
                    0,
                    course_code,
                    "SINGLE_RACE",
                    new_rank,
                    nil,
                    0
                );
                result = new_rank;

                main::GlobalStatus::game_context.race_difficulty = 4 - new_rank;
            }
        }

        return result;
    }

    attribute mPerformer = nil;
    
    attribute mSequenceCondition = nil;
    attribute mFinishOrder = nil;
    attribute mPrizeList = nil;
    attribute mCourseCode = nil;
    attribute mOption = nil;
    attribute mNextRoot = nil;
    
    attribute mWatcher = nil;
    attribute mTimeoutWatcher = nil;
    attribute mTimeoutCount = nil;
    
    attribute mSequence = nil;

    module PrizeImageShape
    {
        static sUVListChar = [
            "," : [114, 28, 5, 27],
            "-" : [84, 28, 10, 27],
            "." : [108, 28, 5, 27],
            " " : [37, 0, 3, 27]
        ];

        static sUVListNum = [
            [0, 0, 20, 27],
            [22, 0, 20, 27],
            [44, 0, 20, 27],
            [66, 0, 20, 27],
            [88, 0, 20, 27],
            [110, 0, 20, 27],
            [132, 0, 20, 27],
            [0, 28, 20, 27],
            [22, 28, 20, 27],
            [44, 28, 20, 27]
        ];

        static sDefaultColor = [1.0, 1.0, 1.0, 1.0];
        static sFixedColor = [0.96484375, 0.70703125, 0.14453125, 1.0];

        class ImageShapeWrapper
        {
            attribute mImageShape = nil;

            method __init__(i, n)
            {
                self.mImageShape = i;
                self.mImageShape.prim_mode = "sprite";
                self.mImageShape.updateC(sDefaultColor);
                self.update(n);
            }

            method buildStringNumberItems(num)
            {
                var str = GetMoneyString(num);
                var items = Array(str.size);

                for (var i = 0; i < str.size; i++)
                    items[i] = str[i];

                return items;
            }

            method update(num, baseX = 0, baseY = 0)
            {
                var items = self.buildStringNumberItems(num);

                var vertexNum = 2;
                var arraySize = items.size * vertexNum;
                var vertex = Array(arraySize);
                var texcode = Array(arraySize);

                var i = 0;

                var bx = baseX;
                var by = baseY;

                var tw = 160.0;
                var th = 56.0;
                var space = 2.0;

                var totalWidth = 0.0;
                var scaling = 0.8;

                foreach (var item in items)
                {
                    var data = sUVListChar[item];
                    if (data == nil)
                    {
                        if (item.toInt() >= 0 && item.toInt() <= 9)
                            data = sUVListNum[item.toInt()];
                        else
                            data = [0, 0, 0, 0];
                    }

                    |var x, var y, var w, var h| = data;

                    vertex[i] = [bx, by];
                    vertex[i + 1] = [bx + (w * scaling), by + (h * scaling)];

                    var u1 = x / tw;
                    var u2 = (x + w) / tw;
                    var v1 = y / th;
                    var v2 = (y + h) / th;

                    texcode[i] = [u1, v1];
                    texcode[i + 1] = [u2, v2];

                    bx += (w * scaling) + space;
                    totalWidth += (w * scaling) + space;

                    i += vertexNum;
                }

                self.mImageShape.updateVT(vertex, texcode);
                self.mImageShape.w = totalWidth;
            }

            method setColor(color)
            {
                self.mImageShape.updateC(color);
            }
        }
    }

    class Performer
    {
        static sOrderList = ["1st", "2nd", "3rd", "4th"];

        attribute mGameStatus = nil;
        attribute mFinishOrder = nil;
        attribute mPrizeList = nil;
        attribute mCourseCode = nil;
        attribute mOption = nil;
        
        attribute mTotalPrize = nil;
        attribute mBgImagePath = nil;
        attribute mFrameCount = nil;
        
        attribute mHeaderText = nil;
        attribute mFooterText1 = nil;
        attribute mFooterText2 = nil;
        attribute mPopupText = nil;
        
        attribute mPrizeNumber = nil;
        attribute mMoneyNumber = nil;

        method __init__(context, p)
        {
            self.mGameStatus = p[0].game_status;
            self.mFinishOrder = p[1];
            self.mPrizeList = p[2];
            self.mCourseCode = p[3];
            self.mOption = p[4];

            self.mTotalPrize = 0;
            self.mBgImagePath = "/piece_gt5m/license_bg/arc_quick.img";
            self.mFrameCount = 0;

            self.mHeaderText = "";
            self.mFooterText1 = "";
            self.mFooterText2 = "";
            self.mPopupText = "";

            self.mPrizeNumber = nil;
            self.mMoneyNumber = nil;
        }

        method initialize(context)
        {
            PrizeRoot::Item.visible = false;
            PrizeRoot::Item::blink.visible = false;
            PrizeRoot::Item::Content::Order.visible = false;
            PrizeRoot::Item::Content::Trophy.visible = false;
            PrizeRoot::Item::Content::Scaling.visible = false;

            PrizeRoot::bg.image_path = self.mBgImagePath;
            PrizeRoot::bg.doInitialize(context);

            PrizeRoot::Header::Message::label.text = self.mHeaderText;
            PrizeRoot::Footer::Message::label1.text = self.mFooterText1;
            PrizeRoot::Footer::Message::label2.text = self.mFooterText2;
            PrizeRoot::Popup::Message::label.text = self.mPopupText;

            PrizeRoot::Popup::ScalarInterpolator1.reverse = false;
            PrizeRoot::Popup::ScalarInterpolator1.restart();
            PrizeRoot::Popup::ScalarInterpolator1.reverse = true;

            self.mPrizeNumber = PrizeImageShape::ImageShapeWrapper(
                PrizeRoot::Body::PrizeMoney::Prize::Prize::ImageShape, self.mTotalPrize);
            self.mMoneyNumber = PrizeImageShape::ImageShapeWrapper(
                PrizeRoot::Body::PrizeMoney::Money::Money::ImageShape, self.mGameStatus.user_profile.cash);

            self.initializeItem(context);
            self.initializePrizeList(context);
            self.initializePrizeMoney(context);
        }

        method initializeItem(context)
        {
            PrizeRoot::Item::Content::Order.visible = true;
        }

        method initializePrizeListOrderByIndex(context, index, widget)
        {
            var orderText = GetOrderText(context, index);
            if (self.mPrizeList[index] <= 0)
            {
                widget.Content::Order.insensitive = true;
                widget.Content::Order::labeli.text = orderText;
            }
            else
            {
                widget.Content::Order::label.text = orderText;
            }
        }

        method initializePrizeListContentByIndex(context, index, widget, prizeText)
        {
            if (self.mPrizeList[index] <= 0)
            {
                widget.Content::Prize.insensitive = true;
                widget.Content::Prize::labeli.text = GetMoneyString(0, false);
            }
            else if (index == self.mFinishOrder)
            {
                widget.blink.visible = true;
                widget.Content::Prize.active = true;
                widget.Content::Prize::labela.text = prizeText;
            }
            else
            {
                widget.Content::Prize::label.text = prizeText;
            }
        }

        method initializePrizeList(context)
        {
            for (var i = 0; i < self.mPrizeList.size; i++)
            {
                var w = PrizeRoot::Item.doCopy(context);

                PrizeRoot::Body::PrizeList::List.appendChild(context, w);

                w.blink.visible = false;
                w.name = self.sOrderList[i];
                w.visible = true;

                var prizeText = GetMoneyString(self.mPrizeList[i]);

                self.initializePrizeListOrderByIndex(context, i, w);
                self.initializePrizeListContentByIndex(context, i, w, prizeText);
            }
        }

        method initializePrizeMoney(context)
        {
            self.mPrizeNumber.setColor(PrizeImageShape::sFixedColor);
        }

        method finalize(context)
        {
            PrizeRoot::Body::PrizeList::List.clearChildren(context);
        }

        method movePrize(context, fromNum, toNum, toNumLimit, fromPrizeImageShape, toPrizeImageShape)
        {
            var f = fromNum;
            var t = toNum;

            while (f > 0)
            {
                var value = f / 10;
                if (value < 10)
                    value = f;

                f -= value;
                t += value;

                if (toNumLimit != 0 && t > toNumLimit)
                    t = toNumLimit;

                if (fromPrizeImageShape != nil)
                    fromPrizeImageShape.update(f);

                if (toPrizeImageShape != nil)
                    toPrizeImageShape.update(t);

                main::sound.play("coin");
                context.wait(0.03);
                yield false;

                if (self.mFrameCount == 0)
                    break;
            }
        }

        method wait(context, frames)
        {
            for (self.mFrameCount = frames; self.mFrameCount > 0; self.mFrameCount--)
            {
                context.wait();
                yield false;
            }
        }

        method skip()
        {
            self.mFrameCount = 0;
        }

        method popupSequence(context)
        {
            PrizeRoot::Popup::ScalarInterpolator0.restart();
            self.wait(context, 180);
            PrizeRoot::Popup::ScalarInterpolator1.reverse = false;
            PrizeRoot::Popup::ScalarInterpolator1.start();
        }

        method prizeListSequence(context) {}

        method prizeMoneySequence(context)
        {
            var money = self.mGameStatus.user_profile.cash;
            var limit = self.mGameStatus.config.cash_limit;

            self.mFrameCount = 1;
            self.mPrizeNumber.setColor(PrizeImageShape::sDefaultColor);

            var sorry = false;
            if (self.mGameStatus.user_profile.cash + self.mTotalPrize > limit)
            {
                var txt = context.translate(PrizeRoot, "YOU_CANNOT_GET_MONEY_MORE");
                txt = txt.build(GetMoneyString(limit));
                DialogUtil::openConfirmDialog(context, DialogUtil::OK, txt);

                sorry = true;
            }

            self.movePrize(context,
                           self.mTotalPrize,
                           money,
                           limit,
                           self.mPrizeNumber,
                           self.mMoneyNumber);


            self.mGameStatus.user_profile.cash += self.mTotalPrize;
            if (sorry)
                self.mGameStatus.user_profile.cash = limit;

            self.mGameStatus.user_profile.total_cash += self.mTotalPrize;
            if (self.mGameStatus.user_profile.total_cash > self.mGameStatus.config.total_cash_limit)
            {
                self.mGameStatus.user_profile.total_cash = self.mGameStatus.config.total_cash_limit;
            }

            main::GlobalStatus::game_context.need_save = true;

            self.mPrizeNumber.update(0);
            self.mMoneyNumber.setColor(PrizeImageShape::sFixedColor);
            self.mMoneyNumber.update(self.mGameStatus.user_profile.cash);

            PrizeRoot::Footer::Controller.visible = true;
            PrizeRoot::Footer::Controller::ScalarInterpolator.on_effect_end = function (oontext) // NOTE: Typo in original
            {
                main::sound.play("ok");
                PrizeRoot::Footer::Controller::ScalarInterpolator.on_effect_end = nil;
            }
            PrizeRoot::Footer::Controller::ScalarInterpolator.restart();

            yield true;
        }

        method prizeSequence(context)
        {
            if (self.mPopupText != nil && self.mPopupText != "")
            {
                self.popupSequence(context);
            }

            self.wait(context, 60);

            self.prizeListSequence(context);

            self.wait(context, 60);

            self.prizeMoneySequence(context);
        }
    }

    class SingleRacePerformer : Performer
    {
        method __init__(context, p)
        {
            __super__::__init__(context, p);

            var prizeText = context.translate(PrizeRoot, "YOU_GOT_PRIZE");
            self.mHeaderText = prizeText.build(GetOrderText(context, self.mFinishOrder));
            self.mFooterText1 = context.translate(PrizeRoot, "Arcade", "singlerace");
            self.mFooterText2 = GetCourseText(context, self.mCourseCode);
            self.mTotalPrize = self.mPrizeList[self.mFinishOrder];

            var newRank = UpdateCourseRank(context, self.mFinishOrder);
            var rankList = ["S", "A", "B", "C", "D"];
            if (newRank >= 0 && newRank < rankList.size)
            {
                var r = rankList[newRank];
                self.mPopupText = context.translate(PrizeRoot, "RANK_UP").build(r);
            }
            SoundUtil::BGMPlayGroup('menu', "prize", false);
        }
    }

    class LicensePerformer : Performer
    {
        attribute mBestOrder = nil;
        attribute mIsAllClearAtPreviousRace = nil;

        method __init__(context, p)
        {
            __super__::__init__(context, p);

            |self.mBestOrder, self.mIsAllClearAtPreviousRace| = self.mOption;

            var index = LicenseUtil::GetIndexByLicenseId(main::GlobalStatus::game_context.license_id);
            if (index < 0)
                index = 0;

            var category = LicenseUtil::GetCategory(index);
            var categoryIndex = LicenseUtil::GetCategoryIndex(index);

            self.mTotalPrize = self.mPrizeList[self.mFinishOrder];
            self.mBgImagePath = "/piece_gt5m/license_bg/mission.img";

            var evalType = main::gtengine::EvalType::ORDER;
            if (main::RaceOperator.game_condition.eval_condition != nil)
                evalType = main::RaceOperator.game_condition.eval_condition[0];

            var headerTextKey = "YOU_ACHIEVED_TARGET_";
            if (evalType == main::gtengine::EvalType::TIME)
                headerTextKey += "TIME";
            else
                headerTextKey += "ORDER";

            self.mHeaderText = context.translate(PrizeRoot, headerTextKey);

            var event = PrizeRoot.mSequenceCondition.game_plan.events[0];
            var titleText = context.translate(PrizeRoot, "LicenseGT5M", event.information.title);
            var titleFormat = context.translate(PrizeRoot, "LicenseGT5M", "TITLE_FORMAT");
            var categoryStr = LicenseUtil::GetCategoryString(category);
            self.mFooterText1 = titleFormat.build(categoryStr, categoryIndex + 1, titleText);
            self.mFooterText2 = context.translate(PrizeRoot, "LicenseGT5M", "CATEGORY_SUB_TITLE_%d".format(category));

            var popupText = "";
            var popupPrefixKey = "YOU_CLEARED_";
            if (!self.mIsAllClearAtPreviousRace && LicenseUtil::isAllClear(category, false, self.mGameStatus))
            {
                var cleared = context.translate(PrizeRoot, popupPrefixKey + "ALL_MISSIONS");
                popupText = cleared.build(categoryStr);
            }
            else if (self.mBestOrder < 0)
            {
                var cleared = context.translate(PrizeRoot, popupPrefixKey + "MISSION");
                popupText = cleared.build(categoryStr, categoryIndex + 1);
            }
            self.mPopupText = popupText;
        }

        method getPrizeWith(context)
        {
            var prizeWith = 0;

            for (var i = 0; i < self.mPrizeList.size; i++)
            {
                var w = PrizeRoot::Body::PrizeList::List[self.sOrderList[i]];

                if (w != nil && !w.blink.visible && !w.Content::Prize.insensitive && i >= self.mFinishOrder)
                    prizeWith += self.mPrizeList[i];
            }

            return prizeWith;
        }

        method initializeItem(context)
        {
            PrizeRoot::Item::Content::Trophy.visible = true;
        }

        method initializePrizeListOrderByIndex(context, index, widget)
        {
            var trophyImagePathPostfix = ["gold", "silver", "bronze"];
            widget.Content::Trophy::image.image_path = "/piece_gt5m/license_bg/trophy_" + trophyImagePathPostfix[index] + ".img";
            widget.Content::Trophy::image.doInitialize(context);
            if (self.mPrizeList[index] <= 0)
                widget.Content::Trophy::ScalarInterpolator.restart();
        }

        method initializePrizeListContentByIndex(context, index, widget, prizeText)
        {
            if (self.mPrizeList[index] <= 0)
            {
                widget.Content::Prize.insensitive = true;
                widget.Content::Prize::labeli.text = GetMoneyString(0, false);
            }
            else if (index == self.mFinishOrder)
            {
                widget.blink.visible = true;
                widget.Content::Prize.active = true;
                widget.Content::Prize::labela.text = prizeText;
            }
            else if (index < self.mFinishOrder)
            {
                widget.Content::Prize::label.text = prizeText;
            }
            else if (0 > self.mBestOrder || index < self.mBestOrder)
            {
                widget.Content::Prize.active = true;
                widget.Content::Prize::labela.text = prizeText;
            }
            else
            {
                widget.Content::Prize.insensitive = true;
                widget.Content::Prize::labeli.text = prizeText;
            }
        }

        method initializePrizeMoney(context)
        {
            if (self.getPrizeWith(context) <= 0)
                self.mPrizeNumber.setColor(PrizeImageShape::sFixedColor);
        }

        method prizeListSequence(context)
        {
            self.mFrameCount = 1;

            var hasGotPrize = self.mPrizeList[self.mFinishOrder];
            var toGetPrizeWith = self.getPrizeWith(context);

            if (toGetPrizeWith <= 0)
                return;

            self.movePrize(context,
                           toGetPrizeWith,
                           hasGotPrize,
                           0,
                           nil,
                           self.mPrizeNumber);

            self.mTotalPrize = hasGotPrize + toGetPrizeWith;
            self.mPrizeNumber.update(self.mTotalPrize);

            self.mPrizeNumber.setColor(PrizeImageShape::sFixedColor);
            main::sound.play("ok");
        }
    }

    class DriftAttackPerformer : Performer
    {
        method __init__(context, p)
        {
            __super__::__init__(context, p);

            var prizeText = context.translate(PrizeRoot, "YOU_GOT_DRIFT_PRIZE");
            self.mHeaderText = prizeText.build(self.mFinishOrder);

            var driftTypeKey = main::RaceOperator.race_parameter.endless ? "FULL_LAP" : "SECTION";
            var driftTypeText = context.translate(PrizeRoot, "TrialSetting", driftTypeKey);
            self.mFooterText1 = "%s / %s".format(context.translate(PrizeRoot, "Arcade", "drift"), driftTypeText);

            self.mFooterText2 = GetCourseText(context, self.mCourseCode);
            self.mTotalPrize = self.mFinishOrder * 2;

            SoundUtil::BGMPlayGroup('menu', "prize", false);
        }

        method initializeItem(context)
        {
            PrizeRoot::Item::Content::Scaling.visible = true;
        }

        method initializePrizeList(context)
        {
            var w = PrizeRoot::Item.doCopy(context);
            PrizeRoot::Body::PrizeList::List.appendChild(context, w);
            w.visible = true;
            w.blink.visible = false;

            var scaling = 0;
            var scalingCheck = GetMoneyString(1);

            if (scalingCheck.toInt() != 1)
                scaling = 200;
            else
                scaling = 2;

            w.Content::Prize::label.align = 3;
            w.Content::Prize::label.text = context.translate(PrizeRoot, "RaceProject::PrizeRoot", "DRIFT_POINT");
            w.Content::Scaling.active = true;
            w.Content::Scaling::labela.text = "x%d".format(scaling);
        }
    }

    class AdhocBattlePerformer : Performer
    {
        attribute mIsJackpotRace = nil;
        attribute mLuckyPlayerOrder = nil;
        attribute mScaling = nil;
        attribute mScalingFormat = nil;

        method __init__(context, p)
        {
            __super__::__init__(context, p);

            |self.mIsJackpotRace, self.mLuckyPlayerOrder, self.mScaling| = self.mOption;

            var prizeText = context.translate(PrizeRoot, "YOU_GOT_PRIZE");
            self.mHeaderText = prizeText.build(GetOrderText(context, self.mFinishOrder));

            var raceKey = "";
            switch (PrizeRoot.mSequenceCondition.game_mode)
            {
                case main::gtengine::GameMode::ADHOC_BATTLE_PRO:
                    raceKey = "professional";
                    break;
                case main::gtengine::GameMode::ADHOC_BATTLE_AMA:
                    raceKey = "amateur";
                    break;
                case main::gtengine::GameMode::ADHOC_BATTLE_SHUFFLE:
                default:
                    raceKey = "shuffle";
                    break;
            }
            
            self.mFooterText1 = context.translate(PrizeRoot, "Arcade", raceKey);
            self.mFooterText2 = GetCourseText(context, self.mCourseCode);

            var popupText = "";
            if (self.mIsJackpotRace && self.mLuckyPlayerOrder == 0)
            {
                var inform = context.translate(PrizeRoot, "INFORM_WHO_IS_LUCKY_DRIVER");
                popupText = inform.build(GetOrderText(context, self.mLuckyPlayerOrder));
            }
            self.mPopupText = popupText;

            self.mTotalPrize = self.mPrizeList[self.mFinishOrder];
            if (self.mIsJackpotRace)
            {
                self.mTotalPrize *= self.mScaling;
                self.mFooterText1 += " / %s".format(context.translate(PrizeRoot, "Arcade", "jackpot"));
            }

            self.mScalingFormat = "x%d";

            SoundUtil::BGMPlayGroup('menu', "prize", false);
        }

        method haveLuckyPlayerWon()
        {
            return self.mIsJackpotRace && self.mLuckyPlayerOrder == 0;
        }

        method initializeItem(context)
        {
            PrizeRoot::Item::Content::Order.visible = true;
        }

        method initializePrizeListContentByIndex(context, index, widget, prizeText)
        {
            var scalingText = "";
            if (self.mIsJackpotRace)
            {
                widget.Content::Scaling.visible = true;
                scalingText = self.mScalingFormat.format(self.mScaling);
            }

            if (self.mPrizeList[index] <= 0)
            {
                widget.Content::Prize.insensitive = true;
                widget.Content::Prize::labeli.text = GetMoneyString(0, false);

                if (self.mIsJackpotRace)
                {
                    widget.Content::Scaling.insensitive = true;
                    widget.Content::Scaling.labeli.text = scalingText;
                }
            }
            else if (index == self.mFinishOrder)
            {
                widget.blink.visible = true;

                if (self.haveLuckyPlayerWon())
                {
                    widget.Content::Prize.label.text = prizeText;
                    widget.Content::Scaling.label.text = scalingText;
                }
                else
                {
                    widget.Content::Prize.active = true;
                    widget.Content::Prize.labela.text = prizeText;
                    widget.Content::Scaling.active = true;
                    widget.Content::Scaling.labela.text = scalingText;
                }
            }
            else
            {
                widget.Content::Prize::label.text = prizeText;

                if (self.mIsJackpotRace)
                {
                    widget.Content::Scaling.label.text = scalingText;
                }
            }
        }

        method initializePrizeMoney(context)
        {
            if (!self.haveLuckyPlayerWon())
            {
                self.mPrizeNumber.setColor(PrizeImageShape::sFixedColor);
            }
        }

        method prizeListSequence(context)
        {
            if (!self.haveLuckyPlayerWon())
                return;

            var luckyWidget = PrizeRoot::Body::PrizeList::List[self.sOrderList[self.mLuckyPlayerOrder]];
            var toPayLuckyPlayerPrize = self.mPrizeList[self.mLuckyPlayerOrder];
            var luckyPlayerTotalPrize = 0;

            var prizeList = Array(self.mPrizeList.size);
            for (var i = 0; i < self.mPrizeList.size; i++)
            {
                prizeList[i] = self.mPrizeList[i];
                luckyPlayerTotalPrize += self.mPrizeList[i];
            }


            var toLosePrize = self.mPrizeList[self.mFinishOrder];

            self.mFrameCount = 1;

            while (true)
            {
                var isContinue = false;

                for (var i = 0; i < self.mPrizeList.size; i++)
                {
                    if (i != self.mLuckyPlayerOrder)
                    {
                        if (prizeList[i] > 0)
                        {
                            isContinue = true;

                            var value = prizeList[i] / 10;
                            if (value < 10)
                                value = prizeList[i];

                            prizeList[i] -= value;
                            toPayLuckyPlayerPrize += value;

                            if (i == self.mFinishOrder && self.mFinishOrder != self.mLuckyPlayerOrder)
                                toLosePrize -= value;
                        }

                        var prizeWidget = PrizeRoot::Body::PrizeList::List[self.sOrderList[i]];
                        prizeWidget.Content::Prize::label.text = GetMoneyString(prizeList[i]);
                        luckyWidget.Content::Prize::label.text = GetMoneyString(toPayLuckyPlayerPrize);

                        var p = 0;
                        if (self.mFinishOrder == self.mLuckyPlayerOrder)
                            p = toPayLuckyPlayerPrize;
                        else
                            p = toLosePrize;

                        self.mPrizeNumber.update(p * self.mScaling);

                        main::sound.play("coin");
                        context.wait(0.03);
                        yield false;

                        if (self.mFrameCount == 0)
                            break;
                    }
                }

                if (!isContinue || self.mFrameCount == 0)
                    break;
            }


            for (var i = 0; i < self.mPrizeList.size; i++)
            {
                var w = PrizeRoot::Body::PrizeList::List[self.sOrderList[i]];
                if (i == self.mLuckyPlayerOrder)
                    w.Content::Prize::label.text = GetMoneyString(luckyPlayerTotalPrize);
                else
                    w.Content::Prize::label.text = GetMoneyString(0);

                if (i == self.mFinishOrder)
                {
                    w.Content::Prize.active = true;
                    w.Content::Scaling.active = true;
                    w.Content::Prize::labela.text = w.Content::Prize::label.text;
                    w.Content::Scaling::labela.text = w.Content::Scaling::label.text;
                }
            }

            if (self.mFinishOrder == self.mLuckyPlayerOrder)
                self.mTotalPrize = luckyPlayerTotalPrize * self.mScaling;
            else
                self.mTotalPrize = 0;

            self.mPrizeNumber.update(self.mTotalPrize);
            self.mPrizeNumber.setColor(PrizeImageShape::sFixedColor);
            main::sound.play("ok");
        }
    }

    method open(context, sequenceCondition, finishOrder, prizeList, courseCode, option, nextRoot)
    {
        self.mSequenceCondition = sequenceCondition;
        self.mFinishOrder = finishOrder;
        self.mPrizeList = prizeList;
        self.mCourseCode = courseCode;
        self.mOption = option;
        self.mNextRoot = nextRoot;

        SequenceUtil::startPage(context, PrizeRoot);
    }

    method close(context)
    {
        SoundUtil::BGMFadeout(1.0);

        if (self.mNextRoot != nil)
        {
            self.mNextRoot.open(context);
        }
        else
        {
            goToMenuSequence(context);
        }
    }

    method onInitialize(context)
    {
        main::ORG.disableRenderingRace();
        main::ORG.disableSoundingRace();

        BalloonTip.initialize(context);

        Footer::Controller.visible = false;
        context.cursor_visible = false;
        PrizeRoot.setFocus(nil);
        var params = [
            self.mSequenceCondition,
            self.mFinishOrder,
            self.mPrizeList,
            self.mCourseCode,
            self.mOption
        ];
        switch (self.mSequenceCondition.game_mode)
        {
            case main::gtengine::GameMode::LICENSE:
                self.mPerformer = LicensePerformer(context, params);
                break;

            case main::gtengine::GameMode::DRIFT_ATTACK:
                self.mPerformer = DriftAttackPerformer(context, params);
                break;

            case main::gtengine::GameMode::ADHOC_BATTLE_PRO:
            case main::gtengine::GameMode::ADHOC_BATTLE_AMA:
            case main::gtengine::GameMode::ADHOC_BATTLE_SHUFFLE:
                self.mPerformer = AdhocBattlePerformer(context, params);
                break;

            case main::gtengine::GameMode::SINGLE_RACE:
            default:
                self.mPerformer = SingleRacePerformer(context, params);
                break;
        }

        self.mPerformer.initialize(context);
        self.mSequence = self.mPerformer.prizeSequence.generator(context);

        self.mWatcher = WatcherUtil::Create(context, onTick);
        self.mTimeoutWatcher = nil;
        self.mTimeoutCount = 0;
    }

    method onFinalize(context)
    {
        if (self.mWatcher != nil)
        {
            WatcherUtil::Delete(self.mWatcher);
            self.mWatcher = nil;
        }

        if (self.mTimeoutWatcher != nil)
        {
            WatcherUtil::Delete(self.mTimeoutWatcher);
            self.mTimeoutWatcher = nil;
        }

        self.mTimeoutCount = nil;

        self.mSequence = nil;
        self.mPerformer.finalize(context);
        self.mPerformer = nil;

        self.mSequenceCondition = nil;
        self.mFinishOrder = nil;
        self.mPrizeList = nil;
        self.mCourseCode = nil;
        self.mOption = nil;
        self.mNextRoot = nil;
    }

    method onCancel(context)
    {
        self.mPerformer.skip();
        return EVENTRESULT_FILTER;
    }

    method onActivate(context)
    {
        self.mPerformer.skip();
        return EVENTRESULT_FILTER;
    }

    method onTick(context)
    {
        if (self.mSequence == nil)
            return;

        var res = self.mSequence();
        if (res != nil && res)
        {
            self.mSequence = nil;

            WatcherUtil::Delete(self.mWatcher);
            self.mWatcher = nil;

            PrizeRoot.setFocus(Footer::Controller::HBox::Close);
            context.cursor_visible = true;

            self.mTimeoutWatcher = WatcherUtil::Create(context, onTimeoutTick);
        }
    }

    method onTimeoutTick(context)
    {
        if (self.mSequence != nil || self.mWatcher != nil)
            return;

        ++self.mTimeoutCount;
        if (self.mTimeoutCount > 300)
        {
            main::sound.play("ok");
            self.close(context);

            WatcherUtil::Delete(self.mTimeoutWatcher);
            self.mTimeoutWatcher = nil;
        }
    }

    module Footer::Controller::HBox
    {
        method onFocusEnter(context, event)
        {
            var w = event.widget;
            BalloonTip.set_value(context, w, w.balloon.text, 6.5);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            main::sound.play("ok");
            PrizeRoot.close(context);
            return EVENTRESULT_FILTER;
        }

        module Close
        {
            method onActivate(context)
            {
                main::sound.play("ok");

                Blink::ScalarInterpolator.on_effect_end = function (context)
                {
                    PrizeRoot.close(context);
                    Blink::ScalarInterpolator.on_effect_end = nil;
                }
                Blink::ScalarInterpolator.restart();

                return EVENTRESULT_FILTER;
            }
        }
    }
}