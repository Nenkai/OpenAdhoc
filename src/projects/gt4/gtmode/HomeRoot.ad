//---------------------------------------------------------------------------------------
// HomeRoot.ad
//
// My Home/Garage root
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module PROJECT::ROOT
{
    static at_home = false;

    function onLoad(context)
    {
        mask.actor = main::menu::MFadeActor(mask, 1.0);
        mask.actor.repeat = false;
        mask.actor.period = 1.0;
        mask.actor.over = 0.0;

        Shutter.x = 0.0;
        Shutter.actor = main::menu::MMoveActor(Shutter, 1024.0, 0.0);
        Shutter.actor.ratio = 0.03;
        Shutter.actor.linear = true;
        
        Buttons.actor = main::menu::MMoveActor(Buttons, Buttons.x + 320.0, Buttons.y);
        Buttons.actor.ratio = 0.2;

        setFadeActor(Buttons::Garage::imagef);
        setFadeActor(Buttons::Labo::imagef);
        setFadeActor(Buttons::Status::imagef);
        setFadeActor(Buttons::Diary::imagef);
        setFadeActor(Buttons::Option::imagef);
        setFadeActor(Buttons::Trade::imagef);
        setFadeActor(Buttons::Save::imagef);
    }

#ifdef GT4O_US_BETA
    function open(context)
    {
        onStart(context);
        start_page(context, ROOT);
    }
#endif

    function onStart(context)
    {
        setColorTransition(context);
        context.transition.period = 0.25;
    }

    function onInitialize(context)
    {
#ifndef GT4O_US_BETA
        onStart(context);
#endif
        enterPage(context, ROOT, context.translate(ROOT, "HomeTitleFormat").format(main::game.username), 1);
        context.cursor_visible = false;

        Status::Achievement::label.adjustScale();
        Status::AspecPoint::label.adjustScale();
        Status::BspecSkill::label.adjustScale();
        Status::Days::label.adjustScale();

        Car::CarFace.action_type = "normal";
        Car::CarFace.quality_level = 1;
        Car::CarFace.mirror = false;
        Car::CarFace.loadModelSet("image/gtmode/home/garageShadow.mdl");

        var carface = Car::CarFace;
        carface.car_model.independent = true;

        if (main::game.garage.hasRidingCar())
        {
            var car_garage = main::game.garage.riding_car;
            carface.car_garage = car_garage;
            carface.syncLoading();
            carface.car_model.motion = false;

            var target_z = 2.1;
            var length = car_garage.getLength().toFloat() / 1000.0;
            carface.car_model.ty = 0.0;
            carface.car_model.tz = target_z - (length / 2);

            var today = main::game.calendar.today;
            var day = main::menu::MCalendar::dateToDay(today[0], today[1], today[2]);
            var weekday = main::menu::MCalendar::dayToWeekDay(day);

            carface.car_model.ry = isGarageCarFront() ? 180.0 : 0.0;
            carface.car_model.warp();
        }

        carface.car_model.alpha = 1.0;
        carface.car_model.alphaInterpolateSpeed = 1.0;
        carface.car_model.transparentRatio = 1.0;

        if (main::game.garage.hasRidingCar())
        {
            Car::CarName.scale_x = 0.8;
            Car::CarName.scale_y = 0.8;
            Car::CarName.text = main::game.garage.riding_car.name;
            Car::CarName.adjustScale();
        }
        else
            Car::CarName.text = "";

        print "calcurating ... start\n";
        var game_stat = getRaceEventRecordStatistics();
        print "calcurating ... done\n";

        var achievement = game_stat[0];
        Status::Achievement::value.text = main::menu::MUtility::GetFormatString("%.1t", achievement.toInt()) + "%%";
        Status::AspecPoint::value.text = context.translate(ROOT, "PointsFormat").format(game_stat[1].toString());
        Status::AspecPoint::value.adjustScale();

        var skillformat = context.translate(ROOT, "SkillFormat");
        var skillvalueformat = "%d";

        Status::BspecSkill::value.text = skillformat.format(main::menu::MUtility::GetFormatString(skillvalueformat, main::game.getBspecTotalExperience()));
        Status::BspecSkill::value.adjustScale();

        var calendar = main::game.calendar;
        var today = calendar.today;
        var jurian_today = main::menu::MCalendar::dateToDay(today[0], today[1], today[2]);
        var game_days = main::menu::MCalendar::dayToGameDay(jurian_today) + 1;

        Status::Days::value.text = game_days;
        var fwidget = Buttons::Garage;

        if (main::game.major_menu_widget != "")
        {
            if (Buttons.defined(main::game.major_menu_widget))
            {
                fwidget = Buttons[main::game.major_menu_widget];
                main::game.major_menu_widget = "";
            }
        }

        if (at_home)
        {
            context.cursor_visible = true;
            mask.visible = false;
            Shutter.visible = false;
            Buttons.actor.out = false;
            Buttons.actor.warp();
        }
        else
        {
            context.cursor_visible = false;
            Shutter.actor.out = false;
            Shutter.actor.warp();
            Buttons.actor.out = true;
            Buttons.actor.warp();

            var event = main::menu::MScriptEvent(context, ROOT, "openCB");
            context.pushEvent(event);
        }

        ROOT.setFocus(fwidget);
        at_home = true;
    }

    function openCB(context)
    {
        mask.visible = true;
        mask.actor.out = true;
        Shutter.visible = true;
        Shutter.actor.out = true;
        context.sync(0.25);
        Buttons.actor.out = false;
        context.cursor_visible = true;
    } 

    function onFinalize(context)
    {
        leavePage(context, ROOT);
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        main::game.major_menu_widget = "";

        at_home = false;
        TopRoot["onStart"](context);
        start_page(context, TopRoot);

        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PS2_PAD_CTRL_START:
                if (main::game.garage.hasRidingCar() && !main::game.isSuspended())
                {
                    main::sound.play("return");
                    main::game.major_menu_project = "gtmode";
                    main::game.major_menu_page = ROOT.name;
                    exit_kick_project(context, "setting");
                    start_page(context, nil);
                    main::game.race_code = "";
                    main::game.course_code = "";
                    main::game.major_menu_widget = "";
                }
                return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }

    // Determines whether the car should be front-facing in the garage
    // If we won a mission, event, license or race, yes, otherwise back
    function isGarageCarFront()
    {
        var calendar = main::game.calendar;
        var yesterday = main::menu::MCalendar::dateToDay(calendar.today[0], calendar.today[1], calendar.today[2]) - 1;
        var date = main::menu::MCalendar::dayToDate(yesterday);
        var event = main::menu::MCalendar().getEvent(date[0], date[1], date[2]);

        if (event == nil)
            return true;

        switch (event[0])
        {
            case "RUN_RACE":
                return event[2] == "1" || event[2] == "view"; // Finished a regular race

            case "RUN_LICENSE":
                return event[2] == "gold"; // Golded a license

            case "RUN_MISSION":
                return event[2] == "1"; // Completed a license

            case "RUN_COURSE":
                if (event[2] == "EVENT")
                    return event[3] == "1"; // Finished an event
                return true;
        }

        return true;
    }
}

module PROJECT::ROOT::Buttons::Garage
{
    function onActivate(context, event)
    {
        if (!sureNoSuspended(context, 0))
        {
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");
        GarageRoot::resetCondition();
        GarageRoot::open(context);
        main::game.major_menu_widget = Garage.name;

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Labo
{
    function onActivate(context, event)
    {
        if (!sureNoSuspended(context, 0))
        {
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");
        main::game.labo_folder = -1;
        main::game.labo_list_index = -1;
        main::game.major_menu_project = "gtmode";
        main::game.major_menu_page = ROOT.name;
        start_sequence(context, "photo_labo");

        main::game.major_menu_widget = Labo.name;

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Diary
{
    function onActivate(context, event)
    {
        main::sound.play("ok");
        start_page(context, LogRoot);
        main::game.major_menu_widget = Diary.name;
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Status
{
    function onActivate(context, event)
    {
        main::sound.play("ok");
        start_page(context, StatusRoot);
        main::game.major_menu_widget = Status.name;
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Option
{
    function onActivate(context, event)
    {
        main::sound.play("ok");
        main::game.major_menu_project = "gtmode";
        main::game.major_menu_page = ROOT.name;
        exit_kick_project(context, "option");
        start_page(context, nil);
        main::game.major_menu_widget = Option.name;
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Trade
{
    function onActivate(context, event)
    {
        if (!sureNoSuspended(context, 0))
        {
            return EVENTRESULT_FILTER;
        }

        if (main::game.garage.isFull())
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_ERROR, context.translate(BuyCarRoot, "garage full"));
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");

        if (!openConfirmDialog(context, DIALOG_QUERY, context.translate(ROOT, "MemoryCard", "Do you load trade data?")))
            return EVENTRESULT_FILTER;

        var manager = main::menu::MMemoryCardManager("MODE_LOAD_GAME", 1);
        if (!manager.isConnect())
        {
            openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "MemoryCard", "no_memory_card_on_slot_2"));
            return EVENTRESULT_FILTER;
        }

        var r = nil;
        var game = nil;

        while (1)
        {
            var m = checkGameData(context, 0, manager, 1);
            if (m == nil)
            {
                return EVENTRESULT_FILTER;
            }
            else
            {
                openProgressDialog(context, context.translate(ROOT, "MemoryCard", "now_loading"));
                [r, game] = loadGameDataForTrade(context, manager);

                closeProgressDialog(context);

                if (r != "OK")
                {
                    if (!reportGameDataError(context, 0, 0, r, 1))
                        return EVENTRESULT_FILTER;
                }
                else
                    break;
            }
        }

        if (game == nil)
        {
            openConfirmDialog(context, DIALOG_ERROR, "fatal error happend.");
            return EVENTRESULT_FILTER;
        }

        GarageRoot::resetCondition();
        GarageRoot::openForTrade(context, game);
        main::game.major_menu_widget = Trade.name;

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Save
{
    function end_func(context)
    {
        openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "MemoryCard", "You can turn off the power"));
    }

    function onActivate(context, event)
    {
        main::sound.play("ok");

        if (openConfirmDialog(context, DIALOG_QUERY, context.translate(ROOT, "MemoryCard", "Do you save?")))
        {
            clearAutoSaveDisabled();
            saveAuto(context, ROOT, end_func);
        }

        return EVENTRESULT_FILTER;
    }
}