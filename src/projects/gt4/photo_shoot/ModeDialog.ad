module PROJECT::ROOT
{
	module QualityType
	{
		static STANDARD = 0;
		static FINE = 1;
		static SUPER_FINE = 2;
	}
	
	static QualityTypeString = ["STANDARD", "FINE", "SUPER_FINE"]
	static result = false;
#ifdef GT4O_US_BETA
	static original_y = nil;
#else
	static original_y;
#endif

	function open(context, type)
	{
		hidden.visible = false;
	
		original_y = Pane.y;
		Pane.y = PS2_SCREEN_H_F;
	
		context.pushPage(ROOT);
		ROOT.setFocus(nil);
	
		Pane::Quality::label.adjustScale();
		Pane::Quality::OptionMenu::popup::vbox::Standard::label.adjustScale();
		Pane::Quality::OptionMenu::popup::vbox::Fine::label.adjustScale();
		Pane::Quality::OptionMenu::popup::vbox::SuperFine::label.adjustScale();
	
		Pane::UsbQuality::label.adjustScale();
		Pane::UsbQuality::OptionMenu::popup::vbox::Standard::label.adjustScale();
		Pane::UsbQuality::OptionMenu::popup::vbox::Fine::label.adjustScale();
		Pane::UsbQuality::OptionMenu::popup::vbox::SuperFine::label.adjustScale();
	
		Pane::Focus::OptionMenu::Init(context);
		Pane::Shutter::OptionMenu::Init(context);
		Pane::Mode::OptionMenu::Init(context);
		Pane::Quality::OptionMenu::Init(context);
		Pane::UsbQuality::OptionMenu::Init(context);
	
		while (!Pane.interpolateY(original_y, 0.4))
			context.sync();
		
		ROOT.setFocus(Pane::Buttons::OK);
	
		result = false;
	
		var update_context = context.getUpdateContext();
		update_context.enterEventLoop();
	
		return result;
	}

	function close(context)
	{
		ROOT.setFocus(nil);
	
		var target_y;
		if (result != nil)
			target_y = -Pane.h;
		else
			target_y = PS2_SCREEN_H_F;
	
		while (!Pane.interpolateY(target_y, 0.4))
			context.sync();

		context.closePage(ROOT);
	
		var update_context = context.getUpdateContext();
		update_context.leaveEventLoop();
	
		Pane.y = original_y;
	}

	function onCancel(context, event, item)
	{
		main::sound.play("cancel");
		result = nil;
		close(context);
		result = false;
		return EVENTRESULT_FILTER;
	}


	function Apply()
	{
		Pane::Focus::OptionMenu::Apply();
		Pane::Shutter::OptionMenu::Apply();
		Pane::Mode::OptionMenu::Apply();
		Pane::Quality::OptionMenu::Apply();
		Pane::UsbQuality::OptionMenu::Apply();
	}


	function Cancel()
	{
		Pane::Shutter::OptionMenu::Cancel();
	}

	function Cleanup(context)
	{
		result = nil;
		original_y = nil;
	
		Pane::Focus::OptionMenu::Cleanup(context);
		Pane::Shutter::OptionMenu::Cleanup(context);
		Pane::Mode::OptionMenu::Cleanup(context);
		Pane::Quality::OptionMenu::Cleanup(context);
		Pane::UsbQuality::OptionMenu::Cleanup(context);
	}
}

module PROJECT::ROOT::Pane::Mode::OptionMenu
{
	function Cleanup(context)
	{
	}

	function Init(context)
	{
		var option = main::game.option;
		OptionMenu.setIndex(context, option.photo_professional);
	}


	function Apply()
	{
		var option = main::game.option;
		option.photo_professional = OptionMenu.index;
	}
}

module PROJECT::ROOT::Pane::Shutter::OptionMenu
{
	static ShutterType = [
		"typeA",
		"typeB",
		"typeC",
		"typeD",
		"typeE",
		"typeF",
		"typeG",
		"typeH",
		"typeI",
		"typeJ",
		"typeK",
		"typeL",
		"typeM",
		"typeN",
		"typeO",
		"typeP",
		"typeQ",
		"typeR",
		"typeS"
	];

	function Cleanup(context)
	{
		popup::vbox.clearWindow(context);
	}

	function Init(context)
	{
		var index = 0;
		var option = main::game.option;
		var type = option.photo_shutter;
	
		for (var i = 0; i < ShutterType.size; i++)
		{
			if (type == ShutterType[i])
			{
				index = i;
			}
	
			var item = hidden::Item.doCopy();
	
			item["label"].text = context.translate(ROOT, ShutterType[i]);
	
			popup::vbox.appendChild(context, item);
		}
	
		OptionMenu.applyAppend(context);
		OptionMenu.setIndex(context, index);
	}


	function Apply()
	{
		var option = main::game.option;
		option.photo_shutter = ShutterType[OptionMenu.index];
	}


	function Cancel()
	{
		var type = main::game.option.photo_shutter;
		main::game.loadShutterSound(type.downcase());
	}

	function onValueChanged(context, index)
	{
		var type = ShutterType[index];
		main::game.loadShutterSound(type.downcase());
		main::sound.play("shutter");
	}
}

module PROJECT::ROOT::Pane::Focus::OptionMenu
{
	function Cleanup(context)
	{
	}

	function Init(context)
	{
		var option = main::game.option;
		OptionMenu.setIndex(context, option.photo_manual_focus);
	}

	function Apply()
	{
		var option = main::game.option;
		option.photo_manual_focus = OptionMenu.index;
	}
}

module PROJECT::ROOT::Pane::Quality::OptionMenu
{
	function Cleanup(context)
	{
	}

	function Init(context)
	{
		var option = main::game.option;
		OptionMenu.setIndex(context, QualityType[option.photo_quality]);
	}

	function Apply()
	{
		var option = main::game.option;
		option.photo_quality = QualityTypeString[OptionMenu.index];
	}
}

module PROJECT::ROOT::Pane::UsbQuality::OptionMenu
{
	function Cleanup(context)
	{
	}

	function Init(context)
	{
		var option = main::game.option;
		OptionMenu.setIndex(context, QualityType[option.ustorage_photo_quality]);
	}

	function Apply()
	{
		var option = main::game.option;
		option.ustorage_photo_quality = QualityTypeString[OptionMenu.index];
	}
}

module PROJECT::ROOT::Pane::Buttons::Cancel
{
	function onActivate(context, event, item)
	{
		main::sound.play("ok");
		result = false;
		close(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Pane::Buttons::OK
{
	function onActivate(context, event, item)
	{
		main::sound.play("ok");
		result = true;
		close(context);
		return EVENTRESULT_FILTER;
	}
}