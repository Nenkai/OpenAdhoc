













module ROOT
{
    hidden.visible = false;

    attribute popup;
    attribute closed = false;
    attribute result;
    attribute data;
    attribute original_cursor_visible;

    method open(context, data)
    {
        self.data = data;
        self.result = nil;
        self.closed = false;
        self.popup = SequenceUtil::ModalPage(context, ROOT);
        self.popup.open();
        return self.result;
    }

    method close(context)
    {
        Community.clearCallback();

        if (self.closed)
            return;

        self.closed = true;
        FadeActor.out = true;

        if (self.popup != nil)
        {
            self.popup.close(FadeActor.period);
            self.popup = nil;
        }

        self.data = nil;
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        self.setFocus(Body::R::Cancel);
        return EVENTRESULT_FILTER;
    }

    method onInitialize(context)
    {
        self.original_cursor_visible = context.cursor_visible;
        context.cursor_visible = true;
        self.TextFace.visible = false;

        var what_list = [];
        foreach (var p in self.data.params_list)
        {
            if (p.what == "CERT")
            {
                what_list.push(manager.translate("Community", "TITLE"));
            }
            else
            {
                what_list.push("WHAT_%{p.what}");
            }
        }

        var why_list = [];
        foreach (var type in ReportUtil::TYPE_LIST)
        {
            why_list.push("WHY_%02d".format(type));
        }

        if (self.data.type == "RESULT")
            Body::L::TextFace.text = manager.translate("QuickMenu", "caption_RESULT");
        else
            Body::L::TextFace.text = manager.translate("Community", self.data.type);

        OptionMenuUtil::initialize(context, self, Body::L::What::OptionMenu, hidden::PulldownItem, what_list, "SendReport");
        Body::L::What::OptionMenu.setIndex(context, 0);

        OptionMenuUtil::initialize(context, self, Body::L::Why::OptionMenu, hidden::PulldownItem, why_list, "SendReport");
        Body::L::Why::OptionMenu.setIndex(context, 0);

        ROOT.setFocus(Body::L::What::OptionMenu);
        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        OptionMenuUtil::finalize(context, Body::L::What::OptionMenu);
        OptionMenuUtil::finalize(context, Body::L::Why::OptionMenu);

        context.cursor_visible = self.original_cursor_visible;
        return EVENTRESULT_FILTER;
    }

    method onUpdate(context)
    {
        if (self.closed)
            return;

        if (!LoginUtil::isOnline())
        {
            context.pushEvent(menu::MFunctionEvent(close, context));
        }
    }

    module Body::R
    {
        module Ok
        {
            method send(context)
            {
                var d = ROOT.data;
                var region = pdiext::MProductInformation::GetGameRegionCode();
                var language = pdistd::MLocale::getLanguage();
                var target_user_id = d.user_id;

                var what_index = Body::L::What::OptionMenu.index;
                var why_index = Body::L::Why::OptionMenu.index;
                
                var p = ROOT.data.params_list[what_index];
                var type = ReportUtil::TYPE_LIST[why_index];
                var what = p.what;
                var key = p.key;
                var value1 = p.value;
                var comment = "";

                var request = Community.requestSendReport(region, 
                    language, 
                    target_user_id, 
                    type,
                    what,
                    key, 
                    value1,
                    comment, 
                    function(args) {});

                var res = Grim2Util::joinAwait(context, request);
                var success = res && Community.decodeResult(request);
                GENERIC_RESULT(context, success);
            }

            method onActivate(context)
            {
                sound.play("ok");
                send(context);
                ROOT.close(context);
                return EVENTRESULT_FILTER;
            }
        }

        module Cancel
        {
            method onCancel(context)
            {
                sound.play("cancel");
                ROOT.close(context);
                return EVENTRESULT_FILTER;
            }

            method onActivate(context)
            {
                sound.play("ok");
                ROOT.close(context);
                return EVENTRESULT_FILTER;
            }
        }
    }
}