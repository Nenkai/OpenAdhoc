module PROJECT::ROOT
{
	static sUpperY;
	static sLowerY;

	function ChangeCase()
	{
		if (Keyboard::UpperCase.visible)
		{
			Keyboard::UpperCase.y = PS2_SCREEN_H_F;
			Keyboard::LowerCase.y = sLowerY;
	
			ROOT.setFocus(Keyboard::LowerCase::key_capslock);
	
			Keyboard::LowerCase.visible = true;
			Keyboard::UpperCase.visible = false;
		}
		else
		{
			Keyboard::UpperCase.y = sUpperY;
			Keyboard::LowerCase.y = PS2_SCREEN_H_F;
	
			ROOT.setFocus(Keyboard::UpperCase::key_capslock);
	
			Keyboard::UpperCase.visible = true;
			Keyboard::LowerCase.visible = false;
		}
	}


	function onInitialize(context)
	{
		sUpperY = Keyboard::UpperCase.y;
		sLowerY = Keyboard::LowerCase.y;
		ChangeCase();
		Title::bg.image_path = gLocation.GetTextureString();
		Title::bg.doInitialize(context);
		ROOT.setFocus(Keyboard::LowerCase::key_enter);
		tooltip::text.text = "You placed %s out of %s.".format(gPosition[0], gPosition[1]);
	}


	function onFinalize(context)
	{
	}

	function onActivate(context, event, item)
	{
		main::sound.play("ok");
	
		var input = Keyboard::input;
		var widget = ROOT.getFocusedWidget();
		var ch = widget.name.substr(4);
		switch (ch)
		{
			case "semicolon":
				input.putString(";"); break;
			case "colon":
				input.putString(":"); break;
			case "comma":
				input.putString(","); break;
			case "dot":
				input.putString("."); break;
			case "slash":
				input.putString("/"); break;
			case "backspace":
				input.backspace(); break;
			case "enter":
			{
				if (svo::CreateTimeTrialGame(gLocation.GetId().toString()))
				{
					// NOTE: Many empty blocks
					var nickname = ROOT::Keyboard::input.value;
					if (svo::FinishGame(gTime, gCarId, nickname))
					{

					}
					else
					{

					}
				}
				else
				{

				}

				gHttp.close();
				context.transition.panOutIn(context);
				context.transition.syncOut(context);
				context.startPage(RankingRoot);
			}
			break;

			case "capslock":
				ChangeCase(); break;
			case "backward":
				input.left(); break;
			case "forward":
				input.right(); break;
			default:
				input.putString(ch); break;
		}

		return EVENTRESULT_FILTER;
	}
}