module Storage
{
	static sStorage = nil;
	static sConnectStatus = 0;
	static sRoot = nil;
	static sFunc = nil;
	static sWatcher = nil;
	
	function DeleteWatcher()
	{
		if (sWatcher != nil)
		{
			sWatcher.remove();
			sWatcher = nil;
			sRoot = nil;
			sFunc = nil;
		}
	}

	function CreateWatcher(context, root, func, interval)
	{
		DeleteWatcher();
		sRoot = root;
		sFunc = func;
		sConnectStatus = IsConnected();
		sWatcher = main::menu::MScriptWatcher(context, NetworkProject::OnStorageWatcher);
		sWatcher.interval = interval;
		sWatcher.count = 0;
		sWatcher.append();
	}
	
	function IsConnected()
	{
		return sStorage.isConnect();
	}
	
	function IsFormatted()
	{
		return sStorage.isFormat();
	}
	
	function Format(context)
	{
		setProgress(context, sStorage.progress);
		openProgressDialog(context, context.translate(ConnectRoot, "FORMATTING"), nil);
	
		var file = sStorage.getNewFile();
		var r = file.format(sStorage, nil);
	
		closeProgressDialog(context);
	
		if (r)
		{
		}
		else
		{
			openConfirmDialog(context, 0, context.translate(ConnectRoot, "FORMAT_FAILED"));
		}
	
		return r;
	}


	function GetFreeSize()
	{
		return sStorage.realFree;
	}
	
	function GetStoredPatchSize()
	{
		var file = sStorage.getNewFile();
		var r = file.dataFileSize(sStorage);
	
		if (r < 0)
			r = 0;
	
		return r;
	}
	
	function Close()
	{
		sStorage = nil;
		DeleteWatcher();
	}

	function Open(context, path, root, func, interval)
	{
		Close();
	
		if (path.substr(0, 2) == "mc")
		{
			if (path.substr(2, 1) == "0")
			{
				sStorage = main::menu::MMemoryCardManager("MODE_SAVE_PATCH");
			}
			else
			{
				sStorage = main::menu::MMemoryCardManager("MODE_SAVE_PATCH", 1);
			}
	
			if (root != nil)
			{
				CreateWatcher(context, root, func, interval);
			}
		}
	}
}