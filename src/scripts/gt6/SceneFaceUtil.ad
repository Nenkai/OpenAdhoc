

//---------------------------------------------------------------------------------------
// SceneFaceUtil.ad
//
// Utility module for scenes
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module SceneFaceUtil
{
    static sCB;

    module HandleType
    {
        static SCENE_START = 0x100;
        static SCENE_END = 0x200;
        static SCENE_WAIT = 0x300;
        static EVENT_MASK_ON = 0x801;
        static EVENT_MASK_OFF = 0x802;
    }

    method onSignal(context, enum, param)
    {
        if (self.defined("onSignal"))
            self['onSignal'](context, enum, param);

        switch (enum)
        {
            case HandleType::EVENT_MASK_ON:
                context.event_mask &= ~15;
                context.filterKeyEvent();
                break;

            case HandleType::EVENT_MASK_OFF:
                context.event_mask |= 15;
                break;

            case HandleType::SCENE_WAIT:
                var root = context.getCurrentPage();
                if (root != nil && root.defined('onPageInStartDelay'))
                    root['onPageInStartDelay'](context, self);
                else if (context.root_transition != nil)
                    context.root_transition.start();
                break;

            case "MENU_START_ENABLE":
                if (self.defined("onSignalMenuStartEnable"))
                    self["onSignalMenuStartEnable"](context, param);
                break;
            
            case "MENU_START":
                if (self.defined("onSignalMenuStart"))
                    self["onSignalMenuStart"](context, param);
                break;

            case "BGM_START":
                if (self.defined("onSignalBgmStart"))
                    self["onSignalBgmStart"](context, param);
                break;

            case "FADE_OUT_START":
                if (self.defined("onFadeOutStart"))
                    self["onFadeOutStart"](context, param);
                break;
        }
    }

    function SetSignalHandler(scene_face, enum, call_back)
    {
        if (call_back != nil)
            scene_face.defineStatic('onSignal', call_back);

        scene_face.setSignalHandler(scene_face.*onSignal);
        scene_face.execCommand("sendsignal " + enum);
    }

    function ClearSignalHandler(scene_face)
    {
        scene_face.removeStatic('onSignal');
    }

    function SetWaitSceneFace(context, scene_face)
    {
        main::cursor_project::sSceneFace = scene_face;
        if (scene_face != nil)
            SetSignalHandler(scene_face, HandleType::SCENE_WAIT);
    }

    function loadScene(widget, scene_alias, cp, dp, key_lock)
    {
        var command = CommandAlias::get(scene_alias);
        if (command != nil)
            loadSceneByCommand(widget, command, cp, dp, key_lock);
    }

    function loadSceneByCommand(widget, command, cp, dp, key_lock)
    {
        if (key_lock == true)
            SetSignalHandler(widget, HandleType::EVENT_MASK_ON);

        if (cp != nil)
            widget.setDefaultCarParameter(cp);

        if (dp != nil)
        {
            widget.setDefaultCarDriverParameter(dp);
            widget.execCommand("setDefaultDriver %{dp.head_code} %{dp.body_code} %{dp.head_color_code} %{dp.body_color_code} 1");
        }

        if (command != nil)
        {
            widget.execCommand(command);
        }

        if (key_lock == true)
            SetSignalHandler(widget, HandleType::EVENT_MASK_OFF);
    }
}
