//---------------------------------------------------------------------------------------
// Template.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module Template
{
    function simulation_name(context, physics_pro)
    {
        return context.translate(Template, "QuickMenu", physics_pro > 0 ? "SIMULATION_PRO" : "SIMULATION_STANDARD");
    }

    module QuickBoardItem
    {
        method initializeForArcade(context, position, cp)
        {
            var is_target = nil == cp ? false : cp.isTargetLocal();
            self.Position.TextFace.text = position;
            self.Position.ColorFaceMe.visible = is_target;
            self.Position.ColorFace.visible = !is_target;
            self.Car.ColorFace0.visible = position % 2 == 0;
            self.Car.ColorFace1.visible = position % 2 != 0;
            if (cp != nil)
            {
                self.Car.ImageFace.image_path = "car/thumbnail/%s.%02d".format(cp.getCarLabel(), cp.color);
                self.Car.ImageFace.doInitialize(context);
                self.Car.VBox.TextFace1.text = main::gtengine::MSpecDB::getCarShortName(cp.getCarCode());
            }
            else
            {
                self.Car.ImageFace.image_path = "";
                self.Car.VBox.TextFace1.text = "";
            }

            self.Car.VBox.TextFace2.visible = false;
            self.Time.ColorFace0.visible = position % 2 == 0;
            self.Time.ColorFace1.visible = position % 2 != 0;
        }

        method initializeForBeforeArcade(context, position, cp)
        {
            initializeForArcade(context, position, cp);
            self.Time.visible = false;
        }

        method initializeForAfterArcade(context, position, cp, total_time, fastest_lap_diff)
        {
            initializeForArcade(context, position, cp);
            updateForTimeResult(context, position, cp, total_time, fastest_lap_diff);
        }

        method initializeForTimeResult(context, position, cp, total_time, fastest_lap_diff)
        {
            initializeForArcade(context, position, cp);
            updateForTimeResult(context, position, cp, total_time, fastest_lap_diff);
        }

        method initializeForScoreResult(context, position, cp, total_score)
        {
            initializeForArcade(context, position, cp);

            self.Time.VBox.TextFace.text = total_score;

            self.Time.VBox.TextFaceDiff.visible = false;

            self.Position.ColorFace.visible = false;
            self.Position.ColorFaceMe.visible = false;
            self.Position.TextFace.visible = false;
        }

        method updateForTimeResult(context, position, cp, total_time, fastest_lap_diff)
        {
            if (total_time != "" )
                self.Time.VBox.TextFace.text = total_time;
            else
                self.Time.VBox.TextFace.text = context.translate(Template, "QuickMenu", "NO_TARGET_TIME");

            var textface = self.Time.VBox.TextFaceDiff;
            if (position == 1)
            {
                textface.visible = false;
            }
            else
            {

                if (fastest_lap_diff != "--.---")
                    textface.text = "+ %s".format(fastest_lap_diff);
                else
                    textface.text = "";
            }
        }

        method initializeForTimeAttackRanking(context, position, my_carcode, best_time, ta_rank)
        {
            self.Position.TextFace.text = position;
            var even = position % 2 == 0;
            self.Car.ColorFace0.visible = even;
            self.Car.ColorFace1.visible = !even;
            self.Time.ColorFace0.visible = even;
            self.Time.ColorFace1.visible = !even;

            if (ta_rank.car == main::gtengine::MSpecDB::NO_CODE64)
            {
                self.Position.ColorFaceMe.visible = false;
                self.Position.ColorFace.visible = true;

                self.Car.VBox.TextFace1.text = context.translate(Template, "QuickMenu", "NO_TARGET_CAR");
                self.Car.VBox.TextFace2.visible = false;
                self.Time.VBox.TextFace.text = context.translate(Template, "QuickMenu", "NO_TARGET_TIME");
                self.Time.VBox.TextFaceDiff.visible = false;
            }
            else
            {
                var car_code = ta_rank.car;
                var car_label = main::gtengine::MSpecDB::getCarLabel(car_code);
                var is_target = car_code == my_carcode && gSequenceCondition.new_record;

                self.Position.ColorFaceMe.visible = is_target;
                self.Position.ColorFace.visible = !is_target;

                self.Car.ImageFace.image_path = "car/thumbnail/%s.%02d".format(car_label, ta_rank.color);
                self.Car.ImageFace.doInitialize(context);
                self.Car.VBox.TextFace1.text = main::gtengine::MSpecDB::getCarShortName(car_code);
                var ranking_format = context.translate(Template, "QuickMenu", "RANKING_FORMAT");
                |var tire_f_str, var tire_r_str| = TireUtil::getTireNames(context, Template, ta_rank.tire_f, ta_rank.tire_r, main::GlobalStatus::game_context.course);
                self.Car.VBox.TextFace2.text = ranking_format.build(
                    main::pdiext::GetDateTimeStringShort(ta_rank.date),
                    tire_f_str, tire_r_str,
                    simulation_name(context, ta_rank.physics_pro)
                );

                self.Time.VBox.TextFace.text = main::pdiext::GetRaceTimeString(ta_rank.time);
                if (best_time == main::pdiext::MAX_LAPTIME1000 || position == 1)
                    self.Time.VBox.TextFaceDiff.visible = false;
                else
                    self.Time.VBox.TextFaceDiff.text = "+ %s".format(main::pdiext::GetRaceTimeString(ta_rank.time - best_time));
            }
        }

        method initializeForDriftAttackRanking(context, position, my_carcode, best_point, da_rank)
        {
            self.Position.TextFace.text = position;
            var even = position % 2 == 0;
            self.Car.ColorFace0.visible = even;
            self.Car.ColorFace1.visible = !even;
            self.Time.ColorFace0.visible = even;
            self.Time.ColorFace1.visible = !even;

            if (da_rank.car == main::gtengine::MSpecDB::NO_CODE64)
            {
                self.Position.ColorFaceMe.visible = false;
                self.Position.ColorFace.visible = true;

                self.Car.ImageFace.image_path = "";
                self.Car.ImageFace.doInitialize(context);
                self.Car.VBox.TextFace1.text = context.translate(Template, "QuickMenu", "NO_TARGET_CAR");
                self.Car.VBox.TextFace2.visible = false;
                self.Time.VBox.TextFace.text = context.translate(Template, "QuickMenu", "NO_TARGET_POINT");
                self.Time.VBox.TextFaceDiff.visible = false;
            }
            else
            {
                var car_code = da_rank.car;
                var car_label = main::gtengine::MSpecDB::getCarLabel(car_code);
                var is_target = car_code == my_carcode && gSequenceCondition.new_record;

                self.Position.ColorFaceMe.visible = is_target;
                self.Position.ColorFace.visible = !is_target;

                self.Car.ImageFace.image_path = "car/thumbnail/%s.%02d".format(car_label, da_rank.color);
                self.Car.ImageFace.doInitialize(context);
                self.Car.VBox.TextFace1.text = main::gtengine::MSpecDB::getCarShortName(car_code);
                var ranking_format = context.translate(Template, "QuickMenu", "RANKING_FORMAT");
                self.Car.VBox.TextFace2.visible = true;
                |var tire_f_str, var tire_r_str| = TireUtil::getTireNames(context, Template, da_rank.tire_f, da_rank.tire_r, main::GlobalStatus::game_context.course);
                self.Car.VBox.TextFace2.text = ranking_format.build(
                    main::pdiext::GetDateTimeStringShort(da_rank.date),
                    tire_f_str, tire_r_str,
                    simulation_name(context, da_rank.physics_pro)
                );

                self.Time.VBox.TextFace.text = da_rank.point;
                if (best_point < 0 || position == 1)
                {
                    self.Time.VBox.TextFaceDiff.visible = false;
                }
                else
                {
                    self.Time.VBox.TextFaceDiff.visible = true;
                    self.Time.VBox.TextFaceDiff.text = "- %d".format(best_point - da_rank.point);
                }
            }
        }
    }
}