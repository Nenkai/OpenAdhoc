











#define COURSE_TABLE_NAME "t_course_files"

module CourseFileUtil
{
    static TABLE_VERSION_PATCH105 = 110;
    static TABLE_VERSION_PATCH113 = 111;
    static TABLE_VERSION_PATCH200 = 112;
    static TABLE_VERSION = 113;

    class Data
    {
        attribute id;
        attribute filename;
        attribute title;
        attribute genre;
        attribute length;
        attribute favorite;
        attribute online;
        attribute comment;
        attribute datetime;
        attribute grim_course_id;
        attribute local_userid;
        attribute thumbnail_filename;
        attribute elevation;
        attribute straight;
        attribute corner;
        attribute thumbnail_L_filename;
        attribute author;
        attribute weather;
        attribute start_datetime;
        attribute online_race;
        attribute weather_value0;
        attribute initial_retention;
        attribute weather_accel;
        attribute time_progress_speed;

        method setup(context, data)
        {
            self.id = data.id;
            self.filename = data.filename;
            self.title = data.title;
            self.genre = data.genre;
            self.length = data.length;
            self.favorite = 0;
            self.online = 0;
            self.comment = data.comment;

            if (data.datetime == nil)
                self.datetime = pdiext::getBetterTime().getBySecond();
            else
                self.datetime = data.datetime;

            self.grim_course_id = 0;
            self.local_userid = getUserId();
            self.thumbnail_filename = data.thumbnail_filename;
            self.elevation = data.elevation;
            self.straight = data.straight;
            self.corner = data.corner;
            self.thumbnail_L_filename = data.thumbnail_L_filename;

            if (data.author != nil)
                self.author = data.author;
            else
                self.author = "";

            self.weather = data.weather;
            self.start_datetime = data.start_datetime;
            self.online_race = data.online_race;
            self.weather_value0 = data.weather_value0;
            self.initial_retention = data.initial_retention;
            self.weather_accel = data.weather_accel;
            self.time_progress_speed = data.time_progress_speed;
        }
    }

    function initialize()
    {
        var version = DBUtil::getTableVersion(COURSE_TABLE_NAME);
        if (version == nil)
        {
            DBUtil::initializeTable(COURSE_TABLE_NAME, TABLE_VERSION);
            var sql_list = 
            [
                ("CREATE TABLE IF NOT EXISTS %s (id INTEGER, filename TEXT, title TEXT, genre TEXT, length INTEGER, "
                "favorite INTEGER, online INTEGER, comment TEXT, datetime INTEGER, grim_course_id INTEGER, local_userid INTEGER, thumbnail_filename TEXT, "
                "elevation REAL, straight REAL, corner INTEGER, thumbnail_L_filename TEXT, author TEXT, weather INTEGER, start_datetime INTEGER, online_race INTEGER, "
                "weather_value0 REAL, initial_retention INTEGER, weather_accel INTEGER, time_progress_speed INTEGER, "
                "PRIMARY KEY (id))").format(COURSE_TABLE_NAME),

                "CREATE INDEX IF NOT EXISTS %s_idx1 ON %s (genre)".format(COURSE_TABLE_NAME, COURSE_TABLE_NAME),
                "CREATE INDEX IF NOT EXISTS %s_idx2 ON %s (local_userid)".format(COURSE_TABLE_NAME, COURSE_TABLE_NAME),
                "CREATE INDEX IF NOT EXISTS %s_idx3 ON %s (online_race)".format(COURSE_TABLE_NAME, COURSE_TABLE_NAME),
            ];

            var dummy_param = [];
            var sql_list0 = Array();
            foreach (var sql in sql_list)
                sql_list0.push([sql, dummy_param]);

            var res = SQLITE.executeTransaction(sql_list0);
            return;
        }

        if (version == TABLE_VERSION_PATCH105)
        {
            SQLITE.begin();
            var sql_list = [
                "ALTER TABLE %s ADD COLUMN online_race INTEGER".format(COURSE_TABLE_NAME),
                "DROP INDEX IF EXISTS %s_idx3".format(COURSE_TABLE_NAME),
                "CREATE INDEX %s_idx3 ON %s (online_race)".format(COURSE_TABLE_NAME, COURSE_TABLE_NAME),
                "UPDATE %s SET online_race = %d".format(COURSE_TABLE_NAME, 0),
            ];

            foreach (var sql in sql_list)
            {
                var res = SQLITE.execute0(sql);
                DB_ASSERT(res == SQLITE_OK, res);
            }

            DBUtil::updateTableVersion(COURSE_TABLE_NAME, TABLE_VERSION_PATCH113);
            version = TABLE_VERSION_PATCH113;
            SQLITE.commit();
        }

        if (version == TABLE_VERSION_PATCH200)
        {
            var rows = SQLITE.executeQuery("PRAGMA table_info(t_course_files)");
            var names = Map();

            for (var i = 0; i < rows.size; i++)
            {
                var num = rows[i][0];
                var name = rows[i][1];
                names[name] = num;
            }

            if (names["weather_value0"] == nil && 
                names["initial_retention"] == nil && 
                names["weather_accel"] == nil && 
                names["time_progress_speed"] == nil)
                version = TABLE_VERSION_PATCH113;
        }

        if (version == TABLE_VERSION_PATCH113)
        {
            SQLITE.begin();

            var sql_list = [
                "ALTER TABLE %s ADD COLUMN weather_value0 REAL".format(COURSE_TABLE_NAME),
                "ALTER TABLE %s ADD COLUMN initial_retention INTEGER".format(COURSE_TABLE_NAME),
                "ALTER TABLE %s ADD COLUMN weather_accel INTEGER".format(COURSE_TABLE_NAME),
                "ALTER TABLE %s ADD COLUMN time_progress_speed INTEGER".format(COURSE_TABLE_NAME),
                "UPDATE %s SET weather_value0 = CASE WHEN weather = 0 OR weather = 1 THEN 1.0 WHEN weather = 2 OR weather = 3 THEN -1.0 ELSE 1.0 END".format(COURSE_TABLE_NAME),
                "UPDATE %s SET initial_retention = CASE WHEN weather = 0 OR weather = 1 OR weather = 3 THEN 0 WHEN weather = 2 THEN 10 ELSE 0 END".format(COURSE_TABLE_NAME),
                "UPDATE %s SET weather_accel = %d".format(COURSE_TABLE_NAME, 0),
                "UPDATE %s SET time_progress_speed = %d".format(COURSE_TABLE_NAME, 1),
            ];

            foreach (var sql in sql_list)
            {
                var res = SQLITE.execute0(sql);
                DB_ASSERT(res == SQLITE_OK, res);
            }

            DBUtil::updateTableVersion(COURSE_TABLE_NAME, TABLE_VERSION_PATCH200);
            version = TABLE_VERSION_PATCH200;
            SQLITE.commit();
        }

        if (version == TABLE_VERSION_PATCH200)
            DBUtil::updateTableVersion(COURSE_TABLE_NAME, TABLE_VERSION);
    }

    method getGenreList()
    {
        var sql = "SELECT DISTINCT genre FROM %s ORDER BY genre".format(COURSE_TABLE_NAME);
        var rows = SQLITE.executeQuery(sql);
        var result = Array(rows.size);
        for (var i = 0; i < rows.size; i++)
            result[i] = rows[i][0];

        return result;
    }

    function getList(genre, order, by)
    {
        var condition = genre == nil ? "": "WHERE genre = '%{genre}'";
        return getListImpl(condition, order, by);
    }

    function getCourseCount()
    {
        var sql = "SELECT COUNT (*) FROM %s WHERE local_userid = ?".format(COURSE_TABLE_NAME);
        var res = SQLITE.executeQuery(sql, [getUserId()]);
        var count = getResult1(res);
        return count == nil ? 0 : count;
    }

    function getCourseMax()
    {
        return 500;
    }

    function getCourse(id)
    {
        var condition = "WHERE id = %{id} AND local_userid = ?";
        var sql = "%s %s".format(DBUtil::getSelectQuery(COURSE_TABLE_NAME, Data), condition);
        var res = SQLITE.executeQuery(sql, [getUserId()]);
        var data = DBUtil::getDataList(Data, res);
        return data != nil ? data[0] : nil;
    }

    function getFavoriteList(genre, weather, order, by)
    {
        var condition = "WHERE favorite = 1";
        if (genre != nil || weather != nil)
        {
            if (genre != nil)
                condition += " AND genre = '%{genre}'";
            
            if (weather != nil)
                condition += " AND weather = '%{weather}'";

        }

        return getListImpl(condition, order, by);
    }

    function setFavorite(id, favorite)
    {
        var sql = "UPDATE %s SET favorite = %d WHERE id = %d".format(COURSE_TABLE_NAME, favorite ? 1 : 0, id);
        var res = SQLITE.execute(sql);
        DB_ASSERT(res == SQLITE_DONE, res);
        return;
    }

    function setFavoriteByList(course_id_list, favorite)
    {
        var sql = "UPDATE %s SET favorite = %d WHERE id = ?".format(COURSE_TABLE_NAME, favorite ? 1 : 0);
        var sql_list = Array();

        foreach (var course_id in course_id_list)
        {
            var params = [course_id];
            sql_list.push([sql, params]);
        }

        var res = SQLITE.executeTransaction(sql_list);
        DB_ASSERT(res == SQLITE_DONE, res);

        if (isFailed(res))
            ;
    }

    function getFavoriteCount()
    {
        return getCount("WHERE favorite = 1");
    }

    function getFavoriteMax()
    {
        return 50;
    }

    function getOnlineList(order, by)
    {
        return getListImpl("WHERE online = 1", order, by);
    }

    function setOnline(id, online)
    {
        var sql = "UPDATE %s SET online = %d WHERE id = %d".format(COURSE_TABLE_NAME, online ? 1 : 0, id);
        var res = SQLITE.execute(sql);
        DB_ASSERT(res == SQLITE_DONE, res);
        return;
    }

    function setForceOffline()
    {
        var sql = "UPDATE %s SET online = 0".format(COURSE_TABLE_NAME);
        var res = SQLITE.execute(sql);
        DB_ASSERT(res == SQLITE_DONE, res);
        return;
    }

    function getOnlineCount()
    {
        return getCount("WHERE online = 1");
    }

    function getOnlineMax()
    {
        return Grim2Util::Course::getOnlineMax();
    }

    function getOnlineRaceList(order, by)
    {
        return getListImpl("WHERE online_race = 1", order, by);
    }

    function setOnlineRace(id, online_race)
    {
        var sql = "UPDATE %s SET online_race = %d WHERE id = %d".format(COURSE_TABLE_NAME, online_race ? 1 : 0, id);
        var res = SQLITE.execute(sql);
        DB_ASSERT(res == SQLITE_DONE, res);
        return;
    }

    function updateTitleComment(id, title, comment)
    {
        var sql = "UPDATE %s SET title = ?, comment = ? WHERE id = %d".format(COURSE_TABLE_NAME, id);
        var res = SQLITE.execute(sql, [title, comment]);
        DB_ASSERT(res == SQLITE_DONE, res);
        return;
    }

    function updateComment(id, comment)
    {
        var sql = "UPDATE %s SET comment = ? WHERE id = %d".format(COURSE_TABLE_NAME, id);
        var res = SQLITE.execute(sql, [comment]);
        DB_ASSERT(res == SQLITE_DONE, res);
        return;
    }

    function updateGrimCourseId(id, grim_course_id)
    {
        var sql = "UPDATE %s SET grim_course_id = ? WHERE id = %d".format(COURSE_TABLE_NAME, id);
        var res = SQLITE.execute(sql, [grim_course_id]);
        DB_ASSERT(res == SQLITE_DONE, res);
        return;
    }

    function updateCourseDetails(id, length, elevation, straight, corner, weather, start_datetime, online_race, 
        weather_value0, initial_retention, weather_accel, time_progress_speed)
    {
        var sql = "UPDATE %s SET length = ?, elevation = ?, straight = ?, corner = ?, weather = ?, start_datetime = ?, online_race = ?, weather_value0 = ?, initial_retention = ?, weather_accel = ?, time_progress_speed = ? WHERE id = %d".format(COURSE_TABLE_NAME, id);
        var res = SQLITE.execute(sql, [length, elevation, straight, corner, weather, start_datetime, online_race, weather_value0, initial_retention, weather_accel, time_progress_speed]);
        DB_ASSERT(res == SQLITE_DONE, res);
        return;
    }

    function save(context, course_data, pwy_buf, thumbnail_buf, thumbnail_L_buf)
    {
        |var thumbnail_dir, var thumbnail_L_dir, var basename| = beginSave(context);

        var filename = DBUtil::getUniqFileName(COURSE_TABLE_NAME, basename, "pwy");
        main::pdistd::WriteFile(filename, pwy_buf);
        course_data.filename = filename;

        if (thumbnail_buf != nil)
        {
            var thumbnail_filename = DBUtil::getUniqFileName(COURSE_TABLE_NAME, thumbnail_dir + "course", "png");
            main::pdistd::WriteFile(thumbnail_filename, thumbnail_buf);
            course_data.thumbnail_filename = thumbnail_filename;
        }
        else
        {
            course_data.thumbnail_filename = "";
        }

        if (thumbnail_L_buf != nil)
        {
            var thumbnail_L_filename = DBUtil::getUniqFileName(COURSE_TABLE_NAME, thumbnail_L_dir + "course", "png");
            main::pdistd::WriteFile(thumbnail_L_filename, thumbnail_L_buf);
            course_data.thumbnail_L_filename = thumbnail_L_filename;
        }
        else
        {
            course_data.thumbnail_L_filename = "";
        }

        return endSave(context, course_data);
    }

    function downloadSave(context, course_data, pathway, thumbnailM_path, thumbnail_L_buf)
    {
        |var thumbnail_dir, var thumbnail_L_dir, var basename| = beginSave(context);

        var filename = DBUtil::getUniqFileName(COURSE_TABLE_NAME, basename, "pwy");
        main::pdistd::WriteFile(filename, pathway.serialize());
        course_data.filename = filename;

        if (pdistd::Exist(thumbnailM_path))
        {
            var thumbnail_filename = DBUtil::getUniqFileName(COURSE_TABLE_NAME, thumbnail_dir + "course", "png");
            var st = pdistd::ReadFile(thumbnailM_path);
            var thumbnail_buf = st["buffer"];
            pdistd::WriteFile(thumbnail_filename, thumbnail_buf);
            course_data.thumbnail_filename = thumbnail_filename;
        }
        else
        {
            course_data.thumbnail_filename = "";
        }

        if (thumbnail_L_buf != nil)
        {
            var thumbnail_L_filename = DBUtil::getUniqFileName(COURSE_TABLE_NAME, thumbnail_L_dir + "course", "png");
            main::pdistd::WriteFile(thumbnail_L_filename, thumbnail_L_buf);
            course_data.thumbnail_L_filename = thumbnail_L_filename;
        }
        else
        {
            course_data.thumbnail_L_filename = "";
        }

        return endSave(context, course_data);
    }

    function remove(data)
    {
        if (main::pdistd::Exist(data.filename))
            main::pdistd::RemoveFile(data.filename);

        if (main::pdistd::Exist(data.thumbnail_filename))
            main::pdistd::RemoveFile(data.thumbnail_filename);

        if (main::pdistd::Exist(data.thumbnail_L_filename))
            main::pdistd::RemoveFile(data.thumbnail_L_filename);

        DBUtil::deleteRow(COURSE_TABLE_NAME, data);
    }

    function isExist(id)
    {
        var sql = "SELECT id FROM %s WHERE id = ?".format(COURSE_TABLE_NAME);
        var rows = SQLITE.executeQuery(sql, [id]);
        return rows.size > 0;
    }

    function beginSave(context)
    {
        var secure_dir = "/APP_DATA/course/";
        var raw_dir = "/APP_DATA_RAW/course/";
        var thumbnail_dir = raw_dir + "M/";
        var thumbnail_L_dir = raw_dir + "L/";
        main::pdistd::MakeDirectory(secure_dir);
        main::pdistd::MakeDirectory(thumbnail_dir);
        main::pdistd::MakeDirectory(thumbnail_L_dir);
        var basename = secure_dir + "course";
        return [thumbnail_dir, thumbnail_L_dir, basename];
    }

    function endSave(context, course_data)
    {
        var data = Data();
        data.setup(context, course_data);
        DBUtil::insert(COURSE_TABLE_NAME, data);
        var id = DBUtil::get_max_id(SQLITE, COURSE_TABLE_NAME);
        var res = getListImpl("WHERE id = %{id}");
        return res.size == 0 ? nil : res[0];
    }

    function getUserId()
    {
        return main::pdiext::MSystemConfiguration::GetOSDUserId();
    }

    function getListImpl(condition, order, by)
    {
        if (condition != "")
            condition += " AND local_userid = ?";
        else
            condition = "WHERE local_userid = ?";

        var sql = "%s %s %s".format(DBUtil::getSelectQuery(COURSE_TABLE_NAME, Data), condition, createOrderBy(order, by));
        var res = SQLITE.executeQuery(sql, [getUserId()]);
        return DBUtil::getDataList(Data, res);
    }

    function getCount(where)
    {
        var sql = "SELECT COUNT (*) FROM %s %s AND local_userid = ?".format(COURSE_TABLE_NAME, where);
        var res = SQLITE.executeQuery(sql, [getUserId()]);
        var count = getResult1(res);
        return count == nil ? 0 : count;
    }

    function createOrderBy(order, by)
    {
        if (order == nil)
            order = "datetime";

        if (by == nil)
            by = "ASC";

        var by2 = by;
        if (order == "datetime" || order == "length")
        {
            if (by == "ASC")
                by2 = "DESC";
            else if (by == "DESC")
                by2 = "ASC";
        }

        return "order by %{order} %{by2}, id";
    }

    function getResult1(res)
    {
        if (res.size == 0)
            return nil;

        var row = res[0];
        if (row.size == 0)
            return nil;

        return res[0][0];
    }

    function isFailed(res)
    {
        return res != SQLITE_DONE;
    }
}