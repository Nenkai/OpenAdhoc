//---------------------------------------------------------------------------------------
// CarDetailPopupImpl.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module CarDetailPopup
{
    attribute data = nil;
    attribute caller_root = nil;
    attribute dirt_tire_limited = nil;
    attribute snow_tire_limited = nil;

    class Data
    {
        attribute cp = nil;
        attribute dp = nil;
        attribute show_info = nil;
        attribute is_favorite = nil;
        attribute can_change_weight = nil;
        attribute can_change_power = nil;
        attribute can_change_tire = nil;
        attribute can_change_physics = nil;
        attribute can_change_asm = nil;

        method __init__()
        {
            self.can_change_weight = true;
            self.can_change_power = true;
            self.can_change_tire = true;
            self.can_change_physics = true;
            self.can_change_asm = true;
        }
    }

    method open(context, data)
    {
        self.caller_root = context.getRootWindow();
        self.data = data;
        self.closing = false;
        self.result = false;
        self.popup = main::SequenceUtil::ModalPage(context, CarDetailPopup);
        self.popup.open();
        return self.result;
    }

    method onInitialize(context)
    {

        setCursor(context, "wait");

        BalloonTip.visible = false;
        BalloonTip.initialize(context);
        Pane.initialize(context, context.translate(CarDetailPopup, "Balloon", "CarDetail"));

        Pane::Footer::HBox::More.visible = self.data.show_info;

        var space = Pane::Setting::Body::ScrollClip::space;
        space.y = 0;
        space.Transmission::OptionMenu.initialize(context, CarDetailPopup, Template::OptionMenuItem1, ["AUTOMATIC", "MANUAL"], "TrialSetting");
        space.TCSASM::OptionMenuASM.initialize(context, CarDetailPopup, Template::OptionMenuItem2, ["OFF", "ON"], "TrialSetting");
        space.ActiveSteering::OptionMenu.initialize(context, CarDetailPopup, Template::OptionMenuItem1, ["OFF", "ACTIVE_STEERING_WEAK", "ACTIVE_STEERING_STRONG"], "TrialSetting");
        space.CarPhysics::OptionMenu.initialize(context, CarDetailPopup, Template::OptionMenuItem1, ["PhysicsNormal", "PhysicsPro"], "TrialSetting");

        self.dirt_tire_limited = false;
        self.snow_tire_limited = false;

        var dirt_disable_car = main::gtengine::MSpecDB::checkGenericFlag("dirt_disable", self.data.cp.getCarCode());

        if (!dirt_disable_car)
        {
            var course = main::GlobalStatus::game_context.course;

            if (course != nil && course != main::gtengine::MSpecDB::NO_CODE64)
            {
                var condition_code = main::gtengine::MSpecDB::getCourseCondition(course);
                self.dirt_tire_limited = main::gtengine::CourseCondition::DIRT == condition_code;
                self.snow_tire_limited = main::gtengine::CourseCondition::SNOW == condition_code;
            }
        }

        var tires;
        if (self.dirt_tire_limited)
        {
            tires = ["type_11"];
        }
        else if (self.snow_tire_limited)
        {
            tires = ["type_12"];
        }
        else
        {
            var tire_category = TireUtil::CategoryTarmac;
            var tire_range = TireUtil::getIndexRangeFromCategory(tire_category);
            var tire_num = (tire_range[1] - tire_range[0]) + 1;

            tires = Array(tire_num);
            for (var i = 0; i < tire_num; i++)
                tires[i] = "type_%03d".format(tire_range[0] + i);
        }

        space.FrontTire::OptionMenu.initialize(context, CarDetailPopup, Template::OptionMenuItem1, tires, "TireName");
        space.RearTire::OptionMenu.initialize(context, CarDetailPopup, Template::OptionMenuItem1, tires, "TireName");

        space.FrontTire::OptionMenu.insensitive = !CarDetailPopup.data.can_change_tire || self.dirt_tire_limited || self.snow_tire_limited;
        space.RearTire::OptionMenu.insensitive = !CarDetailPopup.data.can_change_tire || self.dirt_tire_limited || self.snow_tire_limited;

        space.CarPhysics::OptionMenu.insensitive = !CarDetailPopup.data.can_change_physics;

        var car_label = self.data.cp.getCarLabel();
        var car_color = self.data.cp.color;
        Contents::ImageFace.image_path = "car/thumbnail_L/%s.%02d".format(car_label, car_color);
        Contents::ImageFace.doInitialize(context);

        var tuner = main::gtengine::MSpecDB::getTunerCode(car_label);
        tuner = tuner.substr(6);

        Contents::Manufacture.image_path = "piece_gt5m/tunner_logo_S/" + tuner + ".img";
        Contents::Manufacture.doInitialize(context);

        self.data.cp.beginSetting();
        reflect(context);
        self.data.cp.endSetting();

        var car_code = self.data.cp.getCarCode();
        Pane::About::Icon.visible = self.data.is_favorite;
        Pane::About::TextFace.text = main::gtengine::MSpecDB::getCarShortName(car_code);

        Pane::Footer::HBox::QuickTune.visible = self.data.is_favorite;

        CarDetailPopup.setFocus(Pane::Footer::HBox::OK);

        onInitializeAnimation(context);

        var cp = main::gtengine::MCarParameter(car_code);
        cp.updateScratch();
        var power = cp.getPowerScratch();
        power = main::pdiext::MUnit::GetPowerForDisplay(power.toFloat() * 0.1);
        Contents::PS::TextFace.text = power;
        Contents::PS::TextFacePS.text = context.translate(CarDetailPopup, "Unit", main::pdiext::MUnit::GetUnitKeywordOfPower());

        var format_drive_train = context.translate(CarDetailPopup, "SpecFormat", "car_drive_train");
        Contents::TextFaceDriveTrain.text = format_drive_train.build(context.translate(CarDetailPopup, "DriveTrainName", main::gtengine::MSpecDB::getCarDriveTrain(car_code)));

        var format_mass = context.translate(CarDetailPopup, "SpecFormat", "car_mass");
        Contents::TextFaceMass.text = format_mass.build(main::gtengine::MSpecDB::getCarCatalogMs(car_code, true));

        setCursor(context, "default");

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        var space = Pane::Setting::Body::ScrollClip::space;
        space.Transmission::OptionMenu.finalize(context);
        space.TCSASM::OptionMenuASM.finalize(context);
        space.ActiveSteering::OptionMenu.finalize(context);
        space.CarPhysics::OptionMenu.finalize(context);

        space.FrontTire::OptionMenu.finalize(context);
        space.RearTire::OptionMenu.finalize(context);


        return EVENTRESULT_FILTER;
    }

    method reflect(context)
    {
        var space = Pane::Setting::Body::ScrollClip::space;

        if (self.data.cp.isATOnly())
        {
            space.Transmission::OptionMenu.setIndex(context, 0);
            space.Transmission::OptionMenu.insensitive = true;
        }
        else
        {
            space.Transmission::OptionMenu.setIndex(context, self.data.dp.manual ? 1 : 0);
            space.Transmission::OptionMenu.insensitive = false;
        }

        space.TCSASM::slider.range = [0, 10];
        space.TCSASM::slider.index = self.data.cp.quicktune_tcs;
        space.TCSASM::slider.setup(context, 1, context.translate(CarDetailPopup, "TrialSetting", "OFF"));

        space.TCSASM::OptionMenuASM.setIndex(context, self.data.dp.assist_asm ? 1 : 0);
        space.TCSASM::OptionMenuASM.insensitive = !self.data.can_change_asm;

        space.ActiveSteering::OptionMenu.setIndex(context, self.data.dp.active_steering);

        space.CarPhysics::OptionMenu.setIndex(context, self.data.dp.physics_pro ? 1 : 0);


        var tire_f;
        var tire_r;
        if (self.data.cp.getCarCode() == main::GlobalStatus::game_context.getCar().getCarCode())
            |tire_f, tire_r| = main::GlobalStatus::game_context.getCar().getTireCategories();
        else
            |tire_f, tire_r| = self.data.cp.getTireCategories();

        space.FrontTire::OptionMenu.setIndex(context, TireUtil::convTireIndexToMenuIndex(tire_f));
        space.RearTire::OptionMenu.setIndex(context, TireUtil::convTireIndexToMenuIndex(tire_r));
    }

    method apply(context)
    {
        var space = Pane::Setting::Body::ScrollClip::space;

        self.data.dp.manual = space.Transmission::OptionMenu.index != 0;

        self.data.dp.assist_tcs = space.TCSASM::slider.index > 0;
        self.data.cp.quicktune_tcs = space.TCSASM::slider.index;

        self.data.dp.assist_asm = space.TCSASM::OptionMenuASM.index != 0;

        self.data.dp.active_steering = space.ActiveSteering::OptionMenu.index;

        self.data.dp.physics_pro = space.CarPhysics::OptionMenu.index;

        var tire_category = TireUtil::CategoryTarmac;
        if (self.dirt_tire_limited)
            tire_category = TireUtil::CategoryDirt;
        else if (self.snow_tire_limited)
            tire_category = TireUtil::CategorySnow;

        self.data.cp.beginPartsChange();
        self.data.cp.setFrontTireCategory(TireUtil::convMenuIndexToTireIndex(tire_category, space.FrontTire::OptionMenu.index));
        self.data.cp.setRearTireCategory(TireUtil::convMenuIndexToTireIndex(tire_category, space.RearTire::OptionMenu.index));
        self.data.cp.endPartsChange();
    }

    attribute popup = nil;
    attribute closing = nil;
    attribute result = nil;

    method onCancel(context)
    {
        main::sound.play("cancel");
        CarDetailPopup.setFocus(Pane::Footer::HBox::Cancel);
        return EVENTRESULT_FILTER;
    }

    method close(context)
    {
        if (self.popup != nil)
        {
            self.popup.close();
            self.popup = nil;
        }
    }

    method onInitializeAnimation(context)
    {
        context.event_mask &= ~1;
        context.filterKeyEvent();

        ScalarInterpolator.reverse = false;
        ScalarInterpolatorX.reverse = false;
        ScalarInterpolatorY.reverse = false;

        ScalarInterpolatorX.on_effect_end = function (context)
        {
            main::menu::MFocusEnterEvent(context, CarDetailPopup.focus_widget).dispatchEvent();
            BalloonTip.visible = true;
            ScalarInterpolatorX.on_effect_end = nil;
            context.event_mask |= 1;

            if (CarDetailPopup.caller_root != nil)
                CarDetailPopup.caller_root.visible = false;
        }

        ScalarInterpolator.restart();
        ScalarInterpolatorX.restart();
        ScalarInterpolatorY.restart();
    }

    method onCancelAnimation(context)
    {
        context.event_mask &= ~1;
        context.filterKeyEvent();

        ScalarInterpolator.reverse = true;
        ScalarInterpolatorX.reverse = true;
        ScalarInterpolatorY.reverse = true;

        ScalarInterpolatorX.on_effect_end = function (context)
        {
            CarDetailPopup.close(context);
            ScalarInterpolatorX.on_effect_end = nil;
            context.event_mask |= 1;
        }

        if (CarDetailPopup.caller_root != nil)
        {
            CarDetailPopup.caller_root.visible = true;
            CarDetailPopup.caller_root = nil;
        }
        ScalarInterpolator.restart();
        ScalarInterpolatorX.restart();
        ScalarInterpolatorY.restart();
    }

    module Pane::Footer
    {
        method onFocusEnter(context, event)
        {
            var w = event.widget;
            BalloonTip.set_value(context, w, w.balloon.text, 3.5);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Footer::HBox::Cancel
    {
        method onActivate(context)
        {
            if (!CarDetailPopup.closing)
            {
                main::sound.play("cancel");
                CarDetailPopup.closing = true;
                CarDetailPopup.onCancelAnimation(context);
            }

            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Footer::HBox::OK
    {
        method onActivate(context)
        {
            if (CarDetailPopup.closing)
            {
                return EVENTRESULT_FILTER;
            }

            main::sound.play("ok");

            var interrupt = false;
            if (main::GlobalStatus::game_context.course != main::gtengine::MSpecDB::NO_CODE64)
            {
                var context_course = main::GlobalStatus::game_context.course;
                var condition_code = main::gtengine::MSpecDB::getCourseCondition(context_course);
                if (main::gtengine::CourseCondition::DIRT == condition_code ||
                    main::gtengine::CourseCondition::SNOW == condition_code)
                {
                    if (main::gtengine::MSpecDB::checkGenericFlag("dirt_disable", CarDetailPopup.data.cp.getCarCode()))
                    {
                        var confirm_mess = context.translate(CarDetailPopup, "Arcade", "CONFIRMATION_CAR_SELECT");
                        var res = DialogUtil::openConfirmDialog(context, DialogUtil::DEFAULT_NO, confirm_mess);
                        interrupt = !res;
                    }
                }
            }

            if (interrupt)
                return EVENTRESULT_FILTER;

            CarDetailPopup.closing = true;
            CarDetailPopup.result = true;
            CarDetailPopup.apply(context);
            Blink.ScalarInterpolator.on_effect_end = function (context)
            {
                CarDetailPopup.close(context);
            }

            if (CarDetailPopup.caller_root != nil)
            {
                CarDetailPopup.caller_root.visible = true;
                CarDetailPopup.caller_root = nil;
            }

            Blink.ScalarInterpolator.restart();
            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Footer::HBox::More
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            CarSpecPopup.open(context, CarDetailPopup.data.cp);
            return EVENTRESULT_FILTER;
        }
    }

    module Pane::Footer::HBox::QuickTune
    {
        method onActivate(context)
        {
            main::sound.play("ok");

            var data = QuickTunePopup::Data(CarDetailPopup.data.cp);

            data.insensitive_power = !CarDetailPopup.data.can_change_power;
            data.insensitive_weight = !CarDetailPopup.data.can_change_weight;

            QuickTunePopup.open(context, data);

            context.event_mask |= 1;

            return EVENTRESULT_FILTER;
        }
    }
}