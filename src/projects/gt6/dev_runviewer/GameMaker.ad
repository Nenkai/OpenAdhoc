

















module GameMaker
{
    //import RunViewerProject::TopRoot::*;
    function candidates_compare(a, b)
    {
        return a[0] < b[0];
    }
    function getCandidates(mdl)
    {
        var result = [];
        mdl.find_static(pair => result.push([pair[1], pair[0]]) );
        result.sort(candidates_compare);
    }

    static sTitle;
    static sPrevIndex;

    function on_play_style(context, index, menuitem, item, arg)
    {
        var event = arg;
        var play_style = event.play_style;

        if (play_style.window_num == nil)
            play_style.window_num = 1;
        
        var menuitems = top_menu = [
            blue,
            RunviewerUtil.CreateSelect(play_style.bspec_type, 
                "bspec_type", "bspec_type を変更します。" , getCandidates(gtengine::BSpecType)),
            RunviewerUtil.CreateSelect(play_style.play_type, 
                "play_type", "play_type を変更します。" , getCandidates(gtengine::PlayType)),
            RunviewerUtil.CreateToggle(play_style.no_quickmenu, 
                "no_quickmenu", "no_quickmenu を変更します。" , noyes_list),
            RunviewerUtil.CreateToggle(play_style.no_instant_replay, 
                "no_instant_replay", "no_instant_replay を変更します。" , noyes_list),
            RunviewerUtil.CreateToggle(play_style.replay_record_enable, 
                "replay_record_enable", "replay_record_enable を変更します。" , noyes_list),
            RunviewerUtil.CreateSlider(play_style.window_num, 
                "window_num", "window_num を変更します。" , [1, 4], nil),
        ];
        TopRoot.open_menu(context, menuitem.label, menuitems, index, 0);
    }

    module CarSelect
    {
        function on_update_select_car(context, index, menuitem, item)
        {
            var car = menuitem.arg;
            if (car.code != gtengine::MSpecDB::NO_CODE)
                item["value"].text = gtengine::MSpecDB::getCarLabel(car.code) + "  (" + gtengine::MSpecDB::getCarName(car.code) + ")";
            else
                item["value"].text = "";
        }

        function on_select_car(context, index, menuitem, item, arg)
        {
            var car_list = CarMenu::get_all_cars(context);
            var menuitems = Array(car_list.size);
            for (var i = 0; i < car_list.size; i++)
            {
                var menuitem = MenuItem(MenuItemTEXT, car_list[i], "", nil, on_update_car_item, on_car_selected, nil, arg);
                menuitem.base_color = ((i / 8) % 2 == 0) ? gray : cyan;
                menuitems[i] = menuitem;
            }

            var focus_index = 0;
            var car = arg;
            if (car.code != gtengine::MSpecDB::NO_CODE)
            {
                var car_label = gtengine::MSpecDB::getCarLabel(car.code);
                focus_index = RunviewerUtil::SearchFocusIndex(car_label, menuitems);
            }
            TopRoot.open_menu(context, menuitem.label, menuitems, index, focus_index);
        }

        function on_car_selected(context, index, menuitem, item, arg)
        {
            var car_label = menuitem.label;
            var car_label = gtengine::MSpecDB::getCarLabel(car.code);
            var primary_color =  gtengine::MSpecDB::getCarVariationFlag(car_code, 1);
            if (primary_color < 0)
                primary_color = 0;
            var car = arg;
            car.code = car_code;
            car.color = primary_color;
            close_menu(context);
        }

        function on_update_car_item(context, index, menuitem, item)
        {
            var car = menuitem.arg;
            var label = menuitem.label;
            if (car.code != gtengine::MSpecDB::NO_CODE)
            {
                if (gtengine::MSpecDB::getCarLabel(car.code) == label)
                    item["label"].text_color = main::menu::MColorObject(1f, 1.0, 0.0);
            }
            item["value"].text = gtengine::MSpecDB::getCarName(label);
            item["value"].text_color = text_color;
        }

        function on_update_select_color(context, index, menuitem, item)
        {
            var car = menuitem.arg;
            if (car.code != gtengine::MSpecDB::NO_CODE)
                return;
            item["value"].text = gtengine::MSpecDB::getCarColorName(car.code, car.color);

            item.ChipF.ColorChipFace.setCarColor(car.code, car.color);
            item.ChipF.visible = true;
        }

        function on_color_selected(context, index, menuitem, item, arg)
        {
            var car = arg;
            car.color = menuitem.label;
            close_menu(context);
        }

        function on_update_color_item(context, index, menuitem, item)
        {
            var car = menuitem.arg;
            if (car.color == nil)
                return;
            
            var label = menuitem.label;
            if (car.color == label)
                item["label"].text_color = main::menu::MColorObject(1f, 1.0, 0.0);
            item["value"].text = gtengine::MSpecDB::getCarColorName(car.code, index);

            item.ChipF.ColorChipFace.setCarColor(car.code, index);
            item.ChipF.visible = true;
        }

        function on_select_color(context, index, menuitem, item, arg)
        {
            var car = arg;
            if (car.code == gtengine::MSpecDB::NO_CODE)
            {
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, "Please select Car first.");
                return;
            }

            if (car.color == nil)
            {
                var primary_color = gtengine::MSpecDB::getCarVariationFlag(car.code, 1);
                if (primary_color < 0)
                    primary_color = 0;
                car.color = primary_color;
            }

            var color_num = gtengine::MSpecDB::getCarVariation(car.code);
            var color_menu = Array(color_num);
            for (var i = 0; i < color_num; i++)
            {
                var color_name = gtengine::MSpecDB::getCarColorName(car.code, i);
                color_menu[i] = MenuItem(MenuItemTEXT, i, "", nil, on_update_color_item, on_color_selected, nil, car);
            }

            open_menu(context, menuitem.label, color_menu, index, car.color);
        }

        function on_select_premium_car(context, index, menuitem, item, arg)
        {

            var car_list = CarMenu::get_premium_model_cars();
            var menuitems = Array(car_list.size);
            for (var i = 0; i < car_list.size; i++)
            {
                var menuitem = MenuItem(MenuItemTEXT, car_list[i], "", nil, on_update_car_item, on_car_selected, nil, arg);
                menuitem.base_color = ((i / 8) % 2 == 0) ? gray : cyan;
                menuitems[i] = menuitem;
            }

            var focus_index = 0;
            var car = arg;
            if (car.code != gtengine::MSpecDB::NO_CODE)
            {
                var car_label = gtengine::MSpecDB::getCarLabel(car.code);
                focus_index = RunviewerUtil::SearchFocusIndex(car_label, menuitems);
            }
            TopRoot.open_menu(context, menuitem.label, menuitems, index, focus_index);
        }

        function on_select_tuner(context, index, menuitem, item, arg)
        {

            var tuner_list = CarMenu::get_tuner_label_list();
            var menuitems = Array(tuner_list.size);
            for (var i = 0; i < car_list.size; i++)
            {
                var menuitem = MenuItem(MenuItemTEXT, tuner_list[i], "", nil, nil, on_tuner_selected, nil, arg);
                menuitem.base_color = ((i / 8) % 2 == 0) ? gray : cyan;
                menuitems[i] = menuitem;
            }

            var focus_index = 0;
            var car = arg;
            if (car.code != gtengine::MSpecDB::NO_CODE)
            {
                var car_label = gtengine::MSpecDB::getCarLabel(car.code);
                var ride_car_tuner_label = gtengine::MSpecDB::getTunerLabel(car_label);
                focus_index = RunviewerUtil::SearchFocusIndex(ride_car_tuner_label, menuitems);
            }
			
            TopRoot.open_menu(context, menuitem.label, menuitems, index, focus_index);
        }

        function on_tuner_selected(context, index, menuitem, item, arg)
        {
            var pick_tuner = menuitem.label;

            var car_list = CarMenu::get_cars_label_by_tuner(context, pick_tuner);

            var cars = Array();
            car_list.each(car_label => 
            {

                cars.push(MenuItem(MenuItemTEXT, car_label, "", nil, on_update_car_item, on_select_makertuner_car, nil, arg));
            });

            TopRoot.open_menu(context, menuitem.label, cars, index, focus_index);
        }
        
        function on_select_maker_tuner_car(context, index, menuitem, item, arg)
        {
            var car_label = menuitem.label;
            var car_code = gtengine::MSpecDB::getCarCode(car_label);
            var primary_color = gtengine::MSpecDB::getCarVariationFlag(car_label, 1);
            if (primary_color < 0)
                primary_color = 0;

            var car = arg;
            car.code = car_code;
            car.color = primary_color;


            close_menu(context);
            close_menu(context);
        }

        function on_update_car(context, index, menuitem, item)
        {
            var arg = menuitem.arg;
            var car = arg;
            if (car.code != gtengine::MSpecDB::NO_CODE)
            {
                item["value"].text = gtengine::MSpecDB::getCarLabel(car.code) + "  (" + gtengine::MSpecDB::getCarName(car.code) + ")";
                if (car.color != nil)
                {
                    item.ChipF.ColorChipFace.setCarColor(car.code, car.color);
                    item.ChipF.visible = true;
                }
            }
            else
                item["value"].text = "";
        }

        function on_car(context, index, menuitem, item, arg)
        {
            var car = arg;

            var menuitems = [];

            menuitems.push(blue);

            menuitems.push(
                MenuItem(MenuItemTEXT, "CarCode", "CarCode を変更します。", nil, on_update_select_car, on_select_car, nil, car);
            );
            menuitems.push(
                MenuItem(MenuItemTEXT, "CarCodeByPremium", "CarCodeByPremium を変更します。", nil, on_update_select_car, on_select_premium_car, nil, car);
            );

            menuitems.push(
                MenuItem(MenuItemTEXT, "CarCodeByTuner", "CarCodeByTuner を変更します。", nil, nil, on_select_tuner, nil, car);
            );

            menuitems.push(
                MenuItem(MenuItemTEXT, "CarColor", "CarColor を変更します。", nil, on_update_select_color, on_select_color, nil, car);
            );

            TopRoot.open_menu(context, menuitem.label, menuitems, index, 0);
        }
    }

    function on_driver_parameter(context, index, menuitem, item, arg)
    {
        var dp = arg;
        var menuitems = [
            blue,
            RunviewerUtil.CreateSelect(dp.type, 
                "type", "type を変更します。" , getCandidates(gtengine::DriverType)),
            RunviewerUtil.CreateSlider(play_style.window_num, 
                "port", "port を変更します。" , [0, 6], nil, ""),
            RunviewerUtil.CreateInputText(dp.display_name, 
                "display_name", "display_name を変更します。"),
            RunviewerUtil.CreateInputText(dp.region, 
                "region", "region を変更します。"),
            RunviewerUtil.CreateToggle(dp.manual,
                "manual", "manual を変更します。", noyes_list),
            RunviewerUtil.CreateToggle(dp.assist_asm,
                "asm", "asm を変更します。", noyes_list),
            RunviewerUtil.CreateToggle(dp.physics_pro,
                "physics_pro", "physics_pro を変更します。", noyes_list),
            RunviewerUtil.CreateToggle(dp.display_driving_line,
                "display_driving_line", "display_driving_line を変更します。", noyes_list),
            RunviewerUtil.CreateSlider(play_style.head_code, 
                "head_code", "head_code を変更します。" , [0, 128], nil, ""),
            RunviewerUtil.CreateSlider(play_style.body_code, 
                "body_code", "body_code を変更します。" , [0, 128], nil, ""),
            RunviewerUtil.CreateSlider(play_style.head_color_code, 
                "head_color_code", "head_color_code を変更します。" , [0, 128], nil, ""),
            RunviewerUtil.CreateSlider(play_style.head_color_code, 
                "body_color_code", "body_color_code を変更します。" , [0, 128], nil, ""),
            RunviewerUtil.CreateSlider(play_style.braking_skill, 
                "braking_skill", "braking_skill を変更します。" , [0, 200], nil, ""),
            RunviewerUtil.CreateSlider(play_style.cornering_skill, 
                "cornering_skill", "cornering_skill を変更します。" , [0, 200], nil, ""),
            RunviewerUtil.CreateSelect(dp.special_ai_type, 
                "special_ai_type", "special_ai_type を変更します。" , getCandidates(gtengine::SpecialAIType)),
        ];
        TopRoot.open_menu(context, menuitem.label, menuitems, index, 0);
    }

    function on_update_driver(context, index, menuitem, item)
    {
        var arg = menuitem.arg;
        var dp = arg;
        var text = "";
        var res = gtengine::DriverType.find_static(pair => pair[1] == dp.type);

        if (res.size > 0)
            text = text + res[0][0];
        
        item["value"].text = text;
    }

    function on_update_car_category(context, index, menuitem, item)
    {
        var car_category_ref = menuitem.arg;
        item["value"].text = *car_category_ref;
    }

    function on_car_category(context, index, menuitem, item, arg)
    {
        var car_category_ref = arg;
        var menuitems = [
            blue,
            RunviewerUtil::CreateSelect(car_category_ref, "Category", "Category を変更します。", car_category_list),
        ];


        TopRoot.open_menu(context, menuitem.label, menuitems, index, 0);
    }

    function on_update_tuner(context, index, menuitem, item)
    {
        var tuner_ref = menuitem.arg;
        item["value"].text = *tuner_ref;
    }

    function on_tuner(context, index, menuitem, item, arg)
    {
        var tuner_ref = arg;
        var menuitems = [
            blue,
            RunviewerUtil::CreateSelect(tuner_ref, "Tuner", "Tuner を変更します。", tuner_list),
        ];


        TopRoot.open_menu(context, menuitem.label, menuitems, index, 0);
    }

    function on_update_country(context, index, menuitem, item)
    {
        var country_ref = menuitem.arg;
        item["value"].text = *country_ref;
    }

    function on_tuner(context, index, menuitem, item, arg)
    {
        var country_ref = arg;
        var menuitems = [
            blue,
            RunviewerUtil::CreateSelect(country_ref, "Country", "Tuner を変更します。", country_list),
        ];


        TopRoot.open_menu(context, menuitem.label, menuitems, index, 0);
    }

    function on_num_changed(context, smdata, value)
    {
        var list = smdata.arg;
        list.resize(value);
        TopRoot.restart_menu(context);
    }

    static car_category_list = [
        [-1, "-1"],
        [gtengine::CarCategory::NORMAL, "NORMAL"],
        [gtengine::CarCategory::RACING, "RACING"],
        [gtengine::CarCategory::TUNING, "TUNING"],
        [gtengine::CarCategory::CONCEPT, "CONCEPT"],
    ];

    static drivetrain_list = [
        [-1, "-1"],
        [gtengine::CarCategory::FR, "FR"],
        [gtengine::CarCategory::FF, "FF"],
        [gtengine::CarCategory::_4WD, "4WD"],
        [gtengine::CarCategory::MR, "MR"],
        [gtengine::CarCategory::RR, "RR"],
    ];

    static aspiration_list = [
        [-1, "-1"],
        [gtengine::CarCategory::NATUNE, "NATUNE"],
        [gtengine::CarCategory::TURBO, "TURBO"],
        [gtengine::CarCategory::SUPERCHARGER, "SUPERCHARGER"],
        [gtengine::CarCategory::SUPERTURBO, "SUPERTURBO"],
    ];

    static tuner_list;

    function makeTunerList()
    {
        var tuner_list = Array();
        tuner_list.push([-1, "-1"]);

        var res = SPECDB.executeQuery("SELECT TunerString, ID FROM TUNER ORDER BY TunerString");
        foreach (var row in res)
        {
            var item = [row[1], row[0]];
            tuner_list.push(item);
        }
    }

    static country_list;

    function makeCountryList()
    {
        var country_list = Array();
        country_list.push([-1, "-1"]);

        var res = SPECDB.executeQuery("SELECT Label, ID FROM COUNTRY ORDER BY Label");
        foreach (var row in res)
        {
            var item = [row[1], row[0]];
            country_list.push(item);
        }
    }

    function get_tire_list(context)
    {
        var range = [gtengine::PARTS_TIRE::TIRE_DRY_MIN, gtengine::PARTS_TIRE::TIRE_DRY_MAX - 1];
        var tire_list = Array(range[1] - range[0] + 1 + 1);
        tire_list[0] = [-1, "制限なし"];
        for (var i = 1; i < tire_list.size; i++)
        {
            var tire_index = range[0] + i - 1;
            tire_list[i] = [tire_index, TireUtil::getName(tire_index)];
        }

        return tire_list;
    }

    function get_regulation_menu_list(context, arg)
    {
        var [event, regulation] = arg;
        var tire_list = get_tire_list(context);

        var menuitems = [
            blue,
            RunviewerUtil.CreateSlider(regulation.limit_pp, 
                "limit_pp", "limit_pp を変更します。" , [-1, 1000], nil, " pts."),
            RunviewerUtil.CreateSlider(regulation.limit_pp, 
                "need_pp", "need_pp を変更します。" , [-1, 1000], nil, " pts."),
            RunviewerUtil.CreateSelect(regulation.limit_tire_f, 
                "limit_tire_f", "limit_tire_f を変更します。" , tire_list),
            RunviewerUtil.CreateSelect(regulation.need_tire_f, 
                "need_tire_f", "need_tire_f を変更します。" , tire_list),
            RunviewerUtil.CreateSelect(regulation.limit_tire_r, 
                "limit_tire_r", "limit_tire_r を変更します。" , tire_list),
            RunviewerUtil.CreateSelect(regulation.need_tire_r, 
                "need_tire_r", "need_tire_r を変更します。" , tire_list),
        ];

        menuitems.push(green);
        var tmp = regulation.car_categories.size;
        menuitems.push(RunviewerUtil.CreateSlider(tmp, 
            "Category の数を変更", "Category の数を変更します。" , 
            [0, 4], nil, "", on_num_changed, regulation.car_categories)
        );

        menuitems.push(blue);
        for (var i = 0; i < regulation.car_categories.size; i++)
        {
            menuitems.push(MenuItem(MenuItemTEXT, 
                "Category(#%{i})", "Category(#%{i}) を変更します。", 
                nil, on_update_car_category, on_car_category, nil, regulation.car_categories[i]));
        }


        menuitems.push(green);
        tmp = regulation.cars.size;
        menuitems.push(RunviewerUtil.CreateSlider(tmp, 
            "Car の数を変更", "Car の数を変更します。" , 
            [0, 128], nil, "", on_num_changed, regulation.cars)
        );

        menuitems.push(blue);
        for (var i = 0; i < regulation.cars.size; i++)
        {
            menuitems.push(MenuItem(MenuItemTEXT, 
                "Car(#%{i})", "Car(#%{i}) を変更します。", 
                nil, CarSelect::on_update_car, CarSelect::on_car, nil, regulation.cars[i]));
        }

        menuitems.push(blue);
		
        menuitems.push(RunviewerUtil.CreateSlider(regulation.need_license, 
            "Need License の数を変更", "Need License の数を変更します。" , 
            [0, 16], nil, "");
        );

        menuitems.push(RunviewerUtil.CreateSlider(regulation.limit_power, 
            "limit_power", "limit_power を変更します。" , 
            [-1, 2000], nil, ""));
        menuitems.push(RunviewerUtil.CreateSlider(regulation.need_power, 
            "need_power", "need_power を変更します。" , 
            [-1, 2000], nil, " PS");
        );

        menuitems.push(RunviewerUtil.CreateSlider(regulation.limit_weight, 
            "limit_weight", "limit_weight を変更します。" , 
            [-1, 10000], nil, " kg"));
        menuitems.push(RunviewerUtil.CreateSlider(regulation.need_weight, 
            "need_weight", "need_weight を変更します。" , 
            [-1, 10000], nil, " kg"));
        
        menuitems.push(RunviewerUtil.CreateSelect(regulation.need_drivetrain, 
            "need_drivetrain", "need_drivetrain を変更します。" , drivetrain_list));
        
        menuitems.push(RunviewerUtil.CreateSelect(regulation.need_aspiration, 
            "need_aspiration", "need_aspiration を変更します。" , aspiration_list));
        

        menuitems.push(RunviewerUtil.CreateSlider(regulation.limit_year, 
            "limit_year", "limit_year を変更します。" , 
            [-1, 2020], nil, "年"));
        menuitems.push(RunviewerUtil.CreateSlider(regulation.need_year, 
            "need_year", "need_year を変更します。" , 
            [-1, 2020], nil, "年"));

        menuitems.push(RunviewerUtil.CreateSlider(regulation.limit_aspec_level, 
            "limit_aspec_level", "limit_aspec_level を変更します。" , 
            [-1, 30], nil, ""));
        menuitems.push(RunviewerUtil.CreateSlider(regulation.need_aspec_level, 
            "need_aspec_level", "need_aspec_level を変更します。" , 
            [-1, 30], nil, ""));
        menuitems.push(RunviewerUtil.CreateSlider(regulation.limit_bspec_level, 
            "limit_bspec_level", "limit_bspec_level を変更します。" , 
            [-1, 30], nil, ""));
        menuitems.push(RunviewerUtil.CreateSlider(regulation.need_bspec_level, 
            "need_bspec_level", "need_bspec_level を変更します。" , 
            [-1, 30], nil, ""));
        menuitems.push(RunviewerUtil.CreateSlider(regulation.limit_bspec_driver_count, 
            "limit_bspec_driver_count", "limit_bspec_driver_count を変更します。" , 
            [-1, 4], nil, ""));
        menuitems.push(RunviewerUtil.CreateSlider(regulation.need_bspec_driver_count, 
            "need_bspec_driver_count", "need_bspec_driver_count を変更します。" , 
            [-1, 4], nil, ""));

        menuitems.push(green);
        tmp = regulation.tuners.size;
        menuitems.push(RunviewerUtil.CreateSlider(tmp, 
            "Tuner の数を変更", "Tuner の数を変更します。" , 
            [0, 16], nil, "", on_num_changed, regulation.tuners)
        );

        menuitems.push(blue);
        for (var i = 0; i < regulation.tuners.size; i++)
        {
            menuitems.push(MenuItem(MenuItemTEXT, 
                "Tuner(#%{i})", "Tuner(#%{i}) を変更します。", 
                nil, on_update_tuner, on_tuner, nil, regulation.tuners[i]));
        }

        menuitems.push(green);
        tmp = regulation.countries.size;
        menuitems.push(RunviewerUtil.CreateSlider(tmp, 
            "Country の数を変更", "Country の数を変更します。" , 
            [0, 16], nil, "", on_num_changed, regulation.countries)
        );
        menuitems.push(blue);
        for (var i = 0; i < regulation.countries.size; i++)
        {
            menuitems.push(MenuItem(MenuItemTEXT, 
                "Country(#%{i})", "Country(#%{i}) を変更します。", 
                nil, on_update_country, on_country, nil, regulation.countries[i]));
        }

        return menuitems;
    }

    function on_regulation(context, index, menuitem, item, arg)
    {
        var [event, regulation] = arg;
        
        TopRoot.open_menu(context, menuitem.label, nil, index, 0, nil, 
            [get_regulation_menu_list, [event, regulation]]);
    }

    static tri_list = [
        [-1, " 強制なし"],
        [0, "無効 に強制"],
        [1, "有効 に強制"],
    ];

    static as_list = [
        [-1, " 強制なし"],
        [0, "OFF に強制"],
        [1, "WEAK に強制"],
        [2, "STRONG に強制"],
    ];

    function get_constraint_menu_list(context, arg)
    {
        var [event, constraint] = arg;
        var tire_list = get_tire_list(context);

        var menuitems = [
            blue,
            RunviewerUtil.CreateSelect(constraint.driving_line, 
                "driving_line", "driving_line を変更します。" , tri_list),
            RunviewerUtil.CreateSelect(constraint.asm, 
                "asm", "asm を変更します。" , tri_list),
            RunviewerUtil.CreateSlider(play_style.tcs, 
                "tcs", "tcs を変更します。" , [-1, 10], nil, ""),
            RunviewerUtil.CreateSlider(play_style.abs, 
                "abs", "abs を変更します。" , [-1, 10], nil, ""),
            RunviewerUtil.CreateSelect(constraint.limit_tire_f, 
                "limit_tire_f", "limit_tire_f を変更します。" , tire_list),
            RunviewerUtil.CreateSelect(constraint.need_tire_f, 
                "need_tire_f", "need_tire_f を変更します。" , tire_list),
            RunviewerUtil.CreateSelect(constraint.limit_tire_r, 
                "limit_tire_r", "limit_tire_r を変更します。" , tire_list),
            RunviewerUtil.CreateSelect(constraint.need_tire_r, 
                "need_tire_r", "need_tire_r を変更します。" , tire_list),
            RunviewerUtil.CreateSelect(constraint.simulation, 
                "simulation", "simulation を変更します。" , tri_list),
            RunviewerUtil.CreateSelect(constraint.active_steering, 
                "active_steering", "active_steering を変更します。" , as_list),
        ];

        menuitems.push(green);
        var tmp = constraint.cars.size;
        menuitems.push(RunviewerUtil.CreateSlider(tmp, 
            "Car の数を変更", "Car の数を変更します。" , 
            [0, 128], nil, "", on_num_changed, constraint.cars)
        );

        menuitems.push(blue);
        for (var i = 0; i < constraint.cars.size; i++)
        {
            menuitems.push(MenuItem(MenuItemTEXT, 
                "Car(#%{i})", "Car(#%{i}) を変更します。", 
                nil, CarSelect::on_update_car, CarSelect::on_car, nil, constraint.cars[i]));
        }


        return menuitems;
    }

    function on_constraint(context, index, menuitem, item, arg)
    {
        var [event, constraint] = arg;
        if (constraint.tcs == nil)
            constraint.tcs = -1;
        
        TopRoot.open_menu(context, menuitem.label, nil, index, 0, 
            nil, [get_constraint_menu_list, [event, constraint]]);
    }

    function on_boost_decide_cb(context, smdata, value)
    {
        var [id, rp] = smdata.arg;
        var param = rp.boost_params;
        param[id] = value;
        rp.setBoostParams(param);
    }

    function on_race_parameter(context, index, menuitem, item, arg)
    {
        var [event, rp] = arg;

        check_execute_gameplan(context);
        
        var menuitems = [
            blue,
            RunviewerUtil.CreateSelect(rp.race_type, 
                "race_type", "race_type を変更します。" , getCandidates(gtengine::RaceType)),


            RunviewerUtil.CreateSelect(rp.start_type, 
                "start_type", "start_type を変更します。" , RaceConfigMenu::start_type_list)),

            RunviewerUtil.CreateSelect(rp.race_type, 
                "complete_type", "complete_type を変更します。" , getCandidates(gtengine::CompleteType)),
            RunviewerUtil.CreateSelect(rp.complete_type, 
                "finish_type", "finish_type を変更します。" , getCandidates(gtengine::FinishType)),
            RunviewerUtil.CreateSelect(rp.flagset, 
                "flagset", "flagset を変更します。" , getCandidates(gtengine::RaceFlagSet)),
            RunviewerUtil.CreateSlider(rp.race_limit_laps, 
                "race_limit_laps", "race_limit_laps を変更します。" , [0, 100], "none", " laps"),
            RunviewerUtil.CreateSlider(rp.race_limit_minute, 
                "race_limit_minute", "race_limit_minute を変更します。" , [0, 100], "none", " min"),
            RunviewerUtil.CreateSlider(rp.time_to_start, 
                "time_to_start", "time_to_start を変更します。" , [0, 100000], "none", " msec", nil, nil, 100, 1000),
            RunviewerUtil.CreateSlider(rp.time_to_finish, 
                "time_to_finish", "time_to_finish を変更します。" , [0, 100000], "none", " msec", nil, nil, 100, 1000),
            RunviewerUtil.CreateSlider(rp.entry_max, 
                "entry_max", "entry_max を変更します。" , [0, 16], "none", " cars"),
            RunviewerUtil.CreateSlider(rp.racers_max, 
                "racers_max", "racers_max を変更します。" , [0, 16], "none", " cars"),
            RunviewerUtil.CreateSlider(rp.boost_params[0], 
                "boost front rate", "前方へのブースト効果（待ってくれる程度）を1フレーム辺りの%で決定します。10%でもかなり効きます。" , [-100, 100], nil, "%", on_boost_decide_cb, [0, rp]),
            RunviewerUtil.CreateSlider(rp.boost_params[2], 
                "boost front start", "前方へのブースト効果（待ってくれる程度）が効き始める距離です。これ以下の距離ではブーストが効きません。" , [0, 200], nil, "m", on_boost_decide_cb, [2, rp]),
            RunviewerUtil.CreateSlider(rp.boost_params[4], 
                "boost front limit", "前方へのブースト効果（待ってくれる程度）が最大になる距離です。この距離を超えると上記RATEのブースト効果になります" , [0, 200], nil, "*10m", on_boost_decide_cb, [4, rp]),
            RunviewerUtil.CreateSlider(rp.boost_params[1], 
                "boost rear rate", "後方へのブースト効果（追いかけてくる程度）を1フレーム辺りの%で決定します。10%でもかなり効きます。" , [-100, 100], nil, "%", on_boost_decide_cb, [1, rp]),
            RunviewerUtil.CreateSlider(rp.boost_params[3], 
                "boost rear start", "後方へのブースト効果（追いかけてくる程度）が効き始める距離です。これ以下の距離ではブーストが効きません。" , [0, 200], nil, "m", on_boost_decide_cb, [3, rp]),
            RunviewerUtil.CreateSlider(rp.boost_params[5], 
                "boost rear limit", "後方へのブースト効果（追いかけてくる程度）が最大になる距離です。この距離を超えると上記RATEのブースト効果になります" , [0, 200], nil, "*10m", on_boost_decide_cb, [5, rp]),
            RunviewerUtil.CreateToggle(rp.keep_load_ghost,
                "keep_load_ghost", "keep_load_ghost を変更します。", noyes_list),
            RunviewerUtil.CreateToggle(rp.keep_load_ghost,
                "immediate_finish", "immediate_finish を変更します。", noyes_list),
            RunviewerUtil.CreateSelect(rp.grid_sort_type, 
                "grid_sort_type", "grid_sort_type を変更します。" , getCandidates(gtengine::GridSortType)),

            RunviewerUtil.CreateToggle(rp.endless,
                "endless", "endless を変更します。", noyes_list),
            RunviewerUtil.CreateSelect(rp.ghost_type, 
                "ghost_type", "ghost_type を変更します。" , getCandidates(gtengine::GhostType)),
            RunviewerUtil.CreateSelect(rp.ghost_presence_type, 
                "ghost_presence_type", "ghost_presence_type を変更します。" , getCandidates(gtengine::GhostPresenceType)),
            RunviewerUtil.CreateToggle(rp.disable_collision,
                "disable_collision", "disable_collision を変更します。", noyes_list),
            RunviewerUtil.CreateSlider(rp.penalty_level, 
                "penalty_level", "penalty_level を変更します。" , [0, 6], nil, " level"),
            RunviewerUtil.CreateToggle(rp.accumulation,
                "accumulation", "accumulation を変更します。", noyes_list),
            RunviewerUtil.CreateToggle(rp.academy_event,
                "academy_event", "academy_event を変更します。", noyes_list),
            RunviewerUtil.CreateToggle(rp.enable_pit,
                "enable_pit", "enable_pit を変更します。", noyes_list),
            RunviewerUtil.CreateToggle(rp.enable_damage,
                "enable_damage", "enable_damage を変更します。", noyes_list),
            RunviewerUtil.CreateToggle(rp.disable_recording_replay,
                "disable_recording_replay", "disable_recording_replay を変更します。", noyes_list),
            RunviewerUtil.CreateSlider(rp.event_goal_v, 
                "event_goal_v", "event_goal_v を変更します。" , [-1, 1000], nil, ""),
            RunviewerUtil.CreateSlider(rp.event_goal_width, 
                "event_goal_width", "event_goal_width を変更します。" , [-1, 1000], nil, ""),
            RunviewerUtil.CreateToggle(rp.fixed_retention,
                "fixed_retention", "fixed_retention を変更します。", noyes_list),
            RunviewerUtil.CreateSlider(rp.initial_retention10, 
                "initial_retention10", "initial_retention10 を変更します。" , [0, 10], nil, " level"),
            RunviewerUtil.CreateSelect(rp.decisive_weather, 
                "decisive_weather", "decisive_weather を変更します。" , getCandidates(gtengine::DecisiveWeather)),
            RunviewerUtil.CreateSlider(rp.weather_total_sec, 
                "weather_total_sec", "weather_total_sec を変更します。" , [10, 1000], nil, " sec"),
            RunviewerUtil.CreateSlider(rp.weather_rate_sec1, 
                "weather_rate_sec1", "weather_rate_sec1 を変更します。" , [10, 1000], nil, " sec"),
            RunviewerUtil.CreateSlider(rp.weather_rate_sec2, 
                "weather_rate_sec2", "weather_rate_sec2 を変更します。" , [10, 1000], nil, " sec"),
            RunviewerUtil.CreateSlider(rp.weather_random_seed, 
                "weather_random_seed", "weather_random_seed を変更します。" , [0, 1000], nil, nil),
            RunviewerUtil.CreateToggle(rp.weather_no_precipitation,
                "weather_no_precipitation", "weather_no_precipitation を変更します。", noyes_list),
            RunviewerUtil.CreateToggle(rp.weather_no_wind,
                "weather_no_wind", "weather_no_wind を変更します。", noyes_list),
            RunviewerUtil.CreateToggle(rp.weather_prec_rain_only,
                "weather_prec_rain_only", "weather_prec_rain_only を変更します。", noyes_list),
            RunviewerUtil.CreateToggle(rp.weather_prec_snow_only,
                "weather_prec_snow_only", "weather_prec_snow_only を変更します。", noyes_list),
            RunviewerUtil.CreateToggle(rp.weather_no_schedule,
                "weather_no_schedule", "weather_no_schedule を変更します。", noyes_list),
            RunviewerUtil.CreateToggle(rp.weather_random,
                "weather_random", "weather_random を変更します。", noyes_list),
            RunviewerUtil.CreateSlider(rp.weather_accel100, 
                "weather_accel100", "weather_accel100 を変更します。" , [0, 1000], nil, "%"),
            RunviewerUtil.CreateSlider(rp.weather_base_celsius, 
                "weather_base_celsius", "weather_base_celsius を変更します。" , [-50, 50], nil, "℃"),
            RunviewerUtil.CreateSlider(rp.weather_min_celsius, 
                "weather_min_celsius", "weather_min_celsius を変更します。" , [0, 15], nil, "℃"),
            RunviewerUtil.CreateSlider(rp.weather_max_celsius, 
                "weather_max_celsius", "weather_max_celsius を変更します。" , [0, 15], nil, "℃"),
        ];

        TopRoot.open_menu(context, menuitem.label, menuitems, index, 0, nil, nil);
    }
}