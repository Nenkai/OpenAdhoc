













module ROOT
{
    attribute fv_checker_;
    attribute fv_courses_max_;
    attribute fv_course_count_;

    method open(context)
    {
        SettingFrame.appear();
        SequenceUtil::pushPage(context, self);
    }

    method close(context)
    {
        var delay_time = SettingFrame.hide();
        SequenceUtil::popPage(context, self, delay_time);
    }

    method getFavoriteMax()
    {
        return self.fv_courses_max_;
    }

    method getFavoriteSize()
    {
        return self.fv_course_count_;
    }

    method getFavoriteCourses()
    {
        var courses = [];
        foreach (|var code, var value| in ROOT.fv_checker_)
        {
            if (value)
                courses.push(code);
        }

        return courses;
    }

    method setFavorite(course_code, is_favorite)
    {
        if (isFavorite(course_code) == is_favorite)
            return;

        self.fv_checker_[course_code] = is_favorite;
        if (is_favorite)
            self.fv_course_count_++;
        else
            self.fv_course_count_--;

        if (self.fv_course_count_ < 0)
            self.fv_course_count_ = 0;

        CourseList.updateFavoriteCount();
    }

    method isFavorite(course_code)
    {
        var v = self.fv_checker[course_code] == true ? true : false;
        return v;
    }

    method reflectFavoriteCourseCount()
    {
        if (self.fv_course_count_ > 0)
            SettingFrame::Pane::ScrolledBody::clip::space::RegistedCourses::vbox::label.text = "%{self.fv_course_count_} / %{self.fv_courses_max_}";
        else
            SettingFrame::Pane::ScrolledBody::clip::space::RegistedCourses::vbox::label.text = "%{COLOR_RED}%{self.fv_course_count_}%{COLOR_DEFAULT} / %{self.fv_courses_max_}";
    }

    method reflect(context)
    {
        var option = GAME_STATUS.user_profile.option;
        var fv_courses = option.getLimitedCourses();
        self.fv_checker_ = [:];
        self.fv_courses_max_ = option.kiosk_limit_course_list.size;
        self.fv_course_count_ = 0;

        foreach (var course in fv_courses)
            ROOT.setFavorite(course, true);

        reflectFavoriteCourseCount();

        SettingFrame::Pane::ScrolledBody::clip::space::LimitCourse::OptionMenu.setIndex(context, 1 - option.kiosk_limit_course);
        SettingFrame::Pane::ScrolledBody::clip::space::FilteringCourseCategory::OptionMenu.setIndex(context, 0);

        var item_off = hidden::None.doCopy();
        item_off.defineAttribute("category", nil);
        SettingFrame::Pane::ScrolledBody::clip::space::FilteringCourseCategory::OptionMenu::popup::vbox.appendChild(context, item_off);

        var focus_index = 0;
        var category_list = SPECDB.executeQuery1C("SELECT DISTINCT CourseCategory FROM COURSE");

        for (var i = 0; i < category_list.size; i++)
        {
            var category = category_list[i];
            var item = hidden::PulldownItem.doCopy();
            item["label"].text = context.translate(ROOT, "CourseData", "CATEGORY_%{category}");
            item["label"].adjustScale();
            item.defineAttribute("category", category);
            SettingFrame::Pane::ScrolledBody::clip::space::FilteringCourseCategory::OptionMenu::popup::vbox.appendChild(context, item);
        }

        SettingFrame::Pane::ScrolledBody::clip::space::FilteringCourseCategory::OptionMenu.applyAppend(context);
        SettingFrame::Pane::ScrolledBody::clip::space::FilteringCourseCategory::OptionMenu.setIndex(context, 0);
    }

    method apply(context)
    {
        var option = main::GAME_STATUS.user_profile.option;
        option.kiosk_limit_course = 1 - SettingFrame::Pane::ScrolledBody::clip::space::LimitCourse::OptionMenu.index;
        
        CourseList::ListWindow::clip::ListBox.apply();
        var courses = ROOT.getFavoriteCourses();
        
        for (var i = 0; i < option.kiosk_limit_course_list.size; i++)
        {
            if (i < courses.size)
                option.kiosk_limit_course_list[i] = courses[i];
            else
                option.kiosk_limit_course_list[i] = gtengine::MSpecDB::NO_CODE;
        }
    }

    method onInitialize(context)
    {
        hidden.visible = false;

        PleaseWait::FadeEffect.reverse = false;
        PleaseWait::FadeEffect.reset();

        reflect(context);
        CourseList.updateFavoriteCount();
        SettingFrame.adjust_scrolled_body();

        ROOT.setFocus(SettingFrame::Pane::ScrolledBody::clip::space::LimitCourse::OptionMenu);
    }

    method onFinalize(context)
    {
        SettingFrame::Pane::ScrolledBody::clip::space::FilteringCourseCategory::OptionMenu::popup::vbox.clearWindow(context);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.apply();
        ROOT.close(context);
        return EVENTRESULT_FILTER;
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::RegistedCourses::vbox::View
    {
        method onActivate(context)
        {
            PleaseWait.begin(context);

            var courses = ROOT.getFavoriteCourses();
            if (courses.size == 0)
            {
                PleaseWait.end(context);
                main::sound.play("disable");
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "MESSAGE_NO_COURSES_REGISTERED"));
                return;
            }

            PleaseWait.end(context);

            SettingFrame.hide();
            SettingFrame.insensitive = true;

            CourseList.open(context, courses);

            SettingFrame.insensitive = false;
            SettingFrame.appear();
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::Regist::vbox::Button
    {
        method onActivate(context)
        {
            PleaseWait.begin(context);

            var query = "SELECT Code FROM t_arcade_course";
            var params = [];

            var item = SettingFrame::Pane::ScrolledBody::clip::space::FilteringCourseCategory::OptionMenu.getItem();
            if (item.category != nil)
            {
                query += " WHERE Category=?";
                params.push(item.category);
            }

            query += " ORDER BY SortOrder";
            var courses = MENUDB.executeQuery1C(query, params);
            
            if (courses.size == 0)
            {
                PleaseWait.end(context);
                main::sound.play("disable");
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "MESSAGE_COURSE_NOT_FOUND"));
                return;
            }

            PleaseWait.end(context);
            SettingFrame.hide();
            SettingFrame.insensitive = true;

            CourseList.open(context, courses);

            SettingFrame.insensitive = false;
            SettingFrame.appear();
            return EVENTRESULT_FILTER;
        }
    }

    module PleaseWait
    {
        method begin(context)
        {
            PleaseWait::FadeEffect.reverse = false;
            PleaseWait::FadeEffect.start();
        }

        method end(context)
        {
            context.wait(0.5f);

            PleaseWait::FadeEffect.reverse = true;
            PleaseWait::FadeEffect.start();
        }
    }

    module CourseList
    {
        attribute prev_focus_;

        method onInitialize(context)
        {
            self.insensitive = true;
            self.CloseActor.stop();
            self.OpenActor.reset();

            self.ButtonHelpGT6.set(context, [
                ["Square", manager.translate(ROOT, "LABEL_REGISTER_ALL")],
                ["Triangle", manager.translate(ROOT, "LABEL_CLEAR_ALL")],
            ]);
        }

        method open(context, courses)
        {
            ListWindow::clip::ListBox.setItem(context, courses);
            self.CloseActor.stop();
            self.OpenActor.restart();

            self.insensitive = false;
            self.prev_focus_ = ROOT.getFocusWidget();
            ROOT.setFocus(ListWindow::clip::ListBox);

            SequenceUtil::enterEventLoop(context, self);
            ROOT.reflectFavoriteCourseCount();
            ROOT.setFocus(self.prev_focus_);

            self.prev_focus_ = nil;
            self.insensitive = true;
            self.OpenActor.stop();
            self.CloseActor.restart();
        }

        method onCancel(context)
        {
            SequenceUtil::leaveEventLoop(context, self);
            return EVENTRESULT_FILTER;
        }

        method updateFavoriteCount()
        {
            var w = ListWindow::Head::FavoriteCount;
            w.label_L.text = ROOT.getFavoriteSize();
            w.label_S.text = "/" + ROOT.getFavoriteMax();
        }
    

        module ListWindow::clip::ListBox
        {
            attribute courses_;
            attribute check_active_ = false;

            method setItem(context, courses)
            {
                self.setItemCount(0);
                self.postRedraw();
                context.wait();

                self.courses_ = courses;
                self.setItemTemplate(context, hidden::CourseItem);
                self.setItemCount(courses.size);
            }

            method apply()
            {
                for (var i = 0; i < self.getItemCount(); i++)
                {
                    var item = self.getItemWidget(i);
                    if (item != nil)
                        ROOT.fv_checker_[item.course_code] = item.CheckBox.active;
                }
            }

            method onVisibleNotify(context, indexes)
            {
                foreach (var i in indexes)
                {
                    if (self.getItemVisible(i))
                    {
                        var item = self.getItemWidget(i);
                        if (item == nil)
                        {
                            item = self.getItemWidget(i, context);
                            item.init(context, self.courses_[i], i + 1);
                        }
                    }
                }
            }

            method onKeyPress(context, event)
            {
                var status = 0;
                var skip_span = 5;

                if (event.keysym == CELL_PAD_CTRL_TRIANGLE)
                {
                    foreach (var course in self.courses_)
                        ROOT.setFavorite(course, false);

                    for (var i = 0; i < self.getItemCount(); i++)
                    {
                        var item = self.getItemWidget(i);
                        if (item != nil)
                            item.init(context, self.courses_[i], i + 1);
                    }

                    return EVENTRESULT_FILTER;
                }

                if (event.keysym == CELL_PAD_CTRL_SQUARE)
                {
                    var add_size = 0;
                    foreach (var course in self.courses_)
                    {
                        if (!ROOT.isFavorite(course))
                            add_size++;
                    }

                    if (ROOT.getFavoriteSize() + add_size <= ROOT.getFavoriteMax())
                    {
                        foreach (var course in self.courses_)
                            ROOT.setFavorite(course, true);

                        for (var i = 0; i < self.getItemCount(); i++)
                        {
                            var item = self.getItemWidget(i);
                            if (item != nil)
                                item.init(context, self.courses_[i], i + 1);
                        }

                        return EVENTRESULT_FILTER;
                    }
                    else
                    {
                        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(FavoriteCarRoot, "MESSAGE_SIZE_OVER"));
                        return EVENTRESULT_FILTER;
                    }
                }

                if (event.keysym == CELL_PAD_CTRL_L3_RIGHT)
                {
                    var next_index = ListBox.focus_index;
                    next_index += skip_span;

                    if (next_index > ListBox.getItemCount() - 1)
                        next_index = ListBox.getItemCount() - 1;

                    if (ListBox.focus_index != next_index)
                        main::sound.play("cursor");

                    ListBox.focus_index = next_index;
                    return EVENTRESULT_FILTER;
                }

                if (event.keysym == CELL_PAD_CTRL_L3_LEFT)
                {
                    var next_index = ListBox.focus_index;
                    next_index -= skip_span;

                    if (next_index < 0)
                        next_index = 0;

                    if (ListBox.focus_index != next_index)
                        main::sound.play("cursor");

                    ListBox.focus_index = next_index;
                    return EVENTRESULT_FILTER;
                }

                if (event.keysym == CELL_PAD_CTRL_L3_UP || event.keysym == CELL_PAD_CTRL_L3_DOWN)
                {
                    var assign = main::pdiext::MSystemConfiguration::GetEnterButtonAssign();

                    var key;
                    if (assign == "circle")
                        key = 0x80;
                    else
                        key = 0x20;

                    var state = context.getUpdateContext().getPadButtonState(0);
                    if (state & key)
                    {
                        var idx;
                        if (event.keysym == CELL_PAD_CTRL_L3_UP)
                            idx = self.focus_index - 1;
                        else if (event.keysym == CELL_PAD_CTRL_L3_DOWN)
                            idx = self.focus_index + 1;

                        var item = self.getItemWidget(idx);
                        if (item != nil)
                        {
                            if (self.check_active_)
                            {
                                if (!item.CheckBox.active)
                                {
                                    if (ROOT.getFavoriteSize() < ROOT.getFavoriteMax())
                                    {
                                        item.CheckBox.active = true;
                                        ROOT.setFavorite(item.course_code, true);
                                    }
                                    else
                                    {
                                        main::sound.play("disable");
                                    }
                                }
                            }
                            else
                            {
                                item.CheckBox.active = false;
                                ROOT.setFavorite(item.course_code, false);
                            }
                        }
                    }
                }

                return EVENTRESULT_CONTINUE;
            }

            method onActivate(context)
            {
                var item = self.getItemWidget(self.focus_index);
                if (!item.CheckBox.active)
                {
                    if (ROOT.getFavoriteSize() < ROOT.getFavoriteMax())
                    {
                        item.CheckBox.active = true;
                        self.check_active_ = true;
                        ROOT.setFavorite(item.course_code, true);
                    }
                    else
                    {
                        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, "list size over");
                    }
                }
                else
                {
                    item.CheckBox.active = false;
                    self.check_active_ = false;
                    ROOT.setFavorite(item.course_code, false);
                }

                return EVENTRESULT_FILTER;
            }
        }
    }

    module hidden::CourseItem
    {
        attribute course_code;

        method init(context, course_code, num)
        {
            self.course_code = course_code;

            var info = main::SPECDB.query1("SELECT Name, ChangeWeather, ChangeTime, Logo, Reverse, Length FROM COURSE WHERE ID=?", [course_code]);
            self.Number::Label.text = num;
            self.Logo.image_path = "piece/gt6/course_logo_M/%s.img".format(info.Logo);
            self.Name::Label.text = manager.translate("CourseName", info.Name);

            var list = [];
            if (info.Reverse)
                list.push(manager.translate("CourseData", "direction_reverse"));
            else
                list.push(manager.translate("CourseData", "direction_normal"));

            if (info.ChangeWeather)
                list.push(manager.translate("CourseData", "track_change_weather"));

            if (info.ChangeTime)
                list.push(manager.translate("CourseData", "track_change_time"));

            self.Type::Label.text = list.join(" / ");
            self.Length::Label.text = pdiext::MUnit::GetCourseLengthString(info.Length, true);
            self.CheckBox.active = ROOT.isFavorite(course_code);
        }
    }
}