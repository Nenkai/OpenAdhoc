//---------------------------------------------------------------------------------------
// TuningDialog.ad
//
// Dialog/modal with part details & spec compare when applying a part
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

#ifndef PARTS_TYPE_BRAKE
    #define PARTS_TYPE_BRAKE 1
    #define PARTS_TYPE_BRAKECONTROLLER 2
    #define PARTS_TYPE_SUSPENSION 3
    #define PARTS_TYPE_ASCC 4
    #define PARTS_TYPE_TCSC 5
    #define PARTS_TYPE_CHASSIS 6
    #define PARTS_TYPE_RACINGMODIFY 7
    #define PARTS_TYPE_LIGHTWEIGHT 8
    #define PARTS_TYPE_STEER 9
    #define PARTS_TYPE_DRIVETRAIN 10
    #define PARTS_TYPE_GEAR 11
    #define PARTS_TYPE_ENGINE 12
    #define PARTS_TYPE_NATUNE 13
    #define PARTS_TYPE_TURBINEKIT 14
    #define PARTS_TYPE_PORTPOLISH 15
    #define PARTS_TYPE_ENGINEBALANCE 16
    #define PARTS_TYPE_DISPLACEMENT 17
    #define PARTS_TYPE_COMPUTER 18
    #define PARTS_TYPE_INTERCOOLER 19
    #define PARTS_TYPE_MUFFLER 20
    #define PARTS_TYPE_CLUTCH 21
    #define PARTS_TYPE_FLYWHEEL 22
    #define PARTS_TYPE_PROPELLERSHAFT 23
    #define PARTS_TYPE_LSD 24
    #define PARTS_TYPE_FRONTTIRE 25
    #define PARTS_TYPE_REARTIRE 26
    #define PARTS_TYPE_NOS 27
    #define PARTS_TYPE_SUPERCHARGER 28
    #define PARTS_TYPE_WHEEL 29
    #define PARTS_TYPE_WING 30
    #define PARTS_TYPE_TIRESIZE 31
    #define PARTS_TYPE_TIRECOMPOUND 32

    #define PARTS_TYPE_TUNE_MAX 32

    #define PARTS_CATEGORY_NONE 0
#endif


module PROJECT::ROOT
{
#ifdef GT4O_US_BETA
    static result;
    static original_y = Pane.y;
    static current_type;
    static current_category;
    static current_price;
#else
    static result = nil;
    static original_y = Pane.y;
    static current_type = nil;
    static current_category = nil;
    static current_price = nil;
#endif

    function onInitialize(context)
    {
        var cg = TuningApplyRoot::current_car;
        cg.updateCurrentStatus();

        Pane::Title::label.text = context.translate(TuningApplyRoot, getPartsShopName(current_type, current_category));
        var kg = current_type == PARTS_TYPE_LIGHTWEIGHT;
        ; // NOTE: Stray NOP

        var value = kg ? cg.getCurrentWeight() : cg.getCurrentPower();
        if (value <= 0)
            Pane::Effect::before.text = "--";
        else
            Pane::Effect::before.text = value.toString();

        Pane::Effect::ps0.text = kg ? main::menu::MUnit::GetUnitOfMass() : main::menu::MUnit::GetUnitOfPower();
        // NOTE: Two stray NOPs
        ;
        ;

        var new_cg = main::menu::MCarGarage();
        new_cg.copyFrom(cg);



        if (current_type < PARTS_TYPE_TUNE_MAX)
        {
            new_cg.getParts(current_type, current_category);
            if (current_type == PARTS_TYPE_FRONTTIRE)
                new_cg.getParts(PARTS_TYPE_REARTIRE, current_category);

            TuningApplyRoot::set_parts_consistent(new_cg, current_type, current_category);
            new_cg.updateCurrentStatus();
        }

        value = kg ? new_cg.getCurrentWeight() : new_cg.getCurrentPower();
        if (value <= 0)
            Pane::Effect::after.text = "--";
        else
            Pane::Effect::after.text = value.toString();

        Pane::Effect::ps1.text = kg ? main::menu::MUnit::GetUnitOfMass() : main::menu::MUnit::GetUnitOfPower();
        ; // Stray NOP

        if (Pane::Effect::after.text == Pane::Effect::before.text)
        {
            var gray = Pane::Effect::ps0.color;
            Pane::Effect::before.color = gray;
            Pane::Effect::after.color = gray;
        }
        else
        {
            var black = Pane::Price::price.color;
            Pane::Effect::before.color = black;
            Pane::Effect::after.color = black;
        }

        Pane::Price::price.text = "Cr. " + main::menu::MUtility::GetMoneyString(current_price);
        Pane::Money::money.text = "Cr. " + main::game.money;
        Pane::Money::money_red.text = "Cr. " + main::game.money;

        var enough = main::game.isEnoughMoney(current_price);
        Pane::Money.active = !enough;
        Pane::Buttons::Buy.insensitive = !enough;
        ROOT.setFocus(Pane::Buttons::Cancel);
    }

    function onFinalize(context)
    {
        current_type = nil;
        current_category = nil;
        current_price = nil;
    }

    function open(context, type, category, price)
    {
        context.cursor_visible = false;

        current_type = type;
        current_category = category;
        current_price = price;

        Pane.y = PS2_SCREEN_H_F;
        Pane.opacity = 0.0;
        context.pushPage(ROOT);

        while (!Pane.interpolateY(original_y, 0.2))
        {
            var diff = 1.0 - Pane.opacity;
            Pane.opacity = Pane.opacity + (diff * 0.1);
            context.sync();
        }

        Pane.opacity = 1.0;
        context.cursor_visible = true;
        context.getUpdateContext().enterEventLoop();
        return result;
    }

    function close(context)
    {
        context.cursor_visible = false;

        var target;
        if (result)
            target = -Pane.h;
        else
            target = PS2_SCREEN_H_F;

        Pane.opacity = 1.0;

        while (!Pane.interpolateY(target, 0.2))
        {
            var diff = 0.0 - Pane.opacity;
            Pane.opacity = Pane.opacity + (diff * 0.3);
            context.sync();
        }

        Pane.opacity = 0.0;
        context.closePage(ROOT);
        context.getUpdateContext().leaveEventLoop();
        context.cursor_visible = true;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        result = false;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Buttons::Cancel
{
    function onActivate(context)
    {
        main::sound.play("cancel");
        result = false;
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Buttons::Buy
{
    function onActivate(context)
    {
        main::sound.play("buy");
        result = true;
        close(context);
        return EVENTRESULT_FILTER;
    }
}