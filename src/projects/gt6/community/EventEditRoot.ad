













module ROOT
{
    hidden.visible = false;

    attribute popup;
    attribute closed = false;
    attribute result;
    attribute club;
    attribute event;
    attribute photo;
    attribute gp;
    attribute now;
    attribute original_title;
    attribute original_description;
    
    class Data
    {
        attribute title;
        attribute description;
        attribute regulation;
        attribute start_time;
        attribute end_time;
        attribute activity;
        attribute image_id;
        attribute bbs_comment;
        attribute mode;
        attribute ranking_board_id;
        attribute open;
    }

    function verify(context, gp)
    {
        var data = Data();
        if (gp == nil)
        {
            ERROR(context, "Community", "NO_EVENT_GP");
            return nil;
        }

        data.regulation = EventSettingUtil::serializeSetting(gp);
        data.start_time = getTime(context, ScrolledWindow::clip::space::VBox::Duration::VBox::Start);
        data.end_time = getTime(context, ScrolledWindow::clip::space::VBox::Duration::VBox::End);

        if (data.end_time <= data.start_time)
        {
            ERROR(context, "Community", "NO_EVENT_START_END");
            return nil;
        }
        
        if (!isReadOnly(data.start_time))
        {
            var now0 = getFormatedDateTime(pdiext::getBetterTime());
            if (data.start_time < now0)
            {
                ERROR(context, "Community", "ERROR_START_DATE_IN_PAST");
                return nil;    
            }
        }

        var title = ScrolledWindow::clip::space::VBox::Title::VBox::InputTextBox::Text::input.value;
        if (title == "")
        {
            ERROR(context, "Community", "NO_EVENT_TITLE");
            return nil;    
        }

        |var filter_title_res, var sanitized_title| = filterText(context, title, true);
        if (!filter_title_res)
            return nil;

        data.title = sanitized_title;
        var description = ScrolledWindow::clip::space::VBox::Description::VBox::InputTextBox::Text::input.value;

        if (description == "")
        {
            ERROR(context, "Community", "NO_EVENT_DESCRIPTION");
            return nil;
        }

        |var filter_description_res, var sanitized_description| = filterText(context, description, true);
        if (!filter_description_res)
            return nil;

        data.description = sanitized_description;

        data.activity = ScrolledWindow::clip::space::VBox::Notice_Edit::VBox::CheckButton::Check.active ? 1 : 0;
        data.bbs_comment = "";
        data.image_id = 0;
        data.mode = 1;
        data.ranking_board_id = 0;
        data.open = 1;
        return data;
    }

    function getFormatedDateTime(mtime)
    {
        return "%4d-%02d-%02dT%02d:%02d:00Z".format(mtime.year, mtime.month, mtime.day, mtime.hour, mtime.minute);
    }
    
    function getTime(context, target)
    {
        |var year, var month| = target.yyyy_mm_list[target.YearMonth::OptionMenu.index];
        var day = target.Day::OptionMenu.getItem().label.text;
        |var hour, var minute| = target.hh_mm_list[target.HourMinute::OptionMenu.index];

        var time = pdistd::MTime();
        time.year = year.toInt();
        time.month = month.toInt();
        time.day = day.toInt();
        time.hour = hour.toInt();
        time.minute = minute.toInt();
        
        var gmt = time.toGMT();
        return getFormatedDateTime(gmt);
    }

    function updatePhoto(context, club_id, club_event_id, photo)
    {
        if (photo == nil)
            return true;

        if (!pdistd::Exist(photo.filename_t))
            return true;

        var jpg = pdistd::ReadFile(photo.filename_t);
        var request = Community.requestUpdateEventImage(club_id, club_event_id, jpg["buffer"], function(args) {});
        var res = Grim2Util::joinAwait(context, request);
        return res;
    }

    function isReadOnly(date_time)
    {
        return ROOT.event != nil && date_time < ROOT.now;
    }

    method open(context, club, event)
    {
        self.club = club;
        self.event = event;
        self.gp = nil;
        self.photo = nil;
        self.result = nil;
        self.closed = false;
        self.popup = SequenceUtil::ModalPage(context, ROOT);
        self.popup.open();

        var res = self.result;
        self.result = nil;
        return res;
    }

    method close(context)
    {
        Community.clearCallback();
        if (self.closed)
            return;

        self.closed = true;
        FadeActor.out = true;

        if (self.popup != nil)
        {
            self.popup.close(FadeActor.period);
            self.popup = nil;
        }

        self.photo = nil;
        self.gp = nil;
        self.original_title = nil;
        self.original_description = nil;
    }

    method onCancel(context, event, item)
    {
        sound.play("cancel");
        if (self.event != nil)
            self.setFocus(ScrolledWindow::clip::space::VBox::About_Edit::Cancel);
        else
            self.setFocus(ScrolledWindow::clip::space::VBox::About_Add::Cancel);
        return EVENTRESULT_FILTER;
    }

    method onInitialize(context)
    {
        var edit_mode = self.event != nil;
        ScrolledWindow::clip::space::VBox::About_Edit.visible = edit_mode;
        ScrolledWindow::clip::space::VBox::About_Add.visible = !edit_mode;
        ScrolledWindow::clip::space::VBox::Notice_Edit.visible = edit_mode;
        ScrolledWindow::clip::space::VBox::Notice_Add.visible = !edit_mode;
        ScrolledWindow::clip::space::VBox::Delete.visible = edit_mode;

        var title = "";
        var description = "";
        var photo_id = "";
        var start_time;
        var end_time;

        self.now = pdiext::getBetterTimeLocal();

        if (self.event != nil)
        {
            title = list2text(self.event["title_list"]);
            description = list2text(self.event["description_list"]);
            start_time = localtime(self.event["start_time"]);
            end_time = localtime(self.event["end_time"]);
            photo_id = self.event["photo_id"];
            self.gp = PROJECT::regulation2gp(self.event["regulation"]);
        }
        else
        {
            start_time = self.now;
            end_time = self.now;
        }

        self.original_title = title;
        self.original_description = description;
        
        ScrolledWindow::clip::space::VBox::Title::VBox::InputTextBox::Text::input.value = title;
        ScrolledWindow::clip::space::VBox::Title::VBox::InputTextBox::Text::input.setCount(context, title.length);

        ScrolledWindow::clip::space::VBox::Description::VBox::InputTextBox::Text::input.value = description;
        ScrolledWindow::clip::space::VBox::Description::VBox::InputTextBox::Text::input.setCount(context, description.length);

        ScrolledWindow::clip::space::VBox::Notice_Edit::VBox::CheckButton::Check.active = false;
        ScrolledWindow::clip::space::VBox::Regulation::VBox.updateState(context);

        initializeDateTime(context, "Start", start_time);
        initializeDateTime(context, "End", end_time);

        setImage(ScrolledWindow::clip::space::VBox::Photo::SBox::ImageFace, photo_id);

        if (self.event != nil)
            self.setFocus(ScrolledWindow::clip::space::VBox::About_Edit::Cancel);
        else
            self.setFocus(ScrolledWindow::clip::space::VBox::About_Add::Cancel);

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        foreach (var name in ["Start", "End"])
        {
            var target = ScrolledWindow::clip::space::VBox::Duration::VBox[name];
            OptionMenuUtil::finalize(context, target.YearMonth::OptionMenu);
            OptionMenuUtil::finalize(context, target.Day::OptionMenu);
            OptionMenuUtil::finalize(context, target.HourMinute::OptionMenu);
        }
        
        return EVENTRESULT_FILTER;
    }

    method onUpdate(context)
    {
        if (self.closed)
            return;

        if (!LoginUtil::isOnline())
        {
            context.pushEvent(menu::MFunctionEvent(close, context));
        }
    }

    method initializeDateTime(context, name, time)
    {
        var target = ScrolledWindow::clip::space::VBox::Duration::VBox[name];
        target.date_time = time;
        target.initialized = false;

        var yyyy_mm_list = [];

        if (self.event != nil && time < self.now)
        {
            yyyy_mm_list.push([time.year, time.month]);
        }
        else
        {
            for (var i = 0; i < 3; ++i)
            {
                var year = now.year;
                var month = now.month + i;
                if (month > 12)
                {
                    ++year;
                    month = month % 12;
                }

                yyyy_mm_list.push([year, month]);
            }
        }

        var year_month_format = manager.translate("DateTime", "FORMAT_YEAR_MONTH");
        var year_month_index = 0;
        var year_month_list = [];

        foreach (|var year, var month| in yyyy_mm_list)
        {
            if (year == time.year && month == time.month)
                year_month_index = year_month_list.size;

            var text = year_month_format.build(year,
                manager.translate("DateTime", "MONTH_SHORT_%02d".format(month)));
            year_month_list.push(text);
        }

        target.yyyy_mm_list = yyyy_mm_list;
        OptionMenuUtil::initialize(context, self, target.YearMonth::OptionMenu, hidden::PulldownItem, year_month_list);

        target.YearMonth::OptionMenu.setIndex(context, year_month_index);
    }

    module ScrolledWindow::clip::space::VBox::About_Add
    {
        method onCancel(context)
        {
            sound.play("cancel");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method onActivate(context)
        {
            sound.play("ok");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module ScrolledWindow::clip::space::VBox::About_Edit
    {
        method onCancel(context)
        {
            sound.play("cancel");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method onActivate(context)
        {
            sound.play("ok");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module ScrolledWindow::clip::space::VBox::Regulation::VBox
    {
        method onInitialize()
        {
            New.visible = ROOT.gp == nil;
            Load.visible = true;
            Info.visible = false;
        }

        method onFinalize()
        {
            Info.visible = false;
        }

        method updateState(context, new_gp)
        {
            if (new_gp != nil)
            {
                ROOT.gp = new_gp;
            }

            New.visible = ROOT.gp == nil;
            TextFace0.visible = Load.visible;
            
            if ((!Info.visible && ROOT.gp != nil) || new_gp != nil)
            {
                Info.updateInfo(context);
            }

            Info.visible = ROOT.gp != nil;
        }

        module Load
        {
            method onActivate(context)
            {
                sound.play("ok");

                var club_id = ROOT.club["club_id"];
                var gp = OnlineRoomUtil::loadEventSetting(context);
                self.parent.updateState(context, gp);
                return EVENTRESULT_FILTER;
            }
        }

        module New
        {
            method onActivate(context)
            {
                sound.play("ok");

                var gp = OnlineRoomUtil::createEventSetting(context, ROOT.club["club_id"]);
                self.parent.updateState(context, gp);

                if (Info.visible)
                {
                    ROOT.setFocus(Info);
                }

                return EVENTRESULT_FILTER;
            }
        }

        module Info
        {
            method onActivate(context)
            {
                sound.play("ok");

                var gp = OnlineRoomUtil::editEventSetting(context, ROOT.gp);

                if (gp != nil)
                {
                    ROOT.gp = gp;
                    self.updateInfo(context);
                }

                return EVENTRESULT_FILTER;
            }

            method updateInfo(context)
            {
                var rc = gtengine::MRoomConfig(ROOT.gp);
                Info.setVisibilityLevel(1);
                Info.setColor(2);
                Info.setInfo(context, rc.createRoomInformation());
                Info.deactivateAllMode();
            }
        }
    }


    module ScrolledWindow::clip::space::VBox::Title::VBox::InputTextBox::Text::input
    {
        method setCount(context, count)
        {
            InputTextBox::Count.text = "%d / %d".format(count, 30);
        }

        method onTextClose(context, event)
        {
            setCount(context, self.value.length);
            return EVENTRESULT_CONTINUE;
        }

        method onKeyRelease(context, event)
        {
            // Backspace, or delete
            if (event.keysym == CELL_PAD_CTRL_SQUARE || event.keysym == 0xFF08  || event.keysym == 0xFFFF)
            {
                setCount(context, self.value.length);
            }

            return EVENTRESULT_CONTINUE;
        }
    }

    module ScrolledWindow::clip::space::VBox::Description::VBox::InputTextBox::Text::input
    {
        method setCount(context, count)
        {
            InputTextBox::Count.text = "%d / %d".format(count, 140);
        }

        method onTextClose(context, event)
        {
            setCount(context, self.value.length);
            return EVENTRESULT_CONTINUE;
        }

        method onKeyRelease(context, event)
        {
            // Backspace, or delete
            if (event.keysym == CELL_PAD_CTRL_SQUARE || event.keysym == 0xFF08  || event.keysym == 0xFFFF)
            {
                setCount(context, self.value.length);
            }

            return EVENTRESULT_CONTINUE;
        }
    }

    module ScrolledWindow::clip::space::VBox::Photo
    {
        method onActivate(context)
        {
            sound.play("ok");

            var photo = GTModeProject::ReplayListRoot.open(context, GTModeProject::ReplayListRoot::MODE::PHOTO);
            if (photo == nil)
                return EVENTRESULT_FILTER;

            ScrolledWindow::clip::space::VBox::Photo::SBox::ImageFace.image_path = photo.filename_t;
            ROOT.photo = photo;
            return EVENTRESULT_FILTER;
        }
    }

    module ScrolledWindow::clip::space::VBox::Duration
    {
        method isLeapYear(year)
        {
            return (year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0);
        }

        method setupDay(context, target)
        {
            var day_index = 0;
            var dd_list = [];
            var day_list = [];

            if (isReadOnly(target.date_time))
            {
                var text = "DAY_%02d".format(target.date_time.day);
                dd_list.push(target.date_time.day);
                day_list.push(text);
            }
            else
            {
                |var year, var month| = target.yyyy_mm_list[target.YearMonth::OptionMenu.index];

                var max_day_def = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                var max_day = max_day_def[month];
                if (month == 2 && isLeapYear(year))
                    ++max_day;

                var begin_day = 1;
                if (year == ROOT.now.year && month == ROOT.now.month)
                    begin_day = ROOT.now.day;

                for (var i = begin_day; i <= max_day; ++i)
                {
                    if (i == target.date_time.day)
                        day_index = dd_list.size;

                    
                    var text = "DAY_%02d".format(i);
                    dd_list.push(i);
                    day_list.push(text);
                }
            }   

            target.dd_list = dd_list;
            OptionMenuUtil::finalize(context, target.Day::OptionMenu);
            OptionMenuUtil::initialize(context, self, target.Day::OptionMenu, hidden::PulldownItem, day_list, "DateTime");
            target.Day::OptionMenu.setIndex(context, day_index);
        }

        method setupHourMinute(context, target)
        {
            |var year, var month| = target.yyyy_mm_list[target.YearMonth::OptionMenu.index];
            var day = target.dd_list[target.Day::OptionMenu.index];
            var now0 = pdiext::getBetterTimeLocal();

            var today = now0.year == year && now0.month == month && now0.day == day;
            var hh_mm_list = [];

            if (isReadOnly(target.date_time))
            {
                hh_mm_list.push([target.date_time.hour, target.date_time.minute]);
            }
            else
            {
                var threshold = now0.hour * 60 + now0.minute;
                
                for (var hour = 0; hour < 24; ++hour)
                {
                    for (var minute10 = 0; minute10 < 6; ++minute10)
                    {
                        var minute = minute10 * 10;
                        if (today)
                        {
                            if (hour * 60 + minute < threshold)
                                continue;
                        }

                        hh_mm_list.push([hour, minute]);
                    }
                }
            }

            var hour_minute_index = 0;
            var hour_minute_list = [];
            var target_hour = target.initialized ? 0 : target.date_time.hour;
            var target_minute = target.initialized ? 0 : target.date_time.minute;

            foreach (|var hour, var minute| in hh_mm_list)
            {
                if (hour == target_hour && minute == target_minute)
                    hour_minute_index = hour_minute_list.size;

                var text = "%02d:%02d".format(hour, minute);
                hour_minute_list.push(text);
            }

            target.hh_mm_list = hh_mm_list;
            OptionMenuUtil::finalize(context, target.HourMinute::OptionMenu);
            OptionMenuUtil::initialize(context, self, target.HourMinute::OptionMenu, hidden::PulldownItem, hour_minute_list);
            target.HourMinute::OptionMenu.setIndex(context, hour_minute_index);
            target.initialized = true;
        }

        module VBox::Start
        {
            attribute date_time;
            attribute yyyy_mm_list;
            attribute dd_list;
            attribute hh_mm_list;
            attribute initialized;

            module YearMonth::OptionMenu
            {
                attribute previous_index = -1;

                method onValueChanged(context)
                {
                    __prototype__::onValueChanged(context);

                    if (self.previous_index != self.index)
                    {
                        self.previous_index = self.index;
                        ScrolledWindow::clip::space::VBox::Duration.setupDay(context, Start);
                    }
                }
            }

            module Day::OptionMenu
            {
                attribute previous_index = -1;

                method onValueChanged(context)
                {
                    __prototype__::onValueChanged(context);

                    if (self.previous_index != self.index)
                    {
                        self.previous_index = self.index;
                        ScrolledWindow::clip::space::VBox::Duration.setupHourMinute(context, Start);
                    }
                }
            } 
        }

        module VBox::End
        {
            attribute date_time;
            attribute yyyy_mm_list;
            attribute dd_list;
            attribute hh_mm_list;
            attribute initialized;

            module YearMonth::OptionMenu
            {
                attribute previous_index = -1;

                method onValueChanged(context)
                {
                    __prototype__::onValueChanged(context);

                    if (self.previous_index != self.index)
                    {
                        self.previous_index = self.index;
                        ScrolledWindow::clip::space::VBox::Duration.setupDay(context, End);
                    }
                }
            }

            module Day::OptionMenu
            {
                attribute previous_index = -1;

                method onValueChanged(context)
                {
                    __prototype__::onValueChanged(context);

                    if (self.previous_index != self.index)
                    {
                        self.previous_index = self.index;
                        ScrolledWindow::clip::space::VBox::Duration.setupHourMinute(context, End);
                    }
                }
            } 
        }
    }

    module ScrolledWindow::clip::space::VBox::Notice_Add
    {
        method onActivate(context)
        {
            sound.play("ok");

            var event = ROOT.event;
            var data = verify(context, ROOT.gp);
            if (data == nil)
                return EVENTRESULT_FILTER;

            var club_id = ROOT.club["club_id"];

            var request = Community.requestCreateEvent(club_id,
                data.open,
                data.title, 
                data.description, 
                data.image_id, 
                data.bbs_comment, 
                data.regulation, 
                data.mode,
                data.ranking_board_id,
                data.start_time,
                data.end_time,
                function(args) {});

            if (!Grim2Util::joinAwait(context, request))
            {
                GENERIC_RESULT(context, false);
                checkGrimSession(context);
                return EVENTRESULT_FILTER;
            }

            var club_event_id = Community.decodeResultLong(request);
            if (club_event_id == 0xFFFFFFFFFFFFFFFF)
            {
                ERROR(context, "Community", "ERROR_CLUB_EVENT_MAX", 10);
                return EVENTRESULT_FILTER;
            }

            var res = updatePhoto(context, club_id, club_event_id, ROOT.photo);
            GENERIC_RESULT(context, res);

            if (res)
            {
                PUTLOG_LOCAL::event("create", club_id, club_event_id);
                ROOT.result = "add";
                ROOT.close(context);
            }

            return EVENTRESULT_FILTER;
        }
    }

    module ScrolledWindow::clip::space::VBox::Notice_Edit::VBox::Ok
    {
        method onActivate(context)
        {
            sound.play("ok");

            var event = ROOT.event;
            var data = verify(context, ROOT.gp);
            if (data == nil)
                return EVENTRESULT_FILTER;

            var club_id = ROOT.club["club_id"];
            var club_event_id = event["club_event_id"];
            var res = false;
            var title_changed = data.title != ROOT.original_title;
            var description_changed = data.description != ROOT.original_description;

            var request = Community.requestUpdateEvent(club_id,
                club_event_id,
                data.open,
                data.title, 
                data.description, 
                data.image_id, 
                data.regulation, 
                data.start_time, 
                data.end_time,
                data.activity,
                title_changed,
                description_changed,
                function(args) {});

            if (Grim2Util::joinAwait(context, request))
            {
                res = updatePhoto(context, club_id, club_event_id, ROOT.photo);
            }

            GENERIC_RESULT(context, res);
            if (res)
            {
                ROOT.result = "update";
                ROOT.close(context);
            }
            else
            {
                checkGrimSession(context);
            }

            return EVENTRESULT_FILTER;
        }
    }

    module ScrolledWindow::clip::space::VBox::Delete
    {
        method onActivate(context)
        {
            sound.play("ok");

            if (!QUERY(context, "Community", "QUERY_DELETE_EVENT"))
                return EVENTRESULT_FILTER;

            var event = ROOT.event;
            var club_id = event["club_id"];
            var club_event_id = event["club_event_id"];

            var request = Community.requestDeleteEvent(club_id, club_event_id, function(args) {});
            var res = Grim2Util::joinAwait(context, request);
            GENERIC_RESULT(context, res);

            if (res)
            {
                PUTLOG_LOCAL::event("delete", club_id, club_event_id);
                ROOT.result = "delete";
                ROOT.close(context);
            }
            else
            {
                checkGrimSession(context);
            }

            return EVENTRESULT_FILTER;
        }
    }
}