













module ROOT
{
    static sShopGenre;
    static sPrevPage;

    function open(context, shop_genre)
    {
        sPrevPage = context.getRootWindow();
        sShopGenre = shop_genre;
        CursorProject::StartMenuRoot::StartMenu.setInsensitiveMenus([["Tuning", true]]);
        SequenceUtil::enableStartMenuRoot();
        SequenceUtil::enableSceneFaceRoot();
        SequenceUtil::startPageSimple(context, ROOT);
    }

    function openTuningPartsShop(context)
    {
        open(context, SHOP_GENRE::TUNING_PARTS);
    }

    function openCustomPartsShop(context)
    {
        open(context, SHOP_GENRE::CUSTOM_PARTS);
    }

    function openPaintShop(context)
    {
        open(context, SHOP_GENRE::PAINT);
    }

    function openRacingGearShop(context)
    {
        open(context, SHOP_GENRE::RACING_GEAR);
    }

    function openPitService(context)
    {
        open(context, SHOP_GENRE::PIT_SERVICE);
    }

    function close(context)
    {
        if (sPrevPage != nil) {
            var prev_page = sPrevPage;
            sPrevPage = nil;
            prev_page.open(context);
        }
        CursorProject::StartMenuRoot::StartMenu.setInsensitiveMenus([["Tuning", false]]);

        context.pushEvent(main::menu::MFunctionEvent(manager.unloadProject, PROJECT));
    }

    function showTutorial(context)
    {
        var data = [
            ["check_begin": "gtauto_open",
             "done":        "gtauto_open",
             "message":     "gtauto_open",
             "msg_param":   ["open_wait_sec": 1.0, "speaker": "SPEAKER_GTAUTO"]],

            ["check_begin": "gtauto_open_tune",
             "done":        "gtauto_open_tune",
             "message":     "gtauto_open_tune",
             "msg_param":   ["open_wait_sec": 1.0, "speaker": "SPEAKER_GTAUTO"]],

            ["check_begin": "gtauto_open_custom",
             "done":        "gtauto_open_custom",
             "message":     "gtauto_open_custom",
             "msg_param":   ["open_wait_sec": 1.0, "speaker": "SPEAKER_GTAUTO"]],

            ["check_begin": "gtauto_open_gear",
             "done":        "gtauto_open_gear",
             "message":     "gtauto_open_gear",
             "msg_param":   ["open_wait_sec": 1.0, "speaker": "SPEAKER_GTAUTO"]],

            ["check_begin": "gtauto_open_paint",
             "done":        "gtauto_open_paint",
             "message":     "gtauto_open_paint",
             "msg_param":   ["open_wait_sec": 1.0, "speaker": "SPEAKER_GTAUTO"]],

            ["check_begin": "gtauto_open_pit",
             "done":        "gtauto_open_pit",
             "message":     "gtauto_open_pit",
             "msg_param":   ["open_wait_sec": 1.0, "speaker": "SPEAKER_GTAUTO"]]
        ];

        TutorialUtil::showTutorial(context, data, "gttop");
    }

    function sequenceTuningParts(context)
    {
        TutorialUtil::begin("gttop", "gtauto_open_tune");
        var category;
        for (;;)
        {
            category = SelectDialogRoot.open(context,
                manager.translate("GTAuto", "Title_TuningParts"),
                [["Category_Tire", "parts_tire", TUNING_PARTS_CATEGORY::TIRE, false],
                 ["Category_Suspension", "parts_suspension", TUNING_PARTS_CATEGORY::SUSPENSION, false],
                 ["Category_Drivetrain", "parts_drivetrain", TUNING_PARTS_CATEGORY::DRIVE_SYSTEM, false],
                 ["Category_Power", "parts_power", TUNING_PARTS_CATEGORY::POWER, false],
                 ["Category_Body", "parts_body", TUNING_PARTS_CATEGORY::BODY, false]],
                category);
            if (category == nil)
            {
                close(context); break;
            }
            TuningPartsRoot.open(context, category);
        }
    }

    function sequenceCustomParts(context)
    {
        TutorialUtil::begin("gttop", "gtauto_open_custom");
        var category;
        for (;;)
        {
            category = SelectDialogRoot.open(context,
                manager.translate("GTAuto", "Title_CustomParts"),
                [["Category_Aero", "parts_aero", CUSTOM_PARTS_CATEGORY::AERO_PARTS, false],
                 ["Category_Wheel", "parts_wheel", CUSTOM_PARTS_CATEGORY::WHEEL, false],
                 ["Category_Meter", "parts_meter", CUSTOM_PARTS_CATEGORY::METER, KeyValueUtil::getFlag("new_flag", "parts_meter")]
                ],
                category);
            if (category == nil) {
                close(context);
                break;
            }
            if (CUSTOM_PARTS_CATEGORY::AERO_PARTS == category)
            {
                CustomParts2Root.open(context);
            }
            else if (CUSTOM_PARTS_CATEGORY::WHEEL == category) {
                WheelRoot.open(context);
            }
            else if (CUSTOM_PARTS_CATEGORY::METER == category) {
                KeyValueUtil::set("new_flag", "parts_meter", false);
                MeterRoot.open(context);
            }
        }
    }

    function sequencePaint(context)
    {
        TutorialUtil::begin("gttop", "gtauto_open_paint");
        var category;
        for (;;)
        {
            category = SelectDialogRoot.open(context,
                manager.translate("GTAuto", "Title_Paint"),
                [["Category_PaintBody", "paint_body", PAINT_CATEGORY::BODY, false],
                 ["Category_PaintWheel", "paint_wheel", PAINT_CATEGORY::WHEEL, false],
                 ["Category_PaintBrakeCaliper", "paint_caliper",
                        PAINT_CATEGORY::BRAKE_CALIPER, false],
                 ["Category_PaintCustomWing", "paint_wing",
                        PAINT_CATEGORY::CUSTOM_WING, false]
                ],
                category);
            if (category == nil) {
                close(context);
                break;
            }
            PaintRoot.open(context, category);
        }
    }

    function sequenceRacingGear(context)
    {
        TutorialUtil::begin("gttop", "gtauto_open_gear");

        RacingGear2Root.open(context);
        close(context);
    }

    function sequencePitService(context)
    {
        TutorialUtil::begin("gttop", "gtauto_open_pit");
        PitServiceRoot.open(context);
        close(context);
    }

    static sSequenceMap = [
        SHOP_GENRE::TUNING_PARTS : sequenceTuningParts,
        SHOP_GENRE::CUSTOM_PARTS : sequenceCustomParts,
        SHOP_GENRE::PAINT        : sequencePaint,
        SHOP_GENRE::RACING_GEAR  : sequenceRacingGear,
        SHOP_GENRE::PIT_SERVICE  : sequencePitService,
    ];

    function onInitialize(context)
    {
        SoundUtil::MenuBGMCrossfadeGroup("gtauto", 0.0, 3.0);

        TutorialUtil::begin("gttop", "gtauto_open");
        var sequence = sSequenceMap[sShopGenre];
        context.pushEvent(menu::MFunctionEvent(sequence, context));
    }
}
