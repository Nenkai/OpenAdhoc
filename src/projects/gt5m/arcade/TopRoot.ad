//---------------------------------------------------------------------------------------
// TopRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ROOT
{
    PROJECT.load("/scripts/gt5m/util/ArcadeDifficultyUtil");

    static sLastFocused;
    static sOpeningAnimation = false;

    method onInitialize(context)
    {
        if (game_option().play_leave_limit > 0)
            LeaveDetectUtil::begin(context, game_option().play_leave_limit, self, onExit, nil);

        var cp = game_context().getArcadeCar();
        var has_car = gGameStatus.user_profile.garage.hasCar(cp.getCarCode(), cp.color);
        if (!has_car)
            game_context().setArcadeCar(main::gtengine::MCarParameter());

        game_context().setCar(cp);
        game_context().course = game_context().arcade_course;
        game_context().game_mode = game_context().arcade_game_mode;
        game_garage().rideCar(cp.getCarCode(), cp.color);

        var my_cash = gGameStatus.user_profile.cash;
        Header::Cash::TextFace.text = main::pdiext::MMisc::GetMoneyString(my_cash);
        var game_day = gGameStatus.user_profile.calendar.getGameDay();
        Header::Date::TextFace.text = context.translate(ROOT, "Arcade", "GAME_DAY").build(game_day + 1);

        if (sOpeningAnimation)
        {
            ModeImage::InEffect.restart();
            CarImage::InEffect.restart();
            CourseImage::InEffect.restart();
            sOpeningAnimation = false;
        }

        DrivingModeSelect.set_icon(context);
        CarSelect.set_icon(context);
        CourseSelect.set_icon(context);
        Start.set(context);

        ToolTip::tip.remove();
        ToolTip::tip.value = "";

        SoundUtil::BGMPlayGroup('menu', "arcade");

        context.pushEvent(main::menu::MFunctionEvent(set_default_focus, context));
    }

    method set_default_focus(context)
    {
        if (ROOT.sLastFocused == nil)
        {
            if (ROOT.sLastFocused == nil)
                ROOT.sLastFocused = Start;
            if (!isCourseSelected())
                ROOT.sLastFocused = CourseSelect;
            if (!isCarSelected())
                ROOT.sLastFocused = CarSelect;
            if (!isDrivingModeSelected())
                ROOT.sLastFocused = DrivingModeSelect;
        }

        ROOT.setFocus(ROOT.sLastFocused);
    }

    method onPageInEnd(context)
    {
        BalloonTip.initialize(context);

        ToolTip::tip.value = context.translate(ROOT, "TOOLTIP");

        var focus_w = ROOT.getFocusWidget();
        if (focus_w != nil && focus_w['onFocusEnter'] != nil)
            focus_w.onFocusEnter(context);
    }

    method onFinalize(context)
    {
        LeaveDetectUtil::end(context);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.setFocus(Exit);
        return EVENTRESULT_FILTER;
    }

    method isCarSelected()
    {
        var car = game_context().getCar();
        return car != nil && car.getCarCode() != main::gtengine::MSpecDB::NO_CODE64;
    }

    method isCourseSelected()
    {
        var course = game_context().course;
        return course != nil && course != main::gtengine::MSpecDB::NO_CODE64;
    }

    method isDrivingModeSelected()
    {
        var game_mode = game_context().game_mode;
        return game_mode > -1;
    }

    method canStart()
    {
        if (!isDrivingModeSelected())
            return false;

        if (!isCarSelected())
            return false;

        if (!isCourseSelected())
            return false;

        return true;
    }

    method onExit(context)
    {
        game_context().setCar(main::gtengine::MCarParameter());
        game_context().course = main::gtengine::MSpecDB::NO_CODE64;
        game_context().game_mode = -1;

        gGameStatus.user_profile.garage.rideCar(main::gtengine::MSpecDB::NO_CODE64, 0);

        ROOT.sLastFocused = nil;

        StartPageOut_XEffect(context, ROOT, GTTopRoot);
    }

    module Start
    {
        method set(context)
        {
            self.active = canStart();
        }

        method onActivate(context)
        {
            if (!canStart())
            {
                main::sound.play("cancel");
                return EVENTRESULT_FILTER;
            }

            main::sound.play("start");
            SoundUtil::BGMFadeout(1.0);

            var option = gGameStatus.user_profile.option;
            var car = game_context().getCar();
            var course = game_context().course;
            var game_mode = game_context().game_mode;

            StartPageIn_XEffect(context, ROOT, nil);

            ModeImage::OutEffect.restart();
            CarImage::OutEffect.restart();
            CourseImage::OutEffect.restart();


            var gp = nil;
            if (game_mode == main::gtengine::GameMode::SINGLE_RACE)
            {
                var course_code = course;
                var course_label = main::gtengine::MSpecDB::getCourseLabel(course_code);
                if (course_label.beginWith("r_"))
                {
                    course_code = main::gtengine::MSpecDB::getCourseCode(course_label.substr(2));
                }
                var course_length = GetTextDataCourseInfo(course_code, "length", "0");
                var prize_table = RewardUtil::calculate(course_length, option.arcade_laps, game_context().race_difficulty, game_context().penalty_level);

                var ai_skill = ArcadeDifficultyUtil::getAISkillByDifficulty(game_context().race_difficulty);
                var boost_lv = ArcadeDifficultyUtil::getBoostLvByDifficulty(game_context().race_difficulty);

                gp = main::GamePlan::createSingleRace(course, 4, option.arcade_laps,
                                                      ai_skill,
                                                      0,
                                                      boost_lv,
                                                      game_context().penalty_level, prize_table,
                                                      game_context().one_make);
            }
            else if (game_mode == main::gtengine::GameMode::TIME_ATTACK)
            {
                gp = main::GamePlan::createTimeAttack(course);
            }
            else if (game_mode == main::gtengine::GameMode::DRIFT_ATTACK)
            {
                var rp = main::RaceOperator.race_parameter;
                rp.endless = game_context().drift_type;
                main::RaceOperator.race_parameter = rp;

                gp = main::GamePlan::createDriftAttack(course, 0, main::RaceOperator.race_parameter.endless);
            }

            if (option.arcade_time_limit > 0)
                gp.events[0].play_style.time_limit = option.arcade_time_limit;

            if (option.play_leave_limit > 0)
                gp.events[0].play_style.leave_limit = option.play_leave_limit;

            var is_dirt = main::gtengine::MSpecDB::isDirt(course);

            {
                var cp = car;
                var dp = main::gtengine::MCarDriverParameter();
                dp.setDefault();
                dp.setPlayer(0);

                dp.manual = game_context().manual;
                dp.assist_asm = is_dirt ? 0 : game_context().assist_asm;
                dp.assist_tcs = game_context().assist_tcs;
                dp.physics_pro = game_context().physics_pro;
                dp.active_steering = option.active_steering;

                main::ORG.setDrivingLineDispFlag(0, game_context().driving_line);

                gp.execute(context, 0, [cp], [dp]);
            }

            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            var balloon_text = context.translate(ROOT, "Arcade", "accept");
            BalloonTip.set_value(context, self, balloon_text, self.h * 0.28);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module CarSelect
    {
        method set_icon(context)
        {
            if (isCarSelected())
            {
                var car = game_context().getCar();

                self.Selected.image_path = "car/thumbnail/%s.%02d".format(car.getCarLabel(), car.color);
                self.Selected.doInitialize(context);
                self.active = true;
            } 
            else 
            {
                self.active = false;
            }

            self.Selected::ScaleEffect.reverse = true;
            self.Selected::ScaleEffect.reset();
            self.No_select::ScaleEffect.reverse = true;
            self.No_select::ScaleEffect.reset();
        }

        method onFocusEnter(context)
        {
            var balloon_text = "";
            if (isCarSelected())
            {
                var car = game_context().getCar();
                balloon_text = main::gtengine::MSpecDB::getCarShortName(car.getCarCode());
            } 
            else 
            {
                balloon_text = context.translate(ROOT, "TOOLTIP|" + self.tooltip_key);
            }

            BalloonTip.set_value(context, self, balloon_text, self.h * 0.28);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }

        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.sLastFocused = self;
            CarRoot.setExtMode(nil, nil);
            CarRoot.setOpenMode(CarRoot::OPEN_MODE_ENUM::ARCADE, true);
            StartPageIn_XEffect(context, ROOT, CarRoot);
            return EVENTRESULT_FILTER;
        }
    }

    module CourseSelect
    {
        method normalize(c)
        {
            if (c.beginWith("r_"))
                return c.substr(2);

            return c;
        }

        method set_icon(context)
        {
            if (isCourseSelected())
            {
                var course = game_context().course;
                var courselabel = main::gtengine::MSpecDB::getCourseLabel(course);
                courselabel = normalize(courselabel);
                var course_logo = GetTextDataCourseInfo(courselabel, "logo", "not found");
                self.Selected.image_path = "piece_gt5m/course_logo_S/%s.img".format(course_logo);
                self.Selected.doInitialize(context);
                self.active = true;
            } 
            else 
            {
                self.active = false;
            }

            self.Selected::ScaleEffect.reverse = true;
            self.Selected::ScaleEffect.reset();
            self.No_select::ScaleEffect.reverse = true;
            self.No_select::ScaleEffect.reset();
        }

        method onFocusEnter(context)
        {
            var balloon_text = "";
            if (isCourseSelected())
            {
                var course = game_context().course;
                var courselabel = main::gtengine::MSpecDB::getCourseLabel(course);

                var format = context.translate(ROOT, "BALLOON_TIP_FORMAT");
                var direction;

                if (courselabel.beginWith("r_"))
                    direction = context.translate(ROOT, "TrialSetting", "LAYOUT_REVERSE");
                else
                    direction = context.translate(ROOT, "TrialSetting", "LAYOUT_NORMAL");

                courselabel = normalize(courselabel);
                var course_name = context.translate(ROOT, "CourseName", courselabel);

                balloon_text = format.build(course_name, direction);
            } 
            else 
            {
                balloon_text = context.translate(ROOT, "TOOLTIP|" + self.tooltip_key);
            }

            BalloonTip.set_value(context, self, balloon_text, self.h * 0.28);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }

        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.sLastFocused = self;
            CourseRoot.setReturnPage(ROOT);
            CourseRoot.setOnlineMode(false);
            StartPageIn_XEffect(context, ROOT, CourseRoot);
            return EVENTRESULT_FILTER;
        }
    }

    module DrivingModeSelect
    {
        attribute mode_map = [
            main::gtengine::GameMode::SINGLE_RACE : "singlerace",
            main::gtengine::GameMode::TIME_ATTACK : "freerun",
            main::gtengine::GameMode::DRIFT_ATTACK : "drift"
        ];

        method set_icon(context)
        {
            if (isDrivingModeSelected())
            {
                var game_mode = game_context().game_mode;
                self.Selected.image_path = "image/gt5m/icon/mode_" + mode_map[game_mode] + ".png";
                self.Selected.doInitialize(context);
                self.active = true;
            } 
            else 
            {
                self.active = false;
            }

            self.Selected::ScaleEffect.reverse = true;
            self.Selected::ScaleEffect.reset();
            self.No_select::ScaleEffect.reverse = true;
            self.No_select::ScaleEffect.reset();
        }

        method onFocusEnter(context)
        {
            var balloon_text = "";
            if (isDrivingModeSelected())
            {
                var game_mode = game_context().game_mode;
                var mode_name = context.translate(ROOT, "Arcade", mode_map[game_mode]);
                
                if (game_mode == main::gtengine::GameMode::SINGLE_RACE)
                {
                    var laps = game_option().arcade_laps;
                    var unit = context.translate(ROOT, "Unit", "LAPS");
                    var format = context.translate(ROOT, "BALLOON_TIP_FORMAT");
                    balloon_text = format.build(mode_name, laps + unit);
                } 
                else 
                {
                    balloon_text = mode_name;
                }
            } 
            else 
            {
                balloon_text = context.translate(ROOT, "TOOLTIP|" + self.tooltip_key);
            }

            BalloonTip.set_value(context, self, balloon_text, self.h * 0.28);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }

        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.sLastFocused = self;
            DrivingModeRoot.setOnlineMode(false);
            StartPageIn_XEffect(context, ROOT, DrivingModeRoot);
            return EVENTRESULT_FILTER;
        }
    }


    module Exit
    {
        method onActivate(context)
        {
            main::sound.play("ok");

            ROOT.onExit(context);

            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            var balloon_text = context.translate(ROOT, "Arcade", "quit");
            BalloonTip.set_value(context, self, balloon_text, 12);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }
}