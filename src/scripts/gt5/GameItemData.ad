













module GameItemData
{
    static TABLE_VERSION = 137;

    static CATEGORY_NAME_CHASH = nil;
    static langs = ["JP", "US", "GB", "RU", "TW", "KR", "FR", "NL", "IT", "ES", "DE", "PT", "PL", "TR", "EL"];

    function initialize()
    {
        !createGameItemeDataTable();

        if (getTypeNum() == 0)
            insertGameItemTypeData();

        if (getCategoryNum() == 0)
            insertGameItemCategoryData();

        if (getPresentCarNum() == 0)
            insertPresentCarData();

        if (getNum() == 0)
            insertGameItemData();
    }

    function ClearCache()
    {
        CATEGORY_NAME_CHASH = nil;
    }

    function createGameItemeDataTable()
    {
        DBUtil::initializeTable("t_item_type", TABLE_VERSION);
        DBUtil::initializeTable("t_item_category", TABLE_VERSION);
        DBUtil::initializeTable("t_presentcar", TABLE_VERSION);
        DBUtil::initializeTable("t_gameitem", TABLE_VERSION);

        var sql_list = [
            "CREATE TABLE IF NOT EXISTS t_item_type"
            "(type_id INTEGER NOT NULL,type_name_id INTEGER , "
            "type_name_JP TEXT ,type_name_US TEXT ,type_name_GB TEXT ,"
            "type_name_RU TEXT ,type_name_TW TEXT ,type_name_KR TEXT ,"
            "type_name_FR TEXT ,type_name_NL TEXT ,type_name_IT TEXT ,"
            "type_name_ES TEXT ,type_name_DE TEXT ,type_name_PT TEXT ,"
            "type_name_PL TEXT ,type_name_TR TEXT ,type_name_EL TEXT , "
            "PRIMARY KEY (type_id))",

            "CREATE TABLE IF NOT EXISTS t_item_category"
             "(category_id INTEGER NOT NULL, type_id INTEGER NOT NULL,sub_category_id INTEGER,  category_name_id INTEGER, "
             "category_name_JP TEXT ,category_name_US TEXT ,category_name_GB TEXT ,"
             "category_name_RU TEXT ,category_name_TW TEXT ,category_name_KR TEXT ,"
             "category_name_FR TEXT ,category_name_NL TEXT ,category_name_IT TEXT ,"
             "category_name_ES TEXT ,category_name_DE TEXT ,category_name_PT TEXT ,"
             "category_name_PL TEXT ,category_name_TR TEXT ,category_name_EL TEXT , "
             "PRIMARY KEY (category_id))",

            "CREATE TABLE IF NOT EXISTS t_presentcar"
             "(id INTEGER,gameitem_id INTEGER, carcode TEXT, item_code TEXT, color INTEGER, PRIMARY KEY (id))",

            "CREATE TABLE IF NOT EXISTS t_gameitem"
            "(gameitem_id INTEGER NOT NULL, type_id INTEGER NOT NULL, category_id INTEGER NOT NULL, status INTEGER NOT NULL, item_code TEXT , "
            "item_name_JP TEXT , item_name_US TEXT , item_name_GB TEXT , "
            "item_name_RU TEXT , item_name_TW TEXT , item_name_KR TEXT , "
            "item_name_FR TEXT , item_name_NL TEXT , item_name_IT TEXT , "
            "item_name_ES TEXT , item_name_DE TEXT , item_name_PT TEXT , "
            "item_name_PL TEXT , item_name_TR TEXT , item_name_EL TEXT , "
            "item_name_id INTEGER NOT NULL,"
            "item_description_JP TEXT , item_description_US TEXT , item_description_GB TEXT , "
            "item_description_RU TEXT , item_description_TW TEXT , item_description_KR TEXT , "
            "item_description_FR TEXT , item_description_NL TEXT , item_description_IT TEXT , "
            "item_description_ES TEXT , item_description_DE TEXT , item_description_PT TEXT , "
            "item_description_PL TEXT , item_description_TR TEXT , item_description_EL TEXT , "
            "item_description_id INTEGER NOT NULL,"
            "level INTEGER NOT NULL, defines_type TEXT, value TEXT, price INTEGER, present_flag INTEGER, stats BLOB, "
            "PRIMARY KEY (gameitem_id))",

            "CREATE INDEX IF NOT EXISTS t_gameitem_idx1 ON t_gameitem (item_code)",
        ];

        foreach (var sql in sql_list)
        {
            var res = SQLITE.execute0(sql);
            DB_ASSERT(res == SQLITE_OK, res);
        }

        return true;
    }

    function insertGameItemTypeData()
    {
        var init_insert_list = Array();
        var type_list = getInitTypeData();
        foreach (var type_data in type_list)
        {
            var sql = "INSERT INTO t_item_type(type_id      , type_name_id , type_name_JP , type_name_US ,"
                      "type_name_GB , type_name_RU , type_name_TW , type_name_KR ,"
                      "type_name_FR , type_name_NL , type_name_IT , type_name_ES ,"
                      "type_name_DE , type_name_PT , type_name_PL , type_name_TR , type_name_EL) "
                      "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

            init_insert_list.push([
                sql,
                [type_data[0], type_data[1], type_data[2], type_data[3], type_data[4], type_data[5], type_data[6], type_data[7], 
                type_data[8], type_data[9], type_data[10], type_data[11], type_data[12], type_data[13], type_data[14]]
            ]);
        }

        initQuery(init_insert_list, "t_item_type");
    }

    function insertGameItemCategoryData()
    {
        var init_insert_list = Array();
        var category_list = getInitCategoryData();
        foreach (var category_data in category_list)
        {
            var sql = "INSERT INTO t_item_category(category_id, type_id, sub_category_id, category_name_id, "
                      "category_name_JP ,category_name_US ,category_name_GB ,category_name_RU ,"
                      "category_name_TW ,category_name_KR ,category_name_FR ,category_name_NL ,"
                      "category_name_IT ,category_name_ES ,category_name_DE ,category_name_PT ,"
                      "category_name_PL ,category_name_TR ,category_name_EL) "
                      "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

            init_insert_list.push([
                sql,
                [category_data[1], category_data[0], category_data[2], category_data[3], category_data[4], category_data[5], category_data[6], category_data[7], 
                category_data[8], category_data[9], category_data[10], category_data[11], category_data[12], category_data[13], category_data[14],
                category_data[15], category_data[16], category_data[17], category_data[18]]
            ]);
        }

        initQuery(init_insert_list, "t_item_category");
    }

    function insertPresentCarData()
    {
        var init_insert_list = Array();
        var car_list = getInitPresentCarData();
        foreach (var car in car_list)
        {
            var sql = "INSERT INTO t_presentcar(id, gameitem_id, carcode, item_code, color) "
                      "VALUES (?, ?, ?, ?, ?)";

            init_insert_list.push([
                sql,
                [car[0], car[1], car[2], car[3], car[4]]
            ]);
        }

        initQuery(init_insert_list, "t_presentcar");
    }

    function insertGameItemData()
    {
        var init_insert_list = Array();
        var item_list = getInitGameItemData();
        foreach (var item in item_list)
        {
            var sql = "INSERT INTO t_gameitem(gameitem_id, type_id, category_id, status, item_code, "
                      "item_name_JP, item_name_US, item_name_GB, item_name_RU, "
                      "item_name_TW, item_name_KR, item_name_FR, item_name_NL, "
                      "item_name_IT, item_name_ES, item_name_DE, item_name_PT, "
                      "item_name_PL, item_name_TR, item_name_EL, item_name_id, "
                      "item_description_JP, item_description_US, item_description_GB, item_description_RU, "
                      "item_description_TW, item_description_KR, item_description_FR, item_description_NL, "
                      "item_description_IT, item_description_ES, item_description_DE, item_description_PT, "
                      "item_description_PL, item_description_TR, item_description_EL, item_description_id, "
                      "level, defines_type, value, price, present_flag) "
                      "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "
                      "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

            init_insert_list.push([
                sql,
                [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], 
                item[8], item[9], item[10], item[11], item[12], item[13], item[14],
                item[15], item[16], item[17], item[18], item[19], item[20], item[21], item[22], item[23],
                item[24], item[25], item[26], item[27], item[28], item[29], item[30], item[31], item[32],
                item[33], item[34], item[35], item[36], item[37], item[38], item[39], item[40], item[41]]
            ]);
        }

        initQuery(init_insert_list, "t_gameitem");
    }

    function initQuery(init_insert_list, table)
    {
        var res = SQLITE.executeTransaction(init_insert_list);
        if (res != SQLITE_DONE)
            DB_ASSERT(res == SQLITE_DONE, res);
        
        return true;
    }

    function getNum()
    {
        return getTableCount("t_gameitem");
    }

    function getTypeNum()
    {
        return getTableCount("t_item_type");
    }

    function getCategoryNum()
    {
        return getTableCount("t_item_category");
    }

    function getPresentCarNum()
    {
        return getTableCount("t_presentcar");
    }

    function getTableCount(table)
    {
        var res = SQLITE.executeQuery("SELECT count(*) FROM " + table);
        return res[0][0];
    }

    function getTypeList(type_id_list, sort_key = "type_id")
    {
        var lang = main::pdistd::MLocale::getLanguage();
        var res = SQLITE.executeQuery("SELECT type_id, type_name_" + lang + " FROM t_item_type WHERE type_id in(" + type_id_list.join(",") + ") ORDER BY " + sort_key);
        return res;
    }

    function getCategoryName(category_id)
    {
        if (CATEGORY_NAME_CHASH != nil && 
            CATEGORY_NAME_CHASH["ID"] != nil &&
            CATEGORY_NAME_CHASH["ID"][0] == category_id)
            return CATEGORY_NAME_CHASH["ID"][1];

        var lang = main::pdistd::MLocale::getLanguage();
        var res = SQLITE.executeQuery("SELECT category_name_" + lang + " FROM t_item_category WHERE category_id=" + category_id);
        if (res.size == 0)
            return "";

        if (CATEGORY_NAME_CHASH == nil)
            CATEGORY_NAME_CHASH = [:];

        CATEGORY_NAME_CHASH["ID"] = [category_id, res[0][0]];
        return res[0][0];
    }

    function getCategoryList(type_id, sort_key = "category_id")
    {
        var lang = main::pdistd::MLocale::getLanguage();
        var res = SQLITE.executeQuery("SELECT category_id, type_id, sub_category_id, category_name_" + lang + " FROM t_item_category WHERE type_id=" + type_id + " AND category_id<>" + type_id * 100 + " AND sub_category_id=0 ORDER BY " + sort_key);
        return res;
    }

    function getItemText(gameitem)
    {
        var lang = main::pdistd::MLocale::getLanguage();
        var res = SQLITE.executeQuery("SELECT item_name_" + lang + ",item_description_" + lang + " FROM t_gameitem WHERE gameitem_id=" + gameitem.gameitem_id);

        if (res != nil && res.size != 0)
            res[0][0] = getItemName(res[0][0], gameitem);

        return (res != nil && res.size != 0) ? res[0] : nil; 
    }

    function getOriginItemName(gameitem)
    {
        var lang = main::pdistd::MLocale::getLanguage();
        var res = SQLITE.executeQuery("SELECT item_name_" + lang + " FROM t_gameitem WHERE gameitem_id=" + gameitem.gameitem_id);
        return (res != nil && res.size != 0) ? res[0] : nil; 
    }

    function resToMap(res)
    {
        var map = [:];

        for (var i = 0; i < res.size; i++)
        {
            var item = res[i];
            var gameitem = GameItemUtil::GameItemRecord();

            gameitem.gameitem_id = item[0] != nil ? item[0] : gameitem.gameitem_id;
            gameitem.type_id = item[1] != nil ? item[1] : gameitem.type_id;
            gameitem.category_id = item[2] != nil ? item[2] : gameitem.category_id;
            gameitem.status = item[3] != nil ? item[3] : gameitem.status;
            gameitem.item_name_id = item[4] != nil ? item[4] : gameitem.item_name_id;
            gameitem.item_description_id = item[5] != nil ? item[5] : gameitem.item_description_id;
            gameitem.argument1 = item[6] != nil ? item[6] : gameitem.argument1;
            gameitem.defines_type = item[7] != nil ? item[7] : gameitem.defines_type;
            gameitem.value = item[8] != nil ? item[8] : gameitem.value;
            gameitem.price = item[9] != nil ? item[9] : gameitem.price;
            gameitem.item_code = item[12] != nil ? item[12] : gameitem.item_code;
            gameitem.present_flag = item[13] != nil ? item[13] : gameitem.present_flag;
            gameitem.item_name = item[10] != nil ? item[10] : gameitem.item_name;
            gameitem.argument3 = 0;
            gameitem.argument4 = 0;

            map.insert([gameitem.gameitem_id : gameitem]);
        }

        return map;
    }

    function resToList(res)
    {
        var gameitem_list = Array();

        for (var i = 0; i < res.size; i++)
        {
            var item = res[i];
            var gameitem = GameItemUtil::GameItemRecord();

            gameitem.gameitem_id = item[0] != nil ? item[0] : gameitem.gameitem_id;
            gameitem.type_id = item[1] != nil ? item[1] : gameitem.type_id;
            gameitem.category_id = item[2] != nil ? item[2] : gameitem.category_id;
            gameitem.status = item[3] != nil ? item[3] : gameitem.status;
            gameitem.item_name_id = item[4] != nil ? item[4] : gameitem.item_name_id;
            gameitem.item_description_id = item[5] != nil ? item[5] : gameitem.item_description_id;
            gameitem.argument1 = item[6] != nil ? item[6] : gameitem.argument1;
            gameitem.argument2 = item[7] != nil ? item[7] : gameitem.argument2;
            gameitem.price = item[8] != nil ? item[8] : gameitem.price;
            gameitem.item_name = item[9] != nil ? item[9] : gameitem.item_name;
            gameitem.item_description = item[10] != nil ? item[10] : gameitem.item_description;
            gameitem.item_code = item[11] != nil ? item[11] : gameitem.item_code;
            gameitem.present_flag = item[12] != nil ? item[12] : gameitem.present_flag;
            gameitem.argument3 = 0;
            gameitem.argument4 = 0;
            gameitem.exp_threshold = 0;
            gameitem.code = "";
            gameitem.blob = "";

            gameitem_list.push(gameitem);
        }

        return gameitem_list;
    }

    function getGameItemListFromIdList(id_csv)
    {
        var lang = main::pdistd::MLocale::getLanguage();
        var res = SQLITE.executeQuery("SELECT gameitem_id, type_id, category_id, status, item_name_id, item_description_id, level, value, price, item_name_" + lang + ",item_description_" + lang + ", item_code, present_flag FROM t_gameitem WHERE gameitem_id in (" + id_csv + ")");
        return resToList(res);
    }

    function getAvatorItemList()
    {
        var lang = main::pdistd::MLocale::getLanguage();
        var res = SQLITE.executeQuery("SELECT gameitem_id, type_id, category_id, status, item_name_id, item_description_id, level, value, price, item_name_" + lang + ",item_description_" + lang + ", item_code, present_flag FROM t_gameitem WHERE type_id = 3");
        return resToList(res);
    }

    function makeDistinctIdList(list)
    {
        var id_list = Array();
        var id_map = [:];

        foreach (var item in list)
            id_map.insert([item.gameitem_id : ""]);

        foreach (|var k, var v| in id_map)
            id_list.push(k);

        return id_list;
    }

    function getGameItemListFromItemBox(list)
    {
        var id_list = makeDistinctIdList(list);
        var lang = main::pdistd::MLocale::getLanguage();
        var res = SQLITE.executeQuery("SELECT gameitem_id, type_id, category_id, status, item_name_id, item_description_id, level, defines_type, value, price, item_name_" + lang + ",item_description_" + lang + ", item_code, present_flag FROM t_gameitem WHERE gameitem_id in (" + id_list.join(",") + ")");
        var map = resToMap(res);

        for (var i = 0; i < list.size; i++)
        {
            var gameitem_map = map.find(list[i].gameitem_id);
            if (gameitem_map == nil)    
                continue;

            var item = gameitem_map[1];
            list[i].status = item.status;
            list[i].item_name_id = item.item_name_id;
            list[i].item_description_id = item.item_description_id;

            if (list[i].category_id != gtengine::GameItemCategory::PAINT_ITEM && 
                !GameItemUtil::isHornItem(list[i]) &&
                !GameItemUtil::isCarTicket(item) &&
                list[i].type_id != gtengine::GameItemType::DRIVER_ITEM)
                list[i].argument1 = item.argument1;

            list[i].defines_type = item.defines_type;
            list[i].value = item.value;
            list[i].price = item.price;
            list[i].item_code = item.item_code;
            list[i].present_flag = list[i].present_flag == nil ? item.present_flag : list[i].present_flag;
            list[i].item_name = item.item_name;
            list[i].item_name = getItemName(item.item_name, list[i]);
            list[i].argument3 = item.argument3;
            list[i].argument4 = item.argument4;
        }

        return list;
    }

    function getGameItemFromItemCode(code)
    {
        var lang = main::pdistd::MLocale::getLanguage();
        var res = SQLITE.executeQuery("SELECT gameitem_id, type_id, category_id, status, item_name_id, item_description_id, level, defines_type, value, price, item_name_" + lang + ",item_description_" + lang + ", item_code, present_flag FROM t_gameitem WHERE item_code ='" + code + "'");
        
        var gameitem = nil;
        if (res.size != 0)
        {
            gameitem = GameItemUtil::GameItemRecord();
            var item = res[0];

            gameitem.gameitem_id = item[0] != nil ? item[0] : gameitem.gameitem_id;
            gameitem.type_id = item[1] != nil ? item[1] : gameitem.type_id;
            gameitem.category_id = item[2] != nil ? item[2] : gameitem.category_id;
            gameitem.status = item[3] != nil ? item[3] : gameitem.status;
            gameitem.item_name_id = item[4] != nil ? item[4] : gameitem.item_name_id;
            gameitem.item_description_id = item[5] != nil ? item[5] : gameitem.item_description_id;
            gameitem.argument1 = item[6] != nil ? item[6] : gameitem.argument1;
            gameitem.defines_type = item[7] != nil ? item[7] : gameitem.defines_type;
            gameitem.value = item[8] != nil ? item[8] : gameitem.value;
            gameitem.price = item[9] != nil ? item[9] : gameitem.price;
            gameitem.item_name = item[10] != nil ? item[10] : gameitem.item_name;
            gameitem.item_code = item[12] != nil ? item[12] : gameitem.item_code;
            gameitem.present_flag = item[13] != nil ? item[13] : gameitem.present_flag;
            gameitem.argument3 = 0;
            gameitem.argument4 = 0;
        }

        return gameitem;
    }

    function getItemByCode(code_list)
    {
        return getItemBySomeList(code_list, "item_code");
    }

    function getItemByID(id_list)
    {
        return getItemBySomeList(id_list, "gameitem_id");
    }

    function getItemBySomeList(list, target)
    {
        var lang = main::pdistd::MLocale::getLanguage();
        var res = SQLITE.executeQuery("SELECT gameitem_id, type_id, category_id, status, item_name_id, item_description_id, level, defines_type, value, price, item_name_" + lang + ",item_description_" + lang + ", item_code, present_flag FROM t_gameitem WHERE " + target + " in ('" + list.join(",") + "') ORDER BY gameitem_id");
        var gameitem_map = [:];

        for (var i = 0; i < res.size; i++)
        {
            var item = res[i];
            var gameitem = GameItemUtil::GameItemRecord();

            gameitem.gameitem_id = item[0] != nil ? item[0] : gameitem.gameitem_id;
            gameitem.type_id = item[1] != nil ? item[1] : gameitem.type_id;
            gameitem.category_id = item[2] != nil ? item[2] : gameitem.category_id;
            gameitem.status = item[3] != nil ? item[3] : gameitem.status;
            gameitem.item_name_id = item[4] != nil ? item[4] : gameitem.item_name_id;
            gameitem.item_description_id = item[5] != nil ? item[5] : gameitem.item_description_id;
            gameitem.argument1 = item[6] != nil ? item[6] : gameitem.argument1;
            gameitem.defines_type = item[7] != nil ? item[7] : gameitem.defines_type;
            gameitem.value = item[8] != nil ? item[8] : gameitem.value;
            gameitem.price = item[9] != nil ? item[9] : gameitem.price;
            gameitem.item_name = getItemName(item[10], gameitem);
            gameitem.item_code = item[12] != nil ? item[12] : gameitem.item_code;
            gameitem.present_flag = item[13] != nil ? item[13] : gameitem.present_flag;
            gameitem.argument3 = 0;
            gameitem.argument4 = 0;

            gameitem_map.insert([gameitem.gameitem_id : gameitem]);
        }

        return gameitem_map;
    }

    function getPresentCarList(gameitem_id)
    {
        var res = SQLITE.executeQuery("SELECT carcode, color FROM t_presentcar WHERE gameitem_id=" + gameitem_id + " ORDER BY gameitem_id");
        var car_list = Array();

        for (var i = 0; i < res.size; i++)
        {
            var item = res[i];
            car_list.push([item[0], item[1]]);
        }

        return car_list;
    }

    function getGameItemIDFromAvatorInfo(category, avator_item_id, color)
    {
        var res = SQLITE.executeQuery("SELECT gameitem_id FROM t_gameitem WHERE category_id=" + category + " AND value=" + avator_item_id + " AND type_id=" + gtengine::GameItemType::DRIVER_ITEM + " ORDER BY gameitem_id LIMIT 1");
        var gameitem_id = nil;

        if (res.size != 0)
            gameitem_id = res[0][0];

        return gameitem_id;
    }

    function getInitTypeData()
    {
        var res = main::pdistd::ReadFile("textdata/gt5/gameitem_type.xml");
        var type_list = Array();

        if (res["result"] != main::pdistd::FileError::OK)
            return;
        else
        {
            var buf = res["buffer"];
            var xml = main::pdistd::MXml();
            xml.parse(buf);
            
            var dom = xml.result;
            var nodelist = dom["ItemType"];
            if (nodelist == nil)
                return;

            var node = nodelist[0];
            var nodelist = node["type"];
            if (nodelist == nil)
                return;

            for (var i = 0; i < nodelist.size; i++)
            {
                var node = nodelist[i];
                var attr_map = node.getAttributeMap();

                var _type = Array(langs.size + 2);
                var j = 0;

                _type[j] = attr_map["type_id"]; ++j;
                _type[j] = attr_map["name_id"]; ++j;

                foreach (var lang in langs)
                {
                    _type[j] = node["type_name_" + lang][0].getAttributeMap()["name"]; ++j;
                }

                type_list.push(_type);
            }
        }

        return type_list;
    }

    function getInitCategoryData()
    {
        var res = main::pdistd::ReadFile("textdata/gt5/gameitem_category.xml");
        var category_list = getInitCategoryDataFromXML(res);
        return category_list;
    }

    function getInitCategoryDataFromXML(xml_file)
    {
        var res = xml_file;
        var category_list = Array();

        if (res["result"] != main::pdistd::FileError::OK)
            return;
        else
        {
            var buf = res["buffer"];
            var xml = main::pdistd::MXml();
            xml.parse(buf);
            
            var dom = xml.result;
            var nodelist = dom["ItemCategory"];
            if (nodelist == nil)
                return;

            var node = nodelist[0];
            var nodelist = node["category"];
            if (nodelist == nil)
                return;

            for (var i = 0; i < nodelist.size; i++)
            {
                var node = nodelist[i];
                var attr_map = node.getAttributeMap();

                var _type = Array(langs.size + 4);
                var j = 0;

                _type[j] = attr_map["type_id"]; ++j;
                _type[j] = attr_map["category_id"]; ++j;
                _type[j] = attr_map["sub_category_id"]; ++j;
                _type[j] = attr_map["name_id"]; ++j;

                foreach (var lang in langs)
                {
                    _type[j] = node["category_name_" + lang][0].getAttributeMap()["name"]; ++j;
                }

                category_list.push(_type);
            }
        }

        return category_list;
    }

    function getInitGameItemData()
    {
        var res = main::pdistd::ReadFile("textdata/gt5/gameitem_data.xml");
        var gameitem_list = Array();

        if (res["result"] != main::pdistd::FileError::OK)
            return;
        else
        {
            var buf = res["buffer"];
            var xml = main::pdistd::MXml();
            xml.parse(buf);
            
            var dom = xml.result;
            var nodelist = dom["GameItem"];
            if (nodelist == nil)
                return;

            var node = nodelist[0];
            var nodelist = node["item"];
            if (nodelist == nil)
                return;

            for (var i = 0; i < nodelist.size; i++)
            {
                var node = nodelist[i];
                var attr_map = node.getAttributeMap();

                var _type = Array(5 + langs.size + 1 + langs.size + 6);
                var j = 0;

                _type[j] = attr_map["gameitem_id"]; ++j;
                _type[j] = attr_map["type_id"]; ++j;
                _type[j] = attr_map["category_id"]; ++j;
                _type[j] = attr_map["status"]; ++j;
                _type[j] = attr_map["code"]; ++j;

                foreach (var lang in langs)
                {
                    _type[j] = node["item_name_" + lang][0].getAttributeMap()["name"]; ++j;
                }

                _type[j] = attr_map["name_id"]; ++j;

                foreach (var lang in langs)
                {
                    _type[j] = unescape(node["item_description_" + lang][0].getAttributeMap()["name"]); ++j;
                }


                _type[j] = attr_map["description_id"]; ++j;
                _type[j] = attr_map["level"]; ++j;
                _type[j] = attr_map["defines_type"]; ++j;
                _type[j] = attr_map["value"]; ++j;
                _type[j] = attr_map["price"]; ++j;
                _type[j] = attr_map["present_flag"]; ++j;


                gameitem_list.push(_type);
            }
        }

        return gameitem_list;
    }

    function getInitPresentCarData()
    {
        var res = main::pdistd::ReadFile("textdata/gt5/presentcar.xml");
        var presentcar_list = Array();

        if (res["result"] != main::pdistd::FileError::OK)
            return;
        else
        {
            var buf = res["buffer"];
            var xml = main::pdistd::MXml();
            xml.parse(buf);
            
            var dom = xml.result;
            var nodelist = dom["PresentCarData"];
            if (nodelist == nil)
                return;

            var node = nodelist[0];
            var nodelist = node["presentcar"];
            if (nodelist == nil)
                return;

            for (var i = 0; i < nodelist.size; i++)
            {
                var node = nodelist[i];
                var _record = [];

                var attr_map = node.getAttributeMap();
                _record = [attr_map["id"], attr_map["gameitem_id"], attr_map["carcode"], attr_map["item_code"], attr_map["color"]];
                presentcar_list.push(_record);
            }
        }

        return presentcar_list;
    }

    function getItemName(master_name, gameitem)
    {
        var ret_name = master_name;
        var lang = main::pdistd::MLocale::getLanguage();

        if (GameItemUtil::isCarTicket(gameitem))
            ret_name = gtengine::MSpecDB::getCarShortName(gameitem.code);
        else if (gameitem.category_id == gtengine::GameItemCategory::PAINT_ITEM || gameitem.category_id == gtengine::GameItemCategory::SPECIAL_PAINT_ITEM)
        {
            if (lang == "JP")
                ret_name = gtengine::MSpecDB::getPaintColorName_J(gameitem.argument1);
            else
                ret_name = gtengine::MSpecDB::getPaintColorName_A(gameitem.argument1);
        }
        else if (GameItemUtil::isHornItem(gameitem))
            ret_name = GameItemUtil::getHornName(gameitem.argument1);
        else if (GameItemUtil::isAvatorItem(gameitem))
        {
            if (GameItemUtil::isHaveColorVariation(gameitem.value))
                ret_name = GameItemUtil::makeAvatorItemName(master_name, gameitem.argument1, gameitem.value);
            else
                ret_name = master_name;
        }

        return ret_name;
    }

    function unescape(s)
    {
        s.replaceAll("&amp;", "&");
        s.replaceAll("&lt;", "<");
        s.replaceAll("&gt;", ">");
        s.replaceAll("&quot;", "\"");
        s.replaceAll("&#39;", "'");
        
        return s;
    }
}