//---------------------------------------------------------------------------------------
// DealerRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ROOT
{
    hidden.visible = false;

    attribute sCarsetsName = nil;
    attribute sCarsetsData = nil;
    attribute sViewMode = nil;
    attribute sItemList = nil;
    attribute sAllOpen = nil;
    attribute sPrevFocusIndex = nil;

    method load_carsets(game_day, span)
    {
        var g_type = gGameStatus.user_profile.garage_type;
        var dom = nil;
        var carsets_name;
        var carsets_data = Array();

        var file_path = "/textdata/gt5m/buy_car/carsetlist%03d.xml".format(g_type);
        if (main::pdistd::Exist(file_path))
            dom = main::pdiapp::XmlUtil::load("/textdata/gt5m/buy_car/carsetlist%03d.xml".format(g_type));
        else
            ;

        if (dom == nil)
            return ["", Array()];

        var node_list = dom["BuyCarData"];
        if (node_list != nil)
        {
            var node = node_list[0];
            node_list = node["carsets"];
            if (node_list != nil)
            {
                var index = 0;
                if (game_day > 0)
                    index = (game_day / span) % node_list.size;

                node = node_list[index];

                node_list = node["name"];
                if (node_list != nil)
                {
                    var atr_map = node_list[0].getAttributeMap();
                    carsets_name = atr_map["value"];
                }

                node_list = node["carset"];
                if (node_list != nil)
                {
                    for (var i = 0; i < node_list.size; i++)
                        carsets_data.push(node_list[i].getAttributeMap());
                }
            }
        }
        return [carsets_name, carsets_data];
    }

    method getItemList(mode, carsets_data, arg)
    {
        var array = [];

        if (mode == "cars")
        {
            if (arg == nil)
                return array;

            foreach (var carset_data in carsets_data)
            {
                if (arg == carset_data["code"])
                {
                    var file_path = "/textdata/gt5m/buy_car/cardata/" + carset_data["value"] + ".xml";
                    if (main::pdistd::Exist(file_path))
                        array += main::pdiapp::XmlUtil::loadCarArray(file_path, "CarData", "car", "code");
                    else
                        ;
                }
            }
        } 
        else if (mode == "dealers")
        {
            foreach (var carset_data in carsets_data)
            {
                var code = carset_data["code"];
                if (array.indexOf(code) < 0)
                    array.push(code);
            }
        }

        return array;
    }

    method onInitialize(context)
    {
        ROOT.sAllOpen = false;
        ROOT.sPrevFocusIndex = -1;

        Close.visible = false;
        Exit.visible = true;

        var my_cash = gGameStatus.user_profile.cash;
        Header::Cash::TextFace.text = main::pdiext::MMisc::GetMoneyString(my_cash);

        filter::TextFace.text = context.translate(ROOT, "TODAYS_DEALERS");

        var game_day = gGameStatus.user_profile.calendar.getGameDay();

        Header::Date::TextFace.text = context.translate(ROOT, "Arcade", "GAME_DAY").build(game_day + 1);

        |self.sCarsetsName, self.sCarsetsData| = load_carsets(game_day, 2);

        self.sViewMode = "dealers";

        self.sItemList = getItemList(self.sViewMode, self.sCarsetsData);
        IconBox.create_items(context, self.sViewMode, self.sItemList.size);

        HScrollbar.initialize(IconBox);

        SoundUtil::BGMPlayGroup('menu', "dealer");

        ROOT.setFocus(IconBox);

        ToolTip::tip.remove();
        ToolTip::tip.action_type = 1;
    }

    method onPageInEnd(context)
    {
        BalloonTip.initialize(context);

        var focus_w = ROOT.getFocusWidget();
        context.pushEvent(main::menu::MFocusEnterEvent(context, focus_w));

        HScrollbar.stop_update = false;
        HScrollbar.update_arrow();
    }

    method onActivate(context)
    {
        main::sound.play("ok");

        return EVENTRESULT_FILTER;
    }

    method onExit(context)
    {
        StartPageOut_XEffect(context, ROOT, GTTopRoot);
    }

    method onClose(context)
    {
        ROOT.sViewMode = "dealers";
        if (!ROOT.sAllOpen)
        {
            self.sItemList = getItemList(self.sViewMode, self.sCarsetsData);
        } 
        else 
        {
            ROOT.sItemList = main::pdiapp::XmlUtil::load_array("/textdata/gt5m/makerlist.xml", "MakerData", "maker", "code");
            MakerUtil::excludeNonDisplayMaker(ROOT.sItemList);
        }

        IconBox.create_items(context, ROOT.sViewMode, ROOT.sItemList.size);
        IconBox.focus_index = ROOT.sPrevFocusIndex;

        filter::TextFace.text = context.translate(ROOT, "TODAYS_DEALERS");

        BalloonTip.reset_value();

        context.sync(0.1);

        context.pushEvent(main::menu::MFunctionEvent(ROOT.setFocus, IconBox));

        HScrollbar.update_arrow();
    }

    method onCancel(context)
    {
        main::sound.play("cancel");

        if (ROOT.sViewMode == "cars")
        {
            onClose(context);
            Close.visible = false;
            Exit.visible = true;
            return EVENTRESULT_FILTER;
        }

        ROOT.setFocus(Exit);
        return EVENTRESULT_FILTER;
    }


    method onFinalize(context)
    {
    }

    method cmp_maker_label(a, b)
    {
        var initial_a = main::gtengine::MSpecDB::getMakerLabel(a).at(0);
        var initial_b = main::gtengine::MSpecDB::getMakerLabel(b).at(0);

        if (initial_a == initial_b)
            return cmp_power(a, b);

        return initial_a < initial_b;
    }

    method cmp_power(a, b)
    {
        var cp_a = main::gtengine::MCarParameter(a);
        var cp_b = main::gtengine::MCarParameter(b);
        cp_a.updateScratch();
        cp_b.updateScratch();
        return cp_a.getPowerScratch() > cp_b.getPowerScratch();
    }

    module IconBox
    {
        method create_items(context, view_mode, item_size)
        {
            self.v_magnify = 1.0;
            self.h_magnify = 1.0;

            self.setItemCount(0, 0);
            self.postRedraw();

            var h = 0; var v = 0;
            if (view_mode == "dealers")
            {
                h = item_size;
                v = 1;
                IconBox.h_scacing = 2; 
                HScrollbar::pinch.visible = 3 < h;

                IconBox.setItemTemplate(context, hidden::ItemDir);
            }
            else if (view_mode == "cars")
            {
                if (item_size < 5) 
                {
                    v = 1;
                    h = item_size;
                    IconBox.h_scacing = 16;
                } 
                else 
                {
                    v = 2;
                    h = (item_size + 1) / v;
                    IconBox.h_scacing = 2;
                }

                HScrollbar::pinch.visible = 5 < h;
                IconBox.setItemTemplate(context, hidden::Item);
            }

            IconBox.setItemCount(h, v);
        }

        method onVisibleNotify(context, indexes)
        {
            foreach (var i in indexes)
            {
                if (IconBox.getItemVisible(i))
                {
                    var w = IconBox.getItemWidget(i, context);
                    if (w != nil)
                    {
                        if (i < ROOT.sItemList.size)
                        {
                            if (ROOT.sViewMode == "dealers")
                            {
                                if (w.code != nil) 
                                    continue;

                                w.set(context, ROOT.sItemList[i]);
                            }
                            else if (ROOT.sViewMode == "cars")
                            {
                                if (w.cp != nil) 
                                    continue;

                                var carlabel = ROOT.sItemList[i];
                                var cp = main::gtengine::MCarParameter(carlabel);
                                cp.color = 0;
                                w.set(context, cp);
                            }
                        } 
                        else 
                        {
                            w.set(context);
                            
                            continue;
                        }
                    }
                }
                else
                {
                    IconBox.setItemWidget(i, context, nil);
                }
            }
        }

        method onFocusEnter(context)
        {
            var w = self.getItemWidget(self.focus_index, context);
            ROOT.setFocus(w);

            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            self.v_magnify = 1.0;
            self.h_magnify = 1.0;

            return EVENTRESULT_FILTER;
        }

        method onFocusNotify(context, new_index, old_index)
        {
            self.v_magnify = 1.0;
            self.h_magnify = 1.0;

            var new_w = self.getItemWidget(new_index, context);
            if (new_w != nil)
                ROOT.setFocus(new_w);
            
            return EVENTRESULT_FILTER;
        }
    }

    module hidden::Item
    {
        FrameImageFace.visible = false;
        ColorFace0.visible = false;

        attribute is_dummy = true;
        attribute cp = nil;

        method onActivate(context)
        {
            if (self.cp == nil || self.is_dummy)
            {
                main::sound.play("cancel");
                return EVENTRESULT_FILTER;
            }

            main::sound.play("ok");
            BalloonTip.reset_value();
            cp.color = 0;

            var res = BuyCarRoot.open(context, cp);
            if (res)
                Header::Cash::TextFace.text = gGameStatus.user_profile.getCashString();

            return EVENTRESULT_FILTER;
        }

        method set(context, cp)
        {
            self.cp = cp;
            if (cp != nil)
            {
                self.is_dummy = false;
                self.ImageFace.cache = false;
                self.ImageFace.from_disk = true;
                self.ImageFace.block = false;
                self.ImageFace.image_path = "car/thumbnail/%s.%02d".format(cp.getCarLabel(), cp.color);
                self.ImageFace.doInitialize(context);

                var price = main::gtengine::MSpecDB::getCarPrice(self.cp.getCarCode());
                self.value.text = main::pdiext::MMisc::GetMoneyString(price);
            } 
            else 
            {
                self.is_dummy = true;
                self.ImageFace.image_path = "";
                self.ImageFace.visible = false;
            }
        }


        method onFocusEnter(context)
        {
            if (!is_dummy)
            {
                {
                    FrameImageFace.visible = true;
                    ColorFace0.visible = true;
                    IconBox.v_magnify = 1.2;
                    IconBox.h_magnify = 1.2;
                }

                if (self.cp != nil)
                {
                    var carcode = self.cp.getCarCode();
                    var carname = main::gtengine::MSpecDB::getCarShortName(carcode);
                    set_balloontip(context, carname);

                    var car_spec = SpecDatabaseUtil::GetTextDataCarSpec(context, carcode);
                    ToolTip::tip.value = car_spec;
                }
            } 
            else 
            {
                BalloonTip.reset_value();
            }

            return EVENTRESULT_FILTER;
        }

        method set_balloontip(context, txt)
        {
            var index = IconBox.focus_index;
            var base_point = self;
            if ((index - 4) > -1 && (index + 4) < IconBox.getItemCount())
            {
                if (index & 1)
                    base_point = IconBox::CenterBottom;
                else
                    base_point = IconBox::CenterTop;
            }
            if (ROOT.sViewMode == "cars")
                BalloonTip.set_value(context, base_point, txt, 35);
            else
                BalloonTip.set_value(context, base_point, txt, 83);
        }
    }

    module hidden::ItemDir
    {
        FrameImageFace.visible = false;

        attribute is_dummy = true;
        attribute code = nil;

        import hidden::Item::set_balloontip;

        method onActivate(context)
        {
            if (self.code == nil || self.is_dummy)
            {
                main::sound.play("cancel");
                return EVENTRESULT_FILTER;
            }

            main::sound.play("ok");

            var maker = self.code;

            filter::TextFace.text = context.translate(ROOT, "TODAYS_DEALERS");
            filter::TextFace.text += " > ";

            var display_maker = MakerUtil::hasDisplayPair(self.code, true);
            if (display_maker == nil)
                filter::TextFace.text += context.translate(ROOT, "TunerName", maker);
            else
                filter::TextFace.text += context.translate(ROOT, "TunerName", display_maker);

            ROOT.sViewMode = "cars";
            if (!ROOT.sAllOpen)
            {
                ROOT.sItemList = getItemList(ROOT.sViewMode, ROOT.sCarsetsData, maker);
            } 
            else 
            {
                ROOT.sItemList = main::gtengine::MSpecDB::getTunerCarCodeList(maker);
                var pair_maker = MakerUtil::hasDisplayPair(maker);
                if (pair_maker != nil)
                    ROOT.sItemList += main::gtengine::MSpecDB::getTunerCarCodeList(pair_maker);
            }

            main::gtengine::sortCarCodeListByName(ROOT.sItemList, true);

            ROOT.sPrevFocusIndex = IconBox.focus_index;
            IconBox.create_items(context, ROOT.sViewMode, ROOT.sItemList.size);

            BalloonTip.reset_value();

            Exit.visible = false;
            Close.visible = true;

            context.sync(0.1);

            context.pushEvent(main::menu::MFunctionEvent(ROOT.setFocus, IconBox));

            HScrollbar.update_arrow();

            return EVENTRESULT_FILTER;
        }

        method set(context, code)
        {
            self.code = code;
            if (code != nil)
            {
                self.is_dummy = false;
                self.ImageFace.cache = true;
                self.ImageFace.from_disk = true;

                self.ImageFace.block = false;
                ImageFace.image_path = "piece_gt5m/tunner_logo_M/" + code + ".img";
                self.ImageFace.doInitialize(context);
            } 
            else 
            {
                self.is_dummy = true;
                self.ImageFace.image_path = "";
                self.ImageFace.visible = false;
            }
        }


        method onFocusEnter(context)
        {
            if (!is_dummy)
            {
                {
                    FrameImageFace.visible = true;
                    IconBox.v_magnify = 1.2;
                    IconBox.h_magnify = 1.2;
                }

                if (self.code != nil)
                {
                    var maker = self.code;
                    var display_maker = MakerUtil::hasDisplayPair(self.code, true);
                    var maker_str = "";
                    if (display_maker == nil)
                        maker_str = context.translate(ROOT, "TunerName", maker);
                    else
                        maker_str = context.translate(ROOT, "TunerName", display_maker);
                    ToolTip::tip.value = maker_str;

                    context.sync(0.1);

                    set_balloontip(context, maker_str);
                }
            } 
            else 
            {
                BalloonTip.reset_value();
            }

            HScrollbar.update_arrow();

            return EVENTRESULT_FILTER;
        }
    }

    module Exit
    {
        method onActivate(context)
        {
            main::sound.play("ok");

            ROOT.onExit(context);
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            var balloon_text = context.translate(ROOT, "Arcade", "quit");
            BalloonTip.set_value(context, self, balloon_text, 12);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module Close
    {
        method onActivate(context)
        {
            main::sound.play("ok");

            ROOT.onCancel(context);
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            var balloon_text = context.translate(ROOT, "Arcade", "close");
            BalloonTip.set_value(context, self, balloon_text, 12);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }

    module HScrollbar
    {
        attribute stop_update = nil;

        method initialize(list_box)
        {
            self.stop_update = true;

            list_box.h_adjustment = main::menu::MAdjustment();
            HScrollbar.adjustment = list_box.h_adjustment;
            inc_arrow_animation(true, true);
            dec_arrow_animation(true, true);
        }

        method inc_arrow_animation(reverse, warp = false)
        {
            var effect = HScrollbar::inc_arrow::Pane::Effect;
            if (!warp)
            {
                if (reverse != effect.reverse)
                {
                    effect.reverse = reverse;
                    effect.restart();
                }
            } 
            else 
            {
                effect.reverse = !reverse;
                effect.reset();
                effect.reverse = reverse;
            }
        }

        method dec_arrow_animation(reverse, warp = false)
        {
            var effect = HScrollbar::dec_arrow::Pane::Effect;
            if (!warp)
            {
                if (reverse != effect.reverse)
                {
                    effect.reverse = reverse;
                    effect.restart();
                }
            } 
            else 
            {
                effect.reverse = !reverse;
                effect.reset();
                effect.reverse = reverse;
            }
        }

        method update_arrow()
        {
            if (self.stop_update)
                return;

            inc_arrow_animation(!HScrollbar::inc_arrow.active);
            dec_arrow_animation(!HScrollbar::dec_arrow.active);
        }
    }
}