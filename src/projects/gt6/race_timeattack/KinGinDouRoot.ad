













module ROOT
{
    hidden.visible = true;
    
    attribute event_id;
    attribute finish_result;
    attribute current_result;
    attribute laptime;
    attribute show_button;
    attribute all_disp_same_time;
    attribute org_onboard_camera_mount;
    attribute popup;
    attribute closed;
    attribute best_order;
    attribute best_time;
    attribute old_best_order;
    attribute old_best_time;
    attribute result;

    method open(context, finish_result, laptime)
    {
        self.finish_result = finish_result; 
        self.laptime = laptime;
        self.show_button = true;
        self.result = false;
        self.closed = false;

        self.popup = main::SequenceUtil::ModalPage(context, ROOT);
        self.popup.open();

        var res = self.result;
        self.result = nil;
        self.org_onboard_camera_mount = 0;
        return res;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;

        FadeActor.on_effect_end = function(context)
        {
            if (ROOT.popup != nil)
            {
                ROOT.popup.close();
                ROOT.popup = nil;

                if (gSequenceCondition.gp.event.game_mode == gtengine::GameMode::PRACTICE)
                    ORG.setCameraWithMount(gtengine::CameraType::ONBOARD, ROOT.org_onboard_camera_mount);
            }
        }

        FadeActor.out = false;
    }

    method abort(context)
    {
        if (ROOT.popup != nil)
        {
            ROOT.popup.close();
            ROOT.popup = nil;
        }
    }

    method onInitialize(context)
    {
        Time::Info::Result::Time::Trophy.visible = false;
        Trophy.visible = false;

        on_initialize_time(context);
        context.cursor_visible = true;
        RaceMenuSimple.initialize(context);
    }

    method on_initialize_time(context)
    {
        var course_code = getCurrentCourse();
        if (self.finish_result == gtengine::FinishResult::DSQ)
        {
            Time::Info::NewRecord.visible = false;
        }
        else
        {
            var ranking_list = LocalRankingUtil::getList(course_code, 1, PluginModule::getEventId());
            if (ranking_list.size > 0)
            {
                var rank = ranking_list[0];
                Time::Info::NewRecord.visible = self.laptime < rank.best_time;
            }
            else
            {
                Time::Info::NewRecord.visible = true;   
            }
        }

        var laptime0 = pdiext::GetRaceTimeString(self.laptime);
        if (self.finish_result != gtengine::FinishResult::DSQ)
        {
            Time::Info::Result::Time::TextFace.visible = true;
            Time::Info::Result::Time::TextFaceInvalid.visible = false;
            Time::Info::Result::Time::TextFace.text = laptime0;
        }
        else
        {
            Time::Info::Result::Time::TextFace.visible = false;
            Time::Info::Result::Time::TextFaceInvalid.visible = true;
            Time::Info::Result::Time::TextFaceInvalid.text = laptime0;
        }

        Time::Info::Result::Time::TextFace_shadow.text = laptime0;
        Time::Info::Result::Time.VectorInterpolator.restart();
        Time::Info::Result::Time::Trophy.visible = false;
        Time::Info::Cause.visible = false;

        if (self.finish_result == gtengine::FinishResult::DSQ)
        {
            Time::Info::Cause.visible = true;
            Time::Info::Cause.TextFace.text = manager.translate("Game", "INVALID_TIME");
        }

        if (gSequenceCondition.gp.event.game_mode == gtengine::GameMode::PRACTICE)
        {
            self.org_onboard_camera_mount = ORG.getCameraMountNum();
            ORG.setCameraWithMount(gtengine::CameraType::ONBOARD, gtengine::CameraOnboardMount::INCAR);
        }
    }

    method startSE(context)
    {
        if (self.finish_result != gtengine::FinishResult::DSQ)
        {
            switch (self.current_result)
            {
                case 0:
                    if (Time::Info::NewRecord.visible)
                        sound.play("big_cheer");
                    else
                        sound.play("clap_b");
                    break;

                case 1:
                    sound.play("clap_m");
                    break;

                case 2:
                    sound.play("clap_s");
                    break;
            }
        }
    }

    method startTrophyActor(widget, visible)
    {
        widget.visible = visible;
        if (visible)
        {
            widget.ParallelActor.ScalarInterpolator.restart();
            widget.ParallelActor.ScalarInterpolator0.restart();
        }
    }

    method on_initialize_all(context)
    {
        var message = "";
        if (self.finish_result != gtengine::FinishResult::DSQ)
        {
            switch (self.current_result)
            {
                case 0:
                    message = "ACHIEVEMENT_GOLD";
                    sound.play("clap_b");
                    break;

                case 1:
                    message = "ACHIEVEMENT_SILVER";
                    sound.play("clap_m");
                    break;

                case 2:
                    message = "ACHIEVEMENT_BRONZE";
                    sound.play("clap_s");
                    break;
            }
        }

        if (message != "")
        {
            message = manager.translate("QuickMenu", message);
        }

        Trophy::message::TextFace.text = message;

        startTrophyActor(Time::Info::Result::Time::Trophy::Gold, self.finish_result == gtengine::FinishResult::GOLD);
        startTrophyActor(Time::Info::Result::Time::Trophy::Silver, self.finish_result == gtengine::FinishResult::SILVER);
        startTrophyActor(Time::Info::Result::Time::Trophy::Bronze, self.finish_result == gtengine::FinishResult::BRONZE);

        Time::Info::Result::Time::Trophy.visible = true;

        var board_id = OnlineRankingUpload::getEventBoardID(context);
        var user_id = NP.getOnlineId();
        var rank_cache = OnlineRankingUpload::getEventRankingCache();
        if (!rank_cache.empty())
        {
            Trophy::MyRecord::Time.text = pdiext::GetRaceTimeString(rank_cache['score']);
        }
        else
        {
            Trophy::MyRecord::Time.text = pdiext::GetRaceTimeString(main::pdiext::MAX_LAPTIME1000);
        }

        var gp = gSequenceCondition.gp;
        var eval_condition = gp.event.eval_condition;
        
        Trophy::Target::Hbox::Target_Gold::Time.text = pdiext::GetRaceTimeString(eval_condition.gold);
        var is_gold = self.best_order == 0;
        Trophy::Target::Hbox::Target_Gold::Check_on.visible = is_gold;
        Trophy::Target::Hbox::Target_Gold::Check_off.visible = !is_gold;

        Trophy::Target::Hbox::Target_Silver::Time.text = pdiext::GetRaceTimeString(eval_condition.silver);
        var is_silver = self.best_order == 0 || self.best_order == 1;
        Trophy::Target::Hbox::Target_Silver::Check_on.visible = is_silver;
        Trophy::Target::Hbox::Target_Silver::Check_off.visible = !is_silver;

        Trophy::Target::Hbox::Target_Bronze::Time.text = pdiext::GetRaceTimeString(eval_condition.bronze);
        var is_bronze = self.best_order == 0 || self.best_order == 1 || self.best_order == 2;
        Trophy::Target::Hbox::Target_Bronze::Check_on.visible = is_bronze;
        Trophy::Target::Hbox::Target_Bronze::Check_off.visible = !is_bronze;

        if (self.show_button)
        {
            context.cursor_visible = true;
            RaceMenuSimple.initialize(context);
        }
        else
        {
            context.cursor_visible = false;
            RaceMenuSimple::SBox0.ScalarInterpolator.reverse = true;
            RaceMenuSimple::SBox0.ScalarInterpolator.warp();
            ROOT.setFocus(ROOT);
        }

        Trophy.ScalarInterpolator.restart();
        Trophy.visible = true;

        bg.FadeActor.restart();
        bg.visible = true;

        context.addTimeOut("start_se", startSE, context);
        context.setTimeOut("start_se", 0.5);

        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        if (!self.show_button)
        {
            sound.play("cancel");
            close(context);
        }

        return EVENTRESULT_FILTER;
    }

    method onActivate(context)
    {
        if (!self.show_button)
        {
            sound.play("ok");
            close(context);
        }

        return EVENTRESULT_FILTER;
    }

    function onRestart(context)
    {
        if (RaceRoot.checkRemainTime())
        {
            main::sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        sound.play("ok");
        ROOT.result = true;
        RaceMenuSimple.terminate(context);
        ROOT.close(context);
        SoundUtil::BGMFadeout(3.0);
    }

    function onExit(context)
    {
        if (RaceRoot.checkRemainTime())
        {
            main::sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        sound.play("ok");
        RaceMenuSimple.terminate(context);
        ROOT.close(context);
        SoundUtil::BGMFadeout(3.0);
    }

    module RaceMenuSimple
    {
        method initialize(context)
        {
            var icons = [];
            icons.push(RaceMenuUtil::Icon("RESTART", "icon_restart.dds", onRestart));
            icons.push(RaceMenuUtil::Icon("EXIT", "icon_exit.dds", onExit));

            var item = hidden::RaceMenuItem;
            self.visible = true;
            var actor = self.SBox0.SBox1.Caption.FadeActor;

            actor.repeat = false;
            actor.out = false;
            actor.warp();

            self.SBox0::ScalarInterpolator.reverse = false;
            self.SBox0::ScalarInterpolator.restart();

            var listbox = self.SBox0.SBox1.ListBox;
            listbox.ScalarInterpolator.reverse = true;
            listbox.ScalarInterpolator.reset();

            var unit_w = item.w;
            listbox.keep_alignment = false;
            listbox.alignment = 0.5;
            listbox.interpolate_ratio = 0.2;
            listbox.ScalarInterpolator.start_value = unit_w;
            listbox.ScalarInterpolator.end_value = (unit_w + listbox.spacing) * icons.size - listbox.spacing;
            listbox.setItemTemplate(context, item);
            listbox.setItemCount(icons.size);
            listbox.focus_callback = listbox.onFocus;
            listbox.focus_active = true;

            for (var i = 0; i < icons.size; i++)
            {
                var icon = icons[i];
                var w = listbox.getItemWidget(i, context);
                w.icon = icon;
                icon.caption = manager.translate("QuickMenu", "caption_" + icon.caption_key);
                w.image.image_path = "/image/gt6/quick_menu/" + icon.image_path ;
                w.doInitialize(context);
                w.separator.visible = i != 0;
            }

            self.SBox0.visible = true;
            ROOT.setFocus(listbox);
        }

        method terminate(context)
        {
            var sbox1 = self.SBox0.SBox1;
            var listbox = sbox1.ListBox;
            var actor = sbox1.Caption.FadeActor;
            actor.out = true;
            self.SBox0.ScalarInterpolator.reverse = true;
            self.SBox0.ScalarInterpolator.start();

            var item = listbox.getItemWidget(listbox.focus_index, context);
            var a = listbox.w - item.w;
            a = a > 0 ? item.x / a : 0;

            listbox.keep_scroll_point = true;
            listbox.interpolate_ratio = 1.0;
            listbox.scroll_point = a;
            listbox.ScalarInterpolator.reverse = true;
            listbox.ScalarInterpolator.start();
            item.separator.visible = false;

            item.Blink.restart();
            context.cursor_visible = false;
            context.wait(0.8);
        }

        module SBox0::SBox1::ListBox
        {
            method onFocus(context, new_index, old_index)
            {
                var new_widget = self.getItemWidget(new_index, context);
                if (new_widget != nil)
                {
                    SBox1.Caption.label.text = new_widget.icon.caption;
                    var i = new_widget.image::VectorInterpolator;
                    i.reverse = false;
                    i.start();
                }

                var old_widget = self.getItemWidget(old_index, context);
                if (old_widget != nil)
                {
                    var i = old_widget.image::VectorInterpolator;
                    i.reverse = true;
                    i.start();
                }
            }

            method onActivate(context)
            {
                var widget = self.getItemWidget(self.focus_index, context);
                if (widget != nil)
                {
                    widget.icon.func(context);
                }

                return EVENTRESULT_FILTER;
            }
        }
    }

    module hidden::RaceMenuItem
    {
        attribute icon;
    }
}