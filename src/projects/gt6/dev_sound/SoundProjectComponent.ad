module SoundProjectComponent::Tooltip::HDToolTip
{
    SCALE_WIDGET_SDTV(tip, 2.6);
}

module SoundProjectComponent::Buttons::CancelOK::Cancel
{
    method onFocusLeave(context)
    {
        var root = context.getRootWindow();
        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context)
    {
        var root = context.getRootWindow();
        return EVENTRESULT_FILTER;
    }

    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(labeli, 2.4);
}

module SoundProjectComponent::Buttons::CancelOK::Cancel::bgf
{
    method __init__()
    {
        self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = 0.25;
        self.actor.repeat = true;
    }
}

module SoundProjectComponent::Buttons::CancelOK::OK
{
    method onFocusLeave(context)
    {
        var root = context.getRootWindow();
        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context)
    {
        var root = context.getRootWindow();
        return EVENTRESULT_FILTER;
    }

    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(labeli, 2.4);
}

module SoundProjectComponent::Buttons::CancelOK::OK::bgf
{
    method __init__()
    {
        self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = 0.25;
        self.actor.repeat = true;
    }
}

module SoundProjectComponent::Buttons::oval
{
    method onFocusLeave(context)
    {
        var root = context.getRootWindow();
        return EVENTRESULT_FILTER;
    }

    method onFocusEnter(context)
    {
        var root = context.getRootWindow();
        return EVENTRESULT_FILTER;
    }

    SCALE_WIDGET_SDTV(label, 2.4);

    method decide(context)
    {
        var bgf = self.bgf;
        bgf.actor.period = 0.05;
        context.sync(0.5);
        bgf.actor.period = 0.25;
        bgf.actor.out = false;
        bgf.actor.warp();
    }
}

module SoundProjectComponent::Buttons::oval::bgf
{
    method __init__()
    {
        self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = 0.25;
        self.actor.repeat = true;
    }
}

module SoundProjectComponent::HDPulldown::OptionMenu
{
    method onRealize(manager)
    {
        self.copy_selected_item = false;
    }

    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(labeli, 2.4);

    method pulldownValueChanged(context)
    {
        var current_item = self.getItem(self.index);
        if (current_item != nil)
        {
            self["label"].text = current_item["label"].text;
            self["label"].abbreviate = true;

            if (self.defined("labeli"))
            {
                self["labeli"].text = self["label"].text;
                self["labeli"].abbreviate = true;
            }

            if (self.defined("labela"))
            {
                self["labela"].text = self["label"].text;
                self["labela"].abbreviate = true;
            }
        }
    }

    method onValueChanged(context)
    {
        pulldownValueChanged(context);
    }
}

module SoundProjectComponent::HDPulldown::Item
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module SoundProjectComponent::HDSlider::slider
{
    function default_format_function(value, scale, range, format, zero_text)
    {
        var v = scale * value;
        if (v == 0 && zero_text != nil)
            return zero_text;
        return format.format(v);
    }

    attribute arg = nil;
    attribute bias = nil;
    attribute zero_text = nil;
    attribute unit_text = nil;
    attribute decide_cb = nil;
    attribute initialized = nil;
    attribute step_thr = nil;
    attribute format_function = nil;
    attribute format_string = nil;

    method onRealize(manager)
    {
        if (pdiext::MSystemConfiguration::isSDTV())
        {
            var pup = self["popup"];
            label.scale_x = 2.4;
            label.scale_y = 2.4;
            labeli.scale_x = 2.4;
            labeli.scale_y = 2.4;
            pup.min.scale_x = 2.4;
            pup.min.scale_y = 2.4;
            pup.max.scale_x = 2.4;
            pup.max.scale_y = 2.4;
            pup.Value.label.scale_x = 2.4;
            pup.Value.label.scale_y = 2.4;
            pup.Value.label.adjust_scale = false;
            pup.base.pack_fill_x = false;
            pup.min.adjust_scale = false;
            pup.max.adjust_scale = false;
        }
    }

    method onInitialize(context)
    {
        if (!self.defined("initialized"))
            return;

        self.bias = 1;
        self.zero_text = nil;
        self.unit_text = nil;
        self.decide_cb = nil;
        self.step_thr = nil;
        self.format_function = nil;
        self.format_string = nil;
        self.initialized = true;
    }

    method onFinalize(context)
    {
        if (!self.defined("initialized"))
            return;

        self.initialized = nil;
        self.bias = nil;
        self.zero_text = nil;
        self.unit_text = nil;
        self.decide_cb = nil;
        self.step_thr = nil;
        self.format_function = nil;
        self.format_string = nil;
    }

    method onPopupOpen(context)
    {
        if (self.initialized != nil)
        {
            self.sliderPopupOpen(context);
        }
    }

    method onPopupClosed(context)
    {
        if (self.initialized != nil)
        {
            self.sliderPopupClosed(context);
        }
    }

    method onValueChanged(context)
    {
        if (self.initialized != nil)
        {
            self.sliderValueChanged(context);
        }
    }

    method onStepChanged(context)
    {
        if (self.step_thr != nil)
        {
            self.on_step_changed();
        }
    }

    method on_step_changed()
    {
        var x = self.value - self.repeat_start;
        x /= 4.0;
        if (x < 0.0)
            x = -x;
        if (x < 1.0)
            x = 1.0;
        if (x > self.step_thr)
            x = self.step_thr;
        self.step = x;
    }

    method callFormatFunction(value)
    {
        // ?. support maybe?
        return self.format_function == nil ? "" : self.format_function(value, self.bias, [self.min, self.max], self.format_string, self.zero_text);
    }

    method setup(context, bias = 1, zero_text, unit_text, bar_on = true, step_thr)
    {
        self.bias = nil;
        self.bias = bias;
        self.zero_text = zero_text;
        self.unit_text = unit_text;
        self.step_thr = step_thr;
        if (self.format_function == nil)
            self.format_function = default_format_function;
        if (self.format_string == nil)
            self.format_string = "%d";
        var pup = self["popup"];
        var min_w = pup.base.w;
        pup.base.w = min_w;
        pup.base.bar.bar.visible = bar_on;
        pup.min.text = callFormatFunction(self.min);
        pup.max.text = callFormatFunction(self.max);
        self.reflect(context);
    }

    method reflect(context)
    {
        if (self.zero_text != nil && self.index == 0)
            self.label.text = self.zero_text;
        else
        {
            self.label.text = callFormatFunction(self.index);
            if (self.unit_text != nil)
                self.label.text += self.unit_text;
        }

        if (self.defined("labeli"))
            self.labeli.text = self.label.text;
    }

    method sliderValueChanged(context)
    {
        var pup = self["popup"];
        var ratio = 0.0;
        var range = self.display_max - self.display_min;
        var bar_w = self.index - self.display_min;
        if (bar_w != 0 && range != 0)
            ratio = bar_w.toFloat() / range.toFloat();
        pup.base.bar.bar.w = pup.base.bar.w * ratio;
        pup.Value.label.text = callFormatFunction(self.index);
        self.doInitialize(context);
    }

    method sliderPopupOpen(context)
    {
        self.sliderValueChanged(context);
        var pup = self["popup"];
        pup.base.bar.pinch.x = pup.base.bar.bar.w;
    }

    method sliderPopupClosed(context)
    {
        if (!self.cancel)
        {
            self.reflect(context);
            if (self.decide_cb != nil)
            {
                self.decide_cb(context, self.index, self);
            }
        }
    }
}

module SoundProjectComponent::HDSlider2::slider
{
    attribute arg = nil;
    attribute initialized = nil;
    attribute zero_text = nil;
    attribute unit_text = nil;
    attribute decide_callback = nil;
    attribute format_callback = nil;
    attribute is_zero_callback = nil;
    attribute format_string = nil;
    attribute shadow_x = nil;
    attribute shadow_y = nil;
    attribute quantizer = nil;
    attribute step_thr = nil;

    method onRealize(manager)
    {
        self.initialized = true;
        self.zero_text = nil;
        self.unit_text = nil;
        self.decide_callback = nil;
        self.format_callback = nil;
        self.is_zero_callback = nil;
        self.format_string = nil;
        self.quantizer = 1.0;
        self.step_thr = nil;
        var pup = self['popup'];
        self.shadow_x = pup.shadow.x;
        self.shadow_y = pup.shadow.y;

        if (pdiext::MSystemConfiguration::isSDTV())
        {
            label.scale_x = 2.4;
            label.scale_y = 2.4;
            labeli.scale_x = 2.4;
            labeli.scale_y = 2.4;
            pup.min.scale_x = 2.4;
            pup.min.scale_y = 2.4;
            pup.max.scale_x = 2.4;
            pup.max.scale_y = 2.4;
            pup.Value.label.scale_x = 2.4;
            pup.Value.label.scale_y = 2.4;
            pup.Value.label.adjust_scale = false;
            pup.base.pack_fill_x = false;
            pup.min.adjust_scale = false;
            pup.max.adjust_scale = false;
        }
    }

    method onInitialize(context)
    {
        self.initialized = true;
        var pup = self['popup'];
        pup.shadow.x = self.shadow_x;
        pup.shadow.y = self.shadow_y;
    }

    method onFinalize(context)
    {
        self.initialized = false;
        self.zero_text = nil;
        self.unit_text = nil;
        self.decide_callback = nil;
        self.format_callback = nil;
        self.is_zero_callback = nil;
        self.format_string = nil;
        self.step_thr = nil;
    }

    method onStepChanged(context)
    {
        if (self.step_thr != nil)
        {
            self.on_step_changed();
        }
    }

    method on_step_changed()
    {
        var x = self.value - self.repeat_start;
        x /= 4.0;
        if (x < 0.0)
            x = -x;
        if (x < 1.0)
            x = 1.0;
        if (x > self.step_thr)
            x = self.step_thr;
        self.step = x;
    }

    method onPopupOpen(context)
    {
        self.sliderPopupOpen(context);
    }

    method onPopupClosed(context)
    {
        self.sliderPopupClosed(context);
    }

    method onValueChanged(context)
    {
        self.sliderValueChanged(context);
    }

    function default_value_format_function(context, value, slider)
    {
        if (slider.zero_text != nil && slider.is_zero_callback(value, slider))
            return slider.zero_text;

        var q = Math::round(value * slider.quantizer);
        return slider.format_string.format(q);
    }

    function default_is_zero_function(value, slider)
    {
        var q = Math::round(value * slider.quantizer);
        return q == 0.0;
    }

    method call_format_func(context, value)
    {
        return self.format_callback(context, value, self);
    }

    method setup(context, dummy0, dummy1, dummy2)
    {
        if (self.format_callback == nil)
            self.format_callback = default_value_format_function;

        if (self.is_zero_callback == nil)
            self.is_zero_callback = default_is_zero_function;

        var stepscale = Math::log10(self.step);
        var precision = stepscale >= 0.0 ? 0 : Math::ceil(-stepscale).toInt();
        self.quantizer = 10.0 ** precision;
        
        if (precision <= 0)
            self.format_string = "%d";
        else
            self.format_string = "%." + precision.toString() + "t";

        var pup = self['popup'];
        pup.min.text = call_format_func(context, self.min);
        pup.max.text = call_format_func(context, self.max);
        self.reflect(context);
    }

    method reflect(context)
    {
        var text;
        if (self.zero_text != nil && self.is_zero_callback(value, self))
            text = self.zero_text;
        else
        {
            text = call_format_func(context, self.value);
            if (self.unit_text != nil)
                text += self.unit_text;
        }

        self.label.text = text;
        if (self.defined('labeli'))
            self.labeli.text = text;
    }

    method sliderPopupOpen(context)
    {
        self.sliderValueChanged(context);
    }

    method sliderPopupClosed(context)
    {
        if (!self.initialized)
            return;

        if (!self.cancel)
        {
            self.reflect(context);
            if (self.decide_callback != nil)
            {
                self.decide_callback(context, self.value, self);
            }
        }
    }

    method sliderValueChanged(context)
    {
        if (!self.initialized)
            return;

        var pup = self['popup'];
        var range = self.display_max - self.display_min;
        var ratio = range == 0.0 ? 0.0 : (self.value - self.display_min) / range;
        pup.base.bar.bar.w = pup.base.bar.w * ratio;
        pup.Value.label.text = call_format_func(context, self.value);
    }
}