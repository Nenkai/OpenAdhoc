













module ROOT
{
    #include "projects/gt6/option/KeyConfig.h"
    #include "projects/gt6/option/G25Root.h"

    static sPort = nil;
    static sConfig = nil;
    static sConfig_PANTHER = nil;
    static sOptionMenuMap = [:];

    static sKeyList = [
        sKey_L1,
        sKey_R1,
        sKey_L2,
        sKey_R2,
        sKey_TRIANGLE,
        sKey_SQUARE,
        sKey_CROSS,
        sKey_CIRCLE,
        sKey_UP,
        sKey_LEFT,
        sKey_DOWN,
        sKey_RIGHT,
        sKey_L3,
        sKey_SELECT,
        sKey_START,
        sKey_R3,
        sKey_SHIFTDOWN,
        sKey_SHIFTUP
    ];

    hidden.visible = false;

    method open(context, port)
    {
        sPort = port;

        SettingFrame2.appear();
        SequenceUtil::pushPage(context, self);
    }

    method close(context)
    {
        var delay_time = SettingFrame2.hide();
        SequenceUtil::popPage(context, self, delay_time);
    }

    method create_pulldowns(context)
    {
        for (var i = 0; i < sKeyList.size; i++)
        {
            var key_info = sKeyList[i];
            var pulldown = hidden::Pulldown.doCopy(context);
            pulldown.initialize(context, key_info);
            SettingFrame2::Pane::Right::ScrolledBody::clip::space.appendChild(context, pulldown);
            sOptionMenuMap[key_info.name] = pulldown;
        }

        var default_button = hidden::Default.doCopy(context);
        default_button.defineAttribute("is_default_button", true);
        SettingFrame2::Pane::Right::ScrolledBody::clip::space.appendChild(context, default_button);
    }
    
    method delete_pulldowns(context)
    {
        SettingFrame2::Pane::Right::ScrolledBody::clip::space.clearChildren(context);
        SettingFrame2::Pane::Right::ScrolledBody::clip::space.y = 0.0;
    }

    method putlog(context)
    {

    }

    method reflect(context)
    {
        for (var pulldown = SettingFrame2::Pane::Right::ScrolledBody::clip::space.first; pulldown != nil; pulldown = pulldown.next)
        {
            if (!pulldown.defined("is_default_button"))
                pulldown.reflect(context);
        }
    }

    method apply(context)
    {
        for (var pulldown = SettingFrame2::Pane::Right::ScrolledBody::clip::space.first; pulldown != nil; pulldown = pulldown.next)
        {
            if (!pulldown.defined("is_default_button"))
                pulldown.apply(context);
        }

        main::GAME_STATUS.user_profile.option.key_config.setConfig(sConfig, sPort);
        self.putlog(context);
    }

    method onInitialize(context)
    {
        if (gDirectApplyMode)
            SettingFrame2::Pane::Right::Foot.visible = false;

        var steer = context.translate(ROOT, "SteeringPartName", "G25");
        var logitech = LocalizeUtil::GetLogitechName();
        SettingFrame2::Pane::Head::label.text = "%{logitech} %{steer}";

        SettingFrame2::ToolTip::tip.remove();

        sConfig = main::GAME_STATUS.user_profile.option.key_config.getConfig(sPort);
        var play_config = sConfig[main::gtengine::InputMode::PLAY_NORMAL];
        sConfig_PANTHER = play_config["PANTHER"];

        create_pulldowns(context);
        reflect(context);
    }

    method onFinalize(context)
    {
        sPort = nil;
        sConfig = nil;
        sConfig_PANTHER = nil;
        sOptionMenuMap = [:];
        delete_pulldowns(context);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");

        if (gDirectApplyMode)
        {
            ROOT.apply();
            ROOT.close(context);
        }
        else
            ROOT.setFocus(SettingFrame2::Pane::Right::Foot::Cancel);

            return EVENTRESULT_FILTER;
        }

    module hidden::Pulldown
    {
        attribute info_;
        attribute popup_opened_;
        attribute tmp_index_;

        method initialize(context, key_info)
        {
            self.info_ = key_info;
            self.popup_opened_ = false;
            self.tmp_index_ = 0;

            if (SettingFrame2::Pane::Left::View.defined(self.info_.name))
                SettingFrame2::Pane::Left::View[self.info_.name].visible = false;

            self.label.text = context.translate(ROOT, "SteeringPartName", self.info_.name);
            self.OptionMenu::label_a.scale_x = self.OptionMenu::label.scale_x;
            self.OptionMenu::label_a.scale_y = self.OptionMenu::label.scale_y;
            self.OptionMenu.active = false;
        }

        method reflect(context)
        {
            var info = self.info_;
            if (info.analog_channel != nil)
            {
                var port_channel = main::pdistd::SuperPortAnalogChannel[info.analog_channel];
                var analog_config = ROOT.sConfig_PANTHER["analog"];
                var key_config = analog_config[port_channel];

                var select_index = info.key_action_list.indexOf(0x800 | key_config);
                if (select_index > -1)
                {
                    var analog_action_bit = info.key_action_list[select_index] - 0x800;
                    var localize_key = sAnalogCodeMap_forLocalizeKey[analog_action_bit];

                    self.OptionMenu::label.text = context.translate(ROOT, "Keyconfig", localize_key);
                    self.OptionMenu::label_a.active = false;

                    self.tmp_index_ = select_index;
                }
            }

            if (info.button_channel != nil)
            {
                var port_channel = main::pdistd::SuperPortButtonBit[info.button_channel];
                var button_config = ROOT.sConfig_PANTHER["button"];
                var key_config = button_config[port_channel];
                var select_index = info.key_action_list.indexOf(0x400 | key_config);

                if (select_index > -1)
                {
                    var button_action_bit = info.key_action_list[select_index] - 0x400;
                    var localize_key = sButtonCodeMap_forLocalizeKey[button_action_bit];

                    self.OptionMenu::label.text = context.translate(ROOT, "Keyconfig", localize_key);
                    self.OptionMenu::label_a.active = false;

                    self.tmp_index_ = select_index;
                }
            }

            self.OptionMenu.setIndex(context, self.tmp_index_);
        }

        method create_items(context)
        {
            var action_list = self.info_.key_action_list;
            var vbox = self.OptionMenu::popup::vbox;

            vbox.clearWindow(context);
            
            var focus_index = action_list.size - 1;

            for (var i = 0; i < action_list.size; i++)
            {
                var item = hidden::PulldownItem.doCopy();
                var localize_key = "";
                
                if (action_list[i] & 0x800)
                    localize_key = sAnalogCodeMap_forLocalizeKey[action_list[i] - 0x800];
                else if (action_list[i] & 0x400)
                    localize_key = sButtonCodeMap_forLocalizeKey[action_list[i] - 0x400];

                item.label.text = context.translate(ROOT, "Keyconfig", localize_key);
                item.label.adjustScale();

                vbox.appendChild(context, item);
                if (i == self.tmp_index_)
                    focus_index = i;
            }

            self.OptionMenu.applyAppend(context);
            self.OptionMenu.setIndex(context, focus_index);
            self.popup_opened_ = true;
        }

        method apply(context)
        {
            if (!self.popup_opened_)
                return;

            var focus_index = self.OptionMenu.index;
            var current_action = self.info_.key_action_list[focus_index];

            if (self.info_.analog_channel != nil)
            {
                var port_channel = main::pdistd::SuperPortAnalogChannel[self.info_.analog_channel];
                var analog_config = sConfig_PANTHER["analog"];
                
                if (current_action & 0x800)
                {
                    analog_config[port_channel] = current_action - 0x800;
                    var after = sAnalogCodeMap_forLocalizeKey[analog_config[port_channel]];
                }
                else
                    analog_config[port_channel] = main::gtengine::AnalogCode::INVALID;
            }

            if (self.info_.button_channel != nil)
            {
                var port_channel = main::pdistd::SuperPortButtonBit[self.info_.button_channel];
                var button_config = sConfig_PANTHER["button"];

                if (current_action & 0x400)
                {
                    button_config[port_channel] = current_action - 0x400;
                    var after = sButtonCodeMap_forLocalizeKey[button_config[port_channel]];
                }
                else
                    button_config[port_channel] = main::gtengine::ButtonCode::INVALID;
            }
        }

        method on_focus_enter(context)
        {
            if (SettingFrame2::Pane::Left::View.defined(self.info_.name))
                SettingFrame2::Pane::Left::View[self.info_.name].visible = true;

            var txt_partname = context.translate(ROOT, "SteeringPartName", self.info_.name);
            var tip_format = context.translate(ROOT, "Keyconfig", "TOOLTIP|Format");
            var tip_text = tip_format.build(txt_partname);

            SettingFrame2::ToolTip::tip.value = tip_format.build(txt_partname);
        }

        method on_focus_leave(context)
        {
            if (SettingFrame2::Pane::Left::View.defined(self.info_.name))
                SettingFrame2::Pane::Left::View[self.info_.name].visible = false;

            SettingFrame2::ToolTip::tip.value = "";
        }

        method on_popup_open(context)
        {
            if (!self.popup_opened_)
                self.create_items(context);

            self.tmp_index_ = self.OptionMenu.index;
        }

        method on_popup_closed(context)
        {
            var focus_index = self.OptionMenu.index;
            var link_list = self.info_.key_link_list;

            if (self.tmp_index_ != focus_index)
            {
                self.OptionMenu::label_a.text = self.OptionMenu::label.text;
                self.OptionMenu.active = true;

                if (link_list != nil)
                {
                    var src_action = self.info_.key_action_list[self.tmp_index_];
                    var dst_action = self.info_.key_action_list[focus_index];

                    var res = self.info_.findKeyLinkTarget(src_action, dst_action);
                    if (res != nil)
                    {
                        var t_name = res[0];
                        var t_action = res[1];
                        var t_pulldown = sOptionMenuMap[t_name];
                        var t_action_list = t_pulldown.info_.key_action_list;
                        var t_action_idx = t_action_list.indexOf(t_action);

                        t_pulldown.on_popup_open(context);
                        
                        var t_option_menu = t_pulldown.OptionMenu;
                        t_option_menu.setIndex(context, t_action_idx);
                        t_option_menu.label_a.text = t_option_menu.label.text;
                        t_option_menu.active = true;
                    }
                }
            }
        }

        module OptionMenu
        {
            method onFocusEnter(context)
            {
                self.parent.on_focus_enter(context);
                return EVENTRESULT_STOP;
            }

            method onFocusLeave(context, event)
            {
                if (self != event.widget)
                    return EVENTRESULT_STOP;

                self.parent.on_focus_leave(context);
                return EVENTRESULT_STOP;
            }

            method onPopupOpen(context)
            {
                self.parent.on_popup_open(context);
                return EVENTRESULT_STOP;
            }

            method onPopupClosed(context)
            {
                self.parent.on_popup_closed(context);
                return EVENTRESULT_STOP;
            }

            module popup
            {
                method onFocusEnter(context)
                {
                    return EVENTRESULT_STOP;
                }
            }
        }
    }

    module hidden::Default
    {
        function onActivate(context)
        {
            main::sound.play("ok");

            var option = main::GAME_STATUS.user_profile.option;
            var config_default = option.default_panther;

            var key_config = option.key_config.getConfig(sPort);

            var panther = [:];
            panther.deserialize(option.default_panther.serialize());
            key_config[main::gtengine::InputMode::PLAY_NORMAL]["PANTHER"] = panther;

            option.key_config.setConfig(key_config, sPort);

            ROOT.sConfig = option.key_config.getConfig(sPort);
            ROOT.sConfig_PANTHER = ROOT.sConfig[main::gtengine::InputMode::PLAY_NORMAL]["PANTHER"];

            ROOT.reflect(context);
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame2::Pane::Right::Foot::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.apply();
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame2::Pane::Right::Foot::Cancel
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }
}