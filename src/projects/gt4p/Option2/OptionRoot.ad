module PROJECT::ROOT
{
	static panes = [
		ScreenPane,
		RacePane,
		MemcardPane,
		ControllerPane,
		SteeringPane
	];
	static port_watcher;

	function setActor(widget)
	{
		widget.actor = main::menu::MBlinkActor(widget);
		widget.actor.period = 0.25;
	}


	function onLoad()
	{
		setActor(SelectBar::Screen::bga);
		setActor(SelectBar::Race::bga);
		setActor(SelectBar::Memcard::bga);
		setActor(SelectBar::Controller::bga);
		setActor(SelectBar::Steering::bga);
	
		ScreenPane::setActors();
		RacePane::setActors();
		MemcardPane::setActors();
		ControllerPane::setActors();
		SteeringPane::CougarPane::setActors();
		SteeringPane::CheetahPane::setActors();
	}


		function showPane(context, index)
	{
		if (index >= panes.size)
			index = panes.size - 1;
	
		for (var i = 0; i < panes.size; i++)
		{
			panes[i].visible = (i == index);
		}
	}

	function reflectOptionAll()
	{
		var option = main::game.getOption();
	
		for (var i = 0; i < panes.size; i++)
		{
			panes[i]["reflectOption"](option);
		}
	}
	
	function activatePane(context, index)
	{
		if (index >= panes.size)
			index = panes.size - 1;
	
		SelectBar.can_focus = false;
		return panes[index]["activatePane"](context);
	}

	function deactivatePane(context)
	{
		SelectBar.can_focus = true;
		ROOT.setFocus(SelectBar);
		SelectBar::sync_activation();
	}


	function move_cursor(buttons, keysym)
	{
		var index = 0;
		var size = buttons.size;
	
		for (;index < size; index++) // This doesn't seem right, but matches
		{
			if (buttons[index].active)
				break;
		}
	
		if (keysym == PS2_PAD_CTRL_L3_LEFT)
		{
			index--;
		}
		else if (keysym == PS2_PAD_CTRL_L3_RIGHT)
		{
			index++;
		}
		else
			return EVENTRESULT_CONTINUE;
	
		if (index < 0 || index >= buttons.size)
			return EVENTRESULT_FILTER;
	
		for (var i = 0; i < size; i++)
		{
			if (i == index)
			{
				buttons[i].active = true;
				ROOT.setFocus(buttons[i]);
			}
			else
				buttons[i].active = false;
		}
	
		main::sound.play("select");
		return EVENTRESULT_FILTER;
	}

	function onInitialize(context)
	{
		var first_index = 0;
		SelectBar.index = first_index;
		showPane(context, first_index);
		SelectBar::sync_activation();
	
		port_watcher = main::menu::MScriptWatcher(context, SteeringPane, "onCheck");
		port_watcher.interval = 30;
		port_watcher.append();
	
		SteeringPane::onCheck(context);
		SteeringPane::reflesh_visibility(context);
		reflectOptionAll();
	}


	function onFinalize(context)
	{
		port_watcher.remove();
		port_watcher = nil;
	}
	
	function onCancel(context, item)
	{
		main::sound.play("cancel");
		main::game.next_menu_project = main::game.last_menu_project;
		context.transition.panOut(context);
		context.transition.syncOut(context);
		context.finish();
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::SelectBar
{
	function sync_activation()
	{
		Screen::sankaku.visible = false;
		Race::sankaku.visible = false;
		Memcard::sankaku.visible = false;
		Controller::sankaku.visible = false;
		Steering::sankaku.visible = false;
	
		Screen::sankaku2.visible = false;
		Race::sankaku2.visible = false;
		Memcard::sankaku2.visible = false;
		Controller::sankaku2.visible = false;
		Steering::sankaku2.visible = false;
	
		var widget = SelectBar.getFocusedWidget();
		widget["sankaku"].visible = true;
	}

	function onValueChanged(context, index)
	{
		main::sound.play("cursor");
		ROOT::showPane(context, index);
		sync_activation();
	}
	
	function onActivate(context, item)
	{
		var success = activatePane(context, SelectBar.index);
		if (success)
		{
			main::sound.play("ok");
			var widget = SelectBar.getFocusedWidget();
			widget["sankaku"].visible = false;
			widget["sankaku2"].visible = true;
		}
		else
			main::sound.play("disable");
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::ScreenPane
{
	function setActors()
	{
		ROOT::setActor(Aspect::Normal::bgfa);
		ROOT::setActor(Aspect::Wide::bgfa);
		ROOT::setActor(PosHSlider::pinch::bgf);
		ROOT::setActor(PosVSlider::pinch::bgf);
		ROOT::setActor(Decision::Confirm::bgf);
		ROOT::setActor(Decision::Cancel::bgf);
		ROOT::setActor(Decision::Default::bgf);
	}
	
	function reflectOption(option)
	{
		Aspect::Normal.active = !option.wide_mode;
		Aspect::Wide.active = option.wide_mode;
	
		PosHSlider.index = option.screen_adjust_h;
		PosHSlider::pinch::Text.text = option.screen_adjust_h;
	
		PosVSlider.index = option.screen_adjust_v;
		PosVSlider::pinch::Text.text = option.screen_adjust_v;
	}


	function confirmOption()
	{
		var option = main::game.getOption();
		option.wide_mode = Aspect::Wide.active;
		option.screen_adjust_h = PosHSlider.index;
		option.screen_adjust_v = PosVSlider.index;
		main::game.setOption(option);
	}
	
	function applyOption()
	{
		var option = main::game.getOption();
		option.wide_mode = Aspect::Wide.active;
		option.screen_adjust_h = PosHSlider.index;
		option.screen_adjust_v = PosVSlider.index;
		option.apply();
	}


	function activatePane(context)
	{
		Aspect::Normal.can_focus = true;
		Aspect::Wide.can_focus = true;
		PosHSlider::pinch.can_focus = true;
		PosVSlider::pinch.can_focus = true;
		Decision::Confirm.can_focus = true;
		Decision::Cancel.can_focus = true;
		Decision::Default.can_focus = true;
	
		if (Aspect::Normal.active)
			ROOT.setFocus(Aspect::Normal);
		else
			ROOT.setFocus(Aspect::Wide);
	
		return true;
	}


	function deactivatePane(context)
	{
		Aspect::Normal.can_focus = false;
		Aspect::Wide.can_focus = false;
		PosHSlider::pinch.can_focus = false;
		PosVSlider::pinch.can_focus = false;
		Decision::Confirm.can_focus = false;
		Decision::Cancel.can_focus = false;
		Decision::Default.can_focus = false;
		ROOT::deactivatePane(context);
	}
	
	
	function onActivate(context, item)
	{
		main::sound.play("ok");
		ROOT.setFocus(Decision::Confirm);
		return EVENTRESULT_FILTER;
	}
	
	function onCancel(context, item)
	{
		main::sound.play("cancel");
		var option = main::game.getOption();
		reflectOption(option);
		option.apply();
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::ScreenPane::Aspect
{
	static buttons = [Normal, Wide];
	
	function onKeyPress(context, key_event)
	{
		move_cursor(buttons, key_event.keysym);
		return;
	}
}

module PROJECT::ROOT::ScreenPane::PosHSlider
{
	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L3_UP)
		{
			main::sound.play("cursor");
	
			if (Aspect::Normal.active)
				ROOT.setFocus(Aspect::Normal);
			else
				ROOT.setFocus(Aspect::Wide);
	
			return EVENTRESULT_FILTER;
		}
	
		return EVENTRESULT_CONTINUE;
	}
	
	function onValueChanged(context, index)
	{
		main::sound.play("cursor");
		pinch::Text.text = index;
		applyOption();
	}
}

module PROJECT::ROOT::ScreenPane::PosVSlider
{
	function onValueChanged(context, index)
	{
		main::sound.play("cursor");
		pinch::Text.text = index;
		applyOption();
	}
}

module PROJECT::ROOT::ScreenPane::Decision
{
	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L3_DOWN)
		{
			main::sound.play("cursor");
	
			if (Aspect::Normal.active)
				ROOT.setFocus(Aspect::Normal);
			else
				ROOT.setFocus(Aspect::Wide);
	
			return EVENTRESULT_FILTER;
		}
		else if (key_event.keysym == PS2_PAD_CTRL_L3_UP )
		{
			main::sound.play("cursor");
			ROOT.setFocus(PosVSlider::pinch);
			return EVENTRESULT_FILTER;
		}
	
		return EVENTRESULT_CONTINUE;
	}
}

module PROJECT::ROOT::ScreenPane::Decision::Confirm
{
	function onActivate(context, item)
	{
		main::sound.play("ok");
		confirmOption();
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::ScreenPane::Decision::Cancel
{
	function onActivate(context, item)
	{
		main::sound.play("cancel");
		var option = main::game.getOption();
		reflectOption(option);
		option.apply();
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::ScreenPane::Decision::Default
{
	function onActivate(context, item)
	{
		main::sound.play("ok");
		var option = main::menu::MOption();
		reflectOption(option);
		confirmOption();
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::RacePane
{
	function setActors()
	{
		ROOT::setActor(ReplayBGM::On::bgfa);
		ROOT::setActor(ReplayBGM::Off::bgfa);
		ROOT::setActor(TCS::On::bgfa);
		ROOT::setActor(TCS::Off::bgfa);
		ROOT::setActor(Enemy::On::bgfa);
		ROOT::setActor(Enemy::Off::bgfa);
		ROOT::setActor(Difficulty::Easy::bgfa);
		ROOT::setActor(Difficulty::Hard::bgfa);
		ROOT::setActor(Difficulty::Pro::bgfa);
		ROOT::setActor(Decision::Confirm::bgf);
		ROOT::setActor(Decision::Cancel::bgf);
		ROOT::setActor(Decision::Default::bgf);
	}


	function reflectOption(option)
	{
		ReplayBGM::On.active  = option.replay_bgm;
		ReplayBGM::Off.active = !option.replay_bgm;
	
		TCS::On.active  = option.assist_tcs;
		TCS::Off.active = !option.assist_tcs;
	
		Enemy::On.active  = option.run_with_enemies;
		Enemy::Off.active = !option.run_with_enemies;
	
		if (option.difficulty == 0)
		{
			Difficulty::Easy.active = true;
			Difficulty::Hard.active = false;
			Difficulty::Pro.active  = false;
		}
		else if (option.difficulty == 1)
		{
			Difficulty::Easy.active = false;
			Difficulty::Hard.active = true;
			Difficulty::Pro.active  = false;
		}
		else
		{
			Difficulty::Easy.active = false;
			Difficulty::Hard.active = false;
			Difficulty::Pro.active  = true;
		}
	}


	function confirmOption()
	{
		var option = main::game.getOption();
	
		option.assist_tcs       = TCS::On.active;
		option.replay_bgm       = ReplayBGM::On.active;
		option.run_with_enemies = Enemy::On.active;
	
		if (Difficulty::Easy.active)
			option.difficulty = 0;
		else if (Difficulty::Hard.active)
			option.difficulty = 1;
		else
			option.difficulty = 2;
	
		main::game.setOption(option);
	}


	function activatePane(context)
	{
		ReplayBGM::On.can_focus       = true;
		ReplayBGM::Off.can_focus      = true;
		TCS::On.can_focus             = true;
		TCS::Off.can_focus            = true;
		Enemy::On.can_focus           = true;
		Enemy::Off.can_focus          = true;
		Difficulty::Easy.can_focus    = true;
		Difficulty::Hard.can_focus    = true;
		Difficulty::Pro.can_focus     = true;
		Decision::Confirm.can_focus   = true;
		Decision::Cancel.can_focus    = true;
		Decision::Default.can_focus   = true;
	
		if (ReplayBGM::On.active)
			ROOT.setFocus(ReplayBGM::On);
		else
			ROOT.setFocus(ReplayBGM::Off);
		
		return true;
	}


	function deactivatePane(context)
	{
		ReplayBGM::On.can_focus        = false;
		ReplayBGM::Off.can_focus       = false;
		TCS::On.can_focus              = false;
		TCS::Off.can_focus             = false;
		Enemy::On.can_focus            = false;
		Enemy::Off.can_focus           = false;
		Difficulty::Easy.can_focus     = false;
		Difficulty::Hard.can_focus     = false;
		Difficulty::Pro.can_focus      = false;
		Decision::Confirm.can_focus    = false;
		Decision::Cancel.can_focus     = false;
		Decision::Default.can_focus    = false;
	
		ROOT::deactivatePane(context);
	}


	function onActivate(context, item)
	{
		main::sound.play("ok");
		ROOT.setFocus(Decision::Confirm);
		return EVENTRESULT_FILTER;
	}

	function onCancel(context, item)
	{
		main::sound.play("cancel");
	
		var option = main::game.getOption();
		reflectOption(option);
		option.apply();
	
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::RacePane::ReplayBGM
{
	static buttons = [On, Off];
	
	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L3_DOWN)
		{
			main::sound.play("cursor");
	
			if (TCS::On.active)
				ROOT.setFocus(TCS::On);
			else
				ROOT.setFocus(TCS::Off);

			return EVENTRESULT_FILTER;
		}
		else
			return move_cursor(buttons, key_event.keysym);
	}
}

module PROJECT::ROOT::RacePane::TCS
{
	static buttons = [On, Off];
	
	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L3_UP)
		{
			main::sound.play("cursor");
	
			if (ReplayBGM::On.active)
				ROOT.setFocus(ReplayBGM::On);
			else
				ROOT.setFocus(ReplayBGM::Off);
	
			return EVENTRESULT_FILTER;
		}
		else if (key_event.keysym == PS2_PAD_CTRL_L3_DOWN)
		{
			main::sound.play("cursor");
	
			if (Enemy::On.active)
				ROOT.setFocus(Enemy::On);
			else
				ROOT.setFocus(Enemy::Off);
	
			return EVENTRESULT_FILTER;
		}
		else
	
			return move_cursor(buttons, key_event.keysym);
	}
}

module PROJECT::ROOT::RacePane::Enemy
{
	static buttons = [On, Off];

	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L3_UP)
		{
			main::sound.play("cursor");
	
			if (TCS::On.active)
				ROOT.setFocus(TCS::On);
			else
				ROOT.setFocus(TCS::Off);
	
			return EVENTRESULT_FILTER;
		}
		else if (key_event.keysym == PS2_PAD_CTRL_L3_DOWN)
		{
			main::sound.play("cursor");
	
			if (Difficulty::Easy.active)
				ROOT.setFocus(Difficulty::Easy);
			else if (Difficulty::Hard.active)
				ROOT.setFocus(Difficulty::Hard);
			else
				ROOT.setFocus(Difficulty::Pro);
	
			return EVENTRESULT_FILTER;
		}
		else
			return move_cursor(buttons, key_event.keysym);
	}
}

module PROJECT::ROOT::RacePane::Difficulty
{
	static buttons = [Easy, Hard, Pro];
	
	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L3_UP)
		{
			main::sound.play("cursor");
	
			if (Enemy::On.active)
				ROOT.setFocus(Enemy::On);
			else
				ROOT.setFocus(Enemy::Off);
	
			return EVENTRESULT_FILTER;
		}
		else
			return move_cursor(buttons, key_event.keysym);
	}
}

module PROJECT::ROOT::RacePane::Decision
{
	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L3_DOWN)
		{
			main::sound.play("cursor");
	
			if (ReplayBGM::On.active)
				ROOT.setFocus(ReplayBGM::On);
			else
				ROOT.setFocus(ReplayBGM::Off);
	
			return EVENTRESULT_FILTER;
		}
		else if (key_event.keysym == PS2_PAD_CTRL_L3_UP)
		{
			main::sound.play("cursor");
	
			if (Difficulty::Easy.active)
				ROOT.setFocus(Difficulty::Easy);
			else if (Difficulty::Hard.active)
				ROOT.setFocus(Difficulty::Hard);
			else
				ROOT.setFocus(Difficulty::Pro);
	
			return EVENTRESULT_FILTER;
		}
	
		return EVENTRESULT_CONTINUE;
	}
}

module PROJECT::ROOT::RacePane::Decision::Confirm
{
	function onActivate(context, item)
	{
		main::sound.play("ok");
		confirmOption();
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::RacePane::Decision::Cancel
{
	function onActivate(context, item)
	{
		main::sound.play("cancel");
	
		var option = main::game.getOption();
		reflectOption(option);
		option.apply();
	
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::RacePane::Decision::Default
{
    function onActivate(context, item)
    {
        main::sound.play("ok");

        var option = main::menu::MOption();
        reflectOption(option);
        confirmOption();
        deactivatePane(context);

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::MemcardPane
{
	function setActors()
	{
		ROOT::setActor(AutoSave::On::bgfa);
		ROOT::setActor(AutoSave::Off::bgfa);
		ROOT::setActor(Decision::Confirm::bgf);
		ROOT::setActor(Decision::Cancel::bgf);
		ROOT::setActor(Decision::Default::bgf);
	}
	
	function reflectOption(option)
	{
		AutoSave::On.active = option.auto_save;
		AutoSave::Off.active = !option.auto_save;
	}

	function confirmOption()
	{
		var option = main::game.getOption();
		option.auto_save = AutoSave::On.active;
		main::game.setOption(option);
	
		var mcmanager = main::menu::MMemoryCardManager("MODE_LOAD_GAME");
		mcmanager.clearAutoSaveDisabled();
	}


	function activatePane(context)
	{
		AutoSave::On.can_focus = true;
		AutoSave::Off.can_focus = true;
		Decision::Confirm.can_focus = true;
		Decision::Cancel.can_focus = true;
		Decision::Default.can_focus = true;
	
		if (AutoSave::On.active)
			ROOT.setFocus(AutoSave::On);
		else
			ROOT.setFocus(AutoSave::Off);
	
		return true;
	}


	function deactivatePane(context)
	{
		AutoSave::On.can_focus = false;
		AutoSave::Off.can_focus = false;
		Decision::Confirm.can_focus = false;
		Decision::Cancel.can_focus = false;
		Decision::Default.can_focus = false;
		ROOT::deactivatePane(context);
	}

	function onActivate(context, item)
	{
		main::sound.play("ok");
		ROOT.setFocus(Decision::Confirm);
		return EVENTRESULT_FILTER;
	}
	
	function onCancel(context, item)
	{
		main::sound.play("cancel");
	
		var option = main::game.getOption();
		reflectOption(option);
		option.apply();
	
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::MemcardPane::AutoSave
{
	static buttons = [On, Off];
	
	function onKeyPress(context, key_event)
	{
		move_cursor(buttons, key_event.keysym);
		return;
	}
}

module PROJECT::ROOT::MemcardPane::Decision
{
	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L3_DOWN || key_event.keysym == PS2_PAD_CTRL_L3_UP)
		{
			main::sound.play("cursor");
	
			if (AutoSave::On.active)
				ROOT.setFocus(AutoSave::On);
			else
				ROOT.setFocus(AutoSave::Off);
	
			return EVENTRESULT_FILTER;
		}
	
		return EVENTRESULT_CONTINUE;
	}
}

module PROJECT::ROOT::MemcardPane::Decision::Confirm
{
	function onActivate(context, item)
	{
		main::sound.play("ok");
		confirmOption();
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::MemcardPane::Decision::Cancel
{
	function onActivate(context, item)
	{
		main::sound.play("cancel");
	
		var option = main::game.getOption();
		reflectOption(option);
		option.apply();
	
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::MemcardPane::Decision::Default
{
	function onActivate(context, item)
	{
		main::sound.play("ok");
	
		var option = main::menu::MOption();
		reflectOption(option);
		confirmOption();
		deactivatePane(context);
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::ControllerPane
{
	function setActors()
	{
		ROOT::setActor(Vibration::On::bgfa);
		ROOT::setActor(Vibration::Off::bgfa);
		ROOT::setActor(Transmission::AT::bgfa);
		ROOT::setActor(Transmission::MT::bgfa);
		ROOT::setActor(Decision::Confirm::bgf);
		ROOT::setActor(Decision::Cancel::bgf);
		ROOT::setActor(Decision::Default::bgf);
	}
	
	function reflectOption(option)
	{
		Vibration::On.active = option.vibration_1p;
		Vibration::Off.active = !option.vibration_1p;
		Transmission::AT.active = !option.license_transmission_MT;
		Transmission::MT.active = option.license_transmission_MT;
	}
	
	function confirmOption()
	{
		var option = main::game.getOption();
		option.vibration_1p = Vibration::On.active;
		option.license_transmission_MT = Transmission::MT.active;
		main::game.setOption(option);
	}


	function activatePane(context)
	{
		Vibration::On.can_focus = true;
		Vibration::Off.can_focus = true;
		Transmission::AT.can_focus = true;
		Transmission::MT.can_focus = true;
		Decision::Confirm.can_focus = true;
		Decision::Cancel.can_focus = true;
		Decision::Default.can_focus = true;
	
		if (Vibration::On.active)
			ROOT.setFocus(Vibration::On);
		else
			ROOT.setFocus(Vibration::Off);
	
		return true;
	}


	function deactivatePane(context)
	{
		Vibration::On.can_focus = false;
		Vibration::Off.can_focus = false;
		Transmission::AT.can_focus = false;
		Transmission::MT.can_focus = false;
		Decision::Confirm.can_focus = false;
		Decision::Cancel.can_focus = false;
		Decision::Default.can_focus = false;
	
		ROOT::deactivatePane(context);
	}


	function onActivate(context, item)
	{
		main::sound.play("ok");
		ROOT.setFocus(Decision::Confirm);
		return EVENTRESULT_FILTER;
	}
	
	function onCancel(context, item)
	{
		main::sound.play("cancel");
		var option = main::game.getOption();
		reflectOption(option);
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::ControllerPane::Vibration
{
	static buttons = [On, Off];
	
	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L3_DOWN)
		{
			main::sound.play("cursor");
	
			if (Transmission::AT.active)
				ROOT.setFocus(Transmission::AT);
			else
				ROOT.setFocus(Transmission::MT);
	
			return EVENTRESULT_FILTER;
		}
	
		move_cursor(buttons, key_event.keysym);
		return;
	}
}

module PROJECT::ROOT::ControllerPane::Transmission
{
	static buttons = [AT, MT];
	
	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L3_UP)
		{
			main::sound.play("cursor");
	
			if (Vibration::On.active)
				ROOT.setFocus(Vibration::On);
			else
				ROOT.setFocus(Vibration::Off);
	
			return EVENTRESULT_FILTER;
		}
	
		move_cursor(buttons, key_event.keysym);
		return;
	}
}

module PROJECT::ROOT::ControllerPane::Decision
{
	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L3_UP)
		{
			main::sound.play("cursor");
	
			if (Transmission::AT.active)
				ROOT.setFocus(Transmission::AT);
			else
				ROOT.setFocus(Transmission::MT);
	
			return EVENTRESULT_FILTER;
		}
	
		if (key_event.keysym == PS2_PAD_CTRL_L3_DOWN)
		{
			main::sound.play("cursor");
	
			if (Vibration::On.active)
				ROOT.setFocus(Vibration::On);
			else
				ROOT.setFocus(Vibration::Off);
	
			return EVENTRESULT_FILTER ;
		}
	
		return false;
	}
}

module PROJECT::ROOT::ControllerPane::Decision::Confirm
{
	function onActivate(context, item)
	{
		main::sound.play("ok");
		confirmOption();
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::ControllerPane::Decision::Cancel
{
	function onActivate(context, item)
	{
		main::sound.play("cancel");
		var option = main::game.getOption();
		reflectOption(option);
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}


module PROJECT::ROOT::ControllerPane::Decision::Default
{
	function onActivate(context, item)
	{
		main::sound.play("ok");
		var option = main::menu::MOption();
		reflectOption(option);
		confirmOption();
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::SteeringPane
{
	static port1 = main::menu::MGamePort();
	port1.port_name = "USB port1";
	static current_device_name = "DISCONNECT";
	static active_pane = NoSteeringPane;

	function reflectOption(option)
	{
		CougarPane::reflectOption(option);
		CheetahPane::reflectOption(option);
	}


	function reflesh_visibility(context)
	{
		switch(current_device_name)
		{
			case "DISCONNECT":
				active_pane["deactivatePane"](context);
				NoSteeringPane.visible = true;
				CougarPane.visible = false;
				CheetahPane.visible = false;
				active_pane = NoSteeringPane;
				break;
		
			case "COUGAR":
			case "JAGUAR": 
				NoSteeringPane.visible = false;
				CougarPane.visible = true;
				CheetahPane.visible = false;
				active_pane = CougarPane;
				break;
		
			case "CHEETAH": 
				NoSteeringPane.visible = false;
				CougarPane.visible = false;
				CheetahPane.visible = true;
				active_pane = CheetahPane;
				break;
		}
	}

	static cc = 0;

	function onCheck(context)
	{
		port1.update();
		cc++;
	
		var device_name = port1.data.name;
	
		if (device_name != current_device_name)
		{
			current_device_name = device_name;
			reflesh_visibility(context);
		}
	}

	function activatePane(context)
	{
		active_pane["activatePane"](context);
		return;
	}


	function deactivatePane(context)
	{
		ROOT::deactivatePane(context);
	}
}

module PROJECT::ROOT::SteeringPane::NoSteeringPane
{
	function activatePane(context)
	{
		return false;
	}
	
	function deactivatePane(context)
	{
	}
}

module PROJECT::ROOT::SteeringPane::CougarPane
{
	function setActors()
	{
		ROOT::setActor(Assist::Amateur::bgfa);
		ROOT::setActor(Assist::Professional::bgfa);
		ROOT::setActor(Assist::Simulation::bgfa);
		ROOT::setActor(Decision::Confirm::bgf);
		ROOT::setActor(Decision::Cancel::bgf);
		ROOT::setActor(Decision::Default::bgf);
	}


	function reflectOption(option)
	{
		var device_name = current_device_name;
	
		if(device_name == "COUGAR" || device_name == "JAGUAR")
		{
			var type = option.steering_assist_1p;
			switch(type)
			{
				case 0:
					Assist::Amateur.active = true;
					Assist::Professional.active = false;
					Assist::Simulation.active = false;
					break;

				case 1:
					Assist::Amateur.active = false;
					Assist::Professional.active = true;
					Assist::Simulation.active = false;
					break;

				case 2:
					Assist::Amateur.active = false;
					Assist::Professional.active = false;
					Assist::Simulation.active = true;
					break;
					
				default:
					Assist::Amateur.active = true;
					Assist::Professional.active = false;
					Assist::Simulation.active = false;
					break;
			}
		}
	}
	
	function confirmOption()
	{
		var option = main::game.getOption();
		var device_name = current_device_name;
	
		if (device_name == "COUGAR" || device_name == "JAGUAR")
		{
			if (Assist::Amateur.active)
				option.steering_assist_1p = 0;
			else if (Assist::Professional.active)
				option.steering_assist_1p = 1;
			else
				option.steering_assist_1p = 2;
		}
	
		main::game.setOption(option);
	}

	function activatePane(context)
	{
		Assist::Amateur.can_focus = true;
		Assist::Professional.can_focus = true;
		Assist::Simulation.can_focus = true;
		Decision::Confirm.can_focus = true;
		Decision::Cancel.can_focus = true;
		Decision::Default.can_focus = true;
	
		if (Assist::Amateur.active)
			ROOT.setFocus(Assist::Amateur);
		else if (Assist::Professional.active)
			ROOT.setFocus(Assist::Professional);
		else
			ROOT.setFocus(Assist::Simulation);
	
		return true;
	}

	function deactivatePane(context)
	{
		Assist::Amateur.can_focus = false;
		Assist::Professional.can_focus = false;
		Assist::Simulation.can_focus = false;
	
		Decision::Confirm.can_focus = false;
		Decision::Cancel.can_focus = false;
		Decision::Default.can_focus = false;
	
		ROOT::deactivatePane(context);
	}

	function onActivate(context, item)
	{
		main::sound.play("ok");
		ROOT.setFocus(Decision::Confirm);
		return EVENTRESULT_FILTER;
	}

	function onCancel(context, item)
	{
		main::sound.play("cancel");
		var option = main::game.getOption();
		reflectOption(option);
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::SteeringPane::CougarPane::Assist
{
	static buttons = [Amateur, Professional, Simulation];
	
	function onKeyPress(context, key_event)
	{
		move_cursor(buttons, key_event.keysym);
		return;
	}
}

module PROJECT::ROOT::SteeringPane::CougarPane::Decision
{
	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L3_DOWN || key_event.keysym == PS2_PAD_CTRL_L3_UP)
		{
			main::sound.play("cursor");
	
			if (Assist::Amateur.active)
				ROOT.setFocus(Assist::Amateur);
			else if (Assist::Professional.active)
				ROOT.setFocus(Assist::Professional);
			else
				ROOT.setFocus(Assist::Simulation);
				return EVENTRESULT_FILTER;
		}
		return false;
	}
}

module PROJECT::ROOT::SteeringPane::CougarPane::Decision::Confirm
{
	function onActivate(context, item)
	{
		main::sound.play("ok");
		confirmOption();
		deactivatePane(context);
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::SteeringPane::CougarPane::Decision::Cancel
{
    function onActivate(context, item)
    {
        main::sound.play("cancel");

        var option = main::game.getOption();
        reflectOption(option);

        deactivatePane(context);

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::SteeringPane::CougarPane::Decision::Default
{
    function onActivate(context, item)
    {
        main::sound.play("ok");

        var option = main::menu::MOption();
        reflectOption(option);

        confirmOption();
        deactivatePane(context);

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::SteeringPane::CheetahPane
{
	function setActors()
	{
		ROOT::setActor(Feedback::Weak::bgfa);
		ROOT::setActor(Feedback::Middle::bgfa);
		ROOT::setActor(Feedback::Strong::bgfa);
	
		ROOT::setActor(KeyType::SelectBar::Type0::bgfa);
		ROOT::setActor(KeyType::SelectBar::Type1::bgfa);
		ROOT::setActor(KeyType::SelectBar::Type2::bgfa);
	
		ROOT::setActor(Decision::Confirm::bgf);
		ROOT::setActor(Decision::Cancel::bgf);
		ROOT::setActor(Decision::Default::bgf);
	}


	function reflectOption(option)
	{
		{
			var conf = option.getDeviceFeedback("CHEETAH", "POWER");
			switch(conf)
			{
				case 0:
					Feedback::Weak.active = true;
					Feedback::Middle.active = false;
					Feedback::Strong.active = false;
					break;

				case 1:
					Feedback::Weak.active = false;
					Feedback::Middle.active = true;
					Feedback::Strong.active = false;
					break;

				case 2:
					Feedback::Weak.active = false;
					Feedback::Middle.active = false;
					Feedback::Strong.active = true;
					break;

				default:
					Feedback::Weak.active = true;
					Feedback::Middle.active = false;
					Feedback::Strong.active = false;
					break;
			}
		}
	
		KeyType::SelectBar.index = option.getDeviceConfig("CHEETAH") - 1;
	}

	function confirmOption()
	{
		var option = main::game.getOption();
	
		{
			if (Feedback::Weak.active)
				option.setDeviceFeedback(0, "CHEETAH", "POWER");
			else if (Feedback::Middle.active)
				option.setDeviceFeedback(1, "CHEETAH", "POWER");
			else
				option.setDeviceFeedback(2, "CHEETAH", "POWER");
		}

		option.setDeviceConfig(KeyType::SelectBar.index + 1, "CHEETAH");
	
		main::game.setOption(option);
	}

	function activatePane(context)
	{
		Feedback::Weak.can_focus = true;
		Feedback::Middle.can_focus = true;
		Feedback::Strong.can_focus = true;
	
		KeyType::SelectBar::Type0.can_focus = false;
		KeyType::SelectBar::Type1.can_focus = false;
		KeyType::SelectBar::Type2.can_focus = false;
	
		KeyType::SelectBar.getFocusedWidget().can_focus = true;
	
		Decision::Confirm.can_focus = true;
		Decision::Cancel.can_focus = true;
		Decision::Default.can_focus = true;
	
		if (Feedback::Weak.active)
			ROOT.setFocus(Feedback::Weak);
		else if (Feedback::Middle.active)
			ROOT.setFocus(Feedback::Middle);
		else
			ROOT.setFocus(Feedback::Strong);
		return true;
	}

	function deactivatePane(context)
	{
		Feedback::Weak.can_focus = false;
		Feedback::Middle.can_focus = false;
		Feedback::Strong.can_focus = false;
	
		KeyType::SelectBar::Type0.can_focus = false;
		KeyType::SelectBar::Type1.can_focus = false;
		KeyType::SelectBar::Type2.can_focus = false;
	
		Decision::Confirm.can_focus = false;
		Decision::Cancel.can_focus = false;
		Decision::Default.can_focus = false;
	
		ROOT::deactivatePane(context);
	}

	function onActivate(context, item)
	{
		main::sound.play("ok");
	
		KeyType.active = false;
	
		ROOT.setFocus(Decision::Confirm);
	
		return EVENTRESULT_FILTER;
	}


	function onCancel(context, item)
	{
		main::sound.play("cancel");
	
		var option = main::game.getOption();
		reflectOption(option);
	
		deactivatePane(context);
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::SteeringPane::CheetahPane::Feedback
{
	static buttons = [Weak, Middle, Strong];

	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L3_DOWN)
		{
			KeyType.active = true;
		}
	
		move_cursor(buttons, key_event.keysym);
		return;
	}
}

module PROJECT::ROOT::SteeringPane::CheetahPane::KeyType::SelectBar
{
	function onValueChanged(context, index)
	{
		Type0.can_focus = false;
		Type1.can_focus = false;
		Type2.can_focus = false;
	
		var widget = SelectBar.getFocusedWidget();
		widget.can_focus = true;
	
		ROOT.setFocus(widget);
	
		main::sound.play("select");
	}

	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L3_UP)
		{
			main::sound.play("cursor");
	
			if (Feedback::Weak.active)
				ROOT.setFocus(Feedback::Weak);
			else if (Feedback::Middle.active)
				ROOT.setFocus(Feedback::Middle);
			else
				ROOT.setFocus(Feedback::Strong);
	
			KeyType.active = false;
			return EVENTRESULT_FILTER;
		}
		else if (key_event.keysym == PS2_PAD_CTRL_L3_DOWN)
		{
			KeyType.active = false;
		}
	
		return EVENTRESULT_CONTINUE;
	}
}

module PROJECT::ROOT::SteeringPane::CheetahPane::Decision
{
	function onKeyPress(context, key_event)
	{
		if (key_event.keysym == PS2_PAD_CTRL_L3_UP)
		{
			KeyType.active = true;
		}
		else if (key_event.keysym == PS2_PAD_CTRL_L3_DOWN)
		{
			main::sound.play("cursor");
	
			if (Feedback::Weak.active)
				ROOT.setFocus(Feedback::Weak);
			else if (Feedback::Middle.active)
				ROOT.setFocus(Feedback::Middle);
			else
				ROOT.setFocus(Feedback::Strong);
	
			return EVENTRESULT_FILTER;
		}
	
		return EVENTRESULT_CONTINUE;
	}
}

module PROJECT::ROOT::SteeringPane::CheetahPane::Decision::Confirm
{
	function onActivate(context, item)
	{
		main::sound.play("ok");
	
		confirmOption();
		deactivatePane(context);
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::SteeringPane::CheetahPane::Decision::Cancel
{
	function onActivate(context, item)
	{
		main::sound.play("cancel");
	
		var option = main::game.getOption();
		reflectOption(option);
	
		deactivatePane(context);
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::SteeringPane::CheetahPane::Decision::Default
{
    function onActivate(context, item)
    {
        main::sound.play("ok");

        var option = main::menu::MOption();
        reflectOption(option);

        confirmOption();
        deactivatePane(context);

        return EVENTRESULT_FILTER;
    }
}