

//---------------------------------------------------------------------------------------
// SettingUtil.ad
//
// Utility module for checking car settings
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module main::SoundUtil
{
    static bgm_group_info;
    static mmusic;
    static stream_mmusic;
    static sysbgm_mmusic;
    static stream_player;
    static context;
    
    static SCENE_MENU = 0;
    static SCENE_RACE = 1;
    static SCENE_REPLAY = 2;
    static SCENE_REPLAY_WITH_NA = 3;
    static SCENE_MUSIC_PLAYER = 4;
    static SCENE_QUICK = 5;
    static SCENE_PHOTO = 6;

    static REPEAT_OFF = 0;
    static REPEAT_GROUP = 1;
    static REPEAT_TRACK = 2;

    function GetMovieVolume()
    {
        return main::sound_runtime_parameter.movie_gain;
    }

    function GetNarrationVolume()
    {
        return main::sound_runtime_parameter.na_gain;
    }

    function SetMenuSEVolume(v)
    {
        main::sound.menu_se_volume = v;
        pdistd::MDynRes::setFloat("gtengine.walk_camera.sevolume", v);
    }

    async function BGMStop()
    {
        pdistd::MDynRes::setInt32("BGMHandle", 0);
        if (mmusic != nil)
        {
            mmusic.setFinishCallback(nil);
            mmusic.stop();
            mmusic = nil;
        }

        if (context.playing_sysbgm >= 0)
        {
            __SystemBGMStoreContext();
            context.playing_sysbgm = -1;
        }

        context.playing_code = "";
        context.playing_scene = -1;
        context.paused = false;
    }

    function BGMPause(f)
    {
        if (mmusic != nil)
            mmusic.pause(f);
        context.paused = f;
    }

    function BGMGetPause()
    {
        return context.paused;
    }

    function BGMFadeout(time)
    {
        if (time == nil)
            time = 3.0;

        pdistd::MDynRes::setInt32("BGMHandle", 0);

        if (mmusic != nil)
        {
            mmusic.setFinishCallback(nil);
            mmusic.fadeout(time);
            mmusic = nil;
        }

        if (context.playing_sysbgm >= 0)
        {
            __SystemBGMStoreContext();
            context.playing_sysbgm = -1;
        }

        context.playing_code = "";
        context.playing_scene = -1;
        context.paused = false;
    }

    function BGMIsPlaying(code)
    {
        if (code == nil)
            return mmusic != nil && mmusic.isPlaying();
        else
            return context.playing_code == code;
    }

    function __get_next_music_code(group)
    {
        var pair = bgm_group_info.find(pdistd::AsciiStringHash(group));
        if (pair == nil)
            return nil;

        var group_info = pair[1];
        var list = group_info[1];

        if (list.size == 0)
            return nil;

        var index = group_info[0];
        index = (index + 1) % list.size;
        group_info[0] = index;

        return list[index];
    }

    function __bgm_finish_callback()
    {
        var music = mmusic;
        if (music == nil)
            return;

        if (context.repeat != 0)
        {
            var group = context.playing_code;
            var code = __get_next_music_code(group);
            if (code != nil)
            {
                music.playDirect(code);
                music.setFinishCallback(__bgm_finish_callback);
                pdistd::MDynRes::setInt32("BGMHandle", music.getNativeHandle());

            }
        }
        else
            music.stop();
    }
    
    function __BGMFadeinGroup(scene, group, repeat, fadein_time)
    {
        if (GetSceneBGMEnable(scene))
        {
            pdistd::MDynRes::setInt32("BGMHandle", 0);

            if (mmusic != nil)
                mmusic.stop();

            var music = stream_mmusic;
            var code = __get_next_music_code(group);
            if (code != nil)
            {
                music.volume = GetSceneBGMVolume(scene);
                music.repeat = repeat == REPEAT_TRACK;
                music.fadeinDirect(code, fadein_time);
                music.setFinishCallback(__bgm_finish_callback);
                mmusic = music;
                pdistd::MDynRes::setInt32("BGMHandle", music.getNativeHandle());
            }
            else
                group = nil;

            context.playing_scene = scene;
            context.repeat = repeat;
        }

        context.playing_code = group;
        context.paused = false;
    }

    function __BGMFadeinDirect(scene, code, repeat, fadein_time)
    {
        if (GetSceneBGMEnable(scene))
        {
            pdistd::MDynRes::setInt32("BGMHandle", 0);

            if (mmusic != nil)
                mmusic.stop();

            var music = stream_mmusic;
            music.volume = GetSceneBGMVolume(scene);
            music.repeat = repeat == REPEAT_TRACK;
            music.fadeinDirect(code, fadein_time);
            mmusic = music;
            pdistd::MDynRes::setInt32("BGMHandle", music.getNativeHandle());

            context.playing_scene = scene;
        }

        context.playing_code = code;
        context.paused = false;
    }

    function BGMPlayGroup(scene, code, repeat, fadein_time, crossfade_time)
    {
        var playing = BGMIsPlaying();
        if (playing && context.playing_code == code)
            return;

        if (repeat == nil || repeat == true)
            repeat = REPEAT_GROUP;

        if (fadein_time == nil)
            fadein_time = 0.0;

        if (crossfade_time == nil)
            crossfade_time = 0.0;

        if (playing)
        {
            BGMFadeout(crossfade_time);
            fadein_time = crossfade_time;
        }

        context.playing_scene = -1;
        if (__TrySystemBGMPlay(scene, code, crossfade_time))
            return;
        else
            __BGMFadeinGroup(scene, code, repeat, fadein_time);
    }

    function BGMPlayDirect(scene, code, repeat, fadein_time, crossfade_time)
    {
        var playing = BGMIsPlaying();
        if (playing && context.playing_code == code)
            return;

        if (repeat == nil)
            repeat = REPEAT_GROUP;

        if (fadein_time == nil)
            fadein_time = 0.0;

        if (crossfade_time == nil)
            crossfade_time = 0.0;

        if (playing)
        {
            BGMFadeout(crossfade_time);
            fadein_time = crossfade_time;
        }

        context.playing_scene = -1;
        __BGMFadeinDirect(scene, code, repeat, fadein_time);
    }

    function BGMFadeoutForPlayGroup(scene, code, fadeout_time)
    {
        if (context.playing_scene != scene || context.playing_code != code)
            BGMFadeout(fadeout_time);
    }

    function __TrySystemBGMPlay(scene, group, fade_time)
    {
        if (CheckSystemBGMPlay(group))
        {
            var sysbgm_index = SystemBGMGroupToIndex(group);
            if (context.playing_sysbgm == sysbgm_index)
                return true;

            if (fade_time == nil)
                BGMStop();
            else
                BGMFadeout(fade_time);

            return SystemBGMPlay(scene, group);
        }

        return false;
    }

    function MenuBGMCrossfadeGroup(group, fadein_time, crossfade_time, repeat)
    {
        BGMPlayGroup(SCENE_MENU, group, repeat, fadein_time, crossfade_time);
    }

    function MenuBGMPlayGroupCue(group, crossfade_time, policy)
    {
        if (__TrySystemBGMPlay(SCENE_MENU, group))
            return;

        var duration_sec = 90;
        var change_sec = 240;
        var interval = 2;

        if (policy != nil)
        {
            if (policy["duration"] != nil)
                duration_sec = policy["duration"];

            if (policy["duration_max"] != nil)
                change_sec = policy["duration_max"];

            if (policy["interval"] != nil)
                interval = policy["interval"];
        }

        var time = pdistd::MTime::getCurrentTime().getBySecond();
        var change = false;

        if (!BGMIsPlaying())
        {
            change = true;
        }
        else if (context.playing_code == group)
        {
            context.bgm_cue_counter++;
            var elapsed = time - context.bgm_last_play_time;
            if (elapsed > duration_sec)
                change = context.bgm_cue_counter >= interval;
        }
        else
        {
            context.playing_code = group;
            context.bgm_cue_counter = 0;
            change = true;
        }

        if (change)
        {
            MenuBGMCrossfadeGroup(group, 0.0, crossfade_time, REPEAT_GROUP);
            context.bgm_last_play_time = time;
        }
    }

    function PlaySGXStreamDirect(path, repeat, volume, delay)
    {
        var player = stream_player;
        player.load("sgx");
        player.delay = delay != nil ? delay : 0.0;
        player.start(path + ".sgd", 0.0, volume);
    }

    function PlaySGXStreamDirectSGD(path, volume)
    {
        var player = stream_player;
        player.load("sgx");
        player.delay = 0.0;
        player.start(path, 0.0, volume);
        
    }

    function MenuBGMPlayFile(file, repeat, volume)
    {
        if (volume == nil)
            volume = 1.0;

        var opt = main::sound_runtime_parameter;
        if (opt.menu_bgm && opt.menu_bgm_gain > 0.0)
            PlaySGXStreamDirect("/sound_gt/track/" + file, repeat, opt.menu_bgm_gain * volume);
    }

    function PlayStream(path, repeat, volume, delay)
    {
        PlaySGXStreamDirect(path, repeat, volume, delay);
    }

    function PlayStreamSE(path)
    {
        PlaySGXStreamDirect(path, false, main::sound.menu_se_volume, 0.0);
    }

    function PlayStreamWithDelay(context, path, volume, delay)
    {
        context.addTimeOut("PlayStreamWithDelay", PlaySGXStreamDirect, path, false, volume);
        context.setTimeOut("PlayStreamWithDelay", delay);
    }

    function StopStream(context)
    {
        if (context != nil)
            context.removeTimeOut("PlayStreamWithDelay");

        stream_player.stop(1.0);
    }

    function PauseStream(x)
    {
        stream_player.pause(x);
    }

    function beginNarration(file, volume, delay)
    {
        PlayStream("/sound_gt/narration/jp/" + file, false, 
            volume != nil ? volume : GetNarrationVolume(),
            delay != nil ? delay : 0.0);
    }

    function endNarration()
    {
        StopStream();
    }

    function PlayCarStartSound(car_parameter)
    {
        if (car_parameter == nil)
            return;

        var sound_id_pair = car_parameter.getSoundID();
        SoundUtil::PlayStream("carsound/start/%05d".format(sound_id_pair[0]), false, main::sound.menu_se_volume, 0.0);
    }

    function RaceBGMPlayGroup(code, replay, repeat)
    {
        BGMPlayGroup(replay ? SCENE_REPLAY : SCENE_RACE, code, repeat);
    }

    static sysbgm_group_table = [
        "menu" : 0,
        "racing" : 1,
        "slideshow" : 2,
        "quick_before" : 0,
        "quick_after" : 0,
    ];

    function SystemBGMGroupToIndex(group)
    {
        return sysbgm_group_table[group];
    }

    function __SystemBGMStoreContext()
    {
        if (context.playing_sysbgm >= 0)
        {
            |var result, var ctx| = pdiext::MSystemBGM::getContext();
            if (ctx != nil)
            {
                var option = main::GAME_STATUS.user_profile.option;
                option.sysbgm_context[context.playing_sysbgm] = ctx;
            }
        }
    }

    function CheckSystemBGMPlay(group)
    {
        if (!__SystemBGMTryInitialize())
            return false;

        var option = main::GAME_STATUS.user_profile.option;
        var index = SystemBGMGroupToIndex(group);
        return index != nil && option.sysbgm_use[index] && option.sysbgm_valid[index] && option.sysbgm_context[index] != nil;
    }

    function __SystemBGMTryInitialize(render_context, dialog = false)
    {
        if (context.sysbgm_enable)
        {
            var result = pdiext::MSystemBGM::initialize();
            if (!pdiext::MSystemBGM::isSuccess(result))
            {
                if (dialog)
                {
                    var error = "I-%08X".format(result);
                    var root = render_context.getCursorRoot();
                    var mes = root != nil ? render_context.translate(root, "SystemMessage", "ERROR_DIALOG").build(error) : error;
                    DialogUtil::openConfirmDialog(render_context, DialogUtil::ERROR, mes);
                }

                pdiext::MSystemBGM::finalize();
                return false;
            }
            return true;
        }

        return false;
    }

    function SystemBGMPlay(scene, group)
    {
        if (!__SystemBGMTryInitialize())
            return false;

        var sysbgm_index = SystemBGMGroupToIndex(group);
        if (context.paused)
        {
            pdiext::MSystemBGM::stop();
            context.playing_code = "";
            context.paused = false;
        }
        else if (context.playing_sysbgm == sysbgm_index)
            return true;
        
        __SystemBGMStoreContext();
        var option = main::GAME_STATUS.user_profile.option;
        var param = main::sound_runtime_parameter;
        var ctx = nil;

        if (sysbgm_index != nil && option.sysbgm_valid[sysbgm_index])
            ctx = option.sysbgm_context[sysbgm_index];

        if (ctx != nil)
        {
            if (mmusic != nil)
                mmusic.stop();

            var result = pdiext::MSystemBGM::setContext(ctx);
            if (pdiext::MSystemBGM::isSuccess(result))
            {
                sysbgm_mmusic.volume = GetSceneBGMVolume(scene) * param.user_bgm_gain;
                sysbgm_mmusic.play(group);

                mmusic = sysbgm_mmusic;
                pdistd::MDynRes::setInt32("BGMHandle", mmusic.getNativeHandle());

                context.playing_sysbgm = sysbgm_index;
                context.playing_scene = scene;
                context.playing_code = group;
                return true;
            }
            else
            {
                pdiext::MSystemBGM::finalize();
            }
        }

        if (mmusic != nil)
        {
            mmusic.stop();
            mmusic = nil;
        }

        main::pdistd::MDynRes::setInt32("BGMHandle", 0);
        context.playing_sysbgm = -1;
        context.playing_scene = -1;
        context.playing_code = "";
        return false;
        return; // Two returns, it's weird
    }

    function OpenSystemBGMDialog(context)
    {
        if (!__SystemBGMTryInitialize(context, true))
            return nil;

        BGMFadeout();

        var result = pdiext::MSystemBGM::startSelectionMenu();
        var error = "";

        if (pdiext::MSystemBGM::isCanceled(result))
            return nil;
        else if (!pdiext::MSystemBGM::isSuccess(result))
            error = "S-%08X".format(result);
        else
        {
            var pair = pdiext::MSystemBGM::getContext();
            if (pair[1] != nil)
                return pair[1];

            error = "C-%08X".format(pair[0]);
        }

        var root = context.getCursorRoot();
        var mes = root != nil ? context.translate(root, "SystemMessage", "ERROR_DIALOG").build(error) : error;
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, mes);
        SetSystemBGMEnable(context, false);
        SetSystemBGMEnable(context, true); // Ok..?
    }

    function SetSystemBGMEnable(render_context, enable, fadeout_time)
    {
        context.sysbgm_enable = enable;
        if (enable)
            __SystemBGMTryInitialize();
        else
        {
            if (context.playing_sysbgm >= 0)
            {
                if (render_context != nil && fadeout_time != nil && fadeout_time > 0.0)
                {
                    BGMFadeout(fadeout_time);
                    render_context.sync(fadeout_time);
                }
                else
                    BGMStop();

                BGMPlayGroup(context.playing_scene, context.playing_code, context.repeat);
            }   

            pdiext::MSystemBGM::finalize();
        }
    }

    function GetSceneBGMEnable(scene)
    {
        var param = main::sound_runtime_parameter;

        var v;
        switch (scene)
        {
            case SCENE_MENU:
                return param.menu_bgm;
            case SCENE_RACE:
                return param.race_bgm;
            case SCENE_REPLAY:
            case SCENE_REPLAY_WITH_NA:
                return param.replay_bgm;
            case SCENE_MUSIC_PLAYER:
                return true;
        }

        return false;
    }

    function GetSceneBGMVolume(scene)
    {
        var param = main::sound_runtime_parameter;

        switch (scene)
        {
            case SCENE_MENU:
                return param.menu_bgm_gain;

            case SCENE_RACE:
                return param.race_bgm_gain;

            case SCENE_REPLAY:
                return param.replay_bgm_gain;

            case SCENE_REPLAY_WITH_NA:
                return param.replay_bgm_gain * 0.31;

            case SCENE_MUSIC_PLAYER:
                return param.movie_gain;
        }

        return 0.0;
    }

    function UpdateBGMVolume()
    {
        var scene = context.playing_scene;
        if (scene == nil)
            return;

        var v = GetSceneBGMVolume(scene);
        if (mmusic != nil)
            mmusic.volume = v;

        var param = main::sound_runtime_parameter;
        pdiext::MSystemBGM::setVolume(v * param.user_bgm_gain);
    }

    function PreviewBGMVolume(volume_percent, user_bgm_volume_percent)
    {
        var volume = SoundUtil::GetBGMPercentToAmplitude(volume_percent);
        if (mmusic != nil)  
            mmusic.volume = volume;

        var user_bgm_volume;
        if (user_bgm_volume_percent != nil)
            user_bgm_volume = SoundUtil::LoudnessPercentToAmplitude(user_bgm_volume_percent);
        else
            user_bgm_volume = main::sound_runtime_parameter.user_bgm_gain;

        pdiext::MSystemBGM::setVolume(volume * user_bgm_volume);
    }

    function LoudnessPercentToAmplitude(percent)
    {
        return (percent.toFloat() / 100.0) ** 1.6666666;
    }

    function BGMPercentToAmplitude(percent, master_volume)
    {
        var v = LoudnessPercentToAmplitude(percent) * master_volume;
        return __toplevel__::System::Math::clamp(v, 0.0, 1.0);
    }

    function GetBGMPercentToAmplitude(volume_percent)
    {
        var param = main::sound_runtime_parameter;
        var drc = param.sound_dynamic_range;
        var preset = main::drc_preset[drc];
        var bgmvol = preset['bgm_master_volume'];
        return BGMPercentToAmplitude(volume_percent, bgmvol);
    }

    function SetupSound(scene, force_update)
    {
        var opt = main::sound_runtime_parameter;
        if (force_update != true && opt.scene == scene)
            return;

        opt.scene = scene;
        var drcpreset = main::drc_preset[opt.sound_dynamic_range];
        var ctx = main::sound_context;
        var sound_user = nil;
        var dist_enable = false;
        
        var v;
        switch (scene)
        {
            case SCENE_RACE:
                v = opt.race_se ? opt.race_se_gain : 0.0;
                sound_user = "race";
                dist_enable = true;

                break;

            case SCENE_REPLAY:
                v = opt.replay_se ? opt.replay_se_gain : 0.0;
                sound_user = "race";
                dist_enable = true;
                break;

            case SCENE_REPLAY_WITH_NA:
                v = opt.replay_se ? opt.replay_se_gain * 0.31 : 0.0;
                sound_user = "race";
                dist_enable = true;
                break;

            case SCENE_QUICK:
                v = opt.replay_se ? opt.replay_se_gain * 0.71 : 0.0;
                sound_user = "race";
                dist_enable = true;
                break;

            case SCENE_PHOTO:
                v = 1.0;
                break;

            case SCENE_MENU:
            default:
                v = opt.replay_se ? opt.replay_se_gain * 0.71 : 0.0;
                break;
        }

        var rs = main["race_sound"];
        if (rs != nil)
        {
            rs.world_se_volume = v;
            rs.start = true;
        }

        ctx.setExclusiveUser(sound_user);
        var eq = drcpreset['world_se_eq'];
        var eq_enable = eq != nil;

        if (eq_enable)
        {
            for (var i = 0; i < eq.size; i++)
                ctx.setWorldEQ(i + 13, eq[i]);
        }

        var deq = [
            "eq_enable" : eq_enable,
            "comp_gain_max" : drcpreset['world_se_deq_comp_gain_max'],
            "loudness_det_lowcut_fc" : drcpreset['world_se_deq_loudness_det_lowcut_fc'],
        ];

        var deq;
        if (scene == SCENE_PHOTO)
        {
            deq["output_gain"] = drcpreset['photo_world_se_deq_gain'];
            deq["comp_ratio"] = drcpreset['photo_world_se_deq_comp_ratio'];
            deq["playback_spl_gain"] = drcpreset['photo_world_se_deq_playback_spl_gain'];
            deq["agc_target_level"] = drcpreset['photo_world_se_deq_agc_target_level'];
        }
        else
        {
            deq["output_gain"] = drcpreset['world_se_deq_gain'];
            deq["comp_ratio"] = drcpreset['world_se_deq_comp_ratio'];
            deq["playback_spl_gain"] = drcpreset['world_se_deq_playback_spl_gain'];
            deq["agc_target_level"] = drcpreset['world_se_deq_agc_target_level'];
        }

        if (main::CheckVersion::Test(49868, nil))
        {
            ctx.setEffectorParameter("world_deq", deq);
            ctx.setEffectorParameter("world_dist", ["dist_enable" : dist_enable]);
        }
    }

    function SetSoundEnableOption(menu_bgm, menu_se, race_bgm, race_se, replay_bgm, replay_se)
    {
        var p = main::sound_runtime_parameter;
        p.menu_bgm = menu_bgm;
        p.menu_se = menu_se;
        p.race_bgm = race_bgm;
        p.race_se = race_se;
        p.replay_bgm = replay_bgm;
        p.replay_se = replay_se;
    }

    function SetDynamicRangeOption(drc)
    {
        var p = main::sound_runtime_parameter;
        p.sound_dynamic_range = drc;
    }

    function SetBGMUpmixOption(upmix)
    {
        main::sound_context.bgm_upmix_preset = upmix ? "INST" : "NONE";
    }

    function SetSoundVolumeOption(menu_bgm, menu_se, race_bgm, race_se, replay_bgm, replay_se, user_bgm)
    {
        var p = main::sound_runtime_parameter;
        p.menu_bgm_volume = menu_bgm;
        p.menu_se_volume = menu_se;
        p.race_bgm_volume = race_bgm;
        p.race_se_volume = race_se;
        p.replay_bgm_volume = replay_bgm;
        p.replay_se_volume = replay_se;
        p.user_bgm_volume = user_bgm;
    }

    function SetRaceSoundVolumeOption(race_bgm, race_se)
    {
        var p = main::sound_runtime_parameter;
        p.race_bgm_volume = race_bgm;
        p.race_se_volume = race_se;
    }

    function ApplySoundVolumeOption()
    {
        var p = main::sound_runtime_parameter;
        var drc = p.sound_dynamic_range;
        var preset = main::drc_preset[drc];
        var bgmvol = preset['bgm_master_volume'];

        p.menu_bgm_gain = BGMPercentToAmplitude(p.menu_bgm_volume, bgmvol);
        p.race_bgm_gain = BGMPercentToAmplitude(p.race_bgm_volume, bgmvol);
        p.replay_bgm_gain = BGMPercentToAmplitude(p.replay_bgm_volume, bgmvol);

        p.user_bgm_gain = LoudnessPercentToAmplitude(p.user_bgm_volume);
        p.menu_se_gain = LoudnessPercentToAmplitude(p.menu_se_volume);
        p.race_se_gain = LoudnessPercentToAmplitude(p.race_se_volume);
        p.replay_se_gain = LoudnessPercentToAmplitude(p.replay_se_volume);
        p.movie_gain = preset['movie_master_volume'];
        p.na_gain = preset['na_master_volume'];

        p.race_bgm_gain *= preset['race_bgm_gain'];
        p.race_se_gain *= preset['race_se_gain'];
        p.replay_bgm_gain *= preset['replay_bgm_gain'];
        p.replay_se_gain *= preset['replay_se_gain'];

        SoundUtil::SetMenuSEVolume(p.menu_se ? p.menu_se_gain * preset['menu_se_master_volume'] : 0.0);

        var x = ((preset['menu_se_master_volume'] * 0.84139514) * 100.0).toInt();
        PDINetwork.setTrophySoundLevel(x < 20 ? 20 : x);
    }


    function ApplySpeakerLayoutOption(speaker_bits)
    {
        var states = pdiext::MSystemConfiguration::GetSystemAudioOutputState();
        if (states.size > 0)
        {
            var mode = pdiext::OUTPUTSURROUNDMODE::SURROUND_NORMAL;
            var audioout_ch = states[0]["channel"];

            switch (audioout_ch)
            {
                case 2:
                    mode = pdiext::OUTPUTSURROUNDMODE::SURROUND_STEREO;
                    break;

                case 6:
                    var layout_map = [
                        0 : pdiext::OUTPUTSURROUNDMODE::SURROUND_ITU_R,
                        SpeakerBits::L_R : pdiext::OUTPUTSURROUNDMODE::SURROUND_STEREO,
                        SpeakerBits::L_R | SpeakerBits::LS_RS : pdiext::OUTPUTSURROUNDMODE::SURROUND_ITU_R_NC,
                        SpeakerBits::L_R | SpeakerBits::C | SpeakerBits::LS_RS : pdiext::OUTPUTSURROUNDMODE::SURROUND_ITU_R,
                    ];

                    var pair = layout_map.find(speaker_bits & (SpeakerBits::L_R | SpeakerBits::C | SpeakerBits::LS_RS));
                    mode = pair != nil ? pair[1] : pdiext::OUTPUTSURROUNDMODE::SURROUND_ITU_R;
                    break;

                case 8:
                    var layout_map = [
                        0 : pdiext::OUTPUTSURROUNDMODE::SURROUND_ITU_R,
                        SpeakerBits::L_R : pdiext::OUTPUTSURROUNDMODE::SURROUND_STEREO,
                        SpeakerBits::L_R | SpeakerBits::LS_RS : pdiext::OUTPUTSURROUNDMODE::SURROUND_ITU_R_NC,
                        SpeakerBits::L_R | SpeakerBits::C | SpeakerBits::LS_RS : pdiext::OUTPUTSURROUNDMODE::SURROUND_ITU_R,
                        SpeakerBits::L_R | SpeakerBits::C | SpeakerBits::LS_RS | SpeakerBits::CB : pdiext::OUTPUTSURROUNDMODE::SURROUND_DOLBY_PL2X,
                        SpeakerBits::L_R | SpeakerBits::C | SpeakerBits::LS_RS | SpeakerBits::LB_RB: pdiext::OUTPUTSURROUNDMODE::SURROUND_DOLBY_DIGITAL_EX,
                    ];

                    var pair = layout_map.find(speaker_bits & (SpeakerBits::L_R | SpeakerBits::C | SpeakerBits::LS_RS | SpeakerBits::CB | SpeakerBits::LB_RB));
                    mode = pair != nil ? pair[1] : pdiext::OUTPUTSURROUNDMODE::SURROUND_ITU_R;
                    break;
            }

            pdiext::MSystemConfiguration::SetSystemAudioOutputMode(6, mode);
        }
    }

    function BootInitialize()
    {
        var st = STStructure("Impl");
        st.define("playing_code", STString(32));
        st.define("repeat", STByte());
        st.define("paused", STByte());
        st.define("playing_scene", STByte());
        st.define("sysbgm_enable", STByte());
        st.define("playing_sysbgm", STByte());
        st.define("bgm_last_play_time", STLong());
        st.define("bgm_cue_counter", STInt());
        context = st();
        context.playing_code = "";
        context.repeat = REPEAT_OFF;
        context.paused = false;
        context.playing_scene = -1;
        context.sysbgm_enable = false;
        context.playing_sysbgm = -1;
        context.bgm_last_play_time = 0L;
        context.bgm_cue_counter = 0;

        bgm_group_info = Map();
        mmusic = nil;
        stream_mmusic = main::sound.stream;
        sysbgm_mmusic = pdistd::MMusic();
        sysbgm_mmusic.load("system");
        stream_player = pdiext::MStreamPlayer();
        var music = stream_mmusic;
        music.load("pcm");
        music.volume = 1.0;
        music.number = -1;
        music.repeat = false;
        main::sound.default = music;
    }

    // Will run immediately
    BootInitialize();
    undef BootInitialize;

    function InitializePlaylist()
    {
        var music = stream_mmusic;
        var groups = music.getGroups();

        var list_group_function = [
            "menu" : MusicFileUtil::getMenuBgmList,
            "racing" : MusicFileUtil::getRaceBgmList,
            "slideshow" : MusicFileUtil::getSlideShowBgmList,
        ];

        if (main::StaticConfig["use_bgm_playlist"] == false)
            list_group_function = Map();

        foreach (var group in groups)
        {
            var hash = pdistd::AsciiStringHash(group);
            bgm_group_info[hash] = nil;

            var list = [];
            var list_func = list_group_function[group];
            if (list_func != nil)
            {
                var datas = list_func();
                foreach (var i in datas)
                    list.push(i.code);
            }
            else
            {
                var musics = music.getMusics(group);
                foreach (var i in musics)
                    list.push(i["code"]);
            }

            list.randomShuffle(pdistd::MRandom::GetValue());
            bgm_group_info[hash] = [0, list];
        }
    }
}
