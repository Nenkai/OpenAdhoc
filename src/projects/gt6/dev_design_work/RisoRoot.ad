













module ROOT
{
    hidden.visible = false;

    method onInitialize(context)
    {
        Quick.visible = false;
        RaceMenu.visible = false;
        ListBox.visible = false;
        ListBox2.visible = false;
        ROOT.setFocus(SBox::MBox::ButtonQuick);
    }

    method onFinalize(context)
    {

    }

    method onCancel(context)
    {
        sound.play("cancel");
        SequenceUtil::startPage(context, ROOT);
        return EVENTRESULT_FILTER;
    }

    function dumpCourseList(context, file)
    {
        StopWatchUtil::begin();

        var sqlite = pdistd::MSqlite();
        var res = sqlite.open(file);
        if (res != 0)
            return EVENTRESULT_FILTER;

        var rows = sqlite.executeQuery("select * from Course order by id");
        foreach (var row in rows)
        {
            |var id, var name, var map, var code, var logo, var base_name, var loading_bg, var online,
             var category, var length, var straight, var elevation, var corner, var direction, var flag, var drift_ok,
             var oval, var has_reverse, var entry_max, var entry_max_3d, var dlc, var kart_ok, var kart_only,
             var rain_situation, var night_situation, var basetime_min, var basetime_max, var celsius_base0, var celsius_min0,
             var celsius_max0, var celsius_base1, var celsius_min1, var celsius_max1| = row;
        }

        sqlite.close();
        StopWatchUtil::end();
    }

    function ok()
    {
        sound.play("ok");
    }

    module SBox::MBox
    {
        module ButtonCourseLinux
        {
            method onActivate(context)
            {
                ok();
                var file = "textdata/test/courselist_linux_3_6_19.db";
                dumpCourseList(context, file);
                return EVENTRESULT_FILTER;
            }
        }

        module ButtonCourseWindows
        {
            method onActivate(context)
            {
                ok();
                var file = "textdata/test/courselist_win_3_7_15_2.db";
                dumpCourseList(context, file);
                return EVENTRESULT_FILTER;
            }
        }

        module ButtonEventAdhoc
        {
            method onActivate(context)
            {
                ok();
                var file = "textdata/test/event_list.xml";
                var st = pdistd::ReadFile(file);
                var buf = st["buffer"];
    
                if (buf != nil)
                {
                    StopWatchUtil::begin();
                    var r = OnlineEventUtil::parse(buf);
                    StopWatchUtil::end();
                }

                return EVENTRESULT_FILTER;
            }
        }

        module ButtonEventElf
        {
            method onActivate(context)
            {
                ok();
                var e = pdiext::MEventRace2();
                var file = "textdata/test/event_list.xml";

                StopWatchUtil::begin();
                var r = e.decodeOfflineEventList(file);
                StopWatchUtil::end();

                return EVENTRESULT_FILTER;
            }
        }

        module ButtonGT6GameSystem
        {
            function getAllCars(context)
            {
                var res = SPECDB.executeQuery("SELECT CarLabel FROM REGIST_CAR WHERE TITLE = 'GT6' OR TITLE = 'GT6_STANDARD' ORDER BY CarLabel");
                var list = [];

                foreach (var row in res)
                    list.push(row[0]);
                
                return list;
            }

            method onActivate(context)
            {
                ok();

                var exclude_list = [];
                var car_label_list = getAllCars(context);

                foreach (var car_label in car_label_list)
                {
                    var skip = car_label.beginWith("testcar_");
                    if (!skip)
                    {
                        foreach (var c in exclude_list)
                        {
                            if (c == car_label)
                            {
                                skip = true;
                                break;
                            }
                        }
                    }

                    if (skip)
                        continue;

                    var cp = gtengine::MCarParameter(car_label);
                    cp.setNewCar();
                    cp.beginInfo();
                    var pp = cp.getPP1000();
                    |var power, var power_rpm| = cp.getPower();
                    var weight = cp.getWeight();
                    cp.endInfo();
                }

                return EVENTRESULT_FILTER;
            }
        }

        module ButtonSystemDB
        {
            method onActivate(context)
            {
                ok();
                var sqlite = pdistd::MSqlite();
                var res = sqlite.open("database/gt6/system.db");
                if (res != 0)
                    return EVENTRESULT_FILTER;

                var a = sqlite.executeQuery("SELECT * FROM TEST", []);
                sqlite.close();

                return EVENTRESULT_FILTER;
            }
        }

        module ButtonPaint
        {
            method onActivate(context)
            {
                ok();
                return EVENTRESULT_FILTER;
            }
        }

        module ButtonCommunity
        {
            method grouptest(context)
            {
                var title = "title";
                var description = "description";
                var tag_list = ["123", "456", "789"];
                var open = 1;
                var image_id = 100;
                var user_id = "riso";
                var level_list = [1,2,3];
                var open_list = [1,2,3];
                var country_list = ["jp", "us"];
                var group_id = 1000011;
            }

            method eventtest(context)
            {
                var open = 1;
                var title = "title";
                var description = "description";
                var image_id = 100;
                var bbs_comment = "bbs_comment";
                var regulation = "regulation";
                var mode = 0;
                var ranking_board = 100;
                var start_time = "2013-09-05T07:31:15Z";
                var end_time = "2013-10-05T07:31:15Z";
                var user_id = "riso";
                var group_id = 1000011;
                var group_event_id = 1000001;
            }

            method bbstest(context)
            {
                var group_id = 1000011;
                var thread_id = 9;
                var title = "title title";
                var comment = "comment comment";
                var photo = pdistd::MBlob("abcdefghijklmnopqrstuvwxyz");

                var request5 = Bbs2.requestCreateCommentPhoto(photo, group_id, thread_id, comment, (args) => {});
                var res5 = Grim2Util::join(context, request5);
                if (res5)
                {
                    var res5a = Bbs2.decodeResult(request5);
                }
            }

            method onActivate(context)
            {
                sound.play("ok");
                bbstest(context);
                return EVENTRESULT_FILTER;
            }
        }

        module ButtonQuick
        {
            static first_animation;

            function beginCourseAnimation(context)
            {
                var header = Quick::InformationArea::Header;
                var starting_grid = Quick::InformationArea::StartingGrid;
                var stretch_bg = Quick::InformationArea::Stretch_bg;
                var course_condition = Quick::InformationArea::CourseCondition;

                starting_grid.Opacity.on_effect_end = nil;
                header.InformationTitle.text = "COURSE CONDITIONS";
                header.InformationTitle::Opacity.setStartDuration(0, 0);
                var time = header.InformationTitle::Opacity.getInterpolationPeriod(1);
                header.InformationTitle::Opacity.setInterpolationPeriod(0, time);
                header.InformationTitle::Opacity.setEndDuration(1, 1.5f);

                var total_time = stretch_bg.Height.total_time;
                var title_time = total_time - (header.InformationTitle::Opacity.total_time - header.InformationTitle::Opacity.getEndDuration(0));
                header.InformationTitle::Opacity.setEndDuration(0, title_time);

                var list = [
                    header.InformationTitle::Opacity,
                    stretch_bg.Height,
                    course_condition.Opacity,
                    course_condition.CourseInfo::Place::X,
                    course_condition.CourseInfo::Condition::Height,
                    course_condition.CourseInfo::Condition::Time_Temp::Time::Opacity,
                    course_condition.CourseInfo::Condition::Time_Temp::Temperature::Opacity,
                    course_condition.CourseInfo::Condition::Water::Opacity,
                    course_condition.CourseInfo::Condition::WeatherIcon::Opacity,
                    course_condition.CourseInfo::Property::ParallelActor,
                    course_condition.CourseInfo::Length::ParallelActor,
                    course_condition.CourseInfo::StraightLength::ParallelActor,
                    course_condition.CourseInfo::Height::ParallelActor,
                ];

                foreach (var a in list)
                    a.restart();

                stretch_bg.Height.on_effect_end = beginStartingGridAnimation;
            }

            function beginStartingGridAnimation(context)
            {
                var header = Quick::InformationArea::Header;
                var starting_grid = Quick::InformationArea::StartingGrid;
                var stretch_bg = Quick::InformationArea::Stretch_bg;
                stretch_bg.Height.on_effect_end = nil;

                header.InformationTitle.text = "STARTING GRID";
                header.InformationTitle::Opacity.setStartDuration(0, 0);
                header.InformationTitle::Opacity.setEndDuration(1, 0);

                if (first_animation)
                {
                    header.InformationTitle::Opacity.setInterpolationPeriod(0, 0);
                    first_animation = false;
                }

                var total_time = starting_grid.Opacity.total_time;
                var title_time = total_time - (header.InformationTitle::Opacity.total_time - header.InformationTitle::Opacity.getEndDuration(0));
                header.InformationTitle::Opacity.setEndDuration(0, title_time);

                var list = [
                    header.InformationTitle::Opacity,
                    starting_grid.Opacity,
                    starting_grid.TextInfo::Opacity
                ];

                foreach (var a in list)
                    a.restart();

                starting_grid.Opacity.on_effect_end = beginCourseAnimation;

                for (var i = 0; i < 16; ++i)
                {
                    var index = i + 1;
                    var name = "Column%{index}";
                    starting_grid[name].Actors::Rotate3D.setStartDuration(0, 0.2f * i);
                    starting_grid[name].Actors::Opacity.setStartDuration(0, 0.2f * i);
                    starting_grid[name].Actors.restart();
                }
            }

            function beginFooterAnimation(context)
            {
                var footer = Quick::InformationArea::Footer;
                var list = [ 
                    footer.Height,
                ];

                foreach (var a in list)
                    a.restart();
            }

            function beginHeaderAnimation(context)
            {
                var header = Quick::InformationArea::Header;
                var stretch_bg = Quick::InformationArea::Stretch_bg;
                var list = [
                    header.bg::Opacity,
                    header.Color::base::EffectWipe::WipeProgress,
                    header.Color::left_edge::Opacity,
                    header.InformationTitle::Opacity,
                    header.EventTitle::Opacity,
                    header.ModeLogo::ParallelActor,
                    stretch_bg.Opacity,
                ];

                foreach (var a in list)
                    a.restart();

                stretch_bg.Opacity.on_effect_end = (context) => 
                {
                    stretch_bg.Opacity.on_effect_end = nil;
                    beginStartingGridAnimation(context);
                    beginFooterAnimation(context);
                };
            }

            method resetForAnimation(context)
            {
                var header = Quick::InformationArea::Header;
                var starting_grid = Quick::InformationArea::StartingGrid;
                var stretch_bg = Quick::InformationArea::Stretch_bg;
                var course_condition = Quick::InformationArea::CourseCondition;
                var footer = Quick::InformationArea::Footer;

                header.InformationTitle::Opacity.setStartDuration(0, 1f);
                header.InformationTitle.text = "STARTING GRID";

                var list = [
                    Quick::InformationArea::Opacity,
                    header.InformationTitle::Opacity,
                    stretch_bg.Height,
                    course_condition.Opacity,
                    course_condition.CourseInfo::Place::X,
                    course_condition.CourseInfo::Condition::Height,
                    course_condition.CourseInfo::Condition::Time_Temp::Time::Opacity,
                    course_condition.CourseInfo::Condition::Time_Temp::Temperature::Opacity,
                    course_condition.CourseInfo::Condition::Water::Opacity,
                    course_condition.CourseInfo::Condition::WeatherIcon::Opacity,
                    course_condition.CourseInfo::Property::ParallelActor,
                    course_condition.CourseInfo::Length::ParallelActor,
                    course_condition.CourseInfo::StraightLength::ParallelActor,
                    course_condition.CourseInfo::Height::ParallelActor,
                    starting_grid.Opacity,
                    starting_grid.TextInfo::Opacity,
                    footer.Height,
                ];

                foreach (var a in list)
                    a.reset();

                for (var i = 0; i < 16; ++i)
                {
                    var index = i + 1;
                    var name = "Column%{index}";
                    starting_grid[name].Actors.reset();
                }
            }

            method onActivate(context)
            {
                context.cursor_visible = false;
                SBox.visible = false;
                Quick.visible = true;
                first_animation = true;
                
                resetForAnimation(context);
                beginHeaderAnimation(context);
                ROOT.setFocus(Quick);
                return EVENTRESULT_FILTER;
            }
        }

        module ButtonStock
        {
            method onActivate(context)
            {
                Stock.initialize(context);
                return EVENTRESULT_FILTER;
            }
        }

        module ButtonRaceMenu
        {
            function onRestart(context)
            {
                RaceMenu.terminate(context);
            }

            function onExit(context)
            {
                RaceMenu.terminate(context);
            }

            method onActivate(context)
            {
                var icons = [];
                icons.push(RaceMenuUtil::Icon("RESTART", "icon_restart.dds", onRestart));
                icons.push(RaceMenuUtil::Icon("EXIT", "icon_exit.dds", onExit));
                RaceMenu.initialize(context, icons);
                return EVENTRESULT_FILTER;
            }
        }

        module ButtonReplayMark
        {
            method onActivate(context)
            {
                var path = ORG.replay_work_path + "S";
                if (!pdistd::Exist(path))
                    return EVENTRESULT_FILTER;

                var board_id = 48;
                var user_id = Grim2.getLoginUserId();
                var replay_mark_id = nil;

                var st = pdistd::ReadFile(path);
                var blob = st["buffer"];
                var do_update = true;
                var do_request = true;
                var do_friend = false;

                if (do_update)
                {
                    var request = Replay2.requestUpdateReplayMark(board_id, blob, (context) => {});
                    var res = Grim2Util::join(context, request)
                    if (res)
                    {
                        var r0 = Replay2.decodeResult(request);
                        DialogUtil::openConfirmDialog(context, DialogUtil::OK, "requestUpdateRemak : %{r0}");
                    }
                    else
                        DialogUtil::openConfirmDialog(context, DialogUtil::OK, "requestUpdateRemak : failed");
                }

                if (do_request)
                {
                    var request = Ranking2.requestRanking(board_id, user_id, (context) => {});
                    var res = Grim2Util::join(context, request)
                    if (res)
                    {
                        var ranking = Ranking2.decodeRanking(request);
                        DialogUtil::openConfirmDialog(context, DialogUtil::OK, "requestRanking : %{ranking}");
                        replay_mark_id = ranking["replay_mark_id"];
                    }
                    else
                        DialogUtil::openConfirmDialog(context, DialogUtil::OK, "requestRanking : failed");

                    if (replay_mark_id != nil)
                    {
                        request = Replay2.requestReplayMark(replay_mark_id, (context) => {});
                        res = Grim2Util::join(context, request);
                        var path0 = Replay2.getReplayMarkPath(replay_mark_id);
                        DialogUtil::openConfirmDialog(context, DialogUtil::OK, "%{path0}");
                        var is_exist = Replay2.isReplayMarkExist(replay_mark_id);
                    }
                }

                if (do_friend)
                {
                    var board_id = 424;
                    var l = RankingUtil::getFriendRankingList(context, board_id);
                    foreach (var l0 in l)
                    {

                    }
                }

                return EVENTRESULT_FILTER;
            }
        }

        module ButtonListBox
        {
            method onActivate(context)
            {
                sound.play("ok");
                var listbox = ROOT.ListBox;
                listbox.visible = true;
                listbox.setItemCount(5);
                listbox.setItemTemplate(context, hidden::ListItem);
                return EVENTRESULT_FILTER;
            }
        }

        module ButtonListBox2
        {
            method onActivate(context)
            {
                sound.play("ok");
                var listbox = ROOT.ListBox2;
                listbox.visible = true;
                ROOT.setFocus(listbox.VBox.first);
                return EVENTRESULT_FILTER;
            }
        }

        module ButtonPsWeight
        {
            method onActivate(context)
            {
                sound.play("ok");
                
                var ps_list = [
                    630, 600, 500, 450, 675,
                    380, 760, 405, 200, 225,
                    140, 400, 600, 495, 700,
                    420, 325, 560, 580, 280,
                    620, 630, 275, 405, 250
                ];

                var weight_list = [
                    1350, 1250, 1500, 2018, 1556,
                    1080, 1350, 955, 715, 980,
                    624, 1120, 1100, 1090, 1670,
                    1580, 790, 900, 1350, 1370,
                    1570, 1350, 1350, 1043, 1100
                ];

                var language_list = ["JP", "US", "GB", "FR", "DE", "IT", "ES", "NL", "PT", "PL", "RU", "TR", "EL", "CZ", "HU", "BP", "MS"];
                var map = Map();

                foreach (var language in language_list)
                {
                    pdistd::SetLanguage(pdistd::Language[language]);
                    var ps_unit = pdiext::MUnit::GetUnitOfPower();
                    var weight_unit = pdiext::MUnit::GetUnitOfMass();
                    var ps_list1 = [];
                    foreach (var ps in ps_list)
                    {
                        var ps1 = pdiext::MUnit::GetPowerForDisplay(ps);
                        var res = "%{ps1}%{ps_unit}";
                        ps_list1.push(res);
                    }

                    var weight_list1 = [];
                    foreach (var weight in weight_list)
                    {
                        var res = "%{weight}%{weight_unit}";
                        weight_list1.push(res);
                    }

                    map[language] = [ps_list1, weight_list1];
                }

                for (var i = 0; i < 25; ++i)
                {
                    var list = [];
                    foreach (var language in language_list)
                    {
                        |var ps_list, var weight_list| = map[language];
                        var ps = ps_list[i];
                        var weight = weight_list[i];
                        var res = "%{ps},%{weight}";
                        list.push(res);
                    }

                    var a = list.join(",");
                }

                return EVENTRESULT_FILTER;
            }
        }

        module ButtonPresence
        {
            method onActivate(context)
            {
                sound.play("ok");

                var request1 = UserProfile2.requestSetPresence("abcde", (args) => {});
                var res1 = Grim2Util::join(context, request1);
                if (!res1)
                    return EVENTRESULT_FILTER;

                var request2 = UserProfile2.requestGetPresence("riso", (args) => {});
                var res2 = Grim2Util::join(context, request2);
                if (!res2)
                    return EVENTRESULT_FILTER;
                var presence_list1 = UserProfile2.decodePresenceList(request2);

                var request3 = UserProfile2.requestGetPresence("", (args) => {});
                var res3 = Grim2Util::join(context, request3);
                if (!res3)
                    return EVENTRESULT_FILTER;
                var presence_list2 = UserProfile2.decodePresenceList(request3);

                return EVENTRESULT_FILTER;
            }
        }

        module ButtonActivity
        {
            method onActivate(context)
            {
                sound.play("ok");
                var data = ["abc", "def", "ghi"];

                var request1 = Activity.requestPutActivity(data, (args) => {});
                var res1 = Grim2Util::join(context, request1);
                if (!res1)
                    return EVENTRESULT_FILTER;

                var request2 = Activity.requestGetActivity((args) => {});
                var res2 = Grim2Util::join(context, request2);
                if (!res2)
                    return EVENTRESULT_FILTER;
                var activity_list1 = Activity.decodeActivityList(request2);

                return EVENTRESULT_FILTER;
            }
        }

        module ButtonCarDescription
        {
            method onActivate(context)
            {
                sound.play("ok");
                
                var rtext = main::pdistd::MRTextDB();
                rtext.load("/description/gt6/JP.rt2");
                var list = ["_106_rally_03", "_110s_68", "deltawing_12"];

                foreach (var car_label in list)
                {
                    var car_description = rtext.get("CarDescription", car_label);
                    var car_catch = rtext.get("CarCatch", car_label);
                }

                rtext.unload();

                return EVENTRESULT_FILTER;
            }
        }

        module ButtonPhoto
        {
            function dumpPhotoList(photo_list)
            {
                foreach (var photo in photo_list)
                {

                }
            }

            function getImage(photo_list)
            {
                foreach (var photo in photo_list)
                {
                    var photo_id = photo["photo_id"];
                    Photo.requestThumbnail(photo_id, args => 
                    {
                        |var context, var request| = args;
                        if (request.isDone())
                        {
                            var image_path = Photo.getThumbnailPath(photo_id);
                        }
                    });

                    Photo.requestImage(photo_id, args => 
                    {
                        |var context, var request| = args;
                        if (request.isDone())
                        {
                            var image_path = Photo.getImagePath(photo_id);
                        }
                    });
                }
            }

            method onActivate(context)
            {
                sound.play("ok");

                var request1 = Photo.requestListByFriend((args) => {});
                if (Grim2Util::join(context, request1))
                {
                    var photo_list = Photo.decodePhotoList(request1);
                    dumpPhotoList(photo_list);
                }
                    
                
                var request2 = Photo.requestStreamList((aargs) => {});
                if (Grim2Util::join(context, request2))
                {
                    var id_string_list = Photo.decodeIdStringList(request2);
                }

                return EVENTRESULT_FILTER;
            }
        }

        module ButtonInformation
        {
            method onActivate(context)
            {
                sound.play("ok");

                var message_short = "おめでとうございます。あと一週間です。";
                DialogUtil::openInformationDialog(context, message_short, "Short");

                var message_long = "あいうえお
かきくけこ
さしすせそ
たちつてと
なにぬねの
"
                message_long += message_long;
                message_long += message_long;

                DialogUtil::openInformationDialog(context, message_long, "Long");
                return EVENTRESULT_FILTER;
            }
        }

        module ButtonTest
        {
            method onActivate(context)
            {
                sound.play("ok");

                DialogUtil::openPrizeDialog(context, 100000, true, nil, [true, false, false]);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module ListBox2
    {
        method onFocusEnter(context, event)
        {
            var w = event.widget;
            w.active = true;
            var y = w.y;
            self.y = (1080 / 2) - y;
            return EVENTRESULT_FILTER;
        }
    
        method onFocusLeave(context, event)
        {
            var w = event.widget;
            w.active = false;
            return EVENTRESULT_FILTER;
        }
    }

    module Quick
    {
        method onActivate(context)
        {
            Quick::InformationArea::StartingGrid::Opacity.on_effect_end = nil;
            Quick::InformationArea::Stretch_bg::Height.on_effect_end = nil;
            Quick::InformationArea::Opacity.on_effect_end = nil;
            Quick::InformationArea::Opacity.restart();

            Quick::InformationArea::Opacity.on_effect_end = (context) => 
            {
                Quick::InformationArea::Opacity.on_effect_end = nil;
                context.cursor_visible = true;
                Quick.visible = false;
                SBox.visible = true;
                ROOT.setFocus(SBox::MBox::ButtonQuick);
            }

            return EVENTRESULT_FILTER;
        }
    }

    module Stock
    {
        method initialize2(context)
        {
            context.wait();
            self.HBox::X.start_value = 1920;
            self.HBox::X.end_value = -self.HBox.w;
            self.HBox::X.total_time = ((1920 + self.HBox.w) / 1920) * 15;
            self.HBox::X.restart();
        }

        method initialize(context)
        {
            self.HBox.clearChildren(context);
            for (var i = 0; i < 20; ++i)
            {
                var item = hidden::Item.doCopy();
                item.TextFace.text = "abcdefg %{i} ";
                self.HBox.appendChild(context, item);
            }

            context.pushEvent(menu::MScriptEvent(context, self, "initialize2"));
        }
    }

    module RaceMenu
    {
        method initialize(context, icons)
        {
            var item = hidden::RaceMenuItem;
            self.visible = true;
            self.SBox0::ScalarInterpolator.reverse = false;
            self.SBox0::ScalarInterpolator.restart();
            
            var listbox = self.SBox0.SBox1.ListBox;
            listbox.ScalarInterpolator.reverse = true;
            listbox.ScalarInterpolator.reset();

            var unit_w = item.w;
            listbox.keep_alignment = false;
            listbox.alignment = 0.5f;
            listbox.interpolate_ratio = 0.2f;
            listbox.ScalarInterpolator.start_value = unit_w;
            listbox.ScalarInterpolator.end_value = (unit_w + listbox.spacing) * icons.size - listbox.spacing;
            listbox.setItemTemplate(context, item);
            listbox.setItemCount(icons.size);
            listbox.focus_callback = listbox.onFocus;
            listbox.focus_active = true;

            for (var i = 0; i < icons.size; i++)
            {
                var icon = icons[i];
                var w = listbox.getItemWidget(i, context);
                w.icon = icon;
                w.separator.visible = i != 0;
            }

            self.SBox0.visible = true;
            ROOT.setFocus(listbox);
        }

        method terminate(context)
        {
            var sbox1 = self.SBox0.SBox1;
            var listbox = sbox1.ListBox;
            var actor = sbox1.Caption.FadeActor;
            actor.out = true;

            self.SBox0.ScalarInterpolator.reverse = true;
            self.SBox0.ScalarInterpolator.start();

            var item = listbox.getItemWidget(listbox.focus_index, context);
            var a = listbox.w - item.w;

            a = a > 0 ? item.x / a : 0;
            listbox.keep_scroll_point = true;
            listbox.interpolate_ratio = 1f;
            listbox.scroll_point = a;
            listbox.ScalarInterpolator.reverse = true;
            listbox.ScalarInterpolator.start();
            item.separator.visible = false;
            item.Blink.restart();
            
            context.cursor_visible = false;
            context.wait(0.8f);

            ROOT.setFocus(SBox::MBox::ButtonRaceMenu);
            context.cursor_visible = true;
        }

        method onCancel(context)
        {
            terminate(context);
            return EVENTRESULT_FILTER;
        }
    }

    module hidden::RaceMenuItem
    {
        attribute icon = nil;
    }
}