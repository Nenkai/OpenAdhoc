













module BSpecDriverData
{
    #define BSPEC_TABLE_NAME "t_bspec_driver_data"
    static TABLE_VERSION = 15;
    static sCount = -1;

    class Info_GT5_BspecDriverData
    {
        attribute id;
        attribute dev_name;
        attribute condition_loop;
        attribute dec_start_day;
        attribute dec_limit_day;
        attribute tough;
        attribute skill_max_lv;
        attribute sub_skill_max_lv;
        attribute st_stamina;
        attribute st_mentality;
        attribute st_skill_base_breaking;
        attribute st_skill_base_cornering;
        attribute st_skill_base_cornerout;
        attribute st_skill_base_line_trace;
        attribute st_skill_base_shift_up;
        attribute st_skill_base_stear_reaction;
        attribute st_skill_heat_offset;

        attribute ed_stamina;
        attribute ed_mentality;
        attribute ed_skill_base_breaking;
        attribute ed_skill_base_cornering;
        attribute ed_skill_base_cornerout;
        attribute ed_skill_base_line_trace;
        attribute ed_skill_base_shift_up;
        attribute ed_skill_base_stear_reaction;
        attribute ed_skill_heat_offset;

        static attr_names;

        method __init__()
        {
            id = -1;
            dev_name = "test_dev_name";
            condition_loop = 1;
            dec_start_day = 350;
            dec_limit_day = 450;
            tough = 0;
            skill_max_lv = 40;
            sub_skill_max_lv = 20;
            st_stamina = 600;
            st_mentality = 0;
            st_skill_base_breaking = 50;
            st_skill_base_cornering = 85;
            st_skill_base_cornerout = 70;
            st_skill_base_line_trace = 100;
            st_skill_base_shift_up = 90;
            st_skill_base_stear_reaction = -50;
            st_skill_heat_offset = 50;

            ed_stamina = 4600;
            ed_mentality = 100;
            ed_skill_base_breaking = 95;
            ed_skill_base_cornering = 95;
            ed_skill_base_cornerout = 95;
            ed_skill_base_line_trace = 0;
            ed_skill_base_shift_up = 100;
            ed_skill_base_stear_reaction = 0;
            ed_skill_heat_offset = 5;
        }

        function begin()
        {
            attr_names = [];

            foreach (|var a, var v| in Info_GT5_BspecDriverData)
            {
                if (v.is_attribute)
                    attr_names.push(a.toString());
            }
        }

        method __get_elem__(i)
        {
            return self.getObjectAttribute(i);
        }

        method __set_elem__(i, val)
        {
            self.setObjectAttribute(i, val);
        }

        function GetAttributeNames()
        {
            return attr_names;
        }

        method setParamFromXml(xml_attr_map)
        {
            self.id = xml_attr_map["id"] != nil ? xml_attr_map["id"] : 0;
            self.dev_name = xml_attr_map["dev_name"] != nil ? xml_attr_map["dev_name"] : "no_dev_name";
            self.condition_loop = xml_attr_map["condition_loop"] != nil ? xml_attr_map["condition_loop"] : 0;
            self.dec_start_day = xml_attr_map["dec_start_day"] != nil ? xml_attr_map["dec_start_day"] : 0;
            self.dec_limit_day = xml_attr_map["dec_limit_day"] != nil ? xml_attr_map["dec_limit_day"] : 0;
            self.tough = xml_attr_map["tough"] != nil ? xml_attr_map["tough"] : 0;
            self.skill_max_lv = xml_attr_map["skill_max_lv"] != nil ? xml_attr_map["skill_max_lv"] : 0;
            self.sub_skill_max_lv = xml_attr_map["sub_skill_max_lv"] != nil ? xml_attr_map["sub_skill_max_lv"] : 0;
            self.st_stamina = xml_attr_map["st_stamina"] != nil ? xml_attr_map["st_stamina"] : 0;
            self.st_mentality = xml_attr_map["st_mentality"] != nil ? xml_attr_map["st_mentality"] : 0;
            self.st_skill_base_breaking = xml_attr_map["st_skill_base_breaking"] != nil ? xml_attr_map["st_skill_base_breaking"] : 0;
            self.st_skill_base_cornering = xml_attr_map["st_skill_base_cornering"] != nil ? xml_attr_map["st_skill_base_cornering"] : 0;
            self.st_skill_base_cornerout = xml_attr_map["st_skill_base_cornerout"] != nil ? xml_attr_map["st_skill_base_cornerout"] : 0;
            self.st_skill_base_line_trace = xml_attr_map["st_skill_base_line_trace"] != nil ? xml_attr_map["st_skill_base_line_trace"] : 0;
            self.st_skill_base_shift_up = xml_attr_map["st_skill_base_shift_up"] != nil ? xml_attr_map["st_skill_base_shift_up"] : 0;
            self.st_skill_base_stear_reaction = xml_attr_map["st_skill_base_stear_reaction"] != nil ? xml_attr_map["st_skill_base_stear_reaction"] : 0;
            self.st_skill_heat_offset = xml_attr_map["st_skill_heat_offset"] != nil ? xml_attr_map["st_skill_heat_offset"] : 0;
            self.ed_stamina = xml_attr_map["ed_stamina"] != nil ? xml_attr_map["ed_stamina"] : 0;
            self.ed_mentality = xml_attr_map["ed_mentality"] != nil ? xml_attr_map["ed_mentality"] : 0;
            self.ed_skill_base_breaking = xml_attr_map["ed_skill_base_breaking"] != nil ? xml_attr_map["ed_skill_base_breaking"] : 0;
            self.ed_skill_base_cornering = xml_attr_map["ed_skill_base_cornering"] != nil ? xml_attr_map["ed_skill_base_cornering"] : 0;
            self.ed_skill_base_cornerout = xml_attr_map["ed_skill_base_cornerout"] != nil ? xml_attr_map["ed_skill_base_cornerout"] : 0;
            self.ed_skill_base_line_trace = xml_attr_map["ed_skill_base_line_trace"] != nil ? xml_attr_map["ed_skill_base_line_trace"] : 0;
            self.ed_skill_base_shift_up = xml_attr_map["ed_skill_base_shift_up"] != nil ? xml_attr_map["ed_skill_base_shift_up"] : 0;
            self.ed_skill_base_stear_reaction = xml_attr_map["ed_skill_base_stear_reaction"] != nil ? xml_attr_map["ed_skill_base_stear_reaction"] : 0;
            self.ed_skill_heat_offset = xml_attr_map["ed_skill_heat_offset"] != nil ? xml_attr_map["ed_skill_heat_offset"] : 0;
        }

        method setParam(columns, params)
        {
            for (var i = 0; i < columns.size; i++)
            {
                var column = columns[i];
                self.setObjectAttribute(column, params[i]);
            }
        }
    }

    Info_GT5_BspecDriverData::begin();

    function initialize()
    {
        var res = DBUtil::initializeTable(BSPEC_TABLE_NAME, TABLE_VERSION);
        if (res)
        {
            var result = createBSpecDriverDataTable();
            insertBSpecDriverDataFromXML("textdata/gt5/bspec_driver_list.xml");
        }
        else
        {
            var select_query = "SELECT COUNT(dev_name) from %{BSPEC_TABLE_NAME}";
            var res = SQLITE.executeQuery(select_query);
            sCount = res[0][0];
        }
    }

    function insertBSpecDriverDataFromXML(file_path)
    {
        var res = main::pdistd::ReadFile(file_path);
        if (res["result"] != main::pdistd::FileError::OK)
        {
            sCount = -1;
            return;
        }
        else
        {
            var buf = res["buffer"];
            var xml = main::pdistd::MXml();
            xml.parse(buf);
            var dom = xml.result;
            var nodelist = dom["BSpecDriverData"];

            if (nodelist == nil)
                return;

            var node = nodelist[0];
            nodelist = node["driver"];

            if (nodelist == nil)
                return;

            sCount = nodelist.size;
            SQLITE.begin();

            for (var i = 0; i < nodelist.size; i++)
            {
                node = nodelist[i];
                var attr_map = node.getAttributeMap();
                var dev_name = attr_map["dev_name"];

                var driver_info = Info_GT5_BspecDriverData();
                driver_info.setParamFromXml(attr_map);
                insertBSpecDriverInfo(driver_info);
            }

            SQLITE.commit();
        }
    }

    function createBSpecDriverDataTable()
    {
        var columns_str = "";
        var attribute_names = Info_GT5_BspecDriverData::GetAttributeNames();

        for (var i = 0; i < attribute_names.size; i++)
        {
            var column = attribute_names[i];
            var column_type = "";
            var driver_info = Info_GT5_BspecDriverData();

            if (driver_info[column].isInstanceOf(System::String))
                column_type = "TEXT";
            else
                column_type = "INTEGER";

            columns_str += "%s %s, ".format(column, column_type);
        }


        columns_str = columns_str.removeLastOf(", ");
        
        var query = "CREATE TABLE IF NOT EXISTS %{BSPEC_TABLE_NAME} (%s, PRIMARY KEY (id))".format(columns_str);
        return SQLITE.execute0(query);
    }

    function executeSelect(columns, conditional_query)
    {
        var columns_str = "";
        foreach (var column in columns)
            columns_str += "%s, ".format(column);

        columns_str = columns_str.removeLastOf(", ");

        if (conditional_query == nil)
            conditional_query = "";

        var select_query = "SELECT %s FROM %{BSPEC_TABLE_NAME} ".format(columns_str);
        var query = select_query + conditional_query;
        return SQLITE.executeQuery(query);
    }

    function insertBSpecDriverInfo(driver_info)
    {
        var where_query = "WHERE id='%d'".format(driver_info.id);
        var rows = executeSelect(["id"], where_query);
        if (rows.size)
            return;

        var columns_str = "";
        var values_str = "";
        var params = [];

        var attribute_names = Info_GT5_BspecDriverData::GetAttributeNames();
        for (var i = 0; i < attribute_names.size; i++)
        {
            var column = attribute_names[i];
            var param = driver_info[column];
            params.push(param);

            columns_str += "%s, ".format(column);
            values_str += "?, ";
        }

        columns_str = columns_str.removeLastOf(", ");
        values_str = values_str.removeLastOf(", ");

        var query = "INSERT INTO %{BSPEC_TABLE_NAME} (%s) VALUES (%s)".format(columns_str, values_str);
        var result = SQLITE.execute(query, params);
    }

    function getBSpecDriverInfo(id)
    {
        var driver_info = Info_GT5_BspecDriverData();
        var rows = executeSelect(Info_GT5_BspecDriverData::GetAttributeNames(), "WHERE id='%d'".format(id));
        if (rows.size > 0)
        {
            var params = rows[0];
            driver_info.setParam(Info_GT5_BspecDriverData::GetAttributeNames(), params);
            return driver_info;
        }

        return nil;
    }

    function getBSpecDriverInfoTableCount()
    {
        return sCount;
    }
    
}