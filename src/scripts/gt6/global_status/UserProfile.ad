

//---------------------------------------------------------------------------------------
// UserProfile.ad
//
// Creates the save profile entity
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module UserProfile
{
    static GARAGE_PATH = "/APP_CACHE/garage%03d.dat".format(GlobalStatus::MAJOR_VERSION);
    static GARAGE_MAX = 500;
    static GARAGE_STOCKYARD_PATH = "/APP_CACHE/garage_stockyard%03d.dat".format(GlobalStatus::MAJOR_VERSION);
    static GARAGE_PAD_STOCKYARD_PATH = "/APP_CACHE/garage_pad_stockyard%03d.dat".format(GlobalStatus::MAJOR_VERSION);
    static GARAGE_STOCKYARD_MAX = 9999;
    static GARAGE_STOCKYARD_INITIAL_CONTENT = "STOCKYARD_DUMMY";

    function clearInitializer()
    {
        undef CreateStructure;
        undef Initialize;
        undef ReinitializeDB;
        undef clearInitializer;
        undef addInitializer;

        GameRecord::clearInitializer();
        GameMail::clearInitializer();
        GameBbs::clearInitializer();
        GameMuseum::clearInitializer();
        GameMusic::clearInitializer();
        GameNews::clearInitializer();
        GameShoppingCart::clearInitializer();
        GameSuspender::clearInitializer();
        GameEntitlement::clearInitializer();
        GameKeyValue::clearInitializer();
        GameTutorial::clearInitializer();
        GameItem::clearInitializer();
    }

    function CreateStructure()
    {
        var st = STStructure("Impl");
        UserProfile.defineModule(st);
        st.define("play_id", STULong());
        st.define("online_id", STString(32));
        st.define("cash", STLong());
        st.define("gameday", STLong());
        st.define("can_watch_ending", STByte());
        st.define("no_entry_event_yet", STByte());
        st.define("option", GameOption::CreateStructure());
        st.define("context", GameContext::CreateStructure());
        st.define("garage", STObject(gtengine::MGarage));
        st.define("exist_garage_stockyard", STByte());
        st.define("garage_stockyard", STObject(gtengine::MGarage));
        st.define("garage_stockyard_carcount", STInt());
        st.define("residence", Residence::CreateStructure());
        st.define("record", GameRecord::CreateStructure());
        st.define("logger_option", GameDataLoggerOption::CreateStructure());
        st.define("messages", STArray(STString(64), 4));
        st.define("mail", GameMail::CreateStructure());
        st.define("bbs", GameBbs::CreateStructure());
        st.define("inputted_user_profile", STByte());
        st.define("museum", GameMuseum::CreateStructure());
        st.define("music", GameMusic::CreateStructure());
        st.define("news", GameNews::CreateStructure());
        st.define("shopping_cart", GameShoppingCart::CreateStructure());
        st.define("total_aspec_running_km", STFloat());
        st.define("total_bspec_running_km", STFloat());
        st.define("total_aspec_win", STUInt());
        st.define("total_bspec_win", STUInt());
        st.define("total_aspec_race_complete", STUInt());
        st.define("total_bspec_race_complete", STUInt());
        st.define("total_tuning_cost", STULong());
        st.define("total_gadget_hit_count", STUInt());
        st.define("total_prize", STULong());
        st.define("total_aspec_time", STULong());
        st.define("total_bspec_time", STULong());
        st.define("total_gas_consumption", STFloat());
        st.define("total_all_gas_consumption", STFloat());

        var st_max_car_i = STStructure();
        st_max_car_i.define("code", STUInt());
        st_max_car_i.define("record", STULong());

        var st_max_car_f = STStructure();
        st_max_car_f.define("code", STUInt());
        st_max_car_f.define("record", STFloat());

        st.define("max_distance_car", st_max_car_f);
        st.define("max_win_car", st_max_car_i);
        st.define("max_speed_car", st_max_car_f);

        st.define("career_mode_license", STString(4));
        st.define("total_photo_count", STUInt());
        st.define("total_pay", STULong());
        st.define("ranking_registration_id_offset", STInt());
        st.define("victim_of_savedata_corruption", STByte());
        st.define("suspender", GameSuspender::CreateStructure());
        st.define("entitlement", GameEntitlement::CreateStructure());
        st.define("key_value", GameKeyValue::CreateStructure());
        st.define("item", GameItem::CreateStructure());
        st.define("tutorial", GameTutorial::CreateStructure());
        st.define("bank_book", BankBook::CreateStructure());
        st.define("bank_book_blob", STObject(pdistd::MBlob));
        st.define("last_play_event_id", STUInt());
        st.define("last_play_datetime_sec", STLong());
        st.define("i_cheated_with_increasing_money", STByte());

        DefineMethod();
        return st;
    }

    function Initialize(instance)
    {
        instance.play_id = pdiapp::play_id;
        instance.online_id = "";
        instance.cash = 3000000 / 100; // Starting money
        instance.gameday = 1;
        instance.can_watch_ending = false;
        instance.no_entry_event_yet = true;
        GameOption::Initialize(instance.option);
        GameContext::Initialize(instance.context);
        instance.garage = gtengine::MGarage();
        instance.garage_stockyard = nil;
        instance.garage_stockyard_carcount = 0;
        Residence::Initialize(instance.residence);
        GameRecord::Initialize(instance.record);
        GameDataLoggerOption::Initialize(instance.logger_option);

        for (var i = 0; i < 4; i++)
            instance.messages[i] = "";

        GameMail::Initialize(instance.mail);
        GameMuseum::Initialize(instance.museum);
        GameMusic::Initialize(instance.music);
        GameNews::Initialize(instance.news);
        GameShoppingCart::Initialize(instance.shopping_cart);
        GameEntitlement::Initialize(instance.entitlement);
        GameKeyValue::Initialize(instance.key_value);
        GameItem::Initialize(instance.item);
        GameTutorial::Initialize(instance.tutorial);
        instance.inputted_user_profile = false;
        instance.total_aspec_running_km = 0.0;
        instance.total_bspec_running_km = 0.0;
        instance.total_aspec_win = 0;
        instance.total_bspec_win = 0;
        instance.total_aspec_race_complete = 0;
        instance.total_bspec_race_complete = 0;
        instance.total_tuning_cost = 0;
        instance.total_gadget_hit_count = 0;
        instance.total_prize = 0;
        instance.total_aspec_time = 0;
        instance.total_bspec_time = 0;
        instance.total_gas_consumption = 0;
        instance.total_all_gas_consumption = 0;
        instance.max_distance_car.code = gtengine::MSpecDB::NO_CODE;
        instance.max_distance_car.record = 0.0;
        instance.max_win_car.code = gtengine::MSpecDB::NO_CODE;
        instance.max_win_car.record = 0;
        instance.max_speed_car.code = gtengine::MSpecDB::NO_CODE;
        instance.max_speed_car.record = 0.0;
        instance.career_mode_license = "N";
        instance.total_photo_count = 0;
        instance.ranking_registration_id_offset = 0;
        instance.victim_of_savedata_corruption = false;

        GameSuspender::Initialize(instance.suspender);
        instance.bank_book.initialize();
        instance.writeBankBook(instance.cash, 0, instance.cash);

        instance.last_play_event_id = 0;
        instance.last_play_datetime_sec = 0;
        instance.i_cheated_with_increasing_money = false;
    }

    function InitializeDB(instance)
    {
        GameRecord::InitializeDB(instance.record);
        GameMail::InitializeDB(instance.mail);
        GameBbs::InitializeDB(instance.bbs);
        GameMuseum::InitializeDB(instance.museum);
        GameMusic::InitializeDB(instance.music);
        GameNews::InitializeDB(instance.news);
        GameKeyValue::InitializeDB(instance.key_value);
        GameItem::InitializeDB(instance.item);
    }

    function Finalize(instance)
    {
        GameRecord::Finalize(instance.record);
    }

    function ReinitializeDB(instance)
    {
        GameMusic::ReinitializeDB(instance.music);
        GameItem::ReinitializeDB(instance.item);
    }

    function DefineMethod()
    {
        module Impl
        {
            method apply()
            {
                pdiapp::play_id = self.play_id;
                self.option.apply();
                self.context.apply();
                self.residence.apply();
                self.record.apply();
            }

            method addCash(context, value, over_limit_message)
            {
                var cr = self.cash + value;
                if (cr > (5000000000 / 100).toInt())
                {
                    if (over_limit_message == true)
                    {
                        var cash_max_str = main::pdiext::MMisc::GetMoneyString((5000000000 / 100).toInt());
                        var error_msg = manager.translate("CommonGTMode", "Message_LimitCredits").build(cash_max_str);
                        DialogUtil::openConfirmDialog(context, DialogUtil::OK, error_msg);
                    }

                    cr = (5000000000 / 100).toInt();
                }
                else if (self.cash < 0 && value < 0)
                    cr = 0;

                self.writeBankBook(self.cash, value, cr);
                self.cash = cr;
            }

            method checkCashOverLimit(value)
            {
                return self.cash + value > (5000000000 / 100).toInt()
            }

            method getCashLimit()
            {
                return (5000000000 / 100).toInt();
            }

            method loadGarage()
            {
                return self.garage.load(GARAGE_PATH);
            }

            method createGarage()
            {
                self.garage.create(GARAGE_PATH, GARAGE_MAX);
                var buf = GARAGE_STOCKYARD_INITIAL_CONTENT.getByteData();
                pdistd::WriteFile(UserProfile::GARAGE_PAD_STOCKYARD_PATH, buf, buf.size);
                pdistd::WriteFile(UserProfile::GARAGE_STOCKYARD_PATH, buf, buf.size);
            }

            method checkTotalTuningCostTrophy()
            {
                var total = self.total_tuning_cost;
                var array = [
                    [total > 100000, gtengine::TrophyType::TUNING1],
                    [total > 500000, gtengine::TrophyType::TUNING2],
                    [total > 2000000, gtengine::TrophyType::TUNING3],
                ];

                foreach (|var condition, var trophyId| in array)
                {
                    if (condition)
                        PDINetwork.unlockTrophyAsync(trophyId);
                    else
                        break;
                }
            }

            method addTuningCost(price)
            {
                price = price.toULong();
                if (self.total_tuning_cost > (0x0FFFFFFFFFFFFFFFUL - price))
                    self.total_tuning_cost = 0x0FFFFFFFFFFFFFFFUL;
                else
                    self.total_tuning_cost += price;

                self.checkTotalTuningCostTrophy();
            }

            method payTuningCost(price)
            {
                if (!self.payCash(price))
                    return false;

                self.addTuningCost(price);
                return true;
            }

            method addTotalPay(price)
            {
                price = price.toULong();
                if (self.total_pay > (0x0FFFFFFFFFFFFFFFUL - price))
                    self.total_pay = 0x0FFFFFFFFFFFFFFFUL;
                else
                    self.total_pay += price;
            }

            method payCash(price)
            {
                var success = self.bank_book.checkout(self.bank_book_blob);
                if (!success)
                {
                    var user = main::PDINetwork.getClientName();
                    main::Grim2.requestPutLog("NG=31:NU=%{user}");
                    self.cash = price;
                }
                else if (self.bank_book.current < self.cash)
                {
                    var user = main::PDINetwork.getClientName();
                    main::Grim2.requestPutLog("NG=21:NU=%{user}");
                    self.cash = self.bank_book.current;
                }

                if (price > self.cash)
                    return false;

                self.writeBankBook(self.cash, -price, self.cash - price);
                self.cash -= price;
                self.addTotalPay(price);
                main::sound.play("buy_shop");
                return true;
            }

            method checkTotalGadgetHitCountTrophy()
            {
                var total = self.total_gadget_hit_count;
                var array = [
                    [total >= 500, gtengine::TrophyType::GADGET1],
                    [total >= 5000, gtengine::TrophyType::GADGET2],
                ];

                foreach (|var condition, var trophyId| in array)
                {
                    if (condition)
                        PDINetwork.unlockTrophyAsync(trophyId);
                    else
                        break;
                }
            }

            method addGadgetHitCount(count)
            {
                count = count.toUInt();
                if (self.total_gadget_hit_count > (-1 - count))
                    self.total_gadget_hit_count = -1;
                else
                    self.total_gadget_hit_count += count;

                self.checkTotalGadgetHitCountTrophy();
            }

            method incrementWinCount(isASpec)
            {
                if (isASpec)
                    ++self.total_aspec_win;
                else
                    ++self.total_bspec_win;

                PDINetwork.unlockTrophyAsync(gtengine::TrophyType::FIRST_WIN);
            }

            method incrementRaceCompleteCount(isASpec)
            {
                if (isASpec)
                    ++self.total_aspec_race_complete;
                else
                    ++self.total_bspec_race_complete;
            }

            method getTotalMileage()
            {
                return self.total_aspec_running_km + self.total_bspec_running_km;
            }

            method checkTotalMileageTrophy()
            {
                var total = self.getTotalMileage();
                var array = [
                    [total > 100.0, gtengine::TrophyType::MILEAGE1],
                    [total > 3945.0, gtengine::TrophyType::MILEAGE2],
                    [total > 12718.0, gtengine::TrophyType::MILEAGE3],

                ];

                foreach (|var condition, var trophyId| in array)
                {
                    if (condition)
                        PDINetwork.unlockTrophyAsync(trophyId);
                    else
                        break;
                }
            }

            method addTotalMileage(isASpec, mileage)
            {
                if (isASpec)
                    self.total_aspec_running_km += mileage;
                else
                    self.total_bspec_running_km += mileage;

                self.checkTotalMileageTrophy();
            }

            method addTotalPrize(prize)
            {
                self.total_prize += prize;
            }

            method addTotalTime(isASpec, total_time)
            {
                if (isASpec)
                self.total_aspec_time += total_time;
                else
                    self.total_bspec_time += total_time;
            }

            method addPlayerGasConsumption(liter)
            {
                self.total_gas_consumption += liter;
            }

            method addAllGasConsumption(liter)
            {
                self.total_all_gas_consumption += liter;
            }

            method recordLastPlayEventID(event_id)
            {
                self.last_play_event_id = event_id;
                self.last_play_datetime_sec = pdiext::getBetterTime().getBySecond();
            }

            method getLastPlayEventIDAndAfterSecond()
            {
                var past_second = 0;
                if (self.last_play_datetime_sec > 0)
                    past_second = pdiext::getBetterTime().getBySecond() - self.last_play_datetime_sec;
                
                var val = [self.last_play_event_id, past_second];
                return val;
            }

            method updateMaxDistanceCar(car_code, garage_id, distance)
            {
                if (self.max_distance_car.record >= distance)
                    return;

                self.max_distance_car.code = car_code;
                self.max_distance_car.record = distance;
                GarageUtil::Thumbnail::copyForStatus(garage_id, "distance");
            }

            method updateMaxWinCar(car_code, garage_id, win)
            {
                if (self.max_win_car.record >= win)
                    return;

                self.max_win_car.code = car_code;
                self.max_win_car.record = win;
                GarageUtil::Thumbnail::copyForStatus(garage_id, "win");
            }

            method updateMaxSpeedCar(car_code, garage_id, speed)
            {
                if (self.max_speed_car.record >= speed)
                    return;

                self.max_speed_car.code = car_code;
                self.max_speed_car.record = speed;
                GarageUtil::Thumbnail::copyForStatus(garage_id, "speed");
            }

            method writeBankBook(prev, diff, current)
            {
                var sec = pdiext::getBetterTime().getBySecond();
                self.bank_book_blob = self.bank_book.checkin(prev, diff, current, sec);
            }
        }
    }
}
