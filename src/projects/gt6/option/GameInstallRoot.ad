













module ROOT
{
    method open(context)
    {
        SettingFrame.appear();
        SequenceUtil::pushPage(context, self);
    }

    method close(context)
    {
        var delay_time = SettingFrame.hide();
        SequenceUtil::popPage(context, self, delay_time);
    }

    method reflect(context)
    {
        var option = main::GAME_STATUS.user_profile.option;
        SettingFrame::Pane::ScrolledBody::clip::space::AutoInstall::OptionMenu.setIndex(context, option.stop_install ? 1 : 0);
    }

    method apply(context)
    {
        var option = main::GAME_STATUS.user_profile.option;
        option.stop_install = SettingFrame::Pane::ScrolledBody::clip::space::AutoInstall::OptionMenu.index == 1;

        option.apply();
    }

    method onRealize(manager)
    {
        PROJECT.load("/scripts/gt6/util/DataInstallUtil");
    }

    method onInitialize(context)
    {
        if (gDirectApplyMode)
            SettingFrame::Pane::Foot.visible = false;

        reflect(context);
        SettingFrame.adjust_scrolled_body();
        ROOT.setFocus(SettingFrame::Pane::ScrolledBody::clip::space::AutoInstall::OptionMenu);
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        if (gDirectApplyMode)
        {
            ROOT.apply();
            ROOT.close(context);
        }
        else
            ROOT.setFocus(SettingFrame::Pane::Foot::Cancel);

        return EVENTRESULT_FILTER;
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::InstallAll::vbox::ExecInstall
    {
        method onActivate(context)
        {
            if (SettingFrame::Pane::ScrolledBody::clip::space::AutoInstall::OptionMenu.index == 1)
            {
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, 
                    manager.translate("OptionProject::GameInstallRoot", "YOU_SHOULD_TURN_STOP_INSTALL_OFF"));

                ROOT.setFocus(SettingFrame::Pane::ScrolledBody::clip::space::AutoInstall::OptionMenu);
                return EVENTRESULT_FILTER;
            }

            if (!DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, 
                    manager.translate("OptionProject::GameInstallRoot", "DO_YOU_CONTINUE_TO_INSTALL").build(
                        DataInstallUtil::getEstimatedMinuteForDisplay()))
                )
                return EVENTRESULT_FILTER;

            DataInstallUtil::execute(context, ROOT, "OptionProject::GameInstallRoot");
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context, event)
        {
            self.tooltip_key = "";
            SettingFrame::ToolTip::tip.value = DataInstallUtil::getTipMessage(context, ROOT, "OptionProject::GameInstallRoot");
            SettingFrame::ToolTip::tip.resetAction();
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::GetSizeInstalledFiles::vbox::ExecGetSize
    {
        static calculated_size = nil;

        function getsize_installed_files(context, arg, dialog)
        {
            |var res, var size| = pdistd::GetFileSystemOptionInt64("/", "GetInstalledFileSize");
            if (res == pdistd::FileError::OK)
            {
                calculated_size = size;
                var size_str = pdiext::GetSizeString(calculated_size);
                var message = context.translate(ROOT, "GETSIZE_INSTALL_FILES_DONE").build(size_str);
                dialog.setSuccessMessage(message);
                return true;
            }
            else
            {
                pdistd::MSystemDialog::open("NN", res);
                return false;
            }
        }

        function onActivate(context)
        {
            main::sound.play("ok");

            var message_begin;
            if (calculated_size != nil)
            {
                message_begin = context.translate(ROOT, "GETSIZE_ALREADY_DONE")
                    .build(pdiext::GetSizeString(calculated_size));
            }
            else
            {
                message_begin = context.translate(ROOT, "DO_YOU_GETSIZE_INSTALL_FILES");
            }

            var message_waiting = context.translate(ROOT, "NOW_GETTINGSIZE_INSTALL_FILES");
            var message_success = "";
            var message_failed = context.translate(ROOT, "GETSIZE_INSTALL_FILES_FAILED");

            var res = DialogUtil::openConfirmExecDialog(context, 
                message_begin, message_waiting,
                message_success, message_failed, 
                getsize_installed_files, nil);

            if (res && calculated_size != nil)
            {
                var pair = GetSizeInstalledFiles::label.text.split(":");
                var message_current = context.translate(ROOT, "GETSIZE_CURRENT")
                    .build(pdiext::GetSizeString(calculated_size));

                GetSizeInstalledFiles::label.text = pair[0] + ":" + message_current;
            }

            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::RemoveInstalledFiles::vbox::ExecRemove
    {
        function remove_installed_files(context)
        {
            var GP_CACHE_DIR = "/APP_DATA/gp_cache/";
            if (pdistd::Exist(GP_CACHE_DIR))
                pdistd::RemoveDirectory(GP_CACHE_DIR, true);
            
            var res = pdistd::SetFileSystemOptionInt32("/", "ClearInstalledFiles", 0);
            if (res == pdistd::FileError::OK)
            {
                DataInstallUtil::setInstalled(false);
                return true;
            }
            else
            {
                var pair = pdistd::FileError.find_static(pair => pair[1] == res);
                return false;
            }
        }

        function onActivate(context)
        {
            main::sound.play("ok");

            var message_begin = context.translate(ROOT, "DO_YOU_REMOVE_INSTALL_FILES");
            var message_waiting = context.translate(ROOT, "NOW_REMOVING_INSTALL_FILES");
            var message_success = context.translate(ROOT, "REMOVE_INSTALL_FILES_DONE");
            var message_failed = context.translate(ROOT, "REMOVE_INSTALL_FILES_FAILED");

            var res = DialogUtil::openConfirmExecDialog(context, message_begin, message_waiting, message_success, message_failed, remove_installed_files, nil);
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::Foot::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.apply();
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::Foot::Cancel
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }
}