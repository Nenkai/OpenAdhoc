//---------------------------------------------------------------------------------------
// LogsRoot.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ROOT
{
    hidden.visible = false;

    attribute car_name_format = nil;
    attribute result_format = nil;
    attribute result_format0 = nil;
    attribute who_format = nil;
    attribute car_count_format = nil;
    attribute level_format = nil;
    attribute shadow_margin = nil;

    method getCarName(car_code, color)
    {
        var car_name = main::gtengine::MSpecDB::getCarShortName(car_code);
        var car_color = main::gtengine::MSpecDB::getCarColorName(car_code, color);
        if (car_color == " " || car_color == "")
            return car_name;
        else
            return self.car_name_format.build(car_name, car_color);
    }

    method onInitialize(context)
    {
        BalloonTip.initialize(context);
        self.car_name_format = context.translate(ROOT, "CAR_NAME_FORMAT");
        self.result_format = context.translate(ROOT, "RESULT_FORMAT");
        self.result_format0 = context.translate(ROOT, "RESULT_FORMAT0");
        self.who_format = context.translate(ROOT, "WHO_FORMAT");
        self.car_count_format = context.translate(ROOT, "CAR_COUNT_FORMAT");
        self.level_format = context.translate(ROOT, "LEVEL_FORMAT");
        self.shadow_margin = hidden::Item::Value::ColorFace.h / hidden::Item::Value::Title.h;
        
        var the_gold = context.translate(ROOT, "LicenseGT5M", "THE_GOLD");
        var the_silver = context.translate(ROOT, "LicenseGT5M", "THE_SILVER");
        var the_bronze = context.translate(ROOT, "LicenseGT5M", "THE_BRONZE");
        var license_format = context.translate(ROOT, "LICENSE_FORMAT");

        var my_cash = gGameStatus.user_profile.cash;
        Header::Cash::TextFace.text = main::pdiext::MMisc::GetMoneyString(my_cash);
        var game_day = gGameStatus.user_profile.calendar.getGameDay();
        Header::Date::TextFace.text = context.translate(ROOT, "Arcade", "GAME_DAY").build(game_day + 1);

        var event_size = gGameStatus.user_profile.calendar.getEventSize();
        if (event_size == 0)
        {
            not_found.visible = true;
        }
        else
        {
            not_found.visible = false;

            hidden::Item.h = hidden::Item::Value::Title.h;

            ListBox.setItemTemplate(context, hidden::Item);
            ListBox.setItemCount(event_size);
        }

        var prev_day;
        var last_day_index = 0;
        for (var i = 0; i < ListBox.getItemCount(); i++)
        {
            var w = ListBox.getItemWidget(i, context);
            if (w != nil)
            {
                var event = gGameStatus.user_profile.calendar.getEvent(i);
                var type = event[0];
                var julian_day = event[1];

                if (prev_day != julian_day)
                {
                    w.Date.Value.text = getDateString(context, julian_day);
                    w.Date.Value.visible = true;
                    w.Date.Line.visible = true;
                    last_day_index = i;
                }
                else
                {
                    w.Date.Value.visible = false;
                    w.Date.Line.visible = false;
                }

                prev_day = julian_day;
                w.magnify_ratio = self.shadow_margin;
                switch (type)
                {
                    case "NO_EVENT":
                        w.Value.Title.TextFace.text = context.translate(ROOT, "NOT_FOUND");
                        w.magnify_ratio += 1.0;
                        w.Value.Detail0.visible = false;
                        w.Value.Detail1.visible = false;
                        w.Value.Detail2.visible = false;
                        break;

                    case "GARAGE":
                        var garage_type = event[2];
                        var carcode = event[3];
                        var color = event[4];
                        var opt = event[5];
                        var your_name = event[6];

                        if (garage_type == "NETWORK_GIVE" || garage_type == "NETWORK_TAKE")
                        {
                            var key = garage_type == "NETWORK_GIVE" ? "NETWORK_TAKE" : "NETWORK_GIVE";
                            w.magnify_ratio += 3.0;

                            if (main::gtengine::MSpecDB::NO_CODE32 != carcode)
                            {
                                w.Value.Title.TextFace.text = context.translate(ROOT, "%{key}_TRADE");
                                w.Value.Detail0.text = self.who_format.build(your_name);
                                w.Value.Detail1.text = getCarName(carcode, color);
                            }
                            else
                            {
                                w.Value.Title.TextFace.text = context.translate(ROOT, key);
                                w.Value.Detail0.text = self.who_format.build(your_name);
                                w.Value.Detail1.text = self.car_count_format.build(opt);
                            }
                            w.Value.Detail2.visible = false;
                        }
                        else
                        {
                            w.Value.Title.TextFace.text = context.translate(ROOT, garage_type);
                            w.magnify_ratio += 2.0;
                            w.Value.Detail0.text = getCarName(carcode, color);
                            w.Value.Detail1.visible = false;
                            w.Value.Detail2.visible = false;
                        }
                        break;

                    case "RUN_LICENSE":
                        w.magnify_ratio += 3.0;
                        var license_id = event[2];
                        var order = event[3];
                        var updated = event[4];
                        var best_time = event[5];

                        var index = LicenseUtil::GetIndexByLicenseId(license_id);
                        |var category, var category_index| = LicenseUtil::GetCategoryIdAndCategoryIndex(index);

                        w.Value.Title.TextFace.text = context.translate(ROOT, type);
                        w.Value.Detail0.text = "%s - %d".format(LicenseUtil::CategoryString[category], category_index + 1);

                        var the_order = [the_gold, the_silver, the_bronze];
                        if ("" == best_time)
                        {
                            w.Value.Detail1.text = the_order[order];
                        }
                        else
                        {
                            w.Value.Detail1.text = license_format.build(the_order[order], best_time);
                        }
                        w.Value.Detail2.visible = false;
                        break;

                    case "RUN_COURSE":
                        var car_code = event[2];
                        var car_color = event[3];
                        var course_code = event[4];
                        var mode = event[5];
                        var result = event[6];
                        var option = event[7];
                        var time = event[8];

                        w.Value.Title.TextFace.text = context.translate(ROOT, "%{type}_%{mode}");

                        var course_label = main::gtengine::MSpecDB::getCourseLabel(course_code);
                        var course_layout = "LAYOUT_NORMAL";
                        if (course_label.beginWith("r_"))
                        {
                            course_label = course_label.substr(2);
                            course_layout = "LAYOUT_REVERSE";
                        }

                        if (mode == "TIME_TRIAL")
                        {
                            w.magnify_ratio += 4.0;
                            w.Value.Detail0.text = getCarName(car_code, car_color);
                            w.Value.Detail1.text = "%s / %s".format(
                                context.translate(ROOT, "CourseName", course_label),
                                context.translate(ROOT, "TrialSetting", course_layout));
                            w.Value.Detail2.text = self.result_format.build(result + 1, time);
                        }
                        else if (mode == "DRIFT_TRIAL")
                        {
                            w.magnify_ratio += 4.0;
                            w.Value.Detail0.text = getCarName(car_code, car_color);
                            w.Value.Detail1.text = "%s / %s / %s".format(
                                context.translate(ROOT, "CourseName", course_label),
                                context.translate(ROOT, "TrialSetting", course_layout),
                                context.translate(ROOT, "TrialSetting", option == 0 ? "SECTION" : "FULL_LAP")
                            );
                            w.Value.Detail2.text = self.result_format.build(result + 1, time);
                        }
                        else if (mode == "SINGLE_RACE")
                        {
                            w.magnify_ratio += 3.0;
                            w.Value.Detail0.text = "%s / %s".format(
                                context.translate(ROOT, "CourseName", course_label),
                                context.translate(ROOT, "TrialSetting", course_layout));
                            w.Value.Detail1.text = self.level_format.build(["S", "A", "B", "C", "D"][result]);
                            w.Value.Detail2.visible = false;
                        }
                        break;
                }
            }
        }
        
        if (ListBox.getItemCount() > 0)
            ListBox.focus_index = last_day_index;

        ROOT.setFocus(ListBox);
    }

    method getDateString(context, day)
    {
        var game_day = gGameStatus.user_profile.calendar.dayToGameDay(day);
        return context.translate(ROOT, "Arcade", "GAME_DAY").build(game_day + 1);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        StartPageOut_XEffect(context, ROOT, StatusRoot);
        return EVENTRESULT_FILTER;
    }

    module ListBox
    {
        method onFocusEnter(context)
        {
            return EVENTRESULT_FILTER;
        }

        method onFocusNotify(context, new_index, old_index)
        {
            var new_w = self.getItemWidget(new_index, context);
            if (new_w != nil)
                self.v_magnify = new_w.magnify_ratio;
            else
                self.v_magnify = 1.0;

            return EVENTRESULT_FILTER;
        }
    }

    module hidden::Item
    {
        attribute magnify_ratio = nil;
    }

    module Close
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            StartPageOut_XEffect(context, ROOT, StatusRoot);
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            var balloon_text = context.translate(ROOT, "Arcade", "close");
            BalloonTip.set_value(context, self, balloon_text, 12);
            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }
    }
}