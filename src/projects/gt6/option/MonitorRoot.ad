













module ROOT
{
    static show_extra;
    static sResult;
    static sServiceList = [:];
    static sBrowserEnable = false;

    static normal_layout_preset = [
        [1, 1, 0],
        [3, 1, 1],
        [5, 1, 2]
    ];

    static extra_layout_preset = [
        [1, 1, 0],
        [2, 1, nil],
        [3, 1, 1],
        [4, 1, nil],
        [2, 2, nil],
        [5, 1, 2],
        [3, 2, nil],
        [7, 1, 3],
        [9, 1, 4],
        [11, 1, 5],
        [13, 1, 6],
        [15, 1, 7],
    ];

    method open(context)
    {
        SettingFrame.appear();
        SequenceUtil::pushPage(context, self);

        var result = sResult;
        sResult = nil;
        return result;
    }

    method close(context, result)
    {
        sResult = result;

        var delay_time = SettingFrame.hide();
        SequenceUtil::popPage(context, self, delay_time);
    }

    method reflect(context)
    {
        var option = main::GAME_STATUS.user_profile.option;
        var layout_index = 0;
        var layout_preset = show_extra ? extra_layout_preset : normal_layout_preset;
        
        for (var i = 0; i < layout_preset.size; i++)
        {
            if (layout_preset[i][0] == option.monitor_layout_x &&
                layout_preset[i][1] == option.monitor_layout_y)
            {
                layout_index = i;
                break;
            }
        }

        SettingFrame::Pane::ScrolledBody::clip::space::MonitorMode.OptionMenu.setIndex(context, option.monitor_host ? 1 : (option.monitor_client ? 2 : 0));
        SettingFrame::Pane::ScrolledBody::clip::space::AutoBootEnable::OptionMenu.setIndex(context, 1 - option.monitor_auto_boot);

        SettingFrame::Pane::ScrolledBody::clip::space::CurrentIPAddr.Text.label.text = pdistd::MNetworkInterface::getIpAddress();
        SettingFrame::Pane::ScrolledBody::clip::space::ServerIPAddr.Text.input.value = option.monitor_host_ip;
        SettingFrame::Pane::ScrolledBody::clip::space::MonitorIndex.slider.index = option.monitor_index + 1;
        SettingFrame::Pane::ScrolledBody::clip::space::MonitorSettingMode::OptionMenu.setIndex(context, option.monitor_follow_host);
        SettingFrame::Pane::ScrolledBody::clip::space::MonitorLayout.OptionMenu.setIndex(context, layout_index);

        var aspect_ratio = SettingFrame::Pane::ScrolledBody::clip::space::AspectRatio.vbox;
        aspect_ratio.SliderX.slider.index = option.monitor_aspect_ratio_x;
        aspect_ratio.SliderY.slider.index = option.monitor_aspect_ratio_y;
        aspect_ratio.CheckButton.active = option.monitor_aspect_ratio_enable;

        SettingFrame::Pane::ScrolledBody::clip::space::FrameBorderX.slider.index = (option.monitor_border[0] * 100.0 + 0.5).toInt();
        SettingFrame::Pane::ScrolledBody::clip::space::FrameBorderY.slider.index = (option.monitor_border[1] * 100.0 + 0.5).toInt();
        SettingFrame::Pane::ScrolledBody::clip::space::ScreenRoundAngle.slider.index = (option.monitor_round_angle + 0.5).toInt();
        SettingFrame::Pane::ScrolledBody::clip::space::ViewAngleScale.slider.index = (option.monitor_view_angle_scale * 100.0 + 0.5).toInt();
        SettingFrame::Pane::ScrolledBody::clip::space::ViewAngle.vbox.Slider.slider.index = (option.monitor_view_angle + 0.5).toInt();

        var frame_delay = SettingFrame::Pane::ScrolledBody::clip::space::FrameDelay.vbox;
        frame_delay.Slider.slider.index = (option.monitor_frame_delay * 100.0 + 0.5).toInt();
        frame_delay.CheckButton.active = option.monitor_frame_delay_enable;
        frame_delay.PixelJitterEnable.vbox.CheckButton.active = option.monitor_pixel_jitter_enable;

        SettingFrame::Pane::ScrolledBody::clip::space::RaceDisplay.OptionMenu.setIndex(context, option.monitor_race_display_enable ? option.monitor_race_display_mode + 1 : 0);
        SettingFrame::Pane::ScrolledBody::clip::space::ExtraWide.OptionMenu.setIndex(context, option.extra_wide);
        SettingFrame::Pane::ScrolledBody::clip::space::GTHiFiEnable.vbox.CheckButton.active = option.gt_hifi != 0;
        SettingFrame::Pane::ScrolledBody::clip::space::TemporalAAEnable.vbox.CheckButton.active = option.temporal_aa != 0;

        var flip_timing = SettingFrame::Pane::ScrolledBody::clip::space::FlipTiming.vbox;
        flip_timing.CheckButton.active = option.monitor_flip_timing_enable;
        flip_timing.Slider.slider.index = (option.monitor_flip_timing * 1000.0 + 0.5).toInt();

        update_menu(context);
    }

    method apply(context)
    {
        var option = main::GAME_STATUS.user_profile.option;
        var layout_index = SettingFrame::Pane::ScrolledBody::clip::space::MonitorLayout.OptionMenu.index;

        var layout_preset = show_extra ? extra_layout_preset : normal_layout_preset;
        var center_monitor = layout_preset[layout_index][2];

        option.monitor_host = SettingFrame::Pane::ScrolledBody::clip::space::MonitorMode.OptionMenu.index == 1;
        option.monitor_client = SettingFrame::Pane::ScrolledBody::clip::space::MonitorMode.OptionMenu.index == 2;
        option.monitor_auto_boot = show_extra ? 1 - SettingFrame::Pane::ScrolledBody::clip::space::AutoBootEnable::OptionMenu.index : 0;
        option.monitor_host_ip = SettingFrame::Pane::ScrolledBody::clip::space::ServerIPAddr.Text.input.value;
        option.monitor_index = option.monitor_host && !show_extra ? 
            (center_monitor != nil ? center_monitor : 0) : SettingFrame::Pane::ScrolledBody::clip::space::MonitorIndex.slider.index - 1;
        option.monitor_follow_host = SettingFrame::Pane::ScrolledBody::clip::space::MonitorSettingMode::OptionMenu.index;
        option.monitor_layout_x = layout_preset[layout_index][0];
        option.monitor_layout_y = layout_preset[layout_index][1];

        var aspect_ratio = SettingFrame::Pane::ScrolledBody::clip::space::AspectRatio.vbox;
        option.monitor_aspect_ratio_x = aspect_ratio.SliderX.slider.index;
        option.monitor_aspect_ratio_y = aspect_ratio.SliderY.slider.index;
        option.monitor_aspect_ratio_enable = aspect_ratio.CheckButton.active;
        option.monitor_border[0] = SettingFrame::Pane::ScrolledBody::clip::space::FrameBorderX.slider.index.toFloat() / 100.0;
        option.monitor_border[1] = SettingFrame::Pane::ScrolledBody::clip::space::FrameBorderY.slider.index.toFloat() / 100.0;
        option.monitor_round_angle = SettingFrame::Pane::ScrolledBody::clip::space::ScreenRoundAngle.slider.index.toFloat();
        option.monitor_round_xy = 0;
        option.monitor_view_angle_scale = SettingFrame::Pane::ScrolledBody::clip::space::ViewAngleScale.slider.index.toFloat() / 100.0;

        var view_angle = SettingFrame::Pane::ScrolledBody::clip::space::ViewAngle.vbox;
        option.monitor_view_angle = view_angle.Slider.slider.index.toFloat();

        var frame_delay = SettingFrame::Pane::ScrolledBody::clip::space::FrameDelay.vbox;
        option.monitor_frame_delay = frame_delay.Slider.slider.index.toFloat() / 100.0;
        option.monitor_frame_delay_enable = frame_delay.CheckButton.active;
        option.monitor_pixel_jitter_enable = frame_delay.PixelJitterEnable.CheckButton.active;

        option.monitor_race_display_enable = SettingFrame::Pane::ScrolledBody::clip::space::RaceDisplay.OptionMenu.index > 0 ? 1 : 0;
        option.monitor_race_display_mode = SettingFrame::Pane::ScrolledBody::clip::space::RaceDisplay.OptionMenu.index == 2 ? 1 : 0;
        option.extra_wide = SettingFrame::Pane::ScrolledBody::clip::space::ExtraWide.OptionMenu.index;
        option.gt_hifi = SettingFrame::Pane::ScrolledBody::clip::space::GTHiFiEnable.vbox.CheckButton.active;
        option.temporal_aa = SettingFrame::Pane::ScrolledBody::clip::space::TemporalAAEnable.vbox.CheckButton.active;

        var flip_timing = SettingFrame::Pane::ScrolledBody::clip::space::FlipTiming.vbox;
        option.monitor_flip_timing_enable = flip_timing.CheckButton.active;
        option.monitor_flip_timing = flip_timing.Slider.slider.index.toFloat() / 1000.0;

        option.apply();
    }

    method update_menu(context)
    {
        var extra = show_extra;
        var is_server = SettingFrame::Pane::ScrolledBody::clip::space::MonitorMode.OptionMenu.index == 1;
        var is_client = SettingFrame::Pane::ScrolledBody::clip::space::MonitorMode.OptionMenu.index == 2;

        var is_server_or_client = is_server || is_client;
        var follow_host = !is_server && SettingFrame::Pane::ScrolledBody::clip::space::MonitorSettingMode::OptionMenu.index;

        SettingFrame::Pane::ScrolledBody::clip::space::MonitorLayout.OptionMenu.insensitive = follow_host;
        SettingFrame::Pane::ScrolledBody::clip::space::FrameBorderX.slider.insensitive = follow_host;
        SettingFrame::Pane::ScrolledBody::clip::space::FrameBorderY.slider.insensitive = follow_host;
        SettingFrame::Pane::ScrolledBody::clip::space::ScreenRoundAngle.slider.insensitive = follow_host;
        SettingFrame::Pane::ScrolledBody::clip::space::ViewAngleScale.slider.insensitive = follow_host;

        var view_angle = SettingFrame::Pane::ScrolledBody::clip::space::ViewAngle.vbox;
        view_angle.RadioBox.vbox.RadioButtonX.insensitive = follow_host;
        view_angle.RadioBox.vbox.RadioButtonY.insensitive = follow_host;
        view_angle.Slider.slider.insensitive = follow_host;

        var aspect_ratio = SettingFrame::Pane::ScrolledBody::clip::space::AspectRatio.vbox;
        aspect_ratio.SliderX.slider.insensitive = follow_host;
        aspect_ratio.SliderY.slider.insensitive = follow_host;
        aspect_ratio.CheckButton.insensitive = follow_host;

        SettingFrame::Pane::ScrolledBody::clip::space::FrameDelay.vbox.CheckButton.insensitive = follow_host;

        SettingFrame::Pane::ScrolledBody::clip::space::CurrentIPAddr.visible = is_server;
        SettingFrame::Pane::ScrolledBody::clip::space::MonitorLayout.visible = is_server_or_client;
        SettingFrame::Pane::ScrolledBody::clip::space::FrameBorderX.visible = is_server_or_client;
        SettingFrame::Pane::ScrolledBody::clip::space::ScreenRoundAngle.visible = is_server_or_client;
        SettingFrame::Pane::ScrolledBody::clip::space::ViewAngleScale.visible = is_server_or_client;
        SettingFrame::Pane::ScrolledBody::clip::space::StartSubmonitor.visible = is_client;
        SettingFrame::Pane::ScrolledBody::clip::space::FindServer.visible = is_client;
        SettingFrame::Pane::ScrolledBody::clip::space::ServerIPAddr.visible = is_client;
        SettingFrame::Pane::ScrolledBody::clip::space::MonitorIndex.visible = extra || is_client;
        SettingFrame::Pane::ScrolledBody::clip::space::MonitorSettingMode.visible = is_client;
        SettingFrame::Pane::ScrolledBody::clip::space::FrameBorderY.visible = extra;
        SettingFrame::Pane::ScrolledBody::clip::space::AspectRatio.visible = extra && is_server_or_client;
        SettingFrame::Pane::ScrolledBody::clip::space::FrameDelay.visible = false;
        SettingFrame::Pane::ScrolledBody::clip::space::AutoBootEnable.visible = extra && is_server_or_client;
        SettingFrame::Pane::ScrolledBody::clip::space::ViewAngle.visible = extra && is_server_or_client;
        SettingFrame::Pane::ScrolledBody::clip::space::RaceDisplay.visible = extra && is_server_or_client;
        SettingFrame::Pane::ScrolledBody::clip::space::ExtraWide.visible = false;
        SettingFrame::Pane::ScrolledBody::clip::space::GTHiFiEnable.visible = false;
        SettingFrame::Pane::ScrolledBody::clip::space::TemporalAAEnable.visible = extra && is_server_or_client;
        SettingFrame::Pane::ScrolledBody::clip::space::FlipTiming.visible = false;

        if (is_client)
            startDNSBrowser();
        else 
            stopDNSBrowser();
    }

    method onInitialize(context)
    {
        if (gDirectApplyMode)
            SettingFrame::Pane::Foot.visible = false;

        show_extra = OptionRoot::isSecretOptionOpen();

        var layout_preset = show_extra ? extra_layout_preset : normal_layout_preset;
        var layout_list = Array(layout_preset.size);
        for (var i = 0; i < layout_preset.size; i++)
            layout_list[i] = "%d x %d".format(layout_preset[i][0], layout_preset[i][1]);
        
        OptionMenuUtil::initialize(context, ROOT, SettingFrame::Pane::ScrolledBody::clip::space::MonitorLayout.OptionMenu, hidden::LayoutItem, layout_list);

        SettingFrame::Pane::ScrolledBody::clip::space::MonitorIndex.slider.max = show_extra ? 15 : 5;
        SettingFrame::Pane::ScrolledBody::clip::space::MonitorIndex.slider.setup(context);

        var aspect_ratio = SettingFrame::Pane::ScrolledBody::clip::space::AspectRatio.vbox;
        aspect_ratio.SliderX.slider.setup(context);
        aspect_ratio.SliderY.slider.setup(context);

        var frame_border_x = SettingFrame::Pane::ScrolledBody::clip::space::FrameBorderX;
        frame_border_x.slider.setup(context);

        var frame_border_y = SettingFrame::Pane::ScrolledBody::clip::space::FrameBorderY;
        frame_border_y.slider.setup(context);

        var round_angle = SettingFrame::Pane::ScrolledBody::clip::space::ScreenRoundAngle;
        round_angle.slider.unit_text = "°";
        round_angle.slider.setup(context);

        var view_angle = SettingFrame::Pane::ScrolledBody::clip::space::ViewAngle.vbox;
        view_angle.Slider.slider.setup(context);

        var view_angle_scale = SettingFrame::Pane::ScrolledBody::clip::space::ViewAngleScale;
        view_angle_scale.slider.setup(context);

        var framet_delay = SettingFrame::Pane::ScrolledBody::clip::space::FrameDelay.vbox;
        framet_delay.Slider.slider.format_callback = (context, value) => 
        {
            var scale = 0.01;
            return "%.2f".format(scale * value + 0.005);
        };
        framet_delay.Slider.slider.setup(context);

        var flip_timing = SettingFrame::Pane::ScrolledBody::clip::space::FlipTiming.vbox;
        flip_timing.Slider.slider.format_callback = (context, value) => 
        {
            var scale = 0.1;
            return "%.1f".format(scale * value + 0.05);
        };
        flip_timing.Slider.slider.setup(context);

        reflect(context);
        SettingFrame.adjust_scrolled_body();

        var focus_w = SettingFrame::Pane::ScrolledBody::clip::space::MonitorMode.OptionMenu;
        ROOT.setFocus(focus_w);
        SettingFrame::Pane::ScrolledBody::clip::space.parent.warp(focus_w);
    }

    method onFinalize(context)
    {
        stopDNSBrowser();
        OptionMenuUtil::finalize(context, SettingFrame::Pane::ScrolledBody::clip::space::MonitorLayout.OptionMenu);
        sServiceList = [:];
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        if (gDirectApplyMode)
        {
            ROOT.apply();
            ROOT.close(context);
        }
        else
            ROOT.setFocus(SettingFrame::Pane::Foot::Cancel);

        return EVENTRESULT_FILTER;
    }

    method startDNSBrowser()
    {
        if (main::MMmDNSConfig == nil)
        {
            ServicePublisher.initialize();
            main::MMmDNSConfig = ServicePublisher.createServiceConfig("MultiDisplay");
        }

        if (main::MMmDNSBrowser == nil)
        {
            var browser = gtengine::MServiceBrowser();
            var res = browser.initialize();
            if (res)
                main::MMmDNSBrowser = browser;
        }

        if (main::MMmDNSBrowser != nil && !sBrowserEnable)
        {
            sBrowserEnable = true;
            main::MMmDNSBrowser.setContinuousMode(true);
            main::MMmDNSBrowser.browseRequest(main::MMmDNSConfig, nil, (args) => 
            {
                |var context, var requestId, var service| = args;
                sServiceList[service.name] = service;
            });
        }
    }

    method stopDNSBrowser()
    {
        sBrowserEnable = false;
        if (main::MMmDNSBrowser != nil)
        {
            main::MMmDNSBrowser.clearCallback();
            main::MMmDNSBrowser = nil;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::MonitorMode::OptionMenu
    {
        method onValueChanged(context)
        {
            update_menu(context);
            SettingFrame.adjust_scrolled_body();
            SettingFrame::Pane::ScrolledBody::clip::space.parent.warp(self);
            __prototype__::onValueChanged(context);
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::MonitorSettingMode::OptionMenu
    {
        method onValueChanged(context)
        {
            update_menu(context);
            SettingFrame::Pane::ScrolledBody::clip::space.parent.warp(self);
            __prototype__::onValueChanged(context);
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::StartSubmonitor::vbox::Start
    {
        function onActivate(context)
        {
            main::sound.play("ok");
            if (DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "DO_YOU_START_SUBMONITOR")))
            {
                ContextMain.disableInput();
                ContextMain.filterKeyEvent();
                CursorUtil::setCursor(ContextMain, "wait");

                ROOT.apply(context);
                OptionRoot.saveIfChanged(context);

                main::ORG.monitor_race_display_enable = false;
                SoundUtil::BGMFadeout(1.0);

                SaveDataUtilGT6::syncBackgroundSave();
                ROOT.close(context, "multimonitor_client");
            }

            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::FindServer::vbox::Button
    {
        function onActivate(context)
        {
            if (sServiceList.size != 0)
            {
                main::sound.play("ok");
                foreach (|var key, var val| in sServiceList)
                {
                    var service = val;
                    var ipaddr = service.address.split(":")[0];
                    SettingFrame::Pane::ScrolledBody::clip::space::ServerIPAddr.Text.input.value = ipaddr;
                    break;
                }
            }   
            else
                main::sound.play("disable");

            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::Foot::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.apply();
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::Foot::Cancel
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }
}