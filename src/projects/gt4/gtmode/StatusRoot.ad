











module PROJECT::ROOT
{
    function onInitialize(context)
    {
        enterPage(context, ROOT, "StatusTitle");

#ifdef GT4O_US_BETA
        var key = "StatusRoot";
        if (main::menu::MSystem::GetVersionBranch() == "beta") // GT4 Online
            key = "StatusRoot2";

        ROOT["Common"]["ToolTip"]["tip"].key = key;
#else
        ROOT["Common"]["ToolTip"]["tip"].key = "StatusRoot";
#endif

        context.cursor_visible = false;
        init(context);
    }

    function onFinalize(context)
    {
        ROOT.setFocus(nil);
        leavePage(context, ROOT);
    }

    function init(context)
    {
        PlayerName::playername.text = main::game.username;

        var calendar = main::game.calendar;
        var today = calendar.today;
        var jurian_today = main::menu::MCalendar::dateToDay(today[0], today[1], today[2]);

        PlayerName::day.text = context.translate(ROOT, "DayFormat").format(main::menu::MCalendar::dayToGameDay(jurian_today) + 1);

        print "calcurating ... start\n";
        var game_stat = getRaceEventRecordStatistics();
        print "calcurating ... done\n";

        Achievement::value.text = main::menu::MUtility::GetFormatString("%.1t", game_stat[0].toInt()) + "%%";
        Achievement::value.adjustScale();

        AspecPoint::value.text = context.translate(ROOT, "PointsFormat").format(game_stat[1].toString());
        AspecPoint::value.adjustScale();

        var license_list = [];
        license_list.push("0b");
        license_list.push("0a");
        license_list.push("ib");
        license_list.push("ia");
        license_list.push("0s");

        var number_of_license_exam = 16;

        var gold = 0;
        var silver = 0;
        var bronze = 0;
        for (var i = 0; i < license_list.size; i++)
        {
            var name = license_list[i];

            Licenses::LicenseIcon["image_" + name].visible = main::game.race_record.isLicensePassed("l" + name);
            
            for (var exam = 0; exam < number_of_license_exam; exam++)
            {
                var unit = main::game.race_record.getUnit("l" + name + "%04d".format(exam + 1));
                if (unit != nil)
                {
                    switch (unit.result)
                    {
                        case "gold":
                            gold++; break;
                        case "silver":
                            silver++; break;
                        case "bronze":
                            bronze++; break;
                    }
                }
            }
        }

        Licenses::value_gold.text = gold.toString();
        Licenses::value_silver.text = silver.toString();
        Licenses::value_bronze.text = bronze.toString();

        AspecTravelDistance::value.text = main::game.getAspecDistance();
        AspecTravelDistance::value.adjustScale();

        BspecTravelDistance::value.text = main::game.getBspecDistance();
        BspecTravelDistance::value.adjustScale();

        var wins = main::game.getTotalRankCount(1);
        var all = main::game.getTotalRaceCount();

        var percentage_1000 = all > 0 ? (1000 * wins) / all : 0
        var percentage_str = main::menu::MUtility::GetFormatString("%.1t", percentage_1000.toInt());
        WinningPercentage::value.text = context.translate(ROOT, "WinningPercentageFormat").format(wins, all, percentage_str);
        WinningPercentage::value.adjustScale();

        var num_trophy = 0;
        for (var i = 1; i <= 3; i++)
            num_trophy += main::game.getTotalRankCount(i);
        Trophy::value.text = context.translate(ROOT, "TrophiesFormat").format(num_trophy);
        Trophy::value.adjustScale();

        PresentCar::value.text = context.translate(ROOT, "TotalPrizeCarsFormat").format(main::game.getTotalPrizeCars());
        PresentCar::value.adjustScale();

        PrizeMoney::value.text = main::game.getTotalPrizeMoney();
        PrizeMoney::value.adjustScale();

        NumberOfCars::value.text = context.translate(ROOT, "NumberOfCarsFormat").format(main::game.garage.count);
        NumberOfCars::value.adjustScale();

        var skillformat = context.translate(ROOT, "SkillFormat");
        var skillvalueformat = "%d";
        BspecTotal::value.text = skillformat.format(main::menu::MUtility::GetFormatString(skillvalueformat, main::game.getBspecTotalExperience()));
        BspecMachine::value.text = skillformat.format(main::menu::MUtility::GetFormatString(skillvalueformat, main::game.getBspecCarExperience()));
        BspecCourse::value.text = skillformat.format(main::menu::MUtility::GetFormatString(skillvalueformat, main::game.getBspecCourseExperience()));
        BspecBattle::value.text = skillformat.format(main::menu::MUtility::GetFormatString(skillvalueformat, main::game.getBspecBattleExperience()));
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
#ifdef GT4O_US_BETA
        HomeRoot::open(context);
#else
        start_page(context, HomeRoot);
#endif
        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PS2_PAD_CTRL_CROSS:
                main::sound.play("ok");
#ifdef GT4O_US_BETA
                HomeRoot::open(context);
#else
                start_page(context, HomeRoot);
#endif
                return EVENTRESULT_FILTER;
                break;

            case PS2_PAD_CTRL_START:
                {
                    var reg = main::menu::MSystem::GetRegionCode();
#ifdef GT4O_US_BETA
                    if (reg != "tw" && reg != "cn" && main::menu::MSystem::GetVersionBranch() != "beta")
#else
                    if (reg != "tw")
#endif
                    {
                        inheritDataCheck(context);
                        return EVENTRESULT_FILTER;
                    }
                }
        }

        return EVENTRESULT_CONTINUE;
    }

    function inheritDataCheck(context)
    {
        if (main::game.withdrawnGT4p)
            openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "already withdrawn gt4p"));
        
        if (main::game.withdrawn)
            openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "already withdrawn gt3"));

        var reg = main::menu::MSystem::GetRegionCode();
        for (var i = 0; i < 2; ++i)
        {
#ifdef GT4O_US_BETA
            if (main::game.withdrawnGT4 && main::game.withdrawnGT4p && (reg == "kr" || main::game.withdrawn))
#else
            if (main::game.withdrawnGT4p && (reg == "kr" || main::game.withdrawn))
#endif
                return;

            var manager = main::menu::MMemoryCardManager("MODE_OPERATION", i);
            if (manager.isConnect())
                inheritDataCheckGT4p(context, manager, i);

            if (manager.isConnect() && reg != "kr")
                inheritDataCheckGT3(context, manager, i);

            if (!manager.isConnect())
                openConfirmDialog(context, DIALOG_ERROR, translateMc(context, "no_memorycard_slot_n").format(i + 1));
        }
    }

#ifdef GT4O_US_BETA
    function inheritDataCheckGT4(context, manager, i)
    {
        if (main::game.withdrawnGT4)
            return;

        if (!manager.isConnect())
            return;

        if (manager.isFormat())
        {
            var r = manager.isExistGT4Data();
            print "result = %{r}\n";

            if (r == "OK")
            {
                print "exist GT4 Data!!\n";
                startMcWatcher(context, manager);
                if (openMcDialog(context, 3, context.translate(ROOT, "exist gt4 data on slot n. inherit license?").format(i + 1)))
                {
                    r = manager.inheritGT4Data();
                    if (r == "OK")
                    {
                        main::sound.play("ok");
                        openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "inherit GT4 done"));
                        init(context);
                        main::game.withdrawnGT4 = true;
                    }
                    else if (r == "NO_OPERATION")
                    {
                        main::sound.play("disable");
                        openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "not inherit GT4"));
                    }
                    else
                    {
                        handleLoadResult(context, r);
                    }
                }

                endMcWatcher(context, manager);
                return;
            }
            else if (r == "DEVICE_ERROR")
            {
                openConfirmDialog(context, DIALOG_ERROR, translateMc(context, "access_error"));
                return;
            }
        }

        openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "gt4p data not found in slot n").format(i + 1));
    }
#endif

    function inheritDataCheckGT4p(context, manager, i)
    {
        if (main::game.withdrawnGT4p)
            return;

        if (!manager.isConnect())
            return;

        if (manager.isFormat())
        {
            var r = manager.isExistGT4pData();
            print "result = %{r}\n";

            if (r == "OK")
            {
                print "exist GT4p Data!!\n";
                startMcWatcher(context, manager);
                if (openMcDialog(context, 3, context.translate(ROOT, "exist gt4p data on slot n. inherit license?").format(i + 1)))
                {
                    r = manager.inheritGT4pData();
                    if (r == "OK")
                    {
                        main::sound.play("ok");
                        openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "inherit GT4p done"));
                        init(context);
                        main::game.withdrawnGT4p = true;
                    }
                    else if (r == "NO_OPERATION")
                    {
                        main::sound.play("disable");
                        openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "not inherit GT4p"));
                    }
                    else
                    {
                        handleLoadResult(context, r);
                    }
                }

                endMcWatcher(context, manager);
                return;
            }
            else if (r == "DEVICE_ERROR")
            {
                openConfirmDialog(context, DIALOG_ERROR, translateMc(context, "access_error"));
                return;
            }
        }

        openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "gt4p data not found in slot n").format(i + 1));
    }

    function inheritDataCheckGT3(context, manager, i)
    {
        if (main::game.withdrawn)
            return;

        if (!manager.isConnect())
            return;

        if (manager.isFormat())
        {
            var r = manager.isExistGT3Data();
            print "result = %{r}\n";

            if (r == "OK")
            {
                print "exist GT3 Data!!\n";
                startMcWatcher(context, manager);
                if (openMcDialog(context, 3, context.translate(ROOT, "exist gt3 data on slot n. inherit license?").format(i + 1)))
                {
                    r = manager.inheritGT3Data();
                    if (r == "OK")
                    {
                        main::sound.play("ok");
                        refreshMoney(ROOT);
                        openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "inherit GT3 done"));
                        main::game.withdrawn = true;
                    }
                    else if (r == "NO_OPERATION")
                    {
                        main::sound.play("disable");
                        openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "not inherit GT3"));
                    }
                    else
                    {
                        handleLoadResult(context, r);
                    }
                }

                endMcWatcher(context, manager);
                return;
            }
            else if (r == "DEVICE_ERROR")
            {
                openConfirmDialog(context, DIALOG_ERROR, translateMc(context, "access_error"));
                return;
            }
        }

        openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "gt3 data not found in slot n").format(i + 1));
    }
}