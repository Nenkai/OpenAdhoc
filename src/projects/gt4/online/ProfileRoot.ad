module PROJECT::ROOT
{
    static sMode = nil;
    static sActivePane = nil;
    static sActiveButton = nil;

    function onLoad(context)
    {
        setDialogMoveActorH(ProfilePane);
        setDialogMoveActorH(ProfileListPane);
        setDialogMoveActorH(PlayerListPane);
    }

    function onUnload(context)
    {
    }

    function onInitialize(context)
    {
        enterPage(context, ProfileRoot, "Profile");
        sMode = nil;
        sActivePane = nil;
        sActiveButton = nil;
        hidden.visible = false;
        PrivateRaceCommon::setToolTip(ProfileRoot["Common"]["ToolTip"]["tip"]);
        ProfilePane::initialize(context);
        ProfileListPane::initialize(context);
        PlayerListPane::initialize(context);
        setNextMode(0);
        activateButton(CommandPane::MyProfile);
        activatePane(context, ProfileListPane);
        ProfileListPane::setFocusButton();
        CreateWatcher(context, PlayerListPane::ScrollBox::ListBox::onTick, 10);
    }

    function onFinalize(context)
    {
        sActiveButton.active = false;
        sMode = nil;
        sActivePane = nil;
        sActiveButton = nil;
        PrivateRaceCommon::disposeToolTip();
        ProfilePane::finalize(context);
        ProfileListPane::finalize(context);
        PlayerListPane::finalize(context);
        ProfileRoot.setFocus(nil);
        DeleteWatcher();
        leavePage(context, ProfileRoot);
    }

    function onCancel(context, event, item)
    {
        main::sound.play("cancel");
        start_page(context, HomeRoot);
        return EVENTRESULT_FILTER;
    }

    function activatePane(context, pane)
    {
        var prev_pane = sActivePane;
        if (prev_pane == pane)
        {
            if (prev_pane != nil)
            {
                prev_pane.close(context);
                prev_pane.actor.out = true;
                context.sync(0.1);
            }
            pane.open(context);
            pane.actor.out = false;
        }
        else
        {
            pane.visible = true;
            if (prev_pane != nil)
                prev_pane.close(context);

            pane.open(context);
            if (prev_pane != nil)
                prev_pane.actor.out = true;

            pane.actor.out = false;
            context.sync(0.25);
            if (prev_pane != pane && prev_pane != nil)
                prev_pane.visible = false;
        }
        sActivePane = pane;
    }

    function activateButton(button)
    {
        if (sActiveButton == button)
            return;

        var prev_button = sActiveButton;
        if (prev_button != nil)
            prev_button.active = false;

        button.active = true;
        sActiveButton = button;
    }

    function setNextMode(mode)
    {
        sMode = mode;
    }

    function isProfileModeNow()
    {
		sMode != nil ? sMode == 0 : false;
		return;
    }

    function isBuddyListModeNow()
    {
        sMode != nil ? sMode == 1 : false;
		return;
    }

    function isIgnoreListModeNow()
    {
        sMode != nil ? sMode == 2 : false;
		return;
    }

    function isExistActivatePane()
    {
        return sActivePane != nil;
    }
}
 
module PROJECT::ROOT::PlayerListPane
{
	static sIsInChatRoom = false;
	
	function setFocusButton()
	{
		ScrollBox::ListBox.focus_callback = nil;
		ScrollBox::ListBox.focus_active = false;
		if (isBuddyListModeNow())
			ProfileRoot.setFocus(CommandPane::BuddyList);
		else
			ProfileRoot.setFocus(CommandPane::IgnoreList);
	}
	
	#include "playerlist.h"
}

module PROJECT::ROOT::PlayerListPane::ScrollBox::ListBox
{
	function initialize(context)
	{
		ListBox.setItemTemplate(context, hidden::PlayerItem);
		ListBox.visible_callback = visible_callback;
		ListBox.step_min = 1;
		ListBox.step_max = 2;
		ScrollBox::ListBox.focus_active = false;
	}
	
	function setConnectStatus(item, stat)
	{
		item["Stat"]["Indicator"].visible = false;
		switch(stat)
		{
			case 0:
            default:
				item["Stat"]["Indicator"].visible = true;
				item["Stat"]["Indicator"].active = false;
				break;

			case 1:
			case 2:
			case 3:
				item["Stat"]["Indicator"].visible = true;
				item["Stat"]["Indicator"].active = true;
				break;
		}
	}

	function setPlayerInfo(w, is_add_player_column, id, name)
	{
		setBlinkActor(w["Stat"]["Indicator"]["bga"]);
		w.defineStatic("sIsAddPlayerColumn", is_add_player_column);
		w.defineStatic("sId", id);
		w.defineStatic("sName", name);
		w["name"].text = name;
	}
	
	function setup_widget(context, i, w)
	{
		var player = sCurrentPlayerList[i];
		if (i == 0)
		{
			setPlayerInfo(w, 1, player[0], player[1]);
		}
		else
		{
			setPlayerInfo(w, 0, player[0], player[1]);
			setConnectStatus(w, player[2]);
		}
	}

	function visible_callback(context, index)
	{
		
		for (var i = 0; i < index.size; i++)
		{
			var visible = ListBox.getItemVisible(index[i]);
			if (visible)
			{
				var w = ListBox.getItemWidget(index[i], context);
				setup_widget(context, index[i], w);
				ListBox.setItemUpdate(index[i], 3);
			}
		}
	}
	
	function setToolTipValue(context, focus_index)
	{
		var player = sCurrentPlayerList[focus_index];
		if (focus_index == 0)
		{
			var label;
			if (isBuddyListModeNow())
				label = context.translate(ProfileRoot, "LABEL|BUDDY_LIST");
			else
				label = context.translate(ProfileRoot, "LABEL|IGNORE_LIST");
	
			var text = context.translate(ProfileRoot, "TOOLTIP|LIST_ADD_COLUMN").build(label);
			PrivateRaceCommon::setToolTipOnValue(0, text);
		}
		else
		{
			var text = context.translate(ProfileRoot, "TOOLTIP|LIST_PLAYER_COLUMN");
			PrivateRaceCommon::setToolTipOnValue(1, text);
		}
	}

	function onFocusEnter(context, event)
	{
		setToolTipValue(context, ListBox.focus_index);
	}
	
	function focus_callback(context, new_index, old_index)
	{
		setToolTipValue(context, new_index);
	}
	
	function onTick(context)
	{
		if (isBuddyListModeNow() || isIgnoreListModeNow())
		{
			if (sCurrentBARESACount != sBARESACount || sCurrentBAREQCount != sBAREQCount)
			{
				updateList(context, 0);
				sCurrentBARESACount = sBARESACount;
				sCurrentBAREQCount = sBAREQCount;
			}
		}
	}

	function updateList(context, IsOnOpen)
	{
		sIsOnOpen = IsOnOpen;
		updateListImpl(context);
	}
	
	function updateListImpl(context)
	{
		var player_list = nil;
		if (isBuddyListModeNow())
			player_list = main::network.getBuddyList();
		else
			player_list = main::network.getIgnoreList();
		
		if (player_list == nil)
		{
			openOnlineErrorDialog(context);
			restart(context);
			return;
		}
		var text = context.translate(ProfileRoot, "ADD_PLAYER");
		var add_player = [-1, "[%s]".format(text)];
		player_list.sort(compare_func);
		player_list.unshift(add_player);
		var count = player_list.size;
		ListBox.setItemCount(0);
		ListBox.setItemCount(count);
		sCurrentPlayerList = player_list;
		if (sIsOnOpen)
		{
			var label = "";
			var max_count = 100;
			if (isBuddyListModeNow())
			{
				label = context.translate(ProfileRoot, "LABEL|BUDDY_LIST");
				max_count = 100;
			}
			else
			{
				label = context.translate(ProfileRoot, "LABEL|IGNORE_LIST");
				max_count = 32;
			}
			text = context.translate(ProfileRoot, "TOOLTIP|LIST_COUNT").build(label, count - 1, max_count);
			PrivateRaceCommon::setToolTipOnValue(0, text);
		}
	}

	function compare_func(a, b)
	{
		return a[1] < b[1];
	}

	function joinChat(context, id)
	{
		if (id == nil || id <= 0)
			return false;
	
		if (!canRaceByTheCar(context))
			return false;
	
		var text = context.translate(ProfileRoot, "GETTING_INFORMATION");
		var info = openProcessDialog(context, text, getValidChatInfo, id);
		if (info == nil)
			return false;
	
		if (info.size == 0 || info[0].size < 2)
		{
			text = context.translate(ProfileRoot, "ERROR|CANNOT_GET_VALID_CHAT_INFO");
			main::sound.play("disable");
			openConfirmDialog(context, DIALOG_ERROR, text);
			return false;
		}
        else
        {
		    if (info.size >= 2 && info[1].size >= 2)
		    {
		    	if (info[0][0] == info[1][0])
		    	{
		    		text = context.translate(ProfileRoot, "ERROR|YOU_ALREADY_WERE_JOINING_THIS_CHAT_ROOM");
		    		main::sound.play("disable");
		    		openConfirmDialog(context, DIALOG_ERROR, text);
		    		return false;
		    	}
		    }

		    var presentation_name = PrivateRaceCommon::getChatChannelNameForPresentation(context, info[0][1]);
		    text = context.translate(ProfileRoot, "DO_YOU_JOIN_THIS_CHAT_CHANNEL").build(presentation_name);

		    var res = openConfirmDialog(context, DIALOG_QUERY, text);
		    if (res)
		    {
		    	res = joinChatImpl(context, info[0][0], presentation_name);
		    	return res;
		    }
        }

		return true;
	}

	function getValidChatInfo(context, id)
	{
		var buddy_info = [];
		var list = main::network.getBuddyList();
		if (list == nil)
		{
			openOnlineErrorDialog(context);
			restart(context);
			return nil;
		}
		PrivateRaceCommon::sortList(list);
		var pos = PrivateRaceCommon::id_bsearch(list, id, PrivateRaceCommon::getFirstColumnFromList);
		if (pos >= 0 && list[pos][3] > 0)
		{
			var buddy = list[pos];
			if (PrivateRaceCommon::isWorldTypeVisible(buddy[5]))
				buddy_info = [buddy[3], buddy[5]];
		}
	
		var my_info = [];
		if (sIsInChatRoom)
		{
			var info = main::network.getChannelInfo();
			if (info == nil)
			{
				openOnlineErrorDialog(context);
				restart(context);
				return nil;
			}
			my_info = [main::network.getCurrentLobbyWorldID(), info[0]];
		}
		return [buddy_info, my_info];
	}

	function joinChatImpl(context, id, name)
	{
		var res = ChatRoot::joinChatChannel(context, 1, id, "");
		if (res)
		{
			ChatRoot::setChannelInfo(id, name);
			start_page(context, ChatRoot);
		}
		return res;
	}

	function deletePlayer(context, id, name)
	{
		if (id == nil || id <= 0 || name == nil || name == "")
			return false;
	
		var text = context.translate(ProfileRoot, "DO_YOU_DELETE");
		var res = openConfirmDialog(context, DIALOG_QUERY, text);
		if (res)
		{
			text = context.translate(ProfileRoot, "NOW_DELETING").build(name);
			if (isBuddyListModeNow())
				res = openProcessDialog(context, text, PrivateRaceCommon::buddyDelete, [id, name]);
			else
				res = openProcessDialog(context, text, PrivateRaceCommon::ignoreDelete, [id, name]);
	
			if (res)
			{
				main::sound.play("ok");
				updateList(context, 0);
			}
		}
		return res;
	}

	function onActivate(context, event)
	{
		var item = ListBox.getItemWidget(ListBox.focus_index, context);
		if (item == nil) return;
		if (item["sIsAddPlayerColumn"] == nil) return;
		if (item["sId"] == nil) return;
		if (item["sName"] == nil) return;
		main::sound.play("ok");
		if (item["sIsAddPlayerColumn"])
		{
			var res = InputDialog::InputPlayer::open(context, isBuddyListModeNow() ? 0 : 1);
			if (res != nil && res)
			{
				main::sound.play("ok");
				updateList(context, 0);
			}
		}
        else
        {
		    var selected_item = InputDialog::ContextMenu::open(context, item, [isBuddyListModeNow() ? 0 : 1, item["sName"]]);
		    switch(selected_item)
		    {
		    	case 1:
		    		if (__project__.defined("MessageProject"))
		    		{
		    			main::sound.play("ok");
		    			MessageProject::openProfile(context, item["sId"], item["sName"]);
		    		}
		    		break;
                
		    	case 2:
		    		var id = main::network.accountName2AccountID(item["sName"]);
		    		var id2 = main::network.accountIsOnline(item["sName"]);
		    		if (id <= 0 || id2 <= 0)
		    		{
		    			main::sound.play("disable");
		    			var text = context.translate(ProfileRoot, "OnlineMessage", "YOU_CANNOT_SEND_IM").build(item["sName"]);
		    			openConfirmDialog(context, DIALOG_ERROR, text);
		    		}
		    		else if (__project__.defined("MessageProject"))
		    			MessageProject::openIM(context, item["sId"], item["sName"]);
                
		    		break;

		    	case 3:
		    	case 4:
		    		main::sound.play("ok");
		    		deletePlayer(context, item["sId"], item["sName"]);
		    		break;

		    	case 7:
		    		main::sound.play("ok");
		    		joinChat(context, item["sId"]);
		    		break;

                default:
                    break;
		    }
        }

		return EVENTRESULT_FILTER;
	}

	function onKeyPress(context, event)
	{
		var keysym = event.keysym;
		if (keysym == PS2_PAD_CTRL_L3_RIGHT)
		{
			main::sound.play("cursor");
			setFocusButton();
			return EVENTRESULT_FILTER;
		}
		else if (keysym == PS2_PAD_CTRL_L3_LEFT)
        {
			return EVENTRESULT_FILTER;
        }
		else if ((keysym == PS2_PAD_CTRL_L3_UP && ListBox.focus_index == 0) || 
           (keysym == PS2_PAD_CTRL_L3_DOWN && ListBox.focus_index == (ListBox.getItemCount() - 1)))
        {
			return EVENTRESULT_FILTER;
        }
	
		return EVENTRESULT_CONTINUE;
	}
	
	function onCancel(context, event, item)
	{
		main::sound.play("cancel");
		setFocusButton();
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::ProfileListPane
{
    function initialize(context)
    {
        setLabel(context);
        Nickname.visible = (main::ProfileNicknameCondition != 2);
        Location.visible = (main::ProfileLocationCondition != 2);
        ProfileListPane.actor.out = true;
        ProfileListPane.actor.warp();
        ProfileListPane.visible = false;
    }

    function finalize(context)
    {
    }

    function onActivate(context, event, item)
    {
        main::sound.play("ok");
        ProfilePane.open(context);
        return EVENTRESULT_FILTER;
    }

    function open(context)
    {
        PrivateRaceCommon::clearToolTipValue();
        setProfileList(context);
    }

    function close(context)
    {
    }

    function setFocusPane()
    {
        ProfileRoot.setFocus(Change);
    }

    function setFocusButton()
    {
        ProfileRoot.setFocus(CommandPane::MyProfile);
    }

    function translateOM(context, key, arg)
    {
        if (arg == nil)
            return context.translate(ProfileRoot, "OnlineMessage", key);
        else
            return context.translate(ProfileRoot, "OnlineMessage", key).build(arg);
    }

    static sLabelItem = ["Player", "Nickname", "Location", "Sex", "Age", "Comment", "Point", "RidingCar"];

    function setLabel(context)
    {
        
        for (var i = 0; i < sLabelItem.size; i++)
        {
            ProfileListPane[sLabelItem[i]].label.text = translateOM(context, "PROFILE_" + sLabelItem[i].upcase());
        }
    }

    function setProfileList(context)
    {
        var profile = getPlayerProfile(context, main::network.my_id, 1);
        if (profile == nil)
            return;

        Title::label.text = translateOM(context, "PROFILE_TITLE", main::network.my_name);
        Player::text.text = main::network.my_name;
        var sex_widget = ProfilePane::Sex::OptionMenu.getItem(profile[3]);
        Nickname::text.text = (profile[1] == "") ? "--" : main::menu::MUtility::GetSanitizedString(profile[1]);
        Location::text.text = (profile[2] == "") ? "--" : main::menu::MUtility::GetSanitizedString(profile[2]);
        Sex::text.text = sex_widget["label"].text;
        Age::text.text = profile[4];
        Comment::text.text = (profile[5] == "") ? "--" : main::menu::MUtility::GetSanitizedString(profile[5]);
        Point::text.text = profile[6];
        RidingCar["chip"].visible = false;
        if (profile[8] >= 0)
        {
            var gcar = main::menu::MCarGarage(profile[8]);
            RidingCar["chip"].setData(gcar, profile[7]);
            RidingCar["chip"].visible = true;
        }
        RidingCar::text.text = profile[9];
		return true;
    }

    function updateProfileList()
    {
        var sex_widget = ProfilePane::Sex::OptionMenu.getItem(ProfilePane::Sex::OptionMenu.index);
        var nickname = main::menu::MUtility::GetSanitizedString(ProfilePane::Nickname::Input::input.value);
        var location = main::menu::MUtility::GetSanitizedString(ProfilePane::Location::Input::input.value);
        var comment = main::menu::MUtility::GetSanitizedString(ProfilePane::Comment::Input::input.value);
        Nickname::text.text = (nickname == "") ? "--" : nickname;
        Location::text.text = (location == "") ? "--" : location;
        Sex::text.text = sex_widget["label"].text;
        Age::text.text = ProfilePane::Age::edit::number::input.value;
        Comment::text.text = (comment == "") ? "--" : comment;
    }

    function onKeyPress(context, event)
    {
        var keysym = event.keysym;
        if (keysym == PS2_PAD_CTRL_L3_RIGHT)
        {
            main::sound.play("cursor");
            setFocusButton();
            return EVENTRESULT_FILTER;
        }
        else if (keysym == PS2_PAD_CTRL_L3_LEFT)
        {
            return EVENTRESULT_FILTER;
        }
        return EVENTRESULT_CONTINUE;
    }

    function onCancel(context, event, item)
    {
        main::sound.play("cancel");
        setFocusButton();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::CommandPane
{
    function onKeyPress(context, event)
    {
        var keysym = event.keysym;

        if (keysym == PS2_PAD_CTRL_L3_LEFT)
        {
            main::sound.play("cursor");
            if (isProfileModeNow())
                ProfileListPane::setFocusPane();
            else
                PlayerListPane::setFocusPane();

            return EVENTRESULT_FILTER;
        }
        else if (keysym == PS2_PAD_CTRL_L3_RIGHT)
            return EVENTRESULT_FILTER;

        return EVENTRESULT_CONTINUE;
    }
}

module PROJECT::ROOT::CommandPane::MyProfile
{
    function onActivate(context)
    {
        if (!isProfileModeNow())
        {
            if (isExistActivatePane())
                main::sound.play("ok");
			
            setNextMode(0);
            activateButton(CommandPane::MyProfile);
            activatePane(context, ProfileListPane);
        }
        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        var text = context.translate(ProfileRoot, "TOOLTIP|CommandPane::MyProfile");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::CommandPane::BuddyList
{
    function onActivate(context)
    {
        if (!isBuddyListModeNow())
        {
            if (isExistActivatePane())
            {
                main::sound.play("ok");
            }
            setNextMode(1);
            activateButton(CommandPane::BuddyList);
            activatePane(context, PlayerListPane);
        }
        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        var text = context.translate(ProfileRoot, "TOOLTIP|CommandPane::BuddyList");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::CommandPane::IgnoreList
{
    function onActivate(context)
    {
        if (!isIgnoreListModeNow())
        {
            if (isExistActivatePane())
                main::sound.play("ok");

            setNextMode(2);
            activateButton(CommandPane::IgnoreList);
            activatePane(context, PlayerListPane);
        }
        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        var text = context.translate(ProfileRoot, "TOOLTIP|CommandPane::IgnoreList");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ProfilePane
{
    function initialize(context)
    {
        setLabel(context);
        Password::ChangePassword.visible = !main::network.isNGSNow;
        Nickname.visible = (main::ProfileNicknameCondition != 2);
        Nickname::Input::input.insensitive = (main::ProfileNicknameCondition != 0);
        Location.visible = (main::ProfileLocationCondition != 2);
        Location::Input::input.insensitive = (main::ProfileLocationCondition != 0);
        ProfilePane.doColorize();
        ProfilePane.actor.out = true;
        ProfilePane.actor.warp();
        ProfilePane.visible = false;
        Sex::OptionMenu::initialize(context);
    }

    function finalize(context)
    {
        Sex::OptionMenu::finalize(context);
    }

    function open(context)
    {
        PrivateRaceCommon::clearToolTipValue();
        setProfile(context);
        ProfilePane.visible = true;
        ProfilePane.actor.out = false;
        context.sync(0.25);
        ProfileListPane.Change.can_focus = false;
        CommandPane.MyProfile.can_focus = false;
        CommandPane.BuddyList.can_focus = false;
        CommandPane.IgnoreList.can_focus = false;
        ProfilePane.setFocusPane();
    }

    function close(context)
    {
        ProfileListPane.Change.can_focus = true;
        CommandPane.MyProfile.can_focus = true;
        CommandPane.BuddyList.can_focus = true;
        CommandPane.IgnoreList.can_focus = true;
        ProfilePane.actor.out = true;
        context.sync(0.25);
        ProfilePane.visible = false;
        ProfilePane.setFocusButton();
    }

    function setFocusPane()
    {
        ProfileRoot.setFocus(Buttons::CancelOK::OK);
    }

    function setFocusButton()
    {
        ProfileRoot.setFocus(ProfileListPane::Change);
    }

    function translateOM(context, key, arg)
    {
        if (arg == nil)
            return context.translate(ProfileRoot, "OnlineMessage", key);
        else
            return context.translate(ProfileRoot, "OnlineMessage", key).build(arg);
    }

    static sLabelItem = [
        "Player",
        "Nickname",
        "Location",
        "Sex",
        "Age",
        "Comment",
        "Point",
        "RidingCar"
    ];

    function setLabel(context)
    {
        
        for (var i = 0; i < sLabelItem.size; i++)
        {
            ProfilePane[sLabelItem[i]].label.text = translateOM(context, "PROFILE_" + sLabelItem[i].upcase());
        }
        var option_menu = Sex::OptionMenu::popup::vbox;
        option_menu["None"]["label"].text = translateOM(context, "PROFILE_NOANSWER");
        option_menu["Male"]["label"].text = translateOM(context, "PROFILE_MALE");
        option_menu["Female"]["label"].text = translateOM(context, "PROFILE_FEMALE");
    }

    function setProfile(context)
    {
        var profile = getPlayerProfile(context, main::network.my_id, 1);
        if (profile == nil) return;
        Title::title.text = translateOM(context, "PROFILE_TITLE", main::network.my_name);
        Player::text.text = main::network.my_name;
        var pass = "";
        
        for (var i = 0; i < main::game.password.size; i++)
        {
            pass += "*";
        }
        Password::text.text = pass;
        Nickname::Input::input.value = profile[1];
        Location::Input::input.value = profile[2];
        if (0 <= profile[3] && profile[3] <= 2)
            Sex::OptionMenu.setIndex(context, profile[3]);
        else
            Sex::OptionMenu.setIndex(context, 0);

        Age::edit::number::input.value = profile[4];
        Comment::Input::input.value = profile[5];
        Point::text.text = profile[6];
        RidingCar["chip"].visible = false;
        if (profile[8] >= 0)
        {
            var gcar = main::menu::MCarGarage(profile[8]);
            RidingCar["chip"].setData(gcar, profile[7]);
            RidingCar["chip"].visible = true;
        }
        RidingCar::text.text = profile[9];
    }

    function updateProfile(context)
    {
        if (!filterProfile(context))
			return false;
		
        var stats = main::menu::MPlayerStats::unpack(main::network.accountGetStats());
        stats.name = Nickname::Input::input.value;
        stats.location = Location::Input::input.value;
        stats.sex = Sex::OptionMenu.index;
        stats.age = Age::edit::number::input.value;
        stats.comment = Comment::Input::input.value;
        var strStats = stats.pack();
        var res = main::network.accountUpdateStats(strStats);
        if (!res)
            openOnlineErrorDialog(context);

        return res;
    }

    static sInputs = [
        "Nickname",
        "Location",
        "Comment"
    ];

    function filterProfile(context)
    {
        
        for (var i = 0; i < sInputs.size; i++)
        {
            if (!PrivateRaceCommon::textFilter(context, ProfilePane[sInputs[i]]["Input"]["input"].value))
                return false;
        }
        return true;
    }

    function onCancel(context, event, item)
    {
        main::sound.play("cancel");
        var text = context.translate(ProfileRoot, "DO_YOU_CANCEL");
        var res = openConfirmDialog(context, DIALOG_QUERY, text);
        if (res)
            ProfilePane::close(context);

        return EVENTRESULT_FILTER;
    }
}


module PROJECT::ROOT::ProfilePane::Password::ChangePassword
{
    function onActivate(context, event, item)
    {
        main::sound.play("ok");
        var res = InputDialog::InputPlayerPassword::open(context);
        if (res != nil && res)
            setProfile(context);

        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        var text = context.translate(ProfileRoot, "TOOLTIP|ProfilePane::Password::ChangePassword");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ProfilePane::Nickname::Input::input
{
    function onFocusEnter(context, event)
    {
        var text = context.translate(ProfileRoot, "TOOLTIP|ProfilePane::Nickname::Input::input");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        PrivateRaceCommon::attachToolTip();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ProfilePane::Location::Input::input
{
    function onFocusEnter(context, event)
    {
        var text = context.translate(ProfileRoot, "TOOLTIP|ProfilePane::Location::Input::input");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        PrivateRaceCommon::attachToolTip();
        return EVENTRESULT_FILTER;
    }
}
 
module PROJECT::ROOT::ProfilePane::Sex::OptionMenu
{
    static open = nil;

    function initialize(context)
    {
        popup::vbox::None.insensitive = (main::menu::MSystem::GetRegionCode() == "jp");
        open = false;
    }

    function finalize(context)
    {
        open = nil;
    }

    function onFocusEnter(context, event)
    {
        if (!open)
        {
            var text = context.translate(ProfileRoot, "TOOLTIP|ProfilePane::Sex::OptionMenu");
            PrivateRaceCommon::setToolTipOnValue(0, text);
        }
        return EVENTRESULT_FILTER;
    }

    function onPopupOpen(context)
    {
        open = true;
        PrivateRaceCommon::clearToolTipValue();
        return EVENTRESULT_FILTER;
    }

    function onPopupClosed(context)
    {
        open = false;
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ProfilePane::Age::edit::number::input
{
    function onFocusEnter(context, event)
    {
        var text = context.translate(ProfileRoot, "TOOLTIP|ProfilePane::Age::edit::number::input");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ProfilePane::Comment::Input::input
{
    function onFocusEnter(context, event)
    {
        var text = context.translate(ProfileRoot, "TOOLTIP|ProfilePane::Comment::Input::input");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        PrivateRaceCommon::attachToolTip();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ProfilePane::Buttons::CancelOK::Cancel
{
    function onActivate(context, event, item)
    {
        main::sound.play("cancel");
        var text = context.translate(ProfileRoot, "DO_YOU_CANCEL");
        var res = openConfirmDialog(context, DIALOG_QUERY, text);
        if (res)
            ProfilePane.close(context);

        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        var keysym = event.keysym;

        if (keysym == PS2_PAD_CTRL_L3_LEFT)
        {
            return EVENTRESULT_FILTER;
        }
        else if (keysym == PS2_PAD_CTRL_L3_RIGHT)
        {
            main::sound.play("cursor");
            ProfileRoot.setFocus(CancelOK::OK);
            return EVENTRESULT_FILTER;
        }
        return EVENTRESULT_CONTINUE;
    }

    function onFocusEnter(context, event)
    {
        var text = context.translate(ProfileRoot, "TOOLTIP|ProfilePane::Buttons::CancelOK::Cancel");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ProfilePane::Buttons::CancelOK::OK
{
    function onActivate(context, event, item)
    {
        main::sound.play("ok");
        var text = context.translate(ProfileRoot, "DO_YOU_UPDATE");
        var res  = openConfirmDialog(context, DIALOG_QUERY, text);
        if (res)
        {
            text = context.translate(ProfileRoot, "OnlineMessage", "NOW_UPDATING");
            res  = openProcessDialog(context, text, updateProfile);
            if (res)
            {
                PrivateRaceCommon::clearToolTipValue();
                ProfileListPane::updateProfileList(context);
                openConfirmDialog(context, DIALOG_OK, context.translate(ProfileRoot, "OnlineMessage", "UPDATE_WAS_SUCCESSFUL"));
            }
            ProfilePane.close(context);
        }
        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        var keysym = event.keysym;
        if (keysym == PS2_PAD_CTRL_L3_LEFT)
        {
            main::sound.play("cursor");
            ProfileRoot.setFocus(CancelOK::Cancel);
            return EVENTRESULT_FILTER;
        }
        else if (keysym == PS2_PAD_CTRL_L3_RIGHT)
        {
            return EVENTRESULT_FILTER;
        }
        return EVENTRESULT_CONTINUE;
    }

    function onFocusEnter(context, event)
    {
        var text = context.translate(ProfileRoot, "TOOLTIP|ProfilePane::Buttons::CancelOK::OK");
        PrivateRaceCommon::setToolTipOnValue(0, text);
        return EVENTRESULT_FILTER;
    }
}