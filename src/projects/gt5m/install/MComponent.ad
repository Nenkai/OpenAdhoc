
module MComponent::Tooltip::BalloonTip
{
    attribute duration_base = nil;
    attribute current_widget = nil;

    method initialize(context)
    {

        self.duration_base = self.Tip.VisibleEffect.getStartDuration(0);

        self.Tip.visible = true;

        if (self['TIP_01'] == nil)
        {
            var tip01 = self.Tip.doCopy();
            tip01.name = "TIP_01";
            self.appendChild(context, tip01);
        }

        if (self['TIP_02'] == nil)
        {
            var tip02 = self.Tip.doCopy();
            tip02.name = "TIP_02";
            self.appendChild(context, tip02);
        }

        self.current_widget = self['TIP_01'];

        self.Tip.visible = false;
    }

    method onFinalize(context)
    {
        self.current_widget = nil;
        self.duration_base = nil;

        if (self['TIP_01'] != nil)
        {
            self.removeChild(context, self['TIP_01']);
        }
        if (self['TIP_02'] != nil)
        {
            self.removeChild(context, self['TIP_02']);
        }
    }

    method set_value(context, widget, text, distance = 0)
    {
        if (self.current_widget == nil)
            return;

        self.current_widget.reset();
        if (self.current_widget == self['TIP_02'])
            self.current_widget = self['TIP_01'];
        else
            self.current_widget = self['TIP_02'];
        self.current_widget.set_value(context, widget, text, distance);
    }

    method reset_value()
    {
        if (self.current_widget == nil)
            return

        self.current_widget.reset();
    }
}


module MComponent::Tooltip::BalloonTip::Tip
{
    attribute watcher = nil;
    attribute widget = nil;
    attribute minimum_w = nil; attribute minimum_h = nil;
    attribute distance = nil;
    attribute origin_down_tip_h = nil;

    function CreateWatcher(context, func, interval)
    {
        var watcher = main::menu::MScriptWatcher(context, func);
        if (interval == nil)
            interval = 1;
        watcher.interval = interval;
        watcher.append();
        return watcher;
    }

    method clear()
    {
        self.widget = nil;
        self.minimum_w = nil;
        self.minimum_h = nil;
        self.distance = nil;
        self.origin_down_tip_h = nil;

        if (self.watcher != nil)
        {
            self.watcher.remove();
            self.watcher = nil;
        }
    }

    method onFinalize(context)
    {
        clear();
    }

    method set_value(context, widget, text, distance)
    {
        self.opacity = 0.0;
        self.widget = widget;
        self.distance = distance;
        self.minimum_w = self.w;
        self.minimum_h = self.h;
        self.Text.TextFace.text = text;
        if (self.watcher == nil)
            self.watcher = CreateWatcher(context, wait_render_tick, 10);
        if (self.origin_down_tip_h == nil)
            self.origin_down_tip_h = self.down_tip.h;
        return;
    }

    method reset()
    {
        reset_arrow();
        clear();

        self.AppearEffect.reverse = false;
        self.AppearEffect.reset();
        self.VisibleEffect.reverse = false;
        self.VisibleEffect.reset();
        self.Text.TextFace.text = "";
        self.up_tip.visible = false;
        self.down_tip.visible = false;
        self.w = 0;
        self.h = 0;
    }

    method wait_render_tick(context)
    {
        if (self.widget == nil)
        {
            reset();
            return;
        }

        if (set_value2(context))
        {
            if (self.watcher != nil)
            {
                self.watcher.remove();
                self.watcher = nil;
            }
        }
    }

    method reset_arrow()
    {
        if (self.origin_down_tip_h != nil)
            self.down_tip.h = self.origin_down_tip_h;
    }
    method adjust_arrow()
    {
        if (self.origin_down_tip_h != nil)
            self.down_tip.h = self.origin_down_tip_h - 0.5;
    }
    method on_effect_end()
    {
        self.reset_arrow();
        self.AppearEffect.on_effect_end = nil;
    }

    method set_value2(context) // The original version of this function has several extra LEAVE instructions in it not reproduced here
    {
        if (self.minimum_w == self.w && self.minimum_h == self.h)
            return false;

        var base_x = self.widget.sx + (self.widget.w * self.widget.cursor_align_x);
        var base_y = self.widget.sy + (self.widget.h * self.widget.cursor_align_y);
        var disp_x;
        var disp_y;

        var widget_top = (base_y - self.distance) - (self.Tip.h + self.down_tip.h);

        {
            if (widget_top > 0 + 6)
            {
                self.up_tip.visible = false;
                self.down_tip.visible = true;
                disp_x = base_x - (self.w * 0.5);
                disp_y = widget_top;
                self.down_tip.x = (base_x - disp_x) - (self.up_tip.w * 0.5);
            }
            else 
            {
                self.down_tip.visible = false;
                self.up_tip.visible = true;
                disp_x = base_x - (self.w * 0.5);
                disp_y = base_y + self.distance;
                self.up_tip.x = (base_x - disp_x) - (self.down_tip.w * 0.5);
            }
        }

        {
            var adjust_x = 0;
            {
                var left_x = disp_x;
                if (left_x < 0 + 12)
                    adjust_x = left_x - (0 + 12);
            }
            {
                var right_x = disp_x + self.w;
                if (right_x > 480 - 12)
                    adjust_x = right_x - (480 - 12);
            }
            disp_x -= adjust_x;
            self.up_tip.x += adjust_x;
            self.down_tip.x += adjust_x;
        }


        self.sx = disp_x.toInt();
        self.sy = disp_y.toInt();

        {
            var scale_cx = disp_x == 0 ? 0 : disp_x / BalloonTip.w;
            var scale_cy = disp_y == 0 ? 0 : disp_y / BalloonTip.h;
            BalloonTip.center = [scale_cx, scale_cx]; // in original

            self.adjust_arrow();

            self.AppearEffect.reverse = false
            self.AppearEffect.restart();
            self.AppearEffect.on_effect_end = self.on_effect_end;
        }

        {
            var duration = BalloonTip.duration_base;
            if (self.minimum_h > 0)
                duration += ((self.h / self.minimum_h).toInt() * 2);
            self.VisibleEffect.setStartDuration(0, duration);

            self.VisibleEffect.reverse = false;
            self.VisibleEffect.restart();
        }

        return true;
    }
}