










module ROOT
{
    hidden.visible = false;

    module OpenMode
    {
        static CarDealer = 1;
        static Category = 2;
        static CarSearch = 3;
    }

    attribute prev_page_;
    attribute force_focus_tuner_;
    attribute force_focus_carcode_;
    attribute rtext_;

    
    attribute open_mode_;
    attribute sequence_loop_;
    attribute focus_tuner_;
    attribute focus_category_;
    attribute selected_tuner_;
    attribute selected_category_;
    attribute selected_carcode_;
    attribute car_search_query_;





    static sTutorialData = 
    [
        [
            "check_begin" : "got_first_car",
            "message" : "got_first_car",
            "msg_param" : [ "open_wait_sec" : 0.0, "build_text" : [PROJECT.getGTModeFirstCarName(), PROJECT.getGTModeFirstCarPP()]],
            "done" : "got_first_car",
            "begin" : "goto_novice",
        ]
    ];

    static sNewDealerCars = 
    [
        "zytek_z11sn_greaves_13",
        "gtr_lm_nismo_15",
        "corvette_stingray_gtc_13",
        "x2014_14",
        "x2014_std_14",
        "dap_racing_kart_80",
        "ralt_rt3_83",
        "lotus_97t_85",
        "is_f_ccsr_11",
        "ts030_hybrid_12",
        "gtr_nismo_gt3_ac_rjn_13",
        "gtr_nismo_14",
        "ft_1_14_sp",
        "m4_14_mp"
    ];

    static sNewHotCars =
    [
        "corvette_stingray_gtc_13",
        "dap_racing_kart_80",
        "ralt_rt3_83",
        "lotus_97t_85",
        "is_f_ccsr_11",
        "ts030_hybrid_12",
        "gtr_nismo_gt3_ac_rjn_13",
        "gtr_nismo_14",
        "ft_1_14_sp",
        "m4_14_mp",
    ];

    static sNewTouringCars =
    [
        "is_f_ccsr_11",
        "gtr_nismo_gt3_ac_rjn_13"
    ];

    static sNewLemansCars =
    [
        "zytek_z11sn_greaves_13",
        "gtr_lm_nismo_15",
        "ts030_hybrid_12"
    ];

    method openCarDealer(context)
    {
        self.open_mode_ = OpenMode::CarDealer;
        self.sequence_loop_ = loopCarDealer;
        self.open(context);
    }


    method openCarSearch(context)
    {
        self.open_mode_ = OpenMode::CarSearch;
        self.sequence_loop_ = loopCarSearch;
        self.open(context);
    }

    
    method openCategory(context)
    {
        self.open_mode_ = OpenMode::Category;
        self.sequence_loop_ = loopCategory;
        self.open(context);
    }

    method open(context)
    {
        self.prev_page_ = context.getRootWindow();
        SequenceUtil::enableStartMenuRoot();
        SequenceUtil::enableSceneFaceRoot();
        SequenceUtil::startPageSimple(context, self);
    }

    method loopCarDealer(context)
    {
        while (true)
        {
            if (self.selected_tuner_ == nil)
            {
                var tuner = DealerSelection.open(context, self.focus_tuner_);
                if (tuner != nil)
                {
                    self.selected_tuner_ = tuner;
                }
                else 
                {
                    self.back_home(context);
                    break;
                }
            }
    
            var car_code = CarSelection.openCarDealer(context, self.selected_carcode_, self.selected_tuner_);
            if (car_code != nil)
            {
                self.selected_carcode_ = car_code;
                CarShowroomRoot.open(context, car_code);
                break;
            }
            else
            {
                self.focus_tuner_ = self.selected_tuner_;
                self.selected_tuner_ = nil;
                self.selected_carcode_ = nil;
            }
        }
    }

    method loopCarSearch(context)
    {
        while (true)
        {
            if (self.car_search_query_ == nil)
            {
                var query = CarSearch.open(context);
                if (query != nil)
                {
                    self.car_search_query_ = query;
                }
                else 
                {
                    self.back_home(context);
                    break;
                }
            }
    
            var car_code = CarSelection.openCarSearch(context, self.selected_carcode_, self.car_search_query_);
            if (car_code != nil)
            {
                self.selected_carcode_ = car_code;
                CarShowroomRoot.open(context, car_code);
                break;
            }
            else
            {
                self.car_search_query_ = nil;
                self.selected_carcode_ = nil;
            }
        }
    }

    method loopCategory(context)
    {
        while (true)
        {
            if (self.selected_category_ == nil)
            {
                var category = CategorySelection.open(context, self.focus_category_);
                if (category != nil)
                {
                    self.selected_category_ = category;
                }
                else 
                {
                    self.back_home(context);
                    break;
                }
            }
    
            var car_code = CarSelection.openCategory(context, self.selected_carcode_, self.selected_category_);
            if (car_code != nil)
            {
                self.selected_carcode_ = car_code;
                CarShowroomRoot.open(context, car_code);
                break;
            }
            else
            {
                self.focus_category_ = self.selected_category_;
                self.selected_category_ = nil;
                self.selected_carcode_ = nil;
            }
        }
    }

    method resetAttribute()
    {
        self.open_mode_ = nil;
        self.sequence_loop_ = nil;
        self.focus_tuner_ = nil;
        self.focus_category_ = nil;
        self.selected_tuner_ = nil;
        self.selected_category_ = nil;
        self.selected_carcode_ = nil;
        self.car_search_query_ = nil;
    }

    method back_home(context)
    {
        self.resetAttribute();
        CarSearch.resetAttribute();
        GTModeRoot.open(context);
    }

    method onInitialize(context)
    {
        CursorProject::SceneFaceRoot.requestParticleCommand(context, "topMenuParticle_Shape01");
        
        if (TutorialUtil::isProgress("gttop", "get_first_car"))
        {
            var car_code = PROJECT::getGTModeFirstCar();
            var tuner_code = SPECDB.executeQuery1R1C("SELECT Tuner FROM GENERIC_CAR WHERE InDealer=1 AND ID=?", [car_code]);
            self.force_focus_tuner_ = tuner_code;
            self.force_focus_carcode_ = car_code;
            self.focus_tuner_ = tuner_code;
            self.selected_carcode_ = car_code;
            DealerSelection::DealerList::OptionMenu.insensitive = true;
        }
        else 
            DealerSelection::DealerList::OptionMenu.insensitive = false;

        self.rtext_ = main::pdistd::MRTextDB();
        self.rtext_.load("/description/gt6/%s.rt2".format(pdistd::MLocale::getLanguage()));

        self.setTopicPath();
        
        if (self.sequence_loop_ == nil)
            self.sequence_loop_ = loopCarDealer;
        context.pushEvent(main::menu::MFunctionEvent(self.sequence_loop_, context));
    }

    method onFinalize(context)
    {
        self.force_focus_tuner_ = nil;
        self.force_focus_carcode_ = nil;
        self.rtext_.unload();
        self.rtext_ = nil;
    }

    method onKeyPress(context, event)
    {
        if (CursorProject::StartMenuRoot::StartMenu.checkKeyPress(context, event))
            return EVENTRESULT_FILTER;

        return EVENTRESULT_CONTINUE;
    }

    method setTopicPath(path_texts = [])
    {
        for (var i = 0; i < 3; i++)
        {
            var w = self.TopicPath["Path%{i+1}"];
            if (i < path_texts.size)
            {
                w.label.text = path_texts[i];
                w.visible = true;
            }
            else
            {
                w.visible = false;
            }
        }
    }


    module DealerSelection
    {
        static sAsiaDealerList = ["jp", "kr", "-", "au"];
        static sAmericaDealerList = ["us", "ca"];
        static sEuropeDealerList = ["gb", "de", "fr", "it", "be", "nl", "se", "es", "at"];

        attribute default_focus_;
        attribute tuner_list_;
        attribute event_loop_;
        attribute result_;

        method open(context, focus_tuner)
        {
            self.initialize(context, focus_tuner);
            self.result_ = nil;
            self.Fade.forward();
            self.Fade.start();

            self.insensitive = false;
            self.event_loop_ = main::menu::EventLoop(context);
            self.event_loop_.enter();
            self.insensitive = true;

            self.finalize(context);
            
            var res = self.result_;
            self.result_ = nil;
            return res;
        }

        method close(context)
        {
            if (self.event_loop_ != nil)
            {
                self.Fade.backward();
                self.Fade.start();
                context.wait(self.Fade.ramain_time);

                self.tuner_list_ = nil;
                self.event_loop_.leave();
                self.event_loop_ = nil;
                self.cancelLoadImage(context);
            }
        }

        method onInitialize(context)
        {
            self.insensitive = true;
            self.Fade.forward();
            self.Fade.reset();
        }

        method onFinalize(context)
        {
            var base_widget = ScrolledWindow::clip::space::HBox;
            base_widget.clearChildren(context);
        }

        method onCancel(context)
        {
            sound.play("cancel");
            DealerSelection.result_ = nil;
            DealerSelection.close(context);
            return EVENTRESULT_FILTER;
        }

        method cancelLoadImage(context)
        {
            var group_w = ScrolledWindow::clip::space::HBox.first;
            while (group_w != nil)
            {
                group_w.cancelLoadImage(context);
                group_w = group_w.next; // Custom syntax?
            }
        }

        method getContriesDealerList(country_codes)
        {
            if (country_codes == nil)
                return [];
            
            var placeholders = "";
            for (var i = 0; i < country_codes.size; i++)
                placeholders += i > 0 ? ",?" : "?";

            var where_clause = "WHERE t.InDealer=1 AND t.Country=c.ID AND c.code IN (%{placeholders})";
            var lang = main::pdistd::MLocale::getLanguage();
            var orderby_clause = "ORDER BY t.%{lang}";

            if (KeyValueUtil::isCarUnlock("hudson_mario_48"))
            {
                where_clause = "WHERE (t.InDealer=1 OR t.TunerString='hudson') AND t.Country=c.ID AND c.code IN (%{placeholders})";
            }

            return SPECDB.queryList("SELECT t.ID, t.TunerString FROM TUNER t, COUNTRY c %{where_clause} %{orderby_clause}", country_codes);
        }

        method initialize(context, focus_tuner)
        {
            ROOT.setTopicPath();

            var base_widget = ScrolledWindow::clip::space::HBox;
            base_widget.clearChildren(context);

            var region_list = [];
            switch (pdiext::MProductInformation::GetGameRegionCode())
            {
                case "scej":
                case "sceh":
                    region_list = [["Asia_Area", sAsiaDealerList], 
                        ["Europe_Area", sEuropeDealerList], 
                        ["America_Area", sAmericaDealerList]];
                    break;
                case "scea":
                case "scel":
                    region_list = [["America_Area", sAmericaDealerList],
                        ["Asia_Area", sAsiaDealerList], 
                        ["Europe_Area", sEuropeDealerList]];
                    break;
                case "scee":
                case "sceb":
                    region_list = [["Europe_Area", sEuropeDealerList],
                        ["Asia_Area", sAsiaDealerList], 
                        ["America_Area", sAmericaDealerList]];
                    break;
                default:
                    region_list = [["Europe_Area", sEuropeDealerList],
                        ["Asia_Area", sAsiaDealerList], 
                        ["America_Area", sAmericaDealerList]];
                    break;
            }

            var scroll_index = 0;
            var groups = [];
            var default_focus_widget;
            foreach (|var label, var country_codes| in region_list)
            {
                var tuner_list = getContriesDealerList(country_codes);
                |var group_w, var focus_widget| = hidden::DealerGroup.generate(context, label, tuner_list, focus_tuner);
                group_w.scroll_index = scroll_index; scroll_index++; // Check this
                base_widget.appendChild(context, group_w);

                if (focus_widget != nil)
                {
                    default_focus_widget = focus_widget;
                    groups.unshift(group_w);
                }
                else
                {
                    groups.push(group_w);
                }
            }

            if (default_focus_widget == nil)
            {
                var group_w = base_widget.first;
                if (group_w != nil)
                    default_focus_widget = group_w.Box.first;
            }

            if (default_focus_widget != nil)
            {
                default_focus_widget.startLoadImage(context);
                foreach (var group_w in groups)
                {
                    var icon_w = group_w.Box.first;
                    while (icon_w != nil)
                    {
                        icon_w.startLoadImage(context);
                        icon_w = icon_w.next;
                    }
                }
                groups = nil;
            }

            ROOT.setFocus(default_focus_widget);
            context.wait();
            ScrolledWindow::clip.warp(default_focus_widget);
            ScrolledWindow::clip::space::IconGroupBase.chase_start();
            
            HScrollPointer.setItemCount(context, base_widget.countChild());
        }

        method finalize(context)
        {
            ScrolledWindow::clip::space::IconGroupBase.chase_stop();
            context.removeTimeOut("display_tooltip");
        }

        module ScrolledWindow::clip::space::IconGroupBase
        {
            attribute chase_target;
            attribute thread;

            method setTarget(target_x, target_w, target_h, fade_out)
            {
                if (self.thread == nil)
                    return;

                self.chase_target = target_x;
                self.SizeActor.setStartValue(0, [self.w, self.h]);
                self.SizeActor.setEndValue(0, [target_w, target_h]);
                self.SizeActor.restart();
                if (fade_out)
                    self.FadeActor.backward();
                else
                    self.FadeActor.forward();
                self.FadeActor.start();
            }

            method chaseTarget(context)
            {
                while (self.chase_target != nil)
                {
                    self.ChaseActor.target_x = self.chase_target;
                    Thread::Sleep(0.05)
                }
            }

            method chase_start()
            {
                self.thread = Thread(self.chaseTarget);
                self.thread.start();
            }

            method chase_stop()
            {
                if (self.thread != nil)
                {
                    self.thread.terminate();
                    self.thread = nil;
                }

                self.chase_target = nil;
            }
        }

        module VersionGT6
        {
            method onInitialize(context)
            {
                var ver_str = pdiext::MProductInformation::GetDisplayVersion();
                ver_str = ver_str.substr(0, ver_str.rfind("."));

                if (pdiext::isQABuild())
                    ver_str = ver_str + ".qa";
                
                self.Version.text = "Ver. " + ver_str;
            }
        }

        module DealerList::OptionMenu
        {
            attribute created_items = false;
            attribute tuner_code_list;

            method onFinalize(context)
            {
                self.popup::vbox.clearChildren(context); // mmmm
            }

            method createPopupItems(context)
            {
                var where_clause = "WHERE t.InDealer=1 AND t.Country=c.ID";
                var lang = main::pdistd::MLocale::getLanguage();
                var orderby_clause = "ORDER BY t.%{lang}";

                if (KeyValueUtil::isCarUnlock("hudson_mario_48"))
                    where_clause = "WHERE (t.InDealer=1 OR t.TunerString='hudson') AND t.Country=c.ID"
                
                var trio_data = SPECDB.executeQuery("SELECT DISTINCT t.ID, t.TunerString, c.code FROM TUNER t, COUNTRY c %{where_clause} %{orderby_clause}");
                self.tuner_code_list = [];

                foreach (|var tuner_code, var tuner_name, var country_flag| in trio_data)
                {
                    var w = hidden::DealerListItem.doCopy();
                    var country_str = country_flag != "-" ? country_flag.downcase() : "pdi";
                    w.label.text = manager.translate("TunerName", tuner_name);
                    w.CountryFlag.image_path = "/piece/flag_ranking/%s.img".format(country_str);
                    self.popup::vbox.appendChild(context, w);
                    self.tuner_code_list.push(tuner_code);
                }

                self.applyAppend(context);
                self.setIndex(context, 0);
                self.created_items = true;
            }

            method onPopupOpen(context)
            {
                if (!self.created_items)
                    self.createPopupItems(context);

                return EVENTRESULT_STOP;
            }

            method onActivate(context)
            {
                if (self.is_popuped)
                {
                    DealerSelection.result_ = self.tuner_code_list[self.index];
                    DealerSelection.close(context);
                }

                return EVENTRESULT_FILTER;
            }
        }
    }

    module hidden::DealerGroup
    {
        attribute scroll_index = 0;

        function generate(context, label, tuner_info_list, focus_tuner)
        {
            var group_w = DealerGroup.doCopy();
            group_w.Name::label.text = context.translate(ROOT, label);

            var new_mark_dealers = [];
            var cars = sNewDealerCars;
            var focus_widget;

            foreach (var car in cars)
            {
                if (KeyValueUtil::getFlag_NotNil("new_flag", car))
                    new_mark_dealers.push(gtengine::MSpecDB::getTunerLabel(car));
            }

            foreach (var tuner_info in tuner_info_list)
            {
                var icon_w = hidden::DealerIcon.generate(context, tuner_info);
                group_w.Box.appendChild(context, icon_w);

                if (ROOT.force_focus_tuner_ != nil)
                {
                    if (ROOT.force_focus_tuner_ == tuner_info.ID)
                    {
                        icon_w.WhiteBlink::Opacity.restart();
                        icon_w.active0 = true;
                    }
                    else
                        icon_w.active0 = false;
                }
                else
                    icon_w.active0 = true;

                if (focus_tuner == tuner_info.ID)
                    focus_widget = icon_w;
                if (new_mark_dealers.indexOf(tuner_info.TunerString) > -1)
                    icon_w.New.visible = true;
            }

            return [group_w, focus_widget];
        }

        function onLoad(update_context)
        {
            var render_context = update_context.getRenderContext(0);
            Box.clearChildren(render_context);
        }

        method cancelLoadImage(context)
        {
            var icon_w = self.Box.first;
            while (icon_w != nil)
            {
                icon_w.cancelLoadImage(context);
                icon_w = icon_w.next;
            }
        }

        method enterFocus(context)
        {
            ROOT.setFocus(self.Box.first);
        }

        method onFocusEnter(context)
        {
            DealerSelection::ScrolledWindow::clip::space::IconGroupBase.setTarget(self.x + self.Box.x, self.Box.w, self.Box.h, false);
            DealerSelection::HScrollPointer.setPointer(self.scroll_index);
            return EVENTRESULT_STOP;
        }

        method onKeyPress(context, event)
        {
            if (LeaveDetectUtil::activated(context, event))
                return EVENTRESULT_FILTER;

            switch (event.keysym)
            {
                case CELL_PAD_CTRL_L1:
                    if (self.prev != nil)
                    {
                        sound.play("cursor");
                        self.prev.enterFocus(context);
                        DealerSelection::HScrollPointer.setPointer(self.scroll_index);
                    }
                    return EVENTRESULT_FILTER;
                case CELL_PAD_CTRL_R1:
                    if (self.next != nil)
                    {
                        sound.play("cursor");
                        self.next.enterFocus(context);
                        DealerSelection::HScrollPointer.setPointer(self.scroll_index);
                    }
                    return EVENTRESULT_FILTER;
            }

            return EVENTRESULT_CONTINUE;
        }
    }

    module hidden::DealerIcon
    {
        attribute tuner_;
        attribute image_path_;

        function generate(context, tuner_info)
        {
            var icon_w = hidden::DealerIcon.doCopy();
            icon_w.tuner_ = tuner_info.ID;
            icon_w.label.text = manager.translate("TunerName", tuner_info.TunerString);
            icon_w.image_path_ = "piece/gt6/tunner_logo_M/%s.img".format(tuner_info.TunerString);
            icon_w.Present.visible = KeyValueUtil::getInt("present_car_count", tuner_info.TunerString) > 0;

            return icon_w;
        }

        method startLoadImage(context)
        {
            if (self.image_path_ != nil)
            {
                context.pushEvent(
                    main::menu::MFunctionEvent(function (context, item, image_path)
                    {
                        item.icon.image_path = image_path;
                    }, context, self, self.image_path_)
                );

                self.image_path_ = nil;
            }
        }

        method cancelLoadImage(context)
        {
            self.icon.image_path = "";
        }

        method onActivate(context)
        {
            if (!self.active0)
            {
                sound.play("disable");
                return EVENTRESULT_FILTER;
            }

            sound.play("ok");
            DealerSelection.result_ = self.tuner_;
            ROOT.setFocus(nil);
            DealerSelection.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module CategorySelection
    {
        static sClassList = ["career_b", "career_a", "career_ib", "career_ia", "career_s"];
        static sRacingCategoryList = ["super_gt", "touring_car", "nascar", "lm", "rally"];
        static sHotCarsList = ["hot_car", "super_car", "old_premium"];

        attribute default_focus_;
        attribute category_list_;
        attribute event_loop_;
        attribute result_;

        method open(context, focus_category)
        {
            self.initialize(context, focus_category);
            self.result_ = nil;
            self.Fade.forward();
            self.Fade.start();
            self.insensitive = false;
            self.event_loop_ = main::menu::EventLoop(context);
            self.event_loop_.enter();
            self.insensitive = true;

            self.finalize(context);
            var res = self.result_;
            self.result_ = nil;

            return res;
        }

        method close(context)
        {
            if (self.event_loop_ != nil)
            {
                self.Fade.backward();
                self.Fade.start();
                context.wait(self.Fade.ramain_time);
                self.category_list_ = nil;
                self.event_loop_.leave();
                self.event_loop_ = nil;
            }
        }

        method onInitialize(context)
        {
            self.insensitive = true;
            self.Fade.forward();
            self.Fade.reset();
        }

        method onFinalize(context)
        {
            var base_widget = ScrolledWindow::clip::space::HBox;
            base_widget.clearChildren(context);
        }

        method onCancel(context)
        {
            sound.play("cancel");
            CategorySelection.result_ = nil;
            CategorySelection.close(context);
            return EVENTRESULT_FILTER;
        }

        method initialize(context, focus_category)
        {
            ROOT.setTopicPath();
            var base_widget = ScrolledWindow::clip::space::HBox;
            base_widget.clearChildren(context);

            var category_list = [
                ["CLASS", sClassList],
                ["RACING_CATEGORY", sRacingCategoryList],
                ["HOT_CARS", sHotCarsList],
            ];

            var scroll_index = 0;
            var default_focus_widget;
            foreach (|var label, var categories| in category_list)
            {
                |var group_w, var focus_widget| = hidden::CategoryGroup.generate(context, label, categories, focus_category);
                group_w.scroll_index = scroll_index; scroll_index++;

                base_widget.appendChild(context, group_w);

                if (focus_widget != nil)
                    default_focus_widget = focus_widget;
            }

            if (default_focus_widget == nil)
            {
                var group_w = base_widget.first;
                default_focus_widget = group_w.Box.first;
            }

            ROOT.setFocus(default_focus_widget);
            context.wait();
            ScrolledWindow::clip.warp(default_focus_widget);
            ScrolledWindow::clip::space::IconGroupBase.chase_start();
            HScrollPointer.setItemCount(context, base_widget.countChild());
        }

        method finalize(context)
        {
            ScrolledWindow::clip::space::IconGroupBase.chase_stop();
            context.removeTimeOut("display_tooltip");
        }

        module ScrolledWindow::clip::space::IconGroupBase
        {
            attribute chase_target;
            attribute thread;

            method setTarget(target_x, target_w, target_h, fade_out)
            {
                if (self.thread == nil)
                    return;

                self.chase_target = target_x;
                self.SizeActor.setStartValue(0, [self.w, self.h]);
                self.SizeActor.setEndValue(0, [target_w, target_h]);
                self.SizeActor.restart();
                if (fade_out)
                    self.FadeActor.backward();
                else
                    self.FadeActor.forward();
                self.FadeActor.start();
            }

            method chaseTarget(context)
            {
                while (self.chase_target != nil)
                {
                    self.ChaseActor.target_x = self.chase_target;
                    Thread::Sleep(0.05)
                }
            }

            method chase_start()
            {
                self.thread = Thread(self.chaseTarget);
                self.thread.start();
            }

            method chase_stop()
            {
                if (self.thread != nil)
                {
                    self.thread.terminate();
                    self.thread = nil;
                }

                self.chase_target = nil;
            }
        }

        module VersionGT6
        {
            method onInitialize(context)
            {
                var ver_str = pdiext::MProductInformation::GetDisplayVersion();
                ver_str = ver_str.substr(0, ver_str.rfind("."));

                if (pdiext::isQABuild())
                    ver_str = ver_str + ".qa";
                
                self.Version.text = "Ver. " + ver_str;
            }
        }
    }

    module hidden::CategoryGroup
    {
        attribute scroll_index = 0;

        function generate(context, label, category_list, focus_category)
        {
            var group_w = CategoryGroup.doCopy();
            group_w.Name::label.text = context.translate(ROOT, label);

            var focus_widget;

            foreach (var category in category_list)
            {
                var icon_w = hidden::CategoryIcon.generate(context, category);
                group_w.Box.appendChild(context, icon_w);

                icon_w.active0 = true;
                if (focus_category == category)
                    focus_widget = icon_w;

                var cars = [];
                
                switch (category)
                {
                    case "hot_car":
                        cars = sNewHotCars;
                        break;
                    case "touring_car":
                        cars = sNewTouringCars;
                        break;
                    case "lm":
                        cars = sNewLemansCars;
                        break;
                }

                foreach (var car in cars)
                {
                    if (KeyValueUtil::getFlag_NotNil("new_flag", car))
                    {
                        icon_w.New.visible = true;
                        break;
                    }
                }
            }

            return [group_w, focus_widget];
        }

        function onLoad(update_context)
        {
            var render_context = update_context.getRenderContext(0);
            Box.clearChildren(render_context);
        }

        method enterFocus(context)
        {
            ROOT.setFocus(self.Box.first);
        }

        method onFocusEnter(context)
        {
            CategorySelection::ScrolledWindow::clip::space::IconGroupBase.setTarget(self.x + self.Box.x, self.Box.w, self.Box.h, false);
            CategorySelection::HScrollPointer.setPointer(self.scroll_index);
            return EVENTRESULT_STOP;
        }

        method onKeyPress(context, event)
        {
            if (LeaveDetectUtil::activated(context, event))
                return EVENTRESULT_FILTER;

            switch (event.keysym)
            {
                case CELL_PAD_CTRL_L1:
                    if (self.prev != nil)
                    {
                        sound.play("cursor");
                        self.prev.enterFocus(context);
                        CategorySelection::HScrollPointer.setPointer(self.scroll_index);
                    }
                    return EVENTRESULT_FILTER;
                case CELL_PAD_CTRL_R1:
                    if (self.next != nil)
                    {
                        sound.play("cursor");
                        self.next.enterFocus(context);
                        CategorySelection::HScrollPointer.setPointer(self.scroll_index);
                    }
                    return EVENTRESULT_FILTER;
            }

            return EVENTRESULT_CONTINUE;
        }
    }

    module hidden::CategoryIcon
    {
        attribute category_;

        function generate(context, category)
        {
            var icon_w = hidden::CategoryIcon.doCopy();
            icon_w.category_ = category;
            icon_w.label.text = context.translate(ROOT, category);
            context.pushEvent(
                main::menu::MFunctionEvent(function (context, item)
                {
                    item.icon.image_path = "piece/gt6/cars/%s.img".format(category);
                }, context, icon_w, category)
            );
            return icon_w;
        }

        method onActivate(context)
        {
            if (!self.active0)
            {
                sound.play("disable");
                return EVENTRESULT_FILTER;
            }

            sound.play("ok");
            CategorySelection.result_ = self.category_;
            CategorySelection.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module CarSelection
    {
        attribute tuner_;
        attribute category_;
        attribute car_search_query_;
        attribute carcode_list_;
        attribute event_loop_;
        attribute result_;
        attribute get_carlist_func_;

        method openCarDealer(context, focus_carcode, tuner)
        {
            self.tuner_ = tuner;
            self.get_carlist_func_ = self.getCarList;
            self.OrderBy.visible = true;
            self.OrderBy::OptionMenu.setIndex(context, PROJECT.history['CarDealerRoot::TunerCarsOrder']);
            return self._open(context, focus_carcode);
        }

        method openCarSearch(context, focus_carcode, car_search_query)
        {
            self.car_search_query_ = car_search_query;
            self.get_carlist_func_ = self.getCarList;
            self.OrderBy.visible = true;
            self.OrderBy::OptionMenu.setIndex(context, PROJECT.history['CarDealerRoot::TunerCarsOrder']);
            return self._open(context, focus_carcode);
        }

        method openCategory(context, focus_carcode, category)
        {
            self.category_ = category;
            self.get_carlist_func_ = self.getCarList;
            self.OrderBy.visible = false;
            return self._open(context, focus_carcode);
        }

        method _open(context, focus_carcode)
        {
            var orderby_clause = OrderBy::OptionMenu.getOrderClause();
            var carcode_list = self.get_carlist_func_(orderby_clause);

            if (carcode_list.size == 0)
            {
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, "Car not found.");
                return nil;
            }

            self.createItem(context, carcode_list, focus_carcode);
            self.result_ = nil;
            self.Fade.forward();
            self.Fade.start();
            self.insensitive = false;

            switch (ROOT.open_mode_)
            {
                case OpenMode::CarDealer:
                    var row = SPECDB.query1("SELECT Tuner, CountryFlag FROM CAR_VIEW WHERE ID=?", [carcode_list[0]]);
                    var tuner_str = row.Tuner;
                    var country_str = row.CountryFlag != "-" ? row.CountryFlag.upcase() : "PDI";
                    ROOT.setTopicPath([
                        manager.translate("GTModeProject::GTModeRoot", "Cars_Dealer"),
                        manager.translate("Country", country_str),
                        manager.translate("TunerName", tuner_str),
                    ]);
                    break;

                case OpenMode::CarSearch:
                    ROOT.setTopicPath([manager.translate("GTModeProject::GTModeRoot", "Cars_Search")]);
                    break;

                case OpenMode::Category:
                    ROOT.setTopicPath([
                        manager.translate("GTModeProject::GTModeRoot", "Cars_Feature"),
                        context.translate(ROOT, self.category_),
                    ]);
            }

            TutorialUtil::showTutorial(context, sTutorialData, "gttop");

            if (self.OrderBy.visible)
                self.OrderBy.visible = !(carcode_list.size == 1);
            self.event_loop_ = main::menu::EventLoop(context);
            self.event_loop_.enter();
            self.insensitive = true;
            var res = self.result_;
            self.result_ = nil;
            return res;
        }

        method close(context)
        {
            if (self.event_loop_ != nil)
            {
                self.ToolTip::tip.value = "";
                self.Fade.backward();
                self.Fade.start();
                context.wait(self.Fade.ramain_time);
                self.IconBox.setItemCount(0,0);
                self.carcode_list_ = nil;
                self.event_loop_.leave();
                self.event_loop_ = nil;
            }

            self.tuner_ = nil;
            self.category_ = nil;
            self.car_search_query_ = nil;
            self.carcode_list_ = nil;
            self.get_carlist_func_ = nil;
        }

        method getCarList(orderby_clause)
        {
            if (orderby_clause == nil)
                orderby_clause = "";

            switch (ROOT.open_mode_)
            {
                case OpenMode::CarDealer:
                    var where_clause = "WHERE (InDealer=1 AND car.Tuner=?)";
                    var unlock_cars_map = ["hudson":["hudson_mario_48"],
                                           "bmw"   :["m3_gt2_11_color", "m4_14"]];
                    var tuner_label = gtengine::MSpecDB::getTunerString(self.tuner_);
                    var unlock_cars = unlock_cars_map[tuner_label];
                    if (unlock_cars != nil && unlock_cars.size > 0)
                    {
                        foreach (var unlock_car in unlock_cars)
                        {
                            if (KeyValueUtil::isCarUnlock(unlock_car))
                                where_clause += " OR ID=%d".format(gtengine::MSpecDB::getCarCode(unlock_car));
                        }
                    }

                    return SPECDB.executeQuery1C("SELECT ID FROM GENERIC_CAR car %{where_clause} %{orderby_clause}", [self.tuner_]);
                    break;

                case OpenMode::CarSearch:
                    |var query, var params| = self.car_search_query_;
                    var limit_car = 200;
                    return SPECDB.executeQuery1C("%{query} %{orderby_clause} LIMIT %{limit_car}", params);
                    break;

                case OpenMode::Category:
                    var car_label_list = MENUDB.executeQuery1C("SELECT CarLabel FROM t_category_car WHERE Category = ? ORDER BY CategoryCarID", [self.category_]);
                    var car_code_list = [];
                    foreach (var car_label in car_label_list)
                    {
                        var car_code = gtengine::MSpecDB::getCarCode(car_label);
                        car_code_list.push(car_code);
                    }
                    return car_code_list;
                    break;
            }

            return [];
        }

        method createItem(context, carcode_list, focus_carcode)
        {
            self.carcode_list_ = carcode_list;
            var page_count = (carcode_list_.size + ((5 * 2) - 1)) / (5 * 2);
            var x = page_count * 5;
            var y = 2;
            IconBox.setItemTemplate(context, hidden::CarItem);
            if (IconBox.getItemCount() > 0)
            {
                IconBox.setItemCount(0, 0);
                IconBox.postRedraw();
                context.wait();
            }

            IconBox.setItemCount(x, y);
            IconBox.setPageItemCount(5, 2);
            IconBox.focus_index = carcode_list.indexOf(focus_carcode);

            var adj = main::menu::MAdjustment();
            HScrollArrow.adjustment = adj;
            IconBox.h_adjustment = adj;
            HScrollPointer.setItemCount(context, page_count);
            HScrollPointer.setPointer(IconBox.getCurrentPageIndex());
            ROOT.setFocus(self.IconBox);
        }

        method onInitialize(context)
        {
            self.insensitive = true;
            self.Fade.forward();
            self.Fade.reset();
        }

        method onCancel(context)
        {
            sound.play("cancel");
            self.result_ = nil;
            self.close(context);
            return EVENTRESULT_FILTER;
        }

        method onFinalize(context)
        {
            context.removeTimeOut("display_tooltip");
        }

        module IconBox
        {
            method getCurrentPageIndex()
            {
                return self.focus_index / (5 * 2);
            }

            method getInitializedWidget(context, i)
            {
                if (i < 0 || self.getItemCount() <= i)
                    return nil;

                var w = self.getItemWidget(i);
                if (w == nil)
                {
                    if (CarSelection.carcode_list_ == nil)
                        return nil;
                    w = self.getItemWidget(i, context);

                    if (i < CarSelection.carcode_list_.size)
                    {
                        var car_code = CarSelection.carcode_list_[i];
                        w.init(context, car_code, i);
                        var cars = [];

                        if (ROOT.open_mode_ == OpenMode::CarDealer)
                        {
                            cars = sNewDealerCars;
                        }
                        else if (ROOT.open_mode_ == OpenMode::Category)
                        {
                            switch (CarSelection.category_)
                            {
                                case "hot_car":
                                    cars = sNewHotCars;
                                    break;

                                case "touring_car":
                                    cars = sNewTouringCars;
                                    break;
                                
                                case "lm":
                                    cars = sNewLemansCars;
                                    break;
                            }
                        }

                        var idx = cars.indexOf(gtengine::MSpecDB::getCarLabel(car_code));
                        if (idx > -1)
                        {
                            var car = cars[idx];
                            w.Board::New.visible = KeyValueUtil::getFlag_NotNil("new_flag", car);
                        }
                    }
                    else
                    {
                        w.initBlank(context, i);
                        return nil;
                    }
                }

                return w;
            }

            method onActivate(context, event)
            {
                var w = getInitializedWidget(context, self.focus_index);
                if (w == nil)
                    return EVENTRESULT_FILTER;

                if (w.cannot_select_)
                {
                    sound.play("disable");
                    return EVENTRESULT_FILTER;
                }

                if (w.is_blank_)
                {
                    sound.play("disable");
                    return EVENTRESULT_FILTER;
                }

                sound.play("ok");
                var cars = [];

                if (ROOT.open_mode_ == OpenMode::CarDealer)
                {
                    cars = sNewDealerCars;
                }
                else if (ROOT.open_mode_ == OpenMode::Category)
                {
                    switch (CarSelection.category_)
                    {
                        case "hot_car":
                            cars = sNewHotCars;
                            break;

                        case "touring_car":
                            cars = sNewTouringCars;
                            break;
                        
                        case "lm":
                            cars = sNewLemansCars;
                            break;
                    }
                }

                var idx = cars.indexOf(gtengine::MSpecDB::getCarLabel(w.car_code_));
                if (idx > -1)
                {
                    var car = cars[idx];
                    KeyValueUtil::set("new_flag", car, false);
                }

                CarSelection.result_ = w.car_code_;
                CarSelection.close(context);
                return EVENTRESULT_FILTER;
            }

            method onFocusLeave(context, new_index, old_index)
            {
                CarSelection::ToolTip::tip.value = "";
                return EVENTRESULT_STOP;
            }

            method onFocusNotify(context, new_index, old_index)
            {
                if (new_index != nil)
                {
                    var w = self.getInitializedWidget(context, new_index);
                    if (w != nil)
                        w.focus_enter(context);
                    
                    HScrollPointer.setPointer(new_index / (5 * 2));
                }

                if (old_index != nil)
                {
                    var w = self.getInitializedWidget(context, old_index);
                    if (w != nil)
                        w.focus_leave(context);
                }

                return EVENTRESULT_STOP;
            }

            method onVisibleNotify(context, indexes)
            {
                foreach (var i in indexes)
                {
                    if (self.getItemVisible(i))
                    {
                        self.getInitializedWidget(context, i);
                    }
                    else
                    {
                        self.setItemWidget(i, context, nil);
                    }
                }
            }

            method onKeyPress(context, event)
            {
                switch (event.keysym)
                {
                    case CELL_PAD_CTRL_L1:
                        var index = self.focus_index - (5 * 2);
                        if (index < 0)
                            return EVENTRESULT_FILTER;
                        
                        sound.play("cursor");
                        self.focus_index = index;
                        return EVENTRESULT_FILTER;

                    case CELL_PAD_CTRL_R1:
                        var index = self.focus_index + (5 * 2);
                        var index_max = self.getItemCount() - 1;

                        if (index > index_max)
                            return EVENTRESULT_FILTER;

                        sound.play("cursor");
                        self.focus_index = index;
                        return EVENTRESULT_FILTER;
                }

                return EVENTRESULT_CONTINUE;
            }
        }

        module OrderBy::OptionMenu
        {
            attribute index_open;

            method getOrderClause()
            {
                var w = self.getItem(self.index);

                switch (w.name)
                {
                    case "PP_ASC":
                        return "ORDER BY car.PP ASC, car.Price";
                    case "PP_DESC":
                        return "ORDER BY car.PP DESC, car.Price";
                    case "Power_ASC":
                        return "ORDER BY car.Power ASC, car.PP, car.Price";
                    case "Power_DESC":
                        return "ORDER BY car.Power DESC, car.PP, car.Price";
                    case "Price_ASC":
                        return "ORDER BY car.Price ASC, car.PP";
                    case "Price_DESC":
                        return "ORDER BY car.Price DESC, car.PP";
                    case "Year_ASC":
                        return "ORDER BY CASE car.Year WHEN 0 THEN 1 ELSE 0 END, car.Year ASC, car.PP, car.Price";
                    case "Year_DESC":
                        return "ORDER BY CASE car.Year WHEN 0 THEN 1 ELSE 0 END, car.Year DESC, car.PP, car.Price";
                    case "Name_ASC":
                        var table_name = pdistd::MLocale::getLanguage() == "JP" ? "CAR_NAME_JAPAN" : "CAR_NAME_ALPHABET";
                        return "ORDER BY (SELECT ShortName FROM %{table_name} cn WHERE cn.LabelID=car.ID)";
                }

                return "";
            }

            method onPopupOpen(context)
            {
                self.index_open = self.index;
                return EVENTRESULT_STOP;
            }

            method onPopupClosed(context)
            {
                if (self.index_open != self.index)
                {
                    var orderby_clause = getOrderClause();
                    var carcode_list = CarSelection.get_carlist_func_(orderby_clause);
                    CarSelection.createItem(context, carcode_list);

                    PROJECT.history['CarDealerRoot::TunerCarsOrder'] = self.index;
                    self.index_open = nil;
                }

                return EVENTRESULT_STOP;
            }
        }
    }

    module hidden::CarItem
    {
        static sTextSet = [:];

        attribute car_code_ = nil;
        attribute is_blank_ = false;
        attribute cannot_select_ = false;

        method focus_enter(context)
        {
            if (is_blank_)
            {
                CarSelection::ToolTip::tip.value = "";
                return;
            }

            var actors = [self.Board::ScaleXY,
                          self.Board::Cover::Fade,
                          self.Board::FocusFrame::Fade,
                          self.Reflect::ScaleX];

            foreach (var actor in actors)
            {
                actor.forward();
                actor.start();
            }

            if (self.car_code_ == nil)
                return;

            CarSelection::ToolTip::tip.value = "";

            context.addTimeOut("display_tooltip", function(context) 
            {
                if (self.car_code_ == nil)
                    return;

                var car_label = gtengine::MSpecDB::getCarLabel(self.car_code_);
                var car_description = ROOT.rtext_.get("CarCatch", car_label);
                var car_spec = SpecDatabaseUtil::getCarSpecText(context, self.car_code_);

                CarSelection::ToolTip::tip.value = pdistd::TextConv(car_description) + " " + car_spec;
            }, context);

            context.setTimeOut("display_tooltip", 0.1);
        }

        method focus_leave(context)
        {
            if (is_blank_)
            {
                return;
            }

            var actors = [self.Board::ScaleXY,
                          self.Board::Cover::Fade,
                          self.Board::FocusFrame::Fade,
                          self.Reflect::ScaleX];

            foreach (var actor in actors)
            {
                actor.backward();
                actor.start();
            }

            CarSelection::ToolTip::tip.value = "";
        }

        method setVisibleReflect(item_index)
        {
            self.Reflect.visible = item_index % (5 * 2) >= (5 * 2) / 2;
        }

        method initBlank(context, item_index)
        {
            self.Board::Cover.visible = false;
            self.setVisibleReflect(item_index);
            self.is_blank_ = true;
        }

        method onLoad(context)
        {
            self.CarName.text = "";

            var board = self.Board;
            board.CarThumb.image_path = "";
            board.Logo.image_path = "";
            board.Drivetrain.text = "";
            board.Power.text = "";
            board.PP.text = "";
            board.PriceSet::Price.text = "";
            board.PriceSet::OwnFlag.visible = false;
            board.Block.visible = false;
            board.frosted.visible = false;
            board.Present.visible = false;
        }

        method init(context, car_code, item_index)
        {
            self.car_code_ = car_code;

            var it = SPECDB.query1("SELECT PP, DriveTypeName, psvalue, Label, MainColor, Tuner, Price  FROM CAR_VIEW WHERE ID=?", [car_code]);

            var board = self.Board;
            self.CarName.text = gtengine::MSpecDB::getCarShortName(car_code);

            var unit_pp = manager.translate("Unit", "PERFORMANCE_POINT");
            board.PP.text = "%s %d".format(unit_pp, it.PP);

            var ps_v = pdiext::MUnit::GetPowerForDisplay(it.psvalue);
            var ps_u = pdiext::MUnit::GetUnitOfPower();

            if (ps_v > 0)
                board.Power.text = "%d %s".format(ps_v, ps_u);
            else
                board.Power.text = "---%s".format(ps_u);

            board.Drivetrain.text = manager.translate("DriveTrainName", it.DriveTypeName);

            var mtd_end_load_thumb = method (context)
            {
                board.CarThumb.FadeActor.start();
                board.CarThumb.on_delay_load_complete = nil;
            }


            board.CarThumb.on_delay_load_complete = self.*mtd_end_load_logo;

            if (GetVersionBranch() == "demo")
                board.CarThumb.image_path = "piece/gt6/car_img/%s_%02d_cmp.img".format(it.Label, it.MainColor);
            else
                board.CarThumb.image_path = "car/thumbnail_L/%s_%02d".format(it.Label, it.MainColor);

            board.CarThumb.FadeActor.reset();
            board.Manufacturer.text = manager.translate("TunerName", it.Tuner);

            var mtd_end_load_logo = method (context)
            {
                board.Logo.FadeActor.start();
                board.Logo.on_delay_load_complete = nil;
            }

            // Object selector shit
            board.Logo.on_delay_load_complete = self.*mtd_end_load_logo;

            board.Logo.image_path = "piece/gt6/tunner_logo_M/%s.img".format(it.Tuner);
            board.Logo.FadeActor.reset();

            var cr_str = manager.translate("Unit", "CREDIT");
            var price_str = pdiext::MMisc::GetMoneyString(it.Price);
            board.PriceSet::Price.text = "%s %s".format(cr_str, price_str);

            board.PriceSet::OwnFlag.visible = GAME_STATUS.user_profile.garage.hasCar(car_code);

            board.Present.visible = KeyValueUtil::hasPresentCar(car_code);
            self.setVisibleReflect(item_index);
            self.is_blank_ = false;

            if (ROOT.force_focus_carcode_ != nil)
            {
                if (ROOT.force_focus_carcode_ == self.car_code_)
                    self.Board::WhiteBlink::Opacity.restart();
                else
                {
                    self.cannot_select_ = true;
                    board.Block.visible = true;
                }
            }
        }
    }

    module CarSearch
    {
        attribute event_loop_;
        attribute result_;
        attribute pp_min_;
        attribute pp_max_;
        attribute price_min_;
        attribute price_max_;
        attribute price_option_;
        attribute year_min_;
        attribute year_max_;
        attribute year_option_;
        attribute drivetrain_;
        attribute aspiration_;
        attribute country_;
        attribute tuner_;
        attribute word_search_;

        method open(context)
        {
            ROOT.setFocus(Result);
            
            self.initialize(context);
            self.result_ = nil;
            self.appear();
            self.insensitive = false;
            self.event_loop_ = main::menu::EventLoop(context);

            self.event_loop_.enter();
            self.insensitive = true;
            var res = self.result_;
            self.result_ = nil;
            return res;
        }

        method close(context)
        {
            if (self.event_loop_ != nil)
            {
                var delay_time = self.hide();
                context.wait(delay_time);
                self.event_loop_.leave();
                self.event_loop_ = nil;
            }
        }

        method getConditionInt(key)
        {
            var v = KeyValueUtil::get("car_search", key);
            return v != "" ? v.toInt() : nil;
        }

        method getConditionString(key)
        {
            var v = KeyValueUtil::get("car_search", key);
            return v != "" ? v.toString() : nil;
        }

        method getConditionBool(key)
        {
            var v = KeyValueUtil::get("car_search", key);
            return v != "" ? v.toBool() : nil;
        }

        method loadConditions()
        {
            self.pp_min_ = PROJECT.history['CarSearch::PPMin'];
            self.pp_max_ = PROJECT.history['CarSearch::PPMax'];
            self.price_min_ = PROJECT.history['CarSearch::PriceMin'];
            self.price_max_ = PROJECT.history['CarSearch::PriceMax'];
            self.price_option_ = PROJECT.history['CarSearch::PriceOption'];
            self.year_min_ = PROJECT.history['CarSearch::YearMin'];
            self.year_max_ = PROJECT.history['CarSearch::YearMax'];
            self.year_option_ = PROJECT.history['CarSearch::YearOption'];
            self.drivetrain_ = PROJECT.history['CarSearch::Drivetrain'];
            self.aspiration_ = PROJECT.history['CarSearch::Aspiration'];
            self.country_ = PROJECT.history['CarSearch::Country'];
            self.tuner_ = PROJECT.history['CarSearch::Tuner'];
            self.word_search_ = PROJECT.history['CarSearch::WordSearch'];
        }

        method saveConditions()
        {
            PROJECT.history['CarSearch::PPMin'] = self.pp_min_;
            PROJECT.history['CarSearch::PPMax'] = self.pp_max_;
            PROJECT.history['CarSearch::PriceMin'] = self.price_min_;
            PROJECT.history['CarSearch::PriceMax'] = self.price_max_;
            PROJECT.history['CarSearch::PriceOption'] = self.price_option_;
            PROJECT.history['CarSearch::YearMin'] = self.year_min_;
            PROJECT.history['CarSearch::YearMax'] = self.year_max_;
            PROJECT.history['CarSearch::YearOption'] = self.year_option_;
            PROJECT.history['CarSearch::Drivetrain'] = self.drivetrain_;
            PROJECT.history['CarSearch::Aspiration'] = self.aspiration_;
            PROJECT.history['CarSearch::Country'] = self.country_;
            PROJECT.history['CarSearch::Tuner'] = self.tuner_;
            PROJECT.history['CarSearch::WordSearch'] = self.word_search_;
        }

        method resetAttribute()
        {
            self.pp_min_ = nil;
            self.pp_max_ = nil;
            self.price_min_ = nil;
            self.price_max_ = nil;
            self.price_option_ = nil;
            self.year_min_ = nil;
            self.year_max_ = nil;
            self.year_option_ = nil;
            self.drivetrain_ = nil;
            self.aspiration_ = nil;
            self.country_ = nil;
            self.tuner_ = nil;
            self.word_search_ = nil;
        }

        method getCarSearchConditionQuery()
        {
            var search_condition = "";
            var conditions = [];
            var params = [];

            if (self.pp_min_ != nil && self.pp_min_ > MBox::PP::Min::slider.min)
            {
                conditions.push("?<=car.PP");
                params.push(self.pp_min_);
            }

            if (self.pp_max_ != nil && self.pp_max_ < MBox::PP::Max::slider.max)
            {
                conditions.push("car.PP<=?");
                params.push(self.pp_max_);
            }

            if (MBox::PriceOption::vbox::CheckButton.active)
            {
                conditions.push("?<=car.Price");
                params.push(0);
            }
            else if (self.price_min_ != nil && self.price_min_ > MBox::Price::Min::slider.min)
            {
                conditions.push("?<=car.Price");
                params.push(self.price_min_ * 10000);
            }

            if (MBox::PriceOption::vbox::CheckButton.active)
            {
                conditions.push("car.Price<=?");
                params.push(GAME_STATUS.user_profile.cash);
            }
            else if (self.price_max_ != nil && self.price_max_ < MBox::Price::Max::slider.max)
            {
                conditions.push("car.Price<=?");
                params.push(self.price_max_ * 10000);
            }

            if (self.year_min_ != nil && self.year_min_ > MBox::Year::Min::slider.min)
            {
                if (MBox::YearOption::vbox::CheckButton.active)
                    conditions.push("(car.Year=0 OR ?<=car.Year)");
                else
                    conditions.push("(car.Year<>0 AND ?<=car.Year)");
                params.push(self.year_min_);
            }

            if (self.year_max_ != nil && self.year_max_ < MBox::Year::Max::slider.max)
            {
                if (MBox::YearOption::vbox::CheckButton.active)
                    conditions.push("(car.Year=0 OR car.Year<=?)");
                else
                    conditions.push("(car.Year<>0 AND car.Year<=?)");
                params.push(self.year_max_);
            }

            if (self.year_max_ == MBox::Year::Max::slider.max && 
                self.year_min_ == MBox::Year::Min::slider.min)
            {
                if (!MBox::YearOption::vbox::CheckButton.active)
                    conditions.push("car.Year<>0");
            }
            
            if (self.country_ != nil)
            {
                var country_w = MBox::Dealer::Country::OptionMenu.getItem(self.country_);
                var country_code = country_w.country_code;

                if (country_code != nil)
                {
                    conditions.push("car.CountryFlag=?");
                    params.push(country_code);
                }
            }

            if (self.tuner_ != nil)
            {
                var tuner_w = MBox::Dealer::Dealer::OptionMenu.getItem(self.tuner_);
                var tuner_code = tuner_w.tuner_code;

                if (tuner_code != nil)
                {
                    conditions.push("car.Tuner=?");
                    params.push(tuner_code);
                }
            }

            if (self.drivetrain_ != nil)
            {
                var drivetrain_w = MBox::Spec::Drivetrain::OptionMenu.getItem(self.drivetrain_);
                var drivetrain = drivetrain_w.drivetrain;

                if (drivetrain != nil)
                {
                    conditions.push("car.DriveTypeName=?");
                    params.push(drivetrain);
                }
            }

            if (self.aspiration_ != nil)
            {
                var aspiration_w = MBox::Spec::Aspiration::OptionMenu.getItem(self.aspiration_);
                var aspiration = aspiration_w.aspiration;

                if (aspiration != nil)
                {
                    switch (aspiration)
                    {
                        case "NATUNE":
                            conditions.push("car.aspiration=?");
                            params.push("NA");
                            break;

                        case "SUPERCHARGER":
                            conditions.push("car.aspiration=?");
                            params.push("SuperCharger");
                            break; 

                        case "TURBO":
                            conditions.push("car.aspiration=?");
                            params.push("TURBO");
                            break; 

                        case "MOTOR":
                            conditions.push("car.powersourcetype=?");
                            params.push(2);
                            break; 
                    }
                }
            }

            if (self.word_search_ != nil && self.word_search_.trim() != "")
            {
                var like = "LIKE '%%{self.word_search_}%' ESCAPE '\\'";
                if (pdistd::MLocale::getLanguage() == "JP")
                {
                    conditions.push("("
                                        "(name.Name %{like} OR name.ShortName %{like})"
                                        " OR "
                                        "(name_jp.Name %{like} OR name_jp.ShortName %{like})"
                                    ")");
                }
                else
                {
                    conditions.push("(name.Name %{like} OR name.ShortName %{like})");
                }
            }

            if (!KeyValueUtil::isCarUnlock("m3_gt2_11_color"))
            {
                conditions.push("car.ID<>?");
                params.push(gtengine::MSpecDB::getCarCode("m3_gt2_11_color"));
            }

            if (conditions.size > 0)
                search_condition = "WHERE " + conditions.join(" AND ");
            
            return [search_condition, params];
        }

        method getCarSearchQuery()
        {
            var query = "";

            |var search_condition, var params| = self.getCarSearchConditionQuery();
            if (pdistd::MLocale::getLanguage() == "JP")
            {
                query = "SELECT car.ID"
                        " FROM CAR_SEARCH car"
                        " INNER JOIN CAR_NAME_ALPHABET name ON car.ID=name.LabelID"
                        " INNER JOIN CAR_NAME_JAPAN name_jp ON car.ID=name_jp.LabelID"
                        " %{search_condition}";
            }
            else
            {
                query = "SELECT car.ID"
                        " FROM CAR_SEARCH car"
                        " INNER JOIN CAR_NAME_ALPHABET name ON car.ID=name.LabelID"
                        " %{search_condition}";
            }

            return [query, params];
        }

        method updateSearchingCarCount()
        {
            var query = "";

            |var search_condition, var params| = self.getCarSearchConditionQuery();
            if (pdistd::MLocale::getLanguage() == "JP")
            {
                query = "SELECT COUNT(car.ID)"
                        " FROM CAR_SEARCH car"
                        " INNER JOIN CAR_NAME_ALPHABET name ON car.ID=name.LabelID"
                        " INNER JOIN CAR_NAME_JAPAN name_jp ON car.ID=name_jp.LabelID"
                        " %{search_condition}";
            }
            else
            {
                query = "SELECT COUNT(car.ID)"
                        " FROM CAR_SEARCH car"
                        " INNER JOIN CAR_NAME_ALPHABET name ON car.ID=name.LabelID"
                        " %{search_condition}";
            }

            var car_count = SPECDB.count(query, params);
            Result::HitCount::Num.text = car_count;
            Result::HitCount::Num_a.text = car_count;

            var unit_cars = manager.translate("Unit", "CARS").trim();
            var rpos = unit_cars.find("{0}");
            var unit_length = unit_cars.length - "{0}".length;

            if (rpos == 0)
            {
                unit_cars = unit_cars.substr("{0}".length, unit_length);
                Result::HitCount::UnitLeft.text = "";
                Result::HitCount::UnitRight.text = unit_cars.trim();
            }
            else
            {
                unit_cars = unit_cars.substr(0, unit_length);
                Result::HitCount::UnitLeft.text = unit_cars.trim();
                Result::HitCount::UnitRight.text = "";            
            }

            var over = car_count > 200;

            Result::Over.text = manager.translate(ROOT, "Message_ExceedDisplayLimit2").build(200);
            Result::Over.visible = over;

            var not_found = car_count == 0;
            Result::NotFound.visible = not_found;

            Result.active = !not_found && !over;
            Result::HitCount.active = !not_found && !over;
        }

        method initialize(context)
        {
            self.loadConditions();

            // PP Sliders
            var pp_min = 200;
            var pp_max = 1000;
            var pp_step = 10;

            var slider = MBox::PP::Min::slider;

            slider.min = pp_min - pp_step;
            slider.max = pp_max;
            slider.step = pp_step;

            slider.format_callback = function (context, value)
            {
                if (value < pp_min)
                    return manager.translate("OnlineMessage", "NO_LOWER_LIMIT");
                return "%d".format(value);
            }

            if (self.pp_min_ == nil)
                self.pp_min_ = slider.min;

            slider.index = self.pp_min_;
            slider.setup(context);

            var slider2 = MBox::PP::Max::slider;
            slider2.min = pp_min;
            slider2.max = pp_max + pp_step;
            slider2.step = pp_step;
            slider2.format_callback = function (context, value)
            {
                if (pp_max < value)
                    return manager.translate("OnlineMessage", "NO_UPPER_LIMIT");
                return "%d".format(value);
            }

            if (self.pp_max_ == nil)
                self.pp_max_ = slider2.max;

            slider2.index = self.pp_max_;
            slider2.setup(context);

            // Price Sliders
            var price_min = 1;
            var price_max = 300;
            var price_step = 1;

            var slider = MBox::Price::Min::slider;

            slider.min = price_min - price_step;
            slider.max = price_max;
            slider.step = price_step;

            slider.format_callback = function (context, value)
            {
                if (value < price_min)
                    return manager.translate("OnlineMessage", "NO_LOWER_LIMIT");
                return pdiext::MMisc::GetMoneyString(value * 10000);
            }

            if (self.price_min_ == nil)
                self.price_min_ = slider.min;

            slider.index = self.price_min_;
            slider.setup(context);

            slider2 = MBox::Price::Max::slider;
            slider2.min = price_min;
            slider2.max = price_max + price_step;
            slider2.step = price_step;
            slider2.format_callback = function (context, value)
            {
                if (price_max < value)
                    return manager.translate("OnlineMessage", "NO_UPPER_LIMIT");
                return pdiext::MMisc::GetMoneyString(value * 10000);
            }

            if (self.price_max_ == nil)
                self.price_max_ = slider2.max;

            slider2.index = self.price_max_;
            slider2.setup(context);

            if (self.price_option_ == nil)
                self.price_option_ = true;

            MBox::PriceOption::vbox::CheckButton.setActive(self.price_option_);

            // Year Sliders
            var year_min = 1940;
            var year_max = 2014;
            var year_step = 1;
        
            var slider = MBox::Year::Min::slider;
        
            slider.min = year_min - year_step;
            slider.max = year_max;
            slider.step = year_step;
        
            slider.format_callback = function (context, value)
            {
                if (value < year_min)
                    return manager.translate("OnlineMessage", "NO_LOWER_LIMIT");
                return "%d".format(value);
            }
        
            if (self.year_min_ == nil)
                self.year_min_ = slider.min;
        
            slider.index = self.year_min_;
            slider.setup(context);
        
            slider2 = MBox::Year::Max::slider;
            slider2.min = year_min;
            slider2.max = year_max + year_step;
            slider2.step = year_step;
            slider2.format_callback = function (context, value)
            {
                if (year_max < value)
                    return manager.translate("OnlineMessage", "NO_UPPER_LIMIT");
                return "%d".format(value);
            }
        
            if (self.year_max_ == nil)
                self.year_max_ = slider2.max;
        
            slider2.index = self.year_max_;
            slider2.setup(context);

            if (self.year_option_ == nil)
                self.year_option_ = true;

            MBox::YearOption::vbox::CheckButton.setActive(self.year_option_);

            // Setup drivetrains
            var option_menu = MBox::Spec::Drivetrain::OptionMenu;
            option_menu.popup::vbox.clearChildren(context);
            option_menu.popup.minimum_height = 0.0;

            var vbox = option_menu.popup::vbox;
            var w = hidden::PulldownItem.doCopy();
            w.label.text = manager.translate("Component", "Label_All");
            w.defineAttribute("drivetrain", nil);
            vbox.appendChild(context, w);

            var drivetrains = ["FR", "FF", "4WD", "MR", "RR"];
            foreach (var drivetrain in drivetrains)
            {
                w = hidden::PulldownItem.doCopy();
                w.label.text = manager.translate("DriveTrainName", drivetrain);
                w.defineAttribute("drivetrain", drivetrain);
                vbox.appendChild(context, w);
            }

            option_menu.applyAppend(context);
            if (self.drivetrain_ == nil)
                self.drivetrain_ = 0;
            option_menu.setIndex(context, self.drivetrain_);

            // Setup aspirations
            option_menu = MBox::Spec::Aspiration::OptionMenu;
            option_menu.popup::vbox.clearChildren(context);
            option_menu.popup.minimum_height = 0.0;

            var vbox = option_menu.popup::vbox;
            var w = hidden::PulldownItem.doCopy();
            w.label.text = manager.translate("Component", "Label_All");
            w.defineAttribute("aspiration", nil);
            vbox.appendChild(context, w);

            var aspirations = ["NATUNE", "SUPERCHARGER", "TURBO", "MOTOR"];
            foreach (var aspiration in aspirations)
            {
                w = hidden::PulldownItem.doCopy();
                w.label.text = manager.translate("AspirationName", "ASPIRATION_%{aspiration}");
                w.defineAttribute("aspiration", aspiration);
                vbox.appendChild(context, w);
            }

            option_menu.applyAppend(context);
            if (self.aspiration_ == nil)
                self.aspiration_ = 0;
            option_menu.setIndex(context, self.aspiration_);

            // Setup countries
            option_menu = MBox::Dealer::Country::OptionMenu;
            option_menu.popup::vbox.clearChildren(context);
            option_menu.popup.minimum_height = 0.0;

            var vbox = option_menu.popup::vbox;
            var w = hidden::PulldownItem.doCopy();
            w.label.text = manager.translate("Component", "Label_All");
            w.defineAttribute("country_code", nil);
            vbox.appendChild(context, w);

            var country_codes = SPECDB.executeQuery1C("SELECT code FROM COUNTRY");
            var country_texts = [];
            foreach (var country_code in country_codes)
            {
                w = hidden::PulldownItem.doCopy();
                var country_str = country_code != "-" ? country_code : "pdi";

                w.label.text = manager.translate("Country", country_str.upcase());
                w.CountryFlag.image_path = "/piece/flag_ranking/%s.img".format(country_str);
                w.CountryFlag.visible = true;
                w.defineAttribute("country_code", country_code);
                vbox.appendChild(context, w);
            }

            option_menu.applyAppend(context);
            if (self.country_ == nil)
                self.country_ = 0;
            option_menu.setIndex(context, self.country_);

            // Setup manufacturers
            option_menu = MBox::Dealer::Dealer::OptionMenu;
            option_menu.popup::vbox.clearChildren(context);
            option_menu.popup.minimum_height = 0.0;

            var vbox = option_menu.popup::vbox;
            var w = hidden::PulldownItem.doCopy();
            w.label.text = manager.translate("Component", "Label_All");
            w.defineAttribute("tuner_code", nil);
            vbox.appendChild(context, w);

            var where_clause = "WHERE t.InDealer=1 AND t.Country=c.ID";
            var orderby_clause = "ORDER BY t.%s".format(main::pdistd::MLocale::getLanguage());
            var params = [];
            var country_w = MBox::Dealer::Country::OptionMenu.getItem();
            var country_code = country_w.country_code;
            if (country_code != nil)
            {
                where_clause += " AND c.code=?";
                params.push(country_code);
            }

            var trio_data = SPECDB.executeQuery("SELECT DISTINCT t.ID, t.TunerString, c.code FROM TUNER t, COUNTRY c %{where_clause} %{orderby_clause}", params);
            foreach (|var tuner_code, var tuner_name, var country_flag| in trio_data)
            {
                w = hidden::PulldownItem.doCopy();
                var country_str = country_flag != "-" ? country_flag.downcase() : "pdi";

                w.label.text = manager.translate("TunerName", tuner_name);
                w.CountryFlag.image_path = "/piece/flag_ranking/%s.img".format(country_str);
                w.CountryFlag.visible = true;
                w.defineAttribute("tuner_code", tuner_code);
                vbox.appendChild(context, w);
            }

            option_menu.applyAppend(context);
            if (self.tuner_ == nil)
                self.tuner_ = 0;
            option_menu.setIndex(context, self.tuner_);

            // Setup input
            if (self.word_search_ == nil)
                self.word_search_ = "";

            MBox::CarName::InputTextBox::Text::input2.text = self.word_search_;
            updateSearchingCarCount();
            ROOT.setTopicPath();
        }

        method onInitialize(context)
        {
            self.insensitive = true;
            self.hide(true);
            ToolTip::tip.remove();
            ToolTip::tip.value = manager.translate(ROOT, "TooltipCarSearch");
        }

        method onFinalize(context)
        {
            MBox::Dealer::Country::OptionMenu::popup::vbox.clearChildren(context);
            MBox::Spec::Drivetrain::OptionMenu::popup::vbox.clearChildren(context);
        }

        method onCancel(context)
        {
            sound.play("cancel");
            self.close(context);
            self.resetAttribute();
            return EVENTRESULT_FILTER;
        }

        module MBox
        {
            module PP::Min::slider
            {
                attribute current_pp;

                method onPopupClosed(context)
                {
                    CarSearch.pp_min_ = self.index;
                    if (PP::Max::slider.index < self.index)
                    {
                        PP::Max::slider.index = self.index;
                        CarSearch.pp_max_ = self.index;
                    }

                    CarSearch.updateSearchingCarCount();
                    __prototype__::onPopupClosed(context);
                }
            }

            module PP::Max::slider
            {
                method onPopupClosed(context)
                {
                    CarSearch.pp_max_ = self.index;
                    if (self.index < PP::Min::slider.index)
                    {
                        PP::Min::slider.index = self.index;
                        CarSearch.pp_min_ = self.index;
                    }

                    CarSearch.updateSearchingCarCount();
                    __prototype__::onPopupClosed(context);
                }
            }
            
            module Price::Min::slider
            {
                method onPopupClosed(context)
                {
                    CarSearch.price_min_ = self.index;
                    if (Price::Max::slider.index < self.index)
                    {
                        Price::Max::slider.index = self.index;
                        CarSearch.price_max_ = self.index;
                    }

                    CarSearch.updateSearchingCarCount();
                    __prototype__::onPopupClosed(context);
                }
            }

            module Price::Max::slider
            {
                method onPopupClosed(context)
                {
                    CarSearch.price_max_ = self.index;
                    if (self.index < Price::Min::slider.index)
                    {
                        Price::Min::slider.index = self.index;
                        CarSearch.price_min_ = self.index;
                    }

                    CarSearch.updateSearchingCarCount();
                    __prototype__::onPopupClosed(context);
                }
            }

            module Year::Min::slider
            {
                method onPopupClosed(context)
                {
                    CarSearch.year_min_ = self.index;
                    if (Year::Max::slider.index < self.index)
                    {
                        Year::Max::slider.index = self.index;
                        CarSearch.year_max_ = self.index;
                    }

                    CarSearch.updateSearchingCarCount();
                    __prototype__::onPopupClosed(context);
                }
            }

            module Year::Max::slider
            {
                method onPopupClosed(context)
                {
                    CarSearch.year_max_ = self.index;
                    if (self.index < Year::Min::slider.index)
                    {
                        Year::Min::slider.index = self.index;
                        CarSearch.year_min_ = self.index;
                    }

                    CarSearch.updateSearchingCarCount();
                    __prototype__::onPopupClosed(context);
                }
            }

            module Spec::Drivetrain::OptionMenu
            {
                method onValueChanged(context)
                {
                    if (CarSearch.drivetrain_ == self.index)
                    {
                        __prototype__::onValueChanged(context);
                        return EVENTRESULT_STOP;
                    }

                    CarSearch.drivetrain_ = self.index;
                    CarSearch.updateSearchingCarCount();
                    __prototype__::onValueChanged(context);
                    return EVENTRESULT_STOP;
                }
            }

            module Spec::Aspiration::OptionMenu
            {
                method onValueChanged(context)
                {
                    if (CarSearch.aspiration_ == self.index)
                    {
                        __prototype__::onValueChanged(context);
                        return EVENTRESULT_STOP;
                    }

                    CarSearch.aspiration_ = self.index;
                    CarSearch.updateSearchingCarCount();
                    __prototype__::onValueChanged(context);
                    return EVENTRESULT_STOP;
                }
            }

            module Dealer::Country::OptionMenu
            {
                method onValueChanged(context)
                {
                    if (CarSearch.country_ == self.index)
                    {
                        __prototype__::onValueChanged(context);
                        return EVENTRESULT_STOP;
                    }

                    CarSearch.country_ = self.index;

                    var option_menu = MBox::Dealer::Dealer::OptionMenu;
                    option_menu.popup::vbox.clearChildren(context);
                    option_menu.popup.minimum_height = 0.0;

                    var vbox = option_menu.popup::vbox;
                    var w = hidden::PulldownItem.doCopy();
                    w.label.text = manager.translate("Component", "Label_All");
                    w.defineAttribute("tuner_code", nil);
                    vbox.appendChild(context, w);
        
                    var where_clause = "WHERE t.InDealer=1 AND t.Country=c.ID";
                    var orderby_clause = "ORDER BY t.%s".format(main::pdistd::MLocale::getLanguage());
                    var params = [];
                    var country_w = self.getItem();
                    var country_code = country_w.country_code;
                    if (country_code != nil)
                    {
                        where_clause += " AND c.code=?";
                        params.push(country_code);
                    }
        
                    var trio_data = SPECDB.executeQuery("SELECT DISTINCT t.ID, t.TunerString, c.code FROM TUNER t, COUNTRY c %{where_clause} %{orderby_clause}", params);
                    foreach (|var tuner_code, var tuner_name, var country_flag| in trio_data)
                    {
                        w = hidden::PulldownItem.doCopy();
                        var country_str = country_flag != "-" ? country_flag.downcase() : "pdi";
        
                        w.label.text = manager.translate("TunerName", tuner_name);
                        w.CountryFlag.image_path = "/piece/flag_ranking/%s.img".format(country_str);
                        w.CountryFlag.visible = true;
                        w.defineAttribute("tuner_code", tuner_code);
                        vbox.appendChild(context, w);
                    }
                    option_menu.applyAppend(context);
                    CarSearch.tuner_ = 0;
                    option_menu.setIndex(context, 0);

                    CarSearch.updateSearchingCarCount();
                    __prototype__::onValueChanged(context);
                    return EVENTRESULT_STOP;
                }
            }

            module Dealer::Dealer::OptionMenu
            {
                method onValueChanged(context)
                {
                    if (CarSearch.tuner_ == self.index)
                    {
                        __prototype__::onValueChanged(context);
                        return EVENTRESULT_STOP;
                    }

                    CarSearch.tuner_ = self.index;
                    CarSearch.updateSearchingCarCount();
                    __prototype__::onValueChanged(context);
                    return EVENTRESULT_STOP;
                }
            }

            module CarName::InputTextBox
            {
                SCALE_WIDGET_SDTV(label, 2.4);

                module Text::input2
                {
                    method onActivate(context)
                    {
                        sound.play("ok");
                        var config = ["limit_length" : 25];

                        var text = OSKUtil::open(context, self.text, ROOT, config);
                        if (text == nil)
                            return EVENTRESULT_FILTER;
                        
                        self.text = text;
                        text.replaceAll("_", "\\_");
                        text.replaceAll("%", "\\%");
                        text = pdistd::MSqlite::EscapeString(text);
                        CarSearch.word_search_ = text;

                        CarSearch.updateSearchingCarCount();
                        return EVENTRESULT_FILTER;
                    }

                    method onFocusEnter(context)
                    {
                        context.target_widget = InputText::Icon;
                        return EVENTRESULT_FILTER;
                    }
                }
            }

            module PriceOption::vbox::CheckButton
            {
                method setActive(active)
                {
                    self.active = active;
                    var price = MBox::Price;

                    price.Max::slider.insensitive = active;
                    price.Min::slider.insensitive = active;

                    if (active)
                    {
                        var cash = GAME_STATUS.user_profile.cash;
                        price.Max::slider::label_ii.text = cash > 0 ? pdiext::MMisc::GetMoneyString(cash) : "0";
                        price.Min::slider::label_ii.text = manager.translate("OnlineMessage", "NO_LOWER_LIMIT");
                    }

                    CarSearch.price_option_ = active;
                }

                method onActivate(context)
                {
                    __prototype__::onActivate(context);
                    self.setActive(self.active);
                    CarSearch.updateSearchingCarCount();
                    return EVENTRESULT_STOP;
                }
            }

            module YearOption::vbox::CheckButton
            {
                method setActive(active)
                {
                    self.active = active;
                    CarSearch.year_option_ = active;
                }

                method onActivate(context)
                {
                    __prototype__::onActivate(context);

                    self.setActive(self.active);
                    CarSearch.updateSearchingCarCount();

                    return EVENTRESULT_STOP;
                }
            }
        }

        module Result
        {
            method onActivate(context)
            {
                if (!Result.active)
                {
                    sound.play("disable");
                    return EVENTRESULT_FILTER;
                }

                sound.play("ok");
                
                CarSearch.result_ = CarSearch.getCarSearchQuery();
                CarSearch.close(context);
                CarSearch.saveConditions();

                return EVENTRESULT_FILTER;
            }
        }

        module VersionGT6
        {
            method onInitialize(context)
            {
                var ver_str = pdiext::MProductInformation::GetDisplayVersion();
                ver_str = ver_str.substr(0, ver_str.rfind("."));

                if (pdiext::isQABuild())
                    ver_str = ver_str + ".qa";
                
                self.Version.text = "Ver. " + ver_str;
            }
        }
    }
}