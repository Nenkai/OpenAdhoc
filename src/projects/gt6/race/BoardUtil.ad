

//---------------------------------------------------------------------------------------
// BoardUtil.ad
//
// Utility module
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module BoardUtil
{
    static sBoardList = nil;
    static sEntryNum = nil;

    class EntryInfo
    {
        attribute slot_id;
        attribute cp;
        attribute dp;
        attribute car;
        attribute driver;
        attribute total_time;
        attribute total_time_diff;
        attribute fastest_lap_time;
        attribute tire_f;
        attribute tire_r;
        attribute date;

        method __init__(slot_id, car, driver, cp, dp, total_time, total_time_diff, fastest_lap_time, tire_f, tire_r, date)
        {
            if (slot_id != nil)
                self.slot_id = slot_id;

            if (car != nil)
                self.car = car;

            if (driver != nil)
                self.driver = driver;

            if (cp != nil)
                self.cp = cp;

            if (dp != nil)
                self.dp = dp;

            if (total_time != nil)
                self.total_time = total_time.toString();

            if (total_time_diff != nil)
                self.total_time_diff = total_time_diff.toString();

            if (fastest_lap_time != nil)
                self.fastest_lap_time = fastest_lap_time.toString();

            if (tire_f != nil)
                self.tire_f = tire_f;

            if (tire_r != nil)
                self.tire_r = tire_r;

            if (date != nil)
                self.date = date;
        }
    }

    class DriftInfo
    {
        attribute sector;
        attribute score;
        attribute grade;
        attribute car;

        method __init__(sector, score, grade, car)
        {
            if (sector != nil)
                self.sector = sector;

            if (score != nil)
                self.score = score;

            if (grade != nil)
                self.grade = grade;

            if (car != nil)
                self.car = car;
        }
    }

    function create_board(context, root, setup_entry_cb, parent, template_board, template_entry, list, num, start_rank, base_delay, delay_ratio)
    {
        var board = template_board.doCopy();
        if (board["ScalarInterpolator"] != nil)
        {
            board.ScalarInterpolator.start_delay = base_delay;
            board.x = -board.w;
        }
        else
        {
            board.x = 0;
        }

        board.y = 0;
        parent.appendChild(context, board);

        board.ListBox.setItemTemplate(context, template_entry);
        board.ListBox.setItemCount(num);

        var slotIDList = ORG.getSlotIDListOnGrid();
        for (var i = 0; i < num; i++)
        {
            var item = board.ListBox.getItemWidget(i, context);
            if (item != nil)
            {
                item.defineAttribute('time_active');
                item.time_active = false;
                
                var order = i + start_rank;

                if (gSequenceCondition.no_quickmenu == false)
                {
                    if (order < slotIDList.size && slotIDList[order] != -1 && ORG.checkInCourseSlot(slotIDList[order]) == false)
                    {
                        var darkAlpha = 1.0;
                        if (item.defined("Driver"))
                        {
                            item.Driver.label.alpha = darkAlpha;

                            if (item.Driver.defined("labela"))
                                item.Driver.labela.alpha = darkAlpha;
                        }

                        if (item.defined("No"))
                        {
                            item.No.label.alpha = darkAlpha;

                            if (item.No.defined("labela"))
                                item.No.labela.alpha = darkAlpha;
                        }

                        if (item.defined("Car"))
                        {
                            item.Car.label.alpha = darkAlpha;

                            if (item.Car.defined("labela"))
                                item.Car.labela.alpha = darkAlpha;
                        }
                    }
                }

                pdiext::ProcessUpdateIteration(16000);
            }
        }

        if (template_board.getNodePath() == "RaceProject::Template::ResultBoard::Board")
            board.ListBox.h = board.ListBox.minimum_height = template_entry.h * num;

        return board;
    }

    function update_board(context, root, update_cb, board, list, num, start_rank)
    {
        for (var i = 0; i < num; i++)
        {
            var item = board.ListBox.getItemWidget(i, context);
            if (item != nil)
            {
                var order = i + start_rank;
                var info = nil;

                if (order < list.size)
                    info = list[order];
                
                (root.*update_cb)(context, item, order, info);
            }
        }
    }

    function initialize(context, root, setup_entry_cb, center_frame, left_frame, right_frame, template, entry_list, entry_max_if)
    {
        sBoardList = [];

        var template_entry = template.Entry;
        var template_board = template.Board;
        
        var num = 16;
        if (center_frame != nil)
            num = 8;

        if (entry_max_if != nil)
            num = entry_max_if;

        if (left_frame != nil && right_frame != nil)
        {
            sBoardList = Array(2);

            var board = create_board(context, root, setup_entry_cb, left_frame, template_board, template_entry, entry_list, 8, 0, 0.0, 0.1);
            sBoardList[0] = board;

            board = create_board(context, root, setup_entry_cb, right_frame, template_board, template_entry, entry_list, num - 8, 8, 0.8, 0.1);
            sBoardList[1] = board;

            if (left_frame != nil)
                left_frame.visible = true;

            if (right_frame != nil)
                right_frame.visible = true;

            if (center_frame != nil)
                center_frame.visible = false;
        }
        else
        {
            sBoardList = Array(1);

            var board = create_board(context, root, setup_entry_cb, center_frame, template_board, template_entry, entry_list, num, 0, 0.0, 0.0);
            sBoardList[0] = board;

            if (left_frame != nil)
                left_frame.visible = false;

            if (right_frame != nil)
                right_frame.visible = false;

            if (center_frame != nil)
                center_frame.visible = true;
        }

        sEntryNum = num;
        update(context, root, setup_entry_cb, entry_list);
    }

    function finalize(context, center_frame, left_frame, right_frame)
    {
        if (center_frame != nil)
        {
            var board = center_frame.last;
            if (board != nil && board.name == "Board")
                center_frame.removeChild(context, board);
        }

        if (left_frame != nil)
        {
            var board = left_frame.last;
            if (board != nil && board.name == "Board")
                left_frame.removeChild(context, board);
        }

        if (right_frame != nil)
        {
            right_frame.clearChildren(context);

            var board = right_frame.last;
            if (board != nil && board.name == "Board")
                right_frame.removeChild(context, board);
        }

        sBoardList = nil;
        sEntryNum = nil;
    }

    function update(context, root, update_cb, entry_list)
    {
        if (sBoardList == nil)
            return;

        var num = sEntryNum;
        if (num > 8 && sBoardList.size > 1)
        {
            update_board(context, root, update_cb, sBoardList[0], entry_list, 8, 0);
            update_board(context, root, update_cb, sBoardList[1], entry_list, num - 8, 8);
        }
        else
            update_board(context, root, update_cb, sBoardList[0], entry_list, num, 0);
    }
}