













module News
{
    module OBS_Enum
    {
        static NEWS_OBS_SLEEP = 0;
        static NEWS_OBS_WAIT_NEWS = 1;
        static NEWS_OBS_END_NEWS = 2;
    }

    static sNewsObserver = nil;

    method initialize(context)
    {
        News.visible = LoginUtil::isOnline() && Grim2Util::News::isEnable();
        sNewsObserver = OBS_Enum::NEWS_OBS_SLEEP;
    }

    method finalize(context)
    {
        News2.clearCallback();
    }

    method on(context)
    {
        News.visible = LoginUtil::isOnline() && Grim2Util::News::isEnable();
        pop_news(context);
    }

    method off(context)
    {
        sNewsObserver = OBS_Enum::NEWS_OBS_SLEEP;
        tip.value = "";
    }

    method pop_news(context)
    {
        if (!LoginUtil::isOnline() || !Grim2Util::News::isEnable())
        {
            tip.value = "";
            return;
        }

        var news_id = ScrollNewsUtil::pop(context);
        if (news_id == "")
            return;

        var me = self;

        News2.requestNews(news_id, function (args)
        {
            |var context, var request| = args;
            if (request.isDone())
            {
                var news = News2.decodeNews(request);
                if (ScrollNewsUtil::isInvalidNews(context, news, true))
                {
                    if (!ScrollNewsUtil::isEmpty())
                        context.pushEvent(menu::MScriptEvent(context, me, "pop_news"));
                }
                else
                {
                    tip.value = news["headline"];
                }
            }
            else
            {
                context.pushEvent(menu::MScriptEvent(context, me, "pop_news"));
            }
        });
    }

    method isInvalidNews(context, news)
    {
        if (news["headline"] == "")
            return false;
    }

    method next_news(context) { }
    method previous_news(context) { }
    method first_news(context) { }
    method last_news(context) { }

    module tip
    {
        method onInitialize()
        {
            self.remove();
            self.value = "";
            self.action_type = 3;
        }

        method onPhase10End(context)
        {
            if (self.value == "")
                return;

            News.next_news(context);
        }

        method onPhase12End(context)
        {
            if (self.value == "")
                return;

            if (sNewsObserver == OBS_Enum::NEWS_OBS_WAIT_NEWS)
            {
                sNewsObserver = OBS_Enum::NEWS_OBS_END_NEWS;
                self.value = "";
                return;
            }

            self.value = "";
            News.pop_news(context);
        }
    }
}