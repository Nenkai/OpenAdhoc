
#ifdef GT4O_US_BETA
module PROJECT::MComponent::SetupPanel::SetupWindow
{
	method doColorize()
	{
        var title = MComponent::SetupPanel::SetupWindow::Title;
        var slider;

        if (MComponent::SetupPanel.defined("Slider"))
            slider = MComponent::SetupPanel::Slider;

        var pulldown;
        if (MComponent::SetupPanel.defined("Pulldown"))
            pulldown = MComponent::SetupPanel::Pulldown;

        var text_input;
        if (MComponent::SetupPanel.defined("TextInput"))
            text_input = MComponent::SetupPanel::TextInput;

        var number_input;
        if (MComponent::SetupPanel.defined("NumberInput"))
            number_input = MComponent::SetupPanel::NumberInput;

        var vacant;
        if (MComponent::SetupPanel.defined("Vacant"))
            vacant = MComponent::SetupPanel::Vacant;

        var bottom_spacer;
        if (MComponent::SetupPanel.defined("BottomSpacer"))
            bottom_spacer = MComponent::SetupPanel::BottomSpacer;

        var buttons;
        if (MComponent::SetupPanel.defined("Buttons"))
            buttons = MComponent::SetupPanel::Buttons;

        var i = 0;
		for (var it = self.first_window; it != nil; it = it.next_window)
		{
			var p = it.__prototype__;
	
			if (p == title)
			{
				continue;
			}
			
			if (p == buttons)
			{
				continue;
			}
	
			if (it.visible)
			{
				if (p == bottom_spacer)
				{
					var ii = (i % 2) + 7;
					var c = main::menu::MColorObject();
					c.color_index = ii;
					it.bspacer.setColor(c);
				}
				else if (p == pulldown || p == text_input || p == number_input || p == slider || p == vacant)
				{
					var ii = ((i + 1) % 2) + 7;
					var c = main::menu::MColorObject();
					c.color_index = ii;
					it.bg.setColor(c);
					i++;
				}
			}
		}
	}

	method onLoad(context)
	{
		doColorize();
	}
}

module PROJECT::MComponent::SetupPanel::Buttons::OK::bgf
{
	method __copy_init__()
	{
		self.actor = main::menu::MFadeActor(self, 1.0);
		self.actor.period = 0.25;
		self.actor.repeat = true;
	}
}

module PROJECT::MComponent::SetupPanel::Buttons::CancelOK::No::bgf
{
	method __copy_init__()
	{
		self.actor = main::menu::MFadeActor(self, 1.0);
		self.actor.period = 0.25;
		self.actor.repeat = true;
	}
}

module PROJECT::MComponent::SetupPanel::Buttons::CancelOK::Yes::bgf
{
	method __copy_init__()
	{
		self.actor = main::menu::MFadeActor(self, 1.0);
		self.actor.period = 0.25;
		self.actor.repeat = true;
	}
}
#endif

module PROJECT
{
	#include "../share/dialog.ad"

#ifdef GT4O_US_BETA
	#define NO_RTIME
	#include "../share/actor.ad"
	#include "../share/online_error.ad"
	#include "../share/online_util.ad"
#endif

	static enable = false;
	static sImWidget = nil;
	static sImWatcher = nil;
	
	function OnImWatcher()
	{
#ifdef GT4O_US_BETA
		if (main::network.imHaveMessage())
		{
			sImWidget.active = true;
			sImWidget.actor.doStart();
		}
		else
		{
			sImWidget.active = false;
			sImWidget.actor.doStop();
		}
#else
		if (main::network.imHaveMessage())
			sImWidget.active = true;
#endif
	}
	
	function endIMCheck()
	{
#ifdef GT4O_US_BETA
		enable = false;
#endif

		if (sImWatcher != nil)
		{
#ifdef GT4O_US_BETA
			sImWidget.actor.rewind();
			sImWidget.actor = nil;
#endif
			sImWatcher.remove();
			sImWatcher = nil;
			sImWidget.active = false;
			sImWidget = nil;
		}
	}

	function beginIMCheck(context, widget)
	{
#ifdef GT4O_US_BETA
		enable = true;
#endif
	
		if (enable && main::network.isRTIMEInitialized())
		{
#ifdef GT4O_US_BETA
			widget.actor = main::menu::MChaseActor(widget);
#else
			endIMCheck();
#endif
			sImWidget = widget;
	
			sImWatcher = main::menu::MScriptWatcher(context, OnImWatcher);
			sImWatcher.interval = 30;
			sImWatcher.count = 0;
			sImWatcher.append();
		}
	}

	function openIM(context, id, name)
	{
		if (enable)
		{
			if (main::network.isRTIMEInitialized())
			{
				var widget = sImWidget;
				endIMCheck();
				ImRoot::open(context, id, name);
				beginIMCheck(context, widget);
			}
			else
#ifdef GT4O_US_BETA
				openConfirmDialog(context, DIALOG_OK, context.translate(ImRoot, "You cannot use IM.
				Disconnected now."));
#else
				openConfirmDialog(context, DIALOG_OK, context.translate(ImRoot, "You cannot use IM."));
#endif
		}
	}

#ifdef GT4O_US_BETA
	function isOpenIMNow()
	{
		return ImRoot::isOpenNow();
	}
	
	function forcedCloseIM(context)
	{
		ImRoot::forcedClose(context);
	}
	
	function openShell(context)
	{
		ShellRoot::open(context);
	}
	
	function openUpdateXmlRoot(context)
	{
		UpdateXmlRoot::open(context);
	}
	
	function openProfile(context, account_id, account_name)
	{
		ViewProfileRoot::open(context, account_id, account_name);
	}
	
	function isOpenProfileNow()
	{
		return ViewProfileRoot::isOpenNow();
	}

	function forcedCloseProfile(context)
	{
		ViewProfileRoot::forcedClose(context);
	}
#endif
}