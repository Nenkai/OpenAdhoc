module PROJECT::ROOT
{
    #include "../quick-share/icon.ad";
    static text_range = nil;
    static info_h = Composite_title_bar::ScrollWindow::clip::space::Info.h;
    var Velocity = 1.0 / 60.0;
    var Depth = 1.0;

    setFadeActor(ROOT::Composite_title_bar::ScrollWindow, Velocity, Depth);
    setFadeActor(ROOT::Composite_title_bar::map_image, Velocity, Depth);

    setMoveActor(ROOT::Composite_message::ImageFace, 0, -400, 0.1);

    module Subject
    {
        static l0b = "B-";
        static l0a = "A-";
        static lib = "IB-";
        static lia = "IA-";
        static l0s = "S-";
        static l0c = nil;
        static l0m = nil;
    }

    function displaying_next(license_code)
    {
        var cur = license_code.substr(3, 7).toInt();

        if (cur <= 0 || cur >= 16)
            return false;

        var unit = main::game.race_record.getUnit(license_code);

        if (unit != nil)
        {
            if (unit.result == "gold" || unit.result == "silver" || unit.result == "bronze")
                return true;
        }

        return false;
    }

    function available_next(license_code)
    {
        if (license_code.substr(2, 1) == "c")
            return true;

        var cur = license_code.substr(3, 7).toInt();

        if (cur <= 0 || cur >= 16)
            return true;

        if (cur == 15)
        {
            var head = license_code.substr(0, 3);

            for (var i = 1; i <= cur; i++)
            {
                var code = head + "%04d".format(i);
                var unit = main::game.race_record.getUnit(code);

                if (unit.result != "gold" && unit.result != "silver" && unit.result != "bronze")
                    return false;
            }
        }

        return true;
    }

    function onInitialize(context)
    {
		// Disables the demo scene view and the Demo Button
		// Config-Beta is responsible for NoLicenseDemo
        if (main.defined("NoLicenseDemo"))
        {
            SceneViewFace.visible = false;
            Buttons::Demo.visible = false;
        }

        var quick_work = main::menu::MQuickWork();
        
        if (quick_work.canLoadGhost == false)
            Buttons::LoadGhost.visible = false;
        else
            Buttons::LoadGhost.visible = true;

        if (quick_work.canLoadGhost == false && quick_work.canReplay != false)
            Buttons::SaveReplay.visible = true;
        else    
            Buttons::SaveReplay.visible = false;

        if (quick_work.canReplay == false)
            Buttons::Replay.visible = false;
        else
            Buttons::Replay.visible = true;

        if (quick_work.canSaveGhost == false)
            Buttons::SaveGhost.visible = false;
        else
            Buttons::SaveGhost.visible = true;

        if (quick_work.DisableLogger == true)
            Buttons::Logger.visible = false;

        var license_code = quick_work.raceLabel;

        Composite_title_bar::map_image.from_disk = true;
        Composite_title_bar::map_image.image_path = "/piece/license_map/" + license_code + ".img";
        Composite_title_bar::map_image.doInitialize(context);

        if (displaying_next(license_code))
            Buttons::Next.visible = true;
        else
            Buttons::Next.visible = false;

        var subject = Subject[license_code.substr(0, 3)];

        if (subject != nil)
            subject = subject + license_code.substr(3, 7).toInt().toString() + " : ";
        else
            subject = "";

        var title = context.translate(ROOT, "LicenseName", license_code);
        licence_title.text = subject + title;
        licence_title.adjustScale();

        Composite_title_bar::licence_name.text = context.translate(ROOT, "LicenseName", license_code.substr(0, 3) + "0000");
        
        var info_text = Composite_title_bar::ScrollWindow::clip::space::Info::label;
        info_text.text = context.translate(ROOT, license_code + "_info");

        var [w, h] = info_text.getTextSize();
        h *= 1.5;

        if (h > Composite_title_bar::ScrollWindow::clip::space::Info.h)
        {
            Composite_title_bar::ScrollWindow::vbar.visible = true;
            Composite_title_bar::ScrollWindow::clip::space::Info.h = h;
        }
        else
            Composite_title_bar::ScrollWindow::vbar.visible = false;

        Composite_title_bar::ScrollWindow.updateGeometry();

        text_range = info_text.h - Composite_title_bar::ScrollWindow::clip.h;
        setScrollActor(Composite_title_bar::ScrollWindow::clip::space);

        var course_label = quick_work.courseLabel;
        Composite_title_bar::circuit_name.text = context.translate(ROOT, "CourseName", course_label);
        Composite_time::besttime.text = main::menu::MUtility::GetTimeString(quick_work.BestTime);
        Composite_time::gold::goldtime.text = quick_work.goldTime;
        Composite_time::silver::silvertime.text = quick_work.silverTime;
        Composite_time::bronze::bronzetime.text = quick_work.bronzeTime;

        main::sound.startStreamEx("pcm", "default_quick", -1, 1, main::game.option.menu_bgm_volume);

        rewindFadeActor(Composite_title_bar::ScrollWindow);
        rewindFadeActor(Composite_title_bar::map_image);
        rewindMoveActor(Composite_message::ImageFace);  
        setIconPosition(context);
        setDefaultIconFocus(context);      
    }

    function onFinalize(context)
    {
        Composite_title_bar::ScrollWindow::clip::space::Info.h = info_h;
        text_range = nil;
    }

    function set_next_start_project()
    {
        main::game.next_menu_project = main::game.major_menu_project;
    }

    static icon_name_tbl = [
        "Start",
        "Demo",
        "Replay",
        "Ranking",
        "SaveGhost",
        "SaveReplay",
        "LoadGhost",
        "Logger",
        "Option",
        "Next",
        "Exit"
    ];

    function setIconPosition(context)
    {
        var max = icon_name_tbl.size;
        var num = 0;

        for (var i = 0; i < max; i++)
        {
            if (ROOT::Buttons[icon_name_tbl[i]].visible == true)
                num++;
        }

        var screen_w = 640;
        var icon_w = 60;
        var space = 4;

        if (num >= 10)
            space = 0;

        var st = ((screen_w - ((num * icon_w))) - (space * (num - 1))) / 2;
        var c = 0;
        
        for (var i = 0; i < max; i++)
        {
            if (ROOT::Buttons[icon_name_tbl[i]].visible == true)
            {
                ROOT::Buttons[icon_name_tbl[i]].x = st + ((icon_w + space) * c);
                c++;
            }
        }
    }

    function onCancel(context, event, item)
    {
        main::sound.play("cancel");
        main::sound.stopStream();
        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_EXIT";

        context.transition.panOut(context);
        context.transition.syncOut(context);

        set_next_start_project();

        context.finish();

        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        var box = Composite_title_bar::ScrollWindow::clip::space;

        var y = box.actor.destinationY;
        var range = text_range;
        var step = 24.0;

        switch (event.keysym)
        {
            case PS2_PAD_CTRL_L3_UP:
                y += step;
                if (y > 0.0)
                    y = 0.0;

                if (box.actor.destinationY != y)
                {
                    box.actor.destinationY = y;
                    main::sound.play("cursor");
                }
                return EVENTRESULT_FILTER;

            case PS2_PAD_CTRL_L3_DOWN:
                y -= step;
                if (y < -range)
                    y = -range;

                if (box.actor.destinationY != y)
                {
                    box.actor.destinationY = y;
                    main::sound.play("cursor");
                }
                return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }
}

module PROJECT::ROOT::Buttons::Start
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_START";

        quick_work.cursorPosition = getIconIndex(context, "Start");

        context.transition.panOut(context);
        context.transition.syncOut(context);

        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Demo
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_DEMONSTRATION";

        quick_work.cursorPosition = getIconIndex(context, "Demo");

        context.transition.panOut(context);
        context.transition.syncOut(context);

        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Replay
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_REPLAY";

        quick_work.cursorPosition = getIconIndex(context, "Replay");

        context.transition.panOut(context);
        context.transition.syncOut(context);

        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Ranking
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();

        quick_work.cursorPosition = getIconIndex(context, "Ranking");

        start_page(context, RankingRoot);
        
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Logger
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_LOGGER";

        quick_work.cursorPosition = getIconIndex(context, "Logger");

        context.transition.panOut(context);
        context.transition.syncOut(context);

        set_next_start_project();

        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::SaveGhost
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_SAVE_GHOST";

        quick_work.cursorPosition = getIconIndex(context, "SaveGhost");

        context.transition.panOut(context);
        context.transition.syncOut(context);

        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::SaveReplay
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_SAVE_REPLAY";

        quick_work.cursorPosition = getIconIndex(context, "SaveReplay");

        context.transition.panOut(context);
        context.transition.syncOut(context);

        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::LoadGhost
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_LOAD_GHOST";

        quick_work.cursorPosition = getIconIndex(context, "LoadGhost");

        context.transition.panOut(context);
        context.transition.syncOut(context);

        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Option
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_OPTION";

        quick_work.cursorPosition = getIconIndex(context, "Option");

        context.transition.panOut(context);
        context.transition.syncOut(context);

        set_next_start_project();

        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Next
{
    function onActivate(context)
    {
        var quick_work = main::menu::MQuickWork();
        var license_code = quick_work.raceLabel;

        if (!available_next(license_code))
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "you have to pass 15 licenses before"));

            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");
        main::sound.stopStream();

        quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_NEXT_RACE";
        quick_work.cursorPosition = getIconIndex(context, "Next");

        context.transition.panOut(context);
        context.transition.syncOut(context);
        
        set_next_start_project();

        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Exit
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_EXIT";

        context.transition.panOut(context);
        context.transition.syncOut(context);

        set_next_start_project();

        context.finish();

        return EVENTRESULT_FILTER;
    }
}