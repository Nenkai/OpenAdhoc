module ROOT
{
    attribute open_on_init = true

    module Function
    {
        #include "MusicFunction.ad"
    }

    attribute popup;

    attribute closed = false

    attribute genre;
    attribute order;
    attribute by;
    attribute play_list;
    attribute strategy;
    attribute play_all;

    attribute button_help_to_play;
    attribute button_help_to_stop;
    attribute button_help_to_play_l1;
    attribute button_help_to_stop_l1;

    attribute button_help;
    attribute saved_menu_se_volume;

    hidden.visible = false;

    class Strategy
    {    
    }

    class LibraryStrategy : Strategy
    {
        method getList(order, by, genre)
        {
            return MusicFileUtil::getLibraryList(order, by, genre);
        }

        method setting(context)
        {

        }

        method getLocalizeKey(name)
        {
            switch (name)
            {
                case "SearchSort":
                    return "SEARCH_SORT";

                case "PlayAll":
                    return "PLAY_ALL";

                case "BgmSetting":
                    return nil;

                case "Close":
                    return "CLOSE";    
            }
        }

        method getHeaderText(context, count)
        {
            var text = (ROOT.genre != nil) ? ROOT.genre : context.translate(ROOT, "MyHome", "ALL");

            return [text, count.toString(), false];
        }
    }

    class RaceBgmStrategy : Strategy
    {
        method getList(order, by, genre)
        {
            return MusicFileUtil::getRaceBgmList(order, by);
        }  

        function setDefaultPlaylist()
        {
            var id_list = [];

            foreach (var i in MusicFileUtil::getRaceBgmList())
                id_list.push(i.id);

            MusicFileUtil::setRaceBgmByList(id_list, false);

            var id_list = [];
            foreach (var i in MusicFileUtil::getDefaultRaceBgmList())
                id_list.push(i.id);

            MusicFileUtil::setRaceBgmByList(id_list, true);
        }

        method setting(context)
        {
            var option = main::GLOBAL_STATUS.user_profile.option;
            var type = SoundUtil::SystemBGMGroupToIndex("racing");

            var title = "RACE_BGM_SETTING";
            var category_default = "RACE_BGM";
            var category_custom = "USER_BGM_RACE";

            var initial_value = option.getSystemBGMSetting(type);
            var result = SettingBgmDialog.open(context, title, category_default, category_custom, initial_value[2], initial_value[0], setDefaultPlaylist);

            if (result[0] != nil)
            {
                option.setSystemBGMSetting(type, result[0], result[1]);
                option.apply();
            }

        }

        method getLocalizeKey(name)
        {
            switch (name)
            {
                case "SearchSort":
                    return "SORT";

                case "PlayAll":
                    return "PLAY_ALL";

                case "BgmSetting":
                    return "RACE_BGM_SETTING";

                case "Close":
                    return "CLOSE";    
            }
        }

        method getHeaderText(context, count)
        {
            return [context.translate(ROOT, "MyHome", "RACE_BGM"), count.toString(), false]
        }
    }

    class MenuBgmStrategy : Strategy
    {
        method getList(order, by, genre)
        {
            return MusicFileUtil::getMenuBgmList(order, by);
        }  

        function setDefaultPlaylist()
        {
            var id_list = [];
            foreach (var i in MusicFileUtil::getMenuBgmList())
                id_list.push(i.id);

            MusicFileUtil::setMenuBgmByList(id_list, false);

            var id_list = [];
            foreach (var i in MusicFileUtil::getDefaultMenuBgmList())
                id_list.push(i.id);

            MusicFileUtil::setMenuBgmByList(id_list, true);
        }

        method setting(context)
        {
            var option = main::GLOBAL_STATUS.user_profile.option;
            var type = SoundUtil::SystemBGMGroupToIndex("menu");

            var title = "MENU_BGM_SETTING";
            var category_default = "MENU_BGM";
            var category_custom = "USER_BGM_MENU";

            var initial_value = option.getSystemBGMSetting(type);
            var result = SettingBgmDialog.open(context, title, category_default, category_custom, initial_value[2], initial_value[0], setDefaultPlaylist);

            if (result[0] != nil)
            {
                option.setSystemBGMSetting(type, result[0], result[1]);
                option.apply();
            }
        }

        method getLocalizeKey(name)
        {
            switch (name)
            {
                case "SearchSort":
                    return "SORT";

                case "PlayAll":
                    return "PLAY_ALL";

                case "BgmSetting":
                    return "MENU_BGM_SETTING";

                case "Close":
                    return "CLOSE";    
            }
        }

        method getHeaderText(context, count)
        {
            return [context.translate(ROOT, "MyHome", "MENU_BGM"), count.toString(), false]
        }    
    }

    class SlideShowBgmStrategy : Strategy
    {
        method getList(order, by, genre)
        {
            return MusicFileUtil::getSlideShowBgmList(order, by);
        }  

        function setDefaultPlaylist()
        {
            var id_list = [];

            foreach (var i in MusicFileUtil::getSlideShowBgmList())
                id_list.push(i.id);

            MusicFileUtil::setSlideShowBgmByList(id_list, false);

            var id_list = [];
            foreach (var i in MusicFileUtil::getDefaultSlideShowBgmList())
                id_list.push(i.id);

            MusicFileUtil::setSlideShowBgmByList(id_list, true);
        }

        method setting(context)
        {
            var option = main::GLOBAL_STATUS.user_profile.option;
            var type = SoundUtil::SystemBGMGroupToIndex("slideshow");

            var title = "SLIDESHOW_BGM_SETTING";
            var category_default = "SLIDESHOW_BGM";
            var category_custom = "USER_BGM_SLIDESHOW";

            var initial_value = option.getSystemBGMSetting(type);
            var result = SettingBgmDialog.open(context, title, category_default, category_custom, initial_value[2], initial_value[0], setDefaultPlaylist);

            if (result[0] != nil)
            {
                option.setSystemBGMSetting(type, result[0], result[1]);
                option.apply();
            }
        }

        method getLocalizeKey(name)
        {
            switch (name)
            {
                case "SearchSort":
                    return "SORT";

                case "PlayAll":
                    return "PLAY_ALL";

                case "BgmSetting":
                    return "SLIDESHOW_BGM_SETTING";

                case "Close":
                    return "CLOSE";    
            }
        }

        method getHeaderText(context, count)
        {
            return [context.translate(ROOT, "MyHome", "SLIDESHOW_BGM"), count.toString(), false];
        }    
    }

    method open(context)
    {
        self.closed = false;

        self.popup = main::SequenceUtil::ModalPage(context, ROOT);
        self.popup.open();

        return true;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;
        ContextMain.event_mask = 5;
        ContextMain.disableInput();

        Popup::FadeActor.on_effect_end = function (context)
        {
            if (ROOT.popup != nil)
            {
                ROOT.popup.close();
                ROOT.popup = nil;
            }

            ContextMain.enableInput();
        }

        Popup::FadeActor.out = true;
    }

    method onInitialize(context)
    {
        initializeCommon(context);

        SoundUtil::BGMFadeout(3.0);

        self.genre = nil;
        self.order = "genre";
        self.by = "ASC";
        self.play_all = false;

        self.strategy = LibraryStrategy();
        Popup::Pane::Tab.setActive(true, false, false, false);

        Popup::Pane::Tab::HBox::Library.active = true;
        Popup::Pane::Title::HBox::BgmSetting.visible = false;

        var genre_list = [context.translate(ROOT, "MyHome", "ALL")];
        var list = MusicFileUtil::getGenreList();

        foreach (var genre in list)
            genre_list.push(genre);

        OptionMenuUtil::initialize(context, ROOT, Popup::Pane::Body::Filter::VBox::Search::OptionMenu,
        hidden::OptionMenuItem, genre_list);

        Popup::Pane::Body::Filter::VBox::Search::OptionMenu.setIndex(context, 0);

        Function::initialize(context);
        warpActors(Popup::Pane::Body::bg, self.open_on_init);

        self.saved_menu_se_volume = main::sound.menu_se_volume;

        return EVENTRESULT_FILTER;
    }

    method initializeCommon(context)
    {
        self.button_help_to_play = [
            [ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "MyHome", "BUTTON_HELP_PLAY")],
            ["Triangle", context.translate(ROOT, "MyHome", "BUTTON_HELP_MENU")],
            ["L1", context.translate(ROOT, "MyHome", "BUTTON_HELP_MULTI_SELECT")]
        ];

        self.button_help_to_stop = [
            [ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "MyHome", "BUTTON_HELP_STOP")],
            ["Triangle", context.translate(ROOT, "MyHome", "BUTTON_HELP_MENU")],
            ["L1", context.translate(ROOT, "MyHome", "BUTTON_HELP_MULTI_SELECT")]
        ];

        self.button_help_to_play_l1 = [
            [ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "MyHome", "BUTTON_HELP_SELECT")],
            ["Triangle", context.translate(ROOT, "MyHome", "BUTTON_HELP_MENU")],
            ["Square", context.translate(ROOT, "MyHome", "BUTTON_HELP_SELECT_UNSELECT_ALL")]
        ];

        self.button_help_to_stop_l1 = [
            [ButtonHelpGT5.getEnterButtonName(), context.translate(ROOT, "MyHome", "BUTTON_HELP_SELECT")],
            ["Triangle", context.translate(ROOT, "MyHome", "BUTTON_HELP_MENU")],
            ["Square", context.translate(ROOT, "MyHome", "BUTTON_HELP_SELECT_UNSELECT_ALL")]
        ];

        self.button_help = self.button_help_to_play;
        ButtonHelpGT5.set(context, self.button_help);
        ButtonHelpGT5.hide();

        var radiobox_list = [
            Popup::Pane::Body::Filter::VBox::Order::RadioBox,
            Popup::Pane::Body::Filter::VBox::By::RadioBox
        ];

        foreach (var radiobox in radiobox_list)
        {
            var radiobutton_list = [];

            for (var it = radiobox.VBox.first; it != nil; it = it.next)
                radiobutton_list.push([it.RadioButton, 0]);

            radiobox.setup(radiobutton_list, 0);
        }

        Popup::Pane::Title::HBox::SearchSort.active = self.open_on_init;
        warpActors(Popup::Pane::Body::Filter, self.open_on_init);

        Popup::Pane::Body::Filter.insensitive = !self.open_on_init;
        ROOT.setFocus(Popup::Pane::Title::HBox::Close);

    }

    method onFinalize(context)
    {
        self.play_list = nil;

        self.button_help_to_play = nil;
        self.button_help_to_stop = nil;
        self.button_help_to_play_l1 = nil;
        self.button_help_to_stop_l1 = nil;

        self.button_help = nil;

        Popup::Pane::Body::List.finalizeFinder(context);

        OptionMenuUtil::finalize(context, Popup::Pane::Body::Filter::VBox::Search::OptionMenu);
        var playing = SoundUtil::BGMIsPlaying();

        SoundUtil::BGMFadeout(3.0);
        Function::finalize(context);

        SoundUtil::MenuBGMCrossfadeGroup("menu", (playing) ? 3.0 : 0.0, 3.0);

        main::sound.menu_se_volume = self.saved_menu_se_volume;
        self.saved_menu_se_volume = nil;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        var result = ButtonHelpGT5.hideIf();

        if (result)
        {
            Popup::Pane::Body::List.multi_select = false;
            Popup::Pane::Body::List::updateStatusAll(context);
        }

        ROOT.setFocus(Popup::Pane::Title::HBox::Close);

        return EVENTRESULT_FILTER;
    }

    method initialize(context)
    {
        Popup::Pane::Body::List.finalizeFinder(context);
        Popup::Pane::Body::List.initializeFinder(context);
    }

    method enableButtonSE(e)
    {
        main::sound.menu_se_volume = e ? self.saved_menu_se_volume : 0.0;
    }

    module Popup::Pane
    {
        module Tab
        {
            method setActive(library, race_bgm, menu_bgm, slideshow_bgm)
            {
                var list = [
                    ["Library", library],
                    ["RaceBgm", race_bgm],
                    ["MenuBgm", menu_bgm],
                    ["SlideShowBgm", slideshow_bgm]
                ];

                foreach (|var name, var flag| in list)
                {
                    HBox[name].active = flag;
                    HBox[name].bg.visible = !flag;
                    HBox[name].bgA.visible = flag;
                }

                Title::HBox::BgmSetting.visible = race_bgm || menu_bgm || slideshow_bgm;

                var mode_bgm_setting = ROOT.strategy.getLocalizeKey("BgmSetting") != nil;

                startActors(Popup::Pane::Body::Filter::VBox::Search, !mode_bgm_setting);
                Popup::Pane::Body::Filter::VBox::Search.insensitive = mode_bgm_setting;
            }

            module HBox
            {
                module Library
                {
                    method onActivate(context)
                    {
                        if (!self.active)
                        {
                            main::sound.play("tab_switch");
                            ROOT.strategy = LibraryStrategy();
                        
                            setActive(true, false, false, false);
                            ROOT.initialize(context);
                        }
                    
                        return EVENTRESULT_FILTER;
                    }
                }
            
                module RaceBgm
                {
                    method onActivate(context)
                    {
                        if (!self.active)
                        {
                            main::sound.play("tab_switch");
                            ROOT.strategy = RaceBgmStrategy();
                        
                            setActive(false, true, false, false);
                            ROOT.initialize(context);
                        }
                    
                        return EVENTRESULT_FILTER;
                    }
                }
            
                module MenuBgm
                {
                    method onActivate(context)
                    {
                        if (!self.active)
                        {
                            main::sound.play("tab_switch");
                            ROOT.strategy = MenuBgmStrategy();
                        
                            setActive(false, false, true, false);
                            ROOT.initialize(context);
                        }
                    
                        return EVENTRESULT_FILTER;
                    }
                }
            
                module SlideShowBgm
                {
                    method onActivate(context)
                    {
                        if (!self.active)
                        {
                            main::sound.play("tab_switch");
                            ROOT.strategy = SlideShowBgmStrategy();
                        
                            setActive(false, false, false, true);
                            ROOT.initialize(context);
                        }
                    
                        return EVENTRESULT_FILTER;
                    }
                }    
            }
        }

        module Title::HBox
        {
            method onFocusEnter(context, event)
            {
                var w = event.widget;
                var localized_text = context.translate(ROOT, "MyHome", ROOT.strategy.getLocalizeKey(w.name));

                BalloonTip.set_value(context, w, localized_text, 0);

                return EVENTRESULT_FILTER;
            }

            method onFocusLeave(context)
            {
                BalloonTip.reset_value();

                return EVENTRESULT_FILTER;
            }

            module Close
            {
                method onActivate(context)
                {
                    main::sound.play("ok");
                    ROOT.close(context);
                    SoundUtil::InitializePlaylist();

                    return EVENTRESULT_FILTER;
                }

                method onCancel(context)
                {
                    main::sound.play("cancel");
                    ROOT.close(context);

                    return EVENTRESULT_FILTER;
                }
            }

            module SearchSort
            {
                attribute flag = true;

                method onActivate(context)
                {
                    main::sound.play("ok");
                
                    startActors(Popup::Pane::Body::Filter, self.flag);
                    startActors(Popup::Pane::Body::bg, self.flag);
                
                    Popup::Pane::Body::Filter.insensitive = self.flag;
                
                    self.flag = !self.flag;
                    self.active = self.flag;
                
                    return EVENTRESULT_FILTER;
                }
            }

            module PlayAll
            {
                method onActivate(context)
                {
                    main::sound.play("ok");

                    if (ROOT.play_all)
                        Function::stop(context);
                    else
                    {
                        var result = SettingPlayAllDialog.open(context);

                        if (result != nil)
                        {
                            |var repeat, var shuffle| = result;

                            var list = Array();
                            foreach (var p in ROOT.play_list)
                                list.push(p);

                            if (shuffle)
                                list.randomShuffle();

                            var success = Function::play(context, list, repeat, Popup::Pane::Body::List);
                            ROOT.play_all = success;
                            self.active = success;
                        }
                    }

                    return EVENTRESULT_FILTER;
                }    
            }

            module BgmSetting
            {
                method onActivate(context)
                {
                    main::sound.play("ok");
                    ROOT.strategy.setting(context);
                    ROOT.initialize(context);

                    return EVENTRESULT_FILTER
                }    
            }
        }

        module Body
        {
            module Filter::VBox
            {
                module Search::OptionMenu
                {
                    method onValueChanged(context)
                    {
                        self.pulldownValueChanged(context);
                        var selected_item = self.getItem();
                    
                        if (selected_item.label.text != ROOT.genre)
                        {
                            ROOT.genre = self.index == 0 ? nil : selected_item.label.text;
                            ROOT.initialize(context);
                        }
                    }
                }

                module Order::RadioBox
                {
                    method onActivate(context, event)
                    {
                        var order = event.widget.parent.name.downcase();
                    
                        if (ROOT.order != order)
                        {
                            ROOT.order = order;
                            ROOT.initialize(context);
                        }
                    
                        return EVENTRESULT_FILTER;
                    }    
                }

                module By::RadioBox
                {
                    method onActivate(context, event)
                    {
                        var by = event.widget.parent.name.upcase();
                    
                        if (ROOT.by != by)
                        {
                            ROOT.by = by;
                            ROOT.initialize(context);
                        }
                    
                        return EVENTRESULT_FILTER;
                    }    
                }
            }

            module List
            {
                attribute finder;
                attribute multi_select = false;
                attribute select_map;
                attribute select_all;

                function updateStatus(context, music, item_w)
                {
                    item_w.setInfo(music.genre, music.title, music.artist);
                
                    var playing = SoundUtil::BGMIsPlaying(music.code);
                    item_w.icon.visible = playing;
                    item_w.Play.active = playing;
                
                    item_w.type.slideshow.active = music.slideshow_bgm == 1;
                    item_w.type.race.active = music.race_bgm == 1;
                    item_w.type.menu.active = music.menu_bgm == 1;
                
                    item_w.check.visible = List.multi_select && List.select_map[music.id] != nil;
                }

                function updateButtonHelp(context, music)
                {
                    if (SoundUtil::BGMIsPlaying(music.code))
                        ROOT.button_help = (List.multi_select) ? ROOT.button_help_to_stop_l1 : ROOT.button_help_to_stop;
                    else
                        ROOT.button_help = (List.multi_select) ? ROOT.button_help_to_play_l1 : ROOT.button_help_to_play;
                
                    ButtonHelpGT5.set(context, ROOT.button_help);
                }

                function onInitItem(context, candidate_data, item_w, arg)
                {
                    var music = candidate_data.value_;
                    updateStatus(context, music, item_w);
                }

                function updateStatusAll2(context)
                {
                    if (List.multi_select)
                    {
                        List.multi_select = false;
                    
                        if (ROOT.button_help_to_stop_l1 == ROOT.button_help)
                            ROOT.button_help = ROOT.button_help_to_stop;                    
                        else if (ROOT.button_help_to_play_l1 == ROOT.button_help)
                            ROOT.button_help = ROOT.button_help_to_play;

                        ButtonHelpGT5.set(context, ROOT.button_help);
                    }
                
                    updateStatusAll(context);
                }

                function updateStatusAll2If(context)
                {
                    var state = context.getUpdateContext().getPadButtonState(0);
                    if ((state & 0x100) != 0x100)
                        updateStatusAll2(context);
                }

                function updateStatusAll(context)
                {
                    var count = List.finder.getItemCount(context);
                
                    for (var i = 0; i < count; ++i)
                    {
                        var item_w = List.finder.getItemWidget(i);
                        if (item_w == nil)
                            continue;       
                        
                        var candidate_data = List.finder.getItemData(context, i);
                        if (candidate_data == nil)
                            continue;
                        
                        var music = candidate_data.value_;
                        updateStatus(context, music, item_w);
                    }
                }

                function onActivateItem(context, folder_data, func_close, arg)
                {
                    var candidate_data = folder_data.getItemData();
                    var music = candidate_data.value_;
                
                    if (List.multi_select)
                    {
                        var focus_index = List.finder.getFocusIndex(context);
                        var item_w = List.finder.getItemWidget(focus_index);
                    
                        if (item_w == nil)
                            return;
                    
                        if (List.select_map[music.id] == nil)
                            List.select_map[music.id] = music;                    
                        else
                            List.select_map[music.id] = nil;
                    
                        List::updateStatus(context, music, item_w);
                    }
                
                    else
                    {
                        if (SoundUtil::BGMIsPlaying(music.code))
                            Function::stop(context);                    
                        else
                            Function::play(context, [music], false, Popup::Pane::Body::List);
                    }
                
                    updateButtonHelp(context, music);
                }

                function updateStatusAllIf(context)
                {
                    var state = context.getUpdateContext().getPadButtonState(0);
                    if ((state & 0x100) != 0x100)
                        return;
                
                    List.multi_select = true;
                    var selected = false;
                
                    foreach (|var key, var value| in List.select_map)
                    {
                        if (value != nil)
                        {
                            selected = true;
                            break;
                        }
                    }
                
                    if (!selected)
                        return;
                
                    updateStatusAll(context);
                }

                function onFocusEnter(context, candidate_data, item_w, arg)
                {
                    var music = candidate_data.value_;
                    item_w.Play.ImageFaceF.visible = true;
                    var result = ButtonHelpGT5.appearIf();
                
                    if (result)
                        updateStatusAllIf(context);
                
                    updateButtonHelp(context, music);
                }

                function onFocusLeave(context, candidate_data, item_w, arg)
                {
                    item_w.Play.ImageFaceF.visible = false;
                }

                method onPlayCallback(context, music, callback)
                {
                    if (self.finder == nil)
                        return;
                
                    var index = 0;
                    foreach (var m in ROOT.play_list)
                    {
                        if (m.code == music.code)
                        {
                            var item = self.finder.getItemWidget(index);
                            if (item != nil)
                            {
                                item.icon.visible = callback == Function::MusicPlayer::CALLBACK_BEGIN;
                                item.Play.active = callback == Function::MusicPlayer::CALLBACK_BEGIN;
                            }
                        }
                    
                        ++index;
                    }
                
                    if (callback == Function::MusicPlayer::CALLBACK_FINISH)
                    {
                        ROOT.play_all = false;
                        Popup::Pane::Title::HBox::PlayAll.active = false;
                    }
                
                    updateButtonHelp(context, music);
                    ROOT.enableButtonSE(!SoundUtil::BGMIsPlaying());
                }

                method initializeFinder(context)
                {
                    ROOT.button_help = ROOT.button_help_to_play;
                    ButtonHelpGT5.set(context, ROOT.button_help);
                
                    self.multi_select = false;
                    self.select_map = Map();
                    self.select_all = false;
                
                    var initial_data = makeInitialData(context);
                    self.finder = UIKitProject::FinderRoot.setCopy(context, self, initial_data, false);
                
                    ROOT.play_list = ROOT.strategy.getList(ROOT.order, ROOT.by, ROOT.genre);
                
                    Popup::Pane::Header.setText(context, ROOT.strategy.getHeaderText(context, ROOT.play_list.size));
                
                    Popup::Pane::Body::List::ImageFaceD.visible = ROOT.play_list.size == 0;
                    Popup::Pane::Body::List::TextFaceD.visible = ROOT.play_list.size == 0;
                
                    var candidates = UIKitProject::FinderRoot.makeCandidates(ROOT.play_list);
                    self.finder.replaceCurrentFolderCandidates(context, candidates, 0);
                }

                method makeInitialData(context)
                {
                    var Finder = UIKitProject::FinderRoot;
                    var candidates = Finder.makeCandidates(Array(0));
                
                    var initial_data = Finder.InitialData(candidates);
                
                    initial_data.view_type_ = Finder.ViewType::SCROLL_V;
                
                    initial_data.cb_init_item_ = onInitItem;
                    initial_data.cb_on_activate_ = onActivateItem;
                    initial_data.v_scrollbar_ = Scrollbar::VScrollbar;
                    initial_data.cb_focus_enter_ = onFocusEnter;
                    initial_data.cb_focus_leave_ = onFocusLeave;
                
                    initial_data.extended_item_ = hidden::ItemList;
                    initial_data.import_iconbox_parameter_ = hidden::IconBox;
                    initial_data.item_cache_ = false;
                
                    return initial_data;
                }

                method finalizeFinder(context)
                {
                    if (self.finder != nil)
                    {
                        self.removeChild(context, self.finder);
                        self.finder = nil;
                    }
                }

                function onFunctionCallback(context, data)
                {
                    |var func, var music, var args, var callback, var item_w| = data;
                
                    Function[func](context, music, args, callback, item_w);
                
                    if (func == "play1" || func == "stop")
                        updateButtonHelp(context, music);
                }

                function onNullCallback(context, data)
                {
                
                }

                method showContextMenu(context)
                {
                    var focus_index = self.finder.getFocusIndex(context);
                    var item_w = self.finder.getItemWidget(focus_index);
                
                    if (item_w == nil)
                        return
                
                    var candidate_data = self.finder.getItemData(context, focus_index);
                    var music = candidate_data.value_;
                
                    var on = context.translate(ROOT, "MyHome", "ON");
                    var off = context.translate(ROOT, "MyHome", "OFF");
                
                    var race_bgm_cascade = [
                        UIKitProject::ContextMenuPopup::Data(on, true, (music.race_bgm == 1) ? onNullCallback : onFunctionCallback, ["setRaceBgm", music, true, List::updateStatus, item_w]),
                        UIKitProject::ContextMenuPopup::Data(off, true, (music.race_bgm == 1) ? onFunctionCallback : onNullCallback, ["setRaceBgm", music, false, List::updateStatus, item_w])
                    ];
                    race_bgm_cascade[0].on = music.race_bgm == 1;
                    race_bgm_cascade[1].on = music.race_bgm == 0;
                    
                    var menu_bgm_cascade = [
                        UIKitProject::ContextMenuPopup::Data(on, true, (music.menu_bgm == 1) ? onNullCallback : onFunctionCallback, ["setMenuBgm", music, true, List::updateStatus, item_w]),
                        UIKitProject::ContextMenuPopup::Data(off, true, (music.menu_bgm == 1) ? onFunctionCallback : onNullCallback, ["setMenuBgm", music, false, List::updateStatus, item_w])
                    ];
                    menu_bgm_cascade[0].on = music.menu_bgm == 1;
                    menu_bgm_cascade[1].on = music.menu_bgm == 0;
                    
                    var slideshow_bgm_cascade = [
                        UIKitProject::ContextMenuPopup::Data(on, true, (music.slideshow_bgm == 1) ? onNullCallback : onFunctionCallback, ["setSlideShowBgm", music, true, List::updateStatus, item_w]),
                        UIKitProject::ContextMenuPopup::Data(off, true, (music.slideshow_bgm == 1) ? onFunctionCallback : onNullCallback, ["setSlideShowBgm", music, false, List::updateStatus, item_w])
                    ];
                    slideshow_bgm_cascade[0].on = music.slideshow_bgm == 1;
                    slideshow_bgm_cascade[1].on = music.slideshow_bgm == 0;
                    
                    var data_list = [];
                    if (item_w.Play.active)
                        data_list.push(UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "STOP"), true, onFunctionCallback, ["stop", music]));
                    else
                        data_list.push(UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "PLAY"), true, onFunctionCallback, ["play1", music, Popup::Pane::Body::List]));
                
                    data_list += [
                        nil, // Separator
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "RACE_BGM"), true, nil, nil, race_bgm_cascade),
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "MENU_BGM"), true, nil, nil, menu_bgm_cascade),
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "SLIDESHOW_BGM"), true, nil, nil, slideshow_bgm_cascade),
                        nil, // Separator
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "CANCEL"), true, onNullCallback, nil),
                    ];
                
                
                    var title = nil;
                    var x = item_w.sx + (item_w.w * item_w.cursor_align_x);
                    var y = item_w.sy + (item_w.h * item_w.cursor_align_y);

                    UIKitProject::ContextMenuPopup.open(context, x, y, title, data_list);
                }

                method showContextMenuMultiSelect(context)
                {
                    var focus_index = self.finder.getFocusIndex(context);
                    var item_w = self.finder.getItemWidget(focus_index);
                
                    if (item_w == nil)
                       return;
                
                    if (self.select_map == nil || self.select_map.size == 0)
                        return;
                
                    var music_list = Array();
                    foreach (|var key, var music| in self.select_map)
                    {
                        if (music == nil)
                            continue;
                        
                        music_list.push(music);
                    }

                    var on = context.translate(ROOT, "MyHome", "ON");
                    var off = context.translate(ROOT, "MyHome", "OFF");
                
                    var race_bgm_cascade = [
                        UIKitProject::ContextMenuPopup::Data(on, true, onFunctionCallback, ["setRaceBgmSelected", music_list, true, List::updateStatusAll2]),
                        UIKitProject::ContextMenuPopup::Data(off, true, onFunctionCallback, ["setRaceBgmSelected", music_list, false, List::updateStatusAll2])
                    ];
            
                    var menu_bgm_cascade = [
                        UIKitProject::ContextMenuPopup::Data(on, true, onFunctionCallback, ["setMenuBgmSelected", music_list, true, List::updateStatusAll2]),
                        UIKitProject::ContextMenuPopup::Data(off, true, onFunctionCallback, ["setMenuBgmSelected", music_list, false, List::updateStatusAll2, item_w])
                    ];
                    
                    var slideshow_bgm_cascade = [
                        UIKitProject::ContextMenuPopup::Data(on, true, onFunctionCallback, ["setSlideShowBgmSelected", music_list, true, List::updateStatusAll2]),
                        UIKitProject::ContextMenuPopup::Data(off, true, onFunctionCallback,["setSlideShowBgmSelected", music_list, false, List::updateStatusAll2])
                    ];
                    
                    var data_list = [
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "RACE_BGM_SELECTED"), true, nil, nil, race_bgm_cascade),
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "MENU_BGM_SELECTED"), true, nil, nil, menu_bgm_cascade),
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "SLIDESHOW_BGM_SELECTED"), true, nil, nil, slideshow_bgm_cascade), 
                        nil, // Separator 
                        UIKitProject::ContextMenuPopup::Data(context.translate(ROOT, "MyHome", "CANCEL"), true, List::updateStatusAll2If, nil),
                    ];
                    
                    var title = nil;
                    var x = item_w.sx + (item_w.w * item_w.cursor_align_x);
                    var y = item_w.sy + (item_w.h * item_w.cursor_align_y);
                    
                    var result = UIKitProject::ContextMenuPopup.open(context, x, y, title, data_list);
                    
                    if (!result)
                        List::updateStatusAll2If(context);
                }

                method toggleSelect(context)
                {
                    if (self.select_all)
                        self.select_map = Map();
                    else
                    {
                        var count = self.finder.getItemCount(context);
                        for (var i = 0; i < count; ++i)
                        {
                            var candidate_data = self.finder.getItemData(context, i);
                            if (candidate_data == nil)
                                continue;
                            
                            var music = candidate_data.value_;
                            self.select_map[music.id] = music;
                        }
                    }
                
                    self.select_all = !self.select_all;
                    updateStatusAll(context);
                }

                method onKeyPress(context, event)
                {
                    if (ROOT.closed)
                        return EVENTRESULT_CONTINUE;
                    else if (event.keysym == CELL_PAD_CTRL_L1)
                    {
                        self.multi_select = true;
                    
                        if (ROOT.button_help == ROOT.button_help_to_stop)
                            ROOT.button_help = ROOT.button_help_to_stop_l1;                    
                        else if (ROOT.button_help == ROOT.button_help_to_play)
                            ROOT.button_help = ROOT.button_help_to_play_l1;
                    
                        ButtonHelpGT5.set(context, ROOT.button_help);
                        updateStatusAll(context);
                    }
                    else if (event.keysym == CELL_PAD_CTRL_L3_LEFT)
                    {
                        ButtonHelpGT5.hide();
                        self.multi_select = false;
                        updateStatusAll(context);
                    
                        return EVENTRESULT_CONTINUE;
                    }
                    else if (event.keysym == CELL_PAD_CTRL_TRIANGLE)
                    {
                        main::sound.play("context_menu_op");
                    
                        if (self.multi_select)
                            showContextMenuMultiSelect(context);
                        else
                            showContextMenu(context);
                    
                        return EVENTRESULT_FILTER;
                    }
                    else if (event.keysym == CELL_PAD_CTRL_SQUARE)
                    {
                        if (self.multi_select)
                            toggleSelect(context);
                    
                        return EVENTRESULT_FILTER;
                    }
                
                    return EVENTRESULT_CONTINUE;
                }

                method onKeyRelease(context, event)
                {
                    if (event.keysym == CELL_PAD_CTRL_L1)
                        updateStatusAll2(context);
                
                    return EVENTRESULT_CONTINUE;
                }
            }
        }
    }
}