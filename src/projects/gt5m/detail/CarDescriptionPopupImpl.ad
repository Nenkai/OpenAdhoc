//---------------------------------------------------------------------------------------
// CarDescriptionPopupImpl.ad
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module CarDescriptionPopup
{
    attribute cp = nil;
    attribute popup = nil;
    attribute closing = nil;
    attribute caller_root = nil;

    method open(context, cp)
    {
        self.cp = cp;
        self.closing = false;
        self.caller_root = context.getRootWindow();
        SequenceUtil::setupTransition(context, CursorProject::ColorTransition);
        context.pageOutRootTransition();
        context.syncOutRootTransition();
        context.pushPage(CarDescriptionPopup);
        context.pageInRootTransition();
        context.getUpdateContext().enterEventLoop(&self.popup);
    }

    method onInitialize(context)
    {
        setCursor(context, "wait");

        BalloonTip.initialize(context);

        var car_code = self.cp.getCarCode();

        CarName.text = main::gtengine::MSpecDB::getCarShortName(car_code);

        var drive_train = main::gtengine::MSpecDB::getCarDriveTrain(car_code);
        var ps = main::gtengine::MSpecDB::getCarCatalogPs(car_code, false);
        var tq = main::gtengine::MSpecDB::getCarCatalogTq(car_code, false);
        var ps_rpm = main::gtengine::MSpecDB::getCarCatalogPsRpm(car_code, false);
        var tq_rpm = main::gtengine::MSpecDB::getCarCatalogTqRpm(car_code, false);
        var mass = main::gtengine::MSpecDB::getCarCatalogMs(car_code, true);
        var length = main::gtengine::MSpecDB::getCarCatalogLength(car_code, true);
        var width = main::gtengine::MSpecDB::getCarCatalogWidth(car_code, true);
        var height = main::gtengine::MSpecDB::getCarCatalogHeight(car_code, true);
        var displacement = main::gtengine::MSpecDB::getCarCatalogDisplacement(car_code, false);

        ps = "%s %s".format(ps, context.translate(CarDescriptionPopup, "Unit", main::pdiext::MUnit::GetUnitKeywordOfPower()));
        tq = "%s %s".format(tq, context.translate(CarDescriptionPopup, "Unit", main::pdiext::MUnit::GetUnitKeywordOfTorque()));
        ps_rpm = "%s %s".format(ps_rpm, context.translate(CarDescriptionPopup, "Unit", "RPM"));
        tq_rpm = "%s %s".format(tq_rpm, context.translate(CarDescriptionPopup, "Unit", "RPM"));
        displacement = "%s %s".format(displacement, context.translate(CarDescriptionPopup, "Unit", "DISPLACEMENT_CC"));

        drive_train = context.translate(CarDescriptionPopup, "DriveTrainName", drive_train);

        var psrpm_fmt = (ps == "---" || ps_rpm == "---") ? "---" : "%{ps} / %{ps_rpm}";
        var tqrpm_fmt = (tq == "---" || tq_rpm == "---") ? "---" : "%{tq} / %{tq_rpm}";

        Left::Spec0::TextFaceValue.text = psrpm_fmt;

        Left::Spec1::TextFaceValue.text = tqrpm_fmt;

        Left::Spec2::TextFaceValue0.text = drive_train;
        Left::Spec2::TextFaceValue1.text = mass;

        Left::Spec3::TextFaceValue.text = "%{length} x %{width} x %{height}";

        Left::Spec4::TextFaceValue0.text = displacement;
        var color_fmt = context.translate(CarDescriptionPopup, "CarSpec", "BODY_COLOR_ALL");
        Left::Spec4::TextFaceValue1.text = color_fmt.build(main::gtengine::MSpecDB::getCarVariation(car_code));

        Right::Description::ScrollClip.scroll_mode = 2;
        var adj = main::menu::MAdjustment();
        Right::Description::ScrollClip.v_adjustment = adj;
        Right::Description::ScrollBar.adjustment = adj;

        Right::Description::ScrollClip.space.y = 0.0;
        Right::Description::ScrollClip.manual_target_y = 0.0;

        var rtext = main::pdistd::MRText();
        rtext.load("/description/gt5m/%s.rt2".format(main::pdistd::MLocale::getLanguage()));
        var car_label = self.cp.getCarLabel();
        var car_description = rtext.get("CarDescription", car_label);
        rtext.unload();
        Right::Description::ScrollClip::space::TextFace.text = main::pdistd::TextConv(car_description);

        CarDescriptionPopup.setFocus(Exit);

        if (self.caller_root != nil)
            self.caller_root.visible = false;

        setCursor(context, "default");


        return EVENTRESULT_FILTER;
    }

    method onFinalize(context)
    {
        if (self.caller_root != nil)
            self.caller_root.visible = true;

        self.cp = nil;
        self.closing = nil;
        self.caller_root = nil;

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        if (!self.closing)
        {
            main::sound.play("cancel");
            CarDescriptionPopup.close(context);
        }

        return EVENTRESULT_FILTER;
    }

    method close(context)
    {
        if (self.popup != nil)
        {
            SequenceUtil::setupTransition(context, CursorProject::ColorTransition);
            context.pageOutRootTransition();
            context.syncOutRootTransition();
            context.closePage(CarDescriptionPopup);
            context.pageInRootTransition();
            context.getUpdateContext().leaveEventLoop(self.popup);
            self.popup = nil;
        }
    }

    method onKeyPress(context, event)
    {
        var line_height = Right::Description::ScrollClip::space::TextFace.line_height;
        var status = EVENTRESULT_CONTINUE;
        if (event.keysym == PSP_PAD_CTRL_L3_UP)
        {
            if (Right::Description::ScrollClip.manualTargetIncY(line_height))
                status = EVENTRESULT_STOP;
        }

        if (event.keysym == PSP_PAD_CTRL_L3_DOWN)
        {
            if (Right::Description::ScrollClip.manualTargetIncY(-line_height))
                status = EVENTRESULT_STOP;
        }

        return status;
    }

    module Exit
    {
        attribute balloon_text = nil;

        method onInitialize(context)
        {
            self.balloon_text = context.translate(CarDescriptionPopup, "Arcade", "close");
            return EVENTRESULT_FILTER;
        }

        method onFocusEnter(context)
        {
            if (self.balloon_text != nil)
                BalloonTip.set_value(context, self, self.balloon_text, self.h * 0.5);

            return EVENTRESULT_FILTER;
        }

        method onFocusLeave(context)
        {
            BalloonTip.reset_value();
            return EVENTRESULT_FILTER;
        }

        method onActivate(context)
        {
            CarDescriptionPopup.onCancel(context);
            return EVENTRESULT_FILTER;
        }
    }
}