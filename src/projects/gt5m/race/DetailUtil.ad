//---------------------------------------------------------------------------------------
// DetailUtil.ad (standalone script)
//
//
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module DetailUtil
{
    function showCourseDetail(context)
    {
        var course_code = main::GlobalStatus::game_context.course;

        var data = DetailProject::CourseDetailPopup::Data();
        data.course_id = gSequenceCondition.course_id;
        data.course_logo = gSequenceCondition.course_logo;
        data.course_label = main::gtengine::MSpecDB::getCourseLabel(course_code);
        data.category = gSequenceCondition.course_category;
        data.length = gSequenceCondition.course_length;
        data.elevation = gSequenceCondition.course_elevation;
        data.has_reverse = "false" != gSequenceCondition.course_has_reverse;
        data.driving_line = main::GlobalStatus::game_context.driving_line;
        data.can_change_course = false;
        data.drift_type = main::GlobalStatus::game_context.drift_type;
        if (data.course_label.beginWith("r_"))
        {
            var sr_r_rank = gSequenceCondition.game_status.user_profile.record.getBoardSR(course_code);
            data.r_rank = sr_r_rank.rank;

            data.rank = 0;
        }
        else
        {
            var sr_rank = gSequenceCondition.game_status.user_profile.record.getBoardSR(course_code);
            data.rank = sr_rank.rank;

            data.r_rank = 0;
        }

        var result = DetailProject::CourseDetailPopup.open(context, data);
        if (result["result"])
        {
            var driving_line = result["driving_line"];
            main::GlobalStatus::game_context.driving_line = driving_line;

            var drift_type = result["drift_type"];
            main::GlobalStatus::game_context.drift_type = drift_type;

            if (main::GlobalStatus::game_context.game_mode == main::gtengine::GameMode::SINGLE_RACE ||
                main::GlobalStatus::game_context.game_mode == -1)
            {
                main::GlobalStatus::game_context.race_difficulty = result["race_difficulty"];
            }

            var rp = main::RaceOperator.race_parameter;
            rp.endless = drift_type;
            main::RaceOperator.race_parameter = rp;
        }

        return result["result"];
    }

    function showCarDetail(context, can_change_power, can_change_weight)
    {
        var option = gSequenceCondition.game_status.user_profile.option;

        var cp = getPlayerCar();
        var dp = getPlayerDriver();
        var is_favorite = gSequenceCondition.game_status.user_profile.garage.hasFavorite(cp.getCarCode(), cp.color);
        var is_dirt = main::gtengine::MSpecDB::isDirt(main::GlobalStatus::game_context.course);

        var data = DetailProject::CarDetailPopup::Data();
        data.cp = cp;
        data.dp = dp;
        data.show_info = false;
        data.is_favorite = is_favorite;
        data.can_change_power = can_change_power;
        data.can_change_weight = can_change_weight;
        data.can_change_asm = !is_dirt;

        if (main::GlobalStatus::game_context.game_mode == main::gtengine::GameMode::SINGLE_RACE)
            data.can_change_tire = false;
        else
            data.can_change_tire = true;
        
        var result = DetailProject::CarDetailPopup.open(context, data);
        if (result)
        {
            main::GlobalStatus::game_context.setCar(cp);
            main::GlobalStatus::game_context.manual = dp.manual;
            if (!is_dirt)
                main::GlobalStatus::game_context.assist_asm = dp.assist_asm;

            main::GlobalStatus::game_context.assist_tcs = cp.quicktune_tcs;
            main::GlobalStatus::game_context.physics_pro = dp.physics_pro;
            option.active_steering = dp.active_steering;

            setPlayerCar(cp);
            setPlayerDriver(dp);

            if (is_favorite)
                gSequenceCondition.game_status.user_profile.garage.updateParamForFavorite(cp);
        }

        return result;
    }

    function createQuickInfo(context, root, parent, title, list)
    {
        var board = Template::QuickBoard.doCopy(context);
        board.visible = false;
        parent.appendChild(context, board);

        var listbox = board.Body2;
        listbox.adjustment = main::menu::MAdjustment();
        board.VScrollbar.adjustment = listbox.adjustment;

        board.Body.visible = false;

        board.title.text = title;

        listbox.setItemCount(list.size);
        listbox.setItemTemplate(context, Template::QuickInfoItem);

        for (var i = 0; i < list.size; ++i)
        {
            var item = listbox.getItemWidget(i, context);
            if (list[i]["translated"] == nil)
                item.Label.TextFace.text = context.translate(root, "TrialSetting", list[i]["label"]);
            else
                item.Label.TextFace.text = list[i]["label"];

            item.Value.TextFace.text = list[i]["value"];
            var even = 0 == (i % 2);
            item.Label.ColorFace0.visible = !even;
            item.Label.ColorFace1.visible = even;
            item.Value.ColorFace0.visible = !even;
            item.Value.ColorFace1.visible = even;

            if (i == 0 && list.size < 6)
                listbox.h = item.h * list.size;
        }

        board.visible = true;
        ActorUtil::ResetInterpolators(board, true, true);
    }

    function createQuickCourseInfo(context, root, parent)
    {
        var course_code = main::GlobalStatus::game_context.course;

        var course_label = main::gtengine::MSpecDB::getCourseLabel(course_code);
        var driving_line = main::GlobalStatus::game_context.driving_line;
        var rank = main::GlobalStatus::game_context.race_difficulty;
        var rank_table = ["RANK_D","RANK_C","RANK_B","RANK_A","RANK_S"];

        var list = [
            [ "label" : "LAYOUT",
              "value" : context.translate(root, "TrialSetting", course_label.beginWith("r_") ? "LAYOUT_REVERSE" : "LAYOUT_NORMAL") ]
        ];

        if (main::gtengine::GameMode::SINGLE_RACE == main::GlobalStatus::game_context.game_mode)
        {
            list.push(
                [ "label" : "DIFFICULTY",
                  "value" : context.translate(root, "TrialSetting", rank_table[rank]) ]
            );
        }
        list.push(
            [ "label" : "DRIVING_LINE",
              "value" : context.translate(root, "TrialSetting", driving_line == 0 ? "OFF" : "ON") ]
        );

        if (main::GlobalStatus::game_context.game_mode == main::gtengine::GameMode::DRIFT_ATTACK)
        {
            list.push(
                [ "label" : "DRIFT_TYPE",
                  "value" : context.translate(root, "TrialSetting", main::RaceOperator.race_parameter.endless == 0 ? "SECTION" : "FULL_LAP") ]
            );
        }

        if (course_label.beginWith("r_"))
            course_label = course_label.substr(2);

        var title = context.translate(ROOT, "CourseName", course_label);
        createQuickInfo(context, root, parent, title, list);
    }

    function updateQuickCourseInfo(context, root, listbox)
    {
        var index = main::gtengine::GameMode::SINGLE_RACE == main::GlobalStatus::game_context.game_mode ? 2 : 1;
        var item = listbox.getItemWidget(index, context);
        var driving_line = main::GlobalStatus::game_context.driving_line;
        item.Value.TextFace.text = context.translate(root, "TrialSetting", driving_line == 0 ? "OFF" : "ON");

        var rank = main::GlobalStatus::game_context.race_difficulty;
        var rank_table = ["RANK_D","RANK_C","RANK_B","RANK_A","RANK_S"];

        if (main::GlobalStatus::game_context.game_mode == main::gtengine::GameMode::SINGLE_RACE)
        {
            var item1 = listbox.getItemWidget(1, context);
            item1.Value.TextFace.text = context.translate(root, "TrialSetting", rank_table[rank]);
        }

        if (main::GlobalStatus::game_context.game_mode == main::gtengine::GameMode::DRIFT_ATTACK)
        {
            var item2 = listbox.getItemWidget(2, context);
            item2.Value.TextFace.text = context.translate(root, "TrialSetting", main::RaceOperator.race_parameter.endless == 0 ? "SECTION" : "FULL_LAP");
        }
    }

    function getQuickCarInfoValues(context, root)
    {
        var cp = getPlayerCar();
        var dp = getPlayerDriver();
        var active_steering_table = ["OFF", "ACTIVE_STEERING_WEAK", "ACTIVE_STEERING_STRONG"];

        |var tire_f, var tire_r| = cp.getTireCategories();

        var dirt_tire_limited = false;
        var snow_tire_limited = false;

        var dirt_disable_car = main::gtengine::MSpecDB::checkGenericFlag("dirt_disable", cp.getCarCode());

        if (!dirt_disable_car)
        {
            var course = main::GlobalStatus::game_context.course;
            var condition_code = main::gtengine::MSpecDB::getCourseCondition(course);
            dirt_tire_limited = condition_code == main::gtengine::CourseCondition::DIRT;
            snow_tire_limited = condition_code == main::gtengine::CourseCondition::SNOW;
        }

        var tires;
        if (dirt_tire_limited)
        {
            tires = ["type_short_109"];
        }
        else if (snow_tire_limited)
        {
            tires = ["type_short_110"];
        }
        else
        {
            var tire_category = main::TireUtil::CategoryTarmac;
            var tire_range = main::TireUtil::getIndexRangeFromCategory(tire_category);
            var tire_num = tire_range[1] - tire_range[0] + 1;

            tires = Array(tire_num);
            for (var i = 0; i < tire_num; i++)
                tires[i] = "type_short_%03d".format(tire_range[0] + i);
        }

        var list =
            [context.translate(root, "TrialSetting", dp.manual == 0 ? "AUTOMATIC" : "MANUAL"),
             cp.quicktune_tcs == 0 ? context.translate(root, "TrialSetting", "OFF") : cp.quicktune_tcs,
             context.translate(root, "TrialSetting", dp.assist_asm == 0 ? "OFF" : "ON"),
             context.translate(root, "TrialSetting", active_steering_table[dp.active_steering]),
             context.translate(root, "TrialSetting", dp.physics_pro == 0 ? "PhysicsNormal" : "PhysicsPro"),
             "%s / %s".format(context.translate(root, "TireName", tires[main::TireUtil::convTireIndexToMenuIndex(tire_f)]),
                              context.translate(root, "TireName", tires[main::TireUtil::convTireIndexToMenuIndex(tire_r)]))];

        return list;
    }

    function createQuickCarInfo(context, root, parent)
    {
        var tire_label = "%s / %s".format(context.translate(root, "TrialSetting", "TireFront"),
                                          context.translate(root, "TrialSetting", "TireRear"));

        var values = getQuickCarInfoValues(context, root);

        var list = [[
                "label" : "Transmission",
                "value" : values[0]
            ],
            [
                "label" : "TCS_SHORT",
                "value" : values[1]
            ],
            [
                "label" : "ASM_SHORT",
                "value" : values[2]
            ],
            [
                "label" : "ActiveSteering",
                "value" : values[3]
            ],
            [
                "label" : "CarPhysics",
                "value" : values[4]
            ],
            [
                "label" : tire_label,
                "value" : values[5],
                "translated" : true
            ]
        ];

        var cp = getPlayerCar();
        var title = main::gtengine::MSpecDB::getCarShortName(cp.getCarCode());
        createQuickInfo(context, root, parent, title, list);
    }

    function updateQuickCarInfo(context, root, listbox)
    {
        var values = getQuickCarInfoValues(context, root);
        for (var i = 0; i < values.size; ++i)
        {
            var item = listbox.getItemWidget(i, context);
            item.Value.TextFace.text = values[i];
        }
    }
}