








// !!!!!!!!!!!!!!!!!!!!!!!!!!
// THIS SCRIPT IS UNFINISHED!
// !!!!!!!!!!!!!!!!!!!!!!!!!!

#define CREATE_MENUITEM(type, name, desc, on_init, update_func, activate_func, keypress_func, arg) \
    MenuItem(MenuItemTEXT, name, "%{name}%{desc}", on_init, update_func, activate_func, keypress_func, arg)

#define CREATE_SELECT(attr, attr_name, desc, expr) \
    RunviewerUtil::CreateSelect(attr, attr_name, "%{attr_name}%{desc}", expr)
        
#define CREATE_TOGGLE_NOYES(attr, attr_name, desc) \
    RunviewerUtil::CreateToggle(attr, attr_name, "%{attr_name}%{desc}", noyes_list)

#define CREATE_SLIDER(attr, attr_name, desc, min, max, zero_text, unit_name) \
    RunviewerUtil::CreateSlider(attr, attr_name, "%{attr_name}%{desc}", [min, max], zero_text, unit_name)

#define CREATE_SLIDER_WITH_STEP(attr, attr_name, desc, min, max, zero_text, unit_name, decide_cb, arg, step, step_thr) \
    RunviewerUtil::CreateSlider(attr, attr_name, "%{attr_name}%{desc}", [min, max], zero_text, unit_name, decide_cb, arg, step, step_thr)

#define CREATE_BOOST_SLIDER(attr, attr_name, desc, min, max, zero_text, unit_name, decide_cb, arg_boost_index, arg_rp) \
    RunviewerUtil::CreateSlider(attr, attr_name, desc, [min, max], zero_text, unit_name, decide_cb, [arg_boost_index, arg_rp])

#define CREATE_SLIDER2(attr, attr_name, name_desc, desc, min, max, zero_text, unit_name) \
    RunviewerUtil::CreateSlider(attr, "%{attr_name}%{name_desc}", "%{attr_name}%{desc}", [min, max], zero_text, unit_name)

#define CREATE_SLIDER_WITH_CALLBACK(attr, attr_name, name_desc, desc, min, max, unit_name, cb, cb_arg) \
    RunviewerUtil::CreateSlider(attr, "%{attr_name}%{name_desc}", "%{attr_name}%{desc}", [min, max], nil, unit_name, cb, cb_arg)

#define CREATE_INPUT(attr, attr_name, desc) \
    RunviewerUtil::CreateInputText(attr, attr_name, "%{attr_name}%{desc}")

#define CREATE_ENUM_ELEM(value, name, desc) \
    [value, "%{name} %{desc}"]

module GameMaker
{
    import RunViewerProject::TopRoot::*;
    function candidates_compare(a, b)
    {
        return a[0] < b[0];
    }

    function getCandidates(mdl)
    {
        var result = [];
        mdl.find_static(function(pair) 
        { 
            result.push([pair[1], pair[0]]);
            return true;
        });

        result.sort(candidates_compare);
        return result;
    }

    static sTitle;
    static sPrevIndex;

    function on_play_style(context, index, menuitem, item, arg)
    {
        var event = arg;
        var play_style = event.play_style;

        if (play_style.window_num == nil)
            play_style.window_num = 1;
        
        var menuitems = [
            blue,
            CREATE_SELECT(&play_style.bspec_type, "bspec_type", " を変更します。", getCandidates(gtengine::BSpecType)),
            CREATE_SELECT(&play_style.play_type, "play_type", " を変更します。", getCandidates(gtengine::PlayType)),
            CREATE_TOGGLE_NOYES(&play_style.no_quickmenu, "no_quickmenu", " を変更します。"),
            CREATE_TOGGLE_NOYES(&play_style.no_instant_replay, "no_instant_replay", " を変更します。"),
            CREATE_TOGGLE_NOYES(&play_style.replay_record_enable, "replay_record_enable", " を変更します。"),
            CREATE_SLIDER(&play_style.window_num, "window_num", " を変更します。", 1, 4, nil, " windows")
        ];
        TopRoot.open_menu(context, menuitem.label, menuitems, index, 0);
    }

    module CarSelect
    {
        function on_update_select_car(context, index, menuitem, item)
        {
            var car = menuitem.arg;
            if (car.code != gtengine::MSpecDB::NO_CODE)
                item["value"].text = gtengine::MSpecDB::getCarLabel(car.code) + "  (" + gtengine::MSpecDB::getCarName(car.code) + ")";
            else
                item["value"].text = "";
        }

        function on_select_car(context, index, menuitem, item, arg)
        {
            var car_list = CarMenu::get_all_cars(context);
            var menuitems = Array(car_list.size);
            for (var i = 0; i < car_list.size; i++)
            {
                var menuitem = MenuItem(MenuItemTEXT, car_list[i], "", nil, on_update_car_item, on_car_selected, nil, arg);
                menuitem.base_color = ((i / 8) % 2 == 0) ? gray : cyan;
                menuitems[i] = menuitem;
            }

            var focus_index = 0;
            var car = arg;
            if (car.code != gtengine::MSpecDB::NO_CODE)
            {
                var car_label = gtengine::MSpecDB::getCarLabel(car.code);
                focus_index = RunviewerUtil::SearchFocusIndex(car_label, menuitems);
            }
            TopRoot.open_menu(context, menuitem.label, menuitems, index, focus_index);
        }

        function on_car_selected(context, index, menuitem, item, arg)
        {
            var car_label = menuitem.label;
            var car_code = gtengine::MSpecDB::getCarCode(car_label);
            var primary_color =  gtengine::MSpecDB::getCarVariationFlag(car_code, 1);
            if (primary_color < 0)
                primary_color = 0;
            var car = arg;
            car.code = car_code;
            car.color = primary_color;
            close_menu(context);
        }

        function on_update_car_item(context, index, menuitem, item)
        {
            var car = menuitem.arg;
            var label = menuitem.label;
            if (car.code != gtengine::MSpecDB::NO_CODE)
            {
                if (gtengine::MSpecDB::getCarLabel(car.code) == label)
                    item["label"].text_color = main::menu::MColorObject(1.0, 1.0, 0.0);
            }
            item["value"].text = gtengine::MSpecDB::getCarName(label);
            item["value"].text_color = item["label"].text_color;
        }

        function on_update_select_color(context, index, menuitem, item)
        {
            var car = menuitem.arg;
            if (car.code == gtengine::MSpecDB::NO_CODE)
                return;
            
            item["value"].text = gtengine::MSpecDB::getCarColorName(car.code, car.color);

            item.ChipF.ColorChipFace.setCarColor(car.code, car.color);
            item.ChipF.visible = true;
        }

        function on_color_selected(context, index, menuitem, item, arg)
        {
            var car = arg;
            car.color = menuitem.label;
            close_menu(context);
        }

        function on_update_color_item(context, index, menuitem, item)
        {
            var car = menuitem.arg;
            if (car.color == nil)
                return;
            
            var label = menuitem.label;
            if (car.color == label)
                item["label"].text_color = main::menu::MColorObject(1.0, 1.0, 0.0);
            item["value"].text = gtengine::MSpecDB::getCarColorName(car.code, index);

            item.ChipF.ColorChipFace.setCarColor(car.code, index);
            item.ChipF.visible = true;
        }

        function on_select_color(context, index, menuitem, item, arg)
        {
            var car = arg;
            if (car.code == gtengine::MSpecDB::NO_CODE)
            {
                DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, "Please select Car first.");
                return;
            }

            if (car.color == nil)
            {
                var primary_color = gtengine::MSpecDB::getCarVariationFlag(car.code, 1);
                if (primary_color < 0)
                    primary_color = 0;
                car.color = primary_color;
            }

            var color_num = gtengine::MSpecDB::getCarVariation(car.code);
            var color_menu = Array(color_num);
            for (var i = 0; i < color_num; i++)
            {
                var color_name = gtengine::MSpecDB::getCarColorName(car.code, i);
                color_menu[i] = MenuItem(MenuItemTEXT, i, "", nil, on_update_color_item, on_color_selected, nil, car);
            }

            open_menu(context, menuitem.label, color_menu, index, car.color);
        }

        function on_select_premium_car(context, index, menuitem, item, arg)
        {
            var car_list = CarMenu::get_premium_model_cars(context);
            var menuitems = Array(car_list.size);
            for (var i = 0; i < car_list.size; i++)
            {
                var menuitem = MenuItem(MenuItemTEXT, car_list[i], "", nil, on_update_car_item, on_car_selected, nil, arg);
                menuitem.base_color = ((i / 8) % 2 == 0) ? gray : cyan;
                menuitems[i] = menuitem;
            }

            var focus_index = 0;
            var car = arg;
            if (car.code != gtengine::MSpecDB::NO_CODE)
            {
                var car_label = gtengine::MSpecDB::getCarLabel(car.code);
                focus_index = RunviewerUtil::SearchFocusIndex(car_label, menuitems);
            }
            TopRoot.open_menu(context, menuitem.label, menuitems, index, focus_index);
        }

        function on_select_tuner(context, index, menuitem, item, arg)
        {
            var tuner_list = CarMenu::get_tuner_label_list(context);
            var menuitems = Array(tuner_list.size);
            for (var i = 0; i < tuner_list.size; i++)
            {
                var menuitem = MenuItem(MenuItemTEXT, tuner_list[i], "", nil, nil, on_tuner_selected, nil, arg);
                menuitem.base_color = ((i / 8) % 2 == 0) ? gray : cyan;
                menuitems[i] = menuitem;
            }

            var focus_index = 0;
            var car = arg;
            if (car.code != nil && car.code != gtengine::MSpecDB::NO_CODE)
            {
                var car_label = gtengine::MSpecDB::getCarLabel(car.code);
                var ride_car_tuner_label = gtengine::MSpecDB::getTunerLabel(car_label);
                focus_index = RunviewerUtil::SearchFocusIndex(ride_car_tuner_label, menuitems);
            }
			
            TopRoot.open_menu(context, menuitem.label, menuitems, index, focus_index);
        }

        function on_tuner_selected(context, index, menuitem, item, arg)
        {
            var pick_tuner = menuitem.label;

            var car_list = CarMenu::get_cars_label_by_tuner(context, pick_tuner);

            var cars = Array();
            car_list.each(function(car_label) 
            {
                cars.push(MenuItem(MenuItemTEXT, car_label, "", nil, on_update_car_item, on_select_makertuner_car, nil, arg));
            });

            TopRoot.open_menu(context, menuitem.label, cars, index, 0);
        }
        
        function on_select_makertuner_car(context, index, menuitem, item, arg)
        {
            var car_label = menuitem.label;
            var car_code = gtengine::MSpecDB::getCarCode(car_label);
            var primary_color = gtengine::MSpecDB::getCarVariationFlag(car_label, 1);
            if (primary_color < 0)
                primary_color = 0;

            var car = arg;
            car.code = car_code;
            car.color = primary_color;


            close_menu(context);
            close_menu(context);
        }

        function on_update_car(context, index, menuitem, item)
        {
            var arg = menuitem.arg;
            var car = arg;
            if (car.code != gtengine::MSpecDB::NO_CODE)
            {
                item["value"].text = gtengine::MSpecDB::getCarLabel(car.code) + "  (" + gtengine::MSpecDB::getCarName(car.code) + ")";
                if (car.color != nil)
                {
                    item.ChipF.ColorChipFace.setCarColor(car.code, car.color);
                    item.ChipF.visible = true;
                }
            }
            else
                item["value"].text = "";
        }

        function on_car(context, index, menuitem, item, arg)
        {
            var car = arg;

            var menuitems = [];

            menuitems.push(blue);

            menuitems.push(CREATE_MENUITEM(MenuItemTEXT, "CarCode", " を変更します。", nil, on_update_select_car, on_select_car, nil, car));
            menuitems.push(CREATE_MENUITEM(MenuItemTEXT, "CarCodeByPremium", " から選択します。", nil, on_update_select_car, on_select_premium_car, nil, car));
            menuitems.push(CREATE_MENUITEM(MenuItemTEXT, "CarCodeByTuner", " から選択します。", nil, nil, on_select_tuner, nil, car));
            menuitems.push(CREATE_MENUITEM(MenuItemTEXT, "CarColor", " を変更します。", nil, on_update_select_color, on_select_color, nil, car));

            TopRoot.open_menu(context, menuitem.label, menuitems, index, 0)
        }
    }

    function on_driver_parameter(context, index, menuitem, item, arg)
    {
        var dp = arg;
        var menuitems = [
            blue,
            CREATE_SELECT(&dp.type, "type", " を変更します。" , getCandidates(gtengine::DriverType)),
            CREATE_SLIDER(&dp.port, "port", " を変更します。" , 0, 6, nil, ""),
            CREATE_INPUT(&dp.display_name, "display_name", " を変更します。"),
            CREATE_INPUT(&dp.region, "region", " を変更します。"),
            CREATE_TOGGLE_NOYES(&dp.manual, "manual", " を変更します。"),
            CREATE_TOGGLE_NOYES(&dp.assist_asm, "asm", " を変更します。"),
            CREATE_TOGGLE_NOYES(&dp.physics_pro, "physics_pro", " を変更します。"),
            CREATE_TOGGLE_NOYES(&dp.display_driving_line, "display_driving_line", " を変更します。"),
            CREATE_SLIDER(&dp.head_code, "head_code", " を変更します。" , 0, 128, nil, ""),
            CREATE_SLIDER(&dp.body_code, "body_code", " を変更します。" , 0, 128, nil, ""),
            CREATE_SLIDER(&dp.head_color_code, "head_color_code", " を変更します。" , 0, 128, nil, ""),
            CREATE_SLIDER(&dp.body_color_code, "body_color_code", " を変更します。" , 0, 128, nil, ""),
            CREATE_SLIDER(&dp.braking_skill, "braking_skill", " を変更します。" , 0, 200, nil, ""),
            CREATE_SLIDER(&dp.cornering_skill, "cornering_skill", " を変更します。" , 0, 200, nil, ""),
            CREATE_SELECT(&dp.special_ai_type, "special_ai_type", " を変更します。", getCandidates(gtengine::SpecialAIType)),
        ];
        TopRoot.open_menu(context, menuitem.label, menuitems, index, 0);
    }

    function on_update_driver(context, index, menuitem, item)
    {
        var arg = menuitem.arg;
        var dp = arg;
        var text = "";
        var res = gtengine::DriverType.find_static(function(pair) { return pair[1] == dp.type });

        if (res.size > 0)
            text = text + res[0][0];
        
        item.value.text = text;
    }

    function on_update_car_category(context, index, menuitem, item)
    {
        var car_category_ref = menuitem.arg;
        item["value"].text = *car_category_ref;
    }

    function on_car_category(context, index, menuitem, item, arg)
    {
        var car_category_ref = arg;
        var menuitems = [
            blue,
            CREATE_SELECT(car_category_ref, "Category", " を変更します。", car_category_list),
        ];


        TopRoot.open_menu(context, menuitem.label, menuitems, index, 0);
    }

    function on_update_tuner(context, index, menuitem, item)
    {
        var tuner_ref = menuitem.arg;
        item["value"].text = *tuner_ref;
    }

    function on_tuner(context, index, menuitem, item, arg)
    {
        var tuner_ref = arg;
        var menuitems = [
            blue,
            CREATE_SELECT(tuner_ref, "Tuner", " を変更します。", tuner_list),
        ];


        TopRoot.open_menu(context, menuitem.label, menuitems, index, 0);
    }

    function on_update_country(context, index, menuitem, item)
    {
        var country_ref = menuitem.arg;
        item["value"].text = *country_ref;
    }

    
    function on_country(context, index, menuitem, item, arg)
    {
        var country_ref = arg;
        var menuitems = [
            blue,
            CREATE_SELECT(country_ref, "Country", " を変更します。", country_list),
        ];


        TopRoot.open_menu(context, menuitem.label, menuitems, index, 0);
    }

    function on_num_changed(context, smdata, value)
    {
        var list = smdata.arg;
        list.resize(value);
        TopRoot.restart_menu(context);
    }

    static car_category_list = [
        [-1, "-1"],
        [gtengine::CarCategory::NORMAL, "NORMAL"],
        [gtengine::CarCategory::RACING, "RACING"],
        [gtengine::CarCategory::TUNING, "TUNING"],
        [gtengine::CarCategory::CONCEPT, "CONCEPT"],
    ];

    static drivetrain_list = [
        [-1, "-1"],
        [gtengine::DriveTrainType::FR, "FR"],
        [gtengine::DriveTrainType::FF, "FF"],
        [gtengine::DriveTrainType::_4WD, "4WD"],
        [gtengine::DriveTrainType::MR, "MR"],
        [gtengine::DriveTrainType::RR, "RR"],
    ];

    static aspiration_list = [
        [-1, "-1"],
        [gtengine::AspirationType::NATUNE, "NATUNE"],
        [gtengine::AspirationType::TURBO, "TURBO"],
        [gtengine::AspirationType::SUPERCHARGER, "SUPERCHARGER"],
        [gtengine::AspirationType::SUPERTURBO, "SUPERTURBO"],
    ];

    static tuner_list;

    function makeTunerList()
    {
        tuner_list = Array();
        tuner_list.push([-1, "-1"]);

        var res = SPECDB.executeQuery("SELECT TunerString, ID FROM TUNER ORDER BY TunerString");
        foreach (var row in res)
        {
            var item = [row[1], row[0]];
            tuner_list.push(item);
        }
    }

    static country_list;

    function makeCountryList()
    {
        country_list = Array();
        country_list.push([-1, "-1"]);

        var res = SPECDB.executeQuery("SELECT Label, ID FROM COUNTRY ORDER BY Label");
        foreach (var row in res)
        {
            var item = [row[1], row[0]];
            country_list.push(item);
        }
    }

    function get_tire_list(context)
    {
        var range = [gtengine::PARTS_TIRE::TIRE_DRY_MIN, gtengine::PARTS_TIRE::TIRE_DRY_MAX - 1];
        var tire_list = Array(range[1] - range[0] + 1 + 1);
        tire_list[0] = [-1, " 制限なし"];
        for (var i = 1; i < tire_list.size; i++)
        {
            var tire_index = range[0] + i - 1;
            tire_list[i] = [tire_index, TireUtil::getName(tire_index)];
        }

        return tire_list;
    }

    function get_regulation_menu_list(context, arg)
    {
        |var event, var regulation| = arg;

        var tire_list = get_tire_list(context);
        var menuitems = [
            blue,
            CREATE_SLIDER(&regulation.limit_pp, "limit_pp", " を変更します。" , -1, 1000, nil, " pts."),
            CREATE_SLIDER(&regulation.need_pp, "need_pp", " を変更します。" , -1, 1000, nil, " pts."),
            CREATE_SELECT(&regulation.limit_tire_f, "limit_tire_f", " を変更します。" , tire_list),
            CREATE_SELECT(&regulation.need_tire_f, "need_tire_f", " を変更します。" , tire_list),
            CREATE_SELECT(&regulation.limit_tire_r, "limit_tire_r", " を変更します。" , tire_list),
            CREATE_SELECT(&regulation.need_tire_r, "need_tire_r", " を変更します。" , tire_list),
        ];

        menuitems.push(green);
        var tmp = regulation.car_categories.size;
        menuitems.push(CREATE_SLIDER_WITH_CALLBACK(&tmp, "Category", " の数を変更", " の数を変更します。" , 0, 4, "", on_num_changed, regulation.car_categories));

        menuitems.push(blue);
        for (var i = 0; i < regulation.car_categories.size; i++)
            menuitems.push(CREATE_MENUITEM(MenuItemTEXT, "Category(#%{i})", " を変更します。", nil, on_update_car_category, on_car_category, nil, &regulation.car_categories[i]));

        menuitems.push(green);
        tmp = regulation.cars.size;
        menuitems.push(CREATE_SLIDER_WITH_CALLBACK(&tmp, "Car", " の数を変更", " の数を変更します。" , 0, 128, "", on_num_changed, regulation.cars));

        menuitems.push(blue);
        for (var i = 0; i < regulation.cars.size; i++)
            menuitems.push(CREATE_MENUITEM(MenuItemTEXT, "Car(#%{i})", " を変更します。", nil, CarSelect::on_update_car, CarSelect::on_car, nil, regulation.cars[i]));

        menuitems.push(blue);
        menuitems.push(CREATE_SLIDER2(&regulation.need_license, "Need License", " の数を変更", " の数を変更します。" , 0, 16, nil, ""));
        menuitems.push(CREATE_SLIDER(&regulation.limit_power, "limit_power", " を変更します。" , -1, 2000, nil, " PS"));
        menuitems.push(CREATE_SLIDER(&regulation.need_power, "need_power", " を変更します。" , -1, 2000, nil, " PS"));
        menuitems.push(CREATE_SLIDER(&regulation.limit_weight, "limit_weight", " を変更します。" , -1, 10000, nil, " kg"));
        menuitems.push(CREATE_SLIDER(&regulation.need_weight, "need_weight", " を変更します。" , -1, 10000, nil, " kg"));
        menuitems.push(CREATE_SELECT(&regulation.need_drivetrain, "need_drivetrain", " を変更します。" , drivetrain_list));
        menuitems.push(CREATE_SELECT(&regulation.need_aspiration, "need_aspiration", " を変更します。" , aspiration_list));
        menuitems.push(CREATE_SLIDER(&regulation.limit_year, "limit_year", " を変更します。" , -1, 2020, nil, "年"));
        menuitems.push(CREATE_SLIDER(&regulation.need_year, "need_year", " を変更します。" , -1, 2020, nil, "年"));
        menuitems.push(CREATE_SLIDER(&regulation.limit_aspec_level, "limit_aspec_level", " を変更します。" , -1, 30, nil, ""));
        menuitems.push(CREATE_SLIDER(&regulation.need_aspec_level, "need_aspec_level", " を変更します。" , -1, 30, nil, ""));
        menuitems.push(CREATE_SLIDER(&regulation.limit_bspec_level, "limit_bspec_level", " を変更します。" , -1, 30, nil, ""));
        menuitems.push(CREATE_SLIDER(&regulation.need_bspec_level, "need_bspec_level", " を変更します。" , -1, 30, nil, ""));
        menuitems.push(CREATE_SLIDER(&regulation.limit_bspec_driver_count, "limit_bspec_driver_count", " を変更します。" , -1, 4, nil, ""));
        menuitems.push(CREATE_SLIDER(&regulation.need_bspec_driver_count, "need_bspec_driver_count", " を変更します。" , -1, 4, nil, ""));

        menuitems.push(green);
        tmp = regulation.tuners.size;
        menuitems.push(CREATE_SLIDER_WITH_CALLBACK(&tmp, "Tuner", " の数を変更", " の数を変更します。" , 0, 16, "", on_num_changed, regulation.tuners));
        
        menuitems.push(blue);
        for (var i = 0; i < regulation.tuners.size; i++)
            menuitems.push(CREATE_MENUITEM(MenuItemTEXT, "Tuner(#%{i})", " を変更します。", nil, on_update_tuner, on_tuner, nil, &regulation.tuners[i]));

        menuitems.push(green);
        tmp = regulation.countries.size;
        menuitems.push(CREATE_SLIDER_WITH_CALLBACK(&tmp, "Country", " の数を変更", " の数を変更します。" , 0, 16, "", on_num_changed, regulation.countries));

        menuitems.push(blue);
        for (var i = 0; i < regulation.countries.size; i++)
            menuitems.push(CREATE_MENUITEM(MenuItemTEXT, "Country(#%{i})", " を変更します。", nil, on_update_country, on_country, nil, &regulation.countries[i]));

        return menuitems;
    }

    function on_regulation(context, index, menuitem, item, arg)
    {
        |var event, var regulation| = arg;
        
        TopRoot.open_menu(context, menuitem.label, nil, index, 0, nil, 
            [get_regulation_menu_list, [event, regulation]]);
    }

    static tri_list = [
        CREATE_ENUM_ELEM(-1, "", " 強制なし"),
        CREATE_ENUM_ELEM(0, "無効", " に強制"),
        CREATE_ENUM_ELEM(1, "有効", " に強制"),
    ];

    static as_list = [
        CREATE_ENUM_ELEM(-1, "", " 強制なし"),
        CREATE_ENUM_ELEM(0, "OFF", " に強制"),
        CREATE_ENUM_ELEM(1, "WEAK", " に強制"),
        CREATE_ENUM_ELEM(2, "STRONG", " に強制"),
    ];

    function get_constraint_menu_list(context, arg)
    {
        |var event, var constraint| = arg;
        var tire_list = get_tire_list(context);

        var menuitems = [
            blue,
            CREATE_SELECT(&constraint.driving_line, "driving_line", " を変更します。" , tri_list),
            CREATE_SELECT(&constraint.asm, "asm", " を変更します。" , tri_list),
            CREATE_SLIDER(&constraint.tcs, "tcs", " を変更します。" , -1, 10, nil, ""),
            CREATE_SLIDER(&constraint.abs, "abs", " を変更します。" , -1, 10, nil, ""),
            CREATE_SELECT(&constraint.limit_tire_f, "limit_tire_f", " を変更します。" , tire_list),
            CREATE_SELECT(&constraint.need_tire_f, "need_tire_f", " を変更します。" , tire_list),
            CREATE_SELECT(&constraint.limit_tire_r, "limit_tire_r", " を変更します。" , tire_list),
            CREATE_SELECT(&constraint.need_tire_r, "need_tire_r", " を変更します。" , tire_list),
            CREATE_SELECT(&constraint.simulation, "simulation", " を変更します。" , tri_list),
            CREATE_SELECT(&constraint.active_steering, "active_steering", " を変更します。" , as_list),
        ];

        menuitems.push(green);
        var tmp = constraint.cars.size;
        menuitems.push(CREATE_SLIDER_WITH_CALLBACK(&tmp, "Car", " の数を変更", " の数を変更します。" , 0, 128, "", on_num_changed, constraint.cars));

        menuitems.push(blue);
        for (var i = 0; i < constraint.cars.size; i++)
            menuitems.push(CREATE_MENUITEM(MenuItemTEXT, "Car(#%{i})", " を変更します。", nil, CarSelect::on_update_car, CarSelect::on_car, nil, constraint.cars[i]));

        return menuitems;
    }

    function on_constraint(context, index, menuitem, item, arg)
    {
        |var event, var constraint| = arg;
        if (constraint.tcs == nil)
            constraint.tcs = -1;
        
        TopRoot.open_menu(context, menuitem.label, nil, index, 0, 
            nil, [get_constraint_menu_list, [event, constraint]]);
    }

    function on_boost_decide_cb(context, smdata, value)
    {
        |var id, var rp| = smdata.arg;
        var param = rp.boost_params;
        param[id] = value;
        rp.setBoostParams(param);
    }

    function on_race_parameter(context, index, menuitem, item, arg)
    {
        |var event, var rp| = arg;

        check_execute_gameplan(context);
        
        var menuitems = [
            blue,
            CREATE_SELECT(&rp.race_type, "race_type", " を変更します。" , getCandidates(gtengine::RaceType)),
            CREATE_SELECT(&rp.start_type, "start_type", " を変更します。" , RaceConfigMenu::start_type_list),
            CREATE_SELECT(&rp.complete_type, "complete_type", " を変更します。" , getCandidates(gtengine::CompleteType)),
            CREATE_SELECT(&rp.finish_type, "finish_type", " を変更します。" , getCandidates(gtengine::FinishType)),
            CREATE_SELECT(&rp.flagset, "flagset", " を変更します。" , getCandidates(gtengine::RaceFlagSet)),
            CREATE_SLIDER(&rp.race_limit_laps, "race_limit_laps", " を変更します。" , 0, 100, "none", " laps"),
            CREATE_SLIDER(&rp.race_limit_minute, "race_limit_minute", " を変更します。", 0, 100, "none", " min"),
            CREATE_SLIDER_WITH_STEP(&rp.time_to_start, "time_to_start", " を変更します。" , 0, 100000, "none", " msec", nil, nil, 100, 1000),
            CREATE_SLIDER_WITH_STEP(&rp.time_to_finish, "time_to_finish", " を変更します。" , 0, 100000, "none", " msec", nil, nil, 100, 1000),
            CREATE_SLIDER(&rp.entry_max, "entry_max", " を変更します。" , 0, 16, nil, " cars"),
            CREATE_SLIDER(&rp.racers_max, "racers_max", " を変更します。" , 0, 16, nil, " cars"),
            CREATE_BOOST_SLIDER(&rp.boost_params[0], "boost front rate", "前方へのブースト効果（待ってくれる程度）を1フレーム辺りの%で決定します。10%でもかなり効きます。" , -100, 100, nil, "%", on_boost_decide_cb, 0, rp),
            CREATE_BOOST_SLIDER(&rp.boost_params[2], "boost front start", "前方へのブースト効果（待ってくれる程度）が効き始める距離です。これ以下の距離ではブーストが効きません。" , 0, 200, nil, "m", on_boost_decide_cb, 2, rp),
            CREATE_BOOST_SLIDER(&rp.boost_params[4], "boost front limit", "前方へのブースト効果（待ってくれる程度）が最大になる距離です。この距離を超えると上記RATEのブースト効果になります" , 0, 200, nil, "*10m", on_boost_decide_cb, 4, rp),
            CREATE_BOOST_SLIDER(&rp.boost_params[1], "boost rear rate", "後方へのブースト効果（追いかけてくる程度）を1フレーム辺りの%で決定します。10%でもかなり効きます。" , -100, 100, nil, "%", on_boost_decide_cb, 1, rp),
            CREATE_BOOST_SLIDER(&rp.boost_params[3], "boost rear start", "後方へのブースト効果（追いかけてくる程度）が効き始める距離です。これ以下の距離ではブーストが効きません。" , 0, 200, nil, "m", on_boost_decide_cb, 3, rp),
            CREATE_BOOST_SLIDER(&rp.boost_params[5], "boost rear limit", "後方へのブースト効果（追いかけてくる程度）が最大になる距離です。この距離を超えると上記RATEのブースト効果になります" , 0, 200, nil, "*10m", on_boost_decide_cb, 5, rp),
            CREATE_TOGGLE_NOYES(&rp.keep_load_ghost,"keep_load_ghost", " を変更します。"),
            CREATE_TOGGLE_NOYES(&rp.immediate_finish,"immediate_finish", " を変更します。"),
            CREATE_SELECT(&rp.grid_sort_type, "grid_sort_type", " を変更します。" , getCandidates(gtengine::GridSortType)),
            CREATE_TOGGLE_NOYES(&rp.endless, "endless", " を変更します。"),
            CREATE_SELECT(&rp.ghost_type, "ghost_type", " を変更します。" , getCandidates(gtengine::GhostType)),
            CREATE_SELECT(&rp.ghost_presence_type, "ghost_presence_type", " を変更します。" , getCandidates(gtengine::GhostPresenceType)),
            CREATE_TOGGLE_NOYES(&rp.disable_collision, "disable_collision", " を変更します。"),
            CREATE_SLIDER(&rp.penalty_level, "penalty_level", " を変更します。" , 0, 6, nil, " level"),
            CREATE_TOGGLE_NOYES(&rp.accumulation, "accumulation", " を変更します。"),
            CREATE_TOGGLE_NOYES(&rp.academy_event, "academy_event", " を変更します。"),
            CREATE_TOGGLE_NOYES(&rp.enable_pit, "enable_pit", " を変更します。"),
            CREATE_TOGGLE_NOYES(&rp.enable_damage, "enable_damage", " を変更します。"),
            CREATE_TOGGLE_NOYES(&rp.disable_recording_replay, "disable_recording_replay", " を変更します。"),
            CREATE_SLIDER(&rp.event_goal_v, "event_goal_v", " を変更します。" , -1, 1000, nil, ""),
            CREATE_SLIDER(&rp.event_goal_width, "event_goal_width", " を変更します。" , -1, 1000, nil, ""),
            CREATE_TOGGLE_NOYES(&rp.fixed_retention, "fixed_retention", " を変更します。"),
            CREATE_SLIDER(&rp.initial_retention10, "initial_retention10", " を変更します。" , 0, 10, nil, " level"),
            CREATE_SELECT(&rp.decisive_weather, "decisive_weather", " を変更します。" , getCandidates(gtengine::DecisiveWeather)),
            CREATE_SLIDER(&rp.weather_total_sec, "weather_total_sec", " を変更します。" , 10, 1000, nil, " sec"),
            CREATE_SLIDER(&rp.weather_rate_sec1, "weather_rate_sec1", " を変更します。" , 10, 1000, nil, " sec"),
            CREATE_SLIDER(&rp.weather_rate_sec2, "weather_rate_sec2", " を変更します。" , 10, 1000, nil, " sec"),
            CREATE_SLIDER(&rp.weather_random_seed, "weather_random_seed", " を変更します。" , 0, 1000, nil, nil),
            CREATE_TOGGLE_NOYES(&rp.weather_no_precipitation, "weather_no_precipitation", " を変更します。"),
            CREATE_TOGGLE_NOYES(&rp.weather_no_wind, "weather_no_wind", " を変更します。"),
            CREATE_TOGGLE_NOYES(&rp.weather_prec_rain_only, "weather_prec_rain_only", " を変更します。"),
            CREATE_TOGGLE_NOYES(&rp.weather_prec_snow_only, "weather_prec_snow_only", " を変更します。"),
            CREATE_TOGGLE_NOYES(&rp.weather_no_schedule, "weather_no_schedule", " を変更します。"),
            CREATE_TOGGLE_NOYES(&rp.weather_random, "weather_random", " を変更します。"),
            CREATE_SLIDER(&rp.weather_accel100, "weather_accel100", " を変更します。" , 0, 1000, nil, "%"),
            CREATE_SLIDER(&rp.weather_base_celsius,"weather_base_celsius", " を変更します。" , -50, 50, nil, "℃"),
            CREATE_SLIDER(&rp.weather_min_celsius, "weather_min_celsius", " を変更します。" , 0, 15, nil, "℃"),
            CREATE_SLIDER(&rp.weather_max_celsius, "weather_max_celsius", " を変更します。" , 0, 15, nil, "℃"),
        ];

        TopRoot.open_menu(context, menuitem.label, menuitems, index, 0, nil, nil);
    }
}