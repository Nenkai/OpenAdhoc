













module ROOT
{
    attribute sInstanceWidget;
    attribute sParentWidget;
    attribute sPrevFrameInterval;
    attribute sPrevRoot;
    attribute sReplayData;

    static sAlreadyQuited = false;
    static sAlreadyStarted  = false;

    class DisplayOptionSetting
    {
        attribute disp_speed;
        attribute disp_shift_pos;
        attribute disp_engine_rpm;
        attribute disp_side_g;
        attribute disp_front_g;
        attribute disp_throttle;
        attribute disp_brake;
        attribute disp_reference;
        attribute xaxis_mode;

        method __init__()
        {
            self.disp_speed = nil;
            self.disp_shift_pos = nil;
            self.disp_engine_rpm = nil;
            self.disp_side_g = nil;
            self.disp_front_g = nil;
            self.disp_throttle = nil;
            self.disp_brake = nil;
            self.disp_reference = nil;
            self.xaxis_mode = nil;
        }
    }

    method isActive(context)
    {
        return self.sInstanceWidget != nil;
    }

    method setMonitorFadeIn(context)
    {
        if (self.sInstanceWidget == nil)
            return;

        if (self.sInstanceWidget.View == nil)
            return;

        if (self.sInstanceWidget.View.MonitorPane == nil)
            return;

        if (self.sInstanceWidget.View.MonitorPane.Veil == nil)
            return;

        if (self.sInstanceWidget.View.MonitorPane.Veil.ScalarInterpolator != nil)
        {
            self.sInstanceWidget.View.MonitorPane.Veil.ScalarInterpolator.reverse = true;
            self.sInstanceWidget.View.MonitorPane.Veil.ScalarInterpolator.start();
        }
    }

    method setMonitorFadeOut(context)
    {
        if (self.sInstanceWidget == nil)
            return;

        if (self.sInstanceWidget.View == nil)
            return;

        if (self.sInstanceWidget.View.MonitorPane == nil)
            return;

        if (self.sInstanceWidget.View.MonitorPane.Veil == nil)
            return;

        if (self.sInstanceWidget.View.MonitorPane.Veil.ScalarInterpolator != nil)
        {
            self.sInstanceWidget.View.MonitorPane.Veil.ScalarInterpolator.reverse = false;
            self.sInstanceWidget.View.MonitorPane.Veil.ScalarInterpolator.start();
        }
    }

    method setReferenceData(context)
    {
        if (self.sInstanceWidget == nil)
            return;

        self.sInstanceWidget.View.Base.displayReferenceData();
        self.sInstanceWidget.View.DataPane.setReferenceBestTime();
    }

    method getDisplayOption(context)
    {
        if (self.sInstanceWidget == nil)
            return nil;

        var data = DisplayOptionSetting();
        data.disp_speed = self.sInstanceWidget.View.Base.dlf.display_speed;
        data.disp_shift_pos = self.sInstanceWidget.View.Base.dlf2.display_shift_pos;
        data.disp_engine_rpm = self.sInstanceWidget.View.Base.dlf.display_engine_rpm;
        data.disp_side_g = self.sInstanceWidget.View.Base.dlf.display_side_g;
        data.disp_front_g = self.sInstanceWidget.View.Base.dlf.display_front_g;
        data.disp_throttle = self.sInstanceWidget.View.Base.dlf2.display_throttle;
        data.disp_brake = self.sInstanceWidget.View.Base.dlf2.display_brake;
        data.disp_reference = self.sInstanceWidget.View.Base.dlf.display_ghost;
        data.xaxis_mode = self.sInstanceWidget.View.Base.dlf.x_axis_v_coord;
        return data;
    }

    method setDisplayOption(context, data)
    {
        if (self.sInstanceWidget == nil)
            return nil;

        self.sInstanceWidget.View.Base.dlf.display_speed = data.disp_speed;
        self.sInstanceWidget.View.Base.dlf2.display_shift_pos = data.disp_shift_pos;
        self.sInstanceWidget.View.Base.dlf.display_engine_rpm = data.disp_engine_rpm;
        self.sInstanceWidget.View.Base.dlf.display_side_g = data.disp_side_g;
        self.sInstanceWidget.View.Base.dlf.display_front_g = data.disp_front_g;
        self.sInstanceWidget.View.Base.dlf2.display_throttle = data.disp_throttle;
        self.sInstanceWidget.View.Base.dlf2.display_brake = data.disp_brake;
        self.sInstanceWidget.View.Base.dlf.display_ghost = data.disp_reference;
        self.sInstanceWidget.View.Base.dlf.x_axis_v_coord = data.xaxis_mode;
        self.sInstanceWidget.View.Base.dlf2.x_axis_v_coord = data.xaxis_mode;
        
        self.sInstanceWidget.View.Base.Remarks.Speed.visible = data.disp_speed;
        self.sInstanceWidget.View.Base.Remarks.ShiftPos.visible = data.disp_shift_pos;
        self.sInstanceWidget.View.Base.Remarks.EngineRPM.visible = data.disp_engine_rpm;
        self.sInstanceWidget.View.Base.Remarks.Throttle.visible = data.disp_throttle;
        self.sInstanceWidget.View.Base.Remarks.Brake.visible = data.disp_brake;
        self.sInstanceWidget.View.Base.Remarks.SideG.visible = data.disp_side_g;
        self.sInstanceWidget.View.Base.Remarks.FrontG.visible = data.disp_front_g;
    }

    method initialize(context, parent_widget)
    {
        if (self.sInstanceWidget != nil)
            return;

        context.loadGpb("%{main::PROJECT_ROOT_DIR}/race_timeattack", "DataLoggerRoot");
        RaceRoot.endLeaveDetect(context);
        OnboardMeterRoot.visible = false;

        self.sPrevFrameInterval = menu::FrameInterval;
        menu::FrameInterval = 2;

        self.sParentWidget = parent_widget;
        self.sInstanceWidget = View.doCopy();
        self.sParentWidget.appendChild(context, self.sInstanceWidget);
        self.sInstanceWidget.initialize(context);
        self.sInstanceWidget.refresh(context, true);
        self.initializeTick(context);
    }

    method finalize(context)
    {
        if (self.sInstanceWidget != nil)
        {
            self.finalizeTick(context);
            self.sInstanceWidget.finalize(context);
            self.sParentWidget.removeChild(context, self.sInstanceWidget);
            self.sParentWidget = nil;
            self.sInstanceWidget = nil;
            menu::FrameInterval = self.sPrevFrameInterval;
            self.sPrevFrameInterval = nil;

            OnboardMeterRoot.visible = true;

            RaceRoot.startLeaveDetect(context);
            context.unloadGpb("%{main::PROJECT_ROOT_DIR}/race_timeattack", "DataLoggerRoot");
        }
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        return EVENTRESULT_FILTER;
    }

    method refresh(context)
    {
        if (self.sInstanceWidget != nil)
        {
            self.sInstanceWidget.refresh(context, true);
        }
    }

    method onTick(context)
    {
        if (self.sInstanceWidget != nil)
        {
            self.sInstanceWidget.refresh(context, false);
        }
    }

    attribute sWatcher;

    method initializeTick(context)
    {
        self.sWatcher = WatcherUtil::Create(context, onTick, 30);
    }

    method finalizeTick(context)
    {
        if (self.sWatcher != nil)
        {
            WatcherUtil::Delete(self.sWatcher);
            self.sWatcher = nil;
        }
    }

    method onKeyPress(context, event)
    {
        if (event.keysym == CELL_PAD_CTRL_L3)
            ;
        
        if (event.state & 0x200 != 0)
            return EVENTRESULT_FILTER;
        
        return EVENTRESULT_CONTINUE;
    }

    module View
    {
        method initialize(context)
        {
            self.MonitorPane.initialize(context);
            self.MapPane.initialize(context);
            self.Base.initialize(context);
            self.DataPane.initialize(context);
        }

        method finalize(context)
        {
            self.Base.finalize(context);
            self.MonitorPane.finalize(context);
            self.MapPane.finalize(context);
            self.DataPane.finalize(context);
        }

        method refresh(context, warp)
        {
            self.MonitorPane.refresh();
            self.Base.refresh(context, warp);
        }

        module MonitorPane
        {
            method initialize(context)
            {
                MonitorController::Subjective.visible = false;
                MonitorController::Subjective.active = false;

                ORG.noDispBackMirror(true);
                RenderControl.begin(ORG);

                View::Base::Parette::speed::Img_unit.image_path = UnitImagePath();
                View::MeterFace.begin4bspec(ORG, View::Base::Parette);
                
                Veil.ScalarInterpolator.reverse = false;
                Veil.ScalarInterpolator.reset();
            }

            method finalize(context)
            {
                View::MeterFace.end();
                RenderControl.end(ORG);
                ORG.noDispBackMirror(false);
            }

            method refresh()
            {

            }

            module MonitorController
            {
                module Subjective
                {
                    method onFocusEnter(context)
                    {
                        RaceRoot.BalloonTip.visible = true;
                        RaceRoot.BalloonTip.set_value(context, self, context.translate(RaceRoot, "BALLOONTIP_MONITOR_SUBJECTIVE"), 0);
                        return EVENTRESULT_FILTER;
                    }

                    method onActivate(context)
                    {
                        if (ORG.pauseRace || ORG.isTargetCaPitIn()) // BUG: typo "isTargetCaPitIn", should be "isTargetCarPitIn"
                        {
                            main::sound.play("disable");
                            return EVENTRESULT_FILTER;
                        }

                        main::sound.play("cursor");
                        ORG.callDriversViewChange();
                        return EVENTRESULT_FILTER;
                    }
                }
            }
        }
    
        module MapPane
        {
            static scale_table = [
                12.5,
                25.0,
                50.0,
                100.0,
                200.0,
                300.0,
                400.0,
                500.0,
                600.0,
            ];

            static scale_index = 4;

            method initialize(context)
            {
                MapClip.scale = [1, 1];
                MapClip::CourseMapFace.begin(ORG, MapClip, MapClip::ComCar, 2, scale_table[scale_index], 0);
                MapController::HeadUp.active = false;
                MapController::NorthUp.active = true;
                MapController::Fit.active = false;
                MapClip.visible = true;
            }

            method finalize(context)
            {
                MapClip::CourseMapFace.end();
            }

            module MapController
            {
                module ZoomUp
                {
                    method onFocusEnter(context)
                    {
                        RaceRoot.BalloonTip.visible = true;
                        RaceRoot.BalloonTip.set_value(context, self, 
                            context.translate(RaceRoot, "BALLOONTIP_MAP_ZOOMUP"), 0);
                        return EVENTRESULT_FILTER;
                    }

                    method onActivate(context)
                    {
                        if (scale_index > 0)
                        {
                            main::sound.play("cursor");
                            scale_index--;
                            MapClip::CourseMapFace.mapscale = scale_table[scale_index];
                        }

                        return EVENTRESULT_FILTER;
                    }
                }
    
                module ZoomDown
                {
                    method onFocusEnter(context)
                    {
                        RaceRoot.BalloonTip.visible = true;
                        RaceRoot.BalloonTip.set_value(context, self, 
                            context.translate(RaceRoot, "BALLOONTIP_MAP_ZOOMDOWN"), 0);
                        return EVENTRESULT_FILTER;
                    }

                    method onActivate(context)
                    {
                        if (scale_index < scale_table.size - 1)
                        {
                            main::sound.play("cursor");
                            scale_index++;
                            MapClip::CourseMapFace.mapscale = scale_table[scale_index];
                        }

                        return EVENTRESULT_FILTER;
                    }
                }
    
                module HeadUp
                {
                    method onFocusEnter(context)
                    {
                        RaceRoot.BalloonTip.visible = true;
                        RaceRoot.BalloonTip.set_value(context, self, 
                            context.translate(RaceRoot, "BALLOONTIP_MAP_HEADUP"), 0);
                        return EVENTRESULT_FILTER;
                    }

                    method onActivate(context)
                    {
                        if (!self.active)
                        {
                            main::sound.play("cursor");
                            MapClip::CourseMapFace.mapmode = 1;
                            self.active = true;
                            NorthUp.active = false;
                            Fit.active = false;
                        }

                        return EVENTRESULT_FILTER;
                    }
                }
                
                module NorthUp
                {
                    method onFocusEnter(context)
                    {
                        RaceRoot.BalloonTip.visible = true;
                        RaceRoot.BalloonTip.set_value(context, self, 
                            context.translate(RaceRoot, "BALLOONTIP_MAP_NORTHUP"), 0);
                        return EVENTRESULT_FILTER;
                    }

                    method onActivate(context)
                    {
                        if (!self.active)
                        {
                            main::sound.play("cursor");
                            MapClip::CourseMapFace.mapmode = 2;
                            HeadUp.active = false;
                            self.active = true;
                            Fit.active = false;
                        }
                        
                        return EVENTRESULT_FILTER;
                    }
                }
    
                module Fit
                {
                    method onFocusEnter(context)
                    {
                        RaceRoot.BalloonTip.visible = true;
                        RaceRoot.BalloonTip.set_value(context, self, 
                            context.translate(RaceRoot, "BALLOONTIP_MAP_FIT"), 0);
                        return EVENTRESULT_FILTER;
                    }

                    method onActivate(context)
                    {
                        if (!self.active)
                        {
                            main::sound.play("cursor");
                            MapClip::CourseMapFace.mapmode = 3;
                            HeadUp.active = false;
                            NorthUp.active = false;
                            self.active = true;
                        }
                        
                        return EVENTRESULT_FILTER;
                    }
                }
            }
        }
    
        module Base
        {
            method initialize(context)
            {
                var result = self.dlf.setLoggerData(false);
                result = self.dlf2.setLoggerData(false);

                EngineRPM0.visible = false;
                EngineRPM4.visible = false;
                EngineRPM8.visible = false;
                EngineRPM12.visible = false;
                EngineRPM16.visible = false;
                EngineRPM20.visible = false;

                Speed0.visible = false;
                Speed50.visible = false;
                Speed150.visible = false;
                Speed200.visible = false;
                Speed250.visible = false;
                Speed300.visible = false;
                Speed350.visible = false;
                Speed400.visible = false;

                dlf.display_own = true;
                dlf2.display_own = true;

                var option = main::GAME_STATUS.user_profile.option;
                dlf.display_mph = option.unit_velocity;
                dlf2.display_mph = option.unit_velocity;

                if (option.unit_velocity)
                {
                    OptionSetting::XAxisViewMode::OptionMenu::popup::vbox::Item0.label.text = context.translate(ROOT, "XAXIS_VCOORD_MILE");
                }
                else
                {
                    OptionSetting::XAxisViewMode::OptionMenu::popup::vbox::Item0.label.text = context.translate(ROOT, "XAXIS_VCOORD_METER");
                }

                dlf.display_speed = true;
                dlf2.display_speed = false;
                OptionSetting::Remarks::Speed::CheckBox.active = true;

                dlf.display_engine_rpm = true;
                dlf2.display_engine_rpm = false;
                OptionSetting::Remarks::EngineRPM::CheckBox.active = true;

                dlf.display_side_g = true;
                dlf2.display_side_g = false;
                OptionSetting::Remarks::SideG::CheckBox.active = true;

                dlf.display_front_g = true;
                dlf2.display_front_g = false;
                OptionSetting::Remarks::FrontG::CheckBox.active = true;

                dlf.display_shift_pos = false;
                dlf2.display_shift_pos = true;
                OptionSetting::Remarks::ShiftPos::CheckBox.active = true;

                dlf.display_throttle = false;
                dlf2.display_throttle = true;
                OptionSetting::Remarks::Throttle::CheckBox.active = true;

                dlf.display_brake = false;
                dlf2.display_brake = true;
                OptionSetting::Remarks::Brake::CheckBox.active = true;

                dlf.x_axis_v_coord = true;
                dlf2.x_axis_v_coord = true;
                OptionSetting::XAxisViewMode::OptionMenu.setIndex(context, 1);

                dlf2.child_grid_count = 4;
                dlf2.child_window = true;

                resetView(context);

                self.dlf.setOrganizer(ORG);
                self.dlf2.setOrganizer(ORG);

                self.displayReferenceData(context);
            }

            method finalize(context)
            {
                self.timelimit();
                dlf.display_speed = false;
                dlf2.display_speed = false;

                dlf.display_shift_pos = false;
                dlf2.display_shift_pos = false;

                dlf.display_throttle = false;
                dlf2.display_throttle = false;

                dlf.display_brake = false;
                dlf2.display_brake = false;

                dlf.display_engine_rpm = false;
                dlf2.display_engine_rpm = false;

                dlf.display_side_g = false;
                dlf2.display_side_g = false;

                dlf.display_front_g = false;
                dlf2.display_front_g = false;

                self.dlf.resetOrganizer(ORG);
                self.dlf2.resetOrganizer(ORG);
            }

            method refresh(context, warp)
            {
                self.dlf2.graph_scale_x = self.dlf.graph_scale_x;
                var width = self.dlf.zero_point_y;
                var grid_count_y = self.dlf.grid_count_y;

                EngineRPM0.visible = true;
                EngineRPM0.y = width - EngineRPM0.h;
                Speed0.visible = true;
                Speed0.y = width - Speed0.h;

                var end_mark_rpm = 0;
                var end_mark_speed = 0;
                var engine_grid_width = width / grid_count_y;

                for (var i = 0; i < grid_count_y; i += 2)
                {
                    var grid = width - (engine_grid_width * i);
                    if (grid > 0 && i == 2)
                    {
                        Speed50.visible = true;
                        Speed50.y = grid - Speed50.h;
                        end_mark_speed = i;
                    }
                    else if (grid > 0 && i == 4)
                    {
                        EngineRPM4.visible = true;
                        EngineRPM4.y = grid - EngineRPM4.h;
                        
                        Speed100.visible = true;
                        Speed100.y = grid - Speed100.h;

                        end_mark_rpm = i;
                        end_mark_speed = i;
                    }
                    else if (grid > 0 && i == 6)
                    {
                        Speed150.visible = true;
                        Speed150.y = grid - Speed150.h;
                        end_mark_speed = i;
                    }
                    else if (grid > 0 && i == 8)
                    {
                        EngineRPM8.visible = true;
                        EngineRPM8.y = grid - EngineRPM8.h;
                        
                        Speed200.visible = true;
                        Speed200.y = grid - Speed200.h;

                        end_mark_rpm = i;
                        end_mark_speed = i;
                    }
                    else if (grid > 0 && i == 10)
                    {
                        Speed250.visible = true;
                        Speed250.y = grid - Speed250.h;
                        end_mark_speed = i;
                    }
                    else if (grid > 0 && i == 12)
                    {
                        EngineRPM12.visible = true;
                        EngineRPM12.y = grid - EngineRPM12.h;
                        
                        Speed300.visible = true;
                        Speed300.y = grid - Speed300.h;

                        end_mark_rpm = i;
                        end_mark_speed = i;
                    }
                    else if (grid > 0 && i == 14)
                    {
                        Speed350.visible = true;
                        Speed350.y = grid - Speed350.h;
                        end_mark_speed = i;
                    }
                    else if (grid > 0 && i == 16)
                    {
                        EngineRPM16.visible = true;
                        EngineRPM16.y = grid - EngineRPM16.h;
                        
                        Speed400.visible = true;
                        Speed400.y = grid - Speed400.h;

                        end_mark_rpm = i;
                        end_mark_speed = i;
                    }
                    else if (grid > 0 && i == 20)
                    {
                        EngineRPM20.visible = true;
                        EngineRPM20.y = grid - EngineRPM20.h;
                        end_mark_rpm = i;
                    }
                    else
                        ;
                }

                var text_rpm = context.translate(ROOT, "RPM");

                switch (end_mark_rpm)
                {
                    case 0:
                        EngineRPM0.text = "0 (x1000 " + text_rpm + ")";
                        break;

                    case 4:
                        EngineRPM0.text = "0";
                        EngineRPM4.text = "4 (x1000 " + text_rpm + ")";
                        break;

                    case 8:
                        EngineRPM0.text = "0";
                        if (grid_count_y < 11)
                        {
                            EngineRPM4.text = "4 (x1000 " + text_rpm + ")";
                            EngineRPM8.visible = false;
                        }
                        else
                        {
                            EngineRPM4.text = "4";
                            EngineRPM8.text = "8 (x1000 " + text_rpm + ")";
                        }
                        break;

                    case 12:
                        EngineRPM0.text = "0";
                        EngineRPM4.text = "4";

                        if (grid_count_y < 15)
                        {
                            EngineRPM8.text = "8 (x1000 " + text_rpm + ")";
                            EngineRPM12.visible = false;
                        }
                        else
                        {
                            EngineRPM8.text = "8";
                            EngineRPM12.text = "12 (x1000 " + text_rpm + ")";
                        }
                        break;

                    case 16:
                        EngineRPM0.text = "0";
                        EngineRPM4.text = "4";
                        EngineRPM8.text = "8";
                        EngineRPM12.text = "12";

                        if (grid_count_y < 19)
                        {
                            EngineRPM12.text = "12 (x1000 " + text_rpm + ")";
                            EngineRPM16.visible = false;
                        }
                        else
                        {
                            EngineRPM12.text = "12";
                            EngineRPM16.text = "16 (x1000 " + text_rpm + ")";
                        }
                        break;

                    case 20:
                        EngineRPM0.text = "0";
                        EngineRPM4.text = "4";
                        EngineRPM8.text = "8";
                        EngineRPM12.text = "12";
    
                        if (grid_count_y < 23)
                        {
                            EngineRPM16.text = "16 (x1000 " + text_rpm + ")";
                            EngineRPM20.visible = false;
                        }
                        else
                        {
                            EngineRPM16.text = "16";
                            EngineRPM20.text = "20 (x1000 " + text_rpm + ")";
                        }
                     break;
                }

                var prefix = context.translate(ROOT, "KMPH") + " ";
                if (dlf.display_mph)
                {
                    prefix = context.translate(ROOT, "MPH") + " ";
                }

                if (end_mark_speed > 7)
                    end_mark_speed -= 2;

                switch (end_mark_speed)
                {
                    case 0:
                        var display_data = prefix + "0";
                        Speed0.text = display_data;
                        break;

                    case 2:
                        var display_data = prefix + "50";
                        Speed0.text = "0";
                        Speed50.text = display_data;
                        break;

                    case 4:
                        var display_data = prefix + "100";
                        Speed0.text = "0";
                        Speed50.text = "50";
                        Speed100.text = display_data;
                        break;

                    case 6:
                        var display_data = prefix + "150";
                        Speed0.text = "0";
                        Speed50.text = "50";
                        Speed100.text = "100";
                        Speed150.text = display_data;

                        Speed200.visible = false;
                        Speed250.visible = false;
                        Speed300.visible = false;
                        Speed350.visible = false;
                        Speed400.visible = false;
                        break;

                    case 8:
                        var display_data = prefix + "200";
                        Speed0.text = "0";
                        Speed50.text = "50";
                        Speed100.text = "100";
                        Speed150.text = "150";
                        Speed200.text = display_data;

                        Speed250.visible = false;
                        Speed300.visible = false;
                        Speed350.visible = false;
                        Speed400.visible = false;
                        break;

                    case 10:
                        var display_data = prefix + "250";
                        Speed0.text = "0";
                        Speed50.text = "50";
                        Speed100.text = "100";
                        Speed150.text = "150";
                        Speed200.text = "200";
                        Speed250.text = display_data;

                        Speed300.visible = false;
                        Speed350.visible = false;
                        Speed400.visible = false;
                        break;
                
                    case 12:
                        var display_data = prefix + "300";
                        Speed0.text = "0";
                        Speed50.text = "50";
                        Speed100.text = "100";
                        Speed150.text = "150";
                        Speed200.text = "200";
                        Speed250.text = "250";
                        Speed300.text = display_data;

                        Speed350.visible = false;
                        Speed400.visible = false;
                        break;

                    case 14:
                        var display_data = prefix + "350";
                        Speed0.text = "0";
                        Speed50.text = "50";
                        Speed100.text = "100";
                        Speed150.text = "150";
                        Speed200.text = "200";
                        Speed250.text = "250";
                        Speed300.text = "300";
                        Speed350.text = display_data;

                        Speed400.visible = false;
                        break;

                    case 16:
                        var display_data = prefix + "400";
                        Speed0.text = "0";
                        Speed50.text = "50";
                        Speed100.text = "100";
                        Speed150.text = "150";
                        Speed200.text = "200";
                        Speed250.text = "250";
                        Speed300.text = "300";
                        Speed350.text = "350";
                        Speed400.text = display_data;
                        break;
                }
            }

            method timelimit(context) { }

            method resetView(context)
            {
                self.dlf.resetView();
                self.dlf2.resetView();
            }

            method displayReferenceData(context)
            {
                var result = self.dlf.setLoggerData(true);
                var result2 = self.dlf2.setLoggerData(true);
                self.dlf.display_ghost = result;
                self.dlf2.display_ghost = result2;
            }
        }
    
        module DataPane
        {
            method initialize(context)
            {
                var datalogger = main::gtengine::MDataLogger();
                datalogger.clearReferenceData();

                var path = datalogger.getOriginalPath();

                var best_time = 0;
                ReferenceData::Header::DisplayData.visible = false;

                var cp, dp;
                if (path != "")
                {
                    var st = pdistd::ReadFile(path, true, 256 * 1024);
                    if (st["result"] != pdistd::FileError::OK)
                        return false;

                    var buf = st["buffer"];
                    var info = gtengine::MReplayInfo();
                    if (!info.initialize(buf))
                        return false;

                    var best_time = info.getBestTime();
                    cp = info.getCarParameter();
                    dp = info.getDriverParameter();
                }

                var target_car_code, target_car_color;
                if (cp != nil)
                {
                    target_car_code = cp.getCarCode();
                    target_car_color = cp.color;
                }
                else
                {
                    target_car_code = gtengine::MSpecDB::NO_CODE;
                    target_car_color = -1;
                }

                var target_name;
                if (dp != nil)
                    target_name = dp.display_name;
                else
                    target_name = "";
                
                if (target_car_code != gtengine::MSpecDB::NO_CODE)
                    CurrentData::CurrentCarName.text = gtengine::MSpecDB::getCarName(target_car_code);
                else
                    CurrentData::CurrentCarName.text = "---";

                if (target_name != "")
                    CurrentData::CurrentUserName.text = target_name;
                else
                    CurrentData::CurrentUserName.text = "---";

                if (best_time != 0)
                    CurrentData::CurrentTimeData.text = pdiext::GetRaceTimeString(best_time);
                else
                    CurrentData::CurrentTimeData.text = "--'--.---";

                CurrentData::Header::DisplayData.active = true;
                ReferenceData::ReferenceTimeData.text = "--'--.---";
            }

            method finalize(context)
            {
                ORG.pauseRace = false;
                pdiext::ProcessUpdateIteration(1000 * 50);
            }

            method setReferenceBestTime(context)
            {
                var datalogger = main::gtengine::MDataLogger();
                var path = datalogger.getReferencePath();

                var best_time = 0;

                var cp, dp;
                if (path != "")
                {
                    var st = pdistd::ReadFile(path, true, 256 * 1024);
                    if (st["result"] != pdistd::FileError::OK)
                        return false;

                    var buf = st["buffer"];
                    var info = gtengine::MReplayInfo();
                    if (!info.initialize(buf))
                        return false;

                    cp = info.getCarParameter();
                    dp = info.getDriverParameter();
                    best_time = info.getBestTime();
                }
                else
                    return false;

                var target_car_code, target_car_color;
                if (cp != nil)
                {
                    target_car_code = cp.getCarCode();
                    target_car_color = cp.color;
                }
                else
                {
                    target_car_code = gtengine::MSpecDB::NO_CODE;
                    target_car_color = -1;
                }

                var target_name;
                if (dp != nil)
                    target_name = dp.display_name;
                else
                    target_name = "";

                if (target_car_code != gtengine::MSpecDB::NO_CODE)
                    ReferenceData::ReferenceCarName.text = gtengine::MSpecDB::getCarName(target_car_code);
                else
                    ReferenceData::ReferenceCarName.text = "---";

                if (target_name != "")
                    ReferenceData::ReferenceUserName.text = target_name;
                else
                    ReferenceData::ReferenceUserName.text = "---";

                if (best_time != 0)
                    ReferenceData::ReferenceTimeData.text = pdiext::GetRaceTimeString(best_time);
                else
                    ReferenceData::ReferenceTimeData.text = "--'--.---";

                ReferenceData::Header::DisplayData.active = true;
                ReferenceData::Header::DisplayData.visible = true;
            }

            module CurrentData::Header::DisplayData
            {
                method onActivate(context)
                {
                    var check = self.active;
                    self.active = !check;
                    Base.dlf.display_own = self.active;
                    Base.dlf2.display_own = self.active;

                    main::sound.play("checkbox");
                    return EVENTRESULT_FILTER;
                }
            }
    
            module ReferenceData::Header::DisplayData
            {
                method onActivate(context)
                {
                    var check = self.active;
                    self.active = !check;
                    Base.dlf.display_ghost = self.active;
                    Base.dlf2.display_ghost = self.active;

                    main::sound.play("checkbox");
                    return EVENTRESULT_FILTER;
                }
            }
        }
    
        module OptionSetting
        {
            module XAxisViewMode::OptionMenu
            {
                method onValueChanged(context)
                {
                    self.pulldownValueChanged(context);
                    Base.dlf.x_axis_v_coord = self.index;
                    Base.dlf2.x_axis_v_coord = self.index;
                }
            }
    
            module Remarks
            {
                module Speed::CheckBox
                {
                    method onActivate(context)
                    {
                        var check = self.active;
                        self.active = !check;
                        Base.dlf.display_speed = self.active;
    
                        main::sound.play("checkbox");
                        return EVENTRESULT_FILTER;
                    }
                }
    
                module EngineRPM::CheckBox
                {
                    method onActivate(context)
                    {
                        var check = self.active;
                        self.active = !check;
                        Base.dlf.display_engine_rpm = self.active;
    
                        main::sound.play("checkbox");
                        return EVENTRESULT_FILTER;
                    }
                }
    
                module SideG::CheckBox
                {
                    method onActivate(context)
                    {
                        var check = self.active;
                        self.active = !check;
                        Base.dlf.display_side_g = self.active;
    
                        main::sound.play("checkbox");
                        return EVENTRESULT_FILTER;
                    }
                }
    
                module FrontG::CheckBox
                {
                    method onActivate(context)
                    {
                        var check = self.active;
                        self.active = !check;
                        Base.dlf.display_front_g = self.active;
    
                        main::sound.play("checkbox");
                        return EVENTRESULT_FILTER;
                    }
                }
    
                module ShiftPos::CheckBox
                {
                    method onActivate(context)
                    {
                        var check = self.active;
                        self.active = !check;
                        Base.dlf2.display_shift_pos = self.active;
    
                        main::sound.play("checkbox");
                        return EVENTRESULT_FILTER;
                    }
                }
    
                module Throttle::CheckBox
                {
                    method onActivate(context)
                    {
                        var check = self.active;
                        self.active = !check;
                        Base.dlf2.display_throttle = self.active;
    
                        main::sound.play("checkbox");
                        return EVENTRESULT_FILTER;
                    }
                }
    
                module Brake::CheckBox
                {
                    method onActivate(context)
                    {
                        var check = self.active;
                        self.active = !check;
                        Base.dlf2.display_brake = self.active;
    
                        main::sound.play("checkbox");
                        return EVENTRESULT_FILTER;
                    }
                }
            }
        }
    }    
}