













module GTModeProject
{
    PROJECT.load("/scripts/gt5/util/gtmode_pack");

    static additional_projects;
    #define ADDITIONAL_PROJECT_NAMES ["user_profile"]

    static additional_sounds;

    static is_online_on_load;

    static DIRECT_CANCEL_BACK = true;

    static friend_list_cache;

    method onLoad(context)
    {
        context.createRenderContext(1);
        var render_context = context.getRenderContext(0);
        
        is_online_on_load = LoginUtil::isOnline();
        friend_list_cache = nil;

        main::CommandAlias::begin();

        ProjectHistoryUtil::DefineVariables(PROJECT, [
            ['LastPageName', ""],

            ['GTModeRoot::FocusWidgetName', ""],
            ['GTModeRoot::lounge_name', ""],

            ['PresentRoot::ReturnPage', ""],

            ['PhotoTravelRoot::FocusIndex', 0],

            ['LicenseRoot::CategoryID', nil],
            ['LicenseRoot::FocusIndex', nil],

            ['FreeRunRoot::TabID', nil],
            ['FreeRunRoot::FocusIndex', 0],

            ['ABspecEventRoot::isBspec', nil],
            ['ABspecEventRoot::GameID', nil],
            ['ABspecEventRoot::EventID', nil],

            ['SpecialEventRoot::EventIndex', nil],
            ['SpecialEventRoot::CategoryID', nil],
            ['SpecialEventRoot::FocusIndex', nil],

            ['GTModeRoot::exp', 0],
            ['GTModeRoot::cash', 0],
            ['GTModeRoot::updateDriverItem', true],
            ['GTModeRoot::friend_count', -1],
            ['GTModeRoot::gt_friend_list_A', nil],
            ['GTModeRoot::gt_friend_list_B', nil],
            ['GTModeRoot::lastextendsession', nil],

            ['GaragePopup::order', "garage_id"],
            ['GaragePopup::by', "ASC"],

            ['ItemPopup::keep_order', false],
            ['ItemPopup::order', "create_date"],
            ['ItemPopup::by', "ASC"],

            ['GTModeRoot::PrivateLounge', false],
            ['GTModeRoot::OpenLounge', false],

            ['SeasonalEventRoot::GameID', nil],
            ['SeasonalEventRoot::EventID', nil],

            ['GTModeRoot::greeting', false],
            ['GTModeRoot::outofservice', true],
        ]);

        SequenceUtil::setPageTransition([
            "*,GTModeProject::GTModeRoot" : CursorProject::GTLogoTransition,
            "GTModeProject::GTModeRoot,*" : CursorProject::GTLogoTransition,
            "*,GTModeProject::UsedCarDealerRoot" : CursorProject::GTLogoTransition,
            "*,GTModeProject::SchoolIntroRoot" : CursorProject::GTLogoTransition
        ]);

        loadProjects();

        additional_sounds = [main::pdiext::MSoundEffect("sound_gt/se/gt5menu.sgd")];

        if (PROJECT.history['GTModeRoot::OpenLounge'])
        {
            PROJECT.history['GTModeRoot::OpenLounge'] = false;
            PROJECT.history['LastPageName'] = "OpenLoungeRoot";
        }

        var start_page = "GTModeRoot";
        var last_page_name = PROJECT.history['LastPageName'];
        if (last_page_name != nil && PROJECT.defined(last_page_name))
        {
            start_page = last_page_name;
            PROJECT.history['LastPageName'] = "";
        }

        PROJECT.history['GTModeRoot::exp'] = 0;
        PROJECT.history['GTModeRoot::cash'] = 0;
        PROJECT.history['GTModeRoot::gt_friend_list_A'] = nil;
        PROJECT.history['GTModeRoot::gt_friend_list_B'] = nil;
        
        PROJECT[start_page].open(render_context);
    }

    method onUnload(update_context)
    {
        unloadProjects();
        main::CommandAlias::end();
        is_online_on_load = nil;
        friend_list_cache = nil;
    }

    function loadProjects()
    {
        additional_projects = Array();

        foreach (var project_name in ADDITIONAL_PROJECT_NAMES)
        {
            var project = main::manager.loadProject("%{main::PROJECT_ROOT_DIR}/%{project_name}/%{project_name}");
            additional_projects.push(project);
        }
    }

    function unloadProjects()
    {
        if (additional_projects == nil)
            return;

        foreach (var project in additional_projects)
        {
            main::manager.unloadProject(project);
        }

        additional_projects = nil;
    }

    function addProject(project_dir_name, project_widget_name)
    {
        if (!__projects__.defined(project_widget_name))
        {
            var project = main::manager.loadProject("%{main::PROJECT_ROOT_DIR}/%{project_dir_name}/%{project_dir_name}");
            additional_projects.push(project);
        }
        else
            ;
    }

    function removeProject(project_widget_name)
    {
        if (__projects__.defined(project_widget_name))
        {
            var keep_projects = [];
            foreach (var project in additional_projects)
            {
                if (project.name == project_widget_name)
                    main::manager.unloadProject(project);
                else
                    keep_projects.push(project);
            }

            additional_projects = keep_projects;
        }
        else
            ;
    }

    function resetActors(widget, reverse, warp)
    {
        for (var current_widget = widget.first_actor; current_widget != nil; current_widget = current_widget.next_actor)
        {
            if (current_widget.isInstanceOf(main::menu::MActor))
            {
                current_widget.stop();
                current_widget.reverse = reverse;

                if (warp)
                    current_widget.reverse = !reverse;

                current_widget.rewind();
                current_widget.start();
            }
        }
    }

    function startActors(widget, reverse)
    {
        for (var current_widget = widget.first_actor; current_widget != nil; current_widget = current_widget.next_actor)
        {
            if (current_widget.isInstanceOf(main::menu::MActor))
            {
                current_widget.stop();
                current_widget.reverse = reverse;
                current_widget.start();
            }
        }
    }

    function warpActors(widget, reverse)
    {
        for (var current_widget = widget.first_actor; current_widget != nil; current_widget = current_widget.next_actor)
        {
            if (current_widget.isInstanceOf(main::menu::MActor))
            {
                current_widget.reverse = reverse;
                current_widget.rewind();
                current_widget.reverse = !reverse;
            }
        }
    }

    function fire(out, widget_list...)
    {
        foreach (var widget in widget_list)
            widget.ScalarInterpolator.out = out;
    }

    function fire2(out, widget)
    {
        widget.ParallelActor.out = out;
    }

    function createDateTimeText2(context, root, create_time)
    {
        var now = pdiext::getBetterTimeLocal();
        var today = pdiext::getBetterTimeLocal();
        today.hour = 0;
        today.minute = 0;
        today.second = 0;

        var yesterday = main::pdistd::MTime();
        yesterday.setBySecond(today.getBySecond() - (60 * 60 * 24));

        var create_time_local = create_time.toLocal();
        var date = "";
        var time = "";
        if (today.getBySecond() < create_time_local.getBySecond())
        {
            var diff = now.getBySecond() - create_time_local.getBySecond();
            if (diff < 60 * 2)
                date = context.translate(root, "DateTime", "DIFF_MINUTE_1");
            else if (diff < 60 * 60)
                date = context.translate(root, "DateTime", "DIFF_MINUTE_2").build(diff / 60);
            else if (diff < 60 * 60 * 2)
                date = context.translate(root, "DateTime", "DIFF_HOUR_1");
            else if (diff < 60 * 60 * 24)
                date = context.translate(root, "DateTime", "DIFF_HOUR_2").build(diff / 60 / 60);
            else
                ;
        }
        else if (yesterday.getBySecond() < create_time_local.getBySecond())
        {
            date = context.translate(root, "DateTime", "YESTERDAY");
            time = "%02d:%02d".format(create_time_local.hour, create_time_local.minute);
        }
        else
        {
            date = context.translate(root, "DateTime", "FORMAT_MONTH_DAY")
                .build(
                    context.translate(root, "DateTime", "MONTH_SHORT_%02d".format(create_time_local.month)),
                    context.translate(root, "DateTime", "DAY_%02d".format(create_time_local.day))
                );
                
            time = "%02d:%02d".format(create_time_local.hour, create_time_local.minute);
        }

        return [date, time];
    }

    function getDateTime(context, root, d)
    {
        var time = main::pdistd::MTime();
        time.setBySecond(d);
        return getDateTime2(context, root, time);
    }

    function getDateTime2(context, root, time)
    {
        var local_time = time.toLocal();
        return context.translate(root, "DateTime", "FORMAT_DATE_TIME")
                .build(
                    local_time.year,
                    "%02d".format(local_time.month),
                    "%02d".format(local_time.day),
                    "%02d".format(local_time.hour),
                    "%02d".format(local_time.minute),
                );
    }

    function ignorePadEvent(bool)
    {
        if (bool)
        {
            CursorUtil::setCursor(ContextMain, "wait");
            ContextMain.event_mask = 5;
            ContextMain.disableInput();
            ContextMain.filterKeyEvent();
        }
        else
        {
            CursorUtil::setCursor(ContextMain, "cursor_chrome");
            ContextMain.event_mask = 5;
            ContextMain.enableInput();
        }
    }

    function QUERY(context, root, msg)
    {
        return DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(root, "MyHome", msg));
    }

    function QUERY1(context, root, msg, arg)
    {
        return DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(root, "MyHome", msg).build(arg));
    }

    function QUERY2(context, root, msg, arg1, arg2)
    {
        return DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(root, "MyHome", msg).build(arg1, arg2));
    }

    function QUERY_D_NO(context, root, msg, arg)
    {
        return DialogUtil::openConfirmDialog(context, DialogUtil::DEFAULT_NO, context.translate(root, "MyHome", msg));
    }

    function QUERY1_D_NO(context, root, msg, arg)
    {
        return DialogUtil::openConfirmDialog(context, DialogUtil::DEFAULT_NO, context.translate(root, "MyHome", msg).build(arg));
    }

    function OK_AUTO_CLOSE(context, root, msg)
    {
        DialogUtil::openConfirmDialogAutoClose(context, DialogUtil::OK, context.translate(root, "MyHome", msg))
    }

    function OK(context, root, msg)
    {
        DialogUtil::openConfirmDialog(context, DialogUtil::OK, context.translate(root, "MyHome", msg))
    }

    function OK1(context, root, msg, arg)
    {
        DialogUtil::openConfirmDialog(context, DialogUtil::OK, context.translate(root, "MyHome", msg).build(arg))
    }

    function ERROR(context, root, msg)
    {
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(root, "MyHome", msg))
    }

    function ERROR1(context, root, msg, arg)
    {
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(root, "MyHome", msg).build(arg))
    }

    function INFORMATION(context, root, msg)
    {
        DialogUtil::openInformationDialog(context, context.translate(root, "MyHome", msg))
    }

    function INFORMATION1(context, root, msg, arg)
    {
        DialogUtil::openInformationDialog(context, context.translate(root, "MyHome", msg).build(arg))
    }

    function NOT_IMPLEMENTED_YET(context)
    {
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, "NOT IMPLEMENTED YET")
    }

    function INTRODUCTION(context, root, msg)
    {
        DialogUtil::openInformationDialog(context, context.translate(root, "IntroductionGT5", msg));
    }

    function REQUEST_ERROR(context, root, msg, request)
    {
        var text = context.translate(root, "MyHome", msg);
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, Grim2Util::makeRequestError(context, root, text, request));
    }

    function getFriendList(context)
    {
        if (!LoginUtil::isOnline())
            return [];

        if (friend_list_cache == nil)
        {
            var user_id = Grim2.getLoginUserId();
            var request = main::UserProfile2.requestUserProfile(user_id, function(args) {});
            if (Grim2Util::__deprecated__join__(context, request))
            {
                var u = main::UserProfile2.decodeUserProfile(request);
                var gt_friend_id_list_csv = u["gt_friend_list"];
                if (gt_friend_id_list_csv != "")
                {
                    friend_list_cache = gt_friend_id_list_csv.split(", ");
                }
            }
        }

        return friend_list_cache == nil ? [] : friend_list_cache;
    }

    static sAwardCars = [
        "miura_p400_proto_67" : "award_pebblebeach_2008",
        "tz2_1965" : "award_pebblebeach_2009",
        "aem_s2000_xx" : "award_semashow_2005",
        "art_morrison_corvette_60" : "award_semashow_2006",
        "hpa_ft565_tt_07" : "award_semashow_2007",
        "hep_g37_08" : "award_semashow_2008",
        "gtg_70_mustang_trans_cammer_xx" : "award_semashow_2009",
        "buick_special_62" : "award_semashow",
        "hpa_golf_r32_04" : "award_semashow",
    ];

    static sMazioraCars = [
        "ft_86_g_sports_concept_10" : "special_maziora"
    ];

    function getSpecialLogoPath(car_code, award, maziora)
    {
        var car_label = gtengine::MSpecDB::getCarLabel(car_code);
        var award_logo = sAwardCars[car_label];
        var maziora_logo = sMazioraCars[car_label];

        var special_logo;
        if (maziora != false && maziora_logo != nil)
            special_logo = maziora_logo;

        if (award != false && award_logo != nil)
            special_logo = award_logo;

        if (special_logo != nil)
            return "image/gt5/other/%{special_logo}.dds";
        else
            return "";
    }

    function playBackHomeSound()
    {
        sound.play("return");
    }

    function saveNow(context)
    {
        GAME_STATUS.user_profile.context.need_save = SaveDataUtilGT5::STATUSCODE::CHECK_SAVE;
        var res = SaveDataUtilGT5::saveEveryWhere(context);
        if (!res)
            SaveDataUtilGT5::checkSaveEveryWhere(context);
    }

    function getDistanceText(context, running_km)
    {
        var km_mile;
        var unit_text;
        if (GAME_STATUS.user_profile.option.unit_velocity)
        {
            unit_text = context.translate(PROJECT, "Unit", "LENGTH_MILE");
            km_mile = running_km / 1.6;
        }
        else
        {
            unit_text = context.translate(PROJECT, "Unit", "LENGTH_KILOMETER");
            km_mile = running_km;
        }

        if (km_mile > 999999.9)
            km_mile = 999999.94;

        var km_mile_text = pdiext::GetNumberString(10 * km_mile, 1);
        return km_mile_text + " " + unit_text;
    }

    function setPhotoImage(context, photo_id, image_face)
    {
        if (photo_id == "")
        {
            image_face.image_path = "";
            return;
        }

        var image_path = Photo.getImagePath(photo_id);
        if (pdistd::Exist(image_path))
            image_face.image_path = image_path;
        else
        {
            Photo.requestImage(photo_id, function(args)
            {
                |var context, var request| = args;
                if (request.isDone())
                {
                    image_face.image_path = image_path;
                }
            });
        }
    }

    function nl2space(s)
    {
        if (s == "")
            return s;

        var language = pdistd::MLocale::getLanguage();
        if (language == "JP" || language == "TW")
            return s.split("\n").join("");
        else
            return s.split("\n").join(" ");
    }
}