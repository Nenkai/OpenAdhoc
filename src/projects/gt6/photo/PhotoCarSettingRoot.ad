











module ROOT
{
    static sFirstScrollItem = nil;
    static sLastScrollItem = nil;
    
    attribute openSimply_result;

    method _openSimply_activated()
    {
        self.openSimply_result = true;
    }

    method _openSimply_closed()
    {
        if (self.openSimply_result == nil)
            self.openSimply_result = false;
    }

    class Data
    {
        attribute scene;
        attribute base_root;
        attribute stear;
        attribute light;
        attribute break_lamp;
        attribute activate_sound;
        attribute cb_closed;
        attribute cb_instance;
        attribute modal_page;
        attribute result;

        method __init__(scene, stear, light, break_lamp, base_root)
        {
            self.scene = scene;
            self.stear = stear;
            self.light = light;
            self.break_lamp = break_lamp;
            self.base_root = base_root;
            self.activate_sound = "ok";
        }

        method open(context)
        {
            self.result = false;
            self.modal_page = SequenceUtil::ModalPage(context, ROOT);
            self.modal_page.open();
        }

        method close(context)
        {
            if (self.cb_closed != nil)
                (self.cb_instance.*self.cb_closed)(context, self.result);

            if (self.modal_page != nil)
            {
                self.modal_page.close();
                self.modal_page = nil;
            }
        }
    }

    attribute sData;

    method open(context, data)
    {
        self.sData = *data;
        ROOT::FadeActor.out = true;
        ROOT::FadeActor.warp();

        self.sData.open(context);
    }

    method close(context)
    {
        context.target_widget = nil;

        ROOT.setFocus(nil);
        ROOT::FadeActor.out = true;

        context.sync(0.25);
        self.sData.close(context);
    }

    method abort(context)
    {
        if (self.sData != nil)
        {
            self.close(context);
            self.sData = nil;
        }
    }

    method execCommand(command)
    {
        if (self.sData != nil)
            self.sData.scene.execCommand(command);
    }

    method startSwitchingFade(context)
    {
        if (self.sData != nil)
            self.sData.base_root.startSwitchingFade(context, true);
    }

    method endSwitchingFade(context)
    {
        if (self.sData != nil)
            self.sData.base_root.endSwitchingFade(context, true);
    }

    method isUnderSetup()
    {
        if (self.sData != nil)
            return self.sData.base_root.isUnderSetup();

        return false;
    }

    method onInitialize(context)
    {
        ROOT.navigate_insensitive = true;

        OptionMenuUtil::initialize(context, ROOT, Pane::ScrolledWindow::ScrollClip::space::Light::OptionMenu, hidden::Item,
            ["LIGHT_OFF", "LIGHT_POSITION", "LIGHT_LOW", "LIGHT_HIGH"], "PhotoMode");

        self.reflect(context);
        Pane::ScrolledWindow::ScrollClip.scroll_mode = 0;
        Pane::ScrolledWindow::ScrollClip.space.y = 0.0;
        Pane::ScrolledWindow::ScrollClip.updateGeometry();
        var child_cnt = Pane::ScrolledWindow::ScrollClip::space.countChild();

        for (var i = 0; i < child_cnt; i++)
        {
            var w = Pane::ScrolledWindow::ScrollClip::space.getChild(i);
            if (w.visible)
            {
                var s = nil;
                if (w.defined('slider'))
                    s = w['slider'];

                if (w.defined('OptionMenu'))
                    s = w['OptionMenu'];

                if (w.defined('Button'))
                    s = w['Button'];

                if (self.sFirstScrollItem == nil)
                    ROOT::sFirstScrollItem = s;

                ROOT::sLastScrollItem = s;
            }
        }
    }

    method onFinalize(context)
    {
        OptionMenuUtil::finalize(context, Pane::ScrolledWindow::ScrollClip::space::Light::OptionMenu);
    }

    method reflect(context)
    {
        Pane::ScrolledWindow::ScrollClip::space::Steering::slider.range = [-35, 35];

        Pane::ScrolledWindow::ScrollClip::space::Steering::slider.index = self.sData.stear;
        Pane::ScrolledWindow::ScrollClip::space::Steering::slider.setup(context);
        Pane::ScrolledWindow::ScrollClip::space::Steering.visible = true;

        Pane::ScrolledWindow::ScrollClip::space::Light::OptionMenu.setIndex(context, self.sData.light - 1);
    }

    method apply(context)
    {
        self.sData.stear = Pane::ScrolledWindow::ScrollClip::space::Steering::slider.index;
        self.sData.light = Pane::ScrolledWindow::ScrollClip::space::Light::OptionMenu.index + 1;
    }

    method onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case CELL_PAD_CTRL_TRIANGLE:
                main::sound.play("cancel");
                ROOT.apply(context);
                ROOT.close(context);
                return EVENTRESULT_FILTER;

                break;
        }

        return EVENTRESULT_CONTINUE;
    }

    module Pane::ScrolledWindow::ScrollClip::space::Steering::slider
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);
            var command = "setCarSteer %d".format(self.index);
            ROOT.execCommand(command);
        }

        method onPopupClosed(context)
        {
            __prototype__::onPopupClosed(context);
            var slider = Pane::ScrolledWindow::ScrollClip::space::Steering::slider;

            if (!slider.cancel)
                main::sound.play("ok");
            else
                main::sound.play("cancel");

            return EVENTRESULT_FILTER;
        }
    }

    module Pane::ScrolledWindow::ScrollClip::space::Light::OptionMenu
    {
        method onValueChanged(context)
        {
            __prototype__::onValueChanged(context);
            
            static LampCommand = [
                "setCarLampMode off",
                "setCarLampMode position",
                "setCarLampMode lowbeam",
                "setCarLampMode highbeam"
            ];

            var command = LampCommand[self.index];
            ROOT.execCommand(command);
        }
    }

    module Pane::ScrolledWindow::ScrollClip::space::Direction::vbox::Button
    {
        static sReverseActive = false;

        method onActivate(context)
        {
            if (sReverseActive)
                return;

            main::sound.play("ok");
            sReverseActive = true;

            ROOT.startSwitchingFade(context);
            ROOT.execCommand("reqWalkObjectCarYReverse");

            while (ROOT.isUnderSetup())
                pdiext::ProcessUpdateIteration();

            ROOT.endSwitchingFade(context);
            context.sync(0.5);

            context.filterKeyEvent();

            sReverseActive = false;
        }
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        ROOT.apply(context);
        ROOT.close(context);
        return EVENTRESULT_FILTER;
    }
}

module ROOT::Pane::Button
{
    method onKeyPress(context, event)
    {
        var status = 0;
        if (event.keysym == CELL_PAD_CTRL_L3_UP)
        {
            ROOT.setFocus(ROOT::sLastScrollItem);
            status = 1;
        }

        if (event.keysym == CELL_PAD_CTRL_L3_DOWN)
        {
            status = 1;
        }

        return status;
    }
}

module ROOT::Pane::FootRow::OK
{
    function onActivate(context)
    {
        main::sound.play(PhotoCarSettingRoot.sData.activate_sound);
        PhotoCarSettingRoot.sData.result = true;
        PhotoCarSettingRoot.apply(context);
        PhotoCarSettingRoot.close(context);
        return EVENTRESULT_STOP;
    }
}
