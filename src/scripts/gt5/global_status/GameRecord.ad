

//---------------------------------------------------------------------------------------
// GameRecord.ad
//
// Creates the save profile entity
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module main::GameRecord
{
    function clearInitializer()
    {
        undef CreateStructure;
        undef Initialize;
        undef clearInitializer;
    }

    function CreateStructure()
    {
        var st_license = STStructure("LicenseImpl");
        main::GameRecord.defineModule(st_license);

        var st_special_event = STStructure("SpecialEventImpl");
        main::GameRecord.defineModule(st_special_event);

        var st_aspec_race = STStructure("AspecRaceImpl");
        main::GameRecord.defineModule(st_aspec_race);

        var st_bspec_race = STStructure("BspecRaceImpl");
        main::GameRecord.defineModule(st_bspec_race);

        var st_event_present = STStructure("EventPresentImpl");
        main::GameRecord.defineModule(st_event_present);

        var st_seasonal_event = STStructure("SeasonalEventImpl");
        main::GameRecord.defineModule(st_seasonal_event);

        var st_academy_event = STStructure("AcademyEventImpl");
        main::GameRecord.defineModule(st_academy_event);

        var st_academy_playlog = STStructure("AcademyPlaylogImpl");
        main::GameRecord.defineModule(st_academy_playlog);

        var st = STStructure("Impl");
        main::GameRecord.defineModule(st);

        st.define("license", st_license);
        st.define("special_event", st_special_event);
        st.define("aspec_race", st_aspec_race);
        st.define("bspec_race", st_bspec_race);
        st.define("event_present", st_event_present);
        st.define("seasonal_event", st_seasonal_event);
        st.define("academy_event", st_academy_event);
        st.define("academy_playlog", st_academy_playlog);

        st.define("present_10cars", STInt());
        st.define("present_30cars", STInt());
        st.define("present_30days", STInt());
        st.define("present_aspec_running_km", STUInt());
        st.define("present_aspec_race_complete", STUInt());
        st.define("present_table_version", STInt());

        DefineMethod();

        return st;
    }

    function Initialize(instance)
    {
        var sqlite = GlobalStatus::getSqlite();
        var sql_list = [
            "CREATE TABLE IF NOT EXISTS t_license (license_id INTEGER, license_index INTEGER, category INTEGER, category_index INTEGER, result INTEGER, best_time INTEGER, best_score INTEGER, best_order INTEGER, PRIMARY KEY (license_id))",
            "CREATE TABLE IF NOT EXISTS t_special_event (special_event_id INTEGER, event_type INTEGER, category INTEGER, category_index INTEGER, record_type INTEGER, result INTEGER, best_time INTEGER, best_score INTEGER, best_order INTEGER, game_id INTEGER, PRIMARY KEY (special_event_id))",
            "CREATE TABLE IF NOT EXISTS t_aspec_race (event_id INTEGER, category INTEGER, result INTEGER, record_type INTEGER, game_id INTEGER , PRIMARY KEY (event_id))",
            "CREATE TABLE IF NOT EXISTS t_bspec_race (event_id INTEGER, category INTEGER, result INTEGER, record_type INTEGER, game_id INTEGER , PRIMARY KEY (event_id))",
            "CREATE TABLE IF NOT EXISTS t_event_present (present_id INTEGER NOT NULL, eventtype_id INTEGER, type_id INTEGER, category_id INTEGER, gameitem_id INTEGER, carcode TEXT, messagecode TEXT, function_name TEXT, argument0 TEXT, argument1 INTEGER, argument2 INTEGER, argument3 INTEGER, argument4 INTEGER, get_flag INTEGER, PRIMARY KEY (present_id))",
            "DROP INDEX IF EXISTS t_event_present",
            "CREATE INDEX t_event_present_idx1 ON t_event_present (argument0)",
        ];

        foreach (var sql in sql_list)
        {
            var res = sqlite.execute0(sql);
            DB_ASSERT(res == SQLITE_OK, res);
        }

        LicenseUtil::initializeRecord();
        SpecialEventUtil::initializeGameRecord();
        ABspecUtil::initializeAspecRecord();
        ABspecUtil::initializeBspecRecord();
        EventPresentUtil::initializeEventPresent();

        instance.present_10cars = 0;
        instance.present_30cars = 0;
        instance.present_30days = 0;
        instance.present_aspec_running_km = 0;
        instance.present_aspec_race_complete = 0;
        instance.present_table_version = 0;
    }

    function Finalize(instance)
    {

    }

    function addInitialize(instance)
    {
        EventPresentUtil::addInitialize104(instance);
        EventPresentUtil::addInitialize107(instance);
        EventPresentUtil::addInitialize108(instance);
        EventPresentUtil::addInitialize110(instance);
        EventPresentUtil::addInitialize200(instance);
        EventPresentUtil::addInitialize201(instance);
        EventPresentUtil::addInitialize202(instance);

        var sqlite = GlobalStatus::getSqlite();
        var res = sqlite.execute0("CREATE TABLE IF NOT EXISTS t_seasonal_event (event_id INTEGER, result INTEGER, best_time INTEGER, best_score INTEGER, best_order INTEGER, PRIMARY KEY (event_id))");
        DB_ASSERT(res == SQLITE_OK, res);

        res = sqlite.execute0("CREATE TABLE IF NOT EXISTS t_academy_event (event_id INTEGER, result INTEGER, best_time INTEGER, best_score INTEGER, best_order INTEGER, PRIMARY KEY (event_id))");
        DB_ASSERT(res == SQLITE_OK, res);

        res = sqlite.execute0("CREATE TABLE IF NOT EXISTS t_academy_playlog (event_id INTEGER, start_session INTEGER, disqualify INTEGER, PRIMARY KEY (event_id))");
        DB_ASSERT(res == SQLITE_OK, res);

    }

    function DefineMethod()
    {
        module Impl
        {
            method apply()
            {

            }

            method getAchievement()
            {
                | var license_count, var license_total| = getLicenseAchievement();
                | var aspec_count, var aspec_total| = getABspecAchievement("aspec");
                | var bspec_count, var bspec_total| = getABspecAchievement("bspec");

                var count = license_count + aspec_count + bspec_count;
                var total = license_total + aspec_total + bspec_total;
                if (total == 0)
                    return 0;

                return (100 * count) / total;
            }

            method getLicenseAchievement()
            {
                var sqlite = GlobalStatus::getSqlite();
                var res1 = sqlite.executeQuery("SELECT COUNT (*) FROM t_license");
                var total = getResult1(res1);
                var res2 = sqlite.executeQuery("SELECT COUNT (*) FROM t_license WHERE result > -1");
                var count = getResult1(res2);
                return [count, total];
            }

            method getABspecAchievement(abspec)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res1 = sqlite.executeQuery("SELECT COUNT (*) FROM t_%{abspec}_race WHERE record_type != 2");
                var total = getResult1(res1);
                var res2 = sqlite.executeQuery("SELECT COUNT (*) FROM t_%{abspec}_race WHERE result = 0 AND record_type != 2");
                var count = getResult1(res2);
                return [count, total];
            }

            method getResult1(res)
            {
                if (res.size == 0)
                    return 0;

                var row = res[0];
                if (row.size == 0)
                    return 0;

                return res[0][0];
            }
        }

        module LicenseImpl
        {
            method isInitialized(is_bspec)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT COUNT (*) FROM t_license");
                return res.size > 0 && res[0].size > 0 && res[0][0] > 0;
            }

            method initialize()
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "INSERT INTO t_license VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                var result = -1;
                var best_time = pdiext::MAX_LAPTIME1000;
                var best_score = 0;
                var best_order = -1;
                var sql_list = Array();
                var index = 0;

                for (var category = 0; category < LicenseUtil::CATEGORY::MAX; ++category)
                {
                    var license_count = LicenseUtil::GetLicenseCountOfCategory(category);

                    for (var category_index = 0; category_index < license_count; ++category_index, ++index)
                        sql_list.push([sql, [LicenseUtil::LicenseId[index], index, category, category_index, result, best_time, best_score, best_order]]);
                }

                var res = sqlite.executeTransaction(sql_list);
                DB_ASSERT(res == SQLITE_DONE, res);
                return res;
            }

            method getResult(license_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT result, best_time, best_score, best_order FROM t_license WHERE license_id = ?",
                                               [license_id]);

                if (res.size > 0)
                    return res[0];

                return [-1, main::pdiext::MAX_LAPTIME1000, 0, -1];
            }

            method getCategoryResult(category)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT MIN (result), MAX (result) FROM t_license WHERE category = ?",
                                               [category]);

                var min = res[0][0];
                if (min == nil || min == -1)
                    return -1;

                var max = res[0][1];
                return max;
            }

            method getCategoryResultBGS(category, cup)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT MIN (result), MAX (result) FROM t_license WHERE category = ?",
                                               [category]);

                var min = res[0][0];
                var max = res[0][1];

                return min != -1 && max != -1 && min <= cup && max <= cup;
            }

            method updateResult(license_id, result, eval_type, best_time, best_score, best_order)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res;
                if (eval_type == gtengine::EvalType::TIME)
                {
                    res = sqlite.execute("UPDATE t_license SET result = ?, best_time = ? WHERE license_id = ? AND (result = -1 OR result > ? OR best_time > ?)",
                                                [result, best_time, license_id, result, best_time]);
                }
                else if (eval_type == gtengine::EvalType::DRIFT)
                {
                    res = sqlite.execute("UPDATE t_license SET result = ?, best_score = ? WHERE license_id = ? AND (result = -1 OR result > ? OR best_score < ?)",
                                                [result, best_score, license_id, result, best_score]);
                }
                else if (eval_type == gtengine::EvalType::ORDER)
                {
                    res = sqlite.execute("UPDATE t_license SET result = ?, best_order = ? WHERE license_id = ? AND (result = -1 OR result > ? OR best_order > ?)",
                                        [result, best_order, license_id, result, best_order]);
                }
                else
                    ;

                return res;
            }

            method updateResultOnly(license_id, result)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.execute("UPDATE t_license SET result = ? WHERE license_id = ? AND (result = -1)", [result, license_id]);
                return res;
            }

            method updateScoreOnly(license_id, eval_type, best_time, best_score, best_order)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res;
                if (eval_type == gtengine::EvalType::TIME)
                {
                    res = sqlite.execute("UPDATE t_license SET best_time = ? WHERE license_id = ? AND (best_time > ?)",
                                        [best_time, license_id, best_time]);
                }
                else if (eval_type == gtengine::EvalType::DRIFT)
                {
                    res = sqlite.execute("UPDATE t_license SET best_score = ? WHERE license_id = ? AND (best_score < ?)",
                                        [best_score, license_id, best_score]);
                }
                else if (eval_type == gtengine::EvalType::ORDER)
                {
                    res = sqlite.execute("UPDATE t_license SET best_order = ? WHERE license_id = ? AND (best_order > ?)",
                                        [best_order, license_id, best_order]);
                }
                else
                    ;

                return res;
            }

            method all()
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT * FROM t_license ORDER BY license_index");
                return res;
            }

            method getCountOfResult()
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT result, COUNT (*) FROM t_license WHERE result > -1 GROUP BY result ORDER BY result");
                return res;
            }
        }

        module SpecialEventImpl
        {
            method isInitialized(is_bspec)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT COUNT (*) FROM t_special_event");
                return res.size > 0 && res[0].size > 0 && res[0][0] > 0;
            }

            method initialize()
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "INSERT INTO t_special_event VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                var result = -1;
                var best_time = pdiext::MAX_LAPTIME1000;
                var best_score = 0;
                var best_order = -1;
                var sql_list = Array();
                var index = 0;
                
                var event_list = SpecialEventUtil::loadXml();
                for (var i = 0; i < event_list.size; i++)
                {
                    var record = event_list[i];
                    sql_list.push([sql, [record[0], record[1], record[2], record[3], 0, result, best_time, best_score, best_order, record[4]]]);
                }

                var res = sqlite.executeTransaction(sql_list);
                DB_ASSERT(res == SQLITE_DONE, res);
                return res;
            }

            method getResult(event_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT result, best_time, best_score, best_order FROM t_special_event WHERE special_event_id = ?",
                                               [event_id]);

                if (res.size > 0)
                    return res[0];

                return [-1, pdiext::MAX_LAPTIME1000, 0, -1];
            }

            method getCategoryResult(category)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT MIN (result), MAX (result) FROM t_special_event WHERE category = ?",
                                               [category]);

                var min = res[0][0];
                if (min == nil || min == -1)
                    return -1;

                var max = res[0][1];
                return max;
            }

            method getCategoryResultBSG(eventtype, category, result)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT game_id FROM t_special_event "
                                              "WHERE event_type = ? AND category = ? AND ( result > ? OR result = -1 ) AND record_type = 0",
                                               [eventtype, category, result]);

                if (res.size > 0 && res[0].size > 0)
                    return res;

                return nil;
            }

            method getEventTypeResultBSG(eventtype, result)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT game_id FROM t_special_event "
                                              "WHERE event_type = ? AND ( result > ? OR result = -1 ) AND record_type = 0",
                                               [eventtype, result]);

                if (res.size > 0 && res[0].size > 0)
                    return res;

                return nil;
            }

            method getEventTypeResult(event_type)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT MIN (result), MAX (result) FROM t_special_event WHERE event_type = ?",
                                               [event_type]);

                var min = res[0][0];
                if (min == nil || min == -1)
                    return -1;

                var max = res[0][1];
                return max;
            }

            method updateResult(special_event_id, result, eval_type, best_time, best_score, best_order)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res;
                if (eval_type == gtengine::EvalType::TIME)
                {
                    res = sqlite.execute("UPDATE t_special_event SET result = ?, best_time = ? WHERE special_event_id = ? AND (result = -1 OR result > ? OR best_time > ?)",
                                                [result, best_time, special_event_id, result, best_time]);
                }
                else if (eval_type == gtengine::EvalType::DRIFT)
                {
                    res = sqlite.execute("UPDATE t_special_event SET result = ?, best_score = ? WHERE special_event_id = ? AND (result = -1 OR result > ? OR best_score < ?)",
                                                [result, best_score, special_event_id, result, best_score]);
                }
                else if (eval_type == gtengine::EvalType::ORDER)
                {
                    res = sqlite.execute("UPDATE t_special_event SET result = ?, best_order = ? WHERE special_event_id = ? AND (result = -1 OR result > ? OR best_order > ?)",
                                        [result, best_order, special_event_id, result, best_order]);
                }
                else
                    ;

                return res;
            }
        }

        module AspecRaceImpl
        {
            module RecordType
            {
                static SingleEvent = 0;
                static Championship = 1;
                static SpotEntry = 2;
            }

            method getTableName()
            {
                return "t_aspec_race";
            }

            method isInitialized()
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT COUNT (*) FROM %{table_name}");
                return res.size > 0 && res[0].size > 0 && res[0][0] > 0;
            }

            method initialize()
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var sql = "INSERT INTO %{table_name} VALUES (?, ?, ?, ?, ?)";
                var sql_list = Array();
                var result = -1;
                var game_ids = ABspecUtil::getGameIds(false);
                var game_data_map = ABspecUtil::getGameDataMap(false);

                foreach (var game_id in game_ids)
                {
                    var game_data = game_data_map[game_id];
                    var category = ABspecUtil::getCategory(game_id);
                    var is_championship = game_data["is_championship"].toBool();
                    if (is_championship)
                    {
                        var event_id = ABspecUtil::getChampionshipEventId(game_id);
                        sql_list.push([sql, [event_id, category, result, RecordType::Championship, game_id]]);
                    }

                    var record_type = is_championship ? RecordType::SpotEntry : RecordType::SingleEvent;
                    if (record_type == nil)
                        record_type = ABspecUtil::RecordType::SingleEvent;

                    var event_count = game_data["event_count"];
                    for (var i = 0; i < event_count; i++)
                    {
                        var event_id = ABspecUtil::getEventId2(game_id, i);
                        sql_list.push([sql, [event_id, category, result, record_type, game_id]])
                    }

                }

                var res = sqlite.executeTransaction(sql_list);
                DB_ASSERT(res == SQLITE_DONE, res);
                return res;
            }

            method getEventResult(event_id)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT result FROM %{table_name}"
                                             " " 
                                             "WHERE event_id = ?",
                                              [event_id]);

                if (res.size > 0)
                    return res[0][0];

                return -1;
            }

            method getGameResult(game_id)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var target_min = game_id * 100;
                var target_max = target_min + 99;

                var res = sqlite.executeQuery("SELECT MIN (result), MAX (result) FROM %{table_name}"
                                             " " 
                                             "WHERE event_id BETWEEN ? AND ? AND NOT record_type = %{RecordType::SpotEntry}",
                                              [target_min, target_max]);

                var min = res[0][0];
                if (min == nil || min == -1)
                    return -1;

                var max = res[0][1];
                return max;
            }

            method getCategoryResult(category)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT MIN (result), MAX (result) FROM %{table_name}"
                                              " "
                                              "WHERE category = ? AND NOT record_type = %{RecordType::SpotEntry}",
                                               [category]);

                var min = res[0][0];
                if (min == nil || min == -1)
                    return -1;
                
                var max = res[0][1];
                return max;
            }

            method getCategoryResultBSG(category, result)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT game_id FROM %{table_name}"
                                              " "
                                              "WHERE category = ? AND ( result > ? OR result = -1 ) AND record_type <> %{RecordType::SpotEntry}",
                                               [category, result]);

                if (res.size > 0 && res[0].size > 0)
                    return res;

                return nil;
            }

            method updateEventResult(event_id, result)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.execute("UPDATE %{table_name} SET result = ? WHERE event_id = ? AND (result = -1 OR result > ?)",
                               [result, event_id, result]);

                return res;
            }

            method all()
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT * FROM %{table_name} ORDER BY event_id");
                return res;
            }
        }

        module BspecRaceImpl
        {
            method getTableName()
            {
                return "t_bspec_race";
            }

            import AspecRaceImpl::RecordType;
            import AspecRaceImpl::isInitialized;
            import AspecRaceImpl::getEventResult;
            import AspecRaceImpl::getGameResult;
            import AspecRaceImpl::getCategoryResult;
            import AspecRaceImpl::getCategoryResultBSG;
            import AspecRaceImpl::updateEventResult;
            import AspecRaceImpl::all;

            method initialize()
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var sql = "INSERT INTO %{table_name} VALUES (?, ?, ?, ?, ?)";
                var sql_list = Array();
                var result = -1;
                var game_ids = ABspecUtil::getGameIds(true);
                var game_data_map = ABspecUtil::getGameDataMap(true);

                foreach (var game_id in game_ids)
                {
                    var game_data = game_data_map[game_id];
                    var category = ABspecUtil::getCategory(game_id);
                    var is_championship = game_data["is_championship"].toBool();
                    if (is_championship)
                    {
                        var event_id = ABspecUtil::getChampionshipEventId(game_id);
                        sql_list.push([sql, [event_id, category, result, RecordType::Championship, game_id]]);
                    }

                    var record_type = is_championship ? RecordType::SpotEntry : RecordType::SingleEvent;
                    if (record_type == nil)
                        record_type = ABspecUtil::RecordType::SingleEvent;

                    var event_count = game_data["event_count"];
                    for (var i = 0; i < event_count; i++)
                    {
                        var event_id = ABspecUtil::getEventId2(game_id, i);
                        sql_list.push([sql, [event_id, category, result, record_type, game_id]])
                    }

                }

                var res = sqlite.executeTransaction(sql_list);
                DB_ASSERT(res == SQLITE_DONE, res);
                return res;
            }
        }

        module EventPresentImpl
        {
            module RecordType
            {
                static ASPEC_LEVEL = 1;
                static BSPEC_LEVEL = 2;
                static ASPEC_EVENT = 3;
                static BSPEC_EVENT = 4;
                static ABSPEC_EVENT = 5;
                static AEVENT_ALLCLEAR = 6;
                static BEVENT_ALLCLEAR = 7;
                static ABEVENT_ALLCLEAR = 8;
                static LICENSE = 9;
                static SPECIAL_EVENT = 10;
                static GAME_XDAY = 11;
                static INTRODUCTION = 12;
                static UNLOCK = 13;
                static ONLINE_EVENT = 14;
                static SEASONAL_EVENT = 15;
                static PATCH_EVENT = 16;
                static SEASONAL_EVENT_F = 17;
            }

            method getTableName()
            {
                return "t_event_present";
            }

            method isInitialized()
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT COUNT (*) FROM %{table_name}");
                return res.size > 0 && res[0].size > 0 && res[0][0] > 0;
            }

            method initialize(item_list)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var sql_list = [];

                foreach (var item in item_list)
                {
                    var sql = "INSERT INTO %{table_name} VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,0)";
                    sql_list.push([sql, [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10], item[11], item[12]]]);
                }

                var res = sqlite.executeTransaction(sql_list);
                DB_ASSERT(res == SQLITE_DONE, res);
                return res;
            }

            method initialize104(item_list)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var sql_list = [];

                foreach (var item in item_list)
                {
                    var sql = "UPDATE %{table_name} SET get_flag=0, argument4=?, type_id=?, category_id=?, gameitem_id=?, carcode=? WHERE present_id=?";
                    sql_list.push([sql, [item[12], item[2], item[3], item[4], item[5], item[0]]]);
                }

                var res = sqlite.executeTransaction(sql_list);
                res != SQLITE_DONE;

                return res;
            }

            method initialize107(item_list)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var sql_list = [];

                foreach (var item in item_list)
                {
                    var sql = "INSERT INTO %{table_name} VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,0)";
                    sql_list.push([sql, [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10], item[11], item[12]]]);
                }

                var res = sqlite.executeTransaction(sql_list);
                res != SQLITE_DONE;

                return res;
            }

            method insert(item)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();

                var sql_list = [];
                var sql = "INSERT INTO %{table_name} VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,0)";
                sql_list.push([sql, [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10], item[11], item[12]]]);
                
                var res = sqlite.executeTransaction(sql_list);
                DB_ASSERT(res == SQLITE_DONE, res);
                return res;
            }

            method updateSeasonalEventRecord(present_id, result)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var sql_list = [];

                var sql = "UPDATE %{table_name} SET argument1=? WHERE present_id = ?";
                sql_list.push([sql, [result, present_id]]);

                var res = sqlite.executeTransaction(sql_list);
                if (res == SQLITE_DONE && sqlite.changes() == 0)
                    return false;

                DB_ASSERT(res == SQLITE_DONE, res);
                return true;
            }

            method getSeasonalEventResolt(game_id)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT argument1 FROM %{table_name}"
                                              " "
                                              " WHERE eventtype_id = ? AND present_id = ?",
                                              [RecordType::SEASONAL_EVENT, game_id]);

                if (res.size > 0 && res[0].size > 0)
                    return res[0][0];

                return nil;
            }

            method checkEventFolderClear(present_id)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT present_id FROM %{table_name}"
                                              " "
                                              " WHERE eventtype_id = ? AND present_id = ? AND get_flag = 1",
                                              [RecordType::SEASONAL_EVENT_F, present_id]);

                if (res.size > 0 && res[0].size > 0)
                    return true;

                return false;
            }

            method insertEventFolderClear(present_id, item)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var sql_list = [];
                var sql = "INSERT INTO %{table_name} VALUES (?,?,?,?,?,?,?,?,?,0,0,0,0,1)";
                sql_list.push([sql, [present_id, RecordType::SEASONAL_EVENT_F, item.type_id, item.category_id, item.gameitem_id, item.code, "", "", present_id]]);
                var res = sqlite.executeTransaction(sql_list);
                res != SQLITE_DONE;

                return res;
            }

            method createEventPresent(res)
            {
                var event_present_list = Array();
                foreach (var record in res)
                {
                    var event_present = EventPresentUtil::EventPresent();
                    event_present["present_id"] = record[0];
                    event_present["eventtype_id"] = record[1];
                    event_present["type_id"] = record[2];
                    event_present["category_id"] = record[3];
                    event_present["gameitem_id"] = record[4];
                    event_present["carcode"] = record[5];
                    event_present["messagecode"] = record[6];
                    event_present["function_name"] = record[7];
                    event_present["argument0"] = record[8];
                    event_present["argument1"] = record[9];
                    event_present["argument2"] = record[10];
                    event_present["argument3"] = record[11];
                    event_present["argument4"] = record[12];
                    event_present_list.push(event_present);
                }

                return event_present_list;
            }

            method getInfomationMessage(message_code)
            {
                return getEventPresent(message_code, RecordType::INTRODUCTION);
            }

            method getEventPresent(code, eventtype_id)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var event_present = nil;

                var res;
                if (eventtype_id == nil)
                    res = sqlite.executeQuery("SELECT * FROM %{table_name} WHERE argument0=? AND get_flag=0 ORDER BY argument0", [code]);
                else
                    res = sqlite.executeQuery("SELECT * FROM %{table_name} WHERE eventtype_id=? AND argument0=? AND get_flag=0 ORDER BY argument0", [eventtype_id, code]);
                
                if (res.size > 0 && res[0].size > 0 && res[0][0] > 0)
                    event_present = createEventPresent(res)[0];

                return event_present;
            }

            method getEventPresentList(eventtype_id, argument1)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var event_present_list = nil;

                var res;
                if (argument1 == nil)
                    res = sqlite.executeQuery("SELECT * FROM %{table_name} WHERE eventtype_id=? AND get_flag=0 ORDER BY argument0, present_id", [eventtype_id]);
                else
                    res = sqlite.executeQuery("SELECT * FROM %{table_name} WHERE eventtype_id=? AND argument1<=? AND get_flag=0 ORDER BY argument0, present_id", [eventtype_id, argument1]);
                
                if (res.size > 0 && res[0].size > 0 && res[0][0] > 0)
                    event_present_list = createEventPresent(res);

                return event_present_list;
            }

            method getEventPresentJoin(recoed_type)
            {
                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var event_present_list = nil;

                var spec_table;
                if (recoed_type == RecordType::ASPEC_EVENT)
                    spec_table = GAME_STATUS.user_profile.record.aspec_race.getTableName();
                else
                    spec_table = GAME_STATUS.user_profile.record.bspec_race.getTableName();

                var sub_query1 = "SELECT MIN (result) as min, MAX (result) as max, TAR.game_id "
                                 "FROM %{spec_table} TAR "
                                 "WHERE TAR.event_id BETWEEN TEP.argument2 AND TEP.argument3 AND TAR.record_type < 2";

                var sub_query2 = "SELECT SUB.game_id FROM (" + sub_query1 + ") SUB WHERE SUB.min = 0 and SUB.max = 0";

                var res = sqlite.executeQuery(("SELECT TEP.* "
                                    "FROM t_event_present TEP "
                                    "WHERE TEP.eventtype_id=%{recoed_type} AND get_flag=0 AND TEP.argument1 IN (") + sub_query2 + ")");

                if (res.size > 0 && res[0].size > 0 && res[0][0] > 0)
                    event_present_list = createEventPresent(res);
            
                return event_present_list;
            }

            method getMessageFlag(message_code)
            {
                return getInfomationMessage(message_code) != nil;
            }

            method getEventPresentFlag(code, eventtype_id)
            {
                return getEventPresent(code, eventtype_id) != nil;
            }

            method setEventPresentFlag(code, eventtype_id)
            {
                return setEventPresentFlags([code], eventtype_id);
            }

            method setEventPresentFlags(code_list, eventtype_id)
            {
                if (code_list == nil || code_list.size == 0)
                    return false;

                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var event_present = nil;
                var res = sqlite.executeTransaction([[("UPDATE %{table_name} SET get_flag=1 WHERE argument0 in ('") + code_list.join("','") + "') AND eventtype_id=?", [eventtype_id]]]);
                DB_ASSERT(res == SQLITE_DONE, res);
                return true;
            }

            method setEventPresentFlagsByID(id_list)
            {
                if (id_list == nil || id_list.size == 0)
                    return false;

                var table_name = getTableName();
                var sqlite = GlobalStatus::getSqlite();
                var event_present = nil;
                var res = sqlite.executeTransaction([[("UPDATE %{table_name} SET get_flag=1 WHERE present_id in (") + id_list.join(",") + ")"]]);
                DB_ASSERT(res == SQLITE_DONE, res);

                return true;
            }
        }

        module SeasonalEventImpl
        {
            method getResult(event_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT result, best_time, best_score, best_order FROM t_seasonal_event WHERE event_id = ?",
                                               [event_id]);

                if (res.size > 0)
                    return res[0];

                return [-1, main::pdiext::MAX_LAPTIME1000, 0, -1];
            }

            method updateEventResult(event_id, result)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.execute("UPDATE t_seasonal_event SET result = ? WHERE event_id = ? AND (result = -1 OR result > ?)",
                               [result, event_id, result]);

                var row_count = sqlite.changes();
                var select_res = sqlite.executeQuery("SELECT result FROM t_seasonal_event WHERE event_id = ?", [event_id]);
                var has_record = select_res.size > 0;
                if (!has_record && row_count == 0)
                {
                    res = sqlite.execute("INSERT INTO t_seasonal_event VALUES (?, ?, ?, ?, ?)",
                        [event_id, result, pdiext::MAX_LAPTIME1000, 0, -1]);

                    DB_ASSERT(res == SQLITE_DONE, res);
                }

                return res;
            }

            method updateResult(event_id, result, eval_type, best_time, best_score, best_order)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res;
                if (eval_type == gtengine::EvalType::TIME)
                {
                    res = sqlite.execute("UPDATE t_seasonal_event SET result = ?, best_time = ? WHERE event_id = ? AND (result = -1 OR result > ? OR best_time > ?)",
                                                [result, best_time, event_id, result, best_time]);
                }
                else if (eval_type == gtengine::EvalType::DRIFT)
                {
                    res = sqlite.execute("UPDATE t_seasonal_event SET result = ?, best_score = ? WHERE event_id = ? AND (result = -1 OR result > ? OR best_score < ?)",
                                                [result, best_score, event_id, result, best_score]);
                }
                else if (eval_type == gtengine::EvalType::ORDER)
                {
                    res = sqlite.execute("UPDATE t_seasonal_event SET result = ?, best_order = ? WHERE event_id = ? AND (result = -1 OR result > ? OR best_order > ?)",
                                        [result, best_order, event_id, result, best_order]);
                }
                else
                    ;

                DB_ASSERT(res == SQLITE_DONE, res);

                var row_count = sqlite.changes();
                if (row_count == 0)
                {
                    if (eval_type == gtengine::EvalType::TIME)
                    {
                        res = sqlite.execute("INSERT INTO t_seasonal_event VALUES (?, ?, ?, ?, ?)",
                                            [event_id, result, best_time, 0, -1]);
                    }
                    else if (eval_type == gtengine::EvalType::DRIFT)
                    {
                        res = sqlite.execute("INSERT INTO t_seasonal_event VALUES (?, ?, ?, ?, ?)",
                                            [event_id, result, pdiext::MAX_LAPTIME1000, best_score, -1]);
                    }
                    else if (eval_type == gtengine::EvalType::ORDER)
                    {
                        res = sqlite.execute("INSERT INTO t_seasonal_event VALUES (?, ?, ?, ?, ?)",
                                            [event_id, result, pdiext::MAX_LAPTIME1000, 0, best_order]);
                    }
                    else
                        ;
                }

                DB_ASSERT(res == SQLITE_DONE, res);
                return res;
            }
        }

        module AcademyEventImpl
        {
            method isAllCompleted(event_id_list, target_result)
            {
                var tmp = [];
                foreach (var event_id in event_id_list)
                    tmp.push("event_id = " + event_id);

                var event_id_or = tmp.join(" OR ");

                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT COUNT (*) FROM t_academy_event WHERE (result <> -1 AND result <= ?) AND (" + event_id_or + ")",
                                    [target_result]);

                if (res.size > 0 && res[0].size > 0)
                {
                    var completed_count = res[0][0];
                    return event_id_list.size == completed_count;
                }

                return false;
            }

            method getCompletedCount(event_id_list, target_result)
            {
                var tmp = [];
                foreach (var event_id in event_id_list)
                    tmp.push("event_id = " + event_id);

                var event_id_or = tmp.join(" OR ");

                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT COUNT (*) FROM t_academy_event WHERE (result <> -1 AND result <= ?) AND (" + event_id_or + ")",
                                    [target_result]);

                if (res.size > 0 && res[0].size > 0)
                {
                    var completed_count = res[0][0];
                    return completed_count;
                }

                return 0;
            }

            method getGoldCount()
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT COUNT (*) FROM t_academy_event WHERE result = 0", []);

                if (res.size > 0 && res[0].size > 0)
                    return res[0][0];

                return 0;
            }

            method getRoundGoldCount(event_id_list)
            {
                var tmp = [];
                foreach (var event_id in event_id_list)
                    tmp.push("event_id = " + event_id);

                var event_id_or = tmp.join(" OR ");

                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT COUNT (*) FROM t_academy_event WHERE result = 0 AND (" + event_id_or + ")",
                                    []);

                if (res.size > 0 && res[0].size > 0)
                    return res[0][0];
                
                return 0;
            }

            method getResult(event_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT result, best_time, best_score, best_order FROM t_academy_event WHERE event_id = ?",
                                               [event_id]);

                if (res.size > 0)
                    return res[0];

                return [-1, main::pdiext::MAX_LAPTIME1000, 0, -1];
            }

            method getSize(event_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT result, best_time, best_score, best_order FROM t_academy_event WHERE event_id = ?",
                                               [event_id]);
                return res.size;
            }

            method updateEventResult(event_id, result)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.execute("UPDATE t_academy_event SET result = ? WHERE event_id = ? AND (result = -1 OR result > ?)",
                               [result, event_id, result]);

                var row_count = sqlite.changes();
                var select_res = sqlite.executeQuery("SELECT result FROM t_academy_event WHERE event_id = ?", [event_id]);
                var has_record = select_res.size > 0;
                if (!has_record && row_count == 0)
                {
                    res = sqlite.execute("INSERT INTO t_academy_event VALUES (?, ?, ?, ?, ?)",
                        [event_id, result, pdiext::MAX_LAPTIME1000, 0, -1]);

                    DB_ASSERT(res == SQLITE_DONE, res);
                }

                return res;
            }

            method updateResult(event_id, result, eval_type, best_time, best_score, best_order)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res;
                if (getSize(event_id) <= 0)
                {
                    if (eval_type == gtengine::EvalType::TIME)
                    {
                        res = sqlite.execute("INSERT INTO t_academy_event VALUES (?, ?, ?, ?, ?)",
                                            [event_id, result, best_time, 0, -1]);
                    }
                    else if (eval_type == gtengine::EvalType::DRIFT)
                    {
                        res = sqlite.execute("INSERT INTO t_academy_event VALUES (?, ?, ?, ?, ?)",
                                            [event_id, result, pdiext::MAX_LAPTIME1000, best_score, -1]);
                    }
                    else if (eval_type == gtengine::EvalType::ORDER)
                    {
                        res = sqlite.execute("INSERT INTO t_academy_event VALUES (?, ?, ?, ?, ?)",
                                            [event_id, result, pdiext::MAX_LAPTIME1000, 0, best_order]);
                    }
                    else
                        ;

                    DB_ASSERT(res == SQLITE_DONE, res);
                }
                else
                {
                    if (eval_type == gtengine::EvalType::TIME)
                    {
                        res = sqlite.execute("UPDATE t_academy_event SET result = ?, best_time = ? WHERE event_id = ? AND (result = -1 OR result > ? OR best_time >= ?)",
                                                    [result, best_time, event_id, result, best_time]);
                    }
                    else if (eval_type == gtengine::EvalType::DRIFT)
                    {
                        res = sqlite.execute("UPDATE t_academy_event SET result = ?, best_score = ? WHERE event_id = ? AND (result = -1 OR result > ? OR best_score <= ?)",
                                                    [result, best_score, event_id, result, best_score]);
                    }
                    else if (eval_type == gtengine::EvalType::ORDER)
                    {
                        res = sqlite.execute("UPDATE t_academy_event SET result = ?, best_order = ? WHERE event_id = ? AND (result = -1 OR result > ? OR best_order >= ?)",
                                            [result, best_order, event_id, result, best_order]);
                    }
                    else
                        ;

                    DB_ASSERT(res == SQLITE_DONE, res);
                }
                return res;
            }

            method updateScoreOnly(event_id, eval_type, best_time, best_score, best_order)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res;
                if (getSize(event_id) <= 0)
                {
                    if (eval_type == gtengine::EvalType::TIME)
                    {
                        res = sqlite.execute("INSERT INTO t_academy_event VALUES (?, ?, ?, ?, ?)",
                                            [event_id, -1, best_time, 0, -1]);
                    }
                    else if (eval_type == gtengine::EvalType::DRIFT)
                    {
                        res = sqlite.execute("INSERT INTO t_academy_event VALUES (?, ?, ?, ?, ?)",
                                            [event_id, -1, pdiext::MAX_LAPTIME1000, best_score, -1]);
                    }
                    else if (eval_type == gtengine::EvalType::ORDER)
                    {
                        res = sqlite.execute("INSERT INTO t_academy_event VALUES (?, ?, ?, ?, ?)",
                                            [event_id, -1, pdiext::MAX_LAPTIME1000, 0, best_order]);
                    }
                    else
                        ;

                    DB_ASSERT(res == SQLITE_DONE, res);
                }
                else
                {
                    if (eval_type == gtengine::EvalType::TIME)
                    {
                        res = sqlite.execute("UPDATE t_academy_event SET best_time = ? WHERE event_id = ? AND (best_time > ?)",
                                                    [best_time, event_id, best_time]);
                    }
                    else if (eval_type == gtengine::EvalType::DRIFT)
                    {
                        res = sqlite.execute("UPDATE t_academy_event SET best_score = ? WHERE event_id = ? AND (best_score < ?)",
                                                    [best_score, event_id, best_score]);
                    }
                    else if (eval_type == gtengine::EvalType::ORDER)
                    {
                        res = sqlite.execute("UPDATE t_academy_event SET best_order = ? WHERE event_id = ? AND (best_order > ?)",
                                            [best_order, event_id, best_order]);
                    }
                    else
                        ;
                }

                return res;
            }
        }

        module AcademyPlaylogImpl
        {
            method getSize(event_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT start_session, disqualify FROM t_academy_playlog WHERE event_id = ?",
                                               [event_id]);
                return res.size;
            }

            method addStartSession(event_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res;
                if (getSize(event_id) <= 0)
                {
                    res = sqlite.execute("INSERT INTO t_academy_playlog VALUES (?, ?, ?)", [event_id, 1, 0]);
                    DB_ASSERT(res == SQLITE_DONE, res);
                }
                else
                {
                    res = sqlite.execute("UPDATE t_academy_playlog SET start_session = start_session+1 WHERE event_id = ?", [event_id]);
                    DB_ASSERT(res == SQLITE_DONE, res);
                }

                return res;
            }

            method addDisqualify(event_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res;
                if (getSize(event_id) <= 0)
                {
                    res = sqlite.execute("INSERT INTO t_academy_playlog VALUES (?, ?, ?)", [event_id, 0, 1]);
                    DB_ASSERT(res == SQLITE_DONE, res);
                }
                else
                {
                    res = sqlite.execute("UPDATE t_academy_playlog SET disqualify = disqualify+1 WHERE event_id = ?", [event_id]);
                    DB_ASSERT(res == SQLITE_DONE, res);
                }

                return res;
            }

            method getPlayLog(event_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT start_session, disqualify FROM t_academy_playlog WHERE event_id = ?", [event_id]);
                if (res.size > 0)
                    return res[0];

                return [-1, -1];
            }

            method getPlayLogAll()
            {
                var sqlite = GlobalStatus::getSqlite();
                var res = sqlite.executeQuery("SELECT SUM (start_session), SUM (disqualify) FROM t_academy_playlog", []);
                if (res.size > 0)
                {
                    |var start_session, var disqualify| = res[0];
                    if (start_session == nil)
                        start_session = 0;

                    if (disqualify == nil)
                        disqualify = 0;

                    return [start_session, disqualify];
                }

                return [0, 0];
            }
        }
    }
}