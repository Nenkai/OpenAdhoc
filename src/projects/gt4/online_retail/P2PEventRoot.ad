module PROJECT::ROOT
{
	static xml_event_list = nil;
	
	function build_list(context)
	{
		var buf = main::network.fileGet("P2PEvent.xmlz");
		if (buf != nil)
		{
			var xml = main::menu::MXml();
			xml.parse(buf);
	
			var node = xml.result;
			node = node["Xml"][0];
	
			xml_event_list = node["Event"];
		}
	
		if (xml_event_list == nil)
			return false;
	
		ScrollBox::SelectBox.clearChildren(context);
	
		var size = xml_event_list.size;
		
		for (var i = 0; i < size; i++)
		{
			var event = xml_event_list[i];
	
			if (event.hasAttribute("hidden"))
				continue;
	
			var item = hidden::Item.doCopy();
	
			item["Name"].text = event["Name"][0].value;
	
			var image = event["Image"][0];
			var from = image.getAttribute("from");
	
			if (from == "disk")
			{
				item["Logo"].from_disk = true;
				item["Logo"].cache = true;
				item["Logo"].image_path = image.value;
			}
			else if (from == "mfs")
			{
				buf = main::network.fileGet(image.value);
				if (buf != nil)
					item["Logo"].image_chunk = buf;
			}
	
			ScrollBox::SelectBox.appendChild(context, item);
		}
	
		if (size > 0)
			ScrollBox::SelectBox.callFocus(P2PEventRoot);
	
		return true;
	}
	
	function refresh_list(context)
	{
		var res = openProcessDialog(context, "getting information", build_list, nil);
	
		if (!res)
		{
			openConfirmDialog(context, DIALOG_OK, "No event found.");
			main::network.endMGCL();
			start_page(context, TopRoot);
		}
	}
	
	function onInitialize(context)
	{
		enterPage(context, P2PEventRoot, "P2PEventRoot");
	
		hidden.visible = false;
	
		var event = main::menu::MScriptEvent(context, P2PEventRoot, "on_initialize");
		context.pushEvent(event);
	}
	
	function on_initialize(context)
	{
		refresh_list(context);
	}
	
	function onFinalize(context)
	{
		ScrollBox::SelectBox.clearChildren(context);
		leavePage(context, P2PEventRoot);
	}
	
	function onCancel(context)
	{
		var res = openConfirmDialog(context, DIALOG_QUERY, "Do you return?");
		if (res)
		{
			main::network.endMGCL();
			start_page(context, TopRoot);
		}
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::ScrollBox::SelectBox
{
    function search(context, event)
    {
        var id = event["ID"][0].value.toInt();

        main::network.setGameListFilter("RULES_SET", "EQUAL_TO", id);

        var maxplayers = event["MaxPlayers"][0].value.toInt();
        main::network.setGameListFilter("PLAYER_COUNT", "NOT_EQUALS", maxplayers);

        var gamelist = main::network.getGameList(1, 16);

        var result = false;

        var num = gamelist.size;
        
        for (var i = 0; i < num; i++)
        {
            var game = gamelist[i];

            var res = main::network.joinGameMGCL(game[0]);
            if (res)
            {
                result = true;
                break;
            }
        }

        if (!result)
        {
            var res = main::network.createGameMGCL(
                event["Name"][0].value, "", "",
                maxplayers, 2, 0, 0, id
            );
            if (res)
                result = true;
        }

        main::network.clearGameListFilter("RULES_SET");
        main::network.clearGameListFilter("PLAYER_COUNT");

        return result;
    }

    function onActivate(context, event)
    {
        if (xml_event_list == nil)
        {
            main::sound.play("disabled");
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");

        var item = event.widget;

        var event_node = nil;

        var size = xml_event_list.size;
        var j = 0;
        
        for (var i = 0; i < size; i++)
        {
            event_node = xml_event_list[i];

            if (!event_node.hasAttribute("hidden"))
            {
                if (SelectBox.index == j)
                    break;
                j++;
            }
        }

        var res = openProcessDialog(context, "now searching", search, event_node);

        if (res)
            start_page(context, PregridRoot);
        else
        {
            openConfirmDialog(context, DIALOG_OK, "no valid game found and cannot make game");
            restart(context);
        }

        return EVENTRESULT_FILTER;
    }
}