module CommunityProjectComponent::DialogParts::OK
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module CommunityProjectComponent::DialogParts::CheckButton
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    method onActivate(context)
    {
        if (self.is_enable && !self.insensitive)
        {
            main::sound.play("checkbox");
            self.active = !self.active;

            if (self['onValueChanged'] != nil)
                self.onValueChanged(context);
        }

        return EVENTRESULT_CONTINUE;
    }
}

module CommunityProjectComponent::DialogParts::Pulldown
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module CommunityProjectComponent::DialogParts::Pulldown::OptionMenu
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);

    attribute decide_callback;

    method onRealize(manager)
    {
        self.copy_selected_item = false;
        self.popup.visible = true;
        self.decide_callback = nil;
    }

    method pulldownValueChanged(context)
    {
        var w = self.getItem(self.index);
        if (w != nil)
        {
            var w2 = self;
            w2.label.text = w.label.text;
            w2.label.abbreviate = true;
            if (w2.label_i != nil)
            {
                w2.label_i.text = w.label.text;
                w2.label_i.abbreviate = true;
            }
        }
    }

    method onInitialize(context)
    {
        self.pulldownValueChanged(context);
    }

    method onFinalize(context)
    {
        self.decide_callback = nil;
    }

    method onValueChanged(context)
    {
        self.pulldownValueChanged(context);
        if (self.decide_callback != nil)
            decide_callback(context, self.index, self);
    }
}

module CommunityProjectComponent::DialogParts::PulldownItem
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(label_i, 2.4);
}

module CommunityProjectComponent::DialogParts::InputTextBox
{
    SCALE_WIDGET_SDTV(label, 2.4);
}

module CommunityProjectComponent::DialogParts::InputTextBox::Text::input
{
    SCALE_WIDGET_SDTV(label, 2.4);
    SCALE_WIDGET_SDTV(Text::label, 2.4);
    SCALE_WIDGET_SDTV(Text::InputText::label, 2.4);
    SCALE_WIDGET_SDTV(Text::InputText::label_i, 2.4);

    method onKeyPress(context)
    {
        if (self.Text.insensitive)
            return EVENTRESULT_FILTER;

        return EVENTRESULT_CONTINUE;
    }

    method onFocusEnter(context)
    {
        context.target_widget = InputText::Icon;
        return EVENTRESULT_FILTER;
    }
}

module CommunityProjectComponent::ListMenu::ListMenu
{
    attribute cb_vn;
    attribute cb_fn;

    method onRealize(manager)
    {
        self.setDisplayEmpty(false);
    }

    method setCategoryComponent(context, widgets)
    {
        if (widgets.isInstanceOf(menu::MWidget))
            widgets = [widgets];

        foreach (var w in widgets)
            self.Categories::ScrolledWindow::clip::space.appendChild(context, w);
    }

    method clearCategoryComponent(context)
    {
        var space = self.Categories::ScrolledWindow::clip::space;
        foreach (var w in space.getChildList())
        {
            if (w.name == "Header")
                continue;

            space.removeChild(w);
        }
    }

    method getListBox()
    {
        return self.ListWindow::clip::ListBox;
    }

    method setDisplayEmpty(visible, text)
    {
        if (text != nil)
            self.ListWindow::Empty::TextFace.text = text;

        self.ListWindow::Empty.visible = visible;
    }
}

module CommunityProjectComponent::ListMenu::ListMenu::ListWindow::clip::ListBox
{
    method onInitialize(context)
    {
        var adj = main::menu::MAdjustment();
        self.clip::VScrollbar.adjustment = adj;
        self.v_adjustment = adj;
    }

    method onFocusEnter(context)
    {
        var w = self.getItemWidget(self.focus_index, context);
        var root = context.getRootWindow();
        root.setFocus(w);
        return EVENTRESULT_FILTER;
    }
}

module CommunityProjectComponent::ListMenu::Category
{
    attribute value;

    method setCategoryItemComponent(context, widgets)
    {
        if (widgets.isInstanceOf(menu::MWidget))
            widgets = [widgets];

        foreach (var w in widgets)
            self.VBox.appendChild(context, w);
    }

    method setText(text)
    {
        self.Label.text = text;
    }
}

module CommunityProjectComponent::ButtonHelp::ButtonHelpGT6
{
    module hidden::ButtonSet
    {
        SCALE_WIDGET_SDTV(Circle::label, 2.4);
        SCALE_WIDGET_SDTV(Circle::labeli, 2.4);
        SCALE_WIDGET_SDTV(Square::label, 2.4);
        SCALE_WIDGET_SDTV(Square::labeli, 2.4);
        SCALE_WIDGET_SDTV(Triangle::label, 2.4);
        SCALE_WIDGET_SDTV(Triangle::labeli, 2.4);
        SCALE_WIDGET_SDTV(Cross::label, 2.4);
        SCALE_WIDGET_SDTV(Cross::labeli, 2.4);
        SCALE_WIDGET_SDTV(R1::label, 2.4);
        SCALE_WIDGET_SDTV(R1::labeli, 2.4);
        SCALE_WIDGET_SDTV(L1::label, 2.4);
        SCALE_WIDGET_SDTV(L1::labeli, 2.4);
        SCALE_WIDGET_SDTV(R2::label, 2.4);
        SCALE_WIDGET_SDTV(R2::labeli, 2.4);
        SCALE_WIDGET_SDTV(L2::label, 2.4);
        SCALE_WIDGET_SDTV(L2::labeli, 2.4);
    }

    method clear()
    {
        if (self.current_button_set != nil)
        {
            Pane.removeChild(self.current_button_set);
            self.current_button_set = nil;
        }

        if (self.prev_button_set != nil)
        {
            Pane.removeChild(self.prev_button_set);
            self.prev_button_set = nil;
        }

        self.current_button_set = nil;
        self.prev_button_set = nil;
        self.button_sets = Map();
    }

    method onRealize(manager)
    {
        hidden.visible = false;
    }

    method onFinalize(context)
    {
        clear();
    }

    function getEnterButtonName()
    {
        var assign = main::pdiext::MSystemConfiguration::GetEnterButtonAssign();
        if (assign == "circle")
            return "Circle"
        else
            return "Cross";
    }

    function getCancelButtonName()
    {
        var assign = main::pdiext::MSystemConfiguration::GetEnterButtonAssign();
        if (assign == "circle")
            return "Cross"
        else
            return "Circle";
    }

    attribute is_appear = false;
    attribute current_button_set = nil;
    attribute prev_button_set = nil;
    attribute button_sets = Map();
    attribute current_set = "";

    method set(context, set_list)
    {
        var button_set = hidden::ButtonSet.doCopy();
        if (pdiext::MSystemConfiguration::isSDTV())
        {
            if (set_list.size > 0 && set_list[set_list.size - 1][0] != "R2")
                set_list.push(["R2", manager.translate("Component", "Label_Zoom")]);
                
            
            var pad_left = set_list.size >= 6 ? -28 : 0;
            var w = button_set.first;

            while (w != nil)
            {
                w.pack_pad_left = pad_left;
                w = w.next;
            }
        }

        button_set.visible = false;

        var it = button_set.first;
        while (it != nil)
        {
            it.visible = false;
            it = it.next_widget;
        }

        var order_list = [];
        foreach (var set in set_list)
        {
            |var button_name, var text| = set;
            if (button_name == "Enter")
            {
                if (text == nil)
                    text = manager.translate("Component", "Label_" + button_name);
                var button_name = getEnterButtonName();
            }

            if (button_name == "Back" || button_name == "Cancel" || button_name == "Close")
            {
                if (text == nil)
                    text = manager.translate("Component", "Label_" + button_name);
                var button_name = getCancelButtonName();
            }

            if (text == nil)
                text = "";

            var button_w = button_set[button_name];
            order_list.push(button_w);
            button_w["label"].text = text;
            button_w["label"].visible = true;
            button_w["label_i"].text = text;
            button_w["label_i"].visible = false;
            button_w.visible = true;
        }

        button_set.reorderChild(order_list);
        self.prev_button_set = current_button_set;
        self.current_button_set = button_set;
        if (prev_button_set != nil)
        {
            Pane.removeChild(self.prev_button_set);
            self.prev_button_set = nil;
        }

        Pane.appendChild(context, button_set);
        button_set.InAnimation.restart();
        button_set.visible = true;
    }

    method addButtonSet(context, set_name, set_list)
    {
        self.button_sets[set_name] = set_list;
    }
    
    method setButtonSet(context, set_name)
    {
        if (self.current_set == set_name)
            return;
        var set_list = self.button_sets[set_name];
        self.set(context, set_list);
        self.current_set = set_name;
    }

    method getCurrentButtonSetName()
    {
        return self.current_set;
    }

    method setLabel(context, button_name, text)
    {
        var button_w = Pane::Buttons[button_name];
        button_w["label"].text = text;
        button_w["label_i"].text = text;
    }

    method setInsensitive(button_name, insensitive)
    {
        var button_w = Pane::Buttons[button_name];
        if (button_w != nil)
        {
            button_w["label"].visible = !insensitive;
            button_w["label_i"].visible = insensitive;
        }
    }

    method appear()
    {
        self.FadeEffect.reverse = false;
        self.FadeEffect.start();
        self.is_appear = true;
    }

    method hide()
    {
        self.FadeEffect.reverse = true;
        self.FadeEffect.start();
        self.is_appear = false;
    }

    method appearIf()
    {
        if (!self.is_appear)
        {
            appear();
            return true;
        }

        return false;
    }

    method hideIf()
    {
        if (self.is_appear)
        {
            hide();
            return true;
        }

        return false;
    }
}

module CommunityProjectComponent::Scroller::HScrollPointer
{
    attribute pointer_reseted;

    method onLoad(context)
    {
        hidden.visible = false;
        self.space.clearChildren();
    }

    method onInitialize(context)
    {
        self.pointer.visible = false;
        self.space.clearChildren();
    }

    method getItemCount()
    {
        return self.space.countChild();
    }

    method setItemCount(context, count)
    {
        if (count > 1)
        {
            self.visible = true;
            self.space.clearChildren();

            for (var i = 0; i < count; i++)
            {
                var w = hidden::Dot.doCopy();
                self.space.appendChild(context, w);
            }
        }
        else
            self.visible = false;
    }

    method setPointer(index, warp)
    {
        var w = hidden::Dot.w;
        var target_x = self.space.x + (w * index);
        var actor = self.pointer::MoveX;

        actor.setStartValue(0, self.pointer.x);
        actor.setEndValue(0, target_x);
        actor.restart();

        var warp;
        if (self.pointer.visible == false)
        {
            self.pointer.visible = true;
            warp = true;
        }

        if (warp == true)
        {
            actor.warp();
        }
    }

    method warpPointer(index)
    {
        var w = hidden::Dot.w;
        var target_x = self.space.x + (w * index);
        var actor = w.pointer::MoveX;

        actor.stop();
        w.pointer.x = target_x;
    }
}

module CommunityProjectComponent::RaceMenu::Template::SBox0::ScalarInterpolator
{
    method onEffectEnd(context)
    {
        RaceMenuUtil::onEffectEnd_Sbox0ScalarInterpolator(context);
    }
}

module CommunityProjectComponent::RaceMenu::Template::SBox0::SBox1::ListBox
{
    method onFocusEnter(context)
    {
        return RaceMenuUtil::onFocusEnterListBox(context, self);
    }

    method onFocusLeave(context)
    {
        return RaceMenuUtil::onFocusLeaveListBox(context, self);
    }

    method onFocus(context, new_index, old_index)
    {
        RaceMenuUtil::onFocusListBox(context, self, new_index, old_index);
    }

    method onActivate(context)
    {
        return RaceMenuUtil::onActivateListBox(context, self);
    }
}

module CommunityProjectComponent::RaceMenu::Template::Item
{
    attribute icon;
}

module CommunityProjectComponent::CommunityMenu::ListBox
{
    attribute data_list;

    method onVisibleNotify(context, indexes)
    {
        foreach (var i in indexes)
        {
            if (self.getItemVisible(i))
            {
                var w = self.getItemWidget(i);
                if (w == nil || !w.initialized_)
                {
                    var w = self.getItemWidget(i, context);
                    w.initialize(context, self.data_list[i]);
                }
            }
            else
            {
                self.setItemWidget(i, context, nil);
            }
        }
    }

    method onActivate(context)
    {
        sound.play("ok");

        var listbox = self;
        var item = listbox.getItemWidget(listbox.focus_index);

        if (item == nil || !item.initialized_)
            return EVENTRESULT_FILTER;

        if (self.defined("on_activate"))
            self.on_activate(context, item);
        else if (item.defined("on_activate"))
            item.on_activate(context);

        return EVENTRESULT_FILTER;
    }

    method updateDataList(context, index, data)
    {
        if (index >= 0 && index < self.data_list.size)
            self.data_list[index] = data;
    }

    method reinitialize(context)
    {
        for (var i = 0; i < self.getItemCount(); ++i)
        {
            var item = getItemWidget(i);
            if (item != nil)
            {
                item.initialize(context, self.data_list[i]);
            }
        }
    }
}

module CommunityProjectComponent::CommunityMenu::IconBox
{
    attribute data_list;

    method onVisibleNotify(context, indexes)
    {
        foreach (var i in indexes)
        {
            if (self.getItemVisible(i))
            {
                var w = self.getItemWidget(i);
                if (w == nil || !w.initialized_)
                {
                    var w = self.getItemWidget(i, context);
                    if (i < self.data_list.size)
                        w.initialize(context, self.data_list[i]);
                    else
                        w.initialize(context, nil);
                }
            }
            else
            {
                self.setItemWidget(i, context, nil);
            }
        }
    }

    method onActivate(context)
    {
        sound.play("ok");

        var listbox = self;
        var item = listbox.getItemWidget(listbox.focus_index);

        if (item == nil || !item.initialized_)
            return EVENTRESULT_FILTER;

        if (self.defined("on_activate"))
            self.on_activate(context, item);
        else if (item.defined("on_activate"))
            item.on_activate(context);

        return EVENTRESULT_FILTER;
    }

    method reinitialize(context)
    {
        for (var i = 0; i < self.getItemCount(); ++i)
        {
            var item = getItemWidget(i);
            if (item != nil)
            {
                item.initialize(context, self.data_list[i]);
            }
        }
    }
}

module CommunityProjectComponent::RoomInformation
{
    module Info
    {
        attribute getCourseCallback;

        method isBlank()
        {
            return blank.is_enable;
        }

        method setBlank(flag)
        {
            Container.is_enable = !flag;
            blank.is_enable = flag;
        }

        method setInfo(context, room)
        {
            Container.setInfo(context, room);
        }

        method setClubName(name)
        {
            Container.setClubName(name);
        }

        method setInsensitiveText(text)
        {
            Insensitive.setText(text);
        }

        method setGetCourseCallback(func)
        {
            self.getCourseCallback = func;
        }

        method onDestroy(manager)
        {
            self.getCourseCallback = nil;
        }

        method setColor(mode)
        {
            Container.Mode.setColor(mode);
        }

        method setVisibilityLevel(level)
        {
            switch (level)
            {
                case 1:
                    Container::EventInfo.visible = true;
                    Container::Message.visible = false;
                    Container::RoomInfo.visible = false;
                    break;

                case 2:
                    Container::EventInfo.visible = true;
                    Container::Message.visible = true;
                    Container::RoomInfo.visible = false;
                    break;

                case 3:
                    Container::EventInfo.visible = true;
                    Container::Message.visible = true;
                    Container::RoomInfo.visible = true;
                    break;
            }
        }

        method deactivateAllMode()
        {
            Container.Mode.deactivateAllMode();
        }

        module blank
        {
            method onRealize(manager)
            {
                var text = manager.translate("Regulation", "pp");
                Limit::PP.off.off.text = text;
                Limit::PP.on.on.text = text;

                text = pdiext::MUnit::GetUnitOfPower();
                Limit::PS.off.off.text = text;
                Limit::PS.on.on.text = text;
            }
        }

        module Insensitive
        {
            method onRealize(manager)
            {
                Text::TextFace.text = "";
            }

            method setText(text)
            {
                Text::TextFace.text = text;
            }
        }

        module Container
        {
            function getSignalLevel(rtt)
            {
                var level = 0;
                if (rtt < 0)
                    ;
                else if (rtt <= 50 * 1000)
                    level = 5;
                else if (rtt <= 100 * 1000)
                    level = 4;
                else if (rtt <= 150 * 1000)
                    level = 3;
                else if (rtt <= 300 * 1000)
                    level = 2;
                else
                    level = 1;

                return level;
            }

            function getCourseNameShort(course)
            {
                if (!course.isInstanceOf(STRecord))
                    course = getCourse(course);

                return manager.translate("CourseName", course.Name);
            }

            function getCourseAttributeText(info)
            {
                var list = [];
                if (info.Reverse)
                    list.push(manager.translate("CourseData", "direction_reverse"));
    
                if (info.ChangeWeather)
                    list.push(manager.translate("CourseData", "track_change_weather"));
    
                if (info.ChangeTime)
                    list.push(manager.translate("CourseData", "track_change_time"));

                return list.size > 0 ? list.join(" / ") : "";
            }

            method onRealize(manager)
            {
                Mode.reset();
            }

            method setInfo(context, room)
            {
                Mode.reflectState(context, room);
                EventInfo.setInfo(context, room);
                Message.setInfo(context, room);
                RoomInfo.setInfo(context, room);
            }

            method setClubName(name)
            {
                EventInfo.setClubName(name);
            }

            module EventInfo
            {
                method onRealize(context)
                {
                    ClubName.visible = false;
                    ClubName::TextFace.text = "";
                    Course::TextFace.text = "";
                    Course::Attribute.text = "";

                    var text = manager.translate("Regulation", "pp");
                    Limit::PP.off.off.text = text;
                    Limit::PP.on.on.text = text;
    
                    text = pdiext::MUnit::GetUnitOfPower();
                    Limit::PS.off.off.text = text;
                    Limit::PS.on.on.text = text;
                }

                method setInfo(context, room)
                {
                    if (room["roomType"] == gtengine::RoomType::CLUB_LOBBY ||
                        room["roomType"] == gtengine::RoomType::CLUB_EVENT)
                    {
                        Mode.setColor(2);
                        if (room["clubName"] != nil)
                        {
                            ClubName.visible = true;
                            ClubName::TextFace.text = room["clubName"];
                        }
                    }

                    var courseCode = room["realCourseCode"];
                    var course;
                    if (self.parent.getCourseCallback != nil)
                        course = self.parent.getCourseCallback(courseCode);
                    else
                    {
                        course = SPECDB.query1("SELECT Name, Logo, Reverse, ChangeWeather, ChangeTime"
                                               " FROM COURSE WHERE ID = %d".format(courseCode));
                    }

                    Course::TextFace.text = getCourseNameShort(course);
                    Course::Attribute.text = getCourseAttributeText(course);

                    var INVALID = gtengine::MGameParameter::INVALID_VALUE_INT;
                    self.Limit::PP.active = room["limitPP"] != INVALID;
                    self.Limit::PS.active = room["limitPower"] != INVALID;
                    self.Limit::Weight.active = room["needWeight"] != INVALID;
                    self.Limit::Car.active = room["isCarModelRestricted"];
                    self.Limit::Setting.active = room["isTuningRestricted"];
                    self.Limit::Option.active = room["isDrivingOptionRestricted"];
                }

                method setClubName(name)
                {
                    ClubName.visible = true;
                    ClubName::TextFace.text = name;
                }
            }

            module Message
            {
                method onRealize(context)
                {
                    Comment::TextFace.text = "";
                    Policy::TextFace.text = "";
                }

                method setInfo(context, room)
                {
                    Comment::TextFace.text = room["comment"];
                    if (room["roomType"] == gtengine::RoomType::CLUB_LOBBY ||
                        room["roomType"] == gtengine::RoomType::CLUB_EVENT)
                    {
                        Policy.visible = false;
                    }
                    else
                    {
                        Policy::TextFace.text = OnlineUtil::getRoomPolicyString(room["roomPolicy"]);
                        Policy.visible = true;
                    }
                }
            }

            module RoomInfo
            {
                method onRealize(context)
                {
                    HBox::MemberNum::TextFace.text = "";
                    HBox::Country::CountryFlag.image_path = "";
                    HBox::Country::TextFace.text = "";
                    HBox::Owner::TextFace.text = "";
    
                    VoiceChat.active = false;
    
                    for (var it = Antena::HBox.first; it != nil; it = it.next)
                        it.visible = false;
                }
            

                method setInfo(context, room)
                {
                    if (room["ownerRegion"] != "")
                    {
                        HBox::Owner::TextFace.text = room["displayName"];
                        HBox::Country::CountryFlag.image_path = "piece/flag_ranking/%s.img".format(room["ownerRegion"].downcase());
                        HBox::Country::TextFace.text = manager.translate("Country", room["ownerRegion"].upcase());
                    }

                    HBox::MemberNum::TextFace.text = "%2d/%2d".format(room["memberNum"], room["maxSlot"]);
                    VoiceChat.active = room["voiceChatActivity"];

                    var stars = "";
                    var race_quality = OnlineUtil::getRaceQualityType(room["qualityControlTemplateType"]);

                    for (var i = 0; i <= race_quality; i++)
                        stars += RaceQuality::star.text;

                    RaceQuality::Level.text = stars;

                    var signal_lv = getSignalLevel(room["rtt"]);

                    if (signal_lv > 0)
                    {
                        for (var it = Antena::HBox.first, i = 0; i < signal_lv; it = it.next, i++)
                        {
                            it.visible = true;
                        }
                    }

                    self.FriendOnly.visible = self.visible && room["scope"] == gtengine::Scope::FRIEND;
                }
            }
        }
    }

    module ModeBase
    {
        method reset(set_color = true)
        {
            if (set_color)
                self.setColor(1);

            self.Practice.setState(false);
            self.FreeRun.setState(false);
            self.Qualify.setState(false);
            self.TimeTrial.setState(false);
            self.Race.setState(false);
            self.Endurance.setState(false);
            self.Drift.setState(false);
        }

        method deactivateAllMode()
        {
            self.Practice.setActive(false);
            self.FreeRun.setActive(false);
            self.Qualify.setActive(false);
            self.TimeTrial.setActive(false);
            self.Race.setActive(false);
            self.Endurance.setActive(false);
            self.Drift.setActive(false);
        }

        method setColor(mode)
        {
            var base_color = ColorSample::OpenLobby::HeaderBaseColor;
            switch (mode)
            {
                case 1:
                    base_color = ColorSample::OpenLobby::HeaderBaseColor;
                    break;

                case 2:
                    base_color = ColorSample::ClubLobby::HeaderBaseColor
                    break;

                case 3:
                    base_color = ColorSample::Setting::HeaderBaseColor;
                    break;
            }

            Practice.BaseColor.setColor(base_color);
            FreeRun.BaseColor.setColor(base_color);
            Qualify.BaseColor.setColor(base_color);
            TimeTrial.BaseColor.setColor(base_color);
            Race.BaseColor.setColor(base_color);
            Endurance.BaseColor.setColor(base_color);
            Drift.BaseColor.setColor(base_color);
        }

        method reflectState(context, room)
        {
            var roomGameMode = room["roomGameMode"];
            var hasEvent = roomGameMode != gtengine::RoomGameMode::FREERUN;
            var isFreeRun = room["isFreeRun"];

            if (hasEvent)
            {
                var hasQualifier = room["qualifierRaceType"] != gtengine::RaceType::NONE;
                var eventPhase = room["eventPhase"];
                var isInQualifier = hasQualifier && eventPhase == gtengine::EventPhase::Qualifier;
                self.FreeRun.setState(false);

                self.Qualify.setState(hasQualifier, isInQualifier);
                var str = manager.translate("OnlineMessage", "RoomGameModeInfo_Qualify_Time")
                    .build(room["qualifierPeriod"] / 60);
                self.Qualify.setText(str);
            

                var hasRace = roomGameMode == gtengine::RoomGameMode::RACE ||
                              roomGameMode == gtengine::RoomGameMode::RACE_WITH_QUALIFIER;
                var isInRace = hasRace && !isInQualifier && !isFreeRun || eventPhase == gtengine::EventPhase::Game;
                self.Race.setState(hasRace, isInRace);
                str = manager.translate("OnlineMessage", "RoomGameModeInfo_Race_Lap")
                    .build(room["totalLaps"]);
                self.Race.setText(str);

                var hasEndurance = roomGameMode == gtengine::RoomGameMode::ENDURANCE ||
                                   roomGameMode == gtengine::RoomGameMode::ENDURANCE_WITH_QUALIFIER;
                var isInEndurance = hasEndurance && !isInQualifier && !isFreeRun || eventPhase == gtengine::EventPhase::Game;
                self.Endurance.setState(hasEndurance, isInEndurance);
                var minutes = room["raceLimitMinute"];
                var isHour = MiscUtil::isHourSuitableForMinute(minutes, Constant::Online::HourThresholdMinutes);
                var key = isHour ? "RoomGameModeInfo_Race_Time_Hour" : "RoomGameModeInfo_Race_Time";
                str = manager.translate("OnlineMessage", key).build(isHour ? minutes / 60 : minutes);
                self.Endurance.setText(str);

                var isInTimeTrial = !isFreeRun;
                self.TimeTrial.setState(roomGameMode == gtengine::RoomGameMode::TIME_TRIAL, isInTimeTrial);
                str = manager.translate("OnlineMessage", "RoomGameModeInfo_Race_Time").build(room["qualifierPeriod"] / 60);
                self.TimeTrial.setText(str);

                var isInDrift = !isFreeRun;
                self.Drift.setState(roomGameMode == gtengine::RoomGameMode::DRIFT_TRIAL, isInDrift);
                str = manager.translate("OnlineMessage", "RoomGameModeInfo_Race_Time").build(room["qualifierPeriod"] / 60);
                self.Drift.setText(str);

                var isInPractice = !isInQualifier && !isInRace && !isInEndurance && !isInTimeTrial && !isInDrift;
                self.Practice.setState(true, isInPractice);
            }
            else
            {
                self.FreeRun.setState(true, true);
                self.Practice.setState(false);
                self.Qualify.setState(false);
                self.Race.setState(false);
                self.Endurance.setState(false);
                self.TimeTrial.setState(false);
                self.Drift.setState(false);
            }
        }

        method reflectRoomConfig(context, room_game_mode, rc, sinfo)
        {
            var hasEvent = room_game_mode != gtengine::RoomGameMode::FREERUN;
            var isFreeRun = ORG.isFreeRun();

            if (hasEvent)
            {
                self.FreeRun.setState(false);

                var hasQualifier = rc.hasQualifier();
                var isInQualifier = hasQualifier && sinfo.event_phase == gtengine::EventPhase::Qualifier;
                var str = manager.translate("OnlineMessage", "RoomGameModeInfo_Qualify_Time")
                    .build(rc.qualifier_period / 60);
                self.Qualify.setState(hasQualifier, isInQualifier);
                self.Qualify.setText(str);
            
                var hasRace = room_game_mode == gtengine::RoomGameMode::RACE ||
                              room_game_mode == gtengine::RoomGameMode::RACE_WITH_QUALIFIER;
                var isInRace = hasRace && !isInQualifier && !isFreeRun || sinfo.event_phase == gtengine::EventPhase::Game;
                str = manager.translate("OnlineMessage", "RoomGameModeInfo_Race_Lap")
                    .build(rc.race_limit_laps);
                self.Race.setState(hasRace, isInRace);
                self.Race.setText(str);

                var hasEndurance = rc.isEnduranceMode();
                var isInEndurance = hasEndurance && !isInQualifier && !isFreeRun || sinfo.event_phase == gtengine::EventPhase::Game;
                var minutes = rc.race_limit_minute;
                var isHour = MiscUtil::isHourSuitableForMinute(minutes, Constant::Online::HourThresholdMinutes);
                var key = isHour ? "RoomGameModeInfo_Race_Time_Hour" : "RoomGameModeInfo_Race_Time";
                str = manager.translate("OnlineMessage", key).build(isHour ? minutes / 60 : minutes);
                self.Endurance.setState(hasEndurance, isInEndurance);
                self.Endurance.setText(str);

                var hasTimeTrial = room_game_mode == gtengine::RoomGameMode::TIME_TRIAL;
                var isInTimeTrial = !isFreeRun;
                str = manager.translate("OnlineMessage", "RoomGameModeInfo_Race_Time").build(rc.qualifier_period / 60);
                self.TimeTrial.setState(hasTimeTrial, isInTimeTrial);
                self.TimeTrial.setText(str);

                var hasDriftTrial = room_game_mode == gtengine::RoomGameMode::DRIFT_TRIAL;
                var isInDriftTrial = !isFreeRun;
                str = manager.translate("OnlineMessage", "RoomGameModeInfo_Race_Time").build(rc.qualifier_period / 60);
                self.Drift.setState(hasDriftTrial, isInDriftTrial);
                self.Drift.setText(str);

                var isInPractice = !isInQualifier && !isInRace && !isInEndurance && !isInTimeTrial && !isInDriftTrial;
                self.Practice.setState(true, isInPractice);
            }
            else
            {
                self.FreeRun.setState(true, true);
                self.Practice.setState(false);
                self.Qualify.setState(false);
                self.Race.setState(false);
                self.Endurance.setState(false);
                self.TimeTrial.setState(false);
                self.Drift.setState(false);
            }
        }

        method reflectRoomGameMode(room_game_mode)
        {
            self.reset(false);
            self.Practice.setState(true);

            switch (room_game_mode)
            {
                case gtengine::RoomGameMode::FREERUN:
                    self.FreeRun.setState(true);
                    self.Practice.setState(false);
                    break;

                case gtengine::RoomGameMode::RACE:
                    self.Race.setState(true);
                    break;

                case gtengine::RoomGameMode::RACE_WITH_QUALIFIER:
                    self.Race.setState(true);
                    self.Qualify.setState(true);
                    break;

                case gtengine::RoomGameMode::TIME_TRIAL:
                    self.TimeTrial.setState(true);
                    break;

                case gtengine::RoomGameMode::DRIFT_TRIAL:
                    self.Drift.setState(true);
                    break;

                case gtengine::RoomGameMode::ENDURANCE:
                    self.Endurance.setState(true);
                    break;

                case gtengine::RoomGameMode::ENDURANCE_WITH_QUALIFIER:
                    self.Endurance.setState(true);
                    self.Qualify.setState(true);
                    break;
            }
        }
    }

    module ModeItemBase
    {
        method setState(visible, active = false)
        {
            if (visible)
            {
                self.Normal.visible = true;
                self.setActive(active);
            }

            self.visible = visible;
        }

        method setActive(active)
        {
            if (self.defined("Active"))
            {
                self.Active.visible = active;
            }
        }

        method setText(text)
        {
            self.Normal::Info::Pack::label.text = text;
            self.Active::Info::Pack::label.text = text;
        }
    }

    module Mode_L
    {
        import ModeBase::*;
        
        module Practice
        {
            import ModeItemBase::*;
        }

        module FreeRun
        {
            import ModeItemBase::*;
        }

        module Qualify
        {
            import ModeItemBase::*;
        }

        module TimeTrial
        {
            import ModeItemBase::*;
        }

        module Race
        {
            import ModeItemBase::*;
        }

        module Endurance
        {
            import ModeItemBase::*;
        }

        module Drift
        {
            import ModeItemBase::*;
        }
    }

    module Mode_M
    {
        import ModeBase::*;
        
        module Practice
        {
            import ModeItemBase::*;
        }

        module FreeRun
        {
            import ModeItemBase::*;
        }

        module Qualify
        {
            import ModeItemBase::*;
        }

        module TimeTrial
        {
            import ModeItemBase::*;
        }

        module Race
        {
            import ModeItemBase::*;
        }

        module Endurance
        {
            import ModeItemBase::*;
        }

        module Drift
        {
            import ModeItemBase::*;
        }
    }

    module Mode_S
    {
        import ModeBase::*;
        
        module Practice
        {
            import ModeItemBase::*;
        }

        module FreeRun
        {
            import ModeItemBase::*;
        }

        module Qualify
        {
            import ModeItemBase::*;
        }

        module TimeTrial
        {
            import ModeItemBase::*;
        }

        module Race
        {
            import ModeItemBase::*;
        }

        module Endurance
        {
            import ModeItemBase::*;
        }

        module Drift
        {
            import ModeItemBase::*;
        }
    }
}