













module PROJECT
{
    function onLoad(update_context)
    {
        update_context.createRenderContext(1);
        var render_context = update_context.getRenderContext(0);
        SequenceUtil::startPageSimple(render_context, ArcadeRoot, OverLapRoot);
    }

    function onUnload(update_context)
    {
        var render_context = update_context.getRenderContext(0);
        render_context.disableInput();
    }

    function exit(context)
    {
        main::GameSequence::setArgumentObject(nil);
        SequenceUtil::startProjectSimple(context, "gtmode");
    }

    function IsDevelop(context)
    {
        var is_debug = false;
        return pdiext::isQABuild() || is_debug;
    }

    module SEQUENCE
    {
        static EXIT = -1;
        static GAME_MODE = 0;
        static DIFFICULTY = 1;
        static COURSE_CATEGORY = 2;
        static COURSE = 3;
        static CAR_CATEGORY = 4;
        static CAR = 5;
        static CAR_DISPLAY = 6;
        static CAR_COLOR = 7;
        static CAR_SPLIT = 8;
        static START_RACE = 9;
        static TRANSMISSION = 10;
        static DRIFT_TYPE = 11;
    }

    module DIFFICULTY
    {
        static EASY = 0;
        static NORMAL = 1;
        static HARD = 2;
    }

    module COURSE_CATEGORY
    {
        static ORIGINAL = "original";
        static CIRCUIT = "circuit";
        static CITY = "city";
        static SNOW_DIRT = "snow_dirt";
        static EDIT = "edit";
    }

    module CAR_CATEGORY
    {
        static RIDING_CAR = 0;
        static RENT_A_CAR = 1;
        static GARAGE = 2;
    }

    module TRANSMISSION
    {
        static AT = 0;
        static MT = 1;
    }

    module DRIFT_TYPE
    {
        static SECTOR = 0;
        static ENDLESS = 1;
    }

    static gGameModeSequence = [
        gtengine::GameMode::SINGLE_RACE : [
            SEQUENCE::COURSE_CATEGORY,
            SEQUENCE::COURSE,
            SEQUENCE::CAR_CATEGORY,
            SEQUENCE::CAR,
            SEQUENCE::CAR_DISPLAY,
            SEQUENCE::CAR_COLOR,
            SEQUENCE::TRANSMISSION,
            SEQUENCE::DIFFICULTY
        ],

        gtengine::GameMode::TIME_ATTACK : [
            SEQUENCE::COURSE_CATEGORY,
            SEQUENCE::COURSE,
            SEQUENCE::CAR_CATEGORY,
            SEQUENCE::CAR,
            SEQUENCE::CAR_DISPLAY,
            SEQUENCE::CAR_COLOR,
            SEQUENCE::TRANSMISSION,
        ],

        gtengine::GameMode::DRIFT_ATTACK : [
            SEQUENCE::COURSE_CATEGORY,
            SEQUENCE::COURSE,
            SEQUENCE::CAR_CATEGORY,
            SEQUENCE::CAR,
            SEQUENCE::CAR_DISPLAY,
            SEQUENCE::CAR_COLOR,
            SEQUENCE::TRANSMISSION,
            SEQUENCE::DRIFT_TYPE,
        ],

        gtengine::GameMode::SPLIT_BATTLE : [
            SEQUENCE::COURSE_CATEGORY,
            SEQUENCE::COURSE,
            SEQUENCE::CAR_SPLIT
        ],
    ];

    class SequenceCondition
    {
        attribute game_mode;
        attribute current;
        attribute index;
        attribute progression;
        attribute difficulty;
        attribute car_category;
        attribute cp;
        attribute cp2;
        attribute dp;
        attribute dp2;
        attribute manual_transmission;
        attribute course_category;
        attribute course_code;
        attribute selected_dirt_course;
        attribute selected_snow_course;
        attribute selected_kart_permit_course;
        attribute selected_kartonly_course;
        attribute transmission;
        attribute drift_type;
        attribute edited_course_data;
        attribute _2p_battle_laps;

        method __init__()
        {
            self.index = -1;
            self.current = SEQUENCE::GAME_MODE;
            self.progression = true;
        }

        method enterGameModeSequence(game_mode)
        {
            self.game_mode = game_mode;
            self.index = 0;

            var sequence_list = gGameModeSequence[game_mode];
            self.current = sequence_list[self.index];
            self.progression = true;
            self.difficulty = nil;
            self.car_category = nil;
            self.cp = nil;
            self.cp2 = nil;
            self.dp = GAME_STATUS.user_profile.residence.getArcadePlayer(0);
            self.dp2 = GAME_STATUS.user_profile.residence.getArcadePlayer(1);
            self.course_category = nil;
            self.course_code = nil;
            self.selected_dirt_course = nil;
            self.selected_snow_course = nil;
            self.selected_kart_permit_course = nil;
            self.selected_kartonly_course = nil;
            self.drift_type = nil;
            self.edited_course_data = nil;
            self._2p_battle_laps = 2;
        }

        method exitArcadeSequencee()
        {
            self.current = SEQUENCE::EXIT;
        }

        method leaveGameModeSequence()
        {
            self.game_mode = nil;
            self.current = SEQUENCE::GAME_MODE;
        }

        method nextGameModeSequence(next)
        {
            if (self.game_mode != nil)
            {
                var sequence_list = gGameModeSequence[self.game_mode];
                if (sequence_list != nil)
                {
                    if (next != nil)
                    {
                        var index = sequence_list.indexOf(next);
                        if (index != nil)
                        {
                            self.index = index;
                            self.current = next;
                        }
                    }
                    else
                    {
                        self.index++;
                        if (self.index < sequence_list.size)
                        {
                            // Go to next one
                            self.current = sequence_list[self.index];
                        }
                        else
                        {
                            // Reached end, we start the race
                            self.current = SEQUENCE::START_RACE;
                        }
                    }
                }
            }
            else
            {
                self.leaveGameModeSequence();
            }

            self.progression = true;
        }

        method prevGameModeSequence(prev)
        {
            if (self.game_mode != nil)
            {
                var sequence_list = gGameModeSequence[self.game_mode];
                if (sequence_list != nil)
                {
                    if (prev != nil)
                    {
                        var index = sequence_list.indexOf(prev);
                        if (index != nil)
                        {
                            self.index = index;
                            self.current = prev;
                        }
                    }
                    else 
                    {
                        if (self.current == SEQUENCE::START_RACE)
                            self.index = sequence_list.size - 1;
                        else
                            self.index--;

                        if (self.index < 0)
                            self.leaveGameModeSequence(nil);
                        else
                            self.current = sequence_list[self.index];
                    }
                }
            }
            else
            {
                self.current = SEQUENCE::EXIT;
            }

            self.progression = false;
        }

        method skipCurrentSequence()
        {
            if (self.progression)
                nextGameModeSequence();
            else
                prevGameModeSequence();
        }

        method jumpGameModeSequence(next)
        {
            if (self.game_mode != nil)
            {
                var sequence_list = gGameModeSequence[self.game_mode];
                if (sequence_list != nil)
                {
                    if (next != nil)
                    {
                        var index = sequence_list.indexOf(next);
                        if (index != nil)
                        {
                            self.index = index;
                            self.current = next;
                        }
                    }
                    else
                    {
                        self.index++;
                        if (self.index < sequence_list.size)
                        {
                            self.current = sequence_list[self.index];
                        }
                    }
                }
            }
            else
            {
                self.leaveGameModeSequence();
            }

            self.progression = true;
        }

        method checkEnableGarageCar(garage_car)
        {
            if (garage_car.invalid)
                return false;
            else if (self.selected_dirt_course && !garage_car.having_dirt_tire)
                return false;
            else if (self.selected_snow_course && !garage_car.having_snow_tire)
                return false;
            else
            {
                var is_racing_kart = gtengine::MSpecDB::checkFlag(garage_car.car_code, gtengine::GenericFlag::IS_RACING_KART);
                if (!is_racing_kart && self.selected_kartonly_course)
                    return false;
            }

            return true;
        }

        method checkEnableRentACar(car_code)
        {
            if (self.selected_dirt_course || self.selected_snow_course)
            {
                var having_dirt_tire = gtengine::MSpecDB::checkFlag(car_code, gtengine::GenericFlag::HAVE_DIRT_TIRE);
                if (!having_dirt_tire)
                    return false;
            }
            else
            {
                var is_racing_kart = gtengine::MSpecDB::checkFlag(car_code, gtengine::GenericFlag::IS_RACING_KART);
                if (!is_racing_kart && self.selected_kartonly_course)
                    return false;
            }

            return true;
        }

        method isLastSequence()
        {
            var sequence_list = gGameModeSequence[self.game_mode];
            var current = sequence_list[self.index];
            var last = sequence_list[sequence_list.size - 1];

            if (self.game_mode == gtengine::GameMode::DRIFT_ATTACK)
            {
                last = gSequenceCondition.edited_course_data != nil ? SEQUENCE::TRANSMISSION : SEQUENCE::DRIFT_TYPE;
            }

            return current == last;
        }
    }

    static gSequenceCondition = SequenceCondition();

    function GetGameModeName(game_mode)
    {
        var game_mode_name = "";
        var res = gtengine::GameMode.find_static(function(pair) { return pair[1] == game_mode; });
        game_mode_name = res[0][0].toString();
        return game_mode_name;
    }

    function GetGameModeText(game_mode)
    {
        var game_mode_name = GetGameModeName(game_mode);
        return manager.translate("RaceTypeName", "GameMode_%{game_mode_name}");
    }

    function ERROR(context, page, keyword, args)
    {
        var s = manager.translate(page, keyword);
        if (args != nil)
        {
            s = s.build(args);
        }

        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, s);
    }

    function QUERY(context, page, keyword, args)
    {
        var s = manager.translate(page, keyword);
        if (args != nil)
        {
            s = s.build(args);
        }

        return DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, s);
    }
}