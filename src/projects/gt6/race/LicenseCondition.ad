













module LicenseCondition
{
    static sLicenseMode = nil;

    function connect()
    {
        sLicenseMode = gtengine::MLicenseMode();
        sLicenseMode.connect(ORG);
    }

    function isEnable()
    {
        return sLicenseMode.enable;
    }

    function getLicenseMode()
    {
        return sLicenseMode;
    }

    function makeConditionData(data_arrray)
    {
        var cond_list = [];
        var num = data_arrray.size;

        for (var idx = 0; idx < num; idx++)
        {
            var cond = gtengine::MLicenseCondition();
            var data = data_arrray[idx];
            cond.check_type = data.check_type;
            cond.condition = data.condition;
            cond.connection = data.connection;
            
            switch (cond.check_type)
            {
                default:
                    cond.uint_value = data.uint_value;
                    break;
                    
                case gtengine::LicenseCheckType::VELOCITY:
                case gtengine::LicenseCheckType::V_POSITION:
                case gtengine::LicenseCheckType::FUEL_AMOUNT:
                case gtengine::LicenseCheckType::FUEL_CONSUMPTION:
                case gtengine::LicenseCheckType::ROAD_DISTANCE:
                    cond.float_value = data.float_value;
                    break;
            }

            cond_list.push(cond);
        }

        return cond_list;
    }

    function checkLicenseCondtion()
    {
        if (sLicenseMode == nil)
            return;

        var license_condition = gSequenceCondition.event.license_condition;
        if (!license_condition.isDefault())
        {
            sLicenseMode.useBasicFinishCondition(license_condition.use_basic_finish);
            sLicenseMode.setStopOnFinish(license_condition.stop_on_finish);
            sLicenseMode.clearGadgetType();

            var num = license_condition.gadget_names.size;
            for (var idx = 0; idx < num; idx++)
                sLicenseMode.addGadgetType(license_condition.gadget_names[idx]);

            sLicenseMode.setFinishCondition(makeConditionData(license_condition.finish_condition));
            sLicenseMode.setFailureCondition(makeConditionData(license_condition.failure_condition));
            sLicenseMode.setSuccessCondition(makeConditionData(license_condition.success_condition));

            sLicenseMode.setTargetSlotID(getPlayerSlot(0));

            switch (license_condition.display_mode)
            {
                default:
                    sLicenseMode.setFreeCourse(false);
                    break;

                case gtengine::LicenseDisplayModeType::PYLON_NUM:
                case gtengine::LicenseDisplayModeType::PYLON_TIME:
                    sLicenseMode.setFreeCourse(true);
                    ORG.setDisableChapterMode();
                    break;


            }

            sLicenseMode.enable = true;
        }
        else
        {
            sLicenseMode.enable = false;
            sLicenseMode.clearGadgetType();
            sLicenseMode.setFreeCourse(false);
        }
    }
}