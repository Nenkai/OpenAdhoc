











module PROJECT::ROOT
{
#ifdef GT4O_US_BETA
    static current_wheel_category;
    static current_wheel_maker;
    static current_car;
    static current_list;
    static last_tried_wheel;
#else
    static current_wheel_category = nil;
    static current_wheel_maker = nil;
    static current_car = nil;
    static current_list = nil;
    static last_tried_wheel = nil;
#endif

    function getUsedWheelPeriod()
    {
        var num = 0;
        var flg = true;

        while (WheelData.defined("used%02d_carlist".format(num)))
            num++;

        return num;
    }

    static period;

    function onLoad(context)
    {
        period = getUsedWheelPeriod();
    }

    function getWheelList()
    {
        var listname;
        if (current_wheel_maker == "used")
            listname = "used%02d_carlist".format(main::game.calendar.getElapsedDate(period));
        else
            listname = current_wheel_maker + "_carlist";

        if (!WheelData.defined(listname))
        {
            return [];
        }
        else
            return WheelData[listname];
    }

    function onInitialize(context)
    {
        hidden.visible = false;

        enterPage(context, ROOT, "WheelShopTitle");
        ROOT["Common"]["ToolTip"]["tip"].remove();
        ROOT["Common"]["ToolTip"]["tip"].value = context.translate(WingShopRoot, "how to try this on");

        current_car = main::game.garage.riding_car;
        current_car.setupPartsBuffer();
        current_list = getWheelList();

        Price.text = main::menu::MUtility::GetMoneyString(500);

        if (current_wheel_maker == "used")
        {
            UsedLabel.visible = true;
            Logo.visible = false;
        }
        else
        {
            UsedLabel.visible = false;
            Logo.visible = true;
            Logo.image_path = "image/gtmode/gtauto/logo/" + current_wheel_maker + ".png";
            Logo.doInitialize(context);
        }

        if (main::game.garage.hasRidingCar())
        {
            CarFace.car_garage = current_car;
            CarFace.action_type = "normal";
            CarFace.quality_level = 1;
            CarFace.syncLoading();
            CarFace.car_model.motion = 2;
            CarFace.loadModelOptionMotion("image/gtmode/gtauto/wheelShop_camera.mot");
        }
        
        var length = current_car.getLength().toFloat() / 1000.0;
        CarFace.car_model.tx = 0.0;
        CarFace.car_model.tz = (length * 0.5) - 1.5;
        CarFace.car_model.ry = 0.0;
        CarFace.car_model.warp();

        var size = current_list.size;
        for (var i = 0; i < size; i++)
        {
            var wheel = current_list[i];
            var item = hidden::Item.doCopy();
            item["bg"].image_path = "image/piece/wheel_mini/" + wheel + ".png";
            ScrollBox::SelectBox.appendChild(context, item);
            item.defineStatic("wheel", wheel);
        }

        ScrollBox::SelectBox.callFocus(ROOT);
    }

    function onFinalize(context)
    {
        ScrollBox::SelectBox.clearChildren(context);
        leavePage(context, ROOT);

        current_wheel_maker = nil;
        current_list = nil;
        last_tried_wheel = nil;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        start_page(context, WheelMakerRoot);
        return EVENTRESULT_FILTER;
    }

    function tryon(wheel)
    {
        if (last_tried_wheel != nil && last_tried_wheel == wheel)
            return;

        CarFace.wheel = wheel;
        last_tried_wheel = wheel;
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym) 
        {

        }

        return EVENTRESULT_CONTINUE;
    }

    function onActivate(context, event)
    {
        var wheel = event.widget["wheel"];
        tryon(wheel);

        if (current_car.haveTireCategoryWheel(current_wheel_category, wheel))
        {
            main::sound.play("disable");
            openConfirmDialog(context, DIALOG_ERROR, context.translate(ROOT, "You have this wheel"));
        }
        else
        {
            if (!sureEnoughMoney(context, 500))
            {
                return EVENTRESULT_FILTER;
            }

            main::sound.play("ok");

            var res = openConfirmDialog(context, DIALOG_QUERY, context.translate(ROOT, "Do you buy this?"));
            if (res)
            {
                main::game.incMoney(-500);
                refreshMoney(ROOT);
                main::game.calendar.putBuyWheelEvent(wheel, current_wheel_category, current_wheel_maker == "used" ? true : false);
                current_car.setTireCategoryWheel(current_wheel_category, wheel);
                current_car.syncWheel();
                refreshMoney(ROOT);

                openConfirmDialog(context, DIALOG_OK, context.translate(ROOT, "You bought this"));
                start_page(context, GTAutoRoot);
            }
        }

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ScrollBox::SelectBox
{
    function onValueChanged(context, index) { }
}

module PROJECT::ROOT::hidden::Item
{
    function onFocusEnter(context, event)
    {
        var item = event.widget;
        var name = item["wheel"];
        Name.text = getWheelName(context, name, current_wheel_maker == "used");
        tryon(name);
        return EVENTRESULT_FILTER;
    }
}