module PROJECT::ROOT
{
	function setActor(widget)
	{
		widget.actor = main::menu::MBlinkActor(widget);
		widget.actor.period = 0.25;
	}

	setActor(Yes::imgf);
	setActor(No::imgf);

	static currentFree = -2;
	static manager = nil;
	static watcher = nil;
	static saved = false;
	static bootCreateMode = false;
	static autoSaveCreateMode = false;
	static confirmOpend = false;

	function onCancel(context, item)
	{
		main::sound.play("cancel");
		exitMenu(context);
		return EVENTRESULT_FILTER;
	}

	function exitMenu(context)
	{
		main::sound.play("cancel");
		watcher.remove();
		manager = nil;
	
		if (bootCreateMode)
		{
			context.startPage(Warning);
			return;
		}
	
		context.finish();
	
		context.transition = main::menu::MColorTransition();
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		if (!autoSaveCreateMode)
		{
			main::game.next_sequence = "menu";
			main::game.next_menu_project = main::game.last_menu_project;
		}
	}

	function onInitialize(context)
	{
		manager = main::menu::MMemoryCardManager("MODE_SAVE_GAME");
	
		watcher = main::menu::MScriptWatcher(context, GameSave, "onCheck");
		watcher.interval = 1;
		watcher.append();
	
		confirmOpend = false;
	
		ROOT.setFocus(bootCreateMode ? Yes : No);
	
		saved = false;
	}

	function onCheck(context)
	{
		if (manager.isConnect())
		{
			if (manager.isFormat())
			{
				var prevFree = currentFree;
				currentFree = manager.free;
	
				if (currentFree != prevFree)
					free.text = StoreHouse::free_space_kb.value.format(currentFree);
			}
			else
			{
				free.text = StoreHouse::unformat.value;
				currentFree = -1;
			}
		}
		else
		{
			if (confirmOpend)
			{
				confirmOpend = false;
				YesNoDialog::simpleClose(context);
			}
	
			free.text = "";
			currentFree = -2;
		}
	}

	function doFormatSave(context)
	{
		main::sound.play("ok");
		print "format and save.";
	
		confirmOpend = false;
		ProgressDialog::open(context, StoreHouse::formating.value);
		YesNoDialog::simpleClose(context);
	
		var file = manager.getNewFile();
		var r = file.format(manager, ProgressDialog::setTarget);
	
		if (r)
		{
			print "format success.";
			ProgressDialog::setTarget(0.0);
			ProgressDialog::setTarget(0.0);
			doSave(context);
		}
		else
		{
			print "format failed.";
			OKDialog::open(context, oksound, cancelsound, StoreHouse::format_error.value);
			ProgressDialog::close(context);
		}
	}

	function doDelOverwrite(context)
	{
		main::sound.play("ok");
		print "delete and save.";
	
		confirmOpend = false;
		ProgressDialog::open(context, StoreHouse::deleting.value);
		YesNoDialog::simpleClose(context);
	
		var file = manager.getNewFile();
		var r = file.remove(manager, ProgressDialog::setTarget);
	
		if (r)
		{
			print("remove success.");
			ProgressDialog::setTarget(0.0);
			ProgressDialog::setTarget(0.0);
			doSave(context);
		}
		else
		{
			print("delete failed.");
			OKDialog::open(context, oksound, cancelsound, StoreHouse::write_error.value);
			ProgressDialog::close(context);
		}
	}

	function doOverwrite(context)
	{
		main::sound.play("ok");
		doSave(context);
	}

	function doSave(context)
	{
		print("save.");
		ProgressDialog::open(context, StoreHouse::writing.value);
	
		if (confirmOpend)
		{
			confirmOpend = false;
			YesNoDialog::simpleClose(context);
		}
	
		var file = manager.getNewFile();
		if (file.save(manager, StoreHouse::gt4p_game_data.value, ProgressDialog::setTarget))
		{
			print("save success.");
			saved = true;
			manager.clearAutoSaveDisabled();
			OKDialog::open(context, oksound, cancelsound, StoreHouse::save_complete.value);
			ROOT.setFocus(ROOT::No);
		}
		else
		{
			print("save failed.");
			OKDialog::open(context, oksound, cancelsound, StoreHouse::write_error.value);
		}
	
		ProgressDialog::close(context);
	}

	function oksound(context)
	{
		main::sound.play("ok");
	}
	
	function cancelsound(context)
	{
		main::sound.play("cancel");
	}
}

module PROJECT::ROOT::Yes
{
	function onActivate(context, item)
	{
		main::sound.play("ok");
	
		if (manager.isConnect())
		{
			if (manager.isFormat())
			{
				var file = manager.getNewFile();
				var datasize = file.size;
				var r = file.isExist(manager);
	
				if (r == false)
				{
					var filesize = file.readSize(manager);
					print "size %{datasize} / %{filesize}\n";
	
					if (filesize == datasize || (datasize - filesize) <= manager.realFree)
					{
						confirmOpend = true;
						YesNoDialog::open(context, (filesize == datasize ? doOverwrite : doDelOverwrite), cancelsound, StoreHouse::overwrite_file.value, 0);
					}
					else
					{
						OKDialog::open(context, oksound, cancelsound, StoreHouse::not_enough_space.value.format(datasize - filesize));
					}
				}
				else if (r == true)
				{
					if ((datasize > (manager.realFree - 1)))
						OKDialog::open(context, oksound, cancelsound, StoreHouse::not_enough_space.value.format(datasize));
					else
						doSave(context);
				}
				else
					OKDialog::open(context, oksound, cancelsound, StoreHouse::read_error.value);
			}
			else
			{
				confirmOpend = true;
				YesNoDialog::open(context, doFormatSave, cancelsound, StoreHouse::format_save_file.value, 0);
			}
		}
		else
		{
			OKDialog::open(context, oksound, cancelsound, StoreHouse::nocard.value);
		}
	
		return EVENTRESULT_FILTER;
	}


	function dummy()
	{
	}
}

module PROJECT::ROOT::No
{
	function onActivate(context, item)
	{
		exitMenu(context);
		return EVENTRESULT_FILTER;
	}
}