module FreeRunProject::FreeRunRoot
{
    #include "../quick-share/icon.ad";

    var quick_work = main::menu::MQuickWork();

    for (var i = 1; i <= quick_work.numberOfEntries; i++)
    {
        var widget = ROOT["Grid" + i];
        setMoveActor(widget, 640 + (392 * 2 * i), 0, 0.15);
    }

    function noGymkhana(context)
    {
        var quick_work = main::menu::MQuickWork();
        var course_label = quick_work.courseLabel;

        if (CourseData.defined(course_label) && CourseData[course_label].length <= 0.0)
        {
            main::sound.play("disable");
            openConfirmDialog(context, 2, context.translate(ROOT, "no available").format(context.translate(ROOT, "CourseNameCaption", course_label)));
            return false;
        }
        else
            return true;
    }
	
    function onInitialize(context)
    {
        var quick_work = main::menu::MQuickWork();
        
        if (quick_work.canReplay == false)
        {
            Buttons::Replay.visible = false;
            Buttons::SaveReplay.visible = false;
        }
        else 
        {
            Buttons::Replay.visible = true;
            Buttons::SaveReplay.visible = true;
        }

        if (quick_work.canSaveGhost == false)
            Buttons::SaveGhost.visible = false;
        else
            Buttons::SaveGhost.visible = true;

        if (quick_work.IsBSpec == false)
            Buttons::Spectator.visible = false;
        else
            Buttons::Spectator.visible = true;

        if (quick_work.raceLabel == "freerun")
        {
            Sessionbest_Label.visible = true;
            Sessionbest_Time.visible = true;
        }
        else 
        {
            Buttons::Logger.visible = false;
            Buttons::Ranking.visible = false;
            Buttons::LoadGhost.visible = false;
            Sessionbest_Label.visible = false;
            Sessionbest_Time.visible = false;
        }

        var entryNum = 1; // Yes let's loop to 1

        for (var i = 0; i < entryNum; i++)
        {
            ROOT["Grid" + (i + 1)]["CarName"].text = quick_work.getGridCarName(i);
            ROOT["Grid" + (i + 1)]["CarName"].abbreviate();
            ROOT["Grid" + (i + 1)]["ColorChip"].setColor(quick_work.getColorChipInfo(i));
        }

        for (var i = 1; i <= entryNum; i++)
        {
            var widget = ROOT["Grid" + i];
            widget.actor.out = true;
            widget.actor.warp();
            widget.actor.out = false;
        }

        if (quick_work.playerGridNumber >= 0)
        {
            var gnum = quick_work.playerGridNumber + 1;
            ROOT["Grid" + gnum]["CarName"].color = ROOT::Hidden::MyGridColor.color;
            ROOT["Grid" + gnum]["GridNumber"].color = ROOT::Hidden::MyGridColor.color;
        }

        var course_label = quick_work.courseLabel;
        Title.text = context.translate(ROOT, "CourseName", course_label);

        Sessionbest_Time.text = main::menu::MUtility::GetTimeString(quick_work.BestTime);

        ToolTip_Upper::Year.text = getCarYearStrings(context, quick_work, ROOT);
        ToolTip_Upper::Year.adjustScale();
        ToolTip_Upper::DriveTrain.text = getDrivetrainStrings(context, quick_work, ROOT);
        ToolTip_Upper::DriveTrain.adjustScale();
        ToolTip_Upper::Power.text = getPowerStrings(context, quick_work, ROOT);
        ToolTip_Upper::Power.adjustScale();
        ToolTip_Upper::Torque.text = getTorqueStrings(context, quick_work, ROOT);
        ToolTip_Upper::Torque.adjustScale();
        CarCategory.text = getCarCategoryStrings(context, quick_work, ROOT);

        main::sound.startStreamEx("pcm", "default_quick", -1, 1, main::game.option.menu_bgm_volume);
        setIconPosition(context);
        setDefaultIconFocus(context);
    }

    function set_next_start_project()
    {
        main::game.next_menu_project = main::game.major_menu_project;
    }

    static icon_name_tbl = [
        "Start",
        "Spectator",
        "Replay",
        "SaveReplay",
        "Ranking",
        "Setting",
        "SaveGhost",
        "LoadGhost",
        "Logger",
        "Option",
        "Exit"
    ];

    function onKeyPress(context, event)
    {
        if (event.keysym == 65362 || event.keysym == 65364)
        {
            return true;
        }

        return EVENTRESULT_CONTINUE;
    }

    function setIconPosition(context)
    {
        var max = icon_name_tbl.size;
        var num = 0;

        for (var i = 0; i < max; i++)
        {
            if (ROOT::Buttons[icon_name_tbl[i]].visible == true)
                num++;
        }

        var screen_w = 640;
        var icon_w = 60;
        var space = 0;

        if (num >= 10)
            space = -4;

        var st = ((screen_w - ((num * icon_w))) - (space * (num - 1))) / 2;
        var c = 0;
        
        for (var i = 0; i < max; i++)
        {
            if (ROOT::Buttons[icon_name_tbl[i]].visible == true)
            {
                ROOT::Buttons[icon_name_tbl[i]].x = st + ((icon_w + space) * c);
                c++;
            }
        }
    }

    function onCancel(context, event, item)
    {
        main::sound.play("cancel");
        main::sound.stopStream();
        
        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_EXIT";

        context.transition.panOut(context);
        context.transition.syncOut(context);

        set_next_start_project();
        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module FreeRunProject::FreeRunRoot::Buttons::Start
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();
        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_START";
        quick_work.cursorPosition = getIconIndex(context, "Start");

        context.transition.panOut(context);
        context.transition.syncOut(context);

        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module FreeRunProject::FreeRunRoot::Buttons::Replay
{
    function onActivate(context)
    {
        if (!noGymkhana(context))
            return EVENTRESULT_FILTER;
        
        main::sound.play("ok");
        main::sound.stopStream();
        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_REPLAY";
        quick_work.cursorPosition = getIconIndex(context, "Replay");
        
        context.transition.panOut(context);
        context.transition.syncOut(context);

        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module FreeRunProject::FreeRunRoot::Buttons::SaveReplay
{
    function onActivate(context)
    {
        if (!noGymkhana(context))
            return EVENTRESULT_FILTER;
        
        main::sound.play("ok");
        main::sound.stopStream();
        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_SAVE_REPLAY";
        quick_work.cursorPosition = getIconIndex(context, "SaveReplay");
        
        context.transition.panOut(context);
        context.transition.syncOut(context);

        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module FreeRunProject::FreeRunRoot::Buttons::SaveGhost
{
    function onActivate(context)
    {
        if (!noGymkhana(context))
            return EVENTRESULT_FILTER;
        
        main::sound.play("ok");
        main::sound.stopStream();
        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_SAVE_GHOST";
        quick_work.cursorPosition = getIconIndex(context, "SaveGhost");
        
        context.transition.panOut(context);
        context.transition.syncOut(context);

        set_next_start_project();
        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module FreeRunProject::FreeRunRoot::Buttons::LoadGhost
{
    function onActivate(context)
    {
        if (!noGymkhana(context))
            return EVENTRESULT_FILTER;
        
        main::sound.play("ok");
        main::sound.stopStream();
        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_LOAD_GHOST";
        quick_work.cursorPosition = getIconIndex(context, "LoadGhost");
        
        context.transition.panOut(context);
        context.transition.syncOut(context);

        set_next_start_project();
        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module FreeRunProject::FreeRunRoot::Buttons::Ranking
{
    function onActivate(context)
    {
        if (!noGymkhana(context))
            return EVENTRESULT_FILTER;
        
        main::sound.play("ok");
        main::sound.stopStream();
        var quick_work = main::menu::MQuickWork();
        quick_work.cursorPosition = getIconIndex(context, "Ranking");
        
        start_page(context, RankingRoot);

        return EVENTRESULT_FILTER;
    }
}

module FreeRunProject::FreeRunRoot::Buttons::Setting
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();
        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_SETTINGS";
        quick_work.cursorPosition = getIconIndex(context, "Setting");
        
        context.transition.panOut(context);
        context.transition.syncOut(context);

        set_next_start_project();
        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module FreeRunProject::FreeRunRoot::Buttons::Logger
{
    function onActivate(context)
    {
        if (!noGymkhana(context))
            return EVENTRESULT_FILTER;
        
        main::sound.play("ok");
        main::sound.stopStream();
        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_LOGGER";
        quick_work.cursorPosition = getIconIndex(context, "Logger");
        
        context.transition.panOut(context);
        context.transition.syncOut(context);

        set_next_start_project();
        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module FreeRunProject::FreeRunRoot::Buttons::Spectator
{
    function onActivate(context)
    {
        if (!noGymkhana(context))
            return EVENTRESULT_FILTER;
        
        main::sound.play("ok");
        main::sound.stopStream();
        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_SPECTATOR";
        quick_work.cursorPosition = getIconIndex(context, "Spectator");
        
        context.transition.panOut(context);
        context.transition.syncOut(context);

        set_next_start_project();
        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module FreeRunProject::FreeRunRoot::Buttons::Option
{
    function onActivate(context)
    {        
        main::sound.play("ok");
        main::sound.stopStream();
        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_OPTION";
        quick_work.cursorPosition = getIconIndex(context, "Option");
        
        context.transition.panOut(context);
        context.transition.syncOut(context);

        set_next_start_project();
        context.finish();

        return EVENTRESULT_FILTER;
    }
}

module FreeRunProject::FreeRunRoot::Buttons::Exit
{
    function onActivate(context)
    {        
        main::sound.play("ok");
        main::sound.stopStream();
        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_EXIT";
        
        context.transition.panOut(context);
        context.transition.syncOut(context);

        set_next_start_project();
        context.finish();

        return EVENTRESULT_FILTER;
    }
}