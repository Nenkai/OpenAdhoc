/* SCE-RT View Online (SVO)
 * "SVO is a generic, object-oriented set of modules that implements common online features including user mail, 
 *	message boards, chat rooms, game rooms, downloadable updates, real-time stats, and more."
 */

#define SELECT_XML_NODE_SAFE(out_name, expr, ret_value_if_nil) \
	var out_name; \
	if ((out_name = expr) == nil) \
		return ret_value_if_nil

#ifndef GT4O_US_BETA
static sLocation = nil;
static sIpAddr = "";
#endif

static sSvoGameId = "0";

#ifdef GT4O_US_BETA
static sIpAddress = nil;
#endif

#ifndef GT4O_US_BETA
function SetLocation(code)
{
	sLocation = code;
}
#endif

function GetUrl(urlName)
{
	var svoRoot = main::network.svo_url;
	SELECT_XML_NODE_SAFE(node, gHttp.GetXml(svoRoot), nil);

#ifdef GT4O_US_BETA
	gHttp.PrintXmlNodes(node, 0);
#endif

	SELECT_XML_NODE_SAFE(node, node.getFirstNode("XML"), nil);
	SELECT_XML_NODE_SAFE(node, node.getFirstNode("URL_List"), nil);

#ifdef GT4O_US_BETA
	sIpAddress = node.getAttribute("IPAddress")
	if (sIpAddress == nil)
		return nil;
#else
	if (sIpAddr == "")
	{
		sIpAddr = node.getAttribute("IPAddress");
	}
#endif

	SELECT_XML_NODE_SAFE(node, node.getFirstNode(urlName), nil);
	return node.value;
}

function GetFirstNode(urlName, firstNodeName)
{
	SELECT_XML_NODE_SAFE(url, GetUrl(urlName), nil);
	SELECT_XML_NODE_SAFE(node, gHttp.GetXml(url), nil);

#ifdef GT4O_US_BETA
	gHttp.PrintXmlNodes(node, 0);
#endif

	SELECT_XML_NODE_SAFE(node, node.getFirstNode("XML"), nil);
	SELECT_XML_NODE_SAFE(node, node.getFirstNode(firstNodeName), nil);
	return node;
}

function GetResultId(node, statusName)
{
	if (node == nil)
		return nil;

	
	SELECT_XML_NODE_SAFE(node, node.getFirstNode("XML"), nil);
	SELECT_XML_NODE_SAFE(node, node.getFirstNode(statusName), nil);
	SELECT_XML_NODE_SAFE(node, node.getFirstNode("status"), nil);
	SELECT_XML_NODE_SAFE(nodeId, node.getFirstNode("id"), nil);

	var nodeMessage;
	if ((nodeMessage = node.getFirstNode("message")) != nil)
	{
	}
	return nodeId.value;
}

function GetResult(node, statusName, successId)
{
	SELECT_XML_NODE_SAFE(id, GetResultId(node, statusName), 0);
	var success = (id == successId);
	if (!success)
	{

	}

	return success;
}

function PushRequest(array, node, attr, value)
{
	var tmp = node.getFirstNode(attr);
	if (tmp == nil)
	{
	}
	else
	{
		var str = tmp.getAttribute("name");
		if (str != nil)
		{
			array.push(str);
			array.push(value);
		}
	}
}

function Login(accountId, user, password)
{
	SELECT_XML_NODE_SAFE(node, GetFirstNode("loginURL", "Login"), false);
	
	var url = node.getAttribute("action");
	var array = [];

#ifdef GT4O_US_BETA
	PushRequest(array, node, "userName", user);
	PushRequest(array, node, "accountID", accountId);
	node = gHttp.PostSvoLogin(url, user, password, sIpAddress, array);
#else
	PushRequest(array, node, "accountID", accountId);
	PushRequest(array, node, "userName", user);
	node = gHttp.PostSvoLogin(url, user, password, sIpAddr, array);
#endif

	GetResult(node, "Login", "20600");
	return;
}

#ifdef GT4O_US_BETA
function Logout()
{
	var node;
	if ((node = GetFirstNode("logoutURL", "Logout")) == nil)
		return false;
	else
		return true;
}
#endif

#ifdef GT4O_US_BETA
function CreateArcadeGame(mediusGameId, remotePlayers, eventId)
#else
function CreateArcadeGame(mediusGameId, remotePlayers)
#endif
{
	SELECT_XML_NODE_SAFE(node, GetFirstNode("gameArcadeCreateURL", "Create_Game"), false);
	var url = node.getAttribute("action");

	var array = [];

	PushRequest(array, node, "SCERTGameID", mediusGameId);

	var nodeGameMode;
	if ((nodeGameMode = node.getFirstNode("GameMode")) != nil)
	{
		PushRequest(array, node, "GameMode", nodeGameMode.value);
	}

	var gameName = main::network.my_name + main::menu::MSystem::GetGMTDateTimeString();
	PushRequest(array, node, "GameName", gameName);
	PushRequest(array, node, "HostPlayerList", main::network.my_id.toString());
	PushRequest(array, node, "RemotePlayerList", remotePlayers);

#ifdef GT4O_US_BETA
	PushRequest(array, node, "TimePerDivision", "30");
#else
	PushRequest(array, node, "TimePerDivision", "5");
#endif

	PushRequest(array, node, "NumDivisions", "1");

#ifdef GT4O_US_BETA
	PushRequest(array, node, "locationID", eventId);
#else
	PushRequest(array, node, "locationID", main::menu::MCourseData::GetID(sLocation).toString());
#endif

	node = gHttp.PostXml(url, array);

	var result = GetResultId(node, "Create_Game");
	if (result == "20400")
	{
		SELECT_XML_NODE_SAFE(node, node["XML"][0]["Create_Game"][0]["gameID"], false);

		sSvoGameId = node[0].value;
		main::network.raceMasterNotifySvoGameId(sSvoGameId.toInt());
		return true;
	}
	else
	{
		return false;
	}
}

#ifndef GT4O_US_BETA
function FinishGame(totalTime, carId)
{
	SELECT_XML_NODE_SAFE(node, GetFirstNode("gameFinishURL", "Finish_Game"), 0);
	var url = node.getAttribute("action");
	var array = [];

	PushRequest(array, node, "SVOGameID", sSvoGameId);
	PushRequest(array, node, "ReturnState", "1");
	PushRequest(array, node, "metersDriven", "0");
	PushRequest(array, node, "place", "1");
	PushRequest(array, node, "totalLapTime", totalTime);
	PushRequest(array, node, "fastestLapTime", "0");
	PushRequest(array, node, "collisions", "0");
	PushRequest(array, node, "car", carId);

	node = gHttp.PostXml(url, array);
	GetResult(node, "Finish_Game", "20407");
	return;
}
#endif

static sLocationRankingUrl = nil;

function GetLocationRankingSelection()
{
	SELECT_XML_NODE_SAFE(node, GetFirstNode("statsLocationURL", "Location_Leaderboard"), nil);

	gHttp.PrintXmlNodes(node, 0);

	var url = node.getAttribute("action");
	SELECT_XML_NODE_SAFE(node, node.getFirstNode("locations"), nil);
	SELECT_XML_NODE_SAFE(type, node.getAttribute("type"), nil);

	if (type != "select")
		return nil;

	SELECT_XML_NODE_SAFE(name, node.getAttribute("name"), nil);
	sLocationRankingUrl = url + "?" + name + "=";

	SELECT_XML_NODE_SAFE(nodeList, node["location"], nil);

	var array = [];
	for (var i = 0; i < nodeList.size; i++)
	{
		if (nodeList[i] == nil)
			return nil;

		SELECT_XML_NODE_SAFE(id, nodeList[i].getAttribute("ID"), nil);

		var pair = [];
		pair.push(id);
		pair.push(nodeList[i].value);
		array.push(pair);
	}

	return array;
}

#ifdef GT4O_US_BETA
function GetLocationRanking(locationId, start, count)
#else
function GetLocationRanking(locationId, start)
#endif
{
	if (sLocationRankingUrl == nil)
	{
		SELECT_XML_NODE_SAFE(node, GetFirstNode("statsLocationURL", "Location_Leaderboard"), nil);

		var url = node.getAttribute("action");
		SELECT_XML_NODE_SAFE(node, node.getFirstNode("locations"), nil);
		SELECT_XML_NODE_SAFE(name, node.getAttribute("name"), nil);
		sLocationRankingUrl = url + "?" + name + "=";
	}

#ifdef GT4O_US_BETA
	var url = sLocationRankingUrl + locationId + "&start=" + start.toString() + "&end=" + (start + count - 1).toString();
#else
	var url = sLocationRankingUrl + locationId + "&start=" + start.toString() + "&end=" + (start + 8).toString();
#endif

	SELECT_XML_NODE_SAFE(node, gHttp.GetXml(url), nil);

	gHttp.PrintXmlNodes(node, 0);

	SELECT_XML_NODE_SAFE(node, node.getFirstNode("XML"), nil);
	SELECT_XML_NODE_SAFE(node, node.getFirstNode("Location_Leaderboard"), nil);
	SELECT_XML_NODE_SAFE(node, node.getFirstNode("Stats"), nil);

#ifdef GT4O_US_BETA
	var mydata = nil;
#else
	var nStats = (node.getAttribute("end").toInt() - node.getAttribute("start").toInt());
	var array = [];
#endif

	var my;
	if ((my = node.getFirstNode("my")) != nil)
	{
		SELECT_XML_NODE_SAFE(rank, my.getAttribute("rank"), nil);
		SELECT_XML_NODE_SAFE(car, my.getAttribute("CAR"), nil);
		SELECT_XML_NODE_SAFE(results, my.getAttribute("RESULTS"), nil);

#ifdef GT4O_US_BETA
		mydata = [];
		mydata.push(rank);
		mydata.push(car);
		mydata.push(results);
#else
		var data = [];
		data.push(rank);
		data.push(nil);
		data.push(car);
		data.push(results);
		array.push(data);
#endif
	}

#ifdef GT4O_US_BETA
	var array = [];
	var nodeList;
	if ((nodeList = node["user"]) != nil)
	{
#else
	if (nStats > 0)
	{
		var nodeList;
		if (nodeList = node["user"] == nil)
			return nil;
#endif
		for (var i = 0; i < nodeList.size; i++)
		{
			if (nodeList[i] == nil)
				return nil;

			SELECT_XML_NODE_SAFE(rank, nodeList[i].getAttribute("rank"), nil);
#ifdef GT4O_US_BETA
			SELECT_XML_NODE_SAFE(id, nodeList[i].getAttribute("userID"), nil);
#endif
			SELECT_XML_NODE_SAFE(name, nodeList[i].getAttribute("username"), nil);
			SELECT_XML_NODE_SAFE(car, nodeList[i].getAttribute("CAR"), nil);
			SELECT_XML_NODE_SAFE(results, nodeList[i].getAttribute("RESULTS"), nil);

			var data = [];
			data.push(rank);
#ifdef GT4O_US_BETA
			data.push(id);
#endif
			data.push(name);
			data.push(car);
			data.push(results);
			array.push(data);
		}
	}

#ifdef GT4O_US_BETA
	return [mydata, array];
#else
	return array;
#endif
}